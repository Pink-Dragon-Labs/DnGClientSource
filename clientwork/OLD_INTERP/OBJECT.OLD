//	object.cpp

#include <stdio.h>
#include <string.h>

#include "sol.hpp"

#include "kernel.hpp"
#include "memmgr.hpp"
#include "msg.hpp"
#include "object.hpp"
#include "pmachine.hpp"
#include "resource.hpp"
#include "script.hpp"
#include "sendstac.hpp"
#include "string.hpp"
#include "textid.hpp"
#include "vocab.hpp"
#include "objinfo.hpp"

ObjectInfo *objInfo = NULL;
size_t indexedPropertyOffsets[MaxIndexedProperty];

int gSelectorDictSize = 0;

////////////////////////////////////////////////////////////////////////////

Object::Object(MemID id, MemID source, size_t offset, size_t sz)
{
	//	create an Object from the Object found in an .HEP file
	if ( !id.IsValid() )
		msgMgr->Fatal ( "Object::Object called with invalid id handle of 0x%x", (ushort)id );

	if ( !source.IsValid() )
		msgMgr->Fatal ( "Object::Object called with invalid source handle of 0x%x", (ushort)source );

	Object* obj = (Object*) &source[offset];

	//	initialize the fixed properties
	size 		= obj->size;
//	methDict	= obj->methDict;
	classNum	= obj->classNum;
	script	= obj->script;
	super		= obj->super;
	info		= obj->info;
	
	_selectorDict = new SelectorDict;
	_selectorDict->nRefs = 1;

	//	copy the rest of the data from the end of the object to the end of us
	memcpy(this + 1, obj + 1, sz - sizeof(*obj));

	this->id = id;

	AddToObjects();
}

Object::Object(MemID id, MemID clonee) :
	id(id), size(0), classNum(0), info(0)
{
	//	clone an object

	ObjectID obj = (ObjectID) clonee;
	obj.AssureValid();

	size 		= obj->size;
//	methDict	= obj->methDict;
	classNum	= obj->classNum;
	script	= obj->script;
	super		= obj->super;
	info		= obj->info;

	_selectorDict = obj->_selectorDict;

	if ( !_selectorDict )
		msgMgr->Fatal ( "Selector dictionary is not valid on Object::Object ( id, clonee )" );

 	_selectorDict->nRefs++;

	//	copy the variable length portion
	memcpy(this + 1, (Object*) *clonee + 1,
		obj->size * sizeof(Property) - sizeof(Object));

	//	if we're copying from a class, set our super to the class and turn off
	//	our class bit
	if (obj->info & CLASSBIT) {
		super = obj->id;
		info &= ~CLASSBIT;
	}

	//	mark the object as cloned
	info |= CLONEBIT;

	//	increment script's reference count
	((ScriptID) script)->nRefs++;

	AddToObjects();
}

Object::~Object()
{
	ObjectID obj = (ObjectID)id;

	if ( !obj.IsObject() ) {
		msgMgr->Alert ( "Object::~Object called with invalid id member of 0x%x", (short)id );
		return;
	}

	DeleteFromObjects();

	id = 0;

	if ( !--_selectorDict->nRefs ) {
		_selectorDict->~SelectorDict();
		free ( _selectorDict );
		_selectorDict = NULL;
	}

	((ScriptID) script)->nRefs--;
}

void
Object::AddToObjects()
{
	//	add to objects list

#ifdef DEBUG
	if ( id ) {
		ObjectInfo *info = (ObjectInfo *)malloc ( sizeof ( ObjectInfo ) );

		if ( !info )
			msgMgr->Fatal ( "Could not allocate object information." );

		info->id = id;
		info->next = objInfo;
		objInfo = info;
	}
#endif
}

void
Object::DeleteFromObjects()
{
	//	remove from objects list

#ifdef DEBUG
	ObjectInfo *info = objInfo, *lastInfo = NULL;

	while ( info ) {
		if ( info->id == id ) {
			if ( lastInfo )
				lastInfo->next = info->next;
			else
				objInfo = objInfo->next;

			free ( info );
			break;
		}

		lastInfo = info;
		info = info->next;
	}

	if ( !info )
		msgMgr->Alert ( "DeleteFromObjects failed for id of 0x%x", (short)id );
#endif
}

const char*
Object::Name()
{
	//	return object's name, or "" if object doesn't have a name property

	const Property* nameProp;
	if (!(nameProp = GetPropAddr(s_name)))
		return "";

	if ( !((MemID)*nameProp).IsValid() )
		return "";

	const char* name = *(TextID) *nameProp;
	if (!name)
		return "";
		
	return name;
}

Bool
Object::RespondsTo(Selector selector)
{
	//	return whether 'selector' is a property or method of us or our
	//	superclasses
	if ( selectorDict()->get ( selector ) != -1 )
		return True;

	return False;
}

////////////////////////////////////////////////////////////////////////////

void
ObjectID::Get(MemID id, size_t ofs, size_t size)
{
	//	get memory to read an .HEP object into

	FakeObjectID::Get(size);

//	Object *obj = (Object *)**this;
//	obj->_selectorDict.Get ( MemDictionary, sizeof ( SelectorDict ) );

	new(handle) Object(*this, id, ofs, size);
}

void
ObjectID::Get(ObjectID clonee)
{
	//	clone an Object

	FakeObjectID::Get(clonee->size * sizeof(Property));
	new(handle) Object(*this, clonee);
}

void
ObjectID::Free()
{
	//	this is necessary because of a bug in WATCOM 9.5 (see MEMID.HPP)
	if (handle) {
		if ( !IsObject() )
			msgMgr->Fatal ( "ObjectID::Free called on non-object (MemID = 0x%x).", handle );

		(**this)->~Object();
	}

	FakeObjectID::Free();
}

ObjectID
ObjectID::Clone()
{
	//	return pointer to copy of an object or class

	//	get memory and copy into it
	ObjectID newObject;
	newObject.Get(*this);

	return newObject;
}

///////////////////////////////////////////////////////////////////////////

SelectorDict::SelectorDict()
{
	size = 0;
	selectors = NULL;
	offsets = NULL;
	scripts = NULL;
}

SelectorDict::~SelectorDict()
{
	if ( selectors ) {
		free ( selectors );
		gSelectorDictSize -= selectorsSize();
	}

	if ( offsets ) {
		free ( offsets );
		gSelectorDictSize -= offsetsSize();
	}

	if ( scripts ) {
		free ( scripts );
		gSelectorDictSize -= scriptsSize();
	}

	size = 0;
	selectors = NULL;
	offsets = NULL;
	scripts = NULL;
}

// add a new selector to this dictionary
void SelectorDict::add ( Selector selector, SCIUWord offset, ScriptID script )
{
	int index = get ( selector );

	if ( index == -1 ) {
		index = size;
		size++;

		void *ptr = NULL;

		ptr = malloc ( selectorsSize() );
		memcpy ( ptr, selectors, selectorsSize() - sizeof ( Selector ) );
		free ( selectors );

		selectors = (Selector *)ptr;

		ptr = malloc ( offsetsSize() );
		memcpy ( ptr, offsets, offsetsSize() - sizeof ( SCIUWord ) );
		free ( offsets );

		offsets = (SCIUWord *)ptr;

		ptr = malloc ( scriptsSize() );
		memcpy ( ptr, scripts, scriptsSize() - sizeof ( SCIUWord ) );
		free ( scripts );

		scripts = (SCIUWord *)ptr;

		if ( !selectors || !offsets || !scripts )
			msgMgr->Fatal ( "Could not reallocate selector dictionary on add." );

		gSelectorDictSize += sizeof ( Selector ) + sizeof ( SCIUWord ) + sizeof ( SCIUWord );
	}

	selectors[index] = selector;
	offsets[index] = offset;
	scripts[index] = (SCIUWord)script;
}

int SelectorDict::get ( Selector selector ) 
{
	Selector *ptr = selectors;

	for ( int i=0; i<size; i++ ) {
		if ( !ptr ) 
			msgMgr->Fatal ( "SelectorDict::get called with no selectors allocated." );

		if ( *ptr++ == selector ) {
			script = scripts[i];
			offset = offsets[i];
			return i;
		}
	}

	return -1;
}
// copy another dictionary's data
void SelectorDict::copy ( SelectorDict *dict )
{
	size = dict->size;

	selectors = (Selector *) malloc ( selectorsSize() );
	offsets = (SCIUWord *) malloc ( offsetsSize() );
	scripts = (SCIUWord *) malloc ( scriptsSize() );

	if ( !selectors || !offsets || !scripts )
		msgMgr->Fatal ( "Could not allocate selector dictionary on copy." );

	gSelectorDictSize += selectorsSize() + offsetsSize() + scriptsSize();

	memcpy ( selectors, dict->selectors, selectorsSize() );
	memcpy ( offsets, dict->offsets, offsetsSize() );
	memcpy ( scripts, dict->scripts, scriptsSize() );
}

////////////////////////////////////////////////////////////////////////////

ObjectID
GetClass(const char* name)
{
	//	return the class object with a given name
	ObjectID obj;
	ObjectInfo *info = objInfo;

	while ( info ) {
		obj = info->id;

		if (!strcmp(obj.Name(), name))
			return obj;

		info = info->next;
	}

	return 0;
}

Selector
GetSelector(const char* name)
{
	//	find the selector number for a selector name

 	char buf[MaxSelectorName + 1];
 	for (int i = 0; GetVocabStr(SELECTOR_VOCAB, i, buf); i++)
		if (!strcmp(name, buf))
			return i;
	return 0;
}

const char*
GetSelectorName(Selector selector, char* str)
{
	if (!GetVocabStr(SELECTOR_VOCAB, selector, str))
		sprintf(str, "%x", selector);
	return str;
}

void
LoadPropOffsets()
{
	// Load the offsets to indexed object properties from a file.

	SCIWord* op = (SCIWord*) *resMgr->Get(MemResVocab, PROPOFS_VOCAB);

	// Read and store each offset.
	for (int i = 0 ; i < MaxIndexedProperty ; ++i)
		indexedPropertyOffsets[i] = *op++;
}

///////////////////////////////////////////////////////////////////////////

ObjectMgr objectMgr;

void
ObjectMgr::SaveRestoreDo(Saveable::Func func, SaveGame* saveGame, Bool save)
{
//	objects.SaveRestoreDo(func, saveGame, save);
	Saveable::SaveRestoreDo(func, saveGame, save);
}

///////////////////////////////////////////////////////////////////////////

void
KIsObject(argList)
{
	pm.acc = (Acc) ((ObjectID) arg(1)).IsObject();
}

void
KRespondsTo(argList)
{
	pm.acc = (Acc) ((ObjectID) arg(1)).RespondsTo(arg(2));
}

void
KClone(argList)
{
	// Get a clone of the object.

	ObjectID theSource = (ObjectID) arg(1);

	ObjectID theClone = ((ObjectID) arg(1)).Clone();

	// Set any properties
	int numArgs;
	for (numArgs = argCount - 1, args += 2;
		  numArgs > 0;
		  numArgs -= 2, args += 2)
		theClone.SetProperty(arg(0), arg(1));

	// clear out the module and line number properties
#ifdef DEBUG
	theSource.SetIndexedProperty ( objModule, -1 );
	theSource.SetIndexedProperty ( objLine, -1 );
#endif

	pm.acc = (Acc) theClone;
}

void
KDisposeClone(argList)
{
	//	if the object was cloned, free it

	ObjectID obj = arg(1);
//	msgMgr->Mono ( "arg = 0x%x %s(%d)\n", (SOL_Handle)obj, __FILE__, __LINE__ );
	obj.AssureValid();
//	msgMgr->Mono ( "%s(%d)\n", __FILE__, __LINE__ );
	if ((obj->Info() & (CLONEBIT | NODISPOSE)) == CLONEBIT) {
//		msgMgr->Mono ( "%s(%d)\n", __FILE__, __LINE__ );
		obj.Free();
//		msgMgr->Mono ( "%s(%d)\n", __FILE__, __LINE__ );
	}
//	msgMgr->Mono ( "%s(%d)\n", __FILE__, __LINE__ );
}

void
KFindSelector(argList)
{
	//	find the selector number for a selector name

 	pm.acc = GetSelector(*StrGetData(arg(1)));
}

void
KFindClass(argList)
{
	//	return the class object for a given name

 	pm.acc = GetClass(*StrGetData(arg(1)));
}

void 
KIsKindOf(argList)
{
	((ObjectID)arg(1)).AssureValid();
	((ObjectID)arg(2)).AssureValid();

	Object *src = (Object *)*(ObjectID)arg(1);
	Object *dst = (Object *)*(ObjectID)arg(2);

	SelectorDict *dict = src->selectorDict();

	while ( dst->selectorDict() != dict ) {
		if ( dst->super ) {
			dst = (Object *)*(dst->super);
		} else {
			pm.acc = 0;
			return;
		}
	}

	pm.acc = 1;
}

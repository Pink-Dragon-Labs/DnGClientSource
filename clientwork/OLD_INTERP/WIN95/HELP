WATCOM Linker Version 10.6
Copyright by WATCOM International Corp. 1985, 1996. All rights reserved.
WATCOM is a trademark of WATCOM International Corp.
usage: wlink {directive}

commands valid for all executable formats:

directive  ::= "File"        obj_spec{","obj_spec}
            | "Name"         exe_file
            | "OPtion"       option{","option}
            | "Library"      library_file{","library_file}
            | "Path"         path_name{";"path_name}
            | "LIBPath"      path_name{";"path_name}
            | "LIBFile"      obj_file{","obj_file}
            | "Debug"        "Watcom" dblist | "Codeview" | "Dwarf" | "All"
            | "MODTrace"     module_name{","module_name}
            | "SYMTrace"     symbol_name{","symbol_name}
            | "SYStem"       system_name
            | "SYStem Begin" system_name directive {directive} "End"
            | "FORMat"       form
            | "Alias"        alias"="symbol_name{","alias"="symbol_name}
            | "REFerence"    symbol_name{","symbol_name}
            | "@"            directive_file
            | "#"            comment
press any key to continue

commands valid for all executable formats (continued):

            | "DISAble"      msg_num{","msg_num}
            | "SOrt"         ["GLobal"] ["ALPhabetical"]
            | "LANGuage"     ("JApanese" | "CHinese" | "KOrean")
obj_spec  ::= obj_file["("obj_member")"] | library_file["("lib_member")"]
dblist    ::= [dboption{","dboption}]
dboption  ::= "LInes" | "Types" | "LOcals" | "All" | "STatic"
option    ::= "Map"["="map_file] | "NODefaultlibs" | "STack="n | "Dosseg"
            | "Verbose" | "OSName="string | "Caseexact" | "NAMELen="n | "Quiet"
            | "SYMFile"["="symbol_file] | "Undefsok" | "STRip" | "MAXErrors="n
            | "NOCASEexact" | "CAChe" | "NOCAChe" | "MANGlednames" | "STATics"
            | "ARTificial" | "REDefsok" | "NOREDefsok" | "CVPack"| "OBJAlign="n


commands valid for the MS-DOS executable format only:

form      ::= "Dos" ["COM"]
directive ::= "Begin"       ovl_sect {ovl_sect} "End"
            | "OVerlay"     class{","class}
            | "NEWsegment"
            | "FIXedlib"    library_file{","library_file}
            | "VEctor"      symbol_name{","symbol_name}
            | "NOVector"    symbol_name{","symbol_name}
            | "FORCEVEctor" symbol_name{","symbol_name}
option    ::= "SMall" | "PACKCode="n | "DIStribute" | "DYNamic" | "ARea="n
            | "NOIndirect" | "STANdard" | "PADSections" | "PACKData="n
ovl_sect  ::= ("Section" | "AUTOSection") ["INto" overlay_file] {directive}


commands valid for the OS/2 and DOS/4G Systems executable formats only:

form      ::= "OS2" ["FLat"|"LE"|"LX"] ["PHYSdevice" | "VIRTdevice"
            | ["DLl"["INITGlobal"|"INITInstance" ["TERMInstance"|"TERMGlobal"]]
            | "PM" | "PMCompatible" | "FULLscreen"] 
directive ::= "NEWsegment"
            | "SEGment"     segdesc{","segdesc}
            | "IMPort"      import{","import}
            | "EXPort"      export{","export}
            | "EXPort"      "="wlib_directive_file
segdesc   ::= segspec segmodel {segmodel}
segspec   ::= seg_name | "Class" class_name | "TYpe" ("CODE" | "DATA")
import    ::= entryname module["."(extname | ordinal)]
option    ::= "Alignment="n | "OLDlibrary="dll_name | "VERSion="major.[minor]
            | "DEscription" description | "MODName="module_name | "Heapsize="n
            | ("ONEautodata" | "MANYautodata" | "NOAutodata") | "PACKCode="n
            | "OFFset="n | "NEWFiles" | "PROTmode" | "STUB="stub_name
            | "PACKData="n
export    ::= entryname["."ordinal]["="internal]["RESident"][iopl_bytes]
segmodel  ::= ("PReload" | "LOadoncall") | ("SHared" | "NONShared")
            | ("EXECUTEOnly" | "EXECUTERead" | "READOnly" | "READWrite")
            | ("Iopl" | "NOIopl") | ("CONforming" | "NONConforming")
            | ("PERManent" | "NONPERManent") | "INValid" | "RESident"
            | "CONTiguous" | "DYNamic"


commands valid for the Microsoft Windows executable formats only:

form      ::= "WIndows" ["DLl"["INITGlobal" | "INITInstance"]] [MEMory] [FOnt]
directive ::= "NEWsegment"
            | "SEGment"     segdesc{","segdesc}
            | "IMPort"      import{","import}
            | "EXPort"      export{","export}
            | "EXPort"      "="wlib_directive_file
segdesc   ::= segspec segmodel {segmodel}
segspec   ::= seg_name | "Class" class_name | "TYpe" ("CODE" | "DATA")
import    ::= entryname module["."(extname | ordinal)]
option    ::= "Alignment="n | "OLDlibrary="dll_name | "VERSion="major.[minor]
            | "DEscription" description | "MODName="module_name | "Heapsize="n
            | ("ONEautodata" | "MANYautodata" | "NOAutodata") | "RWReloccheck"
            | "PACKCode="n | "PACKData="n | "STUB="stub_name
export    ::= entryname["."ordinal]["="internal]["RESident"]
segmodel  ::= ("PReload" | "LOadoncall") | ("SHared" | "NONShared")
            | ("EXECUTEOnly" | "EXECUTERead" | "READOnly" | "READWrite")
            | ("MOVeable" | "FIXed") | "DIScardable"


commands valid for the Microsoft Windows NT executable formats only:

form      ::= "WIndows NT" ["TNT"]
              ["DLl"["INITGlobal"|"INITInstance" ["TERMInstance"|"TERMGlobal"]]
directive ::= "RUntime"     runoption["="major["."minor]]
            | "SEGment"     segdesc{","segdesc}
            | "IMPort"      import{","import}
            | "EXPort"      export{","export}
            | "EXPort"      "="wlib_directive_file
            | "COMmit"       commitopt{","commitopt}
segdesc   ::= segspec segmodel {segmodel}
segspec   ::= seg_name | "Class" class_name | "TYpe" ("CODE" | "DATA")
import    ::= entryname module["."(extname | ordinal)]
option    ::= "Alignment="n | "OLDlibrary="dll_name | "VERSion="major.[minor]
            | "DEscription" description | "MODName="module_name | "Heapsize="n
            | "STUB="stub_name | "OFFset="n
export    ::= entryname["."ordinal]["="internal]["RESident"]
segmodel  ::= ("SHared" | "NONShared") | ("PAGEable" | "NONPageable")
runoption ::= ("NATive" | "WINdows" | "CONsole" | "POSix" | "OS2" | "DOSstyle")
commitopt ::= "STack="n | "Heap="n

 
commands valid for the Phar Lap executable formats only:
 
form      ::= "PHARlap" ["EXTended" | "REX" | "SEGmented"]
directive ::= "RUntime"     runoption{","runoption}
option    ::= "MINData="n | "MAXData="n | "OFFset="n | "STUB="stub_name
runoption ::= "MINReal="n | "MAXReal="n | "CALLBufs="n | "MINIBuf="n
            | "MAXIBuf="n | "NISTack="n | "ISTKsize="n | "PRIVileged"
            | "REALBreak="(n | symbol_name ) | "UNPRIVileged"
 
 
commands valid for the Novell Netware executable format only:
 
form      ::= "NOVell" ["NLM" | "LAN" | "DSK" | "NAM"] description
directive ::= "MODUle"      module_name{","module_name}
            | "IMPort"      import{","import}
            | "EXPort"      export{","export}
            | "Debug"       "Novell" ["ONLyexports"] ["REFerenced"]
option    ::= "SCReenname" description | "CHeck="symbol_name | "MULTILoad"
            | "REentrant" | "CUSTom="file_name | "START="symbol_name
            | "SYnchronize" | "EXit="symbol_name | "THReadname" name
            | "PSeudopreemption" | "VERSion="major[.minor[.revision]]
            | "MESsages="file_name | "HElp="file_name | "XDCdata="file_name
            | "COPYRight" [string] | "SHArelib="file_name
import    ::= entryname
export    ::= entryname
 
 
commands valid for the QNX executable format only:
 
form      ::= "QNX" ["FLat"]
directive ::= "SEGment"     segdesc{","segdesc}
            | "NEWsegment"
option    ::= "NORelocs" | "LOnglived" | "Heapsize="n | "PACKCode="n
            | "PRIVilege"=n | "RESource"("="res_file_name | string)
            | "LInearrelocs" | "OFFset="n | "PACKData="n
segdesc   ::= segspec segmodel {segmodel}
segspec   ::= seg_name | "Class" class_name | "TYpe" ("CODE" | "DATA")
segmodel  ::= "EXECUTEOnly" | "EXECUTERead" | "READOnly" | "READWrite"
 
 
commands valid for the ELF executable format only:
 
form      ::= "ELF" ["DLl"]
directive ::= "MODUle"      module_name{","module_name}
            | "IMPort"      import{","import}
            | "EXPort"      export{","export}
option    ::= "Alignment="n | "OFFSet="n
import    ::= entryname
export    ::= entryname
 

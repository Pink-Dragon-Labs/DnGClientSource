	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Shwstyle.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Data@ArrayID@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PlaneScroll@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PlaneShowStyle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GameRect@SOL_Plane@@QBEABVSOL_Rect@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??APlaneList@@QAEAAVSOL_Plane@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Planes@Screen@@QAEAAVPlaneList@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShowList@Screen@@QAEAAVRectList@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddPic@GraphicsMgr@@QAEHJHAAVSOL_Point@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeletePic@GraphicsMgr@@QAEXJHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7PaletteMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?randArray@@3PAY01HA				; randArray
PUBLIC	?randMask@@3PAJA				; randMask
PUBLIC	?planeScrolls@@3PAVPlaneScroll@@A		; planeScrolls
PUBLIC	?showStyles@@3PAVPlaneShowStyle@@A		; showStyles
PUBLIC	?showStyleDivisions@@3PAHA			; showStyleDivisions
PUBLIC	?showStyleForms@@3PAHA				; showStyleForms
PUBLIC	?palMorphArray@@3PADA				; palMorphArray
_BSS	SEGMENT
?randArray@@3PAY01HA DD 06000H DUP (?)			; randArray
?planeScrolls@@3PAVPlaneScroll@@A DD 01H DUP (?)	; planeScrolls
?showStyles@@3PAVPlaneShowStyle@@A DD 01H DUP (?)	; showStyles
_BSS	ENDS
_DATA	SEGMENT
?palMorphArray@@3PADA DB 01H				; palMorphArray
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?randMask@@3PAJA DD 00H					; randMask
	DD	00H
	DD	03H
	DD	06H
	DD	0cH
	DD	014H
	DD	030H
	DD	060H
	DD	0b8H
	DD	0110H
	DD	0240H
	DD	0500H
	DD	0ca0H
	DD	01b00H
	DD	03500H
	DD	06000H
	DD	0b400H
	DD	012000H
	DD	020400H
	DD	072000H
?showStyleDivisions@@3PAHA DD 01H			; showStyleDivisions
	DD	014H
	DD	014H
	DD	014H
	DD	014H
	DD	0aH
	DD	0aH
	DD	0aH
	DD	0aH
	DD	014H
	DD	014H
	DD	06H
	DD	0aH
	DD	065H
	DD	065H
	DD	02H
?showStyleForms@@3PAHA DD 00H				; showStyleForms
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	00H
	DD	00H
	DD	07H
	DD	07H
	DD	00H
_DATA	ENDS
PUBLIC	?KSetShowStyle@@YAXPAF@Z			; KSetShowStyle
PUBLIC	??0SOL_Rect@@QAE@HHHH@Z				; SOL_Rect::SOL_Rect
PUBLIC	??0SOL_Rect@@QAE@ABV0@@Z			; SOL_Rect::SOL_Rect
PUBLIC	??CFakeArrayID@@QBEPAUArrayHeader@@XZ		; FakeArrayID::operator->
PUBLIC	??0ArrayID@@QAE@G@Z				; ArrayID::ArrayID
PUBLIC	?Data@ArrayID@@QAEPAXXZ				; ArrayID::Data
PUBLIC	??APlaneList@@QAEAAVSOL_Plane@@H@Z		; PlaneList::operator[]
PUBLIC	?Planes@Screen@@QAEAAVPlaneList@@XZ		; Screen::Planes
PUBLIC	?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ	; GraphicsMgr::NextScreen
PUBLIC	?GameRect@SOL_Plane@@QBEABVSOL_Rect@@XZ		; SOL_Plane::GameRect
PUBLIC	??0PlaneShowStyle@@QAE@XZ			; PlaneShowStyle::PlaneShowStyle
PUBLIC	?KillStyle@@YAXPAVPlaneShowStyle@@@Z		; KillStyle
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?Search@PlaneList@@QBEHI@Z:NEAR			; PlaneList::Search
EXTRN	?timeMgr@@3PAVTimeMgr@@A:DWORD			; timeMgr
EXTRN	?Alert@MsgMgr@@QAAHDPADHHZZ:NEAR		; MsgMgr::Alert
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
EXTRN	?Fatal@MsgMgr@@QAAXDPADH0ZZ:NEAR		; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
_DATA	SEGMENT
$SG62061 DB	'Illegal show style for plane ', 00H
	ORG $+2
$SG62062 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Shws'
	DB	'tyle.cpp', 00H
	ORG $+3
$SG62068 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Shws'
	DB	'tyle.cpp', 00H
	ORG $+3
$SG62106 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Shws'
	DB	'tyle.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T62818	DD	019930520H
	DD	01H
	DD	FLAT:$T62821
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T62821	DD	0ffffffffH
	DD	FLAT:$L62814
xdata$x	ENDS
_TEXT	SEGMENT
$T62803 = -68
$T62804 = -72
$T62807 = -76
$T62808 = -80
$T62809 = -84
$T62810 = -88
$T62811 = -92
$T62812 = -96
$T62813 = -112
__$EHRec$ = -12
_args$ = 8
_entry$ = -40
_color$ = -32
_thisStyle$ = -36
_planeID$ = -48
_index$ = -56
_planeRect$ = -28
_priority$ = -44
_newStyle$ = -52
_style$ = -60
_i$62094 = -64
?KSetShowStyle@@YAXPAF@Z PROC NEAR			; KSetShowStyle

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L62819
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 68	 sub	 esp, 104		; 00000068H
  0001b	56		 push	 esi

; 49   : 	// Show style for a plane
; 50   : 	//
; 51   : 	// Input
; 52   : 	// 	arg1-----showStyle
; 53   : 	// 	arg2-----planeID
; 54   : 	//		arg3-----speed	(seconds to complete)
; 55   : 	// 	arg4-----color (-1 is skip color)
; 56   : 	//    arg5-----priority of show style
; 57   : 	//		arg6-----True with animate
; 58   : 	//					False without animate
; 59   : 	//		arg7-----Reference frame (may be needed to remove a screen item)
; 60   : 	//    arg8-----Fade Array for use with FADE styles
; 61   : 	//		arg9-----Number of divisions for a show style (optional)
; 62   : 
; 63   : 	// Planes not allowed to move or be overlaped by a
; 64   : 	// higher priority plane while show style in progress.
; 65   : 	//
; 66   : 	// Make sure this plane is not already
; 67   : 	// in the showStyles list.
; 68   : 
; 69   : 	Bool 		entry;
; 70   : 	uchar 	color;
; 71   : 	int		thisStyle;
; 72   : 
; 73   : 	thisStyle = arg(1);

  0001c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0001f	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00023	89 4d dc	 mov	 DWORD PTR _thisStyle$[ebp], ecx

; 74   : 	if (arg(4) == -1)	{

  00026	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00029	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  0002d	83 f8 ff	 cmp	 eax, -1
  00030	75 0d		 jne	 SHORT $L62058

; 75   : 		entry = True;

  00032	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _entry$[ebp], 1

; 76   : 		color = SOL_BLACK;

  00039	c6 45 e0 00	 mov	 BYTE PTR _color$[ebp], 0

; 78   : 	else {

  0003d	eb 10		 jmp	 SHORT $L62059
$L62058:

; 79   : 		entry = False;

  0003f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _entry$[ebp], 0

; 80   : 		color = arg(4);

  00046	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00049	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  0004c	88 55 e0	 mov	 BYTE PTR _color$[ebp], dl
$L62059:

; 82   : 
; 83   : 
; 84   : 	if (thisStyle > LASTSTYLE)

  0004f	83 7d dc 0f	 cmp	 DWORD PTR _thisStyle$[ebp], 15 ; 0000000fH
  00053	7e 25		 jle	 SHORT $L62060

; 85   : 		msgMgr->Fatal(SrcLoc,"Illegal show style for plane ",arg(2));

  00055	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00058	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0005c	51		 push	 ecx
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:$SG62061
  00062	6a 55		 push	 85			; 00000055H
  00064	68 00 00 00 00	 push	 OFFSET FLAT:$SG62062
  00069	6a 61		 push	 97			; 00000061H
  0006b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  00077	83 c4 18	 add	 esp, 24			; 00000018H
$L62060:

; 86   : 	int planeID = (int)(unsigned short)arg(2);

  0007a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0007d	33 c9		 xor	 ecx, ecx
  0007f	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00083	89 4d d0	 mov	 DWORD PTR _planeID$[ebp], ecx

; 87   : 
; 88   : 	// Save current plane image
; 89   : 	int index = graphMgr->NextScreen()->Planes().Search(planeID);

  00086	8b 55 d0	 mov	 edx, DWORD PTR _planeID$[ebp]
  00089	52		 push	 edx
  0008a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00090	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00095	8b c8		 mov	 ecx, eax
  00097	e8 00 00 00 00	 call	 ?Planes@Screen@@QAEAAVPlaneList@@XZ ; Screen::Planes
  0009c	8b c8		 mov	 ecx, eax
  0009e	e8 00 00 00 00	 call	 ?Search@PlaneList@@QBEHI@Z ; PlaneList::Search
  000a3	89 45 c8	 mov	 DWORD PTR _index$[ebp], eax

; 90   : 	if (index == -1)

  000a6	83 7d c8 ff	 cmp	 DWORD PTR _index$[ebp], -1
  000aa	75 1e		 jne	 SHORT $L62067

; 91   : 		msgMgr->Fatal(SrcLoc,Msg_PlaneNotFound,index);

  000ac	8b 45 c8	 mov	 eax, DWORD PTR _index$[ebp]
  000af	50		 push	 eax
  000b0	6a 6b		 push	 107			; 0000006bH
  000b2	6a 5b		 push	 91			; 0000005bH
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:$SG62068
  000b9	6a 61		 push	 97			; 00000061H
  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  000c7	83 c4 18	 add	 esp, 24			; 00000018H
$L62067:

; 92   : 	SOL_Rect planeRect = graphMgr->NextScreen()->Planes()[index].GameRect();

  000ca	8b 55 c8	 mov	 edx, DWORD PTR _index$[ebp]
  000cd	52		 push	 edx
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  000d4	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  000d9	8b c8		 mov	 ecx, eax
  000db	e8 00 00 00 00	 call	 ?Planes@Screen@@QAEAAVPlaneList@@XZ ; Screen::Planes
  000e0	8b c8		 mov	 ecx, eax
  000e2	e8 00 00 00 00	 call	 ??APlaneList@@QAEAAVSOL_Plane@@H@Z ; PlaneList::operator[]
  000e7	8b c8		 mov	 ecx, eax
  000e9	e8 00 00 00 00	 call	 ?GameRect@SOL_Plane@@QBEABVSOL_Rect@@XZ ; SOL_Plane::GameRect
  000ee	50		 push	 eax
  000ef	8d 4d e4	 lea	 ecx, DWORD PTR _planeRect$[ebp]
  000f2	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 93   : 
; 94   : 	int priority = arg(5);

  000f7	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  000fa	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  000fe	89 4d d4	 mov	 DWORD PTR _priority$[ebp], ecx

; 95   : 	Bool newStyle = True;

  00101	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _newStyle$[ebp], 1

; 96   : 	PlaneShowStyle* style = showStyles;

  00108	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A ; showStyles
  0010e	89 55 c4	 mov	 DWORD PTR _style$[ebp], edx
$L62074:

; 97   : 	while (style) {

  00111	83 7d c4 00	 cmp	 DWORD PTR _style$[ebp], 0
  00115	0f 84 9f 00 00
	00		 je	 $L62075

; 98   : 		if (style->planeID == planeID) {

  0011b	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  0011e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00120	3b 4d d0	 cmp	 ecx, DWORD PTR _planeID$[ebp]
  00123	0f 85 83 00 00
	00		 jne	 $L62076

; 100  : 				(
; 101  : 				((argCount > 8) && (style->divisions == arg(9))) ||
; 102  : 				((argCount <= 8) && (style->divisions == showStyleDivisions[thisStyle]))
; 103  : 				)
; 104  : 				&&
; 105  : 				(style->form == showStyleForms[thisStyle])
; 106  : 				) {

  00129	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0012c	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0012f	83 f8 08	 cmp	 eax, 8
  00132	7e 0f		 jle	 SHORT $L62079
  00134	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00137	0f bf 51 12	 movsx	 edx, WORD PTR [ecx+18]
  0013b	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  0013e	39 50 20	 cmp	 DWORD PTR [eax+32], edx
  00141	74 1d		 je	 SHORT $L62078
$L62079:
  00143	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00146	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00149	83 fa 08	 cmp	 edx, 8
  0014c	7f 3e		 jg	 SHORT $L62077
  0014e	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  00151	8b 4d dc	 mov	 ecx, DWORD PTR _thisStyle$[ebp]
  00154	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00157	3b 14 8d 00 00
	00 00		 cmp	 edx, DWORD PTR ?showStyleDivisions@@3PAHA[ecx*4]
  0015e	75 2c		 jne	 SHORT $L62077
$L62078:
  00160	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  00163	8b 4d dc	 mov	 ecx, DWORD PTR _thisStyle$[ebp]
  00166	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00169	3b 14 8d 00 00
	00 00		 cmp	 edx, DWORD PTR ?showStyleForms@@3PAHA[ecx*4]
  00170	75 1a		 jne	 SHORT $L62077

; 107  : 					newStyle = False;

  00172	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _newStyle$[ebp], 0

; 108  : 					// The reverse of the exit style
; 109  : 					style->percent = 0;

  00179	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  0017c	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 110  : 					entry = True;

  00183	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _entry$[ebp], 1

; 112  : 			else {

  0018a	eb 1e		 jmp	 SHORT $L62080
$L62077:

; 113  : 				// Need the color!
; 114  : 				entry = True;

  0018c	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _entry$[ebp], 1

; 115  : 				color = style->color;

  00193	8b 4d c4	 mov	 ecx, DWORD PTR _style$[ebp]
  00196	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  00199	88 55 e0	 mov	 BYTE PTR _color$[ebp], dl

; 116  : 				KillStyle(style);

  0019c	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?KillStyle@@YAXPAVPlaneShowStyle@@@Z ; KillStyle
  001a5	83 c4 04	 add	 esp, 4

; 117  : 				break;

  001a8	eb 10		 jmp	 SHORT $L62075
$L62080:

; 119  : 			break;

  001aa	eb 0e		 jmp	 SHORT $L62075
$L62076:

; 121  : 		style = style->next;

  001ac	8b 4d c4	 mov	 ecx, DWORD PTR _style$[ebp]
  001af	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  001b2	89 55 c4	 mov	 DWORD PTR _style$[ebp], edx

; 122  : 	}

  001b5	e9 57 ff ff ff	 jmp	 $L62074
$L62075:

; 123  : 
; 124  : //#ifndef WINDOWS
; 125  : 	if (thisStyle <= PLAINFORM)  return;

  001ba	83 7d dc 00	 cmp	 DWORD PTR _thisStyle$[ebp], 0
  001be	7f 05		 jg	 SHORT $L62081
  001c0	e9 58 02 00 00	 jmp	 $L62054
$L62081:

; 126  : //#endif
; 127  : 
; 128  : 	if (newStyle) {

  001c5	83 7d cc 00	 cmp	 DWORD PTR _newStyle$[ebp], 0
  001c9	0f 84 3c 01 00
	00		 je	 $L62101

; 129  : 		style = New PlaneShowStyle();

  001cf	6a 3c		 push	 60			; 0000003cH
  001d1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001d6	83 c4 04	 add	 esp, 4
  001d9	89 45 b8	 mov	 DWORD PTR $T62804[ebp], eax
  001dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001e3	83 7d b8 00	 cmp	 DWORD PTR $T62804[ebp], 0
  001e7	74 0d		 je	 SHORT $L62805
  001e9	8b 4d b8	 mov	 ecx, DWORD PTR $T62804[ebp]
  001ec	e8 00 00 00 00	 call	 ??0PlaneShowStyle@@QAE@XZ ; PlaneShowStyle::PlaneShowStyle
  001f1	89 45 8c	 mov	 DWORD PTR -116+[ebp], eax
  001f4	eb 07		 jmp	 SHORT $L62806
$L62805:
  001f6	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR -116+[ebp], 0
$L62806:
  001fd	8b 45 8c	 mov	 eax, DWORD PTR -116+[ebp]
  00200	89 45 bc	 mov	 DWORD PTR $T62803[ebp], eax
  00203	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0020a	8b 4d bc	 mov	 ecx, DWORD PTR $T62803[ebp]
  0020d	89 4d c4	 mov	 DWORD PTR _style$[ebp], ecx

; 130  : 		style->XRangeArray = NULL;

  00210	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  00213	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 131  : 		style->form = showStyleForms[thisStyle];

  0021a	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  0021d	8b 4d dc	 mov	 ecx, DWORD PTR _thisStyle$[ebp]
  00220	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?showStyleForms@@3PAHA[ecx*4]
  00227	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 132  : 		style->deleteMe = False;

  0022a	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  0022d	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 133  : 		if (argCount > 8)

  00234	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00237	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0023a	83 fa 08	 cmp	 edx, 8
  0023d	7e 0f		 jle	 SHORT $L62087

; 134  : 			style->divisions = arg(9);

  0023f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00242	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  00246	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  00249	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 135  : 		else

  0024c	eb 10		 jmp	 SHORT $L62088
$L62087:

; 136  : 			style->divisions = showStyleDivisions[thisStyle];

  0024e	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  00251	8b 4d dc	 mov	 ecx, DWORD PTR _thisStyle$[ebp]
  00254	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?showStyleDivisions@@3PAHA[ecx*4]
  0025b	89 50 20	 mov	 DWORD PTR [eax+32], edx
$L62088:

; 137  : 		style->planeID = planeID;

  0025e	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  00261	8b 4d d0	 mov	 ecx, DWORD PTR _planeID$[ebp]
  00264	89 08		 mov	 DWORD PTR [eax], ecx

; 138  : 		if (argCount > 7)	{

  00266	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00269	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0026c	83 f8 07	 cmp	 eax, 7
  0026f	0f 8e 8c 00 00
	00		 jle	 $L62089

; 139  : 			style->XRangeSize   = ((ArrayID) arg(8))->size;

  00275	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00278	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  0027c	52		 push	 edx
  0027d	8d 4d b4	 lea	 ecx, DWORD PTR $T62807[ebp]
  00280	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  00285	8b c8		 mov	 ecx, eax
  00287	e8 00 00 00 00	 call	 ??CFakeArrayID@@QBEPAUArrayHeader@@XZ ; FakeArrayID::operator->
  0028c	33 c9		 xor	 ecx, ecx
  0028e	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  00292	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  00295	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 140  : 
; 141  : 			style->XRangeArray  = New SCIWord [style->XRangeSize];

  00298	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  0029b	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0029e	d1 e1		 shl	 ecx, 1
  002a0	51		 push	 ecx
  002a1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002a6	83 c4 04	 add	 esp, 4
  002a9	89 45 b0	 mov	 DWORD PTR $T62808[ebp], eax
  002ac	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  002af	8b 45 b0	 mov	 eax, DWORD PTR $T62808[ebp]
  002b2	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 142  : 			for(int i=0;i<style->XRangeSize;i++)

  002b5	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _i$62094[ebp], 0
  002bc	eb 09		 jmp	 SHORT $L62095
$L62096:
  002be	8b 4d c0	 mov	 ecx, DWORD PTR _i$62094[ebp]
  002c1	83 c1 01	 add	 ecx, 1
  002c4	89 4d c0	 mov	 DWORD PTR _i$62094[ebp], ecx
$L62095:
  002c7	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  002ca	8b 45 c0	 mov	 eax, DWORD PTR _i$62094[ebp]
  002cd	3b 42 24	 cmp	 eax, DWORD PTR [edx+36]
  002d0	7d 2d		 jge	 SHORT $L62097

; 143  : 				style->XRangeArray[i] =	((SCIWord*) ((ArrayID) arg(8)).Data()) [i];	

  002d2	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  002d5	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  002d9	52		 push	 edx
  002da	8d 4d ac	 lea	 ecx, DWORD PTR $T62809[ebp]
  002dd	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  002e2	8b c8		 mov	 ecx, eax
  002e4	e8 00 00 00 00	 call	 ?Data@ArrayID@@QAEPAXXZ	; ArrayID::Data
  002e9	8b 4d c4	 mov	 ecx, DWORD PTR _style$[ebp]
  002ec	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  002ef	8b 4d c0	 mov	 ecx, DWORD PTR _i$62094[ebp]
  002f2	8b 75 c0	 mov	 esi, DWORD PTR _i$62094[ebp]
  002f5	66 8b 04 70	 mov	 ax, WORD PTR [eax+esi*2]
  002f9	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002fd	eb bf		 jmp	 SHORT $L62096
$L62097:

; 146  : 		else  {

  002ff	eb 0a		 jmp	 SHORT $L62101
$L62089:

; 147  : 			style->XRangeSize   = 0;

  00301	8b 4d c4	 mov	 ecx, DWORD PTR _style$[ebp]
  00304	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
$L62101:

; 150  : 	style->entry = entry;

  0030b	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  0030e	8b 45 d8	 mov	 eax, DWORD PTR _entry$[ebp]
  00311	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 151  : 	style->color = color;

  00314	8b 4d c4	 mov	 ecx, DWORD PTR _style$[ebp]
  00317	8a 55 e0	 mov	 dl, BYTE PTR _color$[ebp]
  0031a	88 51 30	 mov	 BYTE PTR [ecx+48], dl

; 152  : 	style->clock = timeMgr->GetTickCount();

  0031d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  00322	8b 10		 mov	 edx, DWORD PTR [eax]
  00324	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0032a	ff 52 04	 call	 DWORD PTR [edx+4]
  0032d	8b 4d c4	 mov	 ecx, DWORD PTR _style$[ebp]
  00330	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 153  : 	style->style = thisStyle;

  00333	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  00336	8b 45 dc	 mov	 eax, DWORD PTR _thisStyle$[ebp]
  00339	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 154  : 	style->animate = arg(6);

  0033c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0033f	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  00343	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  00346	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 155  : 
; 156  : 	// calculate the ticks per processing
; 157  : 	style->speed = (60*arg(3)+style->divisions-1)/style->divisions;

  00349	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0034c	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00350	6b d2 3c	 imul	 edx, 60			; 0000003cH
  00353	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  00356	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00359	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  0035d	8b 4d c4	 mov	 ecx, DWORD PTR _style$[ebp]
  00360	33 d2		 xor	 edx, edx
  00362	f7 71 20	 div	 DWORD PTR [ecx+32]
  00365	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  00368	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 158  : 	if (style->speed == 0) {

  0036b	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  0036e	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00372	75 52		 jne	 SHORT $L62102

; 159  : 		if (style->XRangeArray != NULL)

  00374	8b 4d c4	 mov	 ecx, DWORD PTR _style$[ebp]
  00377	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0037b	74 15		 je	 SHORT $L62103

; 160  : 			delete style->XRangeArray;

  0037d	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  00380	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00383	89 45 a8	 mov	 DWORD PTR $T62810[ebp], eax
  00386	8b 4d a8	 mov	 ecx, DWORD PTR $T62810[ebp]
  00389	51		 push	 ecx
  0038a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0038f	83 c4 04	 add	 esp, 4
$L62103:

; 161  : 		delete style;

  00392	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  00395	89 55 a4	 mov	 DWORD PTR $T62811[ebp], edx
  00398	8b 45 a4	 mov	 eax, DWORD PTR $T62811[ebp]
  0039b	50		 push	 eax
  0039c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003a1	83 c4 04	 add	 esp, 4

; 162  : 		msgMgr->Alert(SrcLoc,Msg_ShowStyleSpeed);

  003a4	68 81 00 00 00	 push	 129			; 00000081H
  003a9	68 a2 00 00 00	 push	 162			; 000000a2H
  003ae	68 00 00 00 00	 push	 OFFSET FLAT:$SG62106
  003b3	6a 61		 push	 97			; 00000061H
  003b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  003bb	51		 push	 ecx
  003bc	e8 00 00 00 00	 call	 ?Alert@MsgMgr@@QAAHDPADHHZZ ; MsgMgr::Alert
  003c1	83 c4 14	 add	 esp, 20			; 00000014H

; 163  : 		return;

  003c4	eb 57		 jmp	 SHORT $L62054
$L62102:

; 165  : 
; 166  : 	if (arg(7)) {

  003c6	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  003c9	0f bf 42 0e	 movsx	 eax, WORD PTR [edx+14]
  003cd	85 c0		 test	 eax, eax
  003cf	74 31		 je	 SHORT $L62107

; 167  : 		// Generate a reference frame
; 168  : 		graphMgr->FrameOut(False);

  003d1	6a ff		 push	 -1
  003d3	6a ff		 push	 -1
  003d5	6a 00		 push	 0
  003d7	6a 00		 push	 0
  003d9	8d 4d 90	 lea	 ecx, DWORD PTR $T62813[ebp]
  003dc	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  003e1	83 ec 10	 sub	 esp, 16			; 00000010H
  003e4	8b cc		 mov	 ecx, esp
  003e6	89 65 a0	 mov	 DWORD PTR $T62812[ebp], esp
  003e9	50		 push	 eax
  003ea	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  003ef	6a 00		 push	 0
  003f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  003f7	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  003ff	ff 52 14	 call	 DWORD PTR [edx+20]
$L62107:

; 170  : 
; 171  : 	if (newStyle) {

  00402	83 7d cc 00	 cmp	 DWORD PTR _newStyle$[ebp], 0
  00406	74 15		 je	 SHORT $L62110

; 172  : 		// Store for processing during frameout
; 173  : 		style->next = showStyles;

  00408	8b 45 c4	 mov	 eax, DWORD PTR _style$[ebp]
  0040b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A ; showStyles
  00411	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 174  : 		showStyles = style;

  00414	8b 55 c4	 mov	 edx, DWORD PTR _style$[ebp]
  00417	89 15 00 00 00
	00		 mov	 DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A, edx ; showStyles
$L62110:
$L62054:

; 176  : }

  0041d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00420	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00427	5e		 pop	 esi
  00428	8b e5		 mov	 esp, ebp
  0042a	5d		 pop	 ebp
  0042b	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L62814:
  00000	8b 45 b8	 mov	 eax, DWORD PTR $T62804[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L62819:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T62818
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KSetShowStyle@@YAXPAF@Z ENDP				; KSetShowStyle
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
;	COMDAT ??CFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeArrayID@@QBEPAUArrayHeader@@XZ PROC NEAR		; FakeArrayID::operator->, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeArrayID@@QBEPAUArrayHeader@@XZ ENDP		; FakeArrayID::operator->
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
EXTRN	_memMgr:DWORD
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
PUBLIC	??0FakeArrayID@@QAE@G@Z				; FakeArrayID::FakeArrayID
;	COMDAT ??0ArrayID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ArrayID@@QAE@G@Z PROC NEAR				; ArrayID::ArrayID, COMDAT

; 38   : 	ArrayID(SOL_Handle h) : FakeArrayID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeArrayID@@QAE@G@Z	; FakeArrayID::FakeArrayID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ArrayID@@QAE@G@Z ENDP				; ArrayID::ArrayID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeArrayID@@QAE@G@Z PROC NEAR			; FakeArrayID::FakeArrayID, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeArrayID@@QAE@G@Z ENDP				; FakeArrayID::FakeArrayID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
PUBLIC	??DFakeArrayID@@QBEPAUArrayHeader@@XZ		; FakeArrayID::operator*
;	COMDAT ?Data@ArrayID@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4
?Data@ArrayID@@QAEPAXXZ PROC NEAR			; ArrayID::Data, COMDAT

; 64   : 	void *Data ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 		return ((char *)**this) + sizeof ( ArrayHeader );

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DFakeArrayID@@QBEPAUArrayHeader@@XZ ; FakeArrayID::operator*
  0000f	83 c0 04	 add	 eax, 4

; 66   : 	}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Data@ArrayID@@QAEPAXXZ ENDP				; ArrayID::Data
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT
_this$ = -4
??DFakeArrayID@@QBEPAUArrayHeader@@XZ PROC NEAR		; FakeArrayID::operator*, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??DFakeArrayID@@QBEPAUArrayHeader@@XZ ENDP		; FakeArrayID::operator*
_TEXT	ENDS
;	COMDAT ??0PlaneShowStyle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0PlaneShowStyle@@QAE@XZ PROC NEAR			; PlaneShowStyle::PlaneShowStyle, COMDAT

; 38   : 	PlaneShowStyle() {percent = 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0PlaneShowStyle@@QAE@XZ ENDP				; PlaneShowStyle::PlaneShowStyle
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@XZ				; SOL_Point::SOL_Point
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
??0SOL_Rect@@QAE@HHHH@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 56   : 	A.x = xa;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 	A.y = ya;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00028	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 	B.x = xb;

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  00031	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 59   : 	B.y = yb;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  0003a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 60   : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
??0SOL_Rect@@QAE@HHHH@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Point@@QAE@XZ PROC NEAR				; SOL_Point::SOL_Point, COMDAT

; 20   : 	SOL_Point() : x(DefaultCoord), y(DefaultCoord) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 ef cd ab
	89		 mov	 DWORD PTR [eax], -1985229329 ; 89abcdefH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 ef cd
	ab 89		 mov	 DWORD PTR [ecx+4], -1985229329 ; 89abcdefH
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Point@@QAE@XZ ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ?GameRect@SOL_Plane@@QBEABVSOL_Rect@@XZ
_TEXT	SEGMENT
_this$ = -4
?GameRect@SOL_Plane@@QBEABVSOL_Rect@@XZ PROC NEAR	; SOL_Plane::GameRect, COMDAT

; 62   : 						GameRect() const			{return gameRect;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GameRect@SOL_Plane@@QBEABVSOL_Rect@@XZ ENDP		; SOL_Plane::GameRect
_TEXT	ENDS
;	COMDAT ??APlaneList@@QAEAAVSOL_Plane@@H@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
??APlaneList@@QAEAAVSOL_Plane@@H@Z PROC NEAR		; PlaneList::operator[], COMDAT

; 29   : 	SOL_Plane& operator[](int index) 					{return *planeArray[index];}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??APlaneList@@QAEAAVSOL_Plane@@H@Z ENDP			; PlaneList::operator[]
_TEXT	ENDS
;	COMDAT ?Planes@Screen@@QAEAAVPlaneList@@XZ
_TEXT	SEGMENT
_this$ = -4
?Planes@Screen@@QAEAAVPlaneList@@XZ PROC NEAR		; Screen::Planes, COMDAT

; 37   : 	PlaneList& Planes() 						{return planes;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?Planes@Screen@@QAEAAVPlaneList@@XZ ENDP		; Screen::Planes
_TEXT	ENDS
;	COMDAT ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ
_TEXT	SEGMENT
_this$ = -4
?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ PROC NEAR	; GraphicsMgr::NextScreen, COMDAT

; 72   : 	Screen*	NextScreen() 							{return &next;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 14	 add	 eax, 20			; 00000014H
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ENDP		; GraphicsMgr::NextScreen
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@ABV0@@Z			; SOL_Point::SOL_Point
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_Rect@@QAE@ABV0@@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0SOL_Rect@@QAE@ABV0@@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??0SOL_Point@@QAE@ABV0@@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 22   : 	SOL_Point(const SOL_Point& p) : x(p.x), y(p.y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0SOL_Point@@QAE@ABV0@@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
PUBLIC	?ProcessEffects@@YAXPAVPlaneShowStyle@@@Z	; ProcessEffects
PUBLIC	?PixelDissolveEffect@@YAXPAVPlaneShowStyle@@@Z	; PixelDissolveEffect
PUBLIC	?WipeDownEffect@@YAXPAVPlaneShowStyle@@@Z	; WipeDownEffect
PUBLIC	?WipeUpEffect@@YAXPAVPlaneShowStyle@@@Z		; WipeUpEffect
PUBLIC	?WipeRightEffect@@YAXPAVPlaneShowStyle@@@Z	; WipeRightEffect
PUBLIC	?WipeLeftEffect@@YAXPAVPlaneShowStyle@@@Z	; WipeLeftEffect
PUBLIC	?HShutterInEffect@@YAXPAVPlaneShowStyle@@@Z	; HShutterInEffect
PUBLIC	?HShutterOutEffect@@YAXPAVPlaneShowStyle@@@Z	; HShutterOutEffect
PUBLIC	?VShutterInEffect@@YAXPAVPlaneShowStyle@@@Z	; VShutterInEffect
PUBLIC	?VShutterOutEffect@@YAXPAVPlaneShowStyle@@@Z	; VShutterOutEffect
PUBLIC	?IrisInEffect@@YAXPAVPlaneShowStyle@@@Z		; IrisInEffect
PUBLIC	?IrisOutEffect@@YAXPAVPlaneShowStyle@@@Z	; IrisOutEffect
_TEXT	SEGMENT
_style$ = 8
?ProcessEffects@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; ProcessEffects

; 179  : {

  0042c	55		 push	 ebp
  0042d	8b ec		 mov	 ebp, esp
  0042f	51		 push	 ecx

; 180  : #ifdef SHOWSTYLES
; 181  : 	switch(style->style) {

  00430	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  00433	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00436	89 4d fc	 mov	 DWORD PTR -4+[ebp], ecx
  00439	8b 55 fc	 mov	 edx, DWORD PTR -4+[ebp]
  0043c	83 ea 01	 sub	 edx, 1
  0043f	89 55 fc	 mov	 DWORD PTR -4+[ebp], edx
  00442	83 7d fc 0b	 cmp	 DWORD PTR -4+[ebp], 11	; 0000000bH
  00446	0f 87 b6 00 00
	00		 ja	 $L62115
  0044c	8b 45 fc	 mov	 eax, DWORD PTR -4+[ebp]
  0044f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L62841[eax*4]
$L62118:

; 182  : 			case DISSOLVENOMORPH:
; 183  : 				PixelDissolveEffect(style);

  00456	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  00459	51		 push	 ecx
  0045a	e8 00 00 00 00	 call	 ?PixelDissolveEffect@@YAXPAVPlaneShowStyle@@@Z ; PixelDissolveEffect
  0045f	83 c4 04	 add	 esp, 4

; 184  : 				break;

  00462	e9 9b 00 00 00	 jmp	 $L62115
$L62119:

; 185  : 			case PIXELDISSOLVE:
; 186  : 				PixelDissolveEffect(style);

  00467	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  0046a	52		 push	 edx
  0046b	e8 00 00 00 00	 call	 ?PixelDissolveEffect@@YAXPAVPlaneShowStyle@@@Z ; PixelDissolveEffect
  00470	83 c4 04	 add	 esp, 4

; 187  : 				break;

  00473	e9 8a 00 00 00	 jmp	 $L62115
$L62120:

; 188  : 			case IRISOUT:
; 189  : 				IrisOutEffect(style);

  00478	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  0047b	50		 push	 eax
  0047c	e8 00 00 00 00	 call	 ?IrisOutEffect@@YAXPAVPlaneShowStyle@@@Z ; IrisOutEffect
  00481	83 c4 04	 add	 esp, 4

; 190  : 				break;

  00484	eb 7c		 jmp	 SHORT $L62115
$L62121:

; 191  : 			case IRISIN:
; 192  : 				IrisInEffect(style);

  00486	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  00489	51		 push	 ecx
  0048a	e8 00 00 00 00	 call	 ?IrisInEffect@@YAXPAVPlaneShowStyle@@@Z ; IrisInEffect
  0048f	83 c4 04	 add	 esp, 4

; 193  : 				break;

  00492	eb 6e		 jmp	 SHORT $L62115
$L62122:

; 194  :  			case WIPERIGHT:
; 195  : 				WipeRightEffect(style);

  00494	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  00497	52		 push	 edx
  00498	e8 00 00 00 00	 call	 ?WipeRightEffect@@YAXPAVPlaneShowStyle@@@Z ; WipeRightEffect
  0049d	83 c4 04	 add	 esp, 4

; 196  : 				break;

  004a0	eb 60		 jmp	 SHORT $L62115
$L62123:

; 197  : 			case WIPELEFT:
; 198  : 				WipeLeftEffect(style);

  004a2	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  004a5	50		 push	 eax
  004a6	e8 00 00 00 00	 call	 ?WipeLeftEffect@@YAXPAVPlaneShowStyle@@@Z ; WipeLeftEffect
  004ab	83 c4 04	 add	 esp, 4

; 199  : 				break;

  004ae	eb 52		 jmp	 SHORT $L62115
$L62124:

; 200  : 			case WIPEDOWN:
; 201  : 				WipeDownEffect(style);	

  004b0	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  004b3	51		 push	 ecx
  004b4	e8 00 00 00 00	 call	 ?WipeDownEffect@@YAXPAVPlaneShowStyle@@@Z ; WipeDownEffect
  004b9	83 c4 04	 add	 esp, 4

; 202  : 				break;

  004bc	eb 44		 jmp	 SHORT $L62115
$L62125:

; 203  : 			case WIPEUP:
; 204  : 				WipeUpEffect(style);

  004be	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  004c1	52		 push	 edx
  004c2	e8 00 00 00 00	 call	 ?WipeUpEffect@@YAXPAVPlaneShowStyle@@@Z ; WipeUpEffect
  004c7	83 c4 04	 add	 esp, 4

; 205  : 				break;

  004ca	eb 36		 jmp	 SHORT $L62115
$L62126:

; 206  : 			case HSHUTTEROUT:
; 207  : 				HShutterOutEffect(style);

  004cc	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  004cf	50		 push	 eax
  004d0	e8 00 00 00 00	 call	 ?HShutterOutEffect@@YAXPAVPlaneShowStyle@@@Z ; HShutterOutEffect
  004d5	83 c4 04	 add	 esp, 4

; 208  : 				break;				

  004d8	eb 28		 jmp	 SHORT $L62115
$L62127:

; 209  : 			case HSHUTTERIN:
; 210  : 				HShutterInEffect(style);

  004da	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  004dd	51		 push	 ecx
  004de	e8 00 00 00 00	 call	 ?HShutterInEffect@@YAXPAVPlaneShowStyle@@@Z ; HShutterInEffect
  004e3	83 c4 04	 add	 esp, 4

; 211  : 				break;

  004e6	eb 1a		 jmp	 SHORT $L62115
$L62128:

; 212  : 			case VSHUTTERIN:
; 213  : 				VShutterInEffect(style);

  004e8	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  004eb	52		 push	 edx
  004ec	e8 00 00 00 00	 call	 ?VShutterInEffect@@YAXPAVPlaneShowStyle@@@Z ; VShutterInEffect
  004f1	83 c4 04	 add	 esp, 4

; 214  : 				break;

  004f4	eb 0c		 jmp	 SHORT $L62115
$L62129:

; 215  : 			case VSHUTTEROUT:
; 216  : 				VShutterOutEffect(style);

  004f6	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  004f9	50		 push	 eax
  004fa	e8 00 00 00 00	 call	 ?VShutterOutEffect@@YAXPAVPlaneShowStyle@@@Z ; VShutterOutEffect
  004ff	83 c4 04	 add	 esp, 4
$L62115:

; 219  : #else
; 220  : 	switch(style->style) {
; 221  : 			case DISSOLVENOMORPH:
; 222  : 			case PIXELDISSOLVE:
; 223  : 			case IRISOUT:
; 224  : 			case IRISIN:
; 225  :  			case WIPERIGHT:
; 226  : 			case WIPELEFT:
; 227  : 
; 228  : 				break;
; 229  : 			case WIPEUP:
; 230  : 			case HSHUTTEROUT:
; 231  : 			case HSHUTTERIN:
; 232  : 			case VSHUTTERIN:
; 233  : 			case VSHUTTEROUT:
; 234  : 				msgMgr->Alert("show style not supported");
; 235  : 				break;
; 236  : 	}
; 237  : #endif
; 238  : }

  00502	8b e5		 mov	 esp, ebp
  00504	5d		 pop	 ebp
  00505	c3		 ret	 0
$L62841:
  00506	00 00 00 00	 DD	 $L62126
  0050a	00 00 00 00	 DD	 $L62127
  0050e	00 00 00 00	 DD	 $L62129
  00512	00 00 00 00	 DD	 $L62128
  00516	00 00 00 00	 DD	 $L62123
  0051a	00 00 00 00	 DD	 $L62122
  0051e	00 00 00 00	 DD	 $L62125
  00522	00 00 00 00	 DD	 $L62124
  00526	00 00 00 00	 DD	 $L62120
  0052a	00 00 00 00	 DD	 $L62121
  0052e	00 00 00 00	 DD	 $L62118
  00532	00 00 00 00	 DD	 $L62119
?ProcessEffects@@YAXPAVPlaneShowStyle@@@Z ENDP		; ProcessEffects
_TEXT	ENDS
PUBLIC	?Bitwidth@@YAHH@Z				; Bitwidth
_TEXT	SEGMENT
_number$ = 8
_width$ = -4
?Bitwidth@@YAHH@Z PROC NEAR				; Bitwidth

; 244  : {

  00536	55		 push	 ebp
  00537	8b ec		 mov	 ebp, esp
  00539	51		 push	 ecx

; 245  : 	int width = 0;

  0053a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _width$[ebp], 0
$L62135:

; 246  : 
; 247  : 	while (number != 0) {

  00541	83 7d 08 00	 cmp	 DWORD PTR _number$[ebp], 0
  00545	74 13		 je	 SHORT $L62136

; 248  : 		number = number >> 1;

  00547	8b 45 08	 mov	 eax, DWORD PTR _number$[ebp]
  0054a	d1 f8		 sar	 eax, 1
  0054c	89 45 08	 mov	 DWORD PTR _number$[ebp], eax

; 249  : 		width += 1;

  0054f	8b 4d fc	 mov	 ecx, DWORD PTR _width$[ebp]
  00552	83 c1 01	 add	 ecx, 1
  00555	89 4d fc	 mov	 DWORD PTR _width$[ebp], ecx

; 250  : 	}

  00558	eb e7		 jmp	 SHORT $L62135
$L62136:

; 251  : 	return(width);

  0055a	8b 45 fc	 mov	 eax, DWORD PTR _width$[ebp]

; 252  : 
; 253  : }

  0055d	8b e5		 mov	 esp, ebp
  0055f	5d		 pop	 ebp
  00560	c3		 ret	 0
?Bitwidth@@YAHH@Z ENDP					; Bitwidth
_TEXT	ENDS
PUBLIC	?Set@SOL_Rect@@QAEXHHHH@Z			; SOL_Rect::Set
PUBLIC	?ShowList@Screen@@QAEAAVRectList@@XZ		; Screen::ShowList
PUBLIC	?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z	; GraphicsMgr::VisiblePlane
PUBLIC	?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ		; SOL_Plane::OnScreen
EXTRN	?Add@RectList@@QAEXABVSOL_Rect@@@Z:NEAR		; RectList::Add
EXTRN	?Clear@RectList@@QAEXXZ:NEAR			; RectList::Clear
_TEXT	SEGMENT
_style$ = 8
_x$ = -44
_width$ = -36
_height$ = -60
_org_width$ = -64
_org_height$ = -56
_row$ = -32
_col$ = -8
_p$ = -4
_r$ = -28
_mask$ = -52
_seq$ = -40
_B$ = -24
_y$ = -48
?PixelDissolveEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR ; PixelDissolveEffect

; 257  : {

  00561	55		 push	 ebp
  00562	8b ec		 mov	 ebp, esp
  00564	83 ec 40	 sub	 esp, 64			; 00000040H

; 258  : 	// This dissolve random number generator was taken 
; 259  : 	// from Graphics Gems pp 224 - 226;
; 260  : 	int x = style->divisions;

  00567	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  0056a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0056d	89 4d d4	 mov	 DWORD PTR _x$[ebp], ecx

; 261  : 	int width,height,org_width,org_height;
; 262  : 	int row,col;
; 263  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  00570	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  00573	8b 02		 mov	 eax, DWORD PTR [edx]
  00575	50		 push	 eax
  00576	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0057c	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  00581	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 264  : 	SOL_Rect& r = p->OnScreen();		

  00584	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00587	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  0058c	89 45 e4	 mov	 DWORD PTR _r$[ebp], eax

; 265  : 
; 266  : 	org_width  = (r.B.x - r.A.x + 1);

  0058f	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00592	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  00595	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00598	2b 02		 sub	 eax, DWORD PTR [edx]
  0059a	83 c0 01	 add	 eax, 1
  0059d	89 45 c0	 mov	 DWORD PTR _org_width$[ebp], eax

; 267  : 	org_height = (r.B.y - r.A.y + 1);

  005a0	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  005a3	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  005a6	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  005a9	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  005ac	83 c0 01	 add	 eax, 1
  005af	89 45 c8	 mov	 DWORD PTR _org_height$[ebp], eax

; 268  : 
; 269  : 	if (width%x)

  005b2	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  005b5	99		 cdq
  005b6	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  005b9	85 d2		 test	 edx, edx
  005bb	74 0f		 je	 SHORT $L62149

; 270  : 		width 	= org_width/x + 1;

  005bd	8b 45 c0	 mov	 eax, DWORD PTR _org_width$[ebp]
  005c0	99		 cdq
  005c1	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  005c4	83 c0 01	 add	 eax, 1
  005c7	89 45 dc	 mov	 DWORD PTR _width$[ebp], eax

; 271  : 	else

  005ca	eb 0a		 jmp	 SHORT $L62150
$L62149:

; 272  : 		width 	= org_width/x;

  005cc	8b 45 c0	 mov	 eax, DWORD PTR _org_width$[ebp]
  005cf	99		 cdq
  005d0	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  005d3	89 45 dc	 mov	 DWORD PTR _width$[ebp], eax
$L62150:

; 273  : 
; 274  : 	if (height%x)

  005d6	8b 45 c4	 mov	 eax, DWORD PTR _height$[ebp]
  005d9	99		 cdq
  005da	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  005dd	85 d2		 test	 edx, edx
  005df	74 0f		 je	 SHORT $L62151

; 275  : 		height	= org_height/x + 1;

  005e1	8b 45 c8	 mov	 eax, DWORD PTR _org_height$[ebp]
  005e4	99		 cdq
  005e5	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  005e8	83 c0 01	 add	 eax, 1
  005eb	89 45 c4	 mov	 DWORD PTR _height$[ebp], eax

; 276  : 	else

  005ee	eb 0a		 jmp	 SHORT $L62152
$L62151:

; 277  : 		height	= org_height/x;	

  005f0	8b 45 c8	 mov	 eax, DWORD PTR _org_height$[ebp]
  005f3	99		 cdq
  005f4	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  005f7	89 45 c4	 mov	 DWORD PTR _height$[ebp], eax
$L62152:

; 278  : 
; 279  : 	long mask ;
; 280  : 	int seq;
; 281  :  	SOL_Rect	B(0,0,x,x);

  005fa	8b 4d d4	 mov	 ecx, DWORD PTR _x$[ebp]
  005fd	51		 push	 ecx
  005fe	8b 55 d4	 mov	 edx, DWORD PTR _x$[ebp]
  00601	52		 push	 edx
  00602	6a 00		 push	 0
  00604	6a 00		 push	 0
  00606	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00609	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 282  :    int y = style->style;

  0060e	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  00611	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00614	89 4d d0	 mov	 DWORD PTR _y$[ebp], ecx

; 283  : 	seq = 1;	

  00617	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _seq$[ebp], 1

; 284  : 
; 285  :    mask = randMask[Bitwidth(width*height-1)];

  0061e	8b 55 dc	 mov	 edx, DWORD PTR _width$[ebp]
  00621	0f af 55 c4	 imul	 edx, DWORD PTR _height$[ebp]
  00625	83 ea 01	 sub	 edx, 1
  00628	52		 push	 edx
  00629	e8 00 00 00 00	 call	 ?Bitwidth@@YAHH@Z	; Bitwidth
  0062e	83 c4 04	 add	 esp, 4
  00631	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?randMask@@3PAJA[eax*4]
  00638	89 45 cc	 mov	 DWORD PTR _mask$[ebp], eax
$L62157:

; 289  : 			row = seq/width;

  0063b	8b 45 d8	 mov	 eax, DWORD PTR _seq$[ebp]
  0063e	99		 cdq
  0063f	f7 7d dc	 idiv	 DWORD PTR _width$[ebp]
  00642	89 45 e0	 mov	 DWORD PTR _row$[ebp], eax

; 290  : 			col = seq%width;

  00645	8b 45 d8	 mov	 eax, DWORD PTR _seq$[ebp]
  00648	99		 cdq
  00649	f7 7d dc	 idiv	 DWORD PTR _width$[ebp]
  0064c	89 55 f8	 mov	 DWORD PTR _col$[ebp], edx

; 291  : 			
; 292  :  			if (row < height) {

  0064f	8b 4d e0	 mov	 ecx, DWORD PTR _row$[ebp]
  00652	3b 4d c4	 cmp	 ecx, DWORD PTR _height$[ebp]
  00655	0f 8d 5f 02 00
	00		 jge	 $L62166

; 293  : 				if ((row==(height-1))&&(org_height%x)) { 

  0065b	8b 55 c4	 mov	 edx, DWORD PTR _height$[ebp]
  0065e	83 ea 01	 sub	 edx, 1
  00661	39 55 e0	 cmp	 DWORD PTR _row$[ebp], edx
  00664	0f 85 3b 01 00
	00		 jne	 $L62161
  0066a	8b 45 c8	 mov	 eax, DWORD PTR _org_height$[ebp]
  0066d	99		 cdq
  0066e	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  00671	85 d2		 test	 edx, edx
  00673	0f 84 2c 01 00
	00		 je	 $L62161

; 294  : 				// if height is not an even multiple of x adjust for last row
; 295  : 					if ((col==(width-1))&&(org_width%x)) {

  00679	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  0067c	83 e8 01	 sub	 eax, 1
  0067f	39 45 f8	 cmp	 DWORD PTR _col$[ebp], eax
  00682	0f 85 98 00 00
	00		 jne	 $L62162
  00688	8b 45 c0	 mov	 eax, DWORD PTR _org_width$[ebp]
  0068b	99		 cdq
  0068c	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  0068f	85 d2		 test	 edx, edx
  00691	0f 84 89 00 00
	00		 je	 $L62162

; 296  : 				// if width is not an even multiple of x ajust for last column
; 297  : 						B.Set(col*x,row*x,col*x+(org_width%x)-1,row*x+(org_height%x)-1);

  00697	8b 4d e0	 mov	 ecx, DWORD PTR _row$[ebp]
  0069a	0f af 4d d4	 imul	 ecx, DWORD PTR _x$[ebp]
  0069e	8b 45 c8	 mov	 eax, DWORD PTR _org_height$[ebp]
  006a1	99		 cdq
  006a2	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  006a5	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  006a9	52		 push	 edx
  006aa	8b 4d f8	 mov	 ecx, DWORD PTR _col$[ebp]
  006ad	0f af 4d d4	 imul	 ecx, DWORD PTR _x$[ebp]
  006b1	8b 45 c0	 mov	 eax, DWORD PTR _org_width$[ebp]
  006b4	99		 cdq
  006b5	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  006b8	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  006bc	52		 push	 edx
  006bd	8b 45 e0	 mov	 eax, DWORD PTR _row$[ebp]
  006c0	0f af 45 d4	 imul	 eax, DWORD PTR _x$[ebp]
  006c4	50		 push	 eax
  006c5	8b 4d f8	 mov	 ecx, DWORD PTR _col$[ebp]
  006c8	0f af 4d d4	 imul	 ecx, DWORD PTR _x$[ebp]
  006cc	51		 push	 ecx
  006cd	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  006d0	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 298  : 						graphMgr->NextScreen()->ShowList().Clear();

  006d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  006db	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  006e0	8b c8		 mov	 ecx, eax
  006e2	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  006e7	8b c8		 mov	 ecx, eax
  006e9	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 299  : 						graphMgr->NextScreen()->ShowList().Add(B);

  006ee	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  006f1	52		 push	 edx
  006f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  006f8	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  006fd	8b c8		 mov	 ecx, eax
  006ff	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00704	8b c8		 mov	 ecx, eax
  00706	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 300  : 				 		graphMgr->ShowBits();

  0070b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00710	8b 10		 mov	 edx, DWORD PTR [eax]
  00712	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00718	ff 52 40	 call	 DWORD PTR [edx+64]

; 302  : 					else {

  0071b	e9 80 00 00 00	 jmp	 $L62163
$L62162:

; 303  : 						B.Set(col*x,row*x,col*x+x-1,row*x+(org_height%x)-1);

  00720	8b 4d e0	 mov	 ecx, DWORD PTR _row$[ebp]
  00723	0f af 4d d4	 imul	 ecx, DWORD PTR _x$[ebp]
  00727	8b 45 c8	 mov	 eax, DWORD PTR _org_height$[ebp]
  0072a	99		 cdq
  0072b	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  0072e	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  00732	52		 push	 edx
  00733	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  00736	0f af 45 d4	 imul	 eax, DWORD PTR _x$[ebp]
  0073a	8b 4d d4	 mov	 ecx, DWORD PTR _x$[ebp]
  0073d	8d 54 08 ff	 lea	 edx, DWORD PTR [eax+ecx-1]
  00741	52		 push	 edx
  00742	8b 45 e0	 mov	 eax, DWORD PTR _row$[ebp]
  00745	0f af 45 d4	 imul	 eax, DWORD PTR _x$[ebp]
  00749	50		 push	 eax
  0074a	8b 4d f8	 mov	 ecx, DWORD PTR _col$[ebp]
  0074d	0f af 4d d4	 imul	 ecx, DWORD PTR _x$[ebp]
  00751	51		 push	 ecx
  00752	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00755	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 304  : 						graphMgr->NextScreen()->ShowList().Clear();

  0075a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00760	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00765	8b c8		 mov	 ecx, eax
  00767	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0076c	8b c8		 mov	 ecx, eax
  0076e	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 305  : 						graphMgr->NextScreen()->ShowList().Add(B);

  00773	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  00776	52		 push	 edx
  00777	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0077d	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00782	8b c8		 mov	 ecx, eax
  00784	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00789	8b c8		 mov	 ecx, eax
  0078b	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 306  : 				 		graphMgr->ShowBits();

  00790	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00795	8b 10		 mov	 edx, DWORD PTR [eax]
  00797	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0079d	ff 52 40	 call	 DWORD PTR [edx+64]
$L62163:

; 309  : 				else {

  007a0	e9 15 01 00 00	 jmp	 $L62166
$L62161:

; 310  : 					if ((col==(width-1))&&(org_width%x)) {

  007a5	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  007a8	83 e8 01	 sub	 eax, 1
  007ab	39 45 f8	 cmp	 DWORD PTR _col$[ebp], eax
  007ae	0f 85 91 00 00
	00		 jne	 $L62165
  007b4	8b 45 c0	 mov	 eax, DWORD PTR _org_width$[ebp]
  007b7	99		 cdq
  007b8	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  007bb	85 d2		 test	 edx, edx
  007bd	0f 84 82 00 00
	00		 je	 $L62165

; 311  : 				// if width is not an even multiple of x ajust for last column
; 312  : 						B.Set(col*x,row*x,col*x+(org_width%x)-1,row*x+x-1);

  007c3	8b 4d e0	 mov	 ecx, DWORD PTR _row$[ebp]
  007c6	0f af 4d d4	 imul	 ecx, DWORD PTR _x$[ebp]
  007ca	8b 55 d4	 mov	 edx, DWORD PTR _x$[ebp]
  007cd	8d 44 11 ff	 lea	 eax, DWORD PTR [ecx+edx-1]
  007d1	50		 push	 eax
  007d2	8b 4d f8	 mov	 ecx, DWORD PTR _col$[ebp]
  007d5	0f af 4d d4	 imul	 ecx, DWORD PTR _x$[ebp]
  007d9	8b 45 c0	 mov	 eax, DWORD PTR _org_width$[ebp]
  007dc	99		 cdq
  007dd	f7 7d d4	 idiv	 DWORD PTR _x$[ebp]
  007e0	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  007e4	52		 push	 edx
  007e5	8b 45 e0	 mov	 eax, DWORD PTR _row$[ebp]
  007e8	0f af 45 d4	 imul	 eax, DWORD PTR _x$[ebp]
  007ec	50		 push	 eax
  007ed	8b 4d f8	 mov	 ecx, DWORD PTR _col$[ebp]
  007f0	0f af 4d d4	 imul	 ecx, DWORD PTR _x$[ebp]
  007f4	51		 push	 ecx
  007f5	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  007f8	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 313  : 						graphMgr->NextScreen()->ShowList().Clear();

  007fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00803	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00808	8b c8		 mov	 ecx, eax
  0080a	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0080f	8b c8		 mov	 ecx, eax
  00811	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 314  : 						graphMgr->NextScreen()->ShowList().Add(B);

  00816	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  00819	52		 push	 edx
  0081a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00820	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00825	8b c8		 mov	 ecx, eax
  00827	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0082c	8b c8		 mov	 ecx, eax
  0082e	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 315  : 			  	 		graphMgr->ShowBits();

  00833	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00838	8b 10		 mov	 edx, DWORD PTR [eax]
  0083a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00840	ff 52 40	 call	 DWORD PTR [edx+64]

; 317  : 					else {

  00843	eb 75		 jmp	 SHORT $L62166
$L62165:

; 318  : 						B.Set(col*x,row*x,col*x+x,row*x+x);

  00845	8b 45 e0	 mov	 eax, DWORD PTR _row$[ebp]
  00848	0f af 45 d4	 imul	 eax, DWORD PTR _x$[ebp]
  0084c	03 45 d4	 add	 eax, DWORD PTR _x$[ebp]
  0084f	50		 push	 eax
  00850	8b 4d f8	 mov	 ecx, DWORD PTR _col$[ebp]
  00853	0f af 4d d4	 imul	 ecx, DWORD PTR _x$[ebp]
  00857	03 4d d4	 add	 ecx, DWORD PTR _x$[ebp]
  0085a	51		 push	 ecx
  0085b	8b 55 e0	 mov	 edx, DWORD PTR _row$[ebp]
  0085e	0f af 55 d4	 imul	 edx, DWORD PTR _x$[ebp]
  00862	52		 push	 edx
  00863	8b 45 f8	 mov	 eax, DWORD PTR _col$[ebp]
  00866	0f af 45 d4	 imul	 eax, DWORD PTR _x$[ebp]
  0086a	50		 push	 eax
  0086b	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0086e	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 319  : 						graphMgr->NextScreen()->ShowList().Clear();

  00873	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00879	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0087e	8b c8		 mov	 ecx, eax
  00880	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00885	8b c8		 mov	 ecx, eax
  00887	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 320  : 						graphMgr->NextScreen()->ShowList().Add(B);

  0088c	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0088f	51		 push	 ecx
  00890	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00896	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0089b	8b c8		 mov	 ecx, eax
  0089d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  008a2	8b c8		 mov	 ecx, eax
  008a4	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 321  : 			  	 		graphMgr->ShowBits();

  008a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  008af	8b 02		 mov	 eax, DWORD PTR [edx]
  008b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  008b7	ff 50 40	 call	 DWORD PTR [eax+64]
$L62166:

; 325  : 
; 326  : 			if (seq & 1) {

  008ba	8b 4d d8	 mov	 ecx, DWORD PTR _seq$[ebp]
  008bd	83 e1 01	 and	 ecx, 1
  008c0	85 c9		 test	 ecx, ecx
  008c2	74 0d		 je	 SHORT $L62167

; 327  : 				seq = (seq >> 1) ^ mask;

  008c4	8b 55 d8	 mov	 edx, DWORD PTR _seq$[ebp]
  008c7	d1 fa		 sar	 edx, 1
  008c9	33 55 cc	 xor	 edx, DWORD PTR _mask$[ebp]
  008cc	89 55 d8	 mov	 DWORD PTR _seq$[ebp], edx

; 329  : 			else

  008cf	eb 08		 jmp	 SHORT $L62168
$L62167:

; 330  : 				seq = (seq >> 1);

  008d1	8b 45 d8	 mov	 eax, DWORD PTR _seq$[ebp]
  008d4	d1 f8		 sar	 eax, 1
  008d6	89 45 d8	 mov	 DWORD PTR _seq$[ebp], eax
$L62168:

; 331  : 		} while(seq != 1);

  008d9	83 7d d8 01	 cmp	 DWORD PTR _seq$[ebp], 1
  008dd	0f 85 58 fd ff
	ff		 jne	 $L62157

; 332  : 		
; 333  : 		// be sure and do the first draw at 0,0
; 334  : 		B.Set(r.A.x,r.A.y,x-1,x-1);

  008e3	8b 4d d4	 mov	 ecx, DWORD PTR _x$[ebp]
  008e6	83 e9 01	 sub	 ecx, 1
  008e9	51		 push	 ecx
  008ea	8b 55 d4	 mov	 edx, DWORD PTR _x$[ebp]
  008ed	83 ea 01	 sub	 edx, 1
  008f0	52		 push	 edx
  008f1	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  008f4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  008f7	51		 push	 ecx
  008f8	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  008fb	8b 02		 mov	 eax, DWORD PTR [edx]
  008fd	50		 push	 eax
  008fe	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00901	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 335  : 		graphMgr->NextScreen()->ShowList().Clear();

  00906	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0090c	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00911	8b c8		 mov	 ecx, eax
  00913	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00918	8b c8		 mov	 ecx, eax
  0091a	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 336  : 		graphMgr->NextScreen()->ShowList().Add(B);

  0091f	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00922	51		 push	 ecx
  00923	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00929	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0092e	8b c8		 mov	 ecx, eax
  00930	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00935	8b c8		 mov	 ecx, eax
  00937	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 337  :  		graphMgr->ShowBits();

  0093c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00942	8b 02		 mov	 eax, DWORD PTR [edx]
  00944	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0094a	ff 50 40	 call	 DWORD PTR [eax+64]

; 338  : 
; 339  : 
; 340  : 		// Clear entire screen 
; 341  : 
; 342  : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  0094d	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00950	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00953	52		 push	 edx
  00954	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00957	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0095a	51		 push	 ecx
  0095b	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  0095e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00961	50		 push	 eax
  00962	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00965	8b 11		 mov	 edx, DWORD PTR [ecx]
  00967	52		 push	 edx
  00968	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0096b	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 343  : 		graphMgr->NextScreen()->ShowList().Clear();

  00970	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00976	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0097b	8b c8		 mov	 ecx, eax
  0097d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00982	8b c8		 mov	 ecx, eax
  00984	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 344  : 		graphMgr->NextScreen()->ShowList().Add(B);

  00989	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  0098c	50		 push	 eax
  0098d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00993	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00998	8b c8		 mov	 ecx, eax
  0099a	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0099f	8b c8		 mov	 ecx, eax
  009a1	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 345  : 		graphMgr->ShowBits();

  009a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  009ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  009ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  009b4	ff 52 40	 call	 DWORD PTR [edx+64]

; 346  : 
; 347  : }

  009b7	8b e5		 mov	 esp, ebp
  009b9	5d		 pop	 ebp
  009ba	c3		 ret	 0
?PixelDissolveEffect@@YAXPAVPlaneShowStyle@@@Z ENDP	; PixelDissolveEffect
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
?Set@SOL_Rect@@QAEXHHHH@Z PROC NEAR			; SOL_Rect::Set, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	A.x = xa;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 75   : 	A.y = ya;

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 76   : 	B.x = xb;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 77   : 	B.y = yb;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 78   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
?Set@SOL_Rect@@QAEXHHHH@Z ENDP				; SOL_Rect::Set
_TEXT	ENDS
;	COMDAT ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ
_TEXT	SEGMENT
_this$ = -4
?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ PROC NEAR	; SOL_Plane::OnScreen, COMDAT

; 80   : 	SOL_Rect&		OnScreen()					{return onScreen;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 4c	 add	 eax, 76			; 0000004cH
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ENDP		; SOL_Plane::OnScreen
_TEXT	ENDS
;	COMDAT ?ShowList@Screen@@QAEAAVRectList@@XZ
_TEXT	SEGMENT
_this$ = -4
?ShowList@Screen@@QAEAAVRectList@@XZ PROC NEAR		; Screen::ShowList, COMDAT

; 60   : 			ShowList() 							{return showList;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?ShowList@Screen@@QAEAAVRectList@@XZ ENDP		; Screen::ShowList
_TEXT	ENDS
EXTRN	?GetPlane@Screen@@QAEPAVSOL_Plane@@H@Z:NEAR	; Screen::GetPlane
;	COMDAT ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z
_TEXT	SEGMENT
_planeId$ = 8
_this$ = -4
?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z PROC NEAR ; GraphicsMgr::VisiblePlane, COMDAT

; 84   : 					{return VisibleScreen().GetPlane(planeId);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _planeId$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	ff 52 44	 call	 DWORD PTR [edx+68]
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?GetPlane@Screen@@QAEPAVSOL_Plane@@H@Z ; Screen::GetPlane
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ENDP	; GraphicsMgr::VisiblePlane
_TEXT	ENDS
_TEXT	SEGMENT
_style$ = 8
_x$ = -48
_y$ = -52
_l$ = -56
_m$ = -64
_width$ = -36
_height$ = -60
_modx$ = -32
_mody$ = -40
_x_l$ = -44
_x_r$ = -72
_y_t$ = -8
_y_b$ = -68
_p$ = -4
_r$ = -28
_B$ = -24
?IrisOutEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; IrisOutEffect

; 351  : {

  009bb	55		 push	 ebp
  009bc	8b ec		 mov	 ebp, esp
  009be	83 ec 48	 sub	 esp, 72			; 00000048H

; 352  : // This starts spiraling out from the center dissolving between two images
; 353  : 
; 354  : 	int x,y,l,m,width,height,modx,mody;
; 355  : 	int x_l,x_r,y_t,y_b;
; 356  : 	x = style->divisions;

  009c1	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  009c4	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  009c7	89 4d d0	 mov	 DWORD PTR _x$[ebp], ecx

; 357  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  009ca	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  009cd	8b 02		 mov	 eax, DWORD PTR [edx]
  009cf	50		 push	 eax
  009d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  009d6	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  009db	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 358  : 	SOL_Rect& r = p->OnScreen();		

  009de	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  009e1	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  009e6	89 45 e4	 mov	 DWORD PTR _r$[ebp], eax

; 359  :  	SOL_Rect	B(0,0,x-1,x-1);

  009e9	8b 4d d0	 mov	 ecx, DWORD PTR _x$[ebp]
  009ec	83 e9 01	 sub	 ecx, 1
  009ef	51		 push	 ecx
  009f0	8b 55 d0	 mov	 edx, DWORD PTR _x$[ebp]
  009f3	83 ea 01	 sub	 edx, 1
  009f6	52		 push	 edx
  009f7	6a 00		 push	 0
  009f9	6a 00		 push	 0
  009fb	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  009fe	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 360  : 	// Since SOL_Rect includes all points specified, this is an x by x rect
; 361  : 
; 362  : 
; 363  : 	height 	= r.B.y - r.A.y + 1;

  00a03	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00a06	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00a09	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00a0c	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00a0f	83 c2 01	 add	 edx, 1
  00a12	89 55 c4	 mov	 DWORD PTR _height$[ebp], edx

; 364  : 	width		= r.B.x - r.A.x + 1;

  00a15	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00a18	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00a1b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00a1e	2b 11		 sub	 edx, DWORD PTR [ecx]
  00a20	83 c2 01	 add	 edx, 1
  00a23	89 55 dc	 mov	 DWORD PTR _width$[ebp], edx

; 365  : 	
; 366  : 	y = (x * height)/width;

  00a26	8b 45 d0	 mov	 eax, DWORD PTR _x$[ebp]
  00a29	0f af 45 c4	 imul	 eax, DWORD PTR _height$[ebp]
  00a2d	99		 cdq
  00a2e	f7 7d dc	 idiv	 DWORD PTR _width$[ebp]
  00a31	89 45 cc	 mov	 DWORD PTR _y$[ebp], eax

; 367  : 
; 368  : 	mody = height%y;

  00a34	8b 45 c4	 mov	 eax, DWORD PTR _height$[ebp]
  00a37	99		 cdq
  00a38	f7 7d cc	 idiv	 DWORD PTR _y$[ebp]
  00a3b	89 55 d8	 mov	 DWORD PTR _mody$[ebp], edx

; 369  : 	
; 370  : 
; 371  : 	modx = width%x;

  00a3e	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00a41	99		 cdq
  00a42	f7 7d d0	 idiv	 DWORD PTR _x$[ebp]
  00a45	89 55 e0	 mov	 DWORD PTR _modx$[ebp], edx

; 372  : 
; 373  : 	x_l 	= width/(2*x);

  00a48	8b 4d d0	 mov	 ecx, DWORD PTR _x$[ebp]
  00a4b	d1 e1		 shl	 ecx, 1
  00a4d	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00a50	99		 cdq
  00a51	f7 f9		 idiv	 ecx
  00a53	89 45 d4	 mov	 DWORD PTR _x_l$[ebp], eax

; 374  : 
; 375  : 	x_r	= width/(2*x);

  00a56	8b 4d d0	 mov	 ecx, DWORD PTR _x$[ebp]
  00a59	d1 e1		 shl	 ecx, 1
  00a5b	8b 45 dc	 mov	 eax, DWORD PTR _width$[ebp]
  00a5e	99		 cdq
  00a5f	f7 f9		 idiv	 ecx
  00a61	89 45 b8	 mov	 DWORD PTR _x_r$[ebp], eax

; 376  : 
; 377  : 	y_t	= height/(2*y) ;

  00a64	8b 4d cc	 mov	 ecx, DWORD PTR _y$[ebp]
  00a67	d1 e1		 shl	 ecx, 1
  00a69	8b 45 c4	 mov	 eax, DWORD PTR _height$[ebp]
  00a6c	99		 cdq
  00a6d	f7 f9		 idiv	 ecx
  00a6f	89 45 f8	 mov	 DWORD PTR _y_t$[ebp], eax

; 378  : 
; 379  : 	y_b	= height/(2*y);

  00a72	8b 4d cc	 mov	 ecx, DWORD PTR _y$[ebp]
  00a75	d1 e1		 shl	 ecx, 1
  00a77	8b 45 c4	 mov	 eax, DWORD PTR _height$[ebp]
  00a7a	99		 cdq
  00a7b	f7 f9		 idiv	 ecx
  00a7d	89 45 bc	 mov	 DWORD PTR _y_b$[ebp], eax

; 380  : 
; 381  : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 382  : 
; 383  : 	// First start with a center block
; 384  : 
; 385  : 		B.Set(x_r*x+r.A.x,y_t*y+r.A.y,x_r*x+x-1+r.A.x,y_t*y+y-1+r.A.y);

  00a80	8b 55 f8	 mov	 edx, DWORD PTR _y_t$[ebp]
  00a83	0f af 55 cc	 imul	 edx, DWORD PTR _y$[ebp]
  00a87	03 55 cc	 add	 edx, DWORD PTR _y$[ebp]
  00a8a	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00a8d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00a90	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  00a94	52		 push	 edx
  00a95	8b 45 b8	 mov	 eax, DWORD PTR _x_r$[ebp]
  00a98	0f af 45 d0	 imul	 eax, DWORD PTR _x$[ebp]
  00a9c	03 45 d0	 add	 eax, DWORD PTR _x$[ebp]
  00a9f	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00aa2	8b 11		 mov	 edx, DWORD PTR [ecx]
  00aa4	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  00aa8	50		 push	 eax
  00aa9	8b 4d f8	 mov	 ecx, DWORD PTR _y_t$[ebp]
  00aac	0f af 4d cc	 imul	 ecx, DWORD PTR _y$[ebp]
  00ab0	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  00ab3	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00ab6	51		 push	 ecx
  00ab7	8b 45 b8	 mov	 eax, DWORD PTR _x_r$[ebp]
  00aba	0f af 45 d0	 imul	 eax, DWORD PTR _x$[ebp]
  00abe	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00ac1	03 01		 add	 eax, DWORD PTR [ecx]
  00ac3	50		 push	 eax
  00ac4	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00ac7	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 386  : 		graphMgr->NextScreen()->ShowList().Clear();

  00acc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00ad2	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00ad7	8b c8		 mov	 ecx, eax
  00ad9	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00ade	8b c8		 mov	 ecx, eax
  00ae0	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 387  : 		graphMgr->NextScreen()->ShowList().Add(B);

  00ae5	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  00ae8	52		 push	 edx
  00ae9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00aef	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00af4	8b c8		 mov	 ecx, eax
  00af6	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00afb	8b c8		 mov	 ecx, eax
  00afd	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 388  : 		graphMgr->ShowBits();

  00b02	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00b07	8b 10		 mov	 edx, DWORD PTR [eax]
  00b09	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00b0f	ff 52 40	 call	 DWORD PTR [edx+64]

; 389  : 
; 390  : 		x_l -= 1;

  00b12	8b 45 d4	 mov	 eax, DWORD PTR _x_l$[ebp]
  00b15	83 e8 01	 sub	 eax, 1
  00b18	89 45 d4	 mov	 DWORD PTR _x_l$[ebp], eax

; 391  : 		x_r += 1;

  00b1b	8b 4d b8	 mov	 ecx, DWORD PTR _x_r$[ebp]
  00b1e	83 c1 01	 add	 ecx, 1
  00b21	89 4d b8	 mov	 DWORD PTR _x_r$[ebp], ecx

; 392  : 		y_t -= 1;

  00b24	8b 55 f8	 mov	 edx, DWORD PTR _y_t$[ebp]
  00b27	83 ea 01	 sub	 edx, 1
  00b2a	89 55 f8	 mov	 DWORD PTR _y_t$[ebp], edx

; 393  : 		y_b += 1;

  00b2d	8b 45 bc	 mov	 eax, DWORD PTR _y_b$[ebp]
  00b30	83 c0 01	 add	 eax, 1
  00b33	89 45 bc	 mov	 DWORD PTR _y_b$[ebp], eax
$L62188:

; 394  : 
; 395  : 
; 396  : 
; 397  : 		while((x_l>=0 )&&(y_t>=0)) {

  00b36	83 7d d4 00	 cmp	 DWORD PTR _x_l$[ebp], 0
  00b3a	0f 8c 26 03 00
	00		 jl	 $L62189
  00b40	83 7d f8 00	 cmp	 DWORD PTR _y_t$[ebp], 0
  00b44	0f 8c 1c 03 00
	00		 jl	 $L62189

; 398  : 			for(l=x_l+1;l<=x_r;l++) {  //draw top	

  00b4a	8b 4d d4	 mov	 ecx, DWORD PTR _x_l$[ebp]
  00b4d	83 c1 01	 add	 ecx, 1
  00b50	89 4d c8	 mov	 DWORD PTR _l$[ebp], ecx
  00b53	eb 09		 jmp	 SHORT $L62190
$L62191:
  00b55	8b 55 c8	 mov	 edx, DWORD PTR _l$[ebp]
  00b58	83 c2 01	 add	 edx, 1
  00b5b	89 55 c8	 mov	 DWORD PTR _l$[ebp], edx
$L62190:
  00b5e	8b 45 c8	 mov	 eax, DWORD PTR _l$[ebp]
  00b61	3b 45 b8	 cmp	 eax, DWORD PTR _x_r$[ebp]
  00b64	0f 8f 9d 00 00
	00		 jg	 $L62192

; 399  : 				m = y_t;

  00b6a	8b 4d f8	 mov	 ecx, DWORD PTR _y_t$[ebp]
  00b6d	89 4d c0	 mov	 DWORD PTR _m$[ebp], ecx

; 400  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+x-1+r.A.x,m*y+y-1+r.A.y);

  00b70	8b 55 c0	 mov	 edx, DWORD PTR _m$[ebp]
  00b73	0f af 55 cc	 imul	 edx, DWORD PTR _y$[ebp]
  00b77	03 55 cc	 add	 edx, DWORD PTR _y$[ebp]
  00b7a	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00b7d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00b80	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  00b84	52		 push	 edx
  00b85	8b 45 c8	 mov	 eax, DWORD PTR _l$[ebp]
  00b88	0f af 45 d0	 imul	 eax, DWORD PTR _x$[ebp]
  00b8c	03 45 d0	 add	 eax, DWORD PTR _x$[ebp]
  00b8f	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00b92	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b94	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  00b98	50		 push	 eax
  00b99	8b 4d c0	 mov	 ecx, DWORD PTR _m$[ebp]
  00b9c	0f af 4d cc	 imul	 ecx, DWORD PTR _y$[ebp]
  00ba0	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  00ba3	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00ba6	51		 push	 ecx
  00ba7	8b 45 c8	 mov	 eax, DWORD PTR _l$[ebp]
  00baa	0f af 45 d0	 imul	 eax, DWORD PTR _x$[ebp]
  00bae	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00bb1	03 01		 add	 eax, DWORD PTR [ecx]
  00bb3	50		 push	 eax
  00bb4	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00bb7	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 401  : 				graphMgr->NextScreen()->ShowList().Clear();

  00bbc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00bc2	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00bc7	8b c8		 mov	 ecx, eax
  00bc9	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00bce	8b c8		 mov	 ecx, eax
  00bd0	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 402  : 				graphMgr->NextScreen()->ShowList().Add(B);

  00bd5	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  00bd8	52		 push	 edx
  00bd9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00bdf	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00be4	8b c8		 mov	 ecx, eax
  00be6	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00beb	8b c8		 mov	 ecx, eax
  00bed	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 403  : 				graphMgr->ShowBits();

  00bf2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00bf7	8b 10		 mov	 edx, DWORD PTR [eax]
  00bf9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00bff	ff 52 40	 call	 DWORD PTR [edx+64]

; 404  : 			}

  00c02	e9 4e ff ff ff	 jmp	 $L62191
$L62192:

; 405  : 
; 406  : 			for(m=y_t;m<=y_b;m++) {  //draw right	

  00c07	8b 45 f8	 mov	 eax, DWORD PTR _y_t$[ebp]
  00c0a	89 45 c0	 mov	 DWORD PTR _m$[ebp], eax
  00c0d	eb 09		 jmp	 SHORT $L62193
$L62194:
  00c0f	8b 4d c0	 mov	 ecx, DWORD PTR _m$[ebp]
  00c12	83 c1 01	 add	 ecx, 1
  00c15	89 4d c0	 mov	 DWORD PTR _m$[ebp], ecx
$L62193:
  00c18	8b 55 c0	 mov	 edx, DWORD PTR _m$[ebp]
  00c1b	3b 55 bc	 cmp	 edx, DWORD PTR _y_b$[ebp]
  00c1e	0f 8f 9e 00 00
	00		 jg	 $L62195

; 407  : 
; 408  :  				l = x_r;

  00c24	8b 45 b8	 mov	 eax, DWORD PTR _x_r$[ebp]
  00c27	89 45 c8	 mov	 DWORD PTR _l$[ebp], eax

; 409  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+x-1+r.A.x,m*y+y-1+r.A.y);

  00c2a	8b 4d c0	 mov	 ecx, DWORD PTR _m$[ebp]
  00c2d	0f af 4d cc	 imul	 ecx, DWORD PTR _y$[ebp]
  00c31	03 4d cc	 add	 ecx, DWORD PTR _y$[ebp]
  00c34	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  00c37	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00c3a	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  00c3e	51		 push	 ecx
  00c3f	8b 55 c8	 mov	 edx, DWORD PTR _l$[ebp]
  00c42	0f af 55 d0	 imul	 edx, DWORD PTR _x$[ebp]
  00c46	03 55 d0	 add	 edx, DWORD PTR _x$[ebp]
  00c49	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00c4c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c4e	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  00c52	52		 push	 edx
  00c53	8b 45 c0	 mov	 eax, DWORD PTR _m$[ebp]
  00c56	0f af 45 cc	 imul	 eax, DWORD PTR _y$[ebp]
  00c5a	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00c5d	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00c60	50		 push	 eax
  00c61	8b 55 c8	 mov	 edx, DWORD PTR _l$[ebp]
  00c64	0f af 55 d0	 imul	 edx, DWORD PTR _x$[ebp]
  00c68	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00c6b	03 10		 add	 edx, DWORD PTR [eax]
  00c6d	52		 push	 edx
  00c6e	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00c71	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 410  : 				graphMgr->NextScreen()->ShowList().Clear();

  00c76	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00c7c	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00c81	8b c8		 mov	 ecx, eax
  00c83	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00c88	8b c8		 mov	 ecx, eax
  00c8a	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 411  : 				graphMgr->NextScreen()->ShowList().Add(B);

  00c8f	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00c92	51		 push	 ecx
  00c93	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00c99	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00c9e	8b c8		 mov	 ecx, eax
  00ca0	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00ca5	8b c8		 mov	 ecx, eax
  00ca7	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 412  : 				graphMgr->ShowBits();

  00cac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00cb2	8b 02		 mov	 eax, DWORD PTR [edx]
  00cb4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00cba	ff 50 40	 call	 DWORD PTR [eax+64]

; 413  : 			}

  00cbd	e9 4d ff ff ff	 jmp	 $L62194
$L62195:

; 414  : 			m--;

  00cc2	8b 4d c0	 mov	 ecx, DWORD PTR _m$[ebp]
  00cc5	83 e9 01	 sub	 ecx, 1
  00cc8	89 4d c0	 mov	 DWORD PTR _m$[ebp], ecx

; 415  : 
; 416  : 			for(l=x_r;l>=x_l;l--) {  //draw bottom	

  00ccb	8b 55 b8	 mov	 edx, DWORD PTR _x_r$[ebp]
  00cce	89 55 c8	 mov	 DWORD PTR _l$[ebp], edx
  00cd1	eb 09		 jmp	 SHORT $L62196
$L62197:
  00cd3	8b 45 c8	 mov	 eax, DWORD PTR _l$[ebp]
  00cd6	83 e8 01	 sub	 eax, 1
  00cd9	89 45 c8	 mov	 DWORD PTR _l$[ebp], eax
$L62196:
  00cdc	8b 4d c8	 mov	 ecx, DWORD PTR _l$[ebp]
  00cdf	3b 4d d4	 cmp	 ecx, DWORD PTR _x_l$[ebp]
  00ce2	0f 8c 97 00 00
	00		 jl	 $L62198

; 417  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+x-1+r.A.x,m*y+y-1+r.A.y);

  00ce8	8b 55 c0	 mov	 edx, DWORD PTR _m$[ebp]
  00ceb	0f af 55 cc	 imul	 edx, DWORD PTR _y$[ebp]
  00cef	03 55 cc	 add	 edx, DWORD PTR _y$[ebp]
  00cf2	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00cf5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00cf8	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  00cfc	52		 push	 edx
  00cfd	8b 45 c8	 mov	 eax, DWORD PTR _l$[ebp]
  00d00	0f af 45 d0	 imul	 eax, DWORD PTR _x$[ebp]
  00d04	03 45 d0	 add	 eax, DWORD PTR _x$[ebp]
  00d07	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00d0a	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d0c	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  00d10	50		 push	 eax
  00d11	8b 4d c0	 mov	 ecx, DWORD PTR _m$[ebp]
  00d14	0f af 4d cc	 imul	 ecx, DWORD PTR _y$[ebp]
  00d18	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  00d1b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00d1e	51		 push	 ecx
  00d1f	8b 45 c8	 mov	 eax, DWORD PTR _l$[ebp]
  00d22	0f af 45 d0	 imul	 eax, DWORD PTR _x$[ebp]
  00d26	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00d29	03 01		 add	 eax, DWORD PTR [ecx]
  00d2b	50		 push	 eax
  00d2c	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00d2f	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 418  : 				graphMgr->NextScreen()->ShowList().Clear();

  00d34	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00d3a	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00d3f	8b c8		 mov	 ecx, eax
  00d41	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00d46	8b c8		 mov	 ecx, eax
  00d48	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 419  : 				graphMgr->NextScreen()->ShowList().Add(B);

  00d4d	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  00d50	52		 push	 edx
  00d51	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00d57	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00d5c	8b c8		 mov	 ecx, eax
  00d5e	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00d63	8b c8		 mov	 ecx, eax
  00d65	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 420  : 				graphMgr->ShowBits();

  00d6a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00d6f	8b 10		 mov	 edx, DWORD PTR [eax]
  00d71	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00d77	ff 52 40	 call	 DWORD PTR [edx+64]

; 421  : 			}

  00d7a	e9 54 ff ff ff	 jmp	 $L62197
$L62198:

; 422  : 			l++;

  00d7f	8b 45 c8	 mov	 eax, DWORD PTR _l$[ebp]
  00d82	83 c0 01	 add	 eax, 1
  00d85	89 45 c8	 mov	 DWORD PTR _l$[ebp], eax

; 423  : 
; 424  : 			for(m=y_b;m>=y_t;m--) {  //draw left	

  00d88	8b 4d bc	 mov	 ecx, DWORD PTR _y_b$[ebp]
  00d8b	89 4d c0	 mov	 DWORD PTR _m$[ebp], ecx
  00d8e	eb 09		 jmp	 SHORT $L62199
$L62200:
  00d90	8b 55 c0	 mov	 edx, DWORD PTR _m$[ebp]
  00d93	83 ea 01	 sub	 edx, 1
  00d96	89 55 c0	 mov	 DWORD PTR _m$[ebp], edx
$L62199:
  00d99	8b 45 c0	 mov	 eax, DWORD PTR _m$[ebp]
  00d9c	3b 45 f8	 cmp	 eax, DWORD PTR _y_t$[ebp]
  00d9f	0f 8c 98 00 00
	00		 jl	 $L62201

; 425  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+x-1+r.A.x,m*y+y-1+r.A.y);

  00da5	8b 4d c0	 mov	 ecx, DWORD PTR _m$[ebp]
  00da8	0f af 4d cc	 imul	 ecx, DWORD PTR _y$[ebp]
  00dac	03 4d cc	 add	 ecx, DWORD PTR _y$[ebp]
  00daf	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  00db2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00db5	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  00db9	51		 push	 ecx
  00dba	8b 55 c8	 mov	 edx, DWORD PTR _l$[ebp]
  00dbd	0f af 55 d0	 imul	 edx, DWORD PTR _x$[ebp]
  00dc1	03 55 d0	 add	 edx, DWORD PTR _x$[ebp]
  00dc4	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00dc7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00dc9	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  00dcd	52		 push	 edx
  00dce	8b 45 c0	 mov	 eax, DWORD PTR _m$[ebp]
  00dd1	0f af 45 cc	 imul	 eax, DWORD PTR _y$[ebp]
  00dd5	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00dd8	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00ddb	50		 push	 eax
  00ddc	8b 55 c8	 mov	 edx, DWORD PTR _l$[ebp]
  00ddf	0f af 55 d0	 imul	 edx, DWORD PTR _x$[ebp]
  00de3	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00de6	03 10		 add	 edx, DWORD PTR [eax]
  00de8	52		 push	 edx
  00de9	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00dec	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 426  : 				graphMgr->NextScreen()->ShowList().Clear();

  00df1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00df7	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00dfc	8b c8		 mov	 ecx, eax
  00dfe	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00e03	8b c8		 mov	 ecx, eax
  00e05	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 427  : 				graphMgr->NextScreen()->ShowList().Add(B);

  00e0a	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00e0d	51		 push	 ecx
  00e0e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e14	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00e19	8b c8		 mov	 ecx, eax
  00e1b	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00e20	8b c8		 mov	 ecx, eax
  00e22	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 428  : 				graphMgr->ShowBits();

  00e27	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e2d	8b 02		 mov	 eax, DWORD PTR [edx]
  00e2f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e35	ff 50 40	 call	 DWORD PTR [eax+64]

; 429  : 			}

  00e38	e9 53 ff ff ff	 jmp	 $L62200
$L62201:

; 430  : 
; 431  : 			x_l -= 1;

  00e3d	8b 4d d4	 mov	 ecx, DWORD PTR _x_l$[ebp]
  00e40	83 e9 01	 sub	 ecx, 1
  00e43	89 4d d4	 mov	 DWORD PTR _x_l$[ebp], ecx

; 432  : 			
; 433  : 			x_r += 1;

  00e46	8b 55 b8	 mov	 edx, DWORD PTR _x_r$[ebp]
  00e49	83 c2 01	 add	 edx, 1
  00e4c	89 55 b8	 mov	 DWORD PTR _x_r$[ebp], edx

; 434  : 
; 435  : 			y_t -= 1;

  00e4f	8b 45 f8	 mov	 eax, DWORD PTR _y_t$[ebp]
  00e52	83 e8 01	 sub	 eax, 1
  00e55	89 45 f8	 mov	 DWORD PTR _y_t$[ebp], eax

; 436  : 		
; 437  : 			y_b += 1;

  00e58	8b 4d bc	 mov	 ecx, DWORD PTR _y_b$[ebp]
  00e5b	83 c1 01	 add	 ecx, 1
  00e5e	89 4d bc	 mov	 DWORD PTR _y_b$[ebp], ecx

; 438  : 		}

  00e61	e9 d0 fc ff ff	 jmp	 $L62188
$L62189:

; 439  : 
; 440  : 		// Clear entire screen 
; 441  : 
; 442  : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  00e66	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  00e69	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00e6c	50		 push	 eax
  00e6d	8b 4d e4	 mov	 ecx, DWORD PTR _r$[ebp]
  00e70	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00e73	52		 push	 edx
  00e74	8b 45 e4	 mov	 eax, DWORD PTR _r$[ebp]
  00e77	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e7a	51		 push	 ecx
  00e7b	8b 55 e4	 mov	 edx, DWORD PTR _r$[ebp]
  00e7e	8b 02		 mov	 eax, DWORD PTR [edx]
  00e80	50		 push	 eax
  00e81	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00e84	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 443  : 		graphMgr->NextScreen()->ShowList().Clear();

  00e89	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e8f	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00e94	8b c8		 mov	 ecx, eax
  00e96	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00e9b	8b c8		 mov	 ecx, eax
  00e9d	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 444  : 		graphMgr->NextScreen()->ShowList().Add(B);

  00ea2	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  00ea5	51		 push	 ecx
  00ea6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00eac	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00eb1	8b c8		 mov	 ecx, eax
  00eb3	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00eb8	8b c8		 mov	 ecx, eax
  00eba	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 445  : 		graphMgr->ShowBits();

  00ebf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00ec5	8b 02		 mov	 eax, DWORD PTR [edx]
  00ec7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00ecd	ff 50 40	 call	 DWORD PTR [eax+64]

; 446  : }

  00ed0	8b e5		 mov	 esp, ebp
  00ed2	5d		 pop	 ebp
  00ed3	c3		 ret	 0
?IrisOutEffect@@YAXPAVPlaneShowStyle@@@Z ENDP		; IrisOutEffect
_style$ = 8
_x$ = -52
_y$ = -56
_l$ = -60
_m$ = -68
_width$ = -40
_height$ = -64
_modx$ = -36
_mody$ = -44
_modyy$ = -12
_x_l$ = -48
_y_t$ = -8
_p$ = -4
_r$ = -32
_B$ = -28
?IrisInEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; IrisInEffect

; 450  : {

  00ed4	55		 push	 ebp
  00ed5	8b ec		 mov	 ebp, esp
  00ed7	83 ec 44	 sub	 esp, 68			; 00000044H

; 451  : // This starts spiraling in from the outside between two images
; 452  : 
; 453  : 	int x,y,l,m,width,height,modx,mody,modyy;
; 454  : 	int x_l,y_t;
; 455  : 
; 456  : 	x = style->divisions;

  00eda	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  00edd	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00ee0	89 4d cc	 mov	 DWORD PTR _x$[ebp], ecx

; 457  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  00ee3	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  00ee6	8b 02		 mov	 eax, DWORD PTR [edx]
  00ee8	50		 push	 eax
  00ee9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00eef	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  00ef4	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 458  : 	SOL_Rect& r = p->OnScreen();		

  00ef7	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  00efa	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  00eff	89 45 e0	 mov	 DWORD PTR _r$[ebp], eax

; 459  : 	height 	= r.B.y - r.A.y + 1;

  00f02	8b 4d e0	 mov	 ecx, DWORD PTR _r$[ebp]
  00f05	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  00f08	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00f0b	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00f0e	83 c0 01	 add	 eax, 1
  00f11	89 45 c0	 mov	 DWORD PTR _height$[ebp], eax

; 460  : 	width		= r.B.x - r.A.x + 1;

  00f14	8b 4d e0	 mov	 ecx, DWORD PTR _r$[ebp]
  00f17	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  00f1a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00f1d	2b 02		 sub	 eax, DWORD PTR [edx]
  00f1f	83 c0 01	 add	 eax, 1
  00f22	89 45 d8	 mov	 DWORD PTR _width$[ebp], eax

; 461  : 	y = (x * height)/width;

  00f25	8b 45 cc	 mov	 eax, DWORD PTR _x$[ebp]
  00f28	0f af 45 c0	 imul	 eax, DWORD PTR _height$[ebp]
  00f2c	99		 cdq
  00f2d	f7 7d d8	 idiv	 DWORD PTR _width$[ebp]
  00f30	89 45 c8	 mov	 DWORD PTR _y$[ebp], eax

; 462  :  	SOL_Rect	B(0,0,x-1,x-1);

  00f33	8b 4d cc	 mov	 ecx, DWORD PTR _x$[ebp]
  00f36	83 e9 01	 sub	 ecx, 1
  00f39	51		 push	 ecx
  00f3a	8b 55 cc	 mov	 edx, DWORD PTR _x$[ebp]
  00f3d	83 ea 01	 sub	 edx, 1
  00f40	52		 push	 edx
  00f41	6a 00		 push	 0
  00f43	6a 00		 push	 0
  00f45	8d 4d e4	 lea	 ecx, DWORD PTR _B$[ebp]
  00f48	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 463  : 	// Since SOL_Rect includes all points specified, this is an x by x rect
; 464  : 
; 465  : 	mody = height%y;

  00f4d	8b 45 c0	 mov	 eax, DWORD PTR _height$[ebp]
  00f50	99		 cdq
  00f51	f7 7d c8	 idiv	 DWORD PTR _y$[ebp]
  00f54	89 55 d4	 mov	 DWORD PTR _mody$[ebp], edx

; 466  : 
; 467  : 	modx = width%x;

  00f57	8b 45 d8	 mov	 eax, DWORD PTR _width$[ebp]
  00f5a	99		 cdq
  00f5b	f7 7d cc	 idiv	 DWORD PTR _x$[ebp]
  00f5e	89 55 dc	 mov	 DWORD PTR _modx$[ebp], edx

; 468  : 
; 469  : 	if (mody)

  00f61	83 7d d4 00	 cmp	 DWORD PTR _mody$[ebp], 0
  00f65	74 09		 je	 SHORT $L62219

; 470  : 		modyy = 1;

  00f67	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _modyy$[ebp], 1

; 471  : 	else

  00f6e	eb 07		 jmp	 SHORT $L62220
$L62219:

; 472  : 		modyy = 0;

  00f70	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _modyy$[ebp], 0
$L62220:

; 473  : 
; 474  : 	x_l = 0;

  00f77	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _x_l$[ebp], 0

; 475  : 	y_t = 0;

  00f7e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y_t$[ebp], 0

; 476  : 
; 477  : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 478  : 
; 479  : 		if (width%x) {

  00f85	8b 45 d8	 mov	 eax, DWORD PTR _width$[ebp]
  00f88	99		 cdq
  00f89	f7 7d cc	 idiv	 DWORD PTR _x$[ebp]
  00f8c	85 d2		 test	 edx, edx
  00f8e	0f 84 c7 00 00
	00		 je	 $L62224

; 480  : 		// width is not an even multiple of x so adjust the first rightside draw
; 481  : 		
; 482  : 			for(m=0;m<height/y;m++) {  //draw right	

  00f94	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  00f9b	eb 09		 jmp	 SHORT $L62222
$L62223:
  00f9d	8b 45 bc	 mov	 eax, DWORD PTR _m$[ebp]
  00fa0	83 c0 01	 add	 eax, 1
  00fa3	89 45 bc	 mov	 DWORD PTR _m$[ebp], eax
$L62222:
  00fa6	8b 45 c0	 mov	 eax, DWORD PTR _height$[ebp]
  00fa9	99		 cdq
  00faa	f7 7d c8	 idiv	 DWORD PTR _y$[ebp]
  00fad	39 45 bc	 cmp	 DWORD PTR _m$[ebp], eax
  00fb0	0f 8d a5 00 00
	00		 jge	 $L62224

; 483  : 				l = width/x  ;

  00fb6	8b 45 d8	 mov	 eax, DWORD PTR _width$[ebp]
  00fb9	99		 cdq
  00fba	f7 7d cc	 idiv	 DWORD PTR _x$[ebp]
  00fbd	89 45 c4	 mov	 DWORD PTR _l$[ebp], eax

; 484  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+-1+(width%x)+r.A.x,m*y+y-1+r.A.y);

  00fc0	8b 4d bc	 mov	 ecx, DWORD PTR _m$[ebp]
  00fc3	0f af 4d c8	 imul	 ecx, DWORD PTR _y$[ebp]
  00fc7	03 4d c8	 add	 ecx, DWORD PTR _y$[ebp]
  00fca	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  00fcd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00fd0	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  00fd4	51		 push	 ecx
  00fd5	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  00fd8	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  00fdc	8b 45 d8	 mov	 eax, DWORD PTR _width$[ebp]
  00fdf	99		 cdq
  00fe0	f7 7d cc	 idiv	 DWORD PTR _x$[ebp]
  00fe3	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  00fe7	8b 45 e0	 mov	 eax, DWORD PTR _r$[ebp]
  00fea	03 10		 add	 edx, DWORD PTR [eax]
  00fec	52		 push	 edx
  00fed	8b 4d bc	 mov	 ecx, DWORD PTR _m$[ebp]
  00ff0	0f af 4d c8	 imul	 ecx, DWORD PTR _y$[ebp]
  00ff4	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  00ff7	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00ffa	51		 push	 ecx
  00ffb	8b 45 c4	 mov	 eax, DWORD PTR _l$[ebp]
  00ffe	0f af 45 cc	 imul	 eax, DWORD PTR _x$[ebp]
  01002	8b 4d e0	 mov	 ecx, DWORD PTR _r$[ebp]
  01005	03 01		 add	 eax, DWORD PTR [ecx]
  01007	50		 push	 eax
  01008	8d 4d e4	 lea	 ecx, DWORD PTR _B$[ebp]
  0100b	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 485  : 				graphMgr->NextScreen()->ShowList().Clear();

  01010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01016	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0101b	8b c8		 mov	 ecx, eax
  0101d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01022	8b c8		 mov	 ecx, eax
  01024	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 486  : 				graphMgr->NextScreen()->ShowList().Add(B);

  01029	8d 55 e4	 lea	 edx, DWORD PTR _B$[ebp]
  0102c	52		 push	 edx
  0102d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01033	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01038	8b c8		 mov	 ecx, eax
  0103a	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0103f	8b c8		 mov	 ecx, eax
  01041	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 487  : 				graphMgr->ShowBits();

  01046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0104b	8b 10		 mov	 edx, DWORD PTR [eax]
  0104d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01053	ff 52 40	 call	 DWORD PTR [edx+64]

; 488  : 			}

  01056	e9 42 ff ff ff	 jmp	 $L62223
$L62224:

; 490  : 
; 491  : 		if (height%y) {

  0105b	8b 45 c0	 mov	 eax, DWORD PTR _height$[ebp]
  0105e	99		 cdq
  0105f	f7 7d c8	 idiv	 DWORD PTR _y$[ebp]
  01062	85 d2		 test	 edx, edx
  01064	0f 84 c8 00 00
	00		 je	 $L62228

; 492  : 		// height is not an even multiple of y so adjust the first bottom draw
; 493  : 
; 494  : 			m = height/y;

  0106a	8b 45 c0	 mov	 eax, DWORD PTR _height$[ebp]
  0106d	99		 cdq
  0106e	f7 7d c8	 idiv	 DWORD PTR _y$[ebp]
  01071	89 45 bc	 mov	 DWORD PTR _m$[ebp], eax

; 495  : 			for(l=width/x-1;l>=0;l--) {  //draw bottom	

  01074	8b 45 d8	 mov	 eax, DWORD PTR _width$[ebp]
  01077	99		 cdq
  01078	f7 7d cc	 idiv	 DWORD PTR _x$[ebp]
  0107b	83 e8 01	 sub	 eax, 1
  0107e	89 45 c4	 mov	 DWORD PTR _l$[ebp], eax
  01081	eb 09		 jmp	 SHORT $L62226
$L62227:
  01083	8b 45 c4	 mov	 eax, DWORD PTR _l$[ebp]
  01086	83 e8 01	 sub	 eax, 1
  01089	89 45 c4	 mov	 DWORD PTR _l$[ebp], eax
$L62226:
  0108c	83 7d c4 00	 cmp	 DWORD PTR _l$[ebp], 0
  01090	0f 8c 9c 00 00
	00		 jl	 $L62228

; 496  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+x-1+r.A.x,m*y+-1+(height%y)+r.A.y);

  01096	8b 4d bc	 mov	 ecx, DWORD PTR _m$[ebp]
  01099	0f af 4d c8	 imul	 ecx, DWORD PTR _y$[ebp]
  0109d	8b 45 c0	 mov	 eax, DWORD PTR _height$[ebp]
  010a0	99		 cdq
  010a1	f7 7d c8	 idiv	 DWORD PTR _y$[ebp]
  010a4	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  010a8	8b 45 e0	 mov	 eax, DWORD PTR _r$[ebp]
  010ab	03 50 04	 add	 edx, DWORD PTR [eax+4]
  010ae	52		 push	 edx
  010af	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  010b2	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  010b6	03 4d cc	 add	 ecx, DWORD PTR _x$[ebp]
  010b9	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  010bc	8b 02		 mov	 eax, DWORD PTR [edx]
  010be	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  010c2	51		 push	 ecx
  010c3	8b 55 bc	 mov	 edx, DWORD PTR _m$[ebp]
  010c6	0f af 55 c8	 imul	 edx, DWORD PTR _y$[ebp]
  010ca	8b 45 e0	 mov	 eax, DWORD PTR _r$[ebp]
  010cd	03 50 04	 add	 edx, DWORD PTR [eax+4]
  010d0	52		 push	 edx
  010d1	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  010d4	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  010d8	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  010db	03 0a		 add	 ecx, DWORD PTR [edx]
  010dd	51		 push	 ecx
  010de	8d 4d e4	 lea	 ecx, DWORD PTR _B$[ebp]
  010e1	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 497  : 				graphMgr->NextScreen()->ShowList().Clear();

  010e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  010ec	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  010f1	8b c8		 mov	 ecx, eax
  010f3	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  010f8	8b c8		 mov	 ecx, eax
  010fa	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 498  : 				graphMgr->NextScreen()->ShowList().Add(B);

  010ff	8d 45 e4	 lea	 eax, DWORD PTR _B$[ebp]
  01102	50		 push	 eax
  01103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01109	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0110e	8b c8		 mov	 ecx, eax
  01110	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01115	8b c8		 mov	 ecx, eax
  01117	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 499  : 				graphMgr->ShowBits();

  0111c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01122	8b 11		 mov	 edx, DWORD PTR [ecx]
  01124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0112a	ff 52 40	 call	 DWORD PTR [edx+64]

; 500  : 			}

  0112d	e9 51 ff ff ff	 jmp	 $L62227
$L62228:

; 502  : 
; 503  : 		while((x_l < width/x) || (y_t < height/y)) {

  01132	8b 45 d8	 mov	 eax, DWORD PTR _width$[ebp]
  01135	99		 cdq
  01136	f7 7d cc	 idiv	 DWORD PTR _x$[ebp]
  01139	39 45 d0	 cmp	 DWORD PTR _x_l$[ebp], eax
  0113c	7c 10		 jl	 SHORT $L62232
  0113e	8b 45 c0	 mov	 eax, DWORD PTR _height$[ebp]
  01141	99		 cdq
  01142	f7 7d c8	 idiv	 DWORD PTR _y$[ebp]
  01145	39 45 f8	 cmp	 DWORD PTR _y_t$[ebp], eax
  01148	0f 8d 30 03 00
	00		 jge	 $L62231
$L62232:

; 504  : 			for(m=height/y-1;m>=y_t;m--) {  //draw left	

  0114e	8b 45 c0	 mov	 eax, DWORD PTR _height$[ebp]
  01151	99		 cdq
  01152	f7 7d c8	 idiv	 DWORD PTR _y$[ebp]
  01155	83 e8 01	 sub	 eax, 1
  01158	89 45 bc	 mov	 DWORD PTR _m$[ebp], eax
  0115b	eb 09		 jmp	 SHORT $L62233
$L62234:
  0115d	8b 45 bc	 mov	 eax, DWORD PTR _m$[ebp]
  01160	83 e8 01	 sub	 eax, 1
  01163	89 45 bc	 mov	 DWORD PTR _m$[ebp], eax
$L62233:
  01166	8b 4d bc	 mov	 ecx, DWORD PTR _m$[ebp]
  01169	3b 4d f8	 cmp	 ecx, DWORD PTR _y_t$[ebp]
  0116c	0f 8c 9e 00 00
	00		 jl	 $L62235

; 505  : 				l = x_l;

  01172	8b 55 d0	 mov	 edx, DWORD PTR _x_l$[ebp]
  01175	89 55 c4	 mov	 DWORD PTR _l$[ebp], edx

; 506  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+x-1+r.A.x,m*y+y-1+r.A.y);

  01178	8b 45 bc	 mov	 eax, DWORD PTR _m$[ebp]
  0117b	0f af 45 c8	 imul	 eax, DWORD PTR _y$[ebp]
  0117f	03 45 c8	 add	 eax, DWORD PTR _y$[ebp]
  01182	8b 4d e0	 mov	 ecx, DWORD PTR _r$[ebp]
  01185	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01188	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  0118c	50		 push	 eax
  0118d	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  01190	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  01194	03 4d cc	 add	 ecx, DWORD PTR _x$[ebp]
  01197	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  0119a	8b 02		 mov	 eax, DWORD PTR [edx]
  0119c	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  011a0	51		 push	 ecx
  011a1	8b 55 bc	 mov	 edx, DWORD PTR _m$[ebp]
  011a4	0f af 55 c8	 imul	 edx, DWORD PTR _y$[ebp]
  011a8	8b 45 e0	 mov	 eax, DWORD PTR _r$[ebp]
  011ab	03 50 04	 add	 edx, DWORD PTR [eax+4]
  011ae	52		 push	 edx
  011af	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  011b2	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  011b6	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  011b9	03 0a		 add	 ecx, DWORD PTR [edx]
  011bb	51		 push	 ecx
  011bc	8d 4d e4	 lea	 ecx, DWORD PTR _B$[ebp]
  011bf	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 507  : 				graphMgr->NextScreen()->ShowList().Clear();

  011c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  011ca	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  011cf	8b c8		 mov	 ecx, eax
  011d1	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  011d6	8b c8		 mov	 ecx, eax
  011d8	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 508  : 				graphMgr->NextScreen()->ShowList().Add(B);

  011dd	8d 45 e4	 lea	 eax, DWORD PTR _B$[ebp]
  011e0	50		 push	 eax
  011e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  011e7	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  011ec	8b c8		 mov	 ecx, eax
  011ee	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  011f3	8b c8		 mov	 ecx, eax
  011f5	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 509  : 				graphMgr->ShowBits();

  011fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01200	8b 11		 mov	 edx, DWORD PTR [ecx]
  01202	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01208	ff 52 40	 call	 DWORD PTR [edx+64]

; 510  : 			}

  0120b	e9 4d ff ff ff	 jmp	 $L62234
$L62235:

; 511  : 
; 512  : 			for(l=x_l;l<width/x;l++) {  //draw top	

  01210	8b 45 d0	 mov	 eax, DWORD PTR _x_l$[ebp]
  01213	89 45 c4	 mov	 DWORD PTR _l$[ebp], eax
  01216	eb 09		 jmp	 SHORT $L62236
$L62237:
  01218	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  0121b	83 c1 01	 add	 ecx, 1
  0121e	89 4d c4	 mov	 DWORD PTR _l$[ebp], ecx
$L62236:
  01221	8b 45 d8	 mov	 eax, DWORD PTR _width$[ebp]
  01224	99		 cdq
  01225	f7 7d cc	 idiv	 DWORD PTR _x$[ebp]
  01228	39 45 c4	 cmp	 DWORD PTR _l$[ebp], eax
  0122b	0f 8d 9e 00 00
	00		 jge	 $L62238

; 513  : 				m = y_t;

  01231	8b 55 f8	 mov	 edx, DWORD PTR _y_t$[ebp]
  01234	89 55 bc	 mov	 DWORD PTR _m$[ebp], edx

; 514  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+x-1+r.A.x,m*y+y-1+r.A.y);

  01237	8b 45 bc	 mov	 eax, DWORD PTR _m$[ebp]
  0123a	0f af 45 c8	 imul	 eax, DWORD PTR _y$[ebp]
  0123e	03 45 c8	 add	 eax, DWORD PTR _y$[ebp]
  01241	8b 4d e0	 mov	 ecx, DWORD PTR _r$[ebp]
  01244	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01247	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  0124b	50		 push	 eax
  0124c	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  0124f	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  01253	03 4d cc	 add	 ecx, DWORD PTR _x$[ebp]
  01256	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  01259	8b 02		 mov	 eax, DWORD PTR [edx]
  0125b	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  0125f	51		 push	 ecx
  01260	8b 55 bc	 mov	 edx, DWORD PTR _m$[ebp]
  01263	0f af 55 c8	 imul	 edx, DWORD PTR _y$[ebp]
  01267	8b 45 e0	 mov	 eax, DWORD PTR _r$[ebp]
  0126a	03 50 04	 add	 edx, DWORD PTR [eax+4]
  0126d	52		 push	 edx
  0126e	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  01271	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  01275	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  01278	03 0a		 add	 ecx, DWORD PTR [edx]
  0127a	51		 push	 ecx
  0127b	8d 4d e4	 lea	 ecx, DWORD PTR _B$[ebp]
  0127e	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 515  : 				graphMgr->NextScreen()->ShowList().Clear();

  01283	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01289	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0128e	8b c8		 mov	 ecx, eax
  01290	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01295	8b c8		 mov	 ecx, eax
  01297	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 516  : 				graphMgr->NextScreen()->ShowList().Add(B);

  0129c	8d 45 e4	 lea	 eax, DWORD PTR _B$[ebp]
  0129f	50		 push	 eax
  012a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  012a6	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  012ab	8b c8		 mov	 ecx, eax
  012ad	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  012b2	8b c8		 mov	 ecx, eax
  012b4	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 517  : 				graphMgr->ShowBits();

  012b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  012bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  012c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  012c7	ff 52 40	 call	 DWORD PTR [edx+64]

; 518  : 			}

  012ca	e9 49 ff ff ff	 jmp	 $L62237
$L62238:

; 519  : 
; 520  : 			l--;

  012cf	8b 45 c4	 mov	 eax, DWORD PTR _l$[ebp]
  012d2	83 e8 01	 sub	 eax, 1
  012d5	89 45 c4	 mov	 DWORD PTR _l$[ebp], eax

; 521  : 			for(m=y_t;m<height/y;m++) {  //draw right	

  012d8	8b 4d f8	 mov	 ecx, DWORD PTR _y_t$[ebp]
  012db	89 4d bc	 mov	 DWORD PTR _m$[ebp], ecx
  012de	eb 09		 jmp	 SHORT $L62239
$L62240:
  012e0	8b 55 bc	 mov	 edx, DWORD PTR _m$[ebp]
  012e3	83 c2 01	 add	 edx, 1
  012e6	89 55 bc	 mov	 DWORD PTR _m$[ebp], edx
$L62239:
  012e9	8b 45 c0	 mov	 eax, DWORD PTR _height$[ebp]
  012ec	99		 cdq
  012ed	f7 7d c8	 idiv	 DWORD PTR _y$[ebp]
  012f0	39 45 bc	 cmp	 DWORD PTR _m$[ebp], eax
  012f3	0f 8d 98 00 00
	00		 jge	 $L62241

; 522  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+x-1+r.A.x,m*y+y-1+r.A.y);

  012f9	8b 45 bc	 mov	 eax, DWORD PTR _m$[ebp]
  012fc	0f af 45 c8	 imul	 eax, DWORD PTR _y$[ebp]
  01300	03 45 c8	 add	 eax, DWORD PTR _y$[ebp]
  01303	8b 4d e0	 mov	 ecx, DWORD PTR _r$[ebp]
  01306	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01309	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  0130d	50		 push	 eax
  0130e	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  01311	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  01315	03 4d cc	 add	 ecx, DWORD PTR _x$[ebp]
  01318	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  0131b	8b 02		 mov	 eax, DWORD PTR [edx]
  0131d	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  01321	51		 push	 ecx
  01322	8b 55 bc	 mov	 edx, DWORD PTR _m$[ebp]
  01325	0f af 55 c8	 imul	 edx, DWORD PTR _y$[ebp]
  01329	8b 45 e0	 mov	 eax, DWORD PTR _r$[ebp]
  0132c	03 50 04	 add	 edx, DWORD PTR [eax+4]
  0132f	52		 push	 edx
  01330	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  01333	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  01337	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  0133a	03 0a		 add	 ecx, DWORD PTR [edx]
  0133c	51		 push	 ecx
  0133d	8d 4d e4	 lea	 ecx, DWORD PTR _B$[ebp]
  01340	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 523  : 				graphMgr->NextScreen()->ShowList().Clear();

  01345	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0134b	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01350	8b c8		 mov	 ecx, eax
  01352	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01357	8b c8		 mov	 ecx, eax
  01359	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 524  : 				graphMgr->NextScreen()->ShowList().Add(B);

  0135e	8d 45 e4	 lea	 eax, DWORD PTR _B$[ebp]
  01361	50		 push	 eax
  01362	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01368	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0136d	8b c8		 mov	 ecx, eax
  0136f	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01374	8b c8		 mov	 ecx, eax
  01376	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 525  : 				graphMgr->ShowBits();

  0137b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01381	8b 11		 mov	 edx, DWORD PTR [ecx]
  01383	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01389	ff 52 40	 call	 DWORD PTR [edx+64]

; 526  : 			}

  0138c	e9 4f ff ff ff	 jmp	 $L62240
$L62241:

; 527  : 			m--;

  01391	8b 45 bc	 mov	 eax, DWORD PTR _m$[ebp]
  01394	83 e8 01	 sub	 eax, 1
  01397	89 45 bc	 mov	 DWORD PTR _m$[ebp], eax

; 528  : 			for(l=width/x-1;l>=x_l;l--) {  //draw bottom	

  0139a	8b 45 d8	 mov	 eax, DWORD PTR _width$[ebp]
  0139d	99		 cdq
  0139e	f7 7d cc	 idiv	 DWORD PTR _x$[ebp]
  013a1	83 e8 01	 sub	 eax, 1
  013a4	89 45 c4	 mov	 DWORD PTR _l$[ebp], eax
  013a7	eb 09		 jmp	 SHORT $L62242
$L62243:
  013a9	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  013ac	83 e9 01	 sub	 ecx, 1
  013af	89 4d c4	 mov	 DWORD PTR _l$[ebp], ecx
$L62242:
  013b2	8b 55 c4	 mov	 edx, DWORD PTR _l$[ebp]
  013b5	3b 55 d0	 cmp	 edx, DWORD PTR _x_l$[ebp]
  013b8	0f 8c 97 00 00
	00		 jl	 $L62244

; 529  : 				B.Set(l*x+r.A.x,m*y+r.A.y,l*x+x-1+r.A.x,m*y+y-1+r.A.x);

  013be	8b 45 bc	 mov	 eax, DWORD PTR _m$[ebp]
  013c1	0f af 45 c8	 imul	 eax, DWORD PTR _y$[ebp]
  013c5	03 45 c8	 add	 eax, DWORD PTR _y$[ebp]
  013c8	8b 4d e0	 mov	 ecx, DWORD PTR _r$[ebp]
  013cb	8b 11		 mov	 edx, DWORD PTR [ecx]
  013cd	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  013d1	50		 push	 eax
  013d2	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  013d5	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  013d9	03 4d cc	 add	 ecx, DWORD PTR _x$[ebp]
  013dc	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  013df	8b 02		 mov	 eax, DWORD PTR [edx]
  013e1	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  013e5	51		 push	 ecx
  013e6	8b 55 bc	 mov	 edx, DWORD PTR _m$[ebp]
  013e9	0f af 55 c8	 imul	 edx, DWORD PTR _y$[ebp]
  013ed	8b 45 e0	 mov	 eax, DWORD PTR _r$[ebp]
  013f0	03 50 04	 add	 edx, DWORD PTR [eax+4]
  013f3	52		 push	 edx
  013f4	8b 4d c4	 mov	 ecx, DWORD PTR _l$[ebp]
  013f7	0f af 4d cc	 imul	 ecx, DWORD PTR _x$[ebp]
  013fb	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  013fe	03 0a		 add	 ecx, DWORD PTR [edx]
  01400	51		 push	 ecx
  01401	8d 4d e4	 lea	 ecx, DWORD PTR _B$[ebp]
  01404	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 530  : 				graphMgr->NextScreen()->ShowList().Clear();

  01409	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0140f	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01414	8b c8		 mov	 ecx, eax
  01416	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0141b	8b c8		 mov	 ecx, eax
  0141d	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 531  : 				graphMgr->NextScreen()->ShowList().Add(B);

  01422	8d 45 e4	 lea	 eax, DWORD PTR _B$[ebp]
  01425	50		 push	 eax
  01426	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0142c	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01431	8b c8		 mov	 ecx, eax
  01433	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01438	8b c8		 mov	 ecx, eax
  0143a	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 532  : 				graphMgr->ShowBits();

  0143f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01445	8b 11		 mov	 edx, DWORD PTR [ecx]
  01447	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0144d	ff 52 40	 call	 DWORD PTR [edx+64]

; 533  : 			}

  01450	e9 54 ff ff ff	 jmp	 $L62243
$L62244:

; 534  : 
; 535  : 			x_l  += 1;

  01455	8b 45 d0	 mov	 eax, DWORD PTR _x_l$[ebp]
  01458	83 c0 01	 add	 eax, 1
  0145b	89 45 d0	 mov	 DWORD PTR _x_l$[ebp], eax

; 536  : 			width	 -= x;

  0145e	8b 4d d8	 mov	 ecx, DWORD PTR _width$[ebp]
  01461	2b 4d cc	 sub	 ecx, DWORD PTR _x$[ebp]
  01464	89 4d d8	 mov	 DWORD PTR _width$[ebp], ecx

; 537  : 			y_t	 += 1;

  01467	8b 55 f8	 mov	 edx, DWORD PTR _y_t$[ebp]
  0146a	83 c2 01	 add	 edx, 1
  0146d	89 55 f8	 mov	 DWORD PTR _y_t$[ebp], edx

; 538  : 			height -= y;

  01470	8b 45 c0	 mov	 eax, DWORD PTR _height$[ebp]
  01473	2b 45 c8	 sub	 eax, DWORD PTR _y$[ebp]
  01476	89 45 c0	 mov	 DWORD PTR _height$[ebp], eax

; 539  : 		}

  01479	e9 b4 fc ff ff	 jmp	 $L62228
$L62231:

; 540  : 		// Clear entire screen 
; 541  : 
; 542  : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  0147e	8b 4d e0	 mov	 ecx, DWORD PTR _r$[ebp]
  01481	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01484	52		 push	 edx
  01485	8b 45 e0	 mov	 eax, DWORD PTR _r$[ebp]
  01488	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0148b	51		 push	 ecx
  0148c	8b 55 e0	 mov	 edx, DWORD PTR _r$[ebp]
  0148f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01492	50		 push	 eax
  01493	8b 4d e0	 mov	 ecx, DWORD PTR _r$[ebp]
  01496	8b 11		 mov	 edx, DWORD PTR [ecx]
  01498	52		 push	 edx
  01499	8d 4d e4	 lea	 ecx, DWORD PTR _B$[ebp]
  0149c	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 543  : 		graphMgr->NextScreen()->ShowList().Clear();

  014a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  014a7	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  014ac	8b c8		 mov	 ecx, eax
  014ae	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  014b3	8b c8		 mov	 ecx, eax
  014b5	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 544  : 		graphMgr->NextScreen()->ShowList().Add(B);

  014ba	8d 45 e4	 lea	 eax, DWORD PTR _B$[ebp]
  014bd	50		 push	 eax
  014be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  014c4	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  014c9	8b c8		 mov	 ecx, eax
  014cb	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  014d0	8b c8		 mov	 ecx, eax
  014d2	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 545  : 		graphMgr->ShowBits();

  014d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  014dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  014df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  014e5	ff 52 40	 call	 DWORD PTR [edx+64]

; 546  : 
; 547  : }

  014e8	8b e5		 mov	 esp, ebp
  014ea	5d		 pop	 ebp
  014eb	c3		 ret	 0
?IrisInEffect@@YAXPAVPlaneShowStyle@@@Z ENDP		; IrisInEffect
_style$ = 8
_x$ = -32
_height$ = -44
_width$ = -28
_l$ = -36
_m$ = -40
_B$ = -24
_p$ = -4
_r$ = -8
?WipeRightEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; WipeRightEffect

; 551  : {

  014ec	55		 push	 ebp
  014ed	8b ec		 mov	 ebp, esp
  014ef	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 552  : // This function wipes from left to right between two images
; 553  : 
; 554  : 	int x,height,width,l,m;
; 555  : 	x = style->divisions;

  014f2	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  014f5	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  014f8	89 4d e0	 mov	 DWORD PTR _x$[ebp], ecx

; 556  : 
; 557  :  	SOL_Rect	B(0,0,x-1,x-1); 

  014fb	8b 55 e0	 mov	 edx, DWORD PTR _x$[ebp]
  014fe	83 ea 01	 sub	 edx, 1
  01501	52		 push	 edx
  01502	8b 45 e0	 mov	 eax, DWORD PTR _x$[ebp]
  01505	83 e8 01	 sub	 eax, 1
  01508	50		 push	 eax
  01509	6a 00		 push	 0
  0150b	6a 00		 push	 0
  0150d	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01510	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 558  : 	// Since SOL_Rect includes all points specified, this is an x by x rect
; 559  : 
; 560  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  01515	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  01518	8b 11		 mov	 edx, DWORD PTR [ecx]
  0151a	52		 push	 edx
  0151b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01521	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  01526	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 561  : 	SOL_Rect& r = p->OnScreen();		

  01529	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0152c	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  01531	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax

; 562  : 	height 	= r.B.y - r.A.y + 1;

  01534	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01537	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  0153a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0153d	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  01540	83 c2 01	 add	 edx, 1
  01543	89 55 d4	 mov	 DWORD PTR _height$[ebp], edx

; 563  : 	width		= r.B.x - r.A.x + 1;

  01546	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01549	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  0154c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0154f	2b 11		 sub	 edx, DWORD PTR [ecx]
  01551	83 c2 01	 add	 edx, 1
  01554	89 55 e4	 mov	 DWORD PTR _width$[ebp], edx

; 564  : 
; 565  : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 566  : 
; 567  : 	for(l=0;l<width/x;l++) {

  01557	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  0155e	eb 09		 jmp	 SHORT $L62256
$L62257:
  01560	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  01563	83 c0 01	 add	 eax, 1
  01566	89 45 dc	 mov	 DWORD PTR _l$[ebp], eax
$L62256:
  01569	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0156c	99		 cdq
  0156d	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01570	39 45 dc	 cmp	 DWORD PTR _l$[ebp], eax
  01573	0f 8d 7f 01 00
	00		 jge	 $L62258

; 568  : 		for(m=0;m<height/x;m++) 	

  01579	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  01580	eb 09		 jmp	 SHORT $L62259
$L62260:
  01582	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01585	83 c1 01	 add	 ecx, 1
  01588	89 4d d8	 mov	 DWORD PTR _m$[ebp], ecx
$L62259:
  0158b	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  0158e	99		 cdq
  0158f	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01592	39 45 d8	 cmp	 DWORD PTR _m$[ebp], eax
  01595	0f 8d 97 00 00
	00		 jge	 $L62261

; 570  : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+x-1+r.A.y);

  0159b	8b 55 d8	 mov	 edx, DWORD PTR _m$[ebp]
  0159e	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  015a2	03 55 e0	 add	 edx, DWORD PTR _x$[ebp]
  015a5	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  015a8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  015ab	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  015af	52		 push	 edx
  015b0	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  015b3	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  015b7	03 45 e0	 add	 eax, DWORD PTR _x$[ebp]
  015ba	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  015bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  015bf	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  015c3	50		 push	 eax
  015c4	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  015c7	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  015cb	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  015ce	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  015d1	51		 push	 ecx
  015d2	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  015d5	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  015d9	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  015dc	03 01		 add	 eax, DWORD PTR [ecx]
  015de	50		 push	 eax
  015df	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  015e2	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 571  : 			graphMgr->NextScreen()->ShowList().Clear();

  015e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  015ed	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  015f2	8b c8		 mov	 ecx, eax
  015f4	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  015f9	8b c8		 mov	 ecx, eax
  015fb	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 572  : 			graphMgr->NextScreen()->ShowList().Add(B);

  01600	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  01603	52		 push	 edx
  01604	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0160a	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0160f	8b c8		 mov	 ecx, eax
  01611	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01616	8b c8		 mov	 ecx, eax
  01618	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 573  : 			graphMgr->ShowBits();

  0161d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01622	8b 10		 mov	 edx, DWORD PTR [eax]
  01624	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0162a	ff 52 40	 call	 DWORD PTR [edx+64]

; 574  : 		}

  0162d	e9 50 ff ff ff	 jmp	 $L62260
$L62261:

; 575  : 		if ((m == height/x) && (height % x)) {	

  01632	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01635	99		 cdq
  01636	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01639	39 45 d8	 cmp	 DWORD PTR _m$[ebp], eax
  0163c	0f 85 b1 00 00
	00		 jne	 $L62262
  01642	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01645	99		 cdq
  01646	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01649	85 d2		 test	 edx, edx
  0164b	0f 84 a2 00 00
	00		 je	 $L62262

; 576  : 		// if height is not an even multiple of x adjust for last draw
; 577  : 
; 578  : 			B.Set(l*x+r.A.x,(m-1)*x+r.A.y,l*x+x-1+r.A.x,(m-1)*x+x+(height%x)-1+r.A.y);

  01651	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01654	83 e9 01	 sub	 ecx, 1
  01657	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  0165b	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  0165e	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01661	99		 cdq
  01662	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01665	03 ca		 add	 ecx, edx
  01667	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  0166a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0166d	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  01671	51		 push	 ecx
  01672	8b 55 dc	 mov	 edx, DWORD PTR _l$[ebp]
  01675	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  01679	03 55 e0	 add	 edx, DWORD PTR _x$[ebp]
  0167c	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0167f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01681	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  01685	52		 push	 edx
  01686	8b 45 d8	 mov	 eax, DWORD PTR _m$[ebp]
  01689	83 e8 01	 sub	 eax, 1
  0168c	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01690	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01693	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  01696	50		 push	 eax
  01697	8b 55 dc	 mov	 edx, DWORD PTR _l$[ebp]
  0169a	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  0169e	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  016a1	03 10		 add	 edx, DWORD PTR [eax]
  016a3	52		 push	 edx
  016a4	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  016a7	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 579  : 			graphMgr->NextScreen()->ShowList().Clear();

  016ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  016b2	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  016b7	8b c8		 mov	 ecx, eax
  016b9	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  016be	8b c8		 mov	 ecx, eax
  016c0	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 580  : 			graphMgr->NextScreen()->ShowList().Add(B);

  016c5	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  016c8	51		 push	 ecx
  016c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  016cf	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  016d4	8b c8		 mov	 ecx, eax
  016d6	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  016db	8b c8		 mov	 ecx, eax
  016dd	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 581  : 			graphMgr->ShowBits();

  016e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  016e8	8b 02		 mov	 eax, DWORD PTR [edx]
  016ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  016f0	ff 50 40	 call	 DWORD PTR [eax+64]
$L62262:

; 583  : 	}

  016f3	e9 68 fe ff ff	 jmp	 $L62257
$L62258:

; 584  : 
; 585  : 	if (width%x) {

  016f8	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  016fb	99		 cdq
  016fc	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  016ff	85 d2		 test	 edx, edx
  01701	0f 84 93 01 00
	00		 je	 $L62267

; 586  : 	// if width is not an even multiple of x adjust for last draw
; 587  : 		for(m=0;m<height/x;m++) 	

  01707	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  0170e	eb 09		 jmp	 SHORT $L62264
$L62265:
  01710	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01713	83 c1 01	 add	 ecx, 1
  01716	89 4d d8	 mov	 DWORD PTR _m$[ebp], ecx
$L62264:
  01719	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  0171c	99		 cdq
  0171d	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01720	39 45 d8	 cmp	 DWORD PTR _m$[ebp], eax
  01723	0f 8d a4 00 00
	00		 jge	 $L62266

; 589  : 			B.Set((l-1)*x+r.A.x,m*x+r.A.y,(l-1)*x+x-1+(width%x)+r.A.x,m*x+x-1+r.A.y);

  01729	8b 55 d8	 mov	 edx, DWORD PTR _m$[ebp]
  0172c	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  01730	03 55 e0	 add	 edx, DWORD PTR _x$[ebp]
  01733	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01736	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01739	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  0173d	52		 push	 edx
  0173e	8b 4d dc	 mov	 ecx, DWORD PTR _l$[ebp]
  01741	83 e9 01	 sub	 ecx, 1
  01744	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01748	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  0174b	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0174e	99		 cdq
  0174f	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01752	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  01756	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01759	03 10		 add	 edx, DWORD PTR [eax]
  0175b	52		 push	 edx
  0175c	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  0175f	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01763	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01766	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  01769	51		 push	 ecx
  0176a	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  0176d	83 e8 01	 sub	 eax, 1
  01770	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01774	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01777	03 01		 add	 eax, DWORD PTR [ecx]
  01779	50		 push	 eax
  0177a	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0177d	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 590  : 			graphMgr->NextScreen()->ShowList().Clear();

  01782	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01788	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0178d	8b c8		 mov	 ecx, eax
  0178f	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01794	8b c8		 mov	 ecx, eax
  01796	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 591  : 			graphMgr->NextScreen()->ShowList().Add(B);

  0179b	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  0179e	52		 push	 edx
  0179f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  017a5	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  017aa	8b c8		 mov	 ecx, eax
  017ac	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  017b1	8b c8		 mov	 ecx, eax
  017b3	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 592  : 			graphMgr->ShowBits();

  017b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  017bd	8b 10		 mov	 edx, DWORD PTR [eax]
  017bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  017c5	ff 52 40	 call	 DWORD PTR [edx+64]

; 593  : 		}

  017c8	e9 43 ff ff ff	 jmp	 $L62265
$L62266:

; 594  : 		if ((m == height/x) && (height % x)) {	

  017cd	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  017d0	99		 cdq
  017d1	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  017d4	39 45 d8	 cmp	 DWORD PTR _m$[ebp], eax
  017d7	0f 85 bd 00 00
	00		 jne	 $L62267
  017dd	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  017e0	99		 cdq
  017e1	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  017e4	85 d2		 test	 edx, edx
  017e6	0f 84 ae 00 00
	00		 je	 $L62267

; 595  : 		// if height is not an even multiple of x adjust for last draw
; 596  : 
; 597  : 			B.Set((l-1)*x+r.A.x,(m-1)*x+r.A.y,(l-1)*x+x-1+(width%x)+r.A.x,(m-1)*x+x+(height%x)-1+r.A.y);

  017ec	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  017ef	83 e9 01	 sub	 ecx, 1
  017f2	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  017f6	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  017f9	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  017fc	99		 cdq
  017fd	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01800	03 ca		 add	 ecx, edx
  01802	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01805	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01808	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  0180c	51		 push	 ecx
  0180d	8b 4d dc	 mov	 ecx, DWORD PTR _l$[ebp]
  01810	83 e9 01	 sub	 ecx, 1
  01813	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01817	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  0181a	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0181d	99		 cdq
  0181e	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01821	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  01825	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01828	03 10		 add	 edx, DWORD PTR [eax]
  0182a	52		 push	 edx
  0182b	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  0182e	83 e9 01	 sub	 ecx, 1
  01831	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01835	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01838	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0183b	51		 push	 ecx
  0183c	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  0183f	83 e8 01	 sub	 eax, 1
  01842	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01846	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01849	03 01		 add	 eax, DWORD PTR [ecx]
  0184b	50		 push	 eax
  0184c	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0184f	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 598  : 			graphMgr->NextScreen()->ShowList().Clear();

  01854	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0185a	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0185f	8b c8		 mov	 ecx, eax
  01861	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01866	8b c8		 mov	 ecx, eax
  01868	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 599  : 			graphMgr->NextScreen()->ShowList().Add(B);

  0186d	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  01870	52		 push	 edx
  01871	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01877	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0187c	8b c8		 mov	 ecx, eax
  0187e	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01883	8b c8		 mov	 ecx, eax
  01885	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 600  : 			graphMgr->ShowBits();

  0188a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0188f	8b 10		 mov	 edx, DWORD PTR [eax]
  01891	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01897	ff 52 40	 call	 DWORD PTR [edx+64]
$L62267:

; 603  : 		// Clear entire screen just to be sure
; 604  : 
; 605  : 	B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  0189a	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0189d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  018a0	51		 push	 ecx
  018a1	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  018a4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  018a7	50		 push	 eax
  018a8	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  018ab	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  018ae	52		 push	 edx
  018af	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  018b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  018b4	51		 push	 ecx
  018b5	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  018b8	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 606  : 	graphMgr->NextScreen()->ShowList().Clear();

  018bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  018c3	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  018c8	8b c8		 mov	 ecx, eax
  018ca	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  018cf	8b c8		 mov	 ecx, eax
  018d1	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 607  : 	graphMgr->NextScreen()->ShowList().Add(B);

  018d6	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  018d9	52		 push	 edx
  018da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  018e0	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  018e5	8b c8		 mov	 ecx, eax
  018e7	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  018ec	8b c8		 mov	 ecx, eax
  018ee	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 608  : 	graphMgr->ShowBits();

  018f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  018f8	8b 10		 mov	 edx, DWORD PTR [eax]
  018fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01900	ff 52 40	 call	 DWORD PTR [edx+64]

; 609  : 
; 610  : }

  01903	8b e5		 mov	 esp, ebp
  01905	5d		 pop	 ebp
  01906	c3		 ret	 0
?WipeRightEffect@@YAXPAVPlaneShowStyle@@@Z ENDP		; WipeRightEffect
_style$ = 8
_x$ = -32
_height$ = -44
_width$ = -28
_l$ = -36
_m$ = -40
_B$ = -24
_p$ = -4
_r$ = -8
?WipeLeftEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; WipeLeftEffect

; 614  : {

  01907	55		 push	 ebp
  01908	8b ec		 mov	 ebp, esp
  0190a	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 615  : // This function wipes from right to left between two images
; 616  : 
; 617  : 	int x,height,width,l,m;
; 618  : 	x = style->divisions;

  0190d	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  01910	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  01913	89 4d e0	 mov	 DWORD PTR _x$[ebp], ecx

; 619  : 
; 620  :  	SOL_Rect	B(0,0,x-1,x-1);

  01916	8b 55 e0	 mov	 edx, DWORD PTR _x$[ebp]
  01919	83 ea 01	 sub	 edx, 1
  0191c	52		 push	 edx
  0191d	8b 45 e0	 mov	 eax, DWORD PTR _x$[ebp]
  01920	83 e8 01	 sub	 eax, 1
  01923	50		 push	 eax
  01924	6a 00		 push	 0
  01926	6a 00		 push	 0
  01928	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0192b	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 621  : 	// Since SOL_Rect includes all points specified, this is an x by x rect
; 622  : 
; 623  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  01930	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  01933	8b 11		 mov	 edx, DWORD PTR [ecx]
  01935	52		 push	 edx
  01936	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0193c	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  01941	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 624  : 	SOL_Rect& r = p->OnScreen();		

  01944	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  01947	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  0194c	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax

; 625  : 	height 	= r.B.y - r.A.y + 1;

  0194f	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01952	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01955	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  01958	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0195b	83 c2 01	 add	 edx, 1
  0195e	89 55 d4	 mov	 DWORD PTR _height$[ebp], edx

; 626  : 	width		= r.B.x - r.A.x + 1;

  01961	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01964	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01967	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0196a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0196c	83 c2 01	 add	 edx, 1
  0196f	89 55 e4	 mov	 DWORD PTR _width$[ebp], edx

; 627  : 
; 628  : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 629  : 
; 630  : 	if (width%x) {

  01972	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01975	99		 cdq
  01976	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01979	85 d2		 test	 edx, edx
  0197b	0f 84 8b 01 00
	00		 je	 $L62283

; 631  : 	// if width is not an even multiple of x adjust for first draw
; 632  : 		l = width/x ;

  01981	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01984	99		 cdq
  01985	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01988	89 45 dc	 mov	 DWORD PTR _l$[ebp], eax

; 633  : 		for(m=0;m<height/x;m++) 	

  0198b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  01992	eb 09		 jmp	 SHORT $L62280
$L62281:
  01994	8b 45 d8	 mov	 eax, DWORD PTR _m$[ebp]
  01997	83 c0 01	 add	 eax, 1
  0199a	89 45 d8	 mov	 DWORD PTR _m$[ebp], eax
$L62280:
  0199d	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  019a0	99		 cdq
  019a1	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  019a4	39 45 d8	 cmp	 DWORD PTR _m$[ebp], eax
  019a7	0f 8d 9b 00 00
	00		 jge	 $L62282

; 635  : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x-1+(width%x)+r.A.x,m*x+x-1+r.A.y);

  019ad	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  019b0	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  019b4	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  019b7	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  019ba	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  019bd	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  019c1	51		 push	 ecx
  019c2	8b 4d dc	 mov	 ecx, DWORD PTR _l$[ebp]
  019c5	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  019c9	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  019cc	99		 cdq
  019cd	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  019d0	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  019d4	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  019d7	03 10		 add	 edx, DWORD PTR [eax]
  019d9	52		 push	 edx
  019da	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  019dd	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  019e1	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  019e4	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  019e7	51		 push	 ecx
  019e8	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  019eb	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  019ef	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  019f2	03 01		 add	 eax, DWORD PTR [ecx]
  019f4	50		 push	 eax
  019f5	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  019f8	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 636  : 			graphMgr->NextScreen()->ShowList().Clear();

  019fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01a03	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01a08	8b c8		 mov	 ecx, eax
  01a0a	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01a0f	8b c8		 mov	 ecx, eax
  01a11	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 637  : 			graphMgr->NextScreen()->ShowList().Add(B);

  01a16	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  01a19	52		 push	 edx
  01a1a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01a20	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01a25	8b c8		 mov	 ecx, eax
  01a27	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01a2c	8b c8		 mov	 ecx, eax
  01a2e	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 638  : 			graphMgr->ShowBits();

  01a33	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01a38	8b 10		 mov	 edx, DWORD PTR [eax]
  01a3a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01a40	ff 52 40	 call	 DWORD PTR [edx+64]

; 639  : 		}

  01a43	e9 4c ff ff ff	 jmp	 $L62281
$L62282:

; 640  : 		if ((m == height/x) && (height % x)) {	

  01a48	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01a4b	99		 cdq
  01a4c	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01a4f	39 45 d8	 cmp	 DWORD PTR _m$[ebp], eax
  01a52	0f 85 b4 00 00
	00		 jne	 $L62283
  01a58	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01a5b	99		 cdq
  01a5c	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01a5f	85 d2		 test	 edx, edx
  01a61	0f 84 a5 00 00
	00		 je	 $L62283

; 641  : 		// if height is not an even multiple of x adjust for last draw
; 642  : 
; 643  : 			B.Set(l*x+r.A.x,(m-1)*x+r.A.y,l*x-1+(width%x)+r.A.x,(m-1)*x+x+(height%x)-1+r.A.y);

  01a67	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01a6a	83 e9 01	 sub	 ecx, 1
  01a6d	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01a71	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  01a74	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01a77	99		 cdq
  01a78	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01a7b	03 ca		 add	 ecx, edx
  01a7d	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01a80	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01a83	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  01a87	51		 push	 ecx
  01a88	8b 4d dc	 mov	 ecx, DWORD PTR _l$[ebp]
  01a8b	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01a8f	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01a92	99		 cdq
  01a93	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01a96	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  01a9a	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01a9d	03 10		 add	 edx, DWORD PTR [eax]
  01a9f	52		 push	 edx
  01aa0	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01aa3	83 e9 01	 sub	 ecx, 1
  01aa6	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01aaa	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01aad	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  01ab0	51		 push	 ecx
  01ab1	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  01ab4	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01ab8	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01abb	03 01		 add	 eax, DWORD PTR [ecx]
  01abd	50		 push	 eax
  01abe	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01ac1	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 644  : 			graphMgr->NextScreen()->ShowList().Clear();

  01ac6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01acc	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01ad1	8b c8		 mov	 ecx, eax
  01ad3	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01ad8	8b c8		 mov	 ecx, eax
  01ada	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 645  : 			graphMgr->NextScreen()->ShowList().Add(B);

  01adf	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  01ae2	52		 push	 edx
  01ae3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01ae9	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01aee	8b c8		 mov	 ecx, eax
  01af0	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01af5	8b c8		 mov	 ecx, eax
  01af7	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 646  : 			graphMgr->ShowBits();

  01afc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01b01	8b 10		 mov	 edx, DWORD PTR [eax]
  01b03	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01b09	ff 52 40	 call	 DWORD PTR [edx+64]
$L62283:

; 649  : 
; 650  : 
; 651  : 	for(l=width/x-1;l>=0;l--) {

  01b0c	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01b0f	99		 cdq
  01b10	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01b13	83 e8 01	 sub	 eax, 1
  01b16	89 45 dc	 mov	 DWORD PTR _l$[ebp], eax
  01b19	eb 09		 jmp	 SHORT $L62284
$L62285:
  01b1b	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  01b1e	83 e8 01	 sub	 eax, 1
  01b21	89 45 dc	 mov	 DWORD PTR _l$[ebp], eax
$L62284:
  01b24	83 7d dc 00	 cmp	 DWORD PTR _l$[ebp], 0
  01b28	0f 8c 7f 01 00
	00		 jl	 $L62286

; 652  : 		for(m=0;m<height/x;m++) 	

  01b2e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  01b35	eb 09		 jmp	 SHORT $L62287
$L62288:
  01b37	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01b3a	83 c1 01	 add	 ecx, 1
  01b3d	89 4d d8	 mov	 DWORD PTR _m$[ebp], ecx
$L62287:
  01b40	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01b43	99		 cdq
  01b44	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01b47	39 45 d8	 cmp	 DWORD PTR _m$[ebp], eax
  01b4a	0f 8d 97 00 00
	00		 jge	 $L62289

; 654  : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+x-1+r.A.y);

  01b50	8b 55 d8	 mov	 edx, DWORD PTR _m$[ebp]
  01b53	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  01b57	03 55 e0	 add	 edx, DWORD PTR _x$[ebp]
  01b5a	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01b5d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01b60	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  01b64	52		 push	 edx
  01b65	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  01b68	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01b6c	03 45 e0	 add	 eax, DWORD PTR _x$[ebp]
  01b6f	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01b72	8b 11		 mov	 edx, DWORD PTR [ecx]
  01b74	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  01b78	50		 push	 eax
  01b79	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01b7c	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01b80	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01b83	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  01b86	51		 push	 ecx
  01b87	8b 45 dc	 mov	 eax, DWORD PTR _l$[ebp]
  01b8a	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01b8e	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01b91	03 01		 add	 eax, DWORD PTR [ecx]
  01b93	50		 push	 eax
  01b94	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01b97	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 655  : 			graphMgr->NextScreen()->ShowList().Clear();

  01b9c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01ba2	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01ba7	8b c8		 mov	 ecx, eax
  01ba9	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01bae	8b c8		 mov	 ecx, eax
  01bb0	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 656  : 			graphMgr->NextScreen()->ShowList().Add(B);

  01bb5	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  01bb8	52		 push	 edx
  01bb9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01bbf	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01bc4	8b c8		 mov	 ecx, eax
  01bc6	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01bcb	8b c8		 mov	 ecx, eax
  01bcd	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 657  : 			graphMgr->ShowBits();

  01bd2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01bd7	8b 10		 mov	 edx, DWORD PTR [eax]
  01bd9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01bdf	ff 52 40	 call	 DWORD PTR [edx+64]

; 658  : 		}

  01be2	e9 50 ff ff ff	 jmp	 $L62288
$L62289:

; 659  : 		if ((m == height/x) && (height % x)) {	

  01be7	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01bea	99		 cdq
  01beb	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01bee	39 45 d8	 cmp	 DWORD PTR _m$[ebp], eax
  01bf1	0f 85 b1 00 00
	00		 jne	 $L62290
  01bf7	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01bfa	99		 cdq
  01bfb	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01bfe	85 d2		 test	 edx, edx
  01c00	0f 84 a2 00 00
	00		 je	 $L62290

; 660  : 		// if height is not an even multiple of x adjust for last draw
; 661  : 
; 662  : 			B.Set(l*x+r.A.x,(m-1)*x+r.A.y,l*x+x-1+r.A.x,(m-1)*x+x+(height%x)-1+r.A.y);

  01c06	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01c09	83 e9 01	 sub	 ecx, 1
  01c0c	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01c10	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  01c13	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01c16	99		 cdq
  01c17	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01c1a	03 ca		 add	 ecx, edx
  01c1c	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01c1f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01c22	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  01c26	51		 push	 ecx
  01c27	8b 55 dc	 mov	 edx, DWORD PTR _l$[ebp]
  01c2a	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  01c2e	03 55 e0	 add	 edx, DWORD PTR _x$[ebp]
  01c31	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01c34	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c36	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  01c3a	52		 push	 edx
  01c3b	8b 45 d8	 mov	 eax, DWORD PTR _m$[ebp]
  01c3e	83 e8 01	 sub	 eax, 1
  01c41	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01c45	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01c48	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  01c4b	50		 push	 eax
  01c4c	8b 55 dc	 mov	 edx, DWORD PTR _l$[ebp]
  01c4f	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  01c53	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01c56	03 10		 add	 edx, DWORD PTR [eax]
  01c58	52		 push	 edx
  01c59	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01c5c	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 663  : 			graphMgr->NextScreen()->ShowList().Clear();

  01c61	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01c67	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01c6c	8b c8		 mov	 ecx, eax
  01c6e	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01c73	8b c8		 mov	 ecx, eax
  01c75	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 664  : 			graphMgr->NextScreen()->ShowList().Add(B);

  01c7a	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01c7d	51		 push	 ecx
  01c7e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01c84	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01c89	8b c8		 mov	 ecx, eax
  01c8b	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01c90	8b c8		 mov	 ecx, eax
  01c92	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 665  : 			graphMgr->ShowBits();

  01c97	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01c9d	8b 02		 mov	 eax, DWORD PTR [edx]
  01c9f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01ca5	ff 50 40	 call	 DWORD PTR [eax+64]
$L62290:

; 667  : 	}

  01ca8	e9 6e fe ff ff	 jmp	 $L62285
$L62286:

; 668  : 		// Clear entire screen to be sure
; 669  : 
; 670  : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  01cad	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01cb0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01cb3	52		 push	 edx
  01cb4	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01cb7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01cba	51		 push	 ecx
  01cbb	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01cbe	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01cc1	50		 push	 eax
  01cc2	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01cc5	8b 11		 mov	 edx, DWORD PTR [ecx]
  01cc7	52		 push	 edx
  01cc8	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01ccb	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 671  : 		graphMgr->NextScreen()->ShowList().Clear();

  01cd0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01cd6	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01cdb	8b c8		 mov	 ecx, eax
  01cdd	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01ce2	8b c8		 mov	 ecx, eax
  01ce4	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 672  : 		graphMgr->NextScreen()->ShowList().Add(B);

  01ce9	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  01cec	50		 push	 eax
  01ced	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01cf3	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01cf8	8b c8		 mov	 ecx, eax
  01cfa	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01cff	8b c8		 mov	 ecx, eax
  01d01	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 673  : 		graphMgr->ShowBits();

  01d06	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01d0c	8b 11		 mov	 edx, DWORD PTR [ecx]
  01d0e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01d14	ff 52 40	 call	 DWORD PTR [edx+64]

; 674  : 
; 675  : }

  01d17	8b e5		 mov	 esp, ebp
  01d19	5d		 pop	 ebp
  01d1a	c3		 ret	 0
?WipeLeftEffect@@YAXPAVPlaneShowStyle@@@Z ENDP		; WipeLeftEffect
_style$ = 8
_x$ = -32
_height$ = -44
_width$ = -28
_m$ = -40
_B$ = -24
_p$ = -4
_r$ = -8
_l$62305 = -48
_l$62311 = -52
?WipeDownEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; WipeDownEffect

; 679  : {

  01d1b	55		 push	 ebp
  01d1c	8b ec		 mov	 ebp, esp
  01d1e	83 ec 34	 sub	 esp, 52			; 00000034H

; 680  : // This function wipes from top to bottom between two images
; 681  : 
; 682  : 	int x,height,width, l, m;
; 683  : 	x = style->divisions;

  01d21	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  01d24	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  01d27	89 4d e0	 mov	 DWORD PTR _x$[ebp], ecx

; 684  : 
; 685  :  	SOL_Rect	B(0,0,x-1,x-1);

  01d2a	8b 55 e0	 mov	 edx, DWORD PTR _x$[ebp]
  01d2d	83 ea 01	 sub	 edx, 1
  01d30	52		 push	 edx
  01d31	8b 45 e0	 mov	 eax, DWORD PTR _x$[ebp]
  01d34	83 e8 01	 sub	 eax, 1
  01d37	50		 push	 eax
  01d38	6a 00		 push	 0
  01d3a	6a 00		 push	 0
  01d3c	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01d3f	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 686  : 	// Since SOL_Rect includes all points specified, this is an x by x rect
; 687  : 
; 688  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  01d44	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  01d47	8b 11		 mov	 edx, DWORD PTR [ecx]
  01d49	52		 push	 edx
  01d4a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01d50	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  01d55	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 689  : 	SOL_Rect& r = p->OnScreen();		

  01d58	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  01d5b	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  01d60	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax

; 690  : 	height 	= r.B.y - r.A.y + 1;

  01d63	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01d66	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01d69	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  01d6c	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  01d6f	83 c2 01	 add	 edx, 1
  01d72	89 55 d4	 mov	 DWORD PTR _height$[ebp], edx

; 691  : 	width		= r.B.x - r.A.x + 1;

  01d75	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01d78	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01d7b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  01d7e	2b 11		 sub	 edx, DWORD PTR [ecx]
  01d80	83 c2 01	 add	 edx, 1
  01d83	89 55 e4	 mov	 DWORD PTR _width$[ebp], edx

; 692  : 
; 693  : 	
; 694  : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 695  : 
; 696  : 	for(m=0;m<height/x;m++) {	

  01d86	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  01d8d	eb 09		 jmp	 SHORT $L62302
$L62303:
  01d8f	8b 45 d8	 mov	 eax, DWORD PTR _m$[ebp]
  01d92	83 c0 01	 add	 eax, 1
  01d95	89 45 d8	 mov	 DWORD PTR _m$[ebp], eax
$L62302:
  01d98	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01d9b	99		 cdq
  01d9c	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01d9f	39 45 d8	 cmp	 DWORD PTR _m$[ebp], eax
  01da2	0f 8d 7c 01 00
	00		 jge	 $L62304

; 697  : 		for(int l=0;l<width/x;l++) 

  01da8	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _l$62305[ebp], 0
  01daf	eb 09		 jmp	 SHORT $L62306
$L62307:
  01db1	8b 4d d0	 mov	 ecx, DWORD PTR _l$62305[ebp]
  01db4	83 c1 01	 add	 ecx, 1
  01db7	89 4d d0	 mov	 DWORD PTR _l$62305[ebp], ecx
$L62306:
  01dba	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01dbd	99		 cdq
  01dbe	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01dc1	39 45 d0	 cmp	 DWORD PTR _l$62305[ebp], eax
  01dc4	0f 8d 97 00 00
	00		 jge	 $L62308

; 699  : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+x-1+r.A.y);

  01dca	8b 55 d8	 mov	 edx, DWORD PTR _m$[ebp]
  01dcd	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  01dd1	03 55 e0	 add	 edx, DWORD PTR _x$[ebp]
  01dd4	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01dd7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01dda	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  01dde	52		 push	 edx
  01ddf	8b 45 d0	 mov	 eax, DWORD PTR _l$62305[ebp]
  01de2	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01de6	03 45 e0	 add	 eax, DWORD PTR _x$[ebp]
  01de9	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01dec	8b 11		 mov	 edx, DWORD PTR [ecx]
  01dee	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  01df2	50		 push	 eax
  01df3	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01df6	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01dfa	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01dfd	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  01e00	51		 push	 ecx
  01e01	8b 45 d0	 mov	 eax, DWORD PTR _l$62305[ebp]
  01e04	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01e08	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01e0b	03 01		 add	 eax, DWORD PTR [ecx]
  01e0d	50		 push	 eax
  01e0e	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01e11	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 700  : 			graphMgr->NextScreen()->ShowList().Clear();

  01e16	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01e1c	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01e21	8b c8		 mov	 ecx, eax
  01e23	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01e28	8b c8		 mov	 ecx, eax
  01e2a	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 701  : 			graphMgr->NextScreen()->ShowList().Add(B);

  01e2f	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  01e32	52		 push	 edx
  01e33	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01e39	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01e3e	8b c8		 mov	 ecx, eax
  01e40	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01e45	8b c8		 mov	 ecx, eax
  01e47	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 702  : 			graphMgr->ShowBits();

  01e4c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01e51	8b 10		 mov	 edx, DWORD PTR [eax]
  01e53	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01e59	ff 52 40	 call	 DWORD PTR [edx+64]

; 703  : 		}

  01e5c	e9 50 ff ff ff	 jmp	 $L62307
$L62308:

; 704  : 		if ((l == width/x) && (width%x)){

  01e61	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01e64	99		 cdq
  01e65	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01e68	39 45 d0	 cmp	 DWORD PTR _l$62305[ebp], eax
  01e6b	0f 85 ae 00 00
	00		 jne	 $L62309
  01e71	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01e74	99		 cdq
  01e75	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01e78	85 d2		 test	 edx, edx
  01e7a	0f 84 9f 00 00
	00		 je	 $L62309

; 705  : 		// if width is not an even multiple of x adjust for last draw
; 706  : 
; 707  : 			B.Set((l-1)*x+r.A.x,m*x+r.A.y,(l-1)*x+x-1+(width%x)+r.A.x,m*x+x-1+r.A.y);

  01e80	8b 45 d8	 mov	 eax, DWORD PTR _m$[ebp]
  01e83	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01e87	03 45 e0	 add	 eax, DWORD PTR _x$[ebp]
  01e8a	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01e8d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01e90	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  01e94	50		 push	 eax
  01e95	8b 4d d0	 mov	 ecx, DWORD PTR _l$62305[ebp]
  01e98	83 e9 01	 sub	 ecx, 1
  01e9b	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01e9f	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  01ea2	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01ea5	99		 cdq
  01ea6	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01ea9	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  01ead	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01eb0	03 10		 add	 edx, DWORD PTR [eax]
  01eb2	52		 push	 edx
  01eb3	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01eb6	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01eba	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01ebd	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  01ec0	51		 push	 ecx
  01ec1	8b 45 d0	 mov	 eax, DWORD PTR _l$62305[ebp]
  01ec4	83 e8 01	 sub	 eax, 1
  01ec7	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  01ecb	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  01ece	03 01		 add	 eax, DWORD PTR [ecx]
  01ed0	50		 push	 eax
  01ed1	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01ed4	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 708  : 			graphMgr->NextScreen()->ShowList().Clear();

  01ed9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01edf	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01ee4	8b c8		 mov	 ecx, eax
  01ee6	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01eeb	8b c8		 mov	 ecx, eax
  01eed	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 709  : 			graphMgr->NextScreen()->ShowList().Add(B);

  01ef2	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  01ef5	52		 push	 edx
  01ef6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01efc	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01f01	8b c8		 mov	 ecx, eax
  01f03	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01f08	8b c8		 mov	 ecx, eax
  01f0a	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 710  : 			graphMgr->ShowBits();

  01f0f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01f14	8b 10		 mov	 edx, DWORD PTR [eax]
  01f16	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01f1c	ff 52 40	 call	 DWORD PTR [edx+64]
$L62309:

; 712  : 	}

  01f1f	e9 6b fe ff ff	 jmp	 $L62303
$L62304:

; 713  : 	
; 714  : 	if (height%x) {

  01f24	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01f27	99		 cdq
  01f28	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01f2b	85 d2		 test	 edx, edx
  01f2d	0f 84 92 01 00
	00		 je	 $L62315

; 715  : 	// if height is not an even multiple of x adjust for last draw
; 716  : 
; 717  : 		for(int l=0;l<width/x;l++) 

  01f33	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _l$62311[ebp], 0
  01f3a	eb 09		 jmp	 SHORT $L62312
$L62313:
  01f3c	8b 45 cc	 mov	 eax, DWORD PTR _l$62311[ebp]
  01f3f	83 c0 01	 add	 eax, 1
  01f42	89 45 cc	 mov	 DWORD PTR _l$62311[ebp], eax
$L62312:
  01f45	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01f48	99		 cdq
  01f49	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01f4c	39 45 cc	 cmp	 DWORD PTR _l$62311[ebp], eax
  01f4f	0f 8d a5 00 00
	00		 jge	 $L62314

; 719  : 			B.Set(l*x+r.A.x,(m-1)*x+r.A.y,l*x+x-1+r.A.x,(m-1)*x+x-1+(height%x)+r.A.y);

  01f55	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  01f58	83 e9 01	 sub	 ecx, 1
  01f5b	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01f5f	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  01f62	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  01f65	99		 cdq
  01f66	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  01f69	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  01f6d	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01f70	03 50 04	 add	 edx, DWORD PTR [eax+4]
  01f73	52		 push	 edx
  01f74	8b 4d cc	 mov	 ecx, DWORD PTR _l$62311[ebp]
  01f77	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01f7b	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  01f7e	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01f81	8b 02		 mov	 eax, DWORD PTR [edx]
  01f83	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  01f87	51		 push	 ecx
  01f88	8b 55 d8	 mov	 edx, DWORD PTR _m$[ebp]
  01f8b	83 ea 01	 sub	 edx, 1
  01f8e	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  01f92	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  01f95	03 50 04	 add	 edx, DWORD PTR [eax+4]
  01f98	52		 push	 edx
  01f99	8b 4d cc	 mov	 ecx, DWORD PTR _l$62311[ebp]
  01f9c	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  01fa0	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  01fa3	03 0a		 add	 ecx, DWORD PTR [edx]
  01fa5	51		 push	 ecx
  01fa6	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  01fa9	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 720  : 			graphMgr->NextScreen()->ShowList().Clear();

  01fae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01fb4	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01fb9	8b c8		 mov	 ecx, eax
  01fbb	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01fc0	8b c8		 mov	 ecx, eax
  01fc2	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 721  : 			graphMgr->NextScreen()->ShowList().Add(B);

  01fc7	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  01fca	50		 push	 eax
  01fcb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01fd1	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  01fd6	8b c8		 mov	 ecx, eax
  01fd8	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  01fdd	8b c8		 mov	 ecx, eax
  01fdf	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 722  : 			graphMgr->ShowBits();

  01fe4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01fea	8b 11		 mov	 edx, DWORD PTR [ecx]
  01fec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01ff2	ff 52 40	 call	 DWORD PTR [edx+64]

; 723  : 		}

  01ff5	e9 42 ff ff ff	 jmp	 $L62313
$L62314:

; 724  : 		if ((l == width/x) && (width%x)){

  01ffa	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  01ffd	99		 cdq
  01ffe	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  02001	39 45 cc	 cmp	 DWORD PTR _l$62311[ebp], eax
  02004	0f 85 bb 00 00
	00		 jne	 $L62315
  0200a	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0200d	99		 cdq
  0200e	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  02011	85 d2		 test	 edx, edx
  02013	0f 84 ac 00 00
	00		 je	 $L62315

; 725  : 		// if width is not an even multiple of x adjust for last draw
; 726  : 
; 727  : 			B.Set((l-1)*x+r.A.x,(m-1)*x+r.A.y,(l-1)*x+x-1+(width%x)+r.A.x,(m-1)*x+x-1+(height%x)+r.A.y);

  02019	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  0201c	83 e9 01	 sub	 ecx, 1
  0201f	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  02023	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  02026	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02029	99		 cdq
  0202a	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  0202d	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  02031	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02034	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02037	52		 push	 edx
  02038	8b 4d cc	 mov	 ecx, DWORD PTR _l$62311[ebp]
  0203b	83 e9 01	 sub	 ecx, 1
  0203e	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  02042	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  02045	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02048	99		 cdq
  02049	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  0204c	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  02050	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02053	03 10		 add	 edx, DWORD PTR [eax]
  02055	52		 push	 edx
  02056	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  02059	83 e9 01	 sub	 ecx, 1
  0205c	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  02060	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02063	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  02066	51		 push	 ecx
  02067	8b 45 cc	 mov	 eax, DWORD PTR _l$62311[ebp]
  0206a	83 e8 01	 sub	 eax, 1
  0206d	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  02071	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02074	03 01		 add	 eax, DWORD PTR [ecx]
  02076	50		 push	 eax
  02077	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0207a	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 728  : 			graphMgr->NextScreen()->ShowList().Clear();

  0207f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02085	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0208a	8b c8		 mov	 ecx, eax
  0208c	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02091	8b c8		 mov	 ecx, eax
  02093	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 729  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02098	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  0209b	52		 push	 edx
  0209c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  020a2	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  020a7	8b c8		 mov	 ecx, eax
  020a9	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  020ae	8b c8		 mov	 ecx, eax
  020b0	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 730  : 			graphMgr->ShowBits();

  020b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  020ba	8b 10		 mov	 edx, DWORD PTR [eax]
  020bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  020c2	ff 52 40	 call	 DWORD PTR [edx+64]
$L62315:

; 733  : 
; 734  : 
; 735  : 		// Clear entire screen just to be sure
; 736  : 
; 737  : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  020c5	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  020c8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  020cb	51		 push	 ecx
  020cc	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  020cf	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  020d2	50		 push	 eax
  020d3	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  020d6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  020d9	52		 push	 edx
  020da	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  020dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  020df	51		 push	 ecx
  020e0	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  020e3	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 738  : 		graphMgr->NextScreen()->ShowList().Clear();

  020e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  020ee	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  020f3	8b c8		 mov	 ecx, eax
  020f5	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  020fa	8b c8		 mov	 ecx, eax
  020fc	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 739  : 		graphMgr->NextScreen()->ShowList().Add(B);

  02101	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  02104	52		 push	 edx
  02105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0210b	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02110	8b c8		 mov	 ecx, eax
  02112	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02117	8b c8		 mov	 ecx, eax
  02119	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 740  : 		graphMgr->ShowBits();

  0211e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02123	8b 10		 mov	 edx, DWORD PTR [eax]
  02125	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0212b	ff 52 40	 call	 DWORD PTR [edx+64]

; 741  : 
; 742  : }

  0212e	8b e5		 mov	 esp, ebp
  02130	5d		 pop	 ebp
  02131	c3		 ret	 0
?WipeDownEffect@@YAXPAVPlaneShowStyle@@@Z ENDP		; WipeDownEffect
_style$ = 8
_x$ = -32
_height$ = -44
_width$ = -28
_m$ = -40
_B$ = -24
_p$ = -4
_r$ = -8
_l$62328 = -48
_l$62336 = -52
?WipeUpEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; WipeUpEffect

; 746  : {

  02132	55		 push	 ebp
  02133	8b ec		 mov	 ebp, esp
  02135	83 ec 34	 sub	 esp, 52			; 00000034H

; 747  : // This function wipes from bottom to top between two images
; 748  : 
; 749  : 	int x,height,width,m, l;
; 750  : 	x = style->divisions;

  02138	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  0213b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0213e	89 4d e0	 mov	 DWORD PTR _x$[ebp], ecx

; 751  : 
; 752  :  	SOL_Rect	B(0,0,x-1,x-1);

  02141	8b 55 e0	 mov	 edx, DWORD PTR _x$[ebp]
  02144	83 ea 01	 sub	 edx, 1
  02147	52		 push	 edx
  02148	8b 45 e0	 mov	 eax, DWORD PTR _x$[ebp]
  0214b	83 e8 01	 sub	 eax, 1
  0214e	50		 push	 eax
  0214f	6a 00		 push	 0
  02151	6a 00		 push	 0
  02153	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02156	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 753  : 	// Since SOL_Rect includes all points specified, this is an x by x rect
; 754  : 
; 755  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  0215b	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  0215e	8b 11		 mov	 edx, DWORD PTR [ecx]
  02160	52		 push	 edx
  02161	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02167	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  0216c	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 756  : 	SOL_Rect& r = p->OnScreen();		

  0216f	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  02172	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  02177	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax

; 757  : 	height 	= r.B.y - r.A.y + 1;

  0217a	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0217d	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02180	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  02183	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  02186	83 c2 01	 add	 edx, 1
  02189	89 55 d4	 mov	 DWORD PTR _height$[ebp], edx

; 758  : 	width		= r.B.x - r.A.x + 1;

  0218c	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0218f	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02192	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  02195	2b 11		 sub	 edx, DWORD PTR [ecx]
  02197	83 c2 01	 add	 edx, 1
  0219a	89 55 e4	 mov	 DWORD PTR _width$[ebp], edx

; 759  : 
; 760  : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 761  : 
; 762  : 	if (height%x) {

  0219d	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  021a0	99		 cdq
  021a1	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  021a4	85 d2		 test	 edx, edx
  021a6	0f 84 8a 01 00
	00		 je	 $L62332

; 763  : 	// if height is not an even multiple of x adjust for the first draw
; 764  : 		m = height/x;

  021ac	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  021af	99		 cdq
  021b0	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  021b3	89 45 d8	 mov	 DWORD PTR _m$[ebp], eax

; 765  : 		for(int l=0;l<width/x;l++) 

  021b6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _l$62328[ebp], 0
  021bd	eb 09		 jmp	 SHORT $L62329
$L62330:
  021bf	8b 45 d0	 mov	 eax, DWORD PTR _l$62328[ebp]
  021c2	83 c0 01	 add	 eax, 1
  021c5	89 45 d0	 mov	 DWORD PTR _l$62328[ebp], eax
$L62329:
  021c8	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  021cb	99		 cdq
  021cc	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  021cf	39 45 d0	 cmp	 DWORD PTR _l$62328[ebp], eax
  021d2	0f 8d 9c 00 00
	00		 jge	 $L62331

; 767  : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x-1+(height%x)+r.A.y);

  021d8	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  021db	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  021df	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  021e2	99		 cdq
  021e3	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  021e6	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  021ea	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  021ed	03 50 04	 add	 edx, DWORD PTR [eax+4]
  021f0	52		 push	 edx
  021f1	8b 4d d0	 mov	 ecx, DWORD PTR _l$62328[ebp]
  021f4	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  021f8	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  021fb	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  021fe	8b 02		 mov	 eax, DWORD PTR [edx]
  02200	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  02204	51		 push	 ecx
  02205	8b 55 d8	 mov	 edx, DWORD PTR _m$[ebp]
  02208	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  0220c	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0220f	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02212	52		 push	 edx
  02213	8b 4d d0	 mov	 ecx, DWORD PTR _l$62328[ebp]
  02216	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  0221a	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  0221d	03 0a		 add	 ecx, DWORD PTR [edx]
  0221f	51		 push	 ecx
  02220	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02223	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 768  : 			graphMgr->NextScreen()->ShowList().Clear();

  02228	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0222e	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02233	8b c8		 mov	 ecx, eax
  02235	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0223a	8b c8		 mov	 ecx, eax
  0223c	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 769  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02241	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  02244	50		 push	 eax
  02245	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0224b	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02250	8b c8		 mov	 ecx, eax
  02252	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02257	8b c8		 mov	 ecx, eax
  02259	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 770  : 			graphMgr->ShowBits();

  0225e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02264	8b 11		 mov	 edx, DWORD PTR [ecx]
  02266	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0226c	ff 52 40	 call	 DWORD PTR [edx+64]

; 771  : 		}

  0226f	e9 4b ff ff ff	 jmp	 $L62330
$L62331:

; 772  : 		if ((l == width/x) && (width%x)){

  02274	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02277	99		 cdq
  02278	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  0227b	39 45 d0	 cmp	 DWORD PTR _l$62328[ebp], eax
  0227e	0f 85 b2 00 00
	00		 jne	 $L62332
  02284	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02287	99		 cdq
  02288	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  0228b	85 d2		 test	 edx, edx
  0228d	0f 84 a3 00 00
	00		 je	 $L62332

; 773  : 		// if width is not an even multiple of x adjust for last draw
; 774  : 
; 775  : 			B.Set((l-1)*x+r.A.x,m*x+r.A.y,(l-1)*x+x-1+(width%x)+r.A.x,m*x-1+(height%x)+r.A.y);

  02293	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  02296	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  0229a	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  0229d	99		 cdq
  0229e	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  022a1	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  022a5	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  022a8	03 50 04	 add	 edx, DWORD PTR [eax+4]
  022ab	52		 push	 edx
  022ac	8b 4d d0	 mov	 ecx, DWORD PTR _l$62328[ebp]
  022af	83 e9 01	 sub	 ecx, 1
  022b2	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  022b6	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  022b9	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  022bc	99		 cdq
  022bd	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  022c0	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  022c4	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  022c7	03 10		 add	 edx, DWORD PTR [eax]
  022c9	52		 push	 edx
  022ca	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  022cd	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  022d1	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  022d4	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  022d7	51		 push	 ecx
  022d8	8b 45 d0	 mov	 eax, DWORD PTR _l$62328[ebp]
  022db	83 e8 01	 sub	 eax, 1
  022de	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  022e2	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  022e5	03 01		 add	 eax, DWORD PTR [ecx]
  022e7	50		 push	 eax
  022e8	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  022eb	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 776  : 			graphMgr->NextScreen()->ShowList().Clear();

  022f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  022f6	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  022fb	8b c8		 mov	 ecx, eax
  022fd	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02302	8b c8		 mov	 ecx, eax
  02304	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 777  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02309	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  0230c	52		 push	 edx
  0230d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02313	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02318	8b c8		 mov	 ecx, eax
  0231a	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0231f	8b c8		 mov	 ecx, eax
  02321	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 778  : 			graphMgr->ShowBits();

  02326	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0232b	8b 10		 mov	 edx, DWORD PTR [eax]
  0232d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02333	ff 52 40	 call	 DWORD PTR [edx+64]
$L62332:

; 781  : 
; 782  : 	for(m=height/x-1;m>=0;m--) {	

  02336	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02339	99		 cdq
  0233a	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  0233d	83 e8 01	 sub	 eax, 1
  02340	89 45 d8	 mov	 DWORD PTR _m$[ebp], eax
  02343	eb 09		 jmp	 SHORT $L62333
$L62334:
  02345	8b 45 d8	 mov	 eax, DWORD PTR _m$[ebp]
  02348	83 e8 01	 sub	 eax, 1
  0234b	89 45 d8	 mov	 DWORD PTR _m$[ebp], eax
$L62333:
  0234e	83 7d d8 00	 cmp	 DWORD PTR _m$[ebp], 0
  02352	0f 8c 7c 01 00
	00		 jl	 $L62335

; 783  : 		for(int l=0;l<width/x;l++) 

  02358	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _l$62336[ebp], 0
  0235f	eb 09		 jmp	 SHORT $L62337
$L62338:
  02361	8b 4d cc	 mov	 ecx, DWORD PTR _l$62336[ebp]
  02364	83 c1 01	 add	 ecx, 1
  02367	89 4d cc	 mov	 DWORD PTR _l$62336[ebp], ecx
$L62337:
  0236a	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0236d	99		 cdq
  0236e	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  02371	39 45 cc	 cmp	 DWORD PTR _l$62336[ebp], eax
  02374	0f 8d 97 00 00
	00		 jge	 $L62339

; 785  : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+x-1+r.A.y);

  0237a	8b 55 d8	 mov	 edx, DWORD PTR _m$[ebp]
  0237d	0f af 55 e0	 imul	 edx, DWORD PTR _x$[ebp]
  02381	03 55 e0	 add	 edx, DWORD PTR _x$[ebp]
  02384	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02387	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0238a	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  0238e	52		 push	 edx
  0238f	8b 45 cc	 mov	 eax, DWORD PTR _l$62336[ebp]
  02392	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  02396	03 45 e0	 add	 eax, DWORD PTR _x$[ebp]
  02399	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  0239c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0239e	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  023a2	50		 push	 eax
  023a3	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  023a6	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  023aa	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  023ad	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  023b0	51		 push	 ecx
  023b1	8b 45 cc	 mov	 eax, DWORD PTR _l$62336[ebp]
  023b4	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  023b8	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  023bb	03 01		 add	 eax, DWORD PTR [ecx]
  023bd	50		 push	 eax
  023be	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  023c1	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 786  : 			graphMgr->NextScreen()->ShowList().Clear();

  023c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  023cc	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  023d1	8b c8		 mov	 ecx, eax
  023d3	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  023d8	8b c8		 mov	 ecx, eax
  023da	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 787  : 			graphMgr->NextScreen()->ShowList().Add(B);

  023df	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  023e2	52		 push	 edx
  023e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  023e9	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  023ee	8b c8		 mov	 ecx, eax
  023f0	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  023f5	8b c8		 mov	 ecx, eax
  023f7	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 788  : 			graphMgr->ShowBits();

  023fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02401	8b 10		 mov	 edx, DWORD PTR [eax]
  02403	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02409	ff 52 40	 call	 DWORD PTR [edx+64]

; 789  : 		}

  0240c	e9 50 ff ff ff	 jmp	 $L62338
$L62339:

; 790  : 		if ((l == width/x) && (width%x)){

  02411	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02414	99		 cdq
  02415	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  02418	39 45 cc	 cmp	 DWORD PTR _l$62336[ebp], eax
  0241b	0f 85 ae 00 00
	00		 jne	 $L62340
  02421	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02424	99		 cdq
  02425	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  02428	85 d2		 test	 edx, edx
  0242a	0f 84 9f 00 00
	00		 je	 $L62340

; 791  : 		// if width is not an even multiple of x adjust for last draw
; 792  : 
; 793  : 			B.Set((l-1)*x+r.A.x,m*x+r.A.y,(l-1)*x+x-1+(width%x)+r.A.x,m*x+x-1+r.A.y);

  02430	8b 45 d8	 mov	 eax, DWORD PTR _m$[ebp]
  02433	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  02437	03 45 e0	 add	 eax, DWORD PTR _x$[ebp]
  0243a	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  0243d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02440	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  02444	50		 push	 eax
  02445	8b 4d cc	 mov	 ecx, DWORD PTR _l$62336[ebp]
  02448	83 e9 01	 sub	 ecx, 1
  0244b	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  0244f	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp]
  02452	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02455	99		 cdq
  02456	f7 7d e0	 idiv	 DWORD PTR _x$[ebp]
  02459	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  0245d	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02460	03 10		 add	 edx, DWORD PTR [eax]
  02462	52		 push	 edx
  02463	8b 4d d8	 mov	 ecx, DWORD PTR _m$[ebp]
  02466	0f af 4d e0	 imul	 ecx, DWORD PTR _x$[ebp]
  0246a	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  0246d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  02470	51		 push	 ecx
  02471	8b 45 cc	 mov	 eax, DWORD PTR _l$62336[ebp]
  02474	83 e8 01	 sub	 eax, 1
  02477	0f af 45 e0	 imul	 eax, DWORD PTR _x$[ebp]
  0247b	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  0247e	03 01		 add	 eax, DWORD PTR [ecx]
  02480	50		 push	 eax
  02481	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02484	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 794  : 			graphMgr->NextScreen()->ShowList().Clear();

  02489	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0248f	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02494	8b c8		 mov	 ecx, eax
  02496	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0249b	8b c8		 mov	 ecx, eax
  0249d	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 795  : 			graphMgr->NextScreen()->ShowList().Add(B);

  024a2	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  024a5	52		 push	 edx
  024a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  024ac	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  024b1	8b c8		 mov	 ecx, eax
  024b3	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  024b8	8b c8		 mov	 ecx, eax
  024ba	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 796  : 			graphMgr->ShowBits();

  024bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  024c4	8b 10		 mov	 edx, DWORD PTR [eax]
  024c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  024cc	ff 52 40	 call	 DWORD PTR [edx+64]
$L62340:

; 798  : 
; 799  : 	}

  024cf	e9 71 fe ff ff	 jmp	 $L62334
$L62335:

; 800  : 		// Clear entire screen 
; 801  : 
; 802  : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  024d4	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  024d7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  024da	51		 push	 ecx
  024db	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  024de	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  024e1	50		 push	 eax
  024e2	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  024e5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  024e8	52		 push	 edx
  024e9	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  024ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  024ee	51		 push	 ecx
  024ef	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  024f2	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 803  : 		graphMgr->NextScreen()->ShowList().Clear();

  024f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  024fd	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02502	8b c8		 mov	 ecx, eax
  02504	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02509	8b c8		 mov	 ecx, eax
  0250b	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 804  : 		graphMgr->NextScreen()->ShowList().Add(B);

  02510	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  02513	52		 push	 edx
  02514	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0251a	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0251f	8b c8		 mov	 ecx, eax
  02521	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02526	8b c8		 mov	 ecx, eax
  02528	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 805  : 		graphMgr->ShowBits();

  0252d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02532	8b 10		 mov	 edx, DWORD PTR [eax]
  02534	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0253a	ff 52 40	 call	 DWORD PTR [edx+64]

; 806  : 
; 807  : }

  0253d	8b e5		 mov	 esp, ebp
  0253f	5d		 pop	 ebp
  02540	c3		 ret	 0
?WipeUpEffect@@YAXPAVPlaneShowStyle@@@Z ENDP		; WipeUpEffect
_style$ = 8
_x$ = -36
_l$ = -40
_m$ = -48
_n$ = -52
_height$ = -44
_width$ = -28
_mody$ = -32
_B$ = -24
_p$ = -4
_r$ = -8
?HShutterOutEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; HShutterOutEffect

; 811  : {

  02541	55		 push	 ebp
  02542	8b ec		 mov	 ebp, esp
  02544	83 ec 34	 sub	 esp, 52			; 00000034H

; 812  : // This wipes horizontally from the middle to the edges between two images
; 813  : 
; 814  : 	int x,l,m,n,height,width,mody;
; 815  : 	x = style->divisions;

  02547	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  0254a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0254d	89 4d dc	 mov	 DWORD PTR _x$[ebp], ecx

; 816  :  	SOL_Rect	B(0,0,x-1,x-1);

  02550	8b 55 dc	 mov	 edx, DWORD PTR _x$[ebp]
  02553	83 ea 01	 sub	 edx, 1
  02556	52		 push	 edx
  02557	8b 45 dc	 mov	 eax, DWORD PTR _x$[ebp]
  0255a	83 e8 01	 sub	 eax, 1
  0255d	50		 push	 eax
  0255e	6a 00		 push	 0
  02560	6a 00		 push	 0
  02562	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02565	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 817  : 	// Since SOL_Rect includes all points specified, this is an x by x rect
; 818  : 
; 819  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  0256a	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  0256d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0256f	52		 push	 edx
  02570	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02576	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  0257b	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 820  : 	SOL_Rect& r = p->OnScreen();		

  0257e	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  02581	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  02586	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax

; 821  : 	height 	= r.B.y - r.A.y + 1;

  02589	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0258c	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  0258f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  02592	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  02595	83 c2 01	 add	 edx, 1
  02598	89 55 d4	 mov	 DWORD PTR _height$[ebp], edx

; 822  : 	width		= r.B.x - r.A.x + 1;

  0259b	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0259e	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  025a1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  025a4	2b 11		 sub	 edx, DWORD PTR [ecx]
  025a6	83 c2 01	 add	 edx, 1
  025a9	89 55 e4	 mov	 DWORD PTR _width$[ebp], edx

; 823  : 
; 824  : 	if (width%(2*x))

  025ac	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  025af	d1 e1		 shl	 ecx, 1
  025b1	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  025b4	99		 cdq
  025b5	f7 f9		 idiv	 ecx
  025b7	85 d2		 test	 edx, edx
  025b9	74 09		 je	 SHORT $L62354

; 825  : 		mody = 1;

  025bb	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _mody$[ebp], 1

; 826  : 	else

  025c2	eb 07		 jmp	 SHORT $L62355
$L62354:

; 827  : 		mody = 0;

  025c4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _mody$[ebp], 0
$L62355:

; 828  : 
; 829  : 
; 830  : 		n = width/x-1;

  025cb	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  025ce	99		 cdq
  025cf	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  025d2	83 e8 01	 sub	 eax, 1
  025d5	89 45 cc	 mov	 DWORD PTR _n$[ebp], eax

; 831  : 
; 832  : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 833  : 
; 834  : 	for(l=width/(2*x);l>=0;l--) {

  025d8	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  025db	d1 e1		 shl	 ecx, 1
  025dd	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  025e0	99		 cdq
  025e1	f7 f9		 idiv	 ecx
  025e3	89 45 d8	 mov	 DWORD PTR _l$[ebp], eax
  025e6	eb 09		 jmp	 SHORT $L62356
$L62357:
  025e8	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  025eb	83 ea 01	 sub	 edx, 1
  025ee	89 55 d8	 mov	 DWORD PTR _l$[ebp], edx
$L62356:
  025f1	83 7d d8 00	 cmp	 DWORD PTR _l$[ebp], 0
  025f5	0f 8c d1 02 00
	00		 jl	 $L62358

; 835  : 		for(m=0;m<height/x;m++)// Draw from middle to left 	

  025fb	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  02602	eb 09		 jmp	 SHORT $L62359
$L62360:
  02604	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  02607	83 c0 01	 add	 eax, 1
  0260a	89 45 d0	 mov	 DWORD PTR _m$[ebp], eax
$L62359:
  0260d	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02610	99		 cdq
  02611	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02614	39 45 d0	 cmp	 DWORD PTR _m$[ebp], eax
  02617	0f 8d 98 00 00
	00		 jge	 $L62361

; 837  : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+x-1+r.A.y);

  0261d	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02620	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02624	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  02627	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  0262a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0262d	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  02631	51		 push	 ecx
  02632	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  02635	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  02639	03 55 dc	 add	 edx, DWORD PTR _x$[ebp]
  0263c	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0263f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02641	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  02645	52		 push	 edx
  02646	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  02649	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  0264d	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02650	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  02653	50		 push	 eax
  02654	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  02657	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  0265b	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0265e	03 10		 add	 edx, DWORD PTR [eax]
  02660	52		 push	 edx
  02661	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02664	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 838  : 			graphMgr->NextScreen()->ShowList().Clear();

  02669	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0266f	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02674	8b c8		 mov	 ecx, eax
  02676	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0267b	8b c8		 mov	 ecx, eax
  0267d	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 839  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02682	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02685	51		 push	 ecx
  02686	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0268c	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02691	8b c8		 mov	 ecx, eax
  02693	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02698	8b c8		 mov	 ecx, eax
  0269a	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 840  : 			graphMgr->ShowBits();

  0269f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  026a5	8b 02		 mov	 eax, DWORD PTR [edx]
  026a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  026ad	ff 50 40	 call	 DWORD PTR [eax+64]

; 841  : 		}

  026b0	e9 4f ff ff ff	 jmp	 $L62360
$L62361:

; 842  : 		if (height%x) {

  026b5	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  026b8	99		 cdq
  026b9	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  026bc	85 d2		 test	 edx, edx
  026be	0f 84 97 00 00
	00		 je	 $L62362

; 843  : 		// if height is not an even multiple of x adjust for last draw
; 844  : 
; 845  :  			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+-1+(height%x)+r.A.y);

  026c4	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  026c7	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  026cb	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  026ce	99		 cdq
  026cf	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  026d2	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  026d6	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  026d9	03 50 04	 add	 edx, DWORD PTR [eax+4]
  026dc	52		 push	 edx
  026dd	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  026e0	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  026e4	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  026e7	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  026ea	8b 02		 mov	 eax, DWORD PTR [edx]
  026ec	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  026f0	51		 push	 ecx
  026f1	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  026f4	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  026f8	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  026fb	03 50 04	 add	 edx, DWORD PTR [eax+4]
  026fe	52		 push	 edx
  026ff	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  02702	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02706	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02709	03 0a		 add	 ecx, DWORD PTR [edx]
  0270b	51		 push	 ecx
  0270c	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0270f	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 846  : 			graphMgr->NextScreen()->ShowList().Clear();

  02714	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0271a	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0271f	8b c8		 mov	 ecx, eax
  02721	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02726	8b c8		 mov	 ecx, eax
  02728	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 847  : 			graphMgr->NextScreen()->ShowList().Add(B);

  0272d	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  02730	50		 push	 eax
  02731	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02737	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0273c	8b c8		 mov	 ecx, eax
  0273e	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02743	8b c8		 mov	 ecx, eax
  02745	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 848  : 			graphMgr->ShowBits();

  0274a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02750	8b 11		 mov	 edx, DWORD PTR [ecx]
  02752	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02758	ff 52 40	 call	 DWORD PTR [edx+64]
$L62362:

; 850  :  		for( m=0;m<height/x;m++) // Draw from middle to right	

  0275b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  02762	eb 09		 jmp	 SHORT $L62363
$L62364:
  02764	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  02767	83 c0 01	 add	 eax, 1
  0276a	89 45 d0	 mov	 DWORD PTR _m$[ebp], eax
$L62363:
  0276d	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02770	99		 cdq
  02771	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02774	39 45 d0	 cmp	 DWORD PTR _m$[ebp], eax
  02777	0f 8d 9e 00 00
	00		 jge	 $L62365

; 852  : 			B.Set((n-l)*x+r.A.x,m*x+r.A.y,(n-l)*x+x-1+r.A.x,m*x+x-1+r.A.y);

  0277d	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02780	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02784	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  02787	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  0278a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0278d	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  02791	51		 push	 ecx
  02792	8b 55 cc	 mov	 edx, DWORD PTR _n$[ebp]
  02795	2b 55 d8	 sub	 edx, DWORD PTR _l$[ebp]
  02798	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  0279c	03 55 dc	 add	 edx, DWORD PTR _x$[ebp]
  0279f	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  027a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  027a4	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  027a8	52		 push	 edx
  027a9	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  027ac	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  027b0	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  027b3	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  027b6	50		 push	 eax
  027b7	8b 55 cc	 mov	 edx, DWORD PTR _n$[ebp]
  027ba	2b 55 d8	 sub	 edx, DWORD PTR _l$[ebp]
  027bd	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  027c1	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  027c4	03 10		 add	 edx, DWORD PTR [eax]
  027c6	52		 push	 edx
  027c7	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  027ca	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 853  : 			graphMgr->NextScreen()->ShowList().Clear();

  027cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  027d5	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  027da	8b c8		 mov	 ecx, eax
  027dc	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  027e1	8b c8		 mov	 ecx, eax
  027e3	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 854  : 			graphMgr->NextScreen()->ShowList().Add(B);

  027e8	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  027eb	51		 push	 ecx
  027ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  027f2	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  027f7	8b c8		 mov	 ecx, eax
  027f9	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  027fe	8b c8		 mov	 ecx, eax
  02800	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 855  : 			graphMgr->ShowBits();

  02805	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0280b	8b 02		 mov	 eax, DWORD PTR [edx]
  0280d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02813	ff 50 40	 call	 DWORD PTR [eax+64]

; 856  : 		}

  02816	e9 49 ff ff ff	 jmp	 $L62364
$L62365:

; 857  : 
; 858  : 		if (height%x) {

  0281b	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  0281e	99		 cdq
  0281f	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02822	85 d2		 test	 edx, edx
  02824	0f 84 9d 00 00
	00		 je	 $L62366

; 859  :  		// if height is not an even multiple of x adjust for last draw
; 860  : 
; 861  : 			B.Set((n-l)*x+r.A.x,m*x+r.A.y,(n-l)*x+x-1+r.A.x,m*x+-1+(height%x)+r.A.y);

  0282a	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  0282d	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02831	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02834	99		 cdq
  02835	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02838	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  0283c	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0283f	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02842	52		 push	 edx
  02843	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  02846	2b 4d d8	 sub	 ecx, DWORD PTR _l$[ebp]
  02849	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  0284d	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  02850	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02853	8b 02		 mov	 eax, DWORD PTR [edx]
  02855	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  02859	51		 push	 ecx
  0285a	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  0285d	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  02861	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02864	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02867	52		 push	 edx
  02868	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  0286b	2b 4d d8	 sub	 ecx, DWORD PTR _l$[ebp]
  0286e	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02872	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02875	03 0a		 add	 ecx, DWORD PTR [edx]
  02877	51		 push	 ecx
  02878	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0287b	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 862  : 			graphMgr->NextScreen()->ShowList().Clear();

  02880	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02886	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0288b	8b c8		 mov	 ecx, eax
  0288d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02892	8b c8		 mov	 ecx, eax
  02894	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 863  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02899	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  0289c	50		 push	 eax
  0289d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  028a3	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  028a8	8b c8		 mov	 ecx, eax
  028aa	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  028af	8b c8		 mov	 ecx, eax
  028b1	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 864  : 			graphMgr->ShowBits();

  028b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  028bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  028be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  028c4	ff 52 40	 call	 DWORD PTR [edx+64]
$L62366:

; 867  : 	}

  028c7	e9 1c fd ff ff	 jmp	 $L62357
$L62358:

; 868  : 
; 869  : 	if (width%x) {

  028cc	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  028cf	99		 cdq
  028d0	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  028d3	85 d2		 test	 edx, edx
  028d5	0f 84 6c 01 00
	00		 je	 $L62371

; 870  : 	// if width is not an even multiple of x adjust for the last draw
; 871  : 
; 872  :  		for( m=0;m<height/x;m++) // Draw from middle to right	

  028db	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  028e2	eb 09		 jmp	 SHORT $L62368
$L62369:
  028e4	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  028e7	83 c0 01	 add	 eax, 1
  028ea	89 45 d0	 mov	 DWORD PTR _m$[ebp], eax
$L62368:
  028ed	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  028f0	99		 cdq
  028f1	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  028f4	39 45 d0	 cmp	 DWORD PTR _m$[ebp], eax
  028f7	0f 8d 9e 00 00
	00		 jge	 $L62370

; 874  : 			B.Set(n*x+r.A.x,m*x+r.A.y,n*x+x-1+(width%x)+r.A.x,m*x+x-1+r.A.y);

  028fd	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02900	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02904	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  02907	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  0290a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0290d	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  02911	51		 push	 ecx
  02912	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  02915	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02919	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  0291c	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0291f	99		 cdq
  02920	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02923	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  02927	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  0292a	03 10		 add	 edx, DWORD PTR [eax]
  0292c	52		 push	 edx
  0292d	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02930	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02934	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02937	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0293a	51		 push	 ecx
  0293b	8b 45 cc	 mov	 eax, DWORD PTR _n$[ebp]
  0293e	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  02942	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02945	03 01		 add	 eax, DWORD PTR [ecx]
  02947	50		 push	 eax
  02948	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  0294b	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 875  : 			graphMgr->NextScreen()->ShowList().Clear();

  02950	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02956	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0295b	8b c8		 mov	 ecx, eax
  0295d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02962	8b c8		 mov	 ecx, eax
  02964	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 876  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02969	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  0296c	52		 push	 edx
  0296d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02973	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02978	8b c8		 mov	 ecx, eax
  0297a	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0297f	8b c8		 mov	 ecx, eax
  02981	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 877  : 			graphMgr->ShowBits();

  02986	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0298b	8b 10		 mov	 edx, DWORD PTR [eax]
  0298d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02993	ff 52 40	 call	 DWORD PTR [edx+64]

; 878  : 		}

  02996	e9 49 ff ff ff	 jmp	 $L62369
$L62370:

; 879  : 
; 880  : 		if (height%x) {

  0299b	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  0299e	99		 cdq
  0299f	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  029a2	85 d2		 test	 edx, edx
  029a4	0f 84 9d 00 00
	00		 je	 $L62371

; 881  :  		// if height is not an even multiple of x adjust for last draw
; 882  : 			B.Set(n*x+r.A.x,m*x+r.A.y,n*x+x-1+(width%x)+r.A.x,m*x+-1+(height%x)+r.A.y);

  029aa	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  029ad	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  029b1	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  029b4	99		 cdq
  029b5	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  029b8	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  029bc	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  029bf	03 50 04	 add	 edx, DWORD PTR [eax+4]
  029c2	52		 push	 edx
  029c3	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  029c6	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  029ca	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  029cd	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  029d0	99		 cdq
  029d1	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  029d4	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  029d8	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  029db	03 10		 add	 edx, DWORD PTR [eax]
  029dd	52		 push	 edx
  029de	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  029e1	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  029e5	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  029e8	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  029eb	51		 push	 ecx
  029ec	8b 45 cc	 mov	 eax, DWORD PTR _n$[ebp]
  029ef	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  029f3	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  029f6	03 01		 add	 eax, DWORD PTR [ecx]
  029f8	50		 push	 eax
  029f9	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  029fc	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 883  : 			graphMgr->NextScreen()->ShowList().Clear();

  02a01	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02a07	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02a0c	8b c8		 mov	 ecx, eax
  02a0e	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02a13	8b c8		 mov	 ecx, eax
  02a15	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 884  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02a1a	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  02a1d	52		 push	 edx
  02a1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02a24	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02a29	8b c8		 mov	 ecx, eax
  02a2b	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02a30	8b c8		 mov	 ecx, eax
  02a32	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 885  : 			graphMgr->ShowBits();

  02a37	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02a3c	8b 10		 mov	 edx, DWORD PTR [eax]
  02a3e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02a44	ff 52 40	 call	 DWORD PTR [edx+64]
$L62371:

; 888  : 		// Clear entire screen just to be sure
; 889  : 
; 890  : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  02a47	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02a4a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02a4d	51		 push	 ecx
  02a4e	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02a51	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  02a54	50		 push	 eax
  02a55	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02a58	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02a5b	52		 push	 edx
  02a5c	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02a5f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a61	51		 push	 ecx
  02a62	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02a65	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 891  : 		graphMgr->NextScreen()->ShowList().Clear();

  02a6a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02a70	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02a75	8b c8		 mov	 ecx, eax
  02a77	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02a7c	8b c8		 mov	 ecx, eax
  02a7e	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 892  : 		graphMgr->NextScreen()->ShowList().Add(B);

  02a83	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  02a86	52		 push	 edx
  02a87	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02a8d	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02a92	8b c8		 mov	 ecx, eax
  02a94	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02a99	8b c8		 mov	 ecx, eax
  02a9b	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 893  : 		graphMgr->ShowBits();

  02aa0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02aa5	8b 10		 mov	 edx, DWORD PTR [eax]
  02aa7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02aad	ff 52 40	 call	 DWORD PTR [edx+64]

; 894  : 
; 895  : }

  02ab0	8b e5		 mov	 esp, ebp
  02ab2	5d		 pop	 ebp
  02ab3	c3		 ret	 0
?HShutterOutEffect@@YAXPAVPlaneShowStyle@@@Z ENDP	; HShutterOutEffect
_style$ = 8
_x$ = -36
_l$ = -40
_m$ = -48
_n$ = -52
_height$ = -44
_width$ = -28
_mody$ = -32
_B$ = -24
_p$ = -4
_r$ = -8
?HShutterInEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; HShutterInEffect

; 899  : {

  02ab4	55		 push	 ebp
  02ab5	8b ec		 mov	 ebp, esp
  02ab7	83 ec 34	 sub	 esp, 52			; 00000034H

; 900  : // This wipes horizontally from the edges to the middle between two images
; 901  : 
; 902  : 	int x,l,m,n,height,width,mody;
; 903  : 	x = style->divisions;

  02aba	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  02abd	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  02ac0	89 4d dc	 mov	 DWORD PTR _x$[ebp], ecx

; 904  :  	SOL_Rect	B(0,0,x,x);

  02ac3	8b 55 dc	 mov	 edx, DWORD PTR _x$[ebp]
  02ac6	52		 push	 edx
  02ac7	8b 45 dc	 mov	 eax, DWORD PTR _x$[ebp]
  02aca	50		 push	 eax
  02acb	6a 00		 push	 0
  02acd	6a 00		 push	 0
  02acf	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02ad2	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 905  : 	// Since SOL_Rect includes all points specified, this is an x by x rect
; 906  : 
; 907  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  02ad7	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  02ada	8b 11		 mov	 edx, DWORD PTR [ecx]
  02adc	52		 push	 edx
  02add	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02ae3	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  02ae8	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 908  : 	SOL_Rect& r = p->OnScreen();		

  02aeb	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  02aee	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  02af3	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax

; 909  : 	height 	= r.B.y - r.A.y + 1;

  02af6	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02af9	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02afc	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  02aff	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  02b02	83 c2 01	 add	 edx, 1
  02b05	89 55 d4	 mov	 DWORD PTR _height$[ebp], edx

; 910  : 	width		= r.B.x - r.A.x + 1;

  02b08	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02b0b	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02b0e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  02b11	2b 11		 sub	 edx, DWORD PTR [ecx]
  02b13	83 c2 01	 add	 edx, 1
  02b16	89 55 e4	 mov	 DWORD PTR _width$[ebp], edx

; 911  : 
; 912  : 		n = width/x-1;

  02b19	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02b1c	99		 cdq
  02b1d	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02b20	83 e8 01	 sub	 eax, 1
  02b23	89 45 cc	 mov	 DWORD PTR _n$[ebp], eax

; 913  : 
; 914  : 	if (width%(2*x))

  02b26	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  02b29	d1 e1		 shl	 ecx, 1
  02b2b	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02b2e	99		 cdq
  02b2f	f7 f9		 idiv	 ecx
  02b31	85 d2		 test	 edx, edx
  02b33	74 09		 je	 SHORT $L62385

; 915  : 		mody = 1;

  02b35	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _mody$[ebp], 1

; 916  : 	else

  02b3c	eb 07		 jmp	 SHORT $L62386
$L62385:

; 917  : 		mody = 0;

  02b3e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _mody$[ebp], 0
$L62386:

; 918  : 
; 919  : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 920  : 
; 921  : 	if (width%x) {

  02b45	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02b48	99		 cdq
  02b49	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02b4c	85 d2		 test	 edx, edx
  02b4e	0f 84 72 01 00
	00		 je	 $L62391

; 922  : 	// if width is not an even multiple of x adjust for the first draw
; 923  : 
; 924  : 		for( m=0;m<height/x;m++) // Draw from right to left	

  02b54	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  02b5b	eb 09		 jmp	 SHORT $L62388
$L62389:
  02b5d	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  02b60	83 c2 01	 add	 edx, 1
  02b63	89 55 d0	 mov	 DWORD PTR _m$[ebp], edx
$L62388:
  02b66	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02b69	99		 cdq
  02b6a	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02b6d	39 45 d0	 cmp	 DWORD PTR _m$[ebp], eax
  02b70	0f 8d a1 00 00
	00		 jge	 $L62390

; 926  : 			B.Set((n+1)*x+r.A.x,m*x+r.A.y,(n+1)*x-1+(width%x)+r.A.x,m*x+x-1+r.A.y);

  02b76	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  02b79	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  02b7d	03 45 dc	 add	 eax, DWORD PTR _x$[ebp]
  02b80	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02b83	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02b86	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  02b8a	50		 push	 eax
  02b8b	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  02b8e	83 c1 01	 add	 ecx, 1
  02b91	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02b95	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02b98	99		 cdq
  02b99	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02b9c	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  02ba0	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02ba3	03 10		 add	 edx, DWORD PTR [eax]
  02ba5	52		 push	 edx
  02ba6	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02ba9	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02bad	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02bb0	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  02bb3	51		 push	 ecx
  02bb4	8b 45 cc	 mov	 eax, DWORD PTR _n$[ebp]
  02bb7	83 c0 01	 add	 eax, 1
  02bba	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  02bbe	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02bc1	03 01		 add	 eax, DWORD PTR [ecx]
  02bc3	50		 push	 eax
  02bc4	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02bc7	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 927  : 			graphMgr->NextScreen()->ShowList().Clear();

  02bcc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02bd2	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02bd7	8b c8		 mov	 ecx, eax
  02bd9	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02bde	8b c8		 mov	 ecx, eax
  02be0	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 928  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02be5	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  02be8	52		 push	 edx
  02be9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02bef	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02bf4	8b c8		 mov	 ecx, eax
  02bf6	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02bfb	8b c8		 mov	 ecx, eax
  02bfd	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 929  : 			graphMgr->ShowBits();

  02c02	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02c07	8b 10		 mov	 edx, DWORD PTR [eax]
  02c09	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02c0f	ff 52 40	 call	 DWORD PTR [edx+64]

; 930  : 		}

  02c12	e9 46 ff ff ff	 jmp	 $L62389
$L62390:

; 931  : 		if (height%x) {

  02c17	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02c1a	99		 cdq
  02c1b	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02c1e	85 d2		 test	 edx, edx
  02c20	0f 84 a0 00 00
	00		 je	 $L62391

; 932  :  		// if height is not an even multiple of x adjust for last draw
; 933  : 
; 934  : 			B.Set((n+1)*x+r.A.x,m*x+r.A.y,(n+1)*x+-1+(width%x)+r.A.x,m*x+-1+(height%x)+r.A.y);

  02c26	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02c29	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02c2d	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02c30	99		 cdq
  02c31	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02c34	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  02c38	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02c3b	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02c3e	52		 push	 edx
  02c3f	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  02c42	83 c1 01	 add	 ecx, 1
  02c45	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02c49	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02c4c	99		 cdq
  02c4d	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02c50	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  02c54	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02c57	03 10		 add	 edx, DWORD PTR [eax]
  02c59	52		 push	 edx
  02c5a	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02c5d	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02c61	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02c64	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  02c67	51		 push	 ecx
  02c68	8b 45 cc	 mov	 eax, DWORD PTR _n$[ebp]
  02c6b	83 c0 01	 add	 eax, 1
  02c6e	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  02c72	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02c75	03 01		 add	 eax, DWORD PTR [ecx]
  02c77	50		 push	 eax
  02c78	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02c7b	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 935  : 			graphMgr->NextScreen()->ShowList().Clear();

  02c80	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02c86	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02c8b	8b c8		 mov	 ecx, eax
  02c8d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02c92	8b c8		 mov	 ecx, eax
  02c94	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 936  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02c99	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  02c9c	52		 push	 edx
  02c9d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02ca3	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02ca8	8b c8		 mov	 ecx, eax
  02caa	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02caf	8b c8		 mov	 ecx, eax
  02cb1	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 937  : 			graphMgr->ShowBits();

  02cb6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02cbb	8b 10		 mov	 edx, DWORD PTR [eax]
  02cbd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02cc3	ff 52 40	 call	 DWORD PTR [edx+64]
$L62391:

; 940  : 
; 941  : 	for(l=0;l<width/(2*x);l++) {

  02cc6	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  02ccd	eb 09		 jmp	 SHORT $L62392
$L62393:
  02ccf	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  02cd2	83 c0 01	 add	 eax, 1
  02cd5	89 45 d8	 mov	 DWORD PTR _l$[ebp], eax
$L62392:
  02cd8	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  02cdb	d1 e1		 shl	 ecx, 1
  02cdd	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  02ce0	99		 cdq
  02ce1	f7 f9		 idiv	 ecx
  02ce3	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  02ce6	0f 8d d1 02 00
	00		 jge	 $L62394

; 942  : 		for(m=0;m<height/x;m++) // Draw from left to right	

  02cec	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  02cf3	eb 09		 jmp	 SHORT $L62395
$L62396:
  02cf5	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  02cf8	83 c2 01	 add	 edx, 1
  02cfb	89 55 d0	 mov	 DWORD PTR _m$[ebp], edx
$L62395:
  02cfe	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02d01	99		 cdq
  02d02	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02d05	39 45 d0	 cmp	 DWORD PTR _m$[ebp], eax
  02d08	0f 8d 98 00 00
	00		 jge	 $L62397

; 944  : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+x-1+r.A.y);

  02d0e	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  02d11	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  02d15	03 45 dc	 add	 eax, DWORD PTR _x$[ebp]
  02d18	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02d1b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02d1e	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  02d22	50		 push	 eax
  02d23	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  02d26	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02d2a	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  02d2d	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02d30	8b 02		 mov	 eax, DWORD PTR [edx]
  02d32	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  02d36	51		 push	 ecx
  02d37	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  02d3a	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  02d3e	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02d41	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02d44	52		 push	 edx
  02d45	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  02d48	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02d4c	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02d4f	03 0a		 add	 ecx, DWORD PTR [edx]
  02d51	51		 push	 ecx
  02d52	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02d55	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 945  : 			graphMgr->NextScreen()->ShowList().Clear();

  02d5a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02d60	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02d65	8b c8		 mov	 ecx, eax
  02d67	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02d6c	8b c8		 mov	 ecx, eax
  02d6e	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 946  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02d73	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  02d76	50		 push	 eax
  02d77	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02d7d	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02d82	8b c8		 mov	 ecx, eax
  02d84	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02d89	8b c8		 mov	 ecx, eax
  02d8b	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 947  : 			graphMgr->ShowBits();

  02d90	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02d96	8b 11		 mov	 edx, DWORD PTR [ecx]
  02d98	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02d9e	ff 52 40	 call	 DWORD PTR [edx+64]

; 948  : 		}

  02da1	e9 4f ff ff ff	 jmp	 $L62396
$L62397:

; 949  : 
; 950  : 		if (height%x) {

  02da6	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02da9	99		 cdq
  02daa	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02dad	85 d2		 test	 edx, edx
  02daf	0f 84 97 00 00
	00		 je	 $L62398

; 951  : 		// if height is not an even multiple of x adjust for last draw
; 952  : 
; 953  :  			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+-1+(height%x)+r.A.y);

  02db5	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02db8	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02dbc	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02dbf	99		 cdq
  02dc0	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02dc3	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  02dc7	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02dca	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02dcd	52		 push	 edx
  02dce	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  02dd1	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02dd5	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  02dd8	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02ddb	8b 02		 mov	 eax, DWORD PTR [edx]
  02ddd	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  02de1	51		 push	 ecx
  02de2	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  02de5	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  02de9	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02dec	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02def	52		 push	 edx
  02df0	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  02df3	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02df7	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02dfa	03 0a		 add	 ecx, DWORD PTR [edx]
  02dfc	51		 push	 ecx
  02dfd	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02e00	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 954  : 			graphMgr->NextScreen()->ShowList().Clear();

  02e05	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02e0b	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02e10	8b c8		 mov	 ecx, eax
  02e12	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02e17	8b c8		 mov	 ecx, eax
  02e19	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 955  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02e1e	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  02e21	50		 push	 eax
  02e22	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02e28	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02e2d	8b c8		 mov	 ecx, eax
  02e2f	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02e34	8b c8		 mov	 ecx, eax
  02e36	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 956  : 			graphMgr->ShowBits();

  02e3b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02e41	8b 11		 mov	 edx, DWORD PTR [ecx]
  02e43	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02e49	ff 52 40	 call	 DWORD PTR [edx+64]
$L62398:

; 958  : 
; 959  : 		for( m=0;m<height/x;m++) // Draw from right to left	

  02e4c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  02e53	eb 09		 jmp	 SHORT $L62399
$L62400:
  02e55	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  02e58	83 c0 01	 add	 eax, 1
  02e5b	89 45 d0	 mov	 DWORD PTR _m$[ebp], eax
$L62399:
  02e5e	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02e61	99		 cdq
  02e62	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02e65	39 45 d0	 cmp	 DWORD PTR _m$[ebp], eax
  02e68	0f 8d 9e 00 00
	00		 jge	 $L62401

; 961  : 			B.Set((n-l)*x+r.A.x,m*x+r.A.y,(n-l)*x+x-1+r.A.x,m*x+x-1+r.A.y);

  02e6e	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02e71	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02e75	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  02e78	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02e7b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  02e7e	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  02e82	51		 push	 ecx
  02e83	8b 55 cc	 mov	 edx, DWORD PTR _n$[ebp]
  02e86	2b 55 d8	 sub	 edx, DWORD PTR _l$[ebp]
  02e89	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  02e8d	03 55 dc	 add	 edx, DWORD PTR _x$[ebp]
  02e90	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02e93	8b 08		 mov	 ecx, DWORD PTR [eax]
  02e95	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  02e99	52		 push	 edx
  02e9a	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  02e9d	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  02ea1	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02ea4	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  02ea7	50		 push	 eax
  02ea8	8b 55 cc	 mov	 edx, DWORD PTR _n$[ebp]
  02eab	2b 55 d8	 sub	 edx, DWORD PTR _l$[ebp]
  02eae	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  02eb2	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02eb5	03 10		 add	 edx, DWORD PTR [eax]
  02eb7	52		 push	 edx
  02eb8	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02ebb	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 962  : 			graphMgr->NextScreen()->ShowList().Clear();

  02ec0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02ec6	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02ecb	8b c8		 mov	 ecx, eax
  02ecd	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02ed2	8b c8		 mov	 ecx, eax
  02ed4	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 963  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02ed9	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02edc	51		 push	 ecx
  02edd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02ee3	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02ee8	8b c8		 mov	 ecx, eax
  02eea	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02eef	8b c8		 mov	 ecx, eax
  02ef1	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 964  : 			graphMgr->ShowBits();

  02ef6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02efc	8b 02		 mov	 eax, DWORD PTR [edx]
  02efe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02f04	ff 50 40	 call	 DWORD PTR [eax+64]

; 965  : 		}

  02f07	e9 49 ff ff ff	 jmp	 $L62400
$L62401:

; 966  : 		if (height%x) {

  02f0c	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02f0f	99		 cdq
  02f10	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02f13	85 d2		 test	 edx, edx
  02f15	0f 84 9d 00 00
	00		 je	 $L62402

; 967  :  		// if height is not an even multiple of x adjust for last draw
; 968  : 
; 969  : 			B.Set((n-l)*x+r.A.x,m*x+r.A.y,(n-l)*x+x-1+r.A.x,m*x+-1+(height%x)+r.A.y);

  02f1b	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  02f1e	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02f22	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  02f25	99		 cdq
  02f26	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  02f29	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  02f2d	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02f30	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02f33	52		 push	 edx
  02f34	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  02f37	2b 4d d8	 sub	 ecx, DWORD PTR _l$[ebp]
  02f3a	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02f3e	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  02f41	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02f44	8b 02		 mov	 eax, DWORD PTR [edx]
  02f46	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  02f4a	51		 push	 ecx
  02f4b	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  02f4e	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  02f52	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02f55	03 50 04	 add	 edx, DWORD PTR [eax+4]
  02f58	52		 push	 edx
  02f59	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  02f5c	2b 4d d8	 sub	 ecx, DWORD PTR _l$[ebp]
  02f5f	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  02f63	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02f66	03 0a		 add	 ecx, DWORD PTR [edx]
  02f68	51		 push	 ecx
  02f69	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02f6c	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 970  : 			graphMgr->NextScreen()->ShowList().Clear();

  02f71	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02f77	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02f7c	8b c8		 mov	 ecx, eax
  02f7e	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02f83	8b c8		 mov	 ecx, eax
  02f85	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 971  : 			graphMgr->NextScreen()->ShowList().Add(B);

  02f8a	8d 45 e8	 lea	 eax, DWORD PTR _B$[ebp]
  02f8d	50		 push	 eax
  02f8e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02f94	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02f99	8b c8		 mov	 ecx, eax
  02f9b	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02fa0	8b c8		 mov	 ecx, eax
  02fa2	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 972  : 			graphMgr->ShowBits();

  02fa7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02fad	8b 11		 mov	 edx, DWORD PTR [ecx]
  02faf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02fb5	ff 52 40	 call	 DWORD PTR [edx+64]
$L62402:

; 975  : 
; 976  : 	}

  02fb8	e9 12 fd ff ff	 jmp	 $L62393
$L62394:

; 977  : 
; 978  : 
; 979  : 		// Clear entire screen just to be sure
; 980  : 
; 981  : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  02fbd	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02fc0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02fc3	51		 push	 ecx
  02fc4	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp]
  02fc7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  02fca	50		 push	 eax
  02fcb	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp]
  02fce	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02fd1	52		 push	 edx
  02fd2	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp]
  02fd5	8b 08		 mov	 ecx, DWORD PTR [eax]
  02fd7	51		 push	 ecx
  02fd8	8d 4d e8	 lea	 ecx, DWORD PTR _B$[ebp]
  02fdb	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 982  : 		graphMgr->NextScreen()->ShowList().Clear();

  02fe0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02fe6	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  02feb	8b c8		 mov	 ecx, eax
  02fed	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  02ff2	8b c8		 mov	 ecx, eax
  02ff4	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 983  : 		graphMgr->NextScreen()->ShowList().Add(B);

  02ff9	8d 55 e8	 lea	 edx, DWORD PTR _B$[ebp]
  02ffc	52		 push	 edx
  02ffd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03003	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03008	8b c8		 mov	 ecx, eax
  0300a	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0300f	8b c8		 mov	 ecx, eax
  03011	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 984  : 		graphMgr->ShowBits();

  03016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0301b	8b 10		 mov	 edx, DWORD PTR [eax]
  0301d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03023	ff 52 40	 call	 DWORD PTR [edx+64]

; 985  : 
; 986  : }

  03026	8b e5		 mov	 esp, ebp
  03028	5d		 pop	 ebp
  03029	c3		 ret	 0
?HShutterInEffect@@YAXPAVPlaneShowStyle@@@Z ENDP	; HShutterInEffect
_style$ = 8
_x$ = -36
_l$ = -40
_m$ = -48
_n$ = -52
_width$ = -28
_height$ = -44
_mody$ = -32
_p$ = -4
_r$ = -24
_B$ = -20
?VShutterInEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; VShutterInEffect

; 990  : {

  0302a	55		 push	 ebp
  0302b	8b ec		 mov	 ebp, esp
  0302d	83 ec 34	 sub	 esp, 52			; 00000034H

; 991  : // This wipes vertically from the edges to the middle between two images
; 992  : 
; 993  : 	int x,l,m,n,width,height,mody;
; 994  : 	x = style->divisions;

  03030	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  03033	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  03036	89 4d dc	 mov	 DWORD PTR _x$[ebp], ecx

; 995  : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  03039	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  0303c	8b 02		 mov	 eax, DWORD PTR [edx]
  0303e	50		 push	 eax
  0303f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03045	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  0304a	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 996  : 	SOL_Rect& r = p->OnScreen();		

  0304d	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  03050	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  03055	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 997  : 	height 	= r.B.y - r.A.y + 1;

  03058	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0305b	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  0305e	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  03061	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  03064	83 c0 01	 add	 eax, 1
  03067	89 45 d4	 mov	 DWORD PTR _height$[ebp], eax

; 998  : 	width		= r.B.x - r.A.x + 1;

  0306a	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0306d	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03070	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  03073	2b 02		 sub	 eax, DWORD PTR [edx]
  03075	83 c0 01	 add	 eax, 1
  03078	89 45 e4	 mov	 DWORD PTR _width$[ebp], eax

; 999  : 
; 1000 :  	SOL_Rect	B(0,0,x,x);

  0307b	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  0307e	51		 push	 ecx
  0307f	8b 55 dc	 mov	 edx, DWORD PTR _x$[ebp]
  03082	52		 push	 edx
  03083	6a 00		 push	 0
  03085	6a 00		 push	 0
  03087	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0308a	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 1001 : 
; 1002 : 	if (height%(2*x))

  0308f	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  03092	d1 e1		 shl	 ecx, 1
  03094	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  03097	99		 cdq
  03098	f7 f9		 idiv	 ecx
  0309a	85 d2		 test	 edx, edx
  0309c	74 09		 je	 SHORT $L62416

; 1003 :  		mody = 1;

  0309e	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _mody$[ebp], 1

; 1004 :  	else

  030a5	eb 07		 jmp	 SHORT $L62417
$L62416:

; 1005 :  		mody = 0;

  030a7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _mody$[ebp], 0
$L62417:

; 1006 : 
; 1007 : 
; 1008 : 	n = height/x-1;

  030ae	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  030b1	99		 cdq
  030b2	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  030b5	83 e8 01	 sub	 eax, 1
  030b8	89 45 cc	 mov	 DWORD PTR _n$[ebp], eax

; 1009 : 
; 1010 : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 1011 : 
; 1012 : 	if (height%x) {

  030bb	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  030be	99		 cdq
  030bf	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  030c2	85 d2		 test	 edx, edx
  030c4	0f 84 7d 01 00
	00		 je	 $L62422

; 1013 : 	// if height is not an even multiple of x adjust for the first draw
; 1014 : 
; 1015 : 		for(l=0;l<width/x;l++) // Drawing Up	

  030ca	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  030d1	eb 09		 jmp	 SHORT $L62419
$L62420:
  030d3	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  030d6	83 c2 01	 add	 edx, 1
  030d9	89 55 d8	 mov	 DWORD PTR _l$[ebp], edx
$L62419:
  030dc	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  030df	99		 cdq
  030e0	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  030e3	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  030e6	0f 8d 9f 00 00
	00		 jge	 $L62421

; 1017 : 			B.Set(l*x+r.A.x,n*x+r.A.y,l*x+x-1+r.A.x,n*x+x-1+(height%x)+r.A.y);

  030ec	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  030ef	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  030f3	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  030f6	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  030f9	99		 cdq
  030fa	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  030fd	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  03101	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03104	03 50 04	 add	 edx, DWORD PTR [eax+4]
  03107	52		 push	 edx
  03108	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  0310b	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  0310f	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  03112	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03115	8b 02		 mov	 eax, DWORD PTR [edx]
  03117	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  0311b	51		 push	 ecx
  0311c	8b 55 cc	 mov	 edx, DWORD PTR _n$[ebp]
  0311f	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  03123	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03126	03 50 04	 add	 edx, DWORD PTR [eax+4]
  03129	52		 push	 edx
  0312a	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  0312d	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  03131	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03134	03 0a		 add	 ecx, DWORD PTR [edx]
  03136	51		 push	 ecx
  03137	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0313a	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1018 : 			graphMgr->NextScreen()->ShowList().Clear();

  0313f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03145	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0314a	8b c8		 mov	 ecx, eax
  0314c	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03151	8b c8		 mov	 ecx, eax
  03153	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1019 : 			graphMgr->NextScreen()->ShowList().Add(B);

  03158	8d 45 ec	 lea	 eax, DWORD PTR _B$[ebp]
  0315b	50		 push	 eax
  0315c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03162	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03167	8b c8		 mov	 ecx, eax
  03169	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0316e	8b c8		 mov	 ecx, eax
  03170	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1020 : 			graphMgr->ShowBits();

  03175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0317b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0317d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03183	ff 52 40	 call	 DWORD PTR [edx+64]

; 1021 : 		}

  03186	e9 48 ff ff ff	 jmp	 $L62420
$L62421:

; 1022 : 
; 1023 : 		if ((l==width/x) && (width%x)) {

  0318b	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0318e	99		 cdq
  0318f	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03192	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  03195	0f 85 ac 00 00
	00		 jne	 $L62422
  0319b	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0319e	99		 cdq
  0319f	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  031a2	85 d2		 test	 edx, edx
  031a4	0f 84 9d 00 00
	00		 je	 $L62422

; 1024 : 		// if width is not an even multiple of x adjust for last draw
; 1025 : 
; 1026 : 			B.Set(l*x+r.A.x,n*x+r.A.y,l*x+-1+(width%x)+r.A.x,n*x+x-1+(height%x)+r.A.y);

  031aa	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  031ad	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  031b1	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  031b4	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  031b7	99		 cdq
  031b8	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  031bb	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  031bf	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  031c2	03 50 04	 add	 edx, DWORD PTR [eax+4]
  031c5	52		 push	 edx
  031c6	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  031c9	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  031cd	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  031d0	99		 cdq
  031d1	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  031d4	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  031d8	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  031db	03 10		 add	 edx, DWORD PTR [eax]
  031dd	52		 push	 edx
  031de	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  031e1	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  031e5	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  031e8	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  031eb	51		 push	 ecx
  031ec	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  031ef	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  031f3	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  031f6	03 01		 add	 eax, DWORD PTR [ecx]
  031f8	50		 push	 eax
  031f9	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  031fc	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1027 : 			graphMgr->NextScreen()->ShowList().Clear();

  03201	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03207	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0320c	8b c8		 mov	 ecx, eax
  0320e	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03213	8b c8		 mov	 ecx, eax
  03215	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1028 : 			graphMgr->NextScreen()->ShowList().Add(B);

  0321a	8d 55 ec	 lea	 edx, DWORD PTR _B$[ebp]
  0321d	52		 push	 edx
  0321e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03224	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03229	8b c8		 mov	 ecx, eax
  0322b	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03230	8b c8		 mov	 ecx, eax
  03232	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1029 : 			graphMgr->ShowBits();

  03237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0323c	8b 10		 mov	 edx, DWORD PTR [eax]
  0323e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03244	ff 52 40	 call	 DWORD PTR [edx+64]
$L62422:

; 1032 : 
; 1033 : 	for(m=0;m<height/(2*x)+mody;m++) {

  03247	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp], 0
  0324e	eb 09		 jmp	 SHORT $L62423
$L62424:
  03250	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  03253	83 c0 01	 add	 eax, 1
  03256	89 45 d0	 mov	 DWORD PTR _m$[ebp], eax
$L62423:
  03259	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  0325c	d1 e1		 shl	 ecx, 1
  0325e	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  03261	99		 cdq
  03262	f7 f9		 idiv	 ecx
  03264	03 45 e0	 add	 eax, DWORD PTR _mody$[ebp]
  03267	39 45 d0	 cmp	 DWORD PTR _m$[ebp], eax
  0326a	0f 8d ef 02 00
	00		 jge	 $L62425

; 1034 : 	// Since we draw from the top and bottom the outer loop is height/(2*x)
; 1035 : 	// mody is a check to see if height is an even multiple of (2*x)
; 1036 :  
; 1037 : 		for(l=0;l<width/x;l++)// Drawing Down 	

  03270	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  03277	eb 09		 jmp	 SHORT $L62426
$L62427:
  03279	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  0327c	83 c2 01	 add	 edx, 1
  0327f	89 55 d8	 mov	 DWORD PTR _l$[ebp], edx
$L62426:
  03282	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  03285	99		 cdq
  03286	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03289	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  0328c	0f 8d 98 00 00
	00		 jge	 $L62428

; 1039 : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+x-1+r.A.y);

  03292	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  03295	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  03299	03 45 dc	 add	 eax, DWORD PTR _x$[ebp]
  0329c	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0329f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  032a2	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  032a6	50		 push	 eax
  032a7	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  032aa	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  032ae	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  032b1	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  032b4	8b 02		 mov	 eax, DWORD PTR [edx]
  032b6	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  032ba	51		 push	 ecx
  032bb	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  032be	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  032c2	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  032c5	03 50 04	 add	 edx, DWORD PTR [eax+4]
  032c8	52		 push	 edx
  032c9	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  032cc	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  032d0	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  032d3	03 0a		 add	 ecx, DWORD PTR [edx]
  032d5	51		 push	 ecx
  032d6	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  032d9	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1040 : 			graphMgr->NextScreen()->ShowList().Clear();

  032de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  032e4	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  032e9	8b c8		 mov	 ecx, eax
  032eb	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  032f0	8b c8		 mov	 ecx, eax
  032f2	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1041 : 			graphMgr->NextScreen()->ShowList().Add(B);

  032f7	8d 45 ec	 lea	 eax, DWORD PTR _B$[ebp]
  032fa	50		 push	 eax
  032fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03301	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03306	8b c8		 mov	 ecx, eax
  03308	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0330d	8b c8		 mov	 ecx, eax
  0330f	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1042 : 			graphMgr->ShowBits();

  03314	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0331a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0331c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03322	ff 52 40	 call	 DWORD PTR [edx+64]

; 1043 : 		}

  03325	e9 4f ff ff ff	 jmp	 $L62427
$L62428:

; 1044 : 
; 1045 : 		if ((l==width/x) && (width%x)) {

  0332a	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0332d	99		 cdq
  0332e	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03331	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  03334	0f 85 a5 00 00
	00		 jne	 $L62429
  0333a	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0333d	99		 cdq
  0333e	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03341	85 d2		 test	 edx, edx
  03343	0f 84 96 00 00
	00		 je	 $L62429

; 1046 : 		// if width is not an even multiple of x adjust for last draw
; 1047 : 
; 1048 : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+-1+(width%x)+r.A.x,m*x+x-1+r.A.y);

  03349	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  0334c	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  03350	03 45 dc	 add	 eax, DWORD PTR _x$[ebp]
  03353	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  03356	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  03359	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  0335d	50		 push	 eax
  0335e	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  03361	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  03365	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  03368	99		 cdq
  03369	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  0336c	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  03370	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03373	03 10		 add	 edx, DWORD PTR [eax]
  03375	52		 push	 edx
  03376	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  03379	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  0337d	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03380	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  03383	51		 push	 ecx
  03384	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  03387	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  0338b	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0338e	03 01		 add	 eax, DWORD PTR [ecx]
  03390	50		 push	 eax
  03391	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  03394	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1049 : 			graphMgr->NextScreen()->ShowList().Clear();

  03399	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0339f	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  033a4	8b c8		 mov	 ecx, eax
  033a6	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  033ab	8b c8		 mov	 ecx, eax
  033ad	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1050 : 			graphMgr->NextScreen()->ShowList().Add(B);

  033b2	8d 55 ec	 lea	 edx, DWORD PTR _B$[ebp]
  033b5	52		 push	 edx
  033b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  033bc	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  033c1	8b c8		 mov	 ecx, eax
  033c3	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  033c8	8b c8		 mov	 ecx, eax
  033ca	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1051 : 			graphMgr->ShowBits();

  033cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  033d4	8b 10		 mov	 edx, DWORD PTR [eax]
  033d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  033dc	ff 52 40	 call	 DWORD PTR [edx+64]
$L62429:

; 1053 : 
; 1054 : 		for(l=0;l<width/x;l++) // Drawing Up	

  033df	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  033e6	eb 09		 jmp	 SHORT $L62430
$L62431:
  033e8	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  033eb	83 c0 01	 add	 eax, 1
  033ee	89 45 d8	 mov	 DWORD PTR _l$[ebp], eax
$L62430:
  033f1	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  033f4	99		 cdq
  033f5	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  033f8	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  033fb	0f 8d 9e 00 00
	00		 jge	 $L62432

; 1056 : 			B.Set(l*x+r.A.x,(n-m)*x+r.A.y,l*x+x-1+r.A.x,(n-m)*x+x-1+r.A.y);

  03401	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  03404	2b 4d d0	 sub	 ecx, DWORD PTR _m$[ebp]
  03407	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  0340b	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  0340e	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03411	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  03414	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  03418	51		 push	 ecx
  03419	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  0341c	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  03420	03 55 dc	 add	 edx, DWORD PTR _x$[ebp]
  03423	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03426	8b 08		 mov	 ecx, DWORD PTR [eax]
  03428	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  0342c	52		 push	 edx
  0342d	8b 45 cc	 mov	 eax, DWORD PTR _n$[ebp]
  03430	2b 45 d0	 sub	 eax, DWORD PTR _m$[ebp]
  03433	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  03437	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0343a	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0343d	50		 push	 eax
  0343e	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  03441	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  03445	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03448	03 10		 add	 edx, DWORD PTR [eax]
  0344a	52		 push	 edx
  0344b	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0344e	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1057 : 			graphMgr->NextScreen()->ShowList().Clear();

  03453	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03459	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0345e	8b c8		 mov	 ecx, eax
  03460	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03465	8b c8		 mov	 ecx, eax
  03467	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1058 : 			graphMgr->NextScreen()->ShowList().Add(B);

  0346c	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0346f	51		 push	 ecx
  03470	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03476	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0347b	8b c8		 mov	 ecx, eax
  0347d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03482	8b c8		 mov	 ecx, eax
  03484	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1059 : 			graphMgr->ShowBits();

  03489	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0348f	8b 02		 mov	 eax, DWORD PTR [edx]
  03491	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03497	ff 50 40	 call	 DWORD PTR [eax+64]

; 1060 : 		}

  0349a	e9 49 ff ff ff	 jmp	 $L62431
$L62432:

; 1061 : 
; 1062 : 		if ((l==width/x) && (width%x)) {

  0349f	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  034a2	99		 cdq
  034a3	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  034a6	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  034a9	0f 85 ab 00 00
	00		 jne	 $L62433
  034af	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  034b2	99		 cdq
  034b3	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  034b6	85 d2		 test	 edx, edx
  034b8	0f 84 9c 00 00
	00		 je	 $L62433

; 1063 : 		// if width is not an even multiple of x adjust for last draw
; 1064 : 
; 1065 : 			B.Set(l*x+r.A.x,(n-m)*x+r.A.y,l*x+-1+(width%x)+r.A.x,(n-m)*x+x-1+r.A.y);

  034be	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  034c1	2b 4d d0	 sub	 ecx, DWORD PTR _m$[ebp]
  034c4	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  034c8	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  034cb	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  034ce	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  034d1	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  034d5	51		 push	 ecx
  034d6	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  034d9	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  034dd	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  034e0	99		 cdq
  034e1	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  034e4	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  034e8	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  034eb	03 10		 add	 edx, DWORD PTR [eax]
  034ed	52		 push	 edx
  034ee	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  034f1	2b 4d d0	 sub	 ecx, DWORD PTR _m$[ebp]
  034f4	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  034f8	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  034fb	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  034fe	51		 push	 ecx
  034ff	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  03502	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  03506	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  03509	03 01		 add	 eax, DWORD PTR [ecx]
  0350b	50		 push	 eax
  0350c	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0350f	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1066 : 			graphMgr->NextScreen()->ShowList().Clear();

  03514	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0351a	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0351f	8b c8		 mov	 ecx, eax
  03521	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03526	8b c8		 mov	 ecx, eax
  03528	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1067 : 			graphMgr->NextScreen()->ShowList().Add(B);

  0352d	8d 55 ec	 lea	 edx, DWORD PTR _B$[ebp]
  03530	52		 push	 edx
  03531	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03537	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0353c	8b c8		 mov	 ecx, eax
  0353e	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03543	8b c8		 mov	 ecx, eax
  03545	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1068 : 			graphMgr->ShowBits();

  0354a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0354f	8b 10		 mov	 edx, DWORD PTR [eax]
  03551	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03557	ff 52 40	 call	 DWORD PTR [edx+64]
$L62433:

; 1070 : 
; 1071 : 	}

  0355a	e9 f1 fc ff ff	 jmp	 $L62424
$L62425:

; 1072 : 		// Clear entire screen 
; 1073 : 
; 1074 : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  0355f	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03562	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  03565	51		 push	 ecx
  03566	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03569	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0356c	50		 push	 eax
  0356d	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  03570	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  03573	52		 push	 edx
  03574	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03577	8b 08		 mov	 ecx, DWORD PTR [eax]
  03579	51		 push	 ecx
  0357a	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0357d	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1075 : 		graphMgr->NextScreen()->ShowList().Clear();

  03582	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03588	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0358d	8b c8		 mov	 ecx, eax
  0358f	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03594	8b c8		 mov	 ecx, eax
  03596	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1076 : 		graphMgr->NextScreen()->ShowList().Add(B);

  0359b	8d 55 ec	 lea	 edx, DWORD PTR _B$[ebp]
  0359e	52		 push	 edx
  0359f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  035a5	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  035aa	8b c8		 mov	 ecx, eax
  035ac	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  035b1	8b c8		 mov	 ecx, eax
  035b3	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1077 : 		graphMgr->ShowBits();

  035b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  035bd	8b 10		 mov	 edx, DWORD PTR [eax]
  035bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  035c5	ff 52 40	 call	 DWORD PTR [edx+64]

; 1078 : }

  035c8	8b e5		 mov	 esp, ebp
  035ca	5d		 pop	 ebp
  035cb	c3		 ret	 0
?VShutterInEffect@@YAXPAVPlaneShowStyle@@@Z ENDP	; VShutterInEffect
_style$ = 8
_x$ = -36
_l$ = -40
_m$ = -48
_n$ = -52
_height$ = -44
_width$ = -28
_mody$ = -32
_p$ = -4
_r$ = -24
_B$ = -20
?VShutterOutEffect@@YAXPAVPlaneShowStyle@@@Z PROC NEAR	; VShutterOutEffect

; 1083 : {

  035cc	55		 push	 ebp
  035cd	8b ec		 mov	 ebp, esp
  035cf	83 ec 34	 sub	 esp, 52			; 00000034H

; 1084 : // This wipes vertically from the middle to the edges between two images
; 1085 : 
; 1086 : 	int x,l,m,n,height,width,mody;
; 1087 : 	x = style->divisions;

  035d2	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  035d5	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  035d8	89 4d dc	 mov	 DWORD PTR _x$[ebp], ecx

; 1088 : 	SOL_Plane*  p =	graphMgr->VisiblePlane(style->planeID);

  035db	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  035de	8b 02		 mov	 eax, DWORD PTR [edx]
  035e0	50		 push	 eax
  035e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  035e7	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  035ec	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1089 : 	SOL_Rect& r = p->OnScreen();	

  035ef	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  035f2	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  035f7	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 1090 : 
; 1091 : 	
; 1092 : 	height 	= r.B.y - r.A.y + 1;

  035fa	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  035fd	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03600	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  03603	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  03606	83 c0 01	 add	 eax, 1
  03609	89 45 d4	 mov	 DWORD PTR _height$[ebp], eax

; 1093 : 	width		= r.B.x - r.A.x + 1;

  0360c	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0360f	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03612	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  03615	2b 02		 sub	 eax, DWORD PTR [edx]
  03617	83 c0 01	 add	 eax, 1
  0361a	89 45 e4	 mov	 DWORD PTR _width$[ebp], eax

; 1094 : 
; 1095 :  	SOL_Rect	B(0,0,x,x);

  0361d	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  03620	51		 push	 ecx
  03621	8b 55 dc	 mov	 edx, DWORD PTR _x$[ebp]
  03624	52		 push	 edx
  03625	6a 00		 push	 0
  03627	6a 00		 push	 0
  03629	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0362c	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 1096 : 
; 1097 : 	if (height%(2*x))

  03631	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  03634	d1 e1		 shl	 ecx, 1
  03636	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  03639	99		 cdq
  0363a	f7 f9		 idiv	 ecx
  0363c	85 d2		 test	 edx, edx
  0363e	74 09		 je	 SHORT $L62447

; 1098 : 		mody = 1;

  03640	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _mody$[ebp], 1

; 1099 : 	else

  03647	eb 07		 jmp	 SHORT $L62448
$L62447:

; 1100 : 		mody = 0;

  03649	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _mody$[ebp], 0
$L62448:

; 1101 : 
; 1102 : 
; 1103 : 	n = height/x-1;

  03650	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  03653	99		 cdq
  03654	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03657	83 e8 01	 sub	 eax, 1
  0365a	89 45 cc	 mov	 DWORD PTR _n$[ebp], eax

; 1104 : 
; 1105 : // r.A.x and r.A.y are added to all rectangles to adjust for planes not at 0,0
; 1106 : 
; 1107 : 	for(m=height/(2*x);m>=0;m--) {	

  0365d	8b 4d dc	 mov	 ecx, DWORD PTR _x$[ebp]
  03660	d1 e1		 shl	 ecx, 1
  03662	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  03665	99		 cdq
  03666	f7 f9		 idiv	 ecx
  03668	89 45 d0	 mov	 DWORD PTR _m$[ebp], eax
  0366b	eb 09		 jmp	 SHORT $L62449
$L62450:
  0366d	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  03670	83 ea 01	 sub	 edx, 1
  03673	89 55 d0	 mov	 DWORD PTR _m$[ebp], edx
$L62449:
  03676	83 7d d0 00	 cmp	 DWORD PTR _m$[ebp], 0
  0367a	0f 8c ef 02 00
	00		 jl	 $L62451

; 1108 : 		for(l=0;l<width/x;l++) 	// Draw up from middle

  03680	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  03687	eb 09		 jmp	 SHORT $L62452
$L62453:
  03689	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  0368c	83 c0 01	 add	 eax, 1
  0368f	89 45 d8	 mov	 DWORD PTR _l$[ebp], eax
$L62452:
  03692	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  03695	99		 cdq
  03696	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03699	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  0369c	0f 8d 98 00 00
	00		 jge	 $L62454

; 1110 : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+x-1+r.A.x,m*x+x-1+r.A.y);

  036a2	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  036a5	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  036a9	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  036ac	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  036af	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  036b2	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  036b6	51		 push	 ecx
  036b7	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  036ba	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  036be	03 55 dc	 add	 edx, DWORD PTR _x$[ebp]
  036c1	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  036c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  036c6	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  036ca	52		 push	 edx
  036cb	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  036ce	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  036d2	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  036d5	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  036d8	50		 push	 eax
  036d9	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  036dc	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  036e0	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  036e3	03 10		 add	 edx, DWORD PTR [eax]
  036e5	52		 push	 edx
  036e6	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  036e9	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1111 : 			graphMgr->NextScreen()->ShowList().Clear();

  036ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  036f4	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  036f9	8b c8		 mov	 ecx, eax
  036fb	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03700	8b c8		 mov	 ecx, eax
  03702	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1112 : 			graphMgr->NextScreen()->ShowList().Add(B);

  03707	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0370a	51		 push	 ecx
  0370b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03711	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03716	8b c8		 mov	 ecx, eax
  03718	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0371d	8b c8		 mov	 ecx, eax
  0371f	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1113 : 			graphMgr->ShowBits();

  03724	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0372a	8b 02		 mov	 eax, DWORD PTR [edx]
  0372c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03732	ff 50 40	 call	 DWORD PTR [eax+64]

; 1114 : 		}

  03735	e9 4f ff ff ff	 jmp	 $L62453
$L62454:

; 1115 : 
; 1116 : 		if ((l==width/x) && (width%x)) {

  0373a	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0373d	99		 cdq
  0373e	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03741	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  03744	0f 85 a5 00 00
	00		 jne	 $L62455
  0374a	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  0374d	99		 cdq
  0374e	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03751	85 d2		 test	 edx, edx
  03753	0f 84 96 00 00
	00		 je	 $L62455

; 1117 : 		// if width is not an even multiple of x adjust for last draw
; 1118 : 
; 1119 : 			B.Set(l*x+r.A.x,m*x+r.A.y,l*x+-1+(width%x)+r.A.x,m*x+x-1+r.A.y);

  03759	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  0375c	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  03760	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  03763	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03766	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  03769	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  0376d	51		 push	 ecx
  0376e	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  03771	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  03775	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  03778	99		 cdq
  03779	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  0377c	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  03780	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03783	03 10		 add	 edx, DWORD PTR [eax]
  03785	52		 push	 edx
  03786	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  03789	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  0378d	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03790	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  03793	51		 push	 ecx
  03794	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  03797	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  0379b	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0379e	03 01		 add	 eax, DWORD PTR [ecx]
  037a0	50		 push	 eax
  037a1	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  037a4	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1120 : 			graphMgr->NextScreen()->ShowList().Clear();

  037a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  037af	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  037b4	8b c8		 mov	 ecx, eax
  037b6	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  037bb	8b c8		 mov	 ecx, eax
  037bd	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1121 : 			graphMgr->NextScreen()->ShowList().Add(B);

  037c2	8d 55 ec	 lea	 edx, DWORD PTR _B$[ebp]
  037c5	52		 push	 edx
  037c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  037cc	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  037d1	8b c8		 mov	 ecx, eax
  037d3	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  037d8	8b c8		 mov	 ecx, eax
  037da	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1122 : 			graphMgr->ShowBits();

  037df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  037e4	8b 10		 mov	 edx, DWORD PTR [eax]
  037e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  037ec	ff 52 40	 call	 DWORD PTR [edx+64]
$L62455:

; 1124 : 
; 1125 : 	  	for( l=0;l<width/x;l++)  // Draw down from middle	

  037ef	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  037f6	eb 09		 jmp	 SHORT $L62456
$L62457:
  037f8	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  037fb	83 c0 01	 add	 eax, 1
  037fe	89 45 d8	 mov	 DWORD PTR _l$[ebp], eax
$L62456:
  03801	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  03804	99		 cdq
  03805	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03808	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  0380b	0f 8d 9e 00 00
	00		 jge	 $L62458

; 1127 : 			B.Set(l*x+r.A.x,(n-m)*x+r.A.y,l*x+x-1+r.A.x,(n-m)*x+x-1+r.A.y);

  03811	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  03814	2b 4d d0	 sub	 ecx, DWORD PTR _m$[ebp]
  03817	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  0381b	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  0381e	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03821	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  03824	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  03828	51		 push	 ecx
  03829	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  0382c	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  03830	03 55 dc	 add	 edx, DWORD PTR _x$[ebp]
  03833	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03836	8b 08		 mov	 ecx, DWORD PTR [eax]
  03838	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  0383c	52		 push	 edx
  0383d	8b 45 cc	 mov	 eax, DWORD PTR _n$[ebp]
  03840	2b 45 d0	 sub	 eax, DWORD PTR _m$[ebp]
  03843	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  03847	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0384a	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0384d	50		 push	 eax
  0384e	8b 55 d8	 mov	 edx, DWORD PTR _l$[ebp]
  03851	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  03855	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03858	03 10		 add	 edx, DWORD PTR [eax]
  0385a	52		 push	 edx
  0385b	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0385e	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1128 : 			graphMgr->NextScreen()->ShowList().Clear();

  03863	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03869	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0386e	8b c8		 mov	 ecx, eax
  03870	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03875	8b c8		 mov	 ecx, eax
  03877	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1129 : 			graphMgr->NextScreen()->ShowList().Add(B);

  0387c	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0387f	51		 push	 ecx
  03880	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03886	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0388b	8b c8		 mov	 ecx, eax
  0388d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03892	8b c8		 mov	 ecx, eax
  03894	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1130 : 			graphMgr->ShowBits();

  03899	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0389f	8b 02		 mov	 eax, DWORD PTR [edx]
  038a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  038a7	ff 50 40	 call	 DWORD PTR [eax+64]

; 1131 : 		}

  038aa	e9 49 ff ff ff	 jmp	 $L62457
$L62458:

; 1132 : 
; 1133 : 		if ((l==width/x) && (width%x)) {

  038af	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  038b2	99		 cdq
  038b3	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  038b6	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  038b9	0f 85 ab 00 00
	00		 jne	 $L62459
  038bf	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  038c2	99		 cdq
  038c3	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  038c6	85 d2		 test	 edx, edx
  038c8	0f 84 9c 00 00
	00		 je	 $L62459

; 1134 : 		// if width is not an even multiple of x adjust for last draw
; 1135 : 
; 1136 : 			B.Set(l*x+r.A.x,(n-m)*x+r.A.y,l*x+-1+(width%x)+r.A.x,(n-m)*x+x-1+r.A.y);

  038ce	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  038d1	2b 4d d0	 sub	 ecx, DWORD PTR _m$[ebp]
  038d4	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  038d8	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  038db	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  038de	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  038e1	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  038e5	51		 push	 ecx
  038e6	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  038e9	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  038ed	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  038f0	99		 cdq
  038f1	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  038f4	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  038f8	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  038fb	03 10		 add	 edx, DWORD PTR [eax]
  038fd	52		 push	 edx
  038fe	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  03901	2b 4d d0	 sub	 ecx, DWORD PTR _m$[ebp]
  03904	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  03908	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  0390b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0390e	51		 push	 ecx
  0390f	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  03912	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  03916	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  03919	03 01		 add	 eax, DWORD PTR [ecx]
  0391b	50		 push	 eax
  0391c	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  0391f	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1137 : 			graphMgr->NextScreen()->ShowList().Clear();

  03924	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0392a	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0392f	8b c8		 mov	 ecx, eax
  03931	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03936	8b c8		 mov	 ecx, eax
  03938	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1138 : 			graphMgr->NextScreen()->ShowList().Add(B);

  0393d	8d 55 ec	 lea	 edx, DWORD PTR _B$[ebp]
  03940	52		 push	 edx
  03941	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03947	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  0394c	8b c8		 mov	 ecx, eax
  0394e	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03953	8b c8		 mov	 ecx, eax
  03955	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1139 : 			graphMgr->ShowBits();

  0395a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0395f	8b 10		 mov	 edx, DWORD PTR [eax]
  03961	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03967	ff 52 40	 call	 DWORD PTR [edx+64]
$L62459:

; 1141 : 
; 1142 : 	}

  0396a	e9 fe fc ff ff	 jmp	 $L62450
$L62451:

; 1143 : 
; 1144 : 	if (height%x) {

  0396f	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  03972	99		 cdq
  03973	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03976	85 d2		 test	 edx, edx
  03978	0f 84 7d 01 00
	00		 je	 $L62464

; 1145 : 	// if heigth is not an even muliple of x adjust for last line
; 1146 : 	  	for( l=0;l<width/x;l++) 	

  0397e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  03985	eb 09		 jmp	 SHORT $L62461
$L62462:
  03987	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  0398a	83 c0 01	 add	 eax, 1
  0398d	89 45 d8	 mov	 DWORD PTR _l$[ebp], eax
$L62461:
  03990	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  03993	99		 cdq
  03994	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03997	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  0399a	0f 8d 9f 00 00
	00		 jge	 $L62463

; 1148 : 			B.Set(l*x+r.A.x,n*x+r.A.y,l*x+x-1+r.A.x,n*x+x+-1+(height%x)+r.A.y);

  039a0	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  039a3	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  039a7	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  039aa	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  039ad	99		 cdq
  039ae	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  039b1	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  039b5	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  039b8	03 50 04	 add	 edx, DWORD PTR [eax+4]
  039bb	52		 push	 edx
  039bc	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  039bf	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  039c3	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  039c6	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  039c9	8b 02		 mov	 eax, DWORD PTR [edx]
  039cb	8d 4c 01 ff	 lea	 ecx, DWORD PTR [ecx+eax-1]
  039cf	51		 push	 ecx
  039d0	8b 55 cc	 mov	 edx, DWORD PTR _n$[ebp]
  039d3	0f af 55 dc	 imul	 edx, DWORD PTR _x$[ebp]
  039d7	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  039da	03 50 04	 add	 edx, DWORD PTR [eax+4]
  039dd	52		 push	 edx
  039de	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  039e1	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  039e5	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  039e8	03 0a		 add	 ecx, DWORD PTR [edx]
  039ea	51		 push	 ecx
  039eb	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  039ee	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1149 : 			graphMgr->NextScreen()->ShowList().Clear();

  039f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  039f9	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  039fe	8b c8		 mov	 ecx, eax
  03a00	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03a05	8b c8		 mov	 ecx, eax
  03a07	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1150 : 			graphMgr->NextScreen()->ShowList().Add(B);

  03a0c	8d 45 ec	 lea	 eax, DWORD PTR _B$[ebp]
  03a0f	50		 push	 eax
  03a10	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03a16	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03a1b	8b c8		 mov	 ecx, eax
  03a1d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03a22	8b c8		 mov	 ecx, eax
  03a24	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1151 : 			graphMgr->ShowBits();

  03a29	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03a2f	8b 11		 mov	 edx, DWORD PTR [ecx]
  03a31	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03a37	ff 52 40	 call	 DWORD PTR [edx+64]

; 1152 : 		}

  03a3a	e9 48 ff ff ff	 jmp	 $L62462
$L62463:

; 1153 : 
; 1154 : 		if ((l==width/x) && (width%x)) {

  03a3f	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  03a42	99		 cdq
  03a43	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03a46	39 45 d8	 cmp	 DWORD PTR _l$[ebp], eax
  03a49	0f 85 ac 00 00
	00		 jne	 $L62464
  03a4f	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  03a52	99		 cdq
  03a53	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03a56	85 d2		 test	 edx, edx
  03a58	0f 84 9d 00 00
	00		 je	 $L62464

; 1155 : 		// if width is not an even multiple of x adjust for last draw
; 1156 : 
; 1157 : 			B.Set(l*x+r.A.x,n*x+r.A.y,l*x+-1+(width%x)+r.A.x,n*x+x-1+(height%x)+r.A.y);

  03a5e	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  03a61	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  03a65	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp]
  03a68	8b 45 d4	 mov	 eax, DWORD PTR _height$[ebp]
  03a6b	99		 cdq
  03a6c	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03a6f	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  03a73	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03a76	03 50 04	 add	 edx, DWORD PTR [eax+4]
  03a79	52		 push	 edx
  03a7a	8b 4d d8	 mov	 ecx, DWORD PTR _l$[ebp]
  03a7d	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  03a81	8b 45 e4	 mov	 eax, DWORD PTR _width$[ebp]
  03a84	99		 cdq
  03a85	f7 7d dc	 idiv	 DWORD PTR _x$[ebp]
  03a88	8d 54 11 ff	 lea	 edx, DWORD PTR [ecx+edx-1]
  03a8c	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03a8f	03 10		 add	 edx, DWORD PTR [eax]
  03a91	52		 push	 edx
  03a92	8b 4d cc	 mov	 ecx, DWORD PTR _n$[ebp]
  03a95	0f af 4d dc	 imul	 ecx, DWORD PTR _x$[ebp]
  03a99	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03a9c	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  03a9f	51		 push	 ecx
  03aa0	8b 45 d8	 mov	 eax, DWORD PTR _l$[ebp]
  03aa3	0f af 45 dc	 imul	 eax, DWORD PTR _x$[ebp]
  03aa7	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  03aaa	03 01		 add	 eax, DWORD PTR [ecx]
  03aac	50		 push	 eax
  03aad	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  03ab0	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1158 : 			graphMgr->NextScreen()->ShowList().Clear();

  03ab5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03abb	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03ac0	8b c8		 mov	 ecx, eax
  03ac2	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03ac7	8b c8		 mov	 ecx, eax
  03ac9	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1159 : 			graphMgr->NextScreen()->ShowList().Add(B);

  03ace	8d 55 ec	 lea	 edx, DWORD PTR _B$[ebp]
  03ad1	52		 push	 edx
  03ad2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03ad8	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03add	8b c8		 mov	 ecx, eax
  03adf	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03ae4	8b c8		 mov	 ecx, eax
  03ae6	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1160 : 			graphMgr->ShowBits();

  03aeb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03af0	8b 10		 mov	 edx, DWORD PTR [eax]
  03af2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03af8	ff 52 40	 call	 DWORD PTR [edx+64]
$L62464:

; 1163 : 		// Clear entire screen 
; 1164 : 
; 1165 : 		B.Set(r.A.x,r.A.y,r.B.x,r.B.y);

  03afb	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03afe	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  03b01	51		 push	 ecx
  03b02	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  03b05	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  03b08	50		 push	 eax
  03b09	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  03b0c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  03b0f	52		 push	 edx
  03b10	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  03b13	8b 08		 mov	 ecx, DWORD PTR [eax]
  03b15	51		 push	 ecx
  03b16	8d 4d ec	 lea	 ecx, DWORD PTR _B$[ebp]
  03b19	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1166 : 		graphMgr->NextScreen()->ShowList().Clear();

  03b1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03b24	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03b29	8b c8		 mov	 ecx, eax
  03b2b	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03b30	8b c8		 mov	 ecx, eax
  03b32	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 1167 : 		graphMgr->NextScreen()->ShowList().Add(B);

  03b37	8d 55 ec	 lea	 edx, DWORD PTR _B$[ebp]
  03b3a	52		 push	 edx
  03b3b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03b41	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  03b46	8b c8		 mov	 ecx, eax
  03b48	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  03b4d	8b c8		 mov	 ecx, eax
  03b4f	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 1168 : 		graphMgr->ShowBits();

  03b54	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03b59	8b 10		 mov	 edx, DWORD PTR [eax]
  03b5b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03b61	ff 52 40	 call	 DWORD PTR [edx+64]

; 1169 : 
; 1170 : }

  03b64	8b e5		 mov	 esp, ebp
  03b66	5d		 pop	 ebp
  03b67	c3		 ret	 0
?VShutterOutEffect@@YAXPAVPlaneShowStyle@@@Z ENDP	; VShutterOutEffect
_TEXT	ENDS
PUBLIC	?KShowStylePercent@@YAXPAF@Z			; KShowStylePercent
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
_TEXT	SEGMENT
_args$ = 8
_style$62470 = -4
?KShowStylePercent@@YAXPAF@Z PROC NEAR			; KShowStylePercent

; 1177 : {

  03b68	55		 push	 ebp
  03b69	8b ec		 mov	 ebp, esp
  03b6b	51		 push	 ecx

; 1178 : 	// Percent complete of a show style for a plane
; 1179 : 	//
; 1180 : 	// Input
; 1181 : 	// 	arg1-----planeID
; 1182 : 	// Output
; 1183 : 	//    acc -----the percent complete of the plane's show style
; 1184 : 	if (!showStyles)

  03b6c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A, 0 ; showStyles
  03b73	75 0c		 jne	 SHORT $L62468

; 1185 : 		pm.acc = 100;

  03b75	c7 05 04 00 00
	00 64 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 100 ; 00000064H

; 1186 : 	else {

  03b7f	eb 49		 jmp	 SHORT $L62469
$L62468:

; 1187 : 		PlaneShowStyle* style = showStyles;

  03b81	a1 00 00 00 00	 mov	 eax, DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A ; showStyles
  03b86	89 45 fc	 mov	 DWORD PTR _style$62470[ebp], eax
$L62472:

; 1188 : 		while (style) {

  03b89	83 7d fc 00	 cmp	 DWORD PTR _style$62470[ebp], 0
  03b8d	74 31		 je	 SHORT $L62473

; 1189 : 			if (style->planeID == arg(1)) {

  03b8f	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03b92	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  03b96	8b 45 fc	 mov	 eax, DWORD PTR _style$62470[ebp]
  03b99	39 10		 cmp	 DWORD PTR [eax], edx
  03b9b	75 18		 jne	 SHORT $L62474

; 1190 : 				pm.acc = (100*style->percent)/style->divisions;

  03b9d	8b 4d fc	 mov	 ecx, DWORD PTR _style$62470[ebp]
  03ba0	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  03ba3	6b c0 64	 imul	 eax, 100		; 00000064H
  03ba6	8b 4d fc	 mov	 ecx, DWORD PTR _style$62470[ebp]
  03ba9	33 d2		 xor	 edx, edx
  03bab	f7 71 20	 div	 DWORD PTR [ecx+32]
  03bae	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1191 : 				return;

  03bb3	eb 15		 jmp	 SHORT $L62467
$L62474:

; 1193 : 			style = style->next;

  03bb5	8b 55 fc	 mov	 edx, DWORD PTR _style$62470[ebp]
  03bb8	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  03bbb	89 45 fc	 mov	 DWORD PTR _style$62470[ebp], eax

; 1194 : 		}

  03bbe	eb c9		 jmp	 SHORT $L62472
$L62473:

; 1195 : 		pm.acc = 100;

  03bc0	c7 05 04 00 00
	00 64 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 100 ; 00000064H
$L62469:
$L62467:

; 1197 : }

  03bca	8b e5		 mov	 esp, ebp
  03bcc	5d		 pop	 ebp
  03bcd	c3		 ret	 0
?KShowStylePercent@@YAXPAF@Z ENDP			; KShowStylePercent
_TEXT	ENDS
PUBLIC	?ProcessShowStyle@@YAHPAVPlaneShowStyle@@I@Z	; ProcessShowStyle
PUBLIC	?ProcessShowStyles@@YAXXZ			; ProcessShowStyles
PUBLIC	?ShutDownStyle@@YAPAVPlaneShowStyle@@PAV1@@Z	; ShutDownStyle
_TEXT	SEGMENT
_notDone$ = -8
_withOutAnimate$ = -12
_time$ = -4
_lastStyle$62483 = -16
_style$62484 = -20
_done$62489 = -24
$T62861 = -44
?ProcessShowStyles@@YAXXZ PROC NEAR			; ProcessShowStyles

; 1201 : {

  03bce	55		 push	 ebp
  03bcf	8b ec		 mov	 ebp, esp
  03bd1	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 1202 : 	Bool notDone;
; 1203 : 	Bool withOutAnimate;
; 1204 : 	uint time = timeMgr->GetTickCount();

  03bd4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  03bd9	8b 10		 mov	 edx, DWORD PTR [eax]
  03bdb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  03be1	ff 52 04	 call	 DWORD PTR [edx+4]
  03be4	89 45 fc	 mov	 DWORD PTR _time$[ebp], eax
$L62480:

; 1206 : 		notDone = False;

  03be7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _notDone$[ebp], 0

; 1207 : 		withOutAnimate = False;

  03bee	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _withOutAnimate$[ebp], 0

; 1208 : 		PlaneShowStyle* lastStyle = NULL;

  03bf5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _lastStyle$62483[ebp], 0

; 1209 : 		PlaneShowStyle* style = showStyles;

  03bfc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A ; showStyles
  03c01	89 45 ec	 mov	 DWORD PTR _style$62484[ebp], eax
$L62486:

; 1210 : 		while (style) {

  03c04	83 7d ec 00	 cmp	 DWORD PTR _style$62484[ebp], 0
  03c08	74 63		 je	 SHORT $L62487

; 1211 : 			if (!style->animate)	++withOutAnimate;

  03c0a	8b 4d ec	 mov	 ecx, DWORD PTR _style$62484[ebp]
  03c0d	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  03c11	75 09		 jne	 SHORT $L62488
  03c13	8b 55 f4	 mov	 edx, DWORD PTR _withOutAnimate$[ebp]
  03c16	83 c2 01	 add	 edx, 1
  03c19	89 55 f4	 mov	 DWORD PTR _withOutAnimate$[ebp], edx
$L62488:

; 1212 : 			Bool done = ProcessShowStyle(style,time);

  03c1c	8b 45 fc	 mov	 eax, DWORD PTR _time$[ebp]
  03c1f	50		 push	 eax
  03c20	8b 4d ec	 mov	 ecx, DWORD PTR _style$62484[ebp]
  03c23	51		 push	 ecx
  03c24	e8 00 00 00 00	 call	 ?ProcessShowStyle@@YAHPAVPlaneShowStyle@@I@Z ; ProcessShowStyle
  03c29	83 c4 08	 add	 esp, 8
  03c2c	89 45 e8	 mov	 DWORD PTR _done$62489[ebp], eax

; 1213 : 			if (!done) notDone = True;

  03c2f	83 7d e8 00	 cmp	 DWORD PTR _done$62489[ebp], 0
  03c33	75 07		 jne	 SHORT $L62490
  03c35	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _notDone$[ebp], 1
$L62490:

; 1214 : 			if (done && style->deleteMe) {

  03c3c	83 7d e8 00	 cmp	 DWORD PTR _done$62489[ebp], 0
  03c40	74 1a		 je	 SHORT $L62491
  03c42	8b 55 ec	 mov	 edx, DWORD PTR _style$62484[ebp]
  03c45	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  03c49	74 11		 je	 SHORT $L62491

; 1215 : 				style = ShutDownStyle(style);

  03c4b	8b 45 ec	 mov	 eax, DWORD PTR _style$62484[ebp]
  03c4e	50		 push	 eax
  03c4f	e8 00 00 00 00	 call	 ?ShutDownStyle@@YAPAVPlaneShowStyle@@PAV1@@Z ; ShutDownStyle
  03c54	83 c4 04	 add	 esp, 4
  03c57	89 45 ec	 mov	 DWORD PTR _style$62484[ebp], eax

; 1217 : 			else {

  03c5a	eb 0f		 jmp	 SHORT $L62492
$L62491:

; 1218 : 				lastStyle = style;

  03c5c	8b 4d ec	 mov	 ecx, DWORD PTR _style$62484[ebp]
  03c5f	89 4d f0	 mov	 DWORD PTR _lastStyle$62483[ebp], ecx

; 1219 : 				style = style->next;

  03c62	8b 55 ec	 mov	 edx, DWORD PTR _style$62484[ebp]
  03c65	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  03c68	89 45 ec	 mov	 DWORD PTR _style$62484[ebp], eax
$L62492:

; 1221 : 		}

  03c6b	eb 97		 jmp	 SHORT $L62486
$L62487:

; 1222 : 		if (withOutAnimate ) {

  03c6d	83 7d f4 00	 cmp	 DWORD PTR _withOutAnimate$[ebp], 0
  03c71	74 2e		 je	 SHORT $L62493

; 1223 : 			graphMgr->FrameOut();

  03c73	6a ff		 push	 -1
  03c75	6a ff		 push	 -1
  03c77	6a 00		 push	 0
  03c79	6a 00		 push	 0
  03c7b	8d 4d d4	 lea	 ecx, DWORD PTR $T62861[ebp]
  03c7e	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  03c83	83 ec 10	 sub	 esp, 16			; 00000010H
  03c86	8b cc		 mov	 ecx, esp
  03c88	50		 push	 eax
  03c89	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  03c8e	6a 01		 push	 1
  03c90	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03c96	8b 11		 mov	 edx, DWORD PTR [ecx]
  03c98	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03c9e	ff 52 14	 call	 DWORD PTR [edx+20]
$L62493:

; 1225 : 	} while (notDone && withOutAnimate);

  03ca1	83 7d f8 00	 cmp	 DWORD PTR _notDone$[ebp], 0
  03ca5	74 0a		 je	 SHORT $L62496
  03ca7	83 7d f4 00	 cmp	 DWORD PTR _withOutAnimate$[ebp], 0
  03cab	0f 85 36 ff ff
	ff		 jne	 $L62480
$L62496:

; 1226 : 
; 1227 : }

  03cb1	8b e5		 mov	 esp, ebp
  03cb3	5d		 pop	 ebp
  03cb4	c3		 ret	 0
?ProcessShowStyles@@YAXXZ ENDP				; ProcessShowStyles
_TEXT	ENDS
PUBLIC	?Fade@@YAHHPAVPlaneShowStyle@@@Z		; Fade
PUBLIC	?Plain@@YAHPAVPlaneShowStyle@@@Z		; Plain
PUBLIC	?PalMorph@@YAHPAVPlaneShowStyle@@@Z		; PalMorph
_TEXT	SEGMENT
_style$ = 8
_time$ = 12
_done$ = -4
?ProcessShowStyle@@YAHPAVPlaneShowStyle@@I@Z PROC NEAR	; ProcessShowStyle

; 1231 : {

  03cb5	55		 push	 ebp
  03cb6	8b ec		 mov	 ebp, esp
  03cb8	83 ec 08	 sub	 esp, 8

; 1232 : 	Bool done = False;

  03cbb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _done$[ebp], 0

; 1233 : 	
; 1234 : 	if ((style->clock >= time) && style->animate)

  03cc2	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  03cc5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  03cc8	3b 4d 0c	 cmp	 ecx, DWORD PTR _time$[ebp]
  03ccb	72 10		 jb	 SHORT $L62502
  03ccd	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  03cd0	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  03cd4	74 07		 je	 SHORT $L62502

; 1235 : 		return False;

  03cd6	33 c0		 xor	 eax, eax
  03cd8	e9 aa 00 00 00	 jmp	 $L62500
$L62502:

; 1236 : 
; 1237 : #ifdef SHOWSTYLES
; 1238 : 	// Switch on show style
; 1239 : 	switch (style->style) {

  03cdd	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  03ce0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03ce3	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
  03ce6	83 7d f8 0f	 cmp	 DWORD PTR -8+[ebp], 15	; 0000000fH
  03cea	0f 87 94 00 00
	00		 ja	 $L62504
  03cf0	8b 55 f8	 mov	 edx, DWORD PTR -8+[ebp]
  03cf3	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L62863[edx*4]
$L62507:

; 1240 : 		case PLAINFORM:
; 1241 : 			done = Plain(style);

  03cfa	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  03cfd	50		 push	 eax
  03cfe	e8 00 00 00 00	 call	 ?Plain@@YAHPAVPlaneShowStyle@@@Z ; Plain
  03d03	83 c4 04	 add	 esp, 4
  03d06	89 45 fc	 mov	 DWORD PTR _done$[ebp], eax

; 1242 : 			break;

  03d09	eb 79		 jmp	 SHORT $L62504
$L62508:

; 1243 : 		case DISSOLVENOMORPH:
; 1244 : 			done = PalMorph(style);

  03d0b	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  03d0e	51		 push	 ecx
  03d0f	e8 00 00 00 00	 call	 ?PalMorph@@YAHPAVPlaneShowStyle@@@Z ; PalMorph
  03d14	83 c4 04	 add	 esp, 4
  03d17	89 45 fc	 mov	 DWORD PTR _done$[ebp], eax

; 1245 : 			break;

  03d1a	eb 68		 jmp	 SHORT $L62504
$L62509:

; 1246 : 		case PIXELDISSOLVE:
; 1247 : 			done = PalMorph(style);

  03d1c	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  03d1f	52		 push	 edx
  03d20	e8 00 00 00 00	 call	 ?PalMorph@@YAHPAVPlaneShowStyle@@@Z ; PalMorph
  03d25	83 c4 04	 add	 esp, 4
  03d28	89 45 fc	 mov	 DWORD PTR _done$[ebp], eax

; 1248 : 			break;

  03d2b	eb 57		 jmp	 SHORT $L62504
$L62510:

; 1249 : 		case FADEOUT:
; 1250 : 			done = Fade(-1,style);

  03d2d	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  03d30	50		 push	 eax
  03d31	6a ff		 push	 -1
  03d33	e8 00 00 00 00	 call	 ?Fade@@YAHHPAVPlaneShowStyle@@@Z ; Fade
  03d38	83 c4 08	 add	 esp, 8
  03d3b	89 45 fc	 mov	 DWORD PTR _done$[ebp], eax

; 1251 : 			break;

  03d3e	eb 44		 jmp	 SHORT $L62504
$L62511:

; 1252 : 		case FADEIN:
; 1253 : 			done = Fade(1,style);

  03d40	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  03d43	51		 push	 ecx
  03d44	6a 01		 push	 1
  03d46	e8 00 00 00 00	 call	 ?Fade@@YAHHPAVPlaneShowStyle@@@Z ; Fade
  03d4b	83 c4 08	 add	 esp, 8
  03d4e	89 45 fc	 mov	 DWORD PTR _done$[ebp], eax

; 1254 : 			break;

  03d51	eb 31		 jmp	 SHORT $L62504
$L62512:

; 1255 : 		case PALETTEMORPH:
; 1256 : #ifdef MACINTOSH
; 1257 : 			done = Plain(style); //KGN PalMorph(style);
; 1258 : #else
; 1259 : 			done = PalMorph(style);

  03d53	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  03d56	52		 push	 edx
  03d57	e8 00 00 00 00	 call	 ?PalMorph@@YAHPAVPlaneShowStyle@@@Z ; PalMorph
  03d5c	83 c4 04	 add	 esp, 4
  03d5f	89 45 fc	 mov	 DWORD PTR _done$[ebp], eax

; 1260 : #endif
; 1261 : 			break;

  03d62	eb 20		 jmp	 SHORT $L62504
$L62513:

; 1262 : 		case HSHUTTEROUT:
; 1263 : 		case IRISOUT:
; 1264 : 		case VSHUTTEROUT:
; 1265 : 		case WIPELEFT:
; 1266 : 		case WIPEUP:
; 1267 : 			done = PalMorph(style);

  03d64	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  03d67	50		 push	 eax
  03d68	e8 00 00 00 00	 call	 ?PalMorph@@YAHPAVPlaneShowStyle@@@Z ; PalMorph
  03d6d	83 c4 04	 add	 esp, 4
  03d70	89 45 fc	 mov	 DWORD PTR _done$[ebp], eax

; 1268 : 			break;

  03d73	eb 0f		 jmp	 SHORT $L62504
$L62514:

; 1269 : 		case HSHUTTERIN:
; 1270 : 		case IRISIN:
; 1271 : 		case VSHUTTERIN:
; 1272 : 		case WIPERIGHT:
; 1273 : 		case WIPEDOWN:
; 1274 : 			done = PalMorph(style);

  03d75	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  03d78	51		 push	 ecx
  03d79	e8 00 00 00 00	 call	 ?PalMorph@@YAHPAVPlaneShowStyle@@@Z ; PalMorph
  03d7e	83 c4 04	 add	 esp, 4
  03d81	89 45 fc	 mov	 DWORD PTR _done$[ebp], eax
$L62504:

; 1277 : #else
; 1278 : 	// Switch on show style
; 1279 : 	switch (style->style) {
; 1280 : 		case PLAINFORM:
; 1281 : 			done = Plain(style);
; 1282 : 			break;
; 1283 : 		case DISSOLVENOMORPH:
; 1284 : 		case PIXELDISSOLVE:
; 1285 : 		case HSHUTTEROUT:
; 1286 : 		case IRISOUT:
; 1287 : 		case VSHUTTEROUT:
; 1288 : 		case WIPELEFT:
; 1289 : 		case WIPEUP:
; 1290 : 		case HSHUTTERIN:
; 1291 : 		case IRISIN:
; 1292 : 		case VSHUTTERIN:
; 1293 : 		case WIPERIGHT:
; 1294 : 		case WIPEDOWN:
; 1295 : 			msgMgr->Alert("show style not supported");
; 1296 : 			break;
; 1297 : 		case FADEOUT:
; 1298 : 			done = Fade(-1,style);
; 1299 : 			break;
; 1300 : 		case FADEIN:
; 1301 : 			done = Fade(1,style);
; 1302 : 			break;
; 1303 : 		case PALETTEMORPH:
; 1304 : #ifdef MACINTOSH
; 1305 : 			done = Plain(style); //KGN PalMorph(style);
; 1306 : #else
; 1307 : 			msgMgr->Alert("show style not supported");
; 1308 : #endif
; 1309 : 			break;
; 1310 : 	}
; 1311 : #endif
; 1312 : 	return (done);

  03d84	8b 45 fc	 mov	 eax, DWORD PTR _done$[ebp]
$L62500:

; 1313 : }

  03d87	8b e5		 mov	 esp, ebp
  03d89	5d		 pop	 ebp
  03d8a	c3		 ret	 0
$L62863:
  03d8b	00 00 00 00	 DD	 $L62507
  03d8f	00 00 00 00	 DD	 $L62513
  03d93	00 00 00 00	 DD	 $L62514
  03d97	00 00 00 00	 DD	 $L62513
  03d9b	00 00 00 00	 DD	 $L62514
  03d9f	00 00 00 00	 DD	 $L62513
  03da3	00 00 00 00	 DD	 $L62514
  03da7	00 00 00 00	 DD	 $L62513
  03dab	00 00 00 00	 DD	 $L62514
  03daf	00 00 00 00	 DD	 $L62513
  03db3	00 00 00 00	 DD	 $L62514
  03db7	00 00 00 00	 DD	 $L62508
  03dbb	00 00 00 00	 DD	 $L62509
  03dbf	00 00 00 00	 DD	 $L62510
  03dc3	00 00 00 00	 DD	 $L62511
  03dc7	00 00 00 00	 DD	 $L62512
?ProcessShowStyle@@YAHPAVPlaneShowStyle@@I@Z ENDP	; ProcessShowStyle
_style$ = 8
?PalMorph@@YAHPAVPlaneShowStyle@@@Z PROC NEAR		; PalMorph

; 1320 : {

  03dcb	55		 push	 ebp
  03dcc	8b ec		 mov	 ebp, esp

; 1321 : 			graphMgr->PalMorphFrameOut(palMorphArray,style);

  03dce	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  03dd1	50		 push	 eax
  03dd2	68 00 00 00 00	 push	 OFFSET FLAT:?palMorphArray@@3PADA ; palMorphArray
  03dd7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03ddd	8b 11		 mov	 edx, DWORD PTR [ecx]
  03ddf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03de5	ff 52 24	 call	 DWORD PTR [edx+36]

; 1322 : 			style->deleteMe = True;

  03de8	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  03deb	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 1323 : 			return True;

  03df2	b8 01 00 00 00	 mov	 eax, 1

; 1324 : }

  03df7	5d		 pop	 ebp
  03df8	c3		 ret	 0
?PalMorph@@YAHPAVPlaneShowStyle@@@Z ENDP		; PalMorph
_TEXT	ENDS
PUBLIC	?KSetPalStyleRange@@YAXPAF@Z			; KSetPalStyleRange
_TEXT	SEGMENT
_args$ = 8
_i$ = -4
_j$ = -8
_k$ = -12
?KSetPalStyleRange@@YAXPAF@Z PROC NEAR			; KSetPalStyleRange

; 1328 : {

  03df9	55		 push	 ebp
  03dfa	8b ec		 mov	 ebp, esp
  03dfc	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1329 : 	int i = arg(1);

  03dff	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03e02	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  03e06	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx

; 1330 : 	int j = arg(2);

  03e09	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03e0c	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  03e10	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax

; 1331 : 
; 1332 : 	for(int k=i;k<=j;k++)

  03e13	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  03e16	89 4d f4	 mov	 DWORD PTR _k$[ebp], ecx
  03e19	eb 09		 jmp	 SHORT $L62524
$L62525:
  03e1b	8b 55 f4	 mov	 edx, DWORD PTR _k$[ebp]
  03e1e	83 c2 01	 add	 edx, 1
  03e21	89 55 f4	 mov	 DWORD PTR _k$[ebp], edx
$L62524:
  03e24	8b 45 f4	 mov	 eax, DWORD PTR _k$[ebp]
  03e27	3b 45 f8	 cmp	 eax, DWORD PTR _j$[ebp]
  03e2a	7f 0c		 jg	 SHORT $L62526

; 1333 : 		palMorphArray[k] = 0;

  03e2c	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  03e2f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?palMorphArray@@3PADA[ecx], 0
  03e36	eb e3		 jmp	 SHORT $L62525
$L62526:

; 1334 : }

  03e38	8b e5		 mov	 esp, ebp
  03e3a	5d		 pop	 ebp
  03e3b	c3		 ret	 0
?KSetPalStyleRange@@YAXPAF@Z ENDP			; KSetPalStyleRange
_TEXT	ENDS
PUBLIC	?KSetScroll@@YAXPAF@Z				; KSetScroll
PUBLIC	?Xlen@SOL_Rect@@QBEHXZ				; SOL_Rect::Xlen
PUBLIC	?Ylen@SOL_Rect@@QBEHXZ				; SOL_Rect::Ylen
PUBLIC	?AddPic@GraphicsMgr@@QAEHJHAAVSOL_Point@@H@Z	; GraphicsMgr::AddPic
PUBLIC	??0PlaneScroll@@QAE@XZ				; PlaneScroll::PlaneScroll
PUBLIC	?ProcessScroll@@YAHPAVPlaneScroll@@@Z		; ProcessScroll
_DATA	SEGMENT
	ORG $+3
$SG62537 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Shws'
	DB	'tyle.cpp', 00H
	ORG $+3
$SG62539 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Shws'
	DB	'tyle.cpp', 00H
	ORG $+3
$SG62547 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Shws'
	DB	'tyle.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T62876	DD	019930520H
	DD	01H
	DD	FLAT:$T62878
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T62878	DD	0ffffffffH
	DD	FLAT:$L62874
xdata$x	ENDS
_TEXT	SEGMENT
_args$ = 8
_planeID$ = -44
_scroll$ = -16
_index$ = -48
_r$ = -32
_pt$ = -40
_done$62558 = -52
$T62867 = -56
$T62868 = -60
$T62871 = -64
$T62872 = -80
$T62873 = -84
__$EHRec$ = -12
?KSetScroll@@YAXPAF@Z PROC NEAR				; KSetScroll

; 1349 : {

  03e3c	55		 push	 ebp
  03e3d	8b ec		 mov	 ebp, esp
  03e3f	6a ff		 push	 -1
  03e41	68 00 00 00 00	 push	 $L62877
  03e46	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03e4c	50		 push	 eax
  03e4d	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  03e54	83 ec 4c	 sub	 esp, 76			; 0000004cH

; 1350 : 	// Scroll for a plane
; 1351 : 	//
; 1352 : 	// Input
; 1353 : 	// 	arg1-----planeID
; 1354 : 	// 	arg2-----directionX
; 1355 : 	// 	arg3-----directionY
; 1356 : 	//    arg4-----pic number
; 1357 : 	//		arg5-----True with animate
; 1358 : 	//					False without animate
; 1359 : 	//		arg6-----cycle speed	(in ticks)
; 1360 : 	//		arg7-----mirror
; 1361 : 
; 1362 : 	if (!arg(2) && !arg(3)) 

  03e57	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03e5a	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  03e5e	85 c9		 test	 ecx, ecx
  03e60	75 10		 jne	 SHORT $L62530
  03e62	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03e65	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  03e69	85 c0		 test	 eax, eax
  03e6b	75 05		 jne	 SHORT $L62530

; 1363 : 		// No motion
; 1364 : 		return;

  03e6d	e9 21 03 00 00	 jmp	 $L62529
$L62530:

; 1365 : 
; 1366 : 	// Make sure this plane is not already
; 1367 : 	// in the scroll list.
; 1368 : 	int planeID = arg(1);

  03e72	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03e75	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  03e79	89 55 d4	 mov	 DWORD PTR _planeID$[ebp], edx

; 1369 : 	PlaneScroll* scroll = planeScrolls;

  03e7c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?planeScrolls@@3PAVPlaneScroll@@A ; planeScrolls
  03e81	89 45 f0	 mov	 DWORD PTR _scroll$[ebp], eax
$L62534:

; 1370 : 	while (scroll) {

  03e84	83 7d f0 00	 cmp	 DWORD PTR _scroll$[ebp], 0
  03e88	74 39		 je	 SHORT $L62535

; 1371 : 		if (scroll->planeID == planeID)

  03e8a	8b 4d f0	 mov	 ecx, DWORD PTR _scroll$[ebp]
  03e8d	8b 11		 mov	 edx, DWORD PTR [ecx]
  03e8f	3b 55 d4	 cmp	 edx, DWORD PTR _planeID$[ebp]
  03e92	75 24		 jne	 SHORT $L62536

; 1372 : 			msgMgr->Fatal(SrcLoc,Msg_ScrollAlreadyInProgress,planeID);

  03e94	8b 45 d4	 mov	 eax, DWORD PTR _planeID$[ebp]
  03e97	50		 push	 eax
  03e98	68 84 00 00 00	 push	 132			; 00000084H
  03e9d	68 5c 05 00 00	 push	 1372			; 0000055cH
  03ea2	68 00 00 00 00	 push	 OFFSET FLAT:$SG62537
  03ea7	6a 61		 push	 97			; 00000061H
  03ea9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03eaf	51		 push	 ecx
  03eb0	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  03eb5	83 c4 18	 add	 esp, 24			; 00000018H
$L62536:

; 1373 : 		scroll = scroll->next;

  03eb8	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  03ebb	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  03ebe	89 45 f0	 mov	 DWORD PTR _scroll$[ebp], eax

; 1374 : 	}

  03ec1	eb c1		 jmp	 SHORT $L62534
$L62535:

; 1375 : 
; 1376 : 	if (arg(2) && arg(3))

  03ec3	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03ec6	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  03eca	85 d2		 test	 edx, edx
  03ecc	74 2e		 je	 SHORT $L62538
  03ece	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03ed1	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  03ed5	85 c9		 test	 ecx, ecx
  03ed7	74 23		 je	 SHORT $L62538

; 1377 : 			msgMgr->Fatal(SrcLoc,Msg_ScrollInXAndY,planeID);

  03ed9	8b 55 d4	 mov	 edx, DWORD PTR _planeID$[ebp]
  03edc	52		 push	 edx
  03edd	68 85 00 00 00	 push	 133			; 00000085H
  03ee2	68 61 05 00 00	 push	 1377			; 00000561H
  03ee7	68 00 00 00 00	 push	 OFFSET FLAT:$SG62539
  03eec	6a 61		 push	 97			; 00000061H
  03eee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03ef3	50		 push	 eax
  03ef4	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  03ef9	83 c4 18	 add	 esp, 24			; 00000018H
$L62538:

; 1378 : 
; 1379 : 	scroll = New PlaneScroll();

  03efc	6a 2c		 push	 44			; 0000002cH
  03efe	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  03f03	83 c4 04	 add	 esp, 4
  03f06	89 45 c4	 mov	 DWORD PTR $T62868[ebp], eax
  03f09	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  03f10	83 7d c4 00	 cmp	 DWORD PTR $T62868[ebp], 0
  03f14	74 0d		 je	 SHORT $L62869
  03f16	8b 4d c4	 mov	 ecx, DWORD PTR $T62868[ebp]
  03f19	e8 00 00 00 00	 call	 ??0PlaneScroll@@QAE@XZ	; PlaneScroll::PlaneScroll
  03f1e	89 45 a8	 mov	 DWORD PTR -88+[ebp], eax
  03f21	eb 07		 jmp	 SHORT $L62870
$L62869:
  03f23	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR -88+[ebp], 0
$L62870:
  03f2a	8b 4d a8	 mov	 ecx, DWORD PTR -88+[ebp]
  03f2d	89 4d c8	 mov	 DWORD PTR $T62867[ebp], ecx
  03f30	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03f37	8b 55 c8	 mov	 edx, DWORD PTR $T62867[ebp]
  03f3a	89 55 f0	 mov	 DWORD PTR _scroll$[ebp], edx

; 1380 : 	scroll->xStep = arg(2);

  03f3d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03f40	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  03f44	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  03f47	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1381 : 	scroll->yStep = arg(3);

  03f4a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03f4d	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  03f51	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  03f54	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1382 : 	scroll->newPic = arg(4);

  03f57	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03f5a	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  03f5e	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  03f61	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1383 : 	scroll->clock = timeMgr->GetTickCount();

  03f64	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  03f69	8b 10		 mov	 edx, DWORD PTR [eax]
  03f6b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  03f71	ff 52 04	 call	 DWORD PTR [edx+4]
  03f74	8b 4d f0	 mov	 ecx, DWORD PTR _scroll$[ebp]
  03f77	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 1384 : 	scroll->planeID = planeID;

  03f7a	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  03f7d	8b 45 d4	 mov	 eax, DWORD PTR _planeID$[ebp]
  03f80	89 02		 mov	 DWORD PTR [edx], eax

; 1385 : 	scroll->animate = arg(5);

  03f82	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03f85	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  03f89	8b 45 f0	 mov	 eax, DWORD PTR _scroll$[ebp]
  03f8c	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 1386 : 	if (argCount > 5)

  03f8f	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03f92	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  03f95	83 fa 05	 cmp	 edx, 5
  03f98	7e 0d		 jle	 SHORT $L62544

; 1387 : 		scroll->speed = arg(6);

  03f9a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03f9d	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  03fa1	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  03fa4	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
$L62544:

; 1388 : 
; 1389 : 	// Add the new pic just off the plane
; 1390 : 	scroll->yDim = 0;

  03fa7	8b 45 f0	 mov	 eax, DWORD PTR _scroll$[ebp]
  03faa	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1391 : 	scroll->xDim = 0;

  03fb1	8b 4d f0	 mov	 ecx, DWORD PTR _scroll$[ebp]
  03fb4	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 1392 : 
; 1393 : 	int index = graphMgr->VisibleScreen().Planes().Search(planeID);

  03fbb	8b 55 d4	 mov	 edx, DWORD PTR _planeID$[ebp]
  03fbe	52		 push	 edx
  03fbf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03fc4	8b 10		 mov	 edx, DWORD PTR [eax]
  03fc6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  03fcc	ff 52 44	 call	 DWORD PTR [edx+68]
  03fcf	8b c8		 mov	 ecx, eax
  03fd1	e8 00 00 00 00	 call	 ?Planes@Screen@@QAEAAVPlaneList@@XZ ; Screen::Planes
  03fd6	8b c8		 mov	 ecx, eax
  03fd8	e8 00 00 00 00	 call	 ?Search@PlaneList@@QBEHI@Z ; PlaneList::Search
  03fdd	89 45 d0	 mov	 DWORD PTR _index$[ebp], eax

; 1394 : 	if (index == -1)

  03fe0	83 7d d0 ff	 cmp	 DWORD PTR _index$[ebp], -1
  03fe4	75 21		 jne	 SHORT $L62546

; 1395 : 		msgMgr->Fatal(SrcLoc,Msg_PlaneNotFound,index);

  03fe6	8b 45 d0	 mov	 eax, DWORD PTR _index$[ebp]
  03fe9	50		 push	 eax
  03fea	6a 6b		 push	 107			; 0000006bH
  03fec	68 73 05 00 00	 push	 1395			; 00000573H
  03ff1	68 00 00 00 00	 push	 OFFSET FLAT:$SG62547
  03ff6	6a 61		 push	 97			; 00000061H
  03ff8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03ffe	51		 push	 ecx
  03fff	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  04004	83 c4 18	 add	 esp, 24			; 00000018H
$L62546:

; 1396 : 	SOL_Rect r = graphMgr->VisibleScreen().Planes()[index].GameRect();

  04007	8b 55 d0	 mov	 edx, DWORD PTR _index$[ebp]
  0400a	52		 push	 edx
  0400b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04010	8b 10		 mov	 edx, DWORD PTR [eax]
  04012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04018	ff 52 44	 call	 DWORD PTR [edx+68]
  0401b	8b c8		 mov	 ecx, eax
  0401d	e8 00 00 00 00	 call	 ?Planes@Screen@@QAEAAVPlaneList@@XZ ; Screen::Planes
  04022	8b c8		 mov	 ecx, eax
  04024	e8 00 00 00 00	 call	 ??APlaneList@@QAEAAVSOL_Plane@@H@Z ; PlaneList::operator[]
  04029	8b c8		 mov	 ecx, eax
  0402b	e8 00 00 00 00	 call	 ?GameRect@SOL_Plane@@QBEABVSOL_Rect@@XZ ; SOL_Plane::GameRect
  04030	50		 push	 eax
  04031	8d 4d e0	 lea	 ecx, DWORD PTR _r$[ebp]
  04034	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 1397 : 
; 1398 : 	SOL_Point pt;

  04039	8d 4d d8	 lea	 ecx, DWORD PTR _pt$[ebp]
  0403c	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 1399 : 	if (scroll->xStep) {

  04041	8b 45 f0	 mov	 eax, DWORD PTR _scroll$[ebp]
  04044	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  04048	74 51		 je	 SHORT $L62550

; 1400 :  		if (scroll->xStep > 0) {

  0404a	8b 4d f0	 mov	 ecx, DWORD PTR _scroll$[ebp]
  0404d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  04051	7e 26		 jle	 SHORT $L62551

; 1401 : 			pt.x = -r.Xlen();

  04053	8d 4d e0	 lea	 ecx, DWORD PTR _r$[ebp]
  04056	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  0405b	f7 d8		 neg	 eax
  0405d	89 45 d8	 mov	 DWORD PTR _pt$[ebp], eax

; 1402 : 			pt.y = 0;

  04060	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pt$[ebp+4], 0

; 1403 : 			scroll->xDim = -r.Xlen();

  04067	8d 4d e0	 lea	 ecx, DWORD PTR _r$[ebp]
  0406a	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  0406f	f7 d8		 neg	 eax
  04071	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  04074	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1405 : 		else {

  04077	eb 20		 jmp	 SHORT $L62552
$L62551:

; 1406 : 			pt.x = r.Xlen();

  04079	8d 4d e0	 lea	 ecx, DWORD PTR _r$[ebp]
  0407c	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  04081	89 45 d8	 mov	 DWORD PTR _pt$[ebp], eax

; 1407 : 			pt.y = 0;

  04084	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pt$[ebp+4], 0

; 1408 : 			scroll->xDim = r.Xlen();

  0408b	8d 4d e0	 lea	 ecx, DWORD PTR _r$[ebp]
  0408e	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  04093	8b 4d f0	 mov	 ecx, DWORD PTR _scroll$[ebp]
  04096	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L62552:

; 1411 : 	else {

  04099	eb 4f		 jmp	 SHORT $L62555
$L62550:

; 1412 :  		if (scroll->yStep > 0) {

  0409b	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  0409e	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  040a2	7e 26		 jle	 SHORT $L62554

; 1413 : 			pt.x = 0;

  040a4	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pt$[ebp], 0

; 1414 : 			pt.y = -r.Ylen();

  040ab	8d 4d e0	 lea	 ecx, DWORD PTR _r$[ebp]
  040ae	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  040b3	f7 d8		 neg	 eax
  040b5	89 45 dc	 mov	 DWORD PTR _pt$[ebp+4], eax

; 1415 : 			scroll->yDim = -r.Ylen();

  040b8	8d 4d e0	 lea	 ecx, DWORD PTR _r$[ebp]
  040bb	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  040c0	f7 d8		 neg	 eax
  040c2	8b 4d f0	 mov	 ecx, DWORD PTR _scroll$[ebp]
  040c5	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1417 : 		else {

  040c8	eb 20		 jmp	 SHORT $L62555
$L62554:

; 1418 : 			pt.x = 0;

  040ca	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pt$[ebp], 0

; 1419 : 			pt.y = r.Ylen();

  040d1	8d 4d e0	 lea	 ecx, DWORD PTR _r$[ebp]
  040d4	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  040d9	89 45 dc	 mov	 DWORD PTR _pt$[ebp+4], eax

; 1420 : 			scroll->yDim = r.Ylen();

  040dc	8d 4d e0	 lea	 ecx, DWORD PTR _r$[ebp]
  040df	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  040e4	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  040e7	89 42 10	 mov	 DWORD PTR [edx+16], eax
$L62555:

; 1423 : 
; 1424 : 	scroll->oldPic = graphMgr->AddPic(planeID,scroll->newPic,pt,arg(7));

  040ea	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  040ed	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  040f1	51		 push	 ecx
  040f2	8d 55 d8	 lea	 edx, DWORD PTR _pt$[ebp]
  040f5	52		 push	 edx
  040f6	8b 45 f0	 mov	 eax, DWORD PTR _scroll$[ebp]
  040f9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  040fc	51		 push	 ecx
  040fd	8b 55 d4	 mov	 edx, DWORD PTR _planeID$[ebp]
  04100	52		 push	 edx
  04101	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04107	e8 00 00 00 00	 call	 ?AddPic@GraphicsMgr@@QAEHJHAAVSOL_Point@@H@Z ; GraphicsMgr::AddPic
  0410c	8b 4d f0	 mov	 ecx, DWORD PTR _scroll$[ebp]
  0410f	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1425 : 
; 1426 : 	if (scroll->animate) {

  04112	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  04115	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  04119	74 17		 je	 SHORT $L62556

; 1427 : 		scroll->next = planeScrolls;

  0411b	8b 45 f0	 mov	 eax, DWORD PTR _scroll$[ebp]
  0411e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?planeScrolls@@3PAVPlaneScroll@@A ; planeScrolls
  04124	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1428 : 		planeScrolls = scroll;

  04127	8b 55 f0	 mov	 edx, DWORD PTR _scroll$[ebp]
  0412a	89 15 00 00 00
	00		 mov	 DWORD PTR ?planeScrolls@@3PAVPlaneScroll@@A, edx ; planeScrolls

; 1430 : 	else {

  04130	eb 61		 jmp	 SHORT $L62557
$L62556:

; 1431 : 		Bool done = False;

  04132	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _done$62558[ebp], 0
$L62560:

; 1432 : 		while (!done) {

  04139	83 7d cc 00	 cmp	 DWORD PTR _done$62558[ebp], 0
  0413d	75 42		 jne	 SHORT $L62561

; 1433 : 			done = ProcessScroll(scroll);

  0413f	8b 45 f0	 mov	 eax, DWORD PTR _scroll$[ebp]
  04142	50		 push	 eax
  04143	e8 00 00 00 00	 call	 ?ProcessScroll@@YAHPAVPlaneScroll@@@Z ; ProcessScroll
  04148	83 c4 04	 add	 esp, 4
  0414b	89 45 cc	 mov	 DWORD PTR _done$62558[ebp], eax

; 1434 : 			graphMgr->FrameOut();

  0414e	6a ff		 push	 -1
  04150	6a ff		 push	 -1
  04152	6a 00		 push	 0
  04154	6a 00		 push	 0
  04156	8d 4d b0	 lea	 ecx, DWORD PTR $T62872[ebp]
  04159	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  0415e	83 ec 10	 sub	 esp, 16			; 00000010H
  04161	8b cc		 mov	 ecx, esp
  04163	89 65 c0	 mov	 DWORD PTR $T62871[ebp], esp
  04166	50		 push	 eax
  04167	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  0416c	6a 01		 push	 1
  0416e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04174	8b 11		 mov	 edx, DWORD PTR [ecx]
  04176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0417c	ff 52 14	 call	 DWORD PTR [edx+20]

; 1435 : //			AsyncEventCheck();
; 1436 : 		}

  0417f	eb b8		 jmp	 SHORT $L62560
$L62561:

; 1437 : 		delete scroll;

  04181	8b 45 f0	 mov	 eax, DWORD PTR _scroll$[ebp]
  04184	89 45 ac	 mov	 DWORD PTR $T62873[ebp], eax
  04187	8b 4d ac	 mov	 ecx, DWORD PTR $T62873[ebp]
  0418a	51		 push	 ecx
  0418b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  04190	83 c4 04	 add	 esp, 4
$L62557:
$L62529:

; 1439 : }

  04193	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04196	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0419d	8b e5		 mov	 esp, ebp
  0419f	5d		 pop	 ebp
  041a0	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L62874:
  00015	8b 45 c4	 mov	 eax, DWORD PTR $T62868[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
  0001f	c3		 ret	 0
$L62877:
  00020	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T62876
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KSetScroll@@YAXPAF@Z ENDP				; KSetScroll
;	COMDAT ??0PlaneScroll@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0PlaneScroll@@QAE@XZ PROC NEAR			; PlaneScroll::PlaneScroll, COMDAT

; 21   : 	PlaneScroll()	{speed = 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0PlaneScroll@@QAE@XZ ENDP				; PlaneScroll::PlaneScroll
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Xlen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Xlen, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	return B.x - A.x + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	83 c0 01	 add	 eax, 1

; 155  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?Xlen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Xlen
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Ylen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Ylen, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 	return B.y - A.y + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	83 c0 01	 add	 eax, 1

; 163  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Ylen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Ylen
_TEXT	ENDS
EXTRN	?AddPic@Screen@@QAEHJHABVSOL_Point@@H@Z:NEAR	; Screen::AddPic
;	COMDAT ?AddPic@GraphicsMgr@@QAEHJHAAVSOL_Point@@H@Z
_TEXT	SEGMENT
_planeID$ = 8
_picNum$ = 12
_p$ = 16
_mirror$ = 20
_this$ = -4
?AddPic@GraphicsMgr@@QAEHJHAAVSOL_Point@@H@Z PROC NEAR	; GraphicsMgr::AddPic, COMDAT

; 62   : 					{return next.AddPic(planeID,picNum,p,mirror);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _mirror$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _p$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _picNum$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _planeID$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 14	 add	 ecx, 20			; 00000014H
  0001d	e8 00 00 00 00	 call	 ?AddPic@Screen@@QAEHJHABVSOL_Point@@H@Z ; Screen::AddPic
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 10 00	 ret	 16			; 00000010H
?AddPic@GraphicsMgr@@QAEHJHAAVSOL_Point@@H@Z ENDP	; GraphicsMgr::AddPic
_TEXT	ENDS
PUBLIC	?ProcessScrolls@@YAXXZ				; ProcessScrolls
_TEXT	SEGMENT
_lastScroll$ = -8
_scroll$ = -4
_done$62572 = -12
$T62884 = -16
$T62885 = -20
?ProcessScrolls@@YAXXZ PROC NEAR			; ProcessScrolls

; 1443 : {

  041a1	55		 push	 ebp
  041a2	8b ec		 mov	 ebp, esp
  041a4	83 ec 14	 sub	 esp, 20			; 00000014H

; 1444 : 	PlaneScroll* lastScroll = NULL;

  041a7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lastScroll$[ebp], 0

; 1445 : 	PlaneScroll* scroll = planeScrolls;

  041ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?planeScrolls@@3PAVPlaneScroll@@A ; planeScrolls
  041b3	89 45 fc	 mov	 DWORD PTR _scroll$[ebp], eax
$L62570:

; 1446 : 	while (scroll) {

  041b6	83 7d fc 00	 cmp	 DWORD PTR _scroll$[ebp], 0
  041ba	0f 84 81 00 00
	00		 je	 $L62571

; 1447 : 		Bool done = ProcessScroll(scroll);

  041c0	8b 4d fc	 mov	 ecx, DWORD PTR _scroll$[ebp]
  041c3	51		 push	 ecx
  041c4	e8 00 00 00 00	 call	 ?ProcessScroll@@YAHPAVPlaneScroll@@@Z ; ProcessScroll
  041c9	83 c4 04	 add	 esp, 4
  041cc	89 45 f4	 mov	 DWORD PTR _done$62572[ebp], eax

; 1448 : 		if (done) {

  041cf	83 7d f4 00	 cmp	 DWORD PTR _done$62572[ebp], 0
  041d3	74 58		 je	 SHORT $L62573

; 1449 : 			// Rechain styles
; 1450 : 			if (lastScroll) {

  041d5	83 7d f8 00	 cmp	 DWORD PTR _lastScroll$[ebp], 0
  041d9	74 29		 je	 SHORT $L62574

; 1451 : 				lastScroll->next = scroll->next;

  041db	8b 55 f8	 mov	 edx, DWORD PTR _lastScroll$[ebp]
  041de	8b 45 fc	 mov	 eax, DWORD PTR _scroll$[ebp]
  041e1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  041e4	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 1452 : 				delete scroll;

  041e7	8b 55 fc	 mov	 edx, DWORD PTR _scroll$[ebp]
  041ea	89 55 f0	 mov	 DWORD PTR $T62884[ebp], edx
  041ed	8b 45 f0	 mov	 eax, DWORD PTR $T62884[ebp]
  041f0	50		 push	 eax
  041f1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  041f6	83 c4 04	 add	 esp, 4

; 1453 : 				scroll = lastScroll->next;

  041f9	8b 4d f8	 mov	 ecx, DWORD PTR _lastScroll$[ebp]
  041fc	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  041ff	89 55 fc	 mov	 DWORD PTR _scroll$[ebp], edx

; 1455 : 			else {

  04202	eb 27		 jmp	 SHORT $L62576
$L62574:

; 1456 : 				planeScrolls = scroll->next;

  04204	8b 45 fc	 mov	 eax, DWORD PTR _scroll$[ebp]
  04207	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0420a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?planeScrolls@@3PAVPlaneScroll@@A, ecx ; planeScrolls

; 1457 : 				delete scroll;

  04210	8b 55 fc	 mov	 edx, DWORD PTR _scroll$[ebp]
  04213	89 55 ec	 mov	 DWORD PTR $T62885[ebp], edx
  04216	8b 45 ec	 mov	 eax, DWORD PTR $T62885[ebp]
  04219	50		 push	 eax
  0421a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0421f	83 c4 04	 add	 esp, 4

; 1458 : 				scroll = planeScrolls;

  04222	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?planeScrolls@@3PAVPlaneScroll@@A ; planeScrolls
  04228	89 4d fc	 mov	 DWORD PTR _scroll$[ebp], ecx
$L62576:

; 1461 : 		else {

  0422b	eb 0f		 jmp	 SHORT $L62578
$L62573:

; 1462 : 			lastScroll = scroll;

  0422d	8b 55 fc	 mov	 edx, DWORD PTR _scroll$[ebp]
  04230	89 55 f8	 mov	 DWORD PTR _lastScroll$[ebp], edx

; 1463 : 			scroll = scroll->next;

  04233	8b 45 fc	 mov	 eax, DWORD PTR _scroll$[ebp]
  04236	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  04239	89 4d fc	 mov	 DWORD PTR _scroll$[ebp], ecx
$L62578:

; 1465 : 	}

  0423c	e9 75 ff ff ff	 jmp	 $L62570
$L62571:

; 1466 : }

  04241	8b e5		 mov	 esp, ebp
  04243	5d		 pop	 ebp
  04244	c3		 ret	 0
?ProcessScrolls@@YAXXZ ENDP				; ProcessScrolls
_TEXT	ENDS
PUBLIC	?DeletePic@GraphicsMgr@@QAEXJHH@Z		; GraphicsMgr::DeletePic
PUBLIC	?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z	; GraphicsMgr::ScrollScreenItems
_TEXT	SEGMENT
_scroll$ = 8
_done$ = -12
_time$ = -4
_xStep$ = -16
_yStep$ = -8
?ProcessScroll@@YAHPAVPlaneScroll@@@Z PROC NEAR		; ProcessScroll

; 1470 : {

  04245	55		 push	 ebp
  04246	8b ec		 mov	 ebp, esp
  04248	83 ec 10	 sub	 esp, 16			; 00000010H

; 1471 : 	Bool done = False;

  0424b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _done$[ebp], 0

; 1472 : 	uint time = timeMgr->GetTickCount();

  04252	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  04257	8b 10		 mov	 edx, DWORD PTR [eax]
  04259	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0425f	ff 52 04	 call	 DWORD PTR [edx+4]
  04262	89 45 fc	 mov	 DWORD PTR _time$[ebp], eax

; 1473 : 	if (scroll->clock >= time)

  04265	8b 45 08	 mov	 eax, DWORD PTR _scroll$[ebp]
  04268	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0426b	3b 4d fc	 cmp	 ecx, DWORD PTR _time$[ebp]
  0426e	72 07		 jb	 SHORT $L62584

; 1474 : 		return False;

  04270	33 c0		 xor	 eax, eax
  04272	e9 c4 00 00 00	 jmp	 $L62581
$L62584:

; 1475 : 	int xStep = scroll->xStep;

  04277	8b 55 08	 mov	 edx, DWORD PTR _scroll$[ebp]
  0427a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0427d	89 45 f0	 mov	 DWORD PTR _xStep$[ebp], eax

; 1476 : 	int yStep = scroll->yStep;

  04280	8b 4d 08	 mov	 ecx, DWORD PTR _scroll$[ebp]
  04283	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  04286	89 55 f8	 mov	 DWORD PTR _yStep$[ebp], edx

; 1477 : 	if (((scroll->xDim + xStep)*scroll->xDim) <= 0)

  04289	8b 45 08	 mov	 eax, DWORD PTR _scroll$[ebp]
  0428c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0428f	03 4d f0	 add	 ecx, DWORD PTR _xStep$[ebp]
  04292	8b 55 08	 mov	 edx, DWORD PTR _scroll$[ebp]
  04295	0f af 4a 08	 imul	 ecx, DWORD PTR [edx+8]
  04299	85 c9		 test	 ecx, ecx
  0429b	7f 0b		 jg	 SHORT $L62587

; 1478 : 		xStep = - scroll->xDim;

  0429d	8b 45 08	 mov	 eax, DWORD PTR _scroll$[ebp]
  042a0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  042a3	f7 d9		 neg	 ecx
  042a5	89 4d f0	 mov	 DWORD PTR _xStep$[ebp], ecx
$L62587:

; 1479 : 	if (((scroll->yDim + yStep)*scroll->yDim) <= 0)

  042a8	8b 55 08	 mov	 edx, DWORD PTR _scroll$[ebp]
  042ab	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  042ae	03 45 f8	 add	 eax, DWORD PTR _yStep$[ebp]
  042b1	8b 4d 08	 mov	 ecx, DWORD PTR _scroll$[ebp]
  042b4	0f af 41 10	 imul	 eax, DWORD PTR [ecx+16]
  042b8	85 c0		 test	 eax, eax
  042ba	7f 0b		 jg	 SHORT $L62588

; 1480 : 		yStep = - scroll->yDim;

  042bc	8b 55 08	 mov	 edx, DWORD PTR _scroll$[ebp]
  042bf	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  042c2	f7 d8		 neg	 eax
  042c4	89 45 f8	 mov	 DWORD PTR _yStep$[ebp], eax
$L62588:

; 1481 : 	scroll->xDim += xStep;

  042c7	8b 4d 08	 mov	 ecx, DWORD PTR _scroll$[ebp]
  042ca	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  042cd	03 55 f0	 add	 edx, DWORD PTR _xStep$[ebp]
  042d0	8b 45 08	 mov	 eax, DWORD PTR _scroll$[ebp]
  042d3	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1482 : 	scroll->yDim += yStep;

  042d6	8b 4d 08	 mov	 ecx, DWORD PTR _scroll$[ebp]
  042d9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  042dc	03 55 f8	 add	 edx, DWORD PTR _yStep$[ebp]
  042df	8b 45 08	 mov	 eax, DWORD PTR _scroll$[ebp]
  042e2	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 1483 : 	if ((scroll->xDim == 0) && (scroll->yDim == 0)) {

  042e5	8b 4d 08	 mov	 ecx, DWORD PTR _scroll$[ebp]
  042e8	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  042ec	75 2f		 jne	 SHORT $L62589
  042ee	8b 55 08	 mov	 edx, DWORD PTR _scroll$[ebp]
  042f1	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  042f5	75 26		 jne	 SHORT $L62589

; 1484 : 		// At the end of the scroll
; 1485 : 		graphMgr->DeletePic(scroll->planeID,scroll->oldPic,scroll->newPic);

  042f7	8b 45 08	 mov	 eax, DWORD PTR _scroll$[ebp]
  042fa	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  042fd	51		 push	 ecx
  042fe	8b 55 08	 mov	 edx, DWORD PTR _scroll$[ebp]
  04301	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  04304	50		 push	 eax
  04305	8b 4d 08	 mov	 ecx, DWORD PTR _scroll$[ebp]
  04308	8b 11		 mov	 edx, DWORD PTR [ecx]
  0430a	52		 push	 edx
  0430b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04311	e8 00 00 00 00	 call	 ?DeletePic@GraphicsMgr@@QAEXJHH@Z ; GraphicsMgr::DeletePic

; 1486 : 		done = True;

  04316	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _done$[ebp], 1
$L62589:

; 1488 : 	graphMgr->ScrollScreenItems(scroll->planeID,xStep,yStep);

  0431d	6a 01		 push	 1
  0431f	8b 45 f8	 mov	 eax, DWORD PTR _yStep$[ebp]
  04322	50		 push	 eax
  04323	8b 4d f0	 mov	 ecx, DWORD PTR _xStep$[ebp]
  04326	51		 push	 ecx
  04327	8b 55 08	 mov	 edx, DWORD PTR _scroll$[ebp]
  0432a	8b 02		 mov	 eax, DWORD PTR [edx]
  0432c	50		 push	 eax
  0432d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04333	e8 00 00 00 00	 call	 ?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z ; GraphicsMgr::ScrollScreenItems

; 1489 : 	
; 1490 : 	return done;

  04338	8b 45 f4	 mov	 eax, DWORD PTR _done$[ebp]
$L62581:

; 1491 : }

  0433b	8b e5		 mov	 esp, ebp
  0433d	5d		 pop	 ebp
  0433e	c3		 ret	 0
?ProcessScroll@@YAHPAVPlaneScroll@@@Z ENDP		; ProcessScroll
_TEXT	ENDS
EXTRN	?DeletePic@Screen@@QAEXJHH@Z:NEAR		; Screen::DeletePic
;	COMDAT ?DeletePic@GraphicsMgr@@QAEXJHH@Z
_TEXT	SEGMENT
_planeID$ = 8
_oldPic$ = 12
_newPic$ = 16
_this$ = -4
?DeletePic@GraphicsMgr@@QAEXJHH@Z PROC NEAR		; GraphicsMgr::DeletePic, COMDAT

; 66   : 					{next.DeletePic(planeID, oldPic, newPic);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _newPic$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _oldPic$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _planeID$[ebp]
  00012	52		 push	 edx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 14	 add	 ecx, 20			; 00000014H
  00019	e8 00 00 00 00	 call	 ?DeletePic@Screen@@QAEXJHH@Z ; Screen::DeletePic
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 0c 00	 ret	 12			; 0000000cH
?DeletePic@GraphicsMgr@@QAEXJHH@Z ENDP			; GraphicsMgr::DeletePic
_TEXT	ENDS
EXTRN	?ScrollScreenItems@Screen@@QAEXJHHH@Z:NEAR	; Screen::ScrollScreenItems
;	COMDAT ?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z
_TEXT	SEGMENT
_planeID$ = 8
_xStep$ = 12
_yStep$ = 16
_movePic$ = 20
_this$ = -4
?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z PROC NEAR	; GraphicsMgr::ScrollScreenItems, COMDAT

; 79   : 					{next.ScrollScreenItems(planeID,xStep,yStep,movePic);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _movePic$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _yStep$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _xStep$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _planeID$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 14	 add	 ecx, 20			; 00000014H
  0001d	e8 00 00 00 00	 call	 ?ScrollScreenItems@Screen@@QAEXJHHH@Z ; Screen::ScrollScreenItems
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 10 00	 ret	 16			; 00000010H
?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z ENDP		; GraphicsMgr::ScrollScreenItems
_TEXT	ENDS
_TEXT	SEGMENT
_style$ = 8
_lastStyle$ = -8
_search$ = -4
$T62890 = -12
$T62891 = -16
$T62892 = -20
$T62893 = -24
?ShutDownStyle@@YAPAVPlaneShowStyle@@PAV1@@Z PROC NEAR	; ShutDownStyle

; 1505 : {

  0433f	55		 push	 ebp
  04340	8b ec		 mov	 ebp, esp
  04342	83 ec 18	 sub	 esp, 24			; 00000018H

; 1506 : 	// Rechain styles
; 1507 : 	PlaneShowStyle* lastStyle = NULL;

  04345	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lastStyle$[ebp], 0

; 1508 : 	PlaneShowStyle* search = showStyles;

  0434c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A ; showStyles
  04351	89 45 fc	 mov	 DWORD PTR _search$[ebp], eax
$L62596:

; 1509 : 	while (search) {

  04354	83 7d fc 00	 cmp	 DWORD PTR _search$[ebp], 0
  04358	74 1b		 je	 SHORT $L62597

; 1510 : 		if (search == style) break;

  0435a	8b 4d fc	 mov	 ecx, DWORD PTR _search$[ebp]
  0435d	3b 4d 08	 cmp	 ecx, DWORD PTR _style$[ebp]
  04360	75 02		 jne	 SHORT $L62598
  04362	eb 11		 jmp	 SHORT $L62597
$L62598:

; 1511 : 		lastStyle = search;

  04364	8b 55 fc	 mov	 edx, DWORD PTR _search$[ebp]
  04367	89 55 f8	 mov	 DWORD PTR _lastStyle$[ebp], edx

; 1512 : 		search = search->next;

  0436a	8b 45 fc	 mov	 eax, DWORD PTR _search$[ebp]
  0436d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04370	89 4d fc	 mov	 DWORD PTR _search$[ebp], ecx

; 1513 : 	}

  04373	eb df		 jmp	 SHORT $L62596
$L62597:

; 1514 : 
; 1515 : 	if (lastStyle) {

  04375	83 7d f8 00	 cmp	 DWORD PTR _lastStyle$[ebp], 0
  04379	74 47		 je	 SHORT $L62599

; 1516 : 		lastStyle->next = style->next;

  0437b	8b 55 f8	 mov	 edx, DWORD PTR _lastStyle$[ebp]
  0437e	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  04381	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04384	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 1517 : 		if (style->XRangeArray != NULL)

  04387	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  0438a	83 7a 28 00	 cmp	 DWORD PTR [edx+40], 0
  0438e	74 15		 je	 SHORT $L62600

; 1518 : 			delete style->XRangeArray;

  04390	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  04393	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  04396	89 4d f4	 mov	 DWORD PTR $T62890[ebp], ecx
  04399	8b 55 f4	 mov	 edx, DWORD PTR $T62890[ebp]
  0439c	52		 push	 edx
  0439d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  043a2	83 c4 04	 add	 esp, 4
$L62600:

; 1519 : 		delete style;

  043a5	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  043a8	89 45 f0	 mov	 DWORD PTR $T62891[ebp], eax
  043ab	8b 4d f0	 mov	 ecx, DWORD PTR $T62891[ebp]
  043ae	51		 push	 ecx
  043af	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  043b4	83 c4 04	 add	 esp, 4

; 1520 : 		style = lastStyle->next;

  043b7	8b 55 f8	 mov	 edx, DWORD PTR _lastStyle$[ebp]
  043ba	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  043bd	89 45 08	 mov	 DWORD PTR _style$[ebp], eax

; 1522 : 	else {

  043c0	eb 44		 jmp	 SHORT $L62603
$L62599:

; 1523 : 		showStyles = style->next;

  043c2	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  043c5	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  043c8	89 15 00 00 00
	00		 mov	 DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A, edx ; showStyles

; 1524 : 		if (style->XRangeArray != NULL)

  043ce	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  043d1	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  043d5	74 15		 je	 SHORT $L62604

; 1525 : 			delete style->XRangeArray;

  043d7	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  043da	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  043dd	89 55 ec	 mov	 DWORD PTR $T62892[ebp], edx
  043e0	8b 45 ec	 mov	 eax, DWORD PTR $T62892[ebp]
  043e3	50		 push	 eax
  043e4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  043e9	83 c4 04	 add	 esp, 4
$L62604:

; 1526 : 		delete style;

  043ec	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  043ef	89 4d e8	 mov	 DWORD PTR $T62893[ebp], ecx
  043f2	8b 55 e8	 mov	 edx, DWORD PTR $T62893[ebp]
  043f5	52		 push	 edx
  043f6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  043fb	83 c4 04	 add	 esp, 4

; 1527 : 		style = showStyles;

  043fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A ; showStyles
  04403	89 45 08	 mov	 DWORD PTR _style$[ebp], eax
$L62603:

; 1529 : 	return style;

  04406	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]

; 1530 : }

  04409	8b e5		 mov	 esp, ebp
  0440b	5d		 pop	 ebp
  0440c	c3		 ret	 0
?ShutDownStyle@@YAPAVPlaneShowStyle@@PAV1@@Z ENDP	; ShutDownStyle
_style$ = 8
_lastStyle$ = -8
_search$ = -4
$T62895 = -12
$T62896 = -16
$T62897 = -20
$T62898 = -24
?KillStyle@@YAXPAVPlaneShowStyle@@@Z PROC NEAR		; KillStyle

; 1535 : {

  0440d	55		 push	 ebp
  0440e	8b ec		 mov	 ebp, esp
  04410	83 ec 18	 sub	 esp, 24			; 00000018H

; 1536 : 	// Rechain styles
; 1537 : 	PlaneShowStyle* lastStyle = NULL;

  04413	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lastStyle$[ebp], 0

; 1538 : 	PlaneShowStyle* search = showStyles;

  0441a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A ; showStyles
  0441f	89 45 fc	 mov	 DWORD PTR _search$[ebp], eax
$L62613:

; 1539 : 	while (search) {

  04422	83 7d fc 00	 cmp	 DWORD PTR _search$[ebp], 0
  04426	74 1b		 je	 SHORT $L62614

; 1540 : 		if (search == style) break;

  04428	8b 4d fc	 mov	 ecx, DWORD PTR _search$[ebp]
  0442b	3b 4d 08	 cmp	 ecx, DWORD PTR _style$[ebp]
  0442e	75 02		 jne	 SHORT $L62615
  04430	eb 11		 jmp	 SHORT $L62614
$L62615:

; 1541 : 		lastStyle = search;

  04432	8b 55 fc	 mov	 edx, DWORD PTR _search$[ebp]
  04435	89 55 f8	 mov	 DWORD PTR _lastStyle$[ebp], edx

; 1542 : 		search = search->next;

  04438	8b 45 fc	 mov	 eax, DWORD PTR _search$[ebp]
  0443b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0443e	89 4d fc	 mov	 DWORD PTR _search$[ebp], ecx

; 1543 : 	}

  04441	eb df		 jmp	 SHORT $L62613
$L62614:

; 1544 : 
; 1545 : 	if (lastStyle) {

  04443	83 7d f8 00	 cmp	 DWORD PTR _lastStyle$[ebp], 0
  04447	74 47		 je	 SHORT $L62616

; 1546 : 		lastStyle->next = style->next;

  04449	8b 55 f8	 mov	 edx, DWORD PTR _lastStyle$[ebp]
  0444c	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  0444f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  04452	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 1547 : 		if (style->XRangeArray != NULL)

  04455	8b 55 08	 mov	 edx, DWORD PTR _style$[ebp]
  04458	83 7a 28 00	 cmp	 DWORD PTR [edx+40], 0
  0445c	74 15		 je	 SHORT $L62617

; 1548 : 			delete style->XRangeArray;

  0445e	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  04461	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  04464	89 4d f4	 mov	 DWORD PTR $T62895[ebp], ecx
  04467	8b 55 f4	 mov	 edx, DWORD PTR $T62895[ebp]
  0446a	52		 push	 edx
  0446b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  04470	83 c4 04	 add	 esp, 4
$L62617:

; 1549 : 		delete style;

  04473	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  04476	89 45 f0	 mov	 DWORD PTR $T62896[ebp], eax
  04479	8b 4d f0	 mov	 ecx, DWORD PTR $T62896[ebp]
  0447c	51		 push	 ecx
  0447d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  04482	83 c4 04	 add	 esp, 4

; 1550 : 		style = lastStyle->next;

  04485	8b 55 f8	 mov	 edx, DWORD PTR _lastStyle$[ebp]
  04488	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0448b	89 45 08	 mov	 DWORD PTR _style$[ebp], eax

; 1552 : 	else {

  0448e	eb 44		 jmp	 SHORT $L62620
$L62616:

; 1553 : 		showStyles = style->next;

  04490	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  04493	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  04496	89 15 00 00 00
	00		 mov	 DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A, edx ; showStyles

; 1554 : 		if (style->XRangeArray != NULL)

  0449c	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  0449f	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  044a3	74 15		 je	 SHORT $L62621

; 1555 : 			delete style->XRangeArray;

  044a5	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  044a8	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  044ab	89 55 ec	 mov	 DWORD PTR $T62897[ebp], edx
  044ae	8b 45 ec	 mov	 eax, DWORD PTR $T62897[ebp]
  044b1	50		 push	 eax
  044b2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  044b7	83 c4 04	 add	 esp, 4
$L62621:

; 1556 : 		delete style;

  044ba	8b 4d 08	 mov	 ecx, DWORD PTR _style$[ebp]
  044bd	89 4d e8	 mov	 DWORD PTR $T62898[ebp], ecx
  044c0	8b 55 e8	 mov	 edx, DWORD PTR $T62898[ebp]
  044c3	52		 push	 edx
  044c4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  044c9	83 c4 04	 add	 esp, 4

; 1557 : 		style = showStyles;

  044cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A ; showStyles
  044d1	89 45 08	 mov	 DWORD PTR _style$[ebp], eax
$L62620:

; 1559 : }

  044d4	8b e5		 mov	 esp, ebp
  044d6	5d		 pop	 ebp
  044d7	c3		 ret	 0
?KillStyle@@YAXPAVPlaneShowStyle@@@Z ENDP		; KillStyle
_style$ = 8
?Plain@@YAHPAVPlaneShowStyle@@@Z PROC NEAR		; Plain

; 1563 : {

  044d8	55		 push	 ebp
  044d9	8b ec		 mov	 ebp, esp
  044db	83 ec 08	 sub	 esp, 8

; 1564 : 	if (style->entry) {

  044de	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  044e1	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  044e5	74 2a		 je	 SHORT $L62627

; 1565 : 		graphMgr->GPalette().SetFade(100);

  044e7	68 ff 00 00 00	 push	 255			; 000000ffH
  044ec	6a 00		 push	 0
  044ee	6a 64		 push	 100			; 00000064H
  044f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  044f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  044f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  044fe	ff 52 1c	 call	 DWORD PTR [edx+28]
  04501	89 45 fc	 mov	 DWORD PTR -4+[ebp], eax
  04504	8b 45 fc	 mov	 eax, DWORD PTR -4+[ebp]
  04507	8b 10		 mov	 edx, DWORD PTR [eax]
  04509	8b 4d fc	 mov	 ecx, DWORD PTR -4+[ebp]
  0450c	ff 52 70	 call	 DWORD PTR [edx+112]

; 1567 : 	else {

  0450f	eb 27		 jmp	 SHORT $L62628
$L62627:

; 1568 : 		graphMgr->GPalette().SetFade(0);

  04511	68 ff 00 00 00	 push	 255			; 000000ffH
  04516	6a 00		 push	 0
  04518	6a 00		 push	 0
  0451a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0451f	8b 10		 mov	 edx, DWORD PTR [eax]
  04521	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04527	ff 52 1c	 call	 DWORD PTR [edx+28]
  0452a	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  0452d	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  04530	8b 10		 mov	 edx, DWORD PTR [eax]
  04532	8b 4d f8	 mov	 ecx, DWORD PTR -8+[ebp]
  04535	ff 52 70	 call	 DWORD PTR [edx+112]
$L62628:

; 1570 : 	style->deleteMe = True;

  04538	8b 45 08	 mov	 eax, DWORD PTR _style$[ebp]
  0453b	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 1571 : 	return True;

  04542	b8 01 00 00 00	 mov	 eax, 1

; 1572 : }

  04547	8b e5		 mov	 esp, ebp
  04549	5d		 pop	 ebp
  0454a	c3		 ret	 0
?Plain@@YAHPAVPlaneShowStyle@@@Z ENDP			; Plain
_direction$ = 8
_style$ = 12
_noChange$ = -8
_percent$ = -4
_i$62640 = -12
?Fade@@YAHHPAVPlaneShowStyle@@@Z PROC NEAR		; Fade

; 1576 : {

  0454b	55		 push	 ebp
  0454c	8b ec		 mov	 ebp, esp
  0454e	83 ec 14	 sub	 esp, 20			; 00000014H

; 1577 : 	Bool noChange = True;

  04551	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _noChange$[ebp], 1

; 1578 : 	uint percent;
; 1579 : 
; 1580 : 	if (style->percent < style->divisions) {

  04558	8b 45 0c	 mov	 eax, DWORD PTR _style$[ebp]
  0455b	8b 4d 0c	 mov	 ecx, DWORD PTR _style$[ebp]
  0455e	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  04561	3b 51 20	 cmp	 edx, DWORD PTR [ecx+32]
  04564	0f 83 ff 00 00
	00		 jae	 $L62635

; 1581 : 		// calculate the starting percent
; 1582 : 		if (direction > 0)

  0456a	83 7d 08 00	 cmp	 DWORD PTR _direction$[ebp], 0
  0456e	7e 0b		 jle	 SHORT $L62636

; 1583 : 			percent = style->percent;

  04570	8b 45 0c	 mov	 eax, DWORD PTR _style$[ebp]
  04573	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  04576	89 4d fc	 mov	 DWORD PTR _percent$[ebp], ecx

; 1584 : 		else

  04579	eb 12		 jmp	 SHORT $L62637
$L62636:

; 1585 : 			percent = style->divisions - style->percent - 1;

  0457b	8b 55 0c	 mov	 edx, DWORD PTR _style$[ebp]
  0457e	8b 45 0c	 mov	 eax, DWORD PTR _style$[ebp]
  04581	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  04584	2b 48 1c	 sub	 ecx, DWORD PTR [eax+28]
  04587	83 e9 01	 sub	 ecx, 1
  0458a	89 4d fc	 mov	 DWORD PTR _percent$[ebp], ecx
$L62637:

; 1586 : 
; 1587 : 		if (style->XRangeSize == 0)

  0458d	8b 55 0c	 mov	 edx, DWORD PTR _style$[ebp]
  04590	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  04594	75 3c		 jne	 SHORT $L62638

; 1588 : 			graphMgr->GPalette().SetFade(percent*100/(style->divisions-1));

  04596	68 ff 00 00 00	 push	 255			; 000000ffH
  0459b	6a 00		 push	 0
  0459d	8b 45 fc	 mov	 eax, DWORD PTR _percent$[ebp]
  045a0	6b c0 64	 imul	 eax, 100		; 00000064H
  045a3	8b 4d 0c	 mov	 ecx, DWORD PTR _style$[ebp]
  045a6	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  045a9	83 e9 01	 sub	 ecx, 1
  045ac	33 d2		 xor	 edx, edx
  045ae	f7 f1		 div	 ecx
  045b0	50		 push	 eax
  045b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  045b7	8b 02		 mov	 eax, DWORD PTR [edx]
  045b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  045bf	ff 50 1c	 call	 DWORD PTR [eax+28]
  045c2	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
  045c5	8b 4d f0	 mov	 ecx, DWORD PTR -16+[ebp]
  045c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  045ca	8b 4d f0	 mov	 ecx, DWORD PTR -16+[ebp]
  045cd	ff 52 70	 call	 DWORD PTR [edx+112]

; 1589 : 
; 1590 : 		else {

  045d0	eb 6f		 jmp	 SHORT $L62643
$L62638:

; 1591 : 			for(int i=0;i<style->XRangeSize;i+=2) {

  045d2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$62640[ebp], 0
  045d9	eb 09		 jmp	 SHORT $L62641
$L62642:
  045db	8b 45 f4	 mov	 eax, DWORD PTR _i$62640[ebp]
  045de	83 c0 02	 add	 eax, 2
  045e1	89 45 f4	 mov	 DWORD PTR _i$62640[ebp], eax
$L62641:
  045e4	8b 4d 0c	 mov	 ecx, DWORD PTR _style$[ebp]
  045e7	8b 55 f4	 mov	 edx, DWORD PTR _i$62640[ebp]
  045ea	3b 51 24	 cmp	 edx, DWORD PTR [ecx+36]
  045ed	7d 52		 jge	 SHORT $L62643

; 1592 : 				graphMgr->GPalette().SetFade(percent*100/(style->divisions-1),style->XRangeArray[i],style->XRangeArray[i+1]);

  045ef	8b 45 0c	 mov	 eax, DWORD PTR _style$[ebp]
  045f2	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  045f5	8b 55 f4	 mov	 edx, DWORD PTR _i$62640[ebp]
  045f8	0f bf 44 51 02	 movsx	 eax, WORD PTR [ecx+edx*2+2]
  045fd	50		 push	 eax
  045fe	8b 4d 0c	 mov	 ecx, DWORD PTR _style$[ebp]
  04601	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  04604	8b 45 f4	 mov	 eax, DWORD PTR _i$62640[ebp]
  04607	0f bf 0c 42	 movsx	 ecx, WORD PTR [edx+eax*2]
  0460b	51		 push	 ecx
  0460c	8b 45 fc	 mov	 eax, DWORD PTR _percent$[ebp]
  0460f	6b c0 64	 imul	 eax, 100		; 00000064H
  04612	8b 55 0c	 mov	 edx, DWORD PTR _style$[ebp]
  04615	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  04618	83 e9 01	 sub	 ecx, 1
  0461b	33 d2		 xor	 edx, edx
  0461d	f7 f1		 div	 ecx
  0461f	50		 push	 eax
  04620	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04626	8b 02		 mov	 eax, DWORD PTR [edx]
  04628	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0462e	ff 50 1c	 call	 DWORD PTR [eax+28]
  04631	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  04634	8b 4d ec	 mov	 ecx, DWORD PTR -20+[ebp]
  04637	8b 11		 mov	 edx, DWORD PTR [ecx]
  04639	8b 4d ec	 mov	 ecx, DWORD PTR -20+[ebp]
  0463c	ff 52 70	 call	 DWORD PTR [edx+112]

; 1593 : 			}

  0463f	eb 9a		 jmp	 SHORT $L62642
$L62643:

; 1595 : 
; 1596 : 		style->clock += style->speed;

  04641	8b 45 0c	 mov	 eax, DWORD PTR _style$[ebp]
  04644	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  04647	8b 55 0c	 mov	 edx, DWORD PTR _style$[ebp]
  0464a	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  0464d	8b 45 0c	 mov	 eax, DWORD PTR _style$[ebp]
  04650	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1597 : 		style->percent++;

  04653	8b 4d 0c	 mov	 ecx, DWORD PTR _style$[ebp]
  04656	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  04659	83 c2 01	 add	 edx, 1
  0465c	8b 45 0c	 mov	 eax, DWORD PTR _style$[ebp]
  0465f	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 1598 : 		noChange	= False;

  04662	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _noChange$[ebp], 0
$L62635:

; 1600 : 	if ((style->percent >= style->divisions) && noChange)	{

  04669	8b 4d 0c	 mov	 ecx, DWORD PTR _style$[ebp]
  0466c	8b 55 0c	 mov	 edx, DWORD PTR _style$[ebp]
  0466f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  04672	3b 42 20	 cmp	 eax, DWORD PTR [edx+32]
  04675	72 1d		 jb	 SHORT $L62644
  04677	83 7d f8 00	 cmp	 DWORD PTR _noChange$[ebp], 0
  0467b	74 17		 je	 SHORT $L62644

; 1601 : 		if (direction > 0) style->deleteMe = True;

  0467d	83 7d 08 00	 cmp	 DWORD PTR _direction$[ebp], 0
  04681	7e 0a		 jle	 SHORT $L62645
  04683	8b 4d 0c	 mov	 ecx, DWORD PTR _style$[ebp]
  04686	c7 41 38 01 00
	00 00		 mov	 DWORD PTR [ecx+56], 1
$L62645:

; 1602 : 		return True;

  0468d	b8 01 00 00 00	 mov	 eax, 1
  04692	eb 02		 jmp	 SHORT $L62646
$L62644:

; 1605 : 		return False;

  04694	33 c0		 xor	 eax, eax
$L62646:

; 1606 : }

  04696	8b e5		 mov	 esp, ebp
  04698	5d		 pop	 ebp
  04699	c3		 ret	 0
?Fade@@YAHHPAVPlaneShowStyle@@@Z ENDP			; Fade
_TEXT	ENDS
END

	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\PMachine.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@FakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@SendStack@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Hide@SendStack@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Pop@SendStack@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PushObject@SendStack@@UAEXVObjectID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PushSelector@SendStack@@UAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Show@SendStack@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Toggle@SendStack@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Top@SendStack@@UAEPAUEntry@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PMachine@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SendStack@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	__descPtrTable
PUBLIC	?_descTablePtr@@3PAXA				; _descTablePtr
PUBLIC	?OP_bnot@@YAXXZ					; OP_bnot
PUBLIC	?OP_add@@YAXXZ					; OP_add
PUBLIC	?OP_sub@@YAXXZ					; OP_sub
PUBLIC	?OP_mul@@YAXXZ					; OP_mul
PUBLIC	?OP_div@@YAXXZ					; OP_div
PUBLIC	?OP_mod@@YAXXZ					; OP_mod
PUBLIC	?OP_shr@@YAXXZ					; OP_shr
PUBLIC	?OP_shl@@YAXXZ					; OP_shl
PUBLIC	?OP_xor@@YAXXZ					; OP_xor
PUBLIC	?OP_and@@YAXXZ					; OP_and
PUBLIC	?OP_or@@YAXXZ					; OP_or
PUBLIC	?OP_neg@@YAXXZ					; OP_neg
PUBLIC	?OP_not@@YAXXZ					; OP_not
PUBLIC	?OP_eq@@YAXXZ					; OP_eq
PUBLIC	?OP_ne@@YAXXZ					; OP_ne
PUBLIC	?OP_gt@@YAXXZ					; OP_gt
PUBLIC	?OP_ge@@YAXXZ					; OP_ge
PUBLIC	?OP_lt@@YAXXZ					; OP_lt
PUBLIC	?OP_le@@YAXXZ					; OP_le
PUBLIC	?OP_ugt@@YAXXZ					; OP_ugt
PUBLIC	?OP_uge@@YAXXZ					; OP_uge
PUBLIC	?OP_ult@@YAXXZ					; OP_ult
PUBLIC	?OP_ule@@YAXXZ					; OP_ule
PUBLIC	?OP_bt_byte@@YAXXZ				; OP_bt_byte
PUBLIC	?OP_bt_word@@YAXXZ				; OP_bt_word
PUBLIC	?OP_bnt_byte@@YAXXZ				; OP_bnt_byte
PUBLIC	?OP_bnt_word@@YAXXZ				; OP_bnt_word
PUBLIC	?OP_jmp_byte@@YAXXZ				; OP_jmp_byte
PUBLIC	?OP_jmp_word@@YAXXZ				; OP_jmp_word
PUBLIC	?OP_loadi_byte@@YAXXZ				; OP_loadi_byte
PUBLIC	?OP_loadi_word@@YAXXZ				; OP_loadi_word
PUBLIC	?OP_push@@YAXXZ					; OP_push
PUBLIC	?OP_pushi_byte@@YAXXZ				; OP_pushi_byte
PUBLIC	?OP_pushi_word@@YAXXZ				; OP_pushi_word
PUBLIC	?OP_toss@@YAXXZ					; OP_toss
PUBLIC	?OP_dup@@YAXXZ					; OP_dup
PUBLIC	?OP_link_byte@@YAXXZ				; OP_link_byte
PUBLIC	?OP_link_word@@YAXXZ				; OP_link_word
PUBLIC	?OP_call_byte@@YAXXZ				; OP_call_byte
PUBLIC	?OP_call_word@@YAXXZ				; OP_call_word
PUBLIC	?OP_callk_byte@@YAXXZ				; OP_callk_byte
PUBLIC	?OP_callk_word@@YAXXZ				; OP_callk_word
PUBLIC	?OP_callb_byte@@YAXXZ				; OP_callb_byte
PUBLIC	?OP_callb_word@@YAXXZ				; OP_callb_word
PUBLIC	?OP_calle_byte@@YAXXZ				; OP_calle_byte
PUBLIC	?OP_calle_word@@YAXXZ				; OP_calle_word
PUBLIC	?OP_ret@@YAXXZ					; OP_ret
PUBLIC	?OP_send_byte@@YAXXZ				; OP_send_byte
PUBLIC	?OP_class_byte@@YAXXZ				; OP_class_byte
PUBLIC	?OP_class_word@@YAXXZ				; OP_class_word
PUBLIC	?OP_self@@YAXXZ					; OP_self
PUBLIC	?OP_super_byte@@YAXXZ				; OP_super_byte
PUBLIC	?OP_super_word@@YAXXZ				; OP_super_word
PUBLIC	?OP_rest_byte@@YAXXZ				; OP_rest_byte
PUBLIC	?OP_lea_byte@@YAXXZ				; OP_lea_byte
PUBLIC	?OP_lea_word@@YAXXZ				; OP_lea_word
PUBLIC	?OP_selfID@@YAXXZ				; OP_selfID
PUBLIC	?OP_pprev@@YAXXZ				; OP_pprev
PUBLIC	?OP_pToa_byte@@YAXXZ				; OP_pToa_byte
PUBLIC	?OP_pToa_word@@YAXXZ				; OP_pToa_word
PUBLIC	?OP_aTop_byte@@YAXXZ				; OP_aTop_byte
PUBLIC	?OP_aTop_word@@YAXXZ				; OP_aTop_word
PUBLIC	?OP_pTos_byte@@YAXXZ				; OP_pTos_byte
PUBLIC	?OP_pTos_word@@YAXXZ				; OP_pTos_word
PUBLIC	?OP_sTop_byte@@YAXXZ				; OP_sTop_byte
PUBLIC	?OP_sTop_word@@YAXXZ				; OP_sTop_word
PUBLIC	?OP_ipToa_byte@@YAXXZ				; OP_ipToa_byte
PUBLIC	?OP_ipToa_word@@YAXXZ				; OP_ipToa_word
PUBLIC	?OP_dpToa_byte@@YAXXZ				; OP_dpToa_byte
PUBLIC	?OP_dpToa_word@@YAXXZ				; OP_dpToa_word
PUBLIC	?OP_ipTos_byte@@YAXXZ				; OP_ipTos_byte
PUBLIC	?OP_ipTos_word@@YAXXZ				; OP_ipTos_word
PUBLIC	?OP_dpTos_byte@@YAXXZ				; OP_dpTos_byte
PUBLIC	?OP_dpTos_word@@YAXXZ				; OP_dpTos_word
PUBLIC	?OP_lofsa@@YAXXZ				; OP_lofsa
PUBLIC	?OP_lofss@@YAXXZ				; OP_lofss
PUBLIC	?OP_push0@@YAXXZ				; OP_push0
PUBLIC	?OP_push1@@YAXXZ				; OP_push1
PUBLIC	?OP_push2@@YAXXZ				; OP_push2
PUBLIC	?OP_pushSelf@@YAXXZ				; OP_pushSelf
PUBLIC	?OP_lag_byte@@YAXXZ				; OP_lag_byte
PUBLIC	?OP_lag_word@@YAXXZ				; OP_lag_word
PUBLIC	?OP_lal_byte@@YAXXZ				; OP_lal_byte
PUBLIC	?OP_lal_word@@YAXXZ				; OP_lal_word
PUBLIC	?OP_lat_byte@@YAXXZ				; OP_lat_byte
PUBLIC	?OP_lat_word@@YAXXZ				; OP_lat_word
PUBLIC	?OP_lap_byte@@YAXXZ				; OP_lap_byte
PUBLIC	?OP_lap_word@@YAXXZ				; OP_lap_word
PUBLIC	?OP_lsg_byte@@YAXXZ				; OP_lsg_byte
PUBLIC	?OP_lsg_word@@YAXXZ				; OP_lsg_word
PUBLIC	?OP_lsl_byte@@YAXXZ				; OP_lsl_byte
PUBLIC	?OP_lsl_word@@YAXXZ				; OP_lsl_word
PUBLIC	?OP_lst_byte@@YAXXZ				; OP_lst_byte
PUBLIC	?OP_lst_word@@YAXXZ				; OP_lst_word
PUBLIC	?OP_lsp_byte@@YAXXZ				; OP_lsp_byte
PUBLIC	?OP_lsp_word@@YAXXZ				; OP_lsp_word
PUBLIC	?OP_lagi_byte@@YAXXZ				; OP_lagi_byte
PUBLIC	?OP_lagi_word@@YAXXZ				; OP_lagi_word
PUBLIC	?OP_lali_byte@@YAXXZ				; OP_lali_byte
PUBLIC	?OP_lali_word@@YAXXZ				; OP_lali_word
PUBLIC	?OP_lati_byte@@YAXXZ				; OP_lati_byte
PUBLIC	?OP_lati_word@@YAXXZ				; OP_lati_word
PUBLIC	?OP_lapi_byte@@YAXXZ				; OP_lapi_byte
PUBLIC	?OP_lapi_word@@YAXXZ				; OP_lapi_word
PUBLIC	?OP_lsgi_byte@@YAXXZ				; OP_lsgi_byte
PUBLIC	?OP_lsgi_word@@YAXXZ				; OP_lsgi_word
PUBLIC	?OP_lsli_byte@@YAXXZ				; OP_lsli_byte
PUBLIC	?OP_lsli_word@@YAXXZ				; OP_lsli_word
PUBLIC	?OP_lsti_byte@@YAXXZ				; OP_lsti_byte
PUBLIC	?OP_lsti_word@@YAXXZ				; OP_lsti_word
PUBLIC	?OP_lspi_byte@@YAXXZ				; OP_lspi_byte
PUBLIC	?OP_lspi_word@@YAXXZ				; OP_lspi_word
PUBLIC	?OP_sag_byte@@YAXXZ				; OP_sag_byte
PUBLIC	?OP_sag_word@@YAXXZ				; OP_sag_word
PUBLIC	?OP_sal_byte@@YAXXZ				; OP_sal_byte
PUBLIC	?OP_sal_word@@YAXXZ				; OP_sal_word
PUBLIC	?OP_sat_byte@@YAXXZ				; OP_sat_byte
PUBLIC	?OP_sat_word@@YAXXZ				; OP_sat_word
PUBLIC	?OP_sap_byte@@YAXXZ				; OP_sap_byte
PUBLIC	?OP_sap_word@@YAXXZ				; OP_sap_word
PUBLIC	?OP_ssg_byte@@YAXXZ				; OP_ssg_byte
PUBLIC	?OP_ssg_word@@YAXXZ				; OP_ssg_word
PUBLIC	?OP_ssl_byte@@YAXXZ				; OP_ssl_byte
PUBLIC	?OP_ssl_word@@YAXXZ				; OP_ssl_word
PUBLIC	?OP_sst_byte@@YAXXZ				; OP_sst_byte
PUBLIC	?OP_sst_word@@YAXXZ				; OP_sst_word
PUBLIC	?OP_ssp_byte@@YAXXZ				; OP_ssp_byte
PUBLIC	?OP_ssp_word@@YAXXZ				; OP_ssp_word
PUBLIC	?OP_sagi_byte@@YAXXZ				; OP_sagi_byte
PUBLIC	?OP_sagi_word@@YAXXZ				; OP_sagi_word
PUBLIC	?OP_sali_byte@@YAXXZ				; OP_sali_byte
PUBLIC	?OP_sali_word@@YAXXZ				; OP_sali_word
PUBLIC	?OP_sati_byte@@YAXXZ				; OP_sati_byte
PUBLIC	?OP_sati_word@@YAXXZ				; OP_sati_word
PUBLIC	?OP_sapi_byte@@YAXXZ				; OP_sapi_byte
PUBLIC	?OP_sapi_word@@YAXXZ				; OP_sapi_word
PUBLIC	?OP_ssgi_byte@@YAXXZ				; OP_ssgi_byte
PUBLIC	?OP_ssgi_word@@YAXXZ				; OP_ssgi_word
PUBLIC	?OP_ssli_byte@@YAXXZ				; OP_ssli_byte
PUBLIC	?OP_ssli_word@@YAXXZ				; OP_ssli_word
PUBLIC	?OP_ssti_byte@@YAXXZ				; OP_ssti_byte
PUBLIC	?OP_ssti_word@@YAXXZ				; OP_ssti_word
PUBLIC	?OP_sspi_byte@@YAXXZ				; OP_sspi_byte
PUBLIC	?OP_sspi_word@@YAXXZ				; OP_sspi_word
PUBLIC	?OP_iag_byte@@YAXXZ				; OP_iag_byte
PUBLIC	?OP_iag_word@@YAXXZ				; OP_iag_word
PUBLIC	?OP_ial_byte@@YAXXZ				; OP_ial_byte
PUBLIC	?OP_ial_word@@YAXXZ				; OP_ial_word
PUBLIC	?OP_iat_byte@@YAXXZ				; OP_iat_byte
PUBLIC	?OP_iat_word@@YAXXZ				; OP_iat_word
PUBLIC	?OP_iap_byte@@YAXXZ				; OP_iap_byte
PUBLIC	?OP_iap_word@@YAXXZ				; OP_iap_word
PUBLIC	?OP_isg_byte@@YAXXZ				; OP_isg_byte
PUBLIC	?OP_isg_word@@YAXXZ				; OP_isg_word
PUBLIC	?OP_isl_byte@@YAXXZ				; OP_isl_byte
PUBLIC	?OP_isl_word@@YAXXZ				; OP_isl_word
PUBLIC	?OP_ist_byte@@YAXXZ				; OP_ist_byte
PUBLIC	?OP_ist_word@@YAXXZ				; OP_ist_word
PUBLIC	?OP_isp_byte@@YAXXZ				; OP_isp_byte
PUBLIC	?OP_isp_word@@YAXXZ				; OP_isp_word
PUBLIC	?OP_iagi_byte@@YAXXZ				; OP_iagi_byte
PUBLIC	?OP_iagi_word@@YAXXZ				; OP_iagi_word
PUBLIC	?OP_iali_byte@@YAXXZ				; OP_iali_byte
PUBLIC	?OP_iali_word@@YAXXZ				; OP_iali_word
PUBLIC	?OP_iati_byte@@YAXXZ				; OP_iati_byte
PUBLIC	?OP_iati_word@@YAXXZ				; OP_iati_word
PUBLIC	?OP_iapi_byte@@YAXXZ				; OP_iapi_byte
PUBLIC	?OP_iapi_word@@YAXXZ				; OP_iapi_word
PUBLIC	?OP_isgi_byte@@YAXXZ				; OP_isgi_byte
PUBLIC	?OP_isgi_word@@YAXXZ				; OP_isgi_word
PUBLIC	?OP_isli_byte@@YAXXZ				; OP_isli_byte
PUBLIC	?OP_isli_word@@YAXXZ				; OP_isli_word
PUBLIC	?OP_isti_byte@@YAXXZ				; OP_isti_byte
PUBLIC	?OP_isti_word@@YAXXZ				; OP_isti_word
PUBLIC	?OP_ispi_byte@@YAXXZ				; OP_ispi_byte
PUBLIC	?OP_ispi_word@@YAXXZ				; OP_ispi_word
PUBLIC	?OP_dag_byte@@YAXXZ				; OP_dag_byte
PUBLIC	?OP_dag_word@@YAXXZ				; OP_dag_word
PUBLIC	?OP_dal_byte@@YAXXZ				; OP_dal_byte
PUBLIC	?OP_dal_word@@YAXXZ				; OP_dal_word
PUBLIC	?OP_dat_byte@@YAXXZ				; OP_dat_byte
PUBLIC	?OP_dat_word@@YAXXZ				; OP_dat_word
PUBLIC	?OP_dap_byte@@YAXXZ				; OP_dap_byte
PUBLIC	?OP_dap_word@@YAXXZ				; OP_dap_word
PUBLIC	?OP_dsg_byte@@YAXXZ				; OP_dsg_byte
PUBLIC	?OP_dsg_word@@YAXXZ				; OP_dsg_word
PUBLIC	?OP_dsl_byte@@YAXXZ				; OP_dsl_byte
PUBLIC	?OP_dsl_word@@YAXXZ				; OP_dsl_word
PUBLIC	?OP_dst_byte@@YAXXZ				; OP_dst_byte
PUBLIC	?OP_dst_word@@YAXXZ				; OP_dst_word
PUBLIC	?OP_dsp_byte@@YAXXZ				; OP_dsp_byte
PUBLIC	?OP_dsp_word@@YAXXZ				; OP_dsp_word
PUBLIC	?OP_dagi_byte@@YAXXZ				; OP_dagi_byte
PUBLIC	?OP_dagi_word@@YAXXZ				; OP_dagi_word
PUBLIC	?OP_dali_byte@@YAXXZ				; OP_dali_byte
PUBLIC	?OP_dali_word@@YAXXZ				; OP_dali_word
PUBLIC	?pm@@3VPMachine@@A				; pm
PUBLIC	?OP_dati_byte@@YAXXZ				; OP_dati_byte
PUBLIC	?OP_dati_word@@YAXXZ				; OP_dati_word
PUBLIC	?OP_dapi_byte@@YAXXZ				; OP_dapi_byte
PUBLIC	?OP_dapi_word@@YAXXZ				; OP_dapi_word
PUBLIC	?OP_dsgi_byte@@YAXXZ				; OP_dsgi_byte
PUBLIC	?OP_dsgi_word@@YAXXZ				; OP_dsgi_word
PUBLIC	?OP_dsli_byte@@YAXXZ				; OP_dsli_byte
PUBLIC	?OP_dsli_word@@YAXXZ				; OP_dsli_word
PUBLIC	?OP_dsti_byte@@YAXXZ				; OP_dsti_byte
PUBLIC	?OP_dsti_word@@YAXXZ				; OP_dsti_word
PUBLIC	?OP_dspi_byte@@YAXXZ				; OP_dspi_byte
PUBLIC	?OP_dspi_word@@YAXXZ				; OP_dspi_word
PUBLIC	?OP_filename@@YAXXZ				; OP_filename
PUBLIC	?OP_linenum@@YAXXZ				; OP_linenum
PUBLIC	?BadOp@@YAXXZ					; BadOp
PUBLIC	?g_nGenerator@@3KA				; g_nGenerator
PUBLIC	?g_nIncrement@@3KA				; g_nIncrement
PUBLIC	?opTbl@@3PAPAXA					; opTbl
PUBLIC	?opTblCopy@@3PAPAXA				; opTblCopy
PUBLIC	?parm1@@3HA					; parm1
PUBLIC	?parm2@@3HA					; parm2
PUBLIC	?parm3@@3HA					; parm3
PUBLIC	?pmStack@@3PAHA					; pmStack
PUBLIC	?pmStackPtr@@3PAGA				; pmStackPtr
PUBLIC	?pmStackTop@@3PAGA				; pmStackTop
PUBLIC	?_pmSendStack@@3PAGA				; _pmSendStack
_BSS	SEGMENT
__descPtrTable DD 07feeH DUP (?)
?_descTablePtr@@3PAXA DD 01H DUP (?)			; _descTablePtr
?pm@@3VPMachine@@A DB 05f4H DUP (?)			; pm
?parm1@@3HA DD	01H DUP (?)				; parm1
?parm2@@3HA DD	01H DUP (?)				; parm2
?parm3@@3HA DD	01H DUP (?)				; parm3
?pmStack@@3PAHA DD 01400H DUP (?)			; pmStack
?pmStackPtr@@3PAGA DD 01H DUP (?)			; pmStackPtr
?pmStackTop@@3PAGA DD 01H DUP (?)			; pmStackTop
?_pmSendStack@@3PAGA DW 0800H DUP (?)			; _pmSendStack
_BSS	ENDS
CRT$XCU	SEGMENT
_$S7	DD	FLAT:_$E6
CRT$XCU	ENDS
_DATA	SEGMENT
?g_nGenerator@@3KA DD FLAT:?BadOp@@YAXXZ		; g_nGenerator
?g_nIncrement@@3KA DD FLAT:?BadOp@@YAXXZ		; g_nIncrement
?opTbl@@3PAPAXA DD FLAT:?OP_bnot@@YAXXZ			; opTbl
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_add@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_sub@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_mul@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_div@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_mod@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_shr@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_shl@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_xor@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_and@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_or@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_neg@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_not@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_eq@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ne@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_gt@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ge@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_lt@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_le@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ugt@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_uge@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ult@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ule@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_bt_word@@YAXXZ
	DD	FLAT:?OP_bt_byte@@YAXXZ
	DD	FLAT:?OP_bnt_word@@YAXXZ
	DD	FLAT:?OP_bnt_byte@@YAXXZ
	DD	FLAT:?OP_jmp_word@@YAXXZ
	DD	FLAT:?OP_jmp_byte@@YAXXZ
	DD	FLAT:?OP_loadi_word@@YAXXZ
	DD	FLAT:?OP_loadi_byte@@YAXXZ
	DD	FLAT:?OP_push@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_pushi_word@@YAXXZ
	DD	FLAT:?OP_pushi_byte@@YAXXZ
	DD	FLAT:?OP_toss@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_dup@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_link_word@@YAXXZ
	DD	FLAT:?OP_link_byte@@YAXXZ
	DD	FLAT:?OP_call_word@@YAXXZ
	DD	FLAT:?OP_call_byte@@YAXXZ
	DD	FLAT:?OP_callk_word@@YAXXZ
	DD	FLAT:?OP_callk_byte@@YAXXZ
	DD	FLAT:?OP_callb_word@@YAXXZ
	DD	FLAT:?OP_callb_byte@@YAXXZ
	DD	FLAT:?OP_calle_word@@YAXXZ
	DD	FLAT:?OP_calle_byte@@YAXXZ
	DD	FLAT:?OP_ret@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_send_byte@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_class_word@@YAXXZ
	DD	FLAT:?OP_class_byte@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_self@@YAXXZ
	DD	FLAT:?OP_self@@YAXXZ
	DD	FLAT:?OP_super_word@@YAXXZ
	DD	FLAT:?OP_super_byte@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_rest_byte@@YAXXZ
	DD	FLAT:?OP_lea_word@@YAXXZ
	DD	FLAT:?OP_lea_byte@@YAXXZ
	DD	FLAT:?OP_selfID@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_pprev@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_pToa_word@@YAXXZ
	DD	FLAT:?OP_pToa_byte@@YAXXZ
	DD	FLAT:?OP_aTop_word@@YAXXZ
	DD	FLAT:?OP_aTop_byte@@YAXXZ
	DD	FLAT:?OP_pTos_word@@YAXXZ
	DD	FLAT:?OP_pTos_byte@@YAXXZ
	DD	FLAT:?OP_sTop_word@@YAXXZ
	DD	FLAT:?OP_sTop_byte@@YAXXZ
	DD	FLAT:?OP_ipToa_word@@YAXXZ
	DD	FLAT:?OP_ipToa_byte@@YAXXZ
	DD	FLAT:?OP_dpToa_word@@YAXXZ
	DD	FLAT:?OP_dpToa_byte@@YAXXZ
	DD	FLAT:?OP_ipTos_word@@YAXXZ
	DD	FLAT:?OP_ipTos_byte@@YAXXZ
	DD	FLAT:?OP_dpTos_word@@YAXXZ
	DD	FLAT:?OP_dpTos_byte@@YAXXZ
	DD	FLAT:?OP_lofsa@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_lofss@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_push0@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_push1@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_push2@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_pushSelf@@YAXXZ
	DD	FLAT:?OP_filename@@YAXXZ
	DD	FLAT:?OP_linenum@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_lag_word@@YAXXZ
	DD	FLAT:?OP_lag_byte@@YAXXZ
	DD	FLAT:?OP_lal_word@@YAXXZ
	DD	FLAT:?OP_lal_byte@@YAXXZ
	DD	FLAT:?OP_lat_word@@YAXXZ
	DD	FLAT:?OP_lat_byte@@YAXXZ
	DD	FLAT:?OP_lap_word@@YAXXZ
	DD	FLAT:?OP_lap_byte@@YAXXZ
	DD	FLAT:?OP_lsg_word@@YAXXZ
	DD	FLAT:?OP_lsg_byte@@YAXXZ
	DD	FLAT:?OP_lsl_word@@YAXXZ
	DD	FLAT:?OP_lsl_byte@@YAXXZ
	DD	FLAT:?OP_lst_word@@YAXXZ
	DD	FLAT:?OP_lst_byte@@YAXXZ
	DD	FLAT:?OP_lsp_word@@YAXXZ
	DD	FLAT:?OP_lsp_byte@@YAXXZ
	DD	FLAT:?OP_lagi_word@@YAXXZ
	DD	FLAT:?OP_lagi_byte@@YAXXZ
	DD	FLAT:?OP_lali_word@@YAXXZ
	DD	FLAT:?OP_lali_byte@@YAXXZ
	DD	FLAT:?OP_lati_word@@YAXXZ
	DD	FLAT:?OP_lati_byte@@YAXXZ
	DD	FLAT:?OP_lapi_word@@YAXXZ
	DD	FLAT:?OP_lapi_byte@@YAXXZ
	DD	FLAT:?OP_lsgi_word@@YAXXZ
	DD	FLAT:?OP_lsgi_byte@@YAXXZ
	DD	FLAT:?OP_lsli_word@@YAXXZ
	DD	FLAT:?OP_lsli_byte@@YAXXZ
	DD	FLAT:?OP_lsti_word@@YAXXZ
	DD	FLAT:?OP_lsti_byte@@YAXXZ
	DD	FLAT:?OP_lspi_word@@YAXXZ
	DD	FLAT:?OP_lspi_byte@@YAXXZ
	DD	FLAT:?OP_sag_word@@YAXXZ
	DD	FLAT:?OP_sag_byte@@YAXXZ
	DD	FLAT:?OP_sal_word@@YAXXZ
	DD	FLAT:?OP_sal_byte@@YAXXZ
	DD	FLAT:?OP_sat_word@@YAXXZ
	DD	FLAT:?OP_sat_byte@@YAXXZ
	DD	FLAT:?OP_sap_word@@YAXXZ
	DD	FLAT:?OP_sap_byte@@YAXXZ
	DD	FLAT:?OP_ssg_word@@YAXXZ
	DD	FLAT:?OP_ssg_byte@@YAXXZ
	DD	FLAT:?OP_ssl_word@@YAXXZ
	DD	FLAT:?OP_ssl_byte@@YAXXZ
	DD	FLAT:?OP_sst_word@@YAXXZ
	DD	FLAT:?OP_sst_byte@@YAXXZ
	DD	FLAT:?OP_ssp_word@@YAXXZ
	DD	FLAT:?OP_ssp_byte@@YAXXZ
	DD	FLAT:?OP_sagi_word@@YAXXZ
	DD	FLAT:?OP_sagi_byte@@YAXXZ
	DD	FLAT:?OP_sali_word@@YAXXZ
	DD	FLAT:?OP_sali_byte@@YAXXZ
	DD	FLAT:?OP_sati_word@@YAXXZ
	DD	FLAT:?OP_sati_byte@@YAXXZ
	DD	FLAT:?OP_sapi_word@@YAXXZ
	DD	FLAT:?OP_sapi_byte@@YAXXZ
	DD	FLAT:?OP_ssgi_word@@YAXXZ
	DD	FLAT:?OP_ssgi_byte@@YAXXZ
	DD	FLAT:?OP_ssli_word@@YAXXZ
	DD	FLAT:?OP_ssli_byte@@YAXXZ
	DD	FLAT:?OP_ssti_word@@YAXXZ
	DD	FLAT:?OP_ssti_byte@@YAXXZ
	DD	FLAT:?OP_sspi_word@@YAXXZ
	DD	FLAT:?OP_sspi_byte@@YAXXZ
	DD	FLAT:?OP_iag_word@@YAXXZ
	DD	FLAT:?OP_iag_byte@@YAXXZ
	DD	FLAT:?OP_ial_word@@YAXXZ
	DD	FLAT:?OP_ial_byte@@YAXXZ
	DD	FLAT:?OP_iat_word@@YAXXZ
	DD	FLAT:?OP_iat_byte@@YAXXZ
	DD	FLAT:?OP_iap_word@@YAXXZ
	DD	FLAT:?OP_iap_byte@@YAXXZ
	DD	FLAT:?OP_isg_word@@YAXXZ
	DD	FLAT:?OP_isg_byte@@YAXXZ
	DD	FLAT:?OP_isl_word@@YAXXZ
	DD	FLAT:?OP_isl_byte@@YAXXZ
	DD	FLAT:?OP_ist_word@@YAXXZ
	DD	FLAT:?OP_ist_byte@@YAXXZ
	DD	FLAT:?OP_isp_word@@YAXXZ
	DD	FLAT:?OP_isp_byte@@YAXXZ
	DD	FLAT:?OP_iagi_word@@YAXXZ
	DD	FLAT:?OP_iagi_byte@@YAXXZ
	DD	FLAT:?OP_iali_word@@YAXXZ
	DD	FLAT:?OP_iali_byte@@YAXXZ
	DD	FLAT:?OP_iati_word@@YAXXZ
	DD	FLAT:?OP_iati_byte@@YAXXZ
	DD	FLAT:?OP_iapi_word@@YAXXZ
	DD	FLAT:?OP_iapi_byte@@YAXXZ
	DD	FLAT:?OP_isgi_word@@YAXXZ
	DD	FLAT:?OP_isgi_byte@@YAXXZ
	DD	FLAT:?OP_isli_word@@YAXXZ
	DD	FLAT:?OP_isli_byte@@YAXXZ
	DD	FLAT:?OP_isti_word@@YAXXZ
	DD	FLAT:?OP_isti_byte@@YAXXZ
	DD	FLAT:?OP_ispi_word@@YAXXZ
	DD	FLAT:?OP_ispi_byte@@YAXXZ
	DD	FLAT:?OP_dag_word@@YAXXZ
	DD	FLAT:?OP_dag_byte@@YAXXZ
	DD	FLAT:?OP_dal_word@@YAXXZ
	DD	FLAT:?OP_dal_byte@@YAXXZ
	DD	FLAT:?OP_dat_word@@YAXXZ
	DD	FLAT:?OP_dat_byte@@YAXXZ
	DD	FLAT:?OP_dap_word@@YAXXZ
	DD	FLAT:?OP_dap_byte@@YAXXZ
	DD	FLAT:?OP_dsg_word@@YAXXZ
	DD	FLAT:?OP_dsg_byte@@YAXXZ
	DD	FLAT:?OP_dsl_word@@YAXXZ
	DD	FLAT:?OP_dsl_byte@@YAXXZ
	DD	FLAT:?OP_dst_word@@YAXXZ
	DD	FLAT:?OP_dst_byte@@YAXXZ
	DD	FLAT:?OP_dsp_word@@YAXXZ
	DD	FLAT:?OP_dsp_byte@@YAXXZ
	DD	FLAT:?OP_dagi_word@@YAXXZ
	DD	FLAT:?OP_dagi_byte@@YAXXZ
	DD	FLAT:?OP_dali_word@@YAXXZ
	DD	FLAT:?OP_dali_byte@@YAXXZ
	DD	FLAT:?OP_dati_word@@YAXXZ
	DD	FLAT:?OP_dati_byte@@YAXXZ
	DD	FLAT:?OP_dapi_word@@YAXXZ
	DD	FLAT:?OP_dapi_byte@@YAXXZ
	DD	FLAT:?OP_dsgi_word@@YAXXZ
	DD	FLAT:?OP_dsgi_byte@@YAXXZ
	DD	FLAT:?OP_dsli_word@@YAXXZ
	DD	FLAT:?OP_dsli_byte@@YAXXZ
	DD	FLAT:?OP_dsti_word@@YAXXZ
	DD	FLAT:?OP_dsti_byte@@YAXXZ
	DD	FLAT:?OP_dspi_word@@YAXXZ
	DD	FLAT:?OP_dspi_byte@@YAXXZ
?opTblCopy@@3PAPAXA DD FLAT:?OP_bnot@@YAXXZ		; opTblCopy
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_add@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_sub@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_mul@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_div@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_mod@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_shr@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_shl@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_xor@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_and@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_or@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_neg@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_not@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_eq@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ne@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_gt@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ge@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_lt@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_le@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ugt@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_uge@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ult@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_ule@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_bt_word@@YAXXZ
	DD	FLAT:?OP_bt_byte@@YAXXZ
	DD	FLAT:?OP_bnt_word@@YAXXZ
	DD	FLAT:?OP_bnt_byte@@YAXXZ
	DD	FLAT:?OP_jmp_word@@YAXXZ
	DD	FLAT:?OP_jmp_byte@@YAXXZ
	DD	FLAT:?OP_loadi_word@@YAXXZ
	DD	FLAT:?OP_loadi_byte@@YAXXZ
	DD	FLAT:?OP_push@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_pushi_word@@YAXXZ
	DD	FLAT:?OP_pushi_byte@@YAXXZ
	DD	FLAT:?OP_toss@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_dup@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_link_word@@YAXXZ
	DD	FLAT:?OP_link_byte@@YAXXZ
	DD	FLAT:?OP_call_word@@YAXXZ
	DD	FLAT:?OP_call_byte@@YAXXZ
	DD	FLAT:?OP_callk_word@@YAXXZ
	DD	FLAT:?OP_callk_byte@@YAXXZ
	DD	FLAT:?OP_callb_word@@YAXXZ
	DD	FLAT:?OP_callb_byte@@YAXXZ
	DD	FLAT:?OP_calle_word@@YAXXZ
	DD	FLAT:?OP_calle_byte@@YAXXZ
	DD	FLAT:?OP_ret@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_send_byte@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_class_word@@YAXXZ
	DD	FLAT:?OP_class_byte@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_self@@YAXXZ
	DD	FLAT:?OP_self@@YAXXZ
	DD	FLAT:?OP_super_word@@YAXXZ
	DD	FLAT:?OP_super_byte@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_rest_byte@@YAXXZ
	DD	FLAT:?OP_lea_word@@YAXXZ
	DD	FLAT:?OP_lea_byte@@YAXXZ
	DD	FLAT:?OP_selfID@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_pprev@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_pToa_word@@YAXXZ
	DD	FLAT:?OP_pToa_byte@@YAXXZ
	DD	FLAT:?OP_aTop_word@@YAXXZ
	DD	FLAT:?OP_aTop_byte@@YAXXZ
	DD	FLAT:?OP_pTos_word@@YAXXZ
	DD	FLAT:?OP_pTos_byte@@YAXXZ
	DD	FLAT:?OP_sTop_word@@YAXXZ
	DD	FLAT:?OP_sTop_byte@@YAXXZ
	DD	FLAT:?OP_ipToa_word@@YAXXZ
	DD	FLAT:?OP_ipToa_byte@@YAXXZ
	DD	FLAT:?OP_dpToa_word@@YAXXZ
	DD	FLAT:?OP_dpToa_byte@@YAXXZ
	DD	FLAT:?OP_ipTos_word@@YAXXZ
	DD	FLAT:?OP_ipTos_byte@@YAXXZ
	DD	FLAT:?OP_dpTos_word@@YAXXZ
	DD	FLAT:?OP_dpTos_byte@@YAXXZ
	DD	FLAT:?OP_lofsa@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_lofss@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_push0@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_push1@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_push2@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_pushSelf@@YAXXZ
	DD	FLAT:?OP_filename@@YAXXZ
	DD	FLAT:?OP_linenum@@YAXXZ
	DD	FLAT:?BadOp@@YAXXZ
	DD	FLAT:?OP_lag_word@@YAXXZ
	DD	FLAT:?OP_lag_byte@@YAXXZ
	DD	FLAT:?OP_lal_word@@YAXXZ
	DD	FLAT:?OP_lal_byte@@YAXXZ
	DD	FLAT:?OP_lat_word@@YAXXZ
	DD	FLAT:?OP_lat_byte@@YAXXZ
	DD	FLAT:?OP_lap_word@@YAXXZ
	DD	FLAT:?OP_lap_byte@@YAXXZ
	DD	FLAT:?OP_lsg_word@@YAXXZ
	DD	FLAT:?OP_lsg_byte@@YAXXZ
	DD	FLAT:?OP_lsl_word@@YAXXZ
	DD	FLAT:?OP_lsl_byte@@YAXXZ
	DD	FLAT:?OP_lst_word@@YAXXZ
	DD	FLAT:?OP_lst_byte@@YAXXZ
	DD	FLAT:?OP_lsp_word@@YAXXZ
	DD	FLAT:?OP_lsp_byte@@YAXXZ
	DD	FLAT:?OP_lagi_word@@YAXXZ
	DD	FLAT:?OP_lagi_byte@@YAXXZ
	DD	FLAT:?OP_lali_word@@YAXXZ
	DD	FLAT:?OP_lali_byte@@YAXXZ
	DD	FLAT:?OP_lati_word@@YAXXZ
	DD	FLAT:?OP_lati_byte@@YAXXZ
	DD	FLAT:?OP_lapi_word@@YAXXZ
	DD	FLAT:?OP_lapi_byte@@YAXXZ
	DD	FLAT:?OP_lsgi_word@@YAXXZ
	DD	FLAT:?OP_lsgi_byte@@YAXXZ
	DD	FLAT:?OP_lsli_word@@YAXXZ
	DD	FLAT:?OP_lsli_byte@@YAXXZ
	DD	FLAT:?OP_lsti_word@@YAXXZ
	DD	FLAT:?OP_lsti_byte@@YAXXZ
	DD	FLAT:?OP_lspi_word@@YAXXZ
	DD	FLAT:?OP_lspi_byte@@YAXXZ
	DD	FLAT:?OP_sag_word@@YAXXZ
	DD	FLAT:?OP_sag_byte@@YAXXZ
	DD	FLAT:?OP_sal_word@@YAXXZ
	DD	FLAT:?OP_sal_byte@@YAXXZ
	DD	FLAT:?OP_sat_word@@YAXXZ
	DD	FLAT:?OP_sat_byte@@YAXXZ
	DD	FLAT:?OP_sap_word@@YAXXZ
	DD	FLAT:?OP_sap_byte@@YAXXZ
	DD	FLAT:?OP_ssg_word@@YAXXZ
	DD	FLAT:?OP_ssg_byte@@YAXXZ
	DD	FLAT:?OP_ssl_word@@YAXXZ
	DD	FLAT:?OP_ssl_byte@@YAXXZ
	DD	FLAT:?OP_sst_word@@YAXXZ
	DD	FLAT:?OP_sst_byte@@YAXXZ
	DD	FLAT:?OP_ssp_word@@YAXXZ
	DD	FLAT:?OP_ssp_byte@@YAXXZ
	DD	FLAT:?OP_sagi_word@@YAXXZ
	DD	FLAT:?OP_sagi_byte@@YAXXZ
	DD	FLAT:?OP_sali_word@@YAXXZ
	DD	FLAT:?OP_sali_byte@@YAXXZ
	DD	FLAT:?OP_sati_word@@YAXXZ
	DD	FLAT:?OP_sati_byte@@YAXXZ
	DD	FLAT:?OP_sapi_word@@YAXXZ
	DD	FLAT:?OP_sapi_byte@@YAXXZ
	DD	FLAT:?OP_ssgi_word@@YAXXZ
	DD	FLAT:?OP_ssgi_byte@@YAXXZ
	DD	FLAT:?OP_ssli_word@@YAXXZ
	DD	FLAT:?OP_ssli_byte@@YAXXZ
	DD	FLAT:?OP_ssti_word@@YAXXZ
	DD	FLAT:?OP_ssti_byte@@YAXXZ
	DD	FLAT:?OP_sspi_word@@YAXXZ
	DD	FLAT:?OP_sspi_byte@@YAXXZ
	DD	FLAT:?OP_iag_word@@YAXXZ
	DD	FLAT:?OP_iag_byte@@YAXXZ
	DD	FLAT:?OP_ial_word@@YAXXZ
	DD	FLAT:?OP_ial_byte@@YAXXZ
	DD	FLAT:?OP_iat_word@@YAXXZ
	DD	FLAT:?OP_iat_byte@@YAXXZ
	DD	FLAT:?OP_iap_word@@YAXXZ
	DD	FLAT:?OP_iap_byte@@YAXXZ
	DD	FLAT:?OP_isg_word@@YAXXZ
	DD	FLAT:?OP_isg_byte@@YAXXZ
	DD	FLAT:?OP_isl_word@@YAXXZ
	DD	FLAT:?OP_isl_byte@@YAXXZ
	DD	FLAT:?OP_ist_word@@YAXXZ
	DD	FLAT:?OP_ist_byte@@YAXXZ
	DD	FLAT:?OP_isp_word@@YAXXZ
	DD	FLAT:?OP_isp_byte@@YAXXZ
	DD	FLAT:?OP_iagi_word@@YAXXZ
	DD	FLAT:?OP_iagi_byte@@YAXXZ
	DD	FLAT:?OP_iali_word@@YAXXZ
	DD	FLAT:?OP_iali_byte@@YAXXZ
	DD	FLAT:?OP_iati_word@@YAXXZ
	DD	FLAT:?OP_iati_byte@@YAXXZ
	DD	FLAT:?OP_iapi_word@@YAXXZ
	DD	FLAT:?OP_iapi_byte@@YAXXZ
	DD	FLAT:?OP_isgi_word@@YAXXZ
	DD	FLAT:?OP_isgi_byte@@YAXXZ
	DD	FLAT:?OP_isli_word@@YAXXZ
	DD	FLAT:?OP_isli_byte@@YAXXZ
	DD	FLAT:?OP_isti_word@@YAXXZ
	DD	FLAT:?OP_isti_byte@@YAXXZ
	DD	FLAT:?OP_ispi_word@@YAXXZ
	DD	FLAT:?OP_ispi_byte@@YAXXZ
	DD	FLAT:?OP_dag_word@@YAXXZ
	DD	FLAT:?OP_dag_byte@@YAXXZ
	DD	FLAT:?OP_dal_word@@YAXXZ
	DD	FLAT:?OP_dal_byte@@YAXXZ
	DD	FLAT:?OP_dat_word@@YAXXZ
	DD	FLAT:?OP_dat_byte@@YAXXZ
	DD	FLAT:?OP_dap_word@@YAXXZ
	DD	FLAT:?OP_dap_byte@@YAXXZ
	DD	FLAT:?OP_dsg_word@@YAXXZ
	DD	FLAT:?OP_dsg_byte@@YAXXZ
	DD	FLAT:?OP_dsl_word@@YAXXZ
	DD	FLAT:?OP_dsl_byte@@YAXXZ
	DD	FLAT:?OP_dst_word@@YAXXZ
	DD	FLAT:?OP_dst_byte@@YAXXZ
	DD	FLAT:?OP_dsp_word@@YAXXZ
	DD	FLAT:?OP_dsp_byte@@YAXXZ
	DD	FLAT:?OP_dagi_word@@YAXXZ
	DD	FLAT:?OP_dagi_byte@@YAXXZ
	DD	FLAT:?OP_dali_word@@YAXXZ
	DD	FLAT:?OP_dali_byte@@YAXXZ
	DD	FLAT:?OP_dati_word@@YAXXZ
	DD	FLAT:?OP_dati_byte@@YAXXZ
	DD	FLAT:?OP_dapi_word@@YAXXZ
	DD	FLAT:?OP_dapi_byte@@YAXXZ
	DD	FLAT:?OP_dsgi_word@@YAXXZ
	DD	FLAT:?OP_dsgi_byte@@YAXXZ
	DD	FLAT:?OP_dsli_word@@YAXXZ
	DD	FLAT:?OP_dsli_byte@@YAXXZ
	DD	FLAT:?OP_dsti_word@@YAXXZ
	DD	FLAT:?OP_dsti_byte@@YAXXZ
	DD	FLAT:?OP_dspi_word@@YAXXZ
	DD	FLAT:?OP_dspi_byte@@YAXXZ
_DATA	ENDS
_TEXT	SEGMENT
_$E6	PROC NEAR
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 _$E5
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
_$E6	ENDP
_TEXT	ENDS
PUBLIC	??0PMachine@@QAE@XZ				; PMachine::PMachine
_TEXT	SEGMENT
_$E5	PROC NEAR

; 39   : PMachine	pm;

  0000a	55		 push	 ebp
  0000b	8b ec		 mov	 ebp, esp
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?pm@@3VPMachine@@A
  00012	e8 00 00 00 00	 call	 ??0PMachine@@QAE@XZ	; PMachine::PMachine
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
_$E5	ENDP
_TEXT	ENDS
PUBLIC	??0VariableID@@QAE@XZ				; VariableID::VariableID
;	COMDAT ??0PMachine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0PMachine@@QAE@XZ PROC NEAR				; PMachine::PMachine, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000d	e8 00 00 00 00	 call	 ??0VariableID@@QAE@XZ	; VariableID::VariableID
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 1e	 add	 ecx, 30			; 0000001eH
  00018	e8 00 00 00 00	 call	 ??0VariableID@@QAE@XZ	; VariableID::VariableID
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??0PMachine@@QAE@XZ ENDP				; PMachine::PMachine
_TEXT	ENDS
PUBLIC	?pmStackClear@@YAXXZ				; pmStackClear
_TEXT	SEGMENT
?pmStackClear@@YAXXZ PROC NEAR				; pmStackClear

; 165  : 	_asm {
; 166  : 		lea	edi, _pmSendStack

  00019	8d 3d 00 00 00
	00		 lea	 edi, DWORD PTR ?_pmSendStack@@3PAGA

; 167  : 		mov	pmStackPtr, edi

  0001f	89 3d 00 00 00
	00		 mov	 DWORD PTR ?pmStackPtr@@3PAGA, edi ; pmStackPtr

; 168  : 		mov	pmStackTop, edi

  00025	89 3d 00 00 00
	00		 mov	 DWORD PTR ?pmStackTop@@3PAGA, edi ; pmStackTop

; 169  : 
; 170  : //	lea	edi, _disposeModule
; 171  : //	mov	_disposeModulePtr, edi
; 172  : 
; 173  : //	lea	edi, _disposeIP
; 174  : //	mov	_disposeIPPtr, edi
; 175  : 
; 176  : 		lea	edi, pmStack

  0002b	8d 3d 00 00 00
	00		 lea	 edi, DWORD PTR ?pmStack@@3PAHA

; 177  : 		push	eax

  00031	50		 push	 eax

; 178  : 		mov	eax, 1599554882

  00032	b8 42 45 57 5f	 mov	 eax, 1599554882		; 5f574542H

; 179  : 		mov	ecx, 5120

  00037	b9 00 14 00 00	 mov	 ecx, 5120		; 00001400H

; 180  : 		rep	stosd

  0003c	f3 ab		 rep	  stosd

; 181  : 		pop	eax

  0003e	58		 pop	 eax

; 182  : 
; 183  : 		lea	edi, pmStack

  0003f	8d 3d 00 00 00
	00		 lea	 edi, DWORD PTR ?pmStack@@3PAHA

; 184  : 		mov	pm.StackPtr, edi

  00045	89 3d 0c 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+12, edi

; 185  : 		mov	pm.TempPtr, edi

  0004b	89 3d 10 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+16, edi

; 186  : 		mov	pm.ParmPtr, edi

  00051	89 3d 18 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+24, edi

; 187  : 
; 188  : #ifdef DEBUG
; 189  : 		mov	pm.StackBase, edi
; 190  : #endif
; 191  : 		ret

  00057	c3		 ret	 0
?pmStackClear@@YAXXZ ENDP				; pmStackClear
_TEXT	ENDS
PUBLIC	?pmTossMemID@@YAXXZ				; pmTossMemID
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
$SG59325 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\PMac'
	DB	'hine.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
?pmTossMemID@@YAXXZ PROC NEAR				; pmTossMemID

; 197  : 	//	a code handle has just become invalid.  if it's on the call stack
; 198  : 	//	make sure its next instruction is a op_ret or an op_toss, op_ret
; 199  : 	//	sequence and then replace it with the appropriate special code handle
; 200  : 	
; 201  : 	//	a toss, ret sequence is permitted in disposed code because it is
; 202  : 	//	generated at the end of a switch statement and it's safe to allow
; 203  : 	//	the programmer to call DisposeScript in a switch clause
; 204  : 	
; 205  : 	//	if the next instruction is op_lineNum, check that the next instruction
; 206  : 	//	after that is a return (or a toss/ret), and replace it with just a return
; 207  : 	// (or a toss/ret)
; 208  : 
; 209  : 	_asm {
; 210  : 		push	ebx

  00058	53		 push	 ebx

; 211  : 		push	edx

  00059	52		 push	 edx

; 212  : 
; 213  : 		mov	edx, 6

  0005a	ba 06 00 00 00	 mov	 edx, 6

; 214  : 		cmp	dx, pm.ipPtr

  0005f	66 3b 15 3e 01
	00 00		 cmp	 dx, WORD PTR ?pm@@3VPMachine@@A+318

; 215  : 		je	__Checked_all

  00066	74 15		 je	 SHORT $__Checked_all$59318
$__Check_all$59319:

; 216  : 
; 217  : __Check_all:
; 218  : 		cmp	[pm.ipStack + edx], cx

  00068	66 39 8a 40 01
	00 00		 cmp	 WORD PTR ?pm@@3VPMachine@@A[edx+320], cx

; 219  : 		je	__found_it

  0006f	74 0f		 je	 SHORT $__found_it$59320

; 220  : 
; 221  : 		add	edx, 6

  00071	83 c2 06	 add	 edx, 6

; 222  : 		cmp	dx, pm.ipPtr

  00074	66 3b 15 3e 01
	00 00		 cmp	 dx, WORD PTR ?pm@@3VPMachine@@A+318

; 223  : 		jne	__Check_all

  0007b	75 eb		 jne	 SHORT $__Check_all$59319
$__Checked_all$59318:

; 224  : 
; 225  : __Checked_all:
; 226  : 		pop	edx

  0007d	5a		 pop	 edx

; 227  : 		pop	ebx

  0007e	5b		 pop	 ebx

; 228  : 		ret

  0007f	c3		 ret	 0
$__found_it$59320:

; 229  : 
; 230  : __found_it:
; 231  : 		movzx	ebx, word ptr [pm.ipStack + edx]

  00080	0f b7 9a 40 01
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A[edx+320]

; 232  : 
; 233  : //		memIDGetPtrEBX MemCode// ebx points to the object
; 234  :   			shl		ebx, 4

  00087	c1 e3 04	 shl	 ebx, 4

; 235  : 			add		ebx, _descTablePtr

  0008a	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 236  : 			mov	ebx, [ebx]Descriptor.data

  00090	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 237  : //
; 238  : 
; 239  : 		add	ebx, dword ptr [pm.ipStack + edx + 2]

  00093	03 9a 42 01 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A[edx+322]

; 240  : 
; 241  : 		cmp	byte ptr [ebx], OPret

  00099	80 3b 48	 cmp	 BYTE PTR [ebx], 72	; 00000048H

; 242  : 		je	__ret

  0009c	74 0b		 je	 SHORT $__ret$59321

; 243  : 
; 244  : 		cmp	byte ptr [ebx], OPlineNum

  0009e	80 3b 7e	 cmp	 BYTE PTR [ebx], 126	; 0000007eH

; 245  : 		jne	__try_toss

  000a1	75 1f		 jne	 SHORT $__try_toss$59322

; 246  : 
; 247  : 		cmp	byte ptr [ebx + 3], OPret

  000a3	80 7b 03 48	 cmp	 BYTE PTR [ebx+3], 72	; 00000048H

; 248  : 		jne	__try_toss

  000a7	75 19		 jne	 SHORT $__try_toss$59322
$__ret$59321:

; 249  : 
; 250  : __ret:
; 251  : 		mov	ax, pm.disposeTossRet

  000a9	66 a1 20 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+32

; 252  : 		mov	word ptr [pm.ipStack + edx], ax

  000af	66 89 82 40 01
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A[edx+320], ax

; 253  : 		mov	dword ptr [pm.ipStack + edx + 2], 1

  000b6	c7 82 42 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A[edx+322], 1

; 254  : 
; 255  : 		jmp	__Check_all

  000c0	eb a6		 jmp	 SHORT $__Check_all$59319
$__try_toss$59322:

; 256  : 
; 257  : __try_toss:
; 258  : 		cmp	byte ptr [ebx], OPtoss

  000c2	80 3b 3a	 cmp	 BYTE PTR [ebx], 58	; 0000003aH

; 259  : 		jne	__error

  000c5	75 2e		 jne	 SHORT $__error$59323

; 260  : 
; 261  : 		cmp	byte ptr [ebx + 1], OPret

  000c7	80 7b 01 48	 cmp	 BYTE PTR [ebx+1], 72	; 00000048H

; 262  : 		je	__tossret

  000cb	74 0c		 je	 SHORT $__tossret$59324

; 263  : 
; 264  : 		cmp	byte ptr [ebx + 1], OPlineNum

  000cd	80 7b 01 7e	 cmp	 BYTE PTR [ebx+1], 126	; 0000007eH

; 265  : 		jne	__error

  000d1	75 22		 jne	 SHORT $__error$59323

; 266  : 
; 267  : 		cmp	byte ptr [ebx + 4], OPret

  000d3	80 7b 04 48	 cmp	 BYTE PTR [ebx+4], 72	; 00000048H

; 268  : 		jne	__error

  000d7	75 1c		 jne	 SHORT $__error$59323
$__tossret$59324:

; 269  : 
; 270  : __tossret:
; 271  : 		mov	ax, pm.disposeTossRet

  000d9	66 a1 20 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+32

; 272  : 		mov	word ptr [pm.ipStack + edx], ax

  000df	66 89 82 40 01
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A[edx+320], ax

; 273  : 		mov	dword ptr [pm.ipStack + edx + 2], 0

  000e6	c7 82 42 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A[edx+322], 0

; 274  : 
; 275  : 		jmp	__Check_all

  000f0	e9 73 ff ff ff	 jmp	 $__Check_all$59319
$__error$59323:

; 276  : 
; 277  : __error:
; 278  : 		mov	parm1, eax

  000f5	a3 00 00 00 00	 mov	 DWORD PTR ?parm1@@3HA, eax ; parm1

; 279  : 		mov	parm2, ebx

  000fa	89 1d 00 00 00
	00		 mov	 DWORD PTR ?parm2@@3HA, ebx ; parm2

; 280  : 		mov	parm3, ecx

  00100	89 0d 00 00 00
	00		 mov	 DWORD PTR ?parm3@@3HA, ecx ; parm3

; 281  : 	}
; 282  : 
; 283  : 	msgMgr->Fatal(SrcLoc, Msg_DisposedScript, parm1, parm2);

  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm2@@3HA ; parm2
  0010b	50		 push	 eax
  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?parm1@@3HA ; parm1
  00112	51		 push	 ecx
  00113	6a 24		 push	 36			; 00000024H
  00115	68 1b 01 00 00	 push	 283			; 0000011bH
  0011a	68 00 00 00 00	 push	 OFFSET FLAT:$SG59325
  0011f	6a 61		 push	 97			; 00000061H
  00121	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  0012d	83 c4 1c	 add	 esp, 28			; 0000001cH
?pmTossMemID@@YAXXZ ENDP				; pmTossMemID
_TEXT	ENDS
PUBLIC	??DFakeObjectID@@QBEPAUObject@@XZ		; FakeObjectID::operator*
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
PUBLIC	?pmQuickMessage_asm@@YAXXZ			; pmQuickMessage_asm
EXTRN	?Name@Object@@QAEPBDXZ:NEAR			; Object::Name
EXTRN	?GetSelectorName@@YAPBDGPAD@Z:NEAR		; GetSelectorName
EXTRN	?Fatal@MsgMgr@@QAAXPADZZ:NEAR			; MsgMgr::Fatal
_DATA	SEGMENT
	ORG $+3
$SG59340 DB	'Reference to handle 0x%x is not valid.', 00H
	ORG $+1
$SG59341 DB	'Invalid handle reference (0x%x)', 00H
$SG59354 DB	'%s(%d) is not a valid selector for %s', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T60032 = -72
_nextMsgParms$ = -64
_selector$ = -52
_obj$ = -60
_dict$ = -12
_selectorIndex$ = -68
__selectors$ = -20
__offsets$ = -8
__scripts$ = -56
_selectorName$ = -48
?pmQuickMessage_asm@@YAXXZ PROC NEAR			; pmQuickMessage_asm

; 288  : 	int		nArgs;
; 289  : 	int		prevPMSP;
; 290  : 	int		nextMsgParms;
; 291  : 	int		selector;
; 292  : 	int		obj;
; 293  : 	int		dict;
; 294  : 	int		selectorIndex;
; 295  : 	int		_selectors;
; 296  : 	int		_offsets;
; 297  : 	int		_scripts;
; 298  : 
; 299  : 	/*MIKE - do this code in C++!
; 300  : 	
; 301  : 	//I think EBX is loaded with what obj(the handle) should be...
; 302  : 	if( obj < 0 || obj > 32750 ) {
; 303  : 		msgMgr->Fatal ( "Reference to handle 0x%x is not valid.", obj );
; 304  : 	}
; 305  : 
; 306  : 	if( memMgr->desc[obj].memInfo.type != MemObject ) {
; 307  : 		msgMgr->Fatal ( "Handle 0x%x is not a valid object.", obj );
; 308  : 	}
; 309  : 
; 310  : 	*/
; 311  : 
; 312  : 	_asm {
; 313  : 		//	send a series of messages (method invocations and property accesses)
; 314  : 		//	to 'obj'
; 315  : 		push	ebp

  00130	55		 push	 ebp

; 316  : 		mov		ebp, esp

  00131	8b ec		 mov	 ebp, esp

; 317  : 		sub		esp, __LOCAL_SIZE

  00133	83 ec 48	 sub	 esp, 72			; 00000048H

; 318  : 
; 319  : 		mov		obj, ebx

  00136	89 5d c4	 mov	 DWORD PTR _obj$[ebp], ebx

; 320  : 
; 321  : 		cmp	ebx, 0

  00139	83 fb 00	 cmp	 ebx, 0

; 322  : 		jl	__bad_handle

  0013c	7c 2e		 jl	 SHORT $__bad_handle$59338

; 323  : 
; 324  : 		cmp	ebx, 32750

  0013e	81 fb ee 7f 00
	00		 cmp	 ebx, 32750		; 00007feeH

; 325  : 		jg	__bad_handle

  00144	7f 26		 jg	 SHORT $__bad_handle$59338

; 326  : 
; 327  : 		shl	ebx, 4

  00146	c1 e3 04	 shl	 ebx, 4

; 328  : 		add	ebx, _descTablePtr

  00149	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 329  : 
; 330  : 		cmp	byte ptr [ebx], MemObject

  0014f	80 3b 34	 cmp	 BYTE PTR [ebx], 52	; 00000034H

; 331  : 		je	__passed

  00152	74 2f		 je	 SHORT $__passed$59339

; 332  : 	}
; 333  : 
; 334  : 	msgMgr->Fatal ( "Reference to handle 0x%x is not valid.", obj );

  00154	8b 45 c4	 mov	 eax, DWORD PTR _obj$[ebp]
  00157	50		 push	 eax
  00158	68 00 00 00 00	 push	 OFFSET FLAT:$SG59340
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH
$__bad_handle$59338:

; 335  : 
; 336  : 	_asm {
; 337  : __bad_handle:
; 338  : 	}
; 339  : 
; 340  : 	msgMgr->Fatal ( "Invalid handle reference (0x%x)", obj );

  0016c	8b 55 c4	 mov	 edx, DWORD PTR _obj$[ebp]
  0016f	52		 push	 edx
  00170	68 00 00 00 00	 push	 OFFSET FLAT:$SG59341
  00175	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00180	83 c4 0c	 add	 esp, 12			; 0000000cH
$__passed$59339:

; 341  : 
; 342  : 	_asm {
; 343  : __passed:
; 344  : //		memIDGetPtrEBX MemObject	// ebx points to the object
; 345  : 		mov	ebx, [ebx]Descriptor.data

  00183	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 346  : 
; 347  : 
; 348  : 		//	save important variables
; 349  : 		push	pm.Locals

  00186	ff 35 1c 00 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+28

; 350  : 		push	pm.curScriptNum

  0018c	66 ff 35 24 00
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+36

; 351  : 		push	pm.curScriptNum

  00193	66 ff 35 24 00
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+36

; 352  : 
; 353  : 		push	pm.ParmPtr

  0019a	ff 35 18 00 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+24

; 354  : 		push	pm.TempPtr

  001a0	ff 35 10 00 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+16

; 355  : 
; 356  : 		mov	pm.StackPtr, edi

  001a6	89 3d 0c 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+12, edi

; 357  : 
; 358  : //		pushIP
; 359  : 		push	ebx

  001ac	53		 push	 ebx

; 360  : 		movzx	ebx, pm.ipPtr

  001ad	0f b7 1d 3e 01
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+318

; 361  : 		mov		dword ptr [pm.ipStack + ebx], esi

  001b4	89 b3 40 01 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A[ebx+320], esi

; 362  : 		add		pm.ipPtr, 4

  001ba	66 83 05 3e 01
	00 00 04	 add	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 363  : 		pop		ebx

  001c2	5b		 pop	 ebx

; 364  : //
; 365  : 
; 366  : 		//	where stack ptr will point after all this object's messages have been
; 367  : 		//	popped
; 368  : 		mov	edx, edi

  001c3	8b d7		 mov	 edx, edi

; 369  : 		sub	edx, ecx

  001c5	2b d1		 sub	 edx, ecx

; 370  : 		push	edx

  001c7	52		 push	 edx

; 371  : 		add	edx, 2

  001c8	83 c2 02	 add	 edx, 2

; 372  : 
; 373  : 		//	where the parameters of the next message for this object start
; 374  : 		mov	nextMsgParms, edx

  001cb	89 55 c0	 mov	 DWORD PTR _nextMsgParms$[ebp], edx
$__next_message$59342:

; 375  : 
; 376  : 		//	process all the messages for this object
; 377  : __next_message:
; 378  : 		mov	pm.acc, eax

  001ce	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 379  : 
; 380  : 		mov	esi, nextMsgParms

  001d3	8b 75 c0	 mov	 esi, DWORD PTR _nextMsgParms$[ebp]

; 381  : 
; 382  : 		mov	pm.ParmPtr, esi

  001d6	89 35 18 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+24, esi

; 383  : 		add	pm.ParmPtr, 2

  001dc	83 05 18 00 00
	00 02		 add	 DWORD PTR ?pm@@3VPMachine@@A+24, 2

; 384  : 
; 385  : 		//	get selector
; 386  : 		movzx	edx, word ptr [esi]

  001e3	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 387  : 		mov	selector, edx

  001e6	89 55 cc	 mov	 DWORD PTR _selector$[ebp], edx

; 388  : 
; 389  : 		//	get parameters
; 390  : 		movzx	edx, word ptr [esi + 2]

  001e9	0f b7 56 02	 movzx	 edx, WORD PTR [esi+2]

; 391  : 		add	esi, 4

  001ed	83 c6 04	 add	 esi, 4

; 392  : 
; 393  : 		shl	edx, 1

  001f0	d1 e2		 shl	 edx, 1

; 394  : 
; 395  : 		//	adjust  known parameters by those added by &rest
; 396  : 		add	dx, pm.RestArgs

  001f2	66 03 15 22 00
	00 00		 add	 dx, WORD PTR ?pm@@3VPMachine@@A+34

; 397  : 		mov	pm.RestArgs, 0

  001f9	66 c7 05 22 00
	00 00 00 00	 mov	 WORD PTR ?pm@@3VPMachine@@A+34, 0

; 398  : 
; 399  : 		//	decrement  args to process by this msg's parms +
; 400  : 		//	1 word for selector + 1 word for  args
; 401  : 		sub	ecx, edx

  00202	2b ca		 sub	 ecx, edx

; 402  : 		sub	ecx, 4		

  00204	83 e9 04	 sub	 ecx, 4

; 403  : 
; 404  : 		//	save location of next msg's parms
; 405  : 		mov	nextMsgParms, esi

  00207	89 75 c0	 mov	 DWORD PTR _nextMsgParms$[ebp], esi

; 406  : 		add	nextMsgParms, edx

  0020a	01 55 c0	 add	 DWORD PTR _nextMsgParms$[ebp], edx

; 407  : 
; 408  : 		push	ecx

  0020d	51		 push	 ecx

; 409  : 		push	edx

  0020e	52		 push	 edx

; 410  : 		push	edi

  0020f	57		 push	 edi

; 411  : 
; 412  : 		mov	eax, selector

  00210	8b 45 cc	 mov	 eax, DWORD PTR _selector$[ebp]

; 413  : 
; 414  : 		//MIKE - for this selector search, can I throw a std::map
; 415  : 		//onto an ObjectID, and have the map go from selectorID -> 
; 416  : 		mov	edx, [ebx]Object._selectorDict

  00213	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]

; 417  : 		mov	dict, edx

  00216	89 55 f4	 mov	 DWORD PTR _dict$[ebp], edx

; 418  : 
; 419  : 		mov	edi, [edx]SelectorDict.offsets

  00219	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]

; 420  : 		mov	_offsets, edi

  0021c	89 7d f8	 mov	 DWORD PTR __offsets$[ebp], edi

; 421  : 
; 422  : 		mov	edi, [edx]SelectorDict.scripts

  0021f	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 423  : 		mov	_scripts, edi

  00222	89 7d c8	 mov	 DWORD PTR __scripts$[ebp], edi

; 424  : 
; 425  : 		// search the object's selector dictionary for a matching selector
; 426  : 		mov	ecx, [edx]SelectorDict.size

  00225	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]

; 427  : 
; 428  : 		mov	edi, [edx]SelectorDict.selectors

  00228	8b 3a		 mov	 edi, DWORD PTR [edx]

; 429  : 		mov	_selectors, edi

  0022a	89 7d ec	 mov	 DWORD PTR __selectors$[ebp], edi

; 430  : 
; 431  : 		shr	ecx, 1

  0022d	d1 e9		 shr	 ecx, 1

; 432  : 		jnc	__scanLoop

  0022f	73 08		 jae	 SHORT $__scanLoop$59343

; 433  : 
; 434  : 		cmp	ax, word ptr [edi]

  00231	66 3b 07	 cmp	 ax, WORD PTR [edi]

; 435  : 		je	__foundIt

  00234	74 1d		 je	 SHORT $__foundIt$59344

; 436  : 
; 437  :  		add	edi, 2

  00236	83 c7 02	 add	 edi, 2
$__scanLoop$59343:

; 438  : 
; 439  : __scanLoop:
; 440  : 		mov	edx, dword ptr [edi]

  00239	8b 17		 mov	 edx, DWORD PTR [edi]

; 441  : 
; 442  : 		cmp	ax, dx

  0023b	66 3b c2	 cmp	 ax, dx

; 443  : 		je	__foundIt

  0023e	74 13		 je	 SHORT $__foundIt$59344

; 444  : 
; 445  : 		shr	edx, 16

  00240	c1 ea 10	 shr	 edx, 16			; 00000010H

; 446  : 
; 447  : 		cmp	ax, dx

  00243	66 3b c2	 cmp	 ax, dx

; 448  : 		je	__foundItA

  00246	74 08		 je	 SHORT $__foundItA$59345

; 449  : 
; 450  :  		add	edi, 4

  00248	83 c7 04	 add	 edi, 4

; 451  : 
; 452  : 		dec	ecx

  0024b	49		 dec	 ecx

; 453  : 		jnz	__scanLoop

  0024c	75 eb		 jne	 SHORT $__scanLoop$59343

; 454  : 
; 455  : 		jmp	__badSelector

  0024e	eb 1e		 jmp	 SHORT $__badSelector$59346
$__foundItA$59345:

; 456  : 
; 457  : __foundItA:
; 458  : 		add	edi, 2

  00250	83 c7 02	 add	 edi, 2
$__foundIt$59344:

; 459  : 
; 460  : __foundIt:
; 461  : 		// we found a selector, let's calculate the index
; 462  : 		sub	edi, _selectors

  00253	2b 7d ec	 sub	 edi, DWORD PTR __selectors$[ebp]

; 463  : 		add	edi, edi

  00256	03 ff		 add	 edi, edi

; 464  : 		mov	selectorIndex, edi

  00258	89 7d bc	 mov	 DWORD PTR _selectorIndex$[ebp], edi
$__getDone$59347:

; 465  : 
; 466  : __getDone:
; 467  : 		pop	edi

  0025b	5f		 pop	 edi

; 468  : 		pop	edx

  0025c	5a		 pop	 edx

; 469  : 		pop	ecx

  0025d	59		 pop	 ecx

; 470  : 
; 471  : 		// figure out the type of this selector
; 472  : 		mov	eax, _scripts

  0025e	8b 45 c8	 mov	 eax, DWORD PTR __scripts$[ebp]

; 473  : 		add	eax, selectorIndex

  00261	03 45 bc	 add	 eax, DWORD PTR _selectorIndex$[ebp]

; 474  : 
; 475  : 		cmp	dword ptr [eax], 0

  00264	83 38 00	 cmp	 DWORD PTR [eax], 0

; 476  : 		je 	__qmProperty

  00267	74 4d		 je	 SHORT $__qmProperty$59348

; 477  : 
; 478  : 		jmp	__qmMethod

  00269	e9 b4 00 00 00	 jmp	 $__qmMethod$59349
$__badSelector$59346:

; 479  : 																			
; 480  : __badSelector:
; 481  : 		}
; 482  : 
; 483  : 		char selectorName[MaxSelectorName + 1];
; 484  : 		GetSelectorName(selector, selectorName);

  0026e	8d 4d d0	 lea	 ecx, DWORD PTR _selectorName$[ebp]
  00271	51		 push	 ecx
  00272	66 8b 55 cc	 mov	 dx, WORD PTR _selector$[ebp]
  00276	52		 push	 edx
  00277	e8 00 00 00 00	 call	 ?GetSelectorName@@YAPBDGPAD@Z ; GetSelectorName
  0027c	83 c4 08	 add	 esp, 8

; 485  : 
; 486  : 
; 487  : 		msgMgr->Fatal ( "%s(%d) is not a valid selector for %s", selectorName, selector, ((Object *) *(ObjectID) obj)->Name() );

  0027f	66 8b 45 c4	 mov	 ax, WORD PTR _obj$[ebp]
  00283	50		 push	 eax
  00284	8d 4d b8	 lea	 ecx, DWORD PTR $T60032[ebp]
  00287	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0028c	8b c8		 mov	 ecx, eax
  0028e	e8 00 00 00 00	 call	 ??DFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator*
  00293	8b c8		 mov	 ecx, eax
  00295	e8 00 00 00 00	 call	 ?Name@Object@@QAEPBDXZ	; Object::Name
  0029a	50		 push	 eax
  0029b	8b 4d cc	 mov	 ecx, DWORD PTR _selector$[ebp]
  0029e	51		 push	 ecx
  0029f	8d 55 d0	 lea	 edx, DWORD PTR _selectorName$[ebp]
  002a2	52		 push	 edx
  002a3	68 00 00 00 00	 push	 OFFSET FLAT:$SG59354
  002a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  002ad	50		 push	 eax
  002ae	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  002b3	83 c4 14	 add	 esp, 20			; 00000014H
$__qmProperty$59348:

; 488  : 
; 489  : 		_asm {
; 490  : __qmProperty:
; 491  : 		test	edx, 0ffffh

  002b6	f7 c2 ff ff 00
	00		 test	 edx, 65535		; 0000ffffH

; 492  : 		jnz	__qmSetProperty

  002bc	75 25		 jne	 SHORT $__qmSetProperty$59355
$__qmGetProperty$59356:

; 493  : 
; 494  : __qmGetProperty:
; 495  : 		push	edi

  002be	57		 push	 edi

; 496  : 
; 497  : 		// get the offset of this property
; 498  : 		mov	edi, _offsets

  002bf	8b 7d f8	 mov	 edi, DWORD PTR __offsets$[ebp]

; 499  : 		add	edi, selectorIndex

  002c2	03 7d bc	 add	 edi, DWORD PTR _selectorIndex$[ebp]

; 500  : 
; 501  : 		mov	edi, [edi]

  002c5	8b 3f		 mov	 edi, DWORD PTR [edi]

; 502  : 		add	edi, edi

  002c7	03 ff		 add	 edi, edi

; 503  : 
; 504  : 		add	edi, ebx

  002c9	03 fb		 add	 edi, ebx

; 505  : 
; 506  : 		movzx	eax, word ptr [edi]

  002cb	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 507  : 
; 508  : 		pop	edi

  002ce	5f		 pop	 edi

; 509  : 
; 510  : 		mov	pm.acc, eax

  002cf	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 511  : 
; 512  : 		cmp	ecx, 0

  002d4	83 f9 00	 cmp	 ecx, 0

; 513  : 		jne	__ljmp1

  002d7	75 05		 jne	 SHORT $__ljmp1$59357

; 514  : 		jmp	__processed

  002d9	e9 ed 00 00 00	 jmp	 $__processed$59358
$__ljmp1$59357:

; 515  : 
; 516  : __ljmp1:
; 517  : 		jmp	__next_message

  002de	e9 eb fe ff ff	 jmp	 $__next_message$59342
$__qmSetProperty$59355:

; 518  : 
; 519  : __qmSetProperty:
; 520  : 		push	edx

  002e3	52		 push	 edx

; 521  : 		push	edi

  002e4	57		 push	 edi

; 522  : 
; 523  : 		// get the offset of this property
; 524  : 		mov	edi, _offsets

  002e5	8b 7d f8	 mov	 edi, DWORD PTR __offsets$[ebp]

; 525  : 		add	edi, selectorIndex

  002e8	03 7d bc	 add	 edi, DWORD PTR _selectorIndex$[ebp]

; 526  : 
; 527  : 		mov	edi, [edi]

  002eb	8b 3f		 mov	 edi, DWORD PTR [edi]

; 528  : 		add	edi, edi

  002ed	03 ff		 add	 edi, edi

; 529  : 
; 530  : 		mov	eax, edi

  002ef	8b c7		 mov	 eax, edi

; 531  : 
; 532  : 		add	edi, ebx

  002f1	03 fb		 add	 edi, ebx

; 533  : 
; 534  : 		mov	dx, word ptr [esi]

  002f3	66 8b 16	 mov	 dx, WORD PTR [esi]

; 535  : 		mov	word ptr [edi], dx

  002f6	66 89 17	 mov	 WORD PTR [edi], dx

; 536  : 
; 537  : 		cmp	cx, 0056h

  002f9	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 538  : 		ja	__not_Critical

  002fd	77 0d		 ja	 SHORT $__not_Critical$59359

; 539  : 		cmp	cx, 0030h

  002ff	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 540  : 		jb	__not_Critical

  00303	72 07		 jb	 SHORT $__not_Critical$59359

; 541  : 
; 542  : 		mov	edi, ebx

  00305	8b fb		 mov	 edi, ebx

; 543  : 		or	word ptr [edi + 14], 0008h

  00307	66 83 4f 0e 08	 or	 WORD PTR [edi+14], 8
$__not_Critical$59359:

; 544  : 
; 545  : __not_Critical:
; 546  : 		pop	edi

  0030c	5f		 pop	 edi

; 547  : 		pop	edx

  0030d	5a		 pop	 edx

; 548  : 
; 549  : 		mov	eax, pm.acc

  0030e	a1 04 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+4

; 550  : 
; 551  : 		cmp	ecx, 0

  00313	83 f9 00	 cmp	 ecx, 0

; 552  : 		jne	__ljmp2

  00316	75 05		 jne	 SHORT $__ljmp2$59360

; 553  : 		jmp	__processed

  00318	e9 ae 00 00 00	 jmp	 $__processed$59358
$__ljmp2$59360:

; 554  : 
; 555  : __ljmp2:
; 556  : 		jmp	__next_message

  0031d	e9 ac fe ff ff	 jmp	 $__next_message$59342
$__qmMethod$59349:

; 557  : 
; 558  : __qmMethod:
; 559  : 		shr	edx, 1

  00322	d1 ea		 shr	 edx, 1

; 560  : 		mov	[esi - 2], dx

  00324	66 89 56 fe	 mov	 WORD PTR [esi-2], dx

; 561  : 
; 562  : 		push	edi

  00328	57		 push	 edi

; 563  : 		push	ebx

  00329	53		 push	 ebx

; 564  : 		push	edx

  0032a	52		 push	 edx

; 565  : 
; 566  : 		mov	edi, pmStackPtr

  0032b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pmStackPtr@@3PAGA ; pmStackPtr

; 567  : 		mov	ebx, obj

  00331	8b 5d c4	 mov	 ebx, DWORD PTR _obj$[ebp]

; 568  : 		mov	edx, selector

  00334	8b 55 cc	 mov	 edx, DWORD PTR _selector$[ebp]

; 569  : 
; 570  : 		mov	word ptr [edi], bx

  00337	66 89 1f	 mov	 WORD PTR [edi], bx

; 571  : 		mov	word ptr [edi+2], dx

  0033a	66 89 57 02	 mov	 WORD PTR [edi+2], dx

; 572  : 		add	pmStackPtr, 4

  0033e	83 05 00 00 00
	00 04		 add	 DWORD PTR ?pmStackPtr@@3PAGA, 4 ; pmStackPtr

; 573  : 
; 574  : 		pop	edx

  00345	5a		 pop	 edx

; 575  : 		pop	ebx

  00346	5b		 pop	 ebx

; 576  : 		pop	edi

  00347	5f		 pop	 edi

; 577  : 
; 578  : 		push	esi

  00348	56		 push	 esi

; 579  : 
; 580  : 		mov	eax, _offsets

  00349	8b 45 f8	 mov	 eax, DWORD PTR __offsets$[ebp]

; 581  : 		add	eax, selectorIndex

  0034c	03 45 bc	 add	 eax, DWORD PTR _selectorIndex$[ebp]

; 582  : 
; 583  : 	//	mov	eax, (ScriptID ptr [ebx]).number
; 584  : 		mov	eax, [eax]

  0034f	8b 00		 mov	 eax, DWORD PTR [eax]

; 585  : 		mov	pm.curScriptNum, ax

  00351	66 a3 24 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+36, ax

; 586  : 
; 587  : 	//	movzx	ebx, (ScriptID ptr [ebx]).vars
; 588  : 		shr	eax, 16

  00357	c1 e8 10	 shr	 eax, 16			; 00000010H

; 589  : 		mov	pm.Locals, ax

  0035a	66 a3 1c 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+28, ax

; 590  : 
; 591  : 		push	pm.ipMemID

  00360	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 592  : 		push	pm.ipMemID

  00367	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 593  : 
; 594  : 		push	pm.ip

  0036e	ff 35 38 01 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+312

; 595  : 
; 596  : 		push	ebx

  00374	53		 push	 ebx

; 597  : 
; 598  : 		mov	ebx, _scripts

  00375	8b 5d c8	 mov	 ebx, DWORD PTR __scripts$[ebp]

; 599  : 		add	ebx, selectorIndex

  00378	03 5d bc	 add	 ebx, DWORD PTR _selectorIndex$[ebp]

; 600  : 		mov	ebx, [ebx]

  0037b	8b 1b		 mov	 ebx, DWORD PTR [ebx]

; 601  : 
; 602  : 		mov	pm.ip, ebx

  0037d	89 1d 38 01 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+312, ebx

; 603  : 		mov	esi, ebx

  00383	8b f3		 mov	 esi, ebx

; 604  : 
; 605  : 		pop	ebx

  00385	5b		 pop	 ebx

; 606  : 		
; 607  : #ifdef DEBUG
; 608  : 		push	eax
; 609  : 		push	ebx
; 610  : 		push	ecx
; 611  : 		push	edx
; 612  : 		push	esi
; 613  : 		push	edi
; 614  : 	}
; 615  : 
; 616  : 	PushDebugInfo();
; 617  : 
; 618  : 	_asm {
; 619  : 		pop	edi
; 620  : 		pop	esi
; 621  : 		pop	edx
; 622  : 		pop	ecx
; 623  : 		pop	ebx
; 624  : 		pop	eax
; 625  : #endif
; 626  : 
; 627  : 		// get next opcode
; 628  : 		movzx	ebx, byte ptr [esi]

  00386	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 629  : 		inc	esi

  00389	46		 inc	 esi

; 630  : 
; 631  : 		mov	eax, pm.acc

  0038a	a1 04 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+4

; 632  : 
; 633  : 		push	ecx

  0038f	51		 push	 ecx

; 634  : 
; 635  : 		// offset to opcode index
; 636  : 		call	opTbl[ebx*4]

  00390	ff 14 9d 00 00
	00 00		 call	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]

; 637  : 
; 638  : 		pop	ecx

  00397	59		 pop	 ecx

; 639  : 
; 640  : 		mov	pm.acc, eax

  00398	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 641  : 
; 642  : 		sub	pmStackPtr, 4

  0039d	83 2d 00 00 00
	00 04		 sub	 DWORD PTR ?pmStackPtr@@3PAGA, 4 ; pmStackPtr

; 643  : 
; 644  : #ifdef DEBUG
; 645  : 		push	eax
; 646  : 		push	ebx
; 647  : 		push	ecx
; 648  : 		push	edx
; 649  : 		push	esi
; 650  : 		push	edi
; 651  : 	}
; 652  : 
; 653  : 	PopDebugInfo();
; 654  : 
; 655  : 	_asm {
; 656  : 		pop	edi
; 657  : 		pop	esi
; 658  : 		pop	edx
; 659  : 		pop	ecx
; 660  : 		pop	ebx
; 661  : 		pop	eax
; 662  : #endif
; 663  : 
; 664  : 		pop	pm.ip

  003a4	8f 05 38 01 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+312

; 665  : 
; 666  : 		pop	pm.ipMemID

  003aa	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 667  : 		pop	pm.ipMemID

  003b1	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 668  : 
; 669  : //		memIDGetPtrNoCheck	obj	// ebx points to the object
; 670  : 		movzx	ebx, word ptr obj

  003b8	0f b7 5d c4	 movzx	 ebx, WORD PTR _obj$[ebp]

; 671  : 		mov		ebx, _descPtrTable[ebx * 4]

  003bc	8b 1c 9d 00 00
	00 00		 mov	 ebx, DWORD PTR __descPtrTable[ebx*4]

; 672  : //
; 673  : 
; 674  : 		pop	esi

  003c3	5e		 pop	 esi

; 675  : 
; 676  : 		jecxz	__processed

  003c4	e3 05		 jecxz	 $__processed$59358

; 677  : 		jmp	__next_message

  003c6	e9 03 fe ff ff	 jmp	 $__next_message$59342
$__processed$59358:

; 678  : 
; 679  : __processed:
; 680  : 		//	restore variables
; 681  : 		pop	edi

  003cb	5f		 pop	 edi

; 682  : 		mov	pm.StackPtr, edi

  003cc	89 3d 0c 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+12, edi

; 683  : 
; 684  : //		popIP
; 685  : 		push	edx

  003d2	52		 push	 edx

; 686  : 		sub		pm.ipPtr, 4

  003d3	66 83 2d 3e 01
	00 00 04	 sub	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 687  : 		movzx	edx, pm.ipPtr

  003db	0f b7 15 3e 01
	00 00		 movzx	 edx, WORD PTR ?pm@@3VPMachine@@A+318

; 688  : 		mov		esi, dword ptr [pm.ipStack + edx]

  003e2	8b b2 40 01 00
	00		 mov	 esi, DWORD PTR ?pm@@3VPMachine@@A[edx+320]

; 689  : 		pop		edx

  003e8	5a		 pop	 edx

; 690  : //
; 691  : 
; 692  : 		pop	pm.TempPtr

  003e9	8f 05 10 00 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+16

; 693  : 		pop	pm.ParmPtr

  003ef	8f 05 18 00 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+24

; 694  : 
; 695  : 		pop	pm.curScriptNum

  003f5	66 8f 05 24 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+36

; 696  : 		pop	pm.curScriptNum

  003fc	66 8f 05 24 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+36

; 697  : 		pop	pm.Locals

  00403	66 8f 05 1c 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+28

; 698  : 
; 699  : 		mov		esp, ebp

  0040a	8b e5		 mov	 esp, ebp

; 700  : 		pop		ebp

  0040c	5d		 pop	 ebp

; 701  : 		ret

  0040d	c3		 ret	 0
?pmQuickMessage_asm@@YAXXZ ENDP				; pmQuickMessage_asm
_TEXT	ENDS
PUBLIC	?pmQuickMessage@@YAXIIPAX@Z			; pmQuickMessage
_TEXT	SEGMENT
_Obj$ = 8
_nArgChars$ = 12
_a$ = 16
?pmQuickMessage@@YAXIIPAX@Z PROC NEAR			; pmQuickMessage

; 705  : void pmQuickMessage(unsigned Obj, unsigned nArgChars, void * a) {

  0040e	55		 push	 ebp
  0040f	8b ec		 mov	 ebp, esp
  00411	53		 push	 ebx
  00412	56		 push	 esi
  00413	57		 push	 edi

; 706  : //	EBX	=	obj
; 707  : //	ECX	=	nArgChars
; 708  : 	_asm {
; 709  : 		mov		eax, pm.acc

  00414	a1 04 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+4

; 710  : 		mov		ebx, Obj

  00419	8b 5d 08	 mov	 ebx, DWORD PTR _Obj$[ebp]

; 711  : 		mov		ecx, nArgChars

  0041c	8b 4d 0c	 mov	 ecx, DWORD PTR _nArgChars$[ebp]

; 712  : 		mov		edi, a

  0041f	8b 7d 10	 mov	 edi, DWORD PTR _a$[ebp]

; 713  : 		call	pmQuickMessage_asm

  00422	e8 00 00 00 00	 call	 ?pmQuickMessage_asm@@YAXXZ ; pmQuickMessage_asm

; 714  : 	}
; 715  : }

  00427	5f		 pop	 edi
  00428	5e		 pop	 esi
  00429	5b		 pop	 ebx
  0042a	5d		 pop	 ebp
  0042b	c3		 ret	 0
?pmQuickMessage@@YAXIIPAX@Z ENDP			; pmQuickMessage
_TEXT	ENDS
PUBLIC	?invokeMethod@@YAJIIIPAX@Z			; invokeMethod
_TEXT	SEGMENT
_Obj$ = 8
_select$ = 12
_nArgChars$ = 16
_a$ = 20
?invokeMethod@@YAJIIIPAX@Z PROC NEAR			; invokeMethod

; 718  : Acc invokeMethod(unsigned int Obj, unsigned int select, unsigned int nArgChars, void * a) {

  0042c	55		 push	 ebp
  0042d	8b ec		 mov	 ebp, esp
  0042f	53		 push	 ebx
  00430	56		 push	 esi
  00431	57		 push	 edi

; 719  : 	_asm {
; 720  : //		obj			=	EBX
; 721  : //		selector	=	EDX
; 722  : //		nArgs		=	ECX
; 723  : 
; 724  : //		push	ebp
; 725  : //		mov		ebp, esp
; 726  : //		sub		esp, __LOCAL_SIZE
; 727  : 
; 728  : 		mov		ebx, Obj

  00432	8b 5d 08	 mov	 ebx, DWORD PTR _Obj$[ebp]

; 729  : 		mov		edx, select

  00435	8b 55 0c	 mov	 edx, DWORD PTR _select$[ebp]

; 730  : 		mov		ecx, nArgChars

  00438	8b 4d 10	 mov	 ecx, DWORD PTR _nArgChars$[ebp]

; 731  : 		mov		edi, a

  0043b	8b 7d 14	 mov	 edi, DWORD PTR _a$[ebp]

; 732  : 
; 733  : 		//	invoke a method or access a property from the kernel
; 734  : 		push	pm.object //save the 'current' object...

  0043e	66 ff 35 02 00
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+2

; 735  : 		push	pm.object

  00445	66 ff 35 02 00
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+2

; 736  : 
; 737  : 		//	set new current object
; 738  : 		mov		pm.object, bx

  0044c	66 89 1d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, bx

; 739  : 
; 740  : 		//	push the selector onto the pmachine stack (16bit)
; 741  : 		add		edi, 2					//	ppush

  00453	83 c7 02	 add	 edi, 2

; 742  : 		mov		word ptr [edi], dx

  00456	66 89 17	 mov	 WORD PTR [edi], dx

; 743  : 
; 744  : 		//	push the number of chars of arguments
; 745  : 		add		edi, 2					//	ppush

  00459	83 c7 02	 add	 edi, 2

; 746  : 		mov		word ptr [edi], cx

  0045c	66 89 0f	 mov	 WORD PTR [edi], cx

; 747  : 
; 748  : 		//	save the count & the obj
; 749  : 		push	ecx //ecx = nArgChars

  0045f	51		 push	 ecx

; 750  : 		push	ebx //ebx = Obj

  00460	53		 push	 ebx

; 751  : 
; 752  : 		mov		ebx, esp

  00461	8b dc		 mov	 ebx, esp

; 753  : 
; 754  : 		mov		pm.acc, eax

  00463	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 755  : 
; 756  : 		jecxz	__pushed_all

  00468	e3 0e		 jecxz	 $__pushed_all$59372
$__push_all$59373:

; 757  : 
; 758  : __push_all:
; 759  : 		mov		dx, word ptr [ebx]

  0046a	66 8b 13	 mov	 dx, WORD PTR [ebx]

; 760  : 		add		ebx, 4

  0046d	83 c3 04	 add	 ebx, 4

; 761  : 		add		edi, 2					//	ppush

  00470	83 c7 02	 add	 edi, 2

; 762  : 		mov		word ptr [edi], dx

  00473	66 89 17	 mov	 WORD PTR [edi], dx

; 763  : 
; 764  : 		loop	__push_all

  00476	e2 f2		 loop	 $__push_all$59373
$__pushed_all$59372:

; 765  : 
; 766  : __pushed_all:
; 767  : 		//	call the method
; 768  : 		pop		ebx

  00478	5b		 pop	 ebx

; 769  : 		pop		ecx

  00479	59		 pop	 ecx

; 770  : 		add		ecx, 4

  0047a	83 c1 04	 add	 ecx, 4

; 771  : 		call	pmQuickMessage_asm

  0047d	e8 00 00 00 00	 call	 ?pmQuickMessage_asm@@YAXXZ ; pmQuickMessage_asm

; 772  : 
; 773  : 		//	restore previously saved object
; 774  : 		pop		pm.object

  00482	66 8f 05 02 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+2

; 775  : 		pop		pm.object

  00489	66 8f 05 02 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+2

; 776  : 
; 777  : 		mov		eax, pm.acc

  00490	a1 04 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+4

; 778  : 
; 779  : //		mov		esp, ebp
; 780  : //		pop		ebp
; 781  : //		ret
; 782  : 	}
; 783  : }

  00495	5f		 pop	 edi
  00496	5e		 pop	 esi
  00497	5b		 pop	 ebx
  00498	5d		 pop	 ebp
  00499	c3		 ret	 0
?invokeMethod@@YAJIIIPAX@Z ENDP				; invokeMethod
_TEXT	ENDS
PUBLIC	?Lock@FakeVariableID@@QBEPAUVariable@@XZ	; FakeVariableID::Lock
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
PUBLIC	?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z ; MemID::Get
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
PUBLIC	??AMemID@@QBEAADI@Z				; MemID::operator[]
PUBLIC	?pmRun@@YAXXZ					; pmRun
EXTRN	?InitLanguage@@YAXXZ:NEAR			; InitLanguage
EXTRN	_LoadClassTbl:NEAR
EXTRN	_GetDispatchEntry:NEAR
EXTRN	_LoadPropOffsets:NEAR
_TEXT	SEGMENT
_startMethod$ = -8
_pscript$ = -4
_tossRetID$ = -12
?pmRun@@YAXXZ PROC NEAR					; pmRun

; 786  : void pmRun() {

  0049a	55		 push	 ebp
  0049b	8b ec		 mov	 ebp, esp
  0049d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  004a0	53		 push	 ebx
  004a1	56		 push	 esi
  004a2	57		 push	 edi

; 787  : 	int	startMethod;
; 788  : 	int	pscript;
; 789  : 
; 790  : 	_asm {
; 791  : 		lea		ebx, pm.restart

  004a3	8d 1d 28 01 00
	00		 lea	 ebx, DWORD PTR ?pm@@3VPMachine@@A+296

; 792  : 		mov		[ebx], esi

  004a9	89 33		 mov	 DWORD PTR [ebx], esi

; 793  : 		mov		[ebx + 4], edi

  004ab	89 7b 04	 mov	 DWORD PTR [ebx+4], edi

; 794  : 		mov		[ebx + 8], esp

  004ae	89 63 08	 mov	 DWORD PTR [ebx+8], esp

; 795  : 		mov		[ebx + 12], ebp

  004b1	89 6b 0c	 mov	 DWORD PTR [ebx+12], ebp

; 796  : 
; 797  : 		mov		startMethod, S_replay

  004b4	c7 45 f8 49 00
	00 00		 mov	 DWORD PTR _startMethod$[ebp], 73 ; 00000049H

; 798  : 
; 799  : 		test	pm.game, 0ffffh

  004bb	66 f7 05 00 00
	00 00 ff ff	 test	 WORD PTR ?pm@@3VPMachine@@A, -1

; 800  : 		jnz		__already_inited

  004c4	75 5a		 jne	 SHORT $__already_inited$59378

; 801  : 	}
; 802  : 
; 803  : 								// this code can't be
; 804  : 	LoadPropOffsets();			// executed twice unless we

  004c6	e8 00 00 00 00	 call	 _LoadPropOffsets

; 805  : 	LoadClassTbl();				// implement restart

  004cb	e8 00 00 00 00	 call	 _LoadClassTbl

; 806  : 
; 807  : 	MemID tossRetID;

  004d0	8d 4d f4	 lea	 ecx, DWORD PTR _tossRetID$[ebp]
  004d3	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 808  : 	tossRetID.Get(MemCode, 2, TossRetIPHandle);

  004d8	6a 00		 push	 0
  004da	6a 1f		 push	 31			; 0000001fH
  004dc	6a 02		 push	 2
  004de	6a 44		 push	 68			; 00000044H
  004e0	8d 4d f4	 lea	 ecx, DWORD PTR _tossRetID$[ebp]
  004e3	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z ; MemID::Get

; 809  : 	tossRetID[0] = op_toss;

  004e8	6a 00		 push	 0
  004ea	8d 4d f4	 lea	 ecx, DWORD PTR _tossRetID$[ebp]
  004ed	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  004f2	c6 00 3a	 mov	 BYTE PTR [eax], 58	; 0000003aH

; 810  : 	tossRetID[1] = op_ret;

  004f5	6a 01		 push	 1
  004f7	8d 4d f4	 lea	 ecx, DWORD PTR _tossRetID$[ebp]
  004fa	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  004ff	c6 00 48	 mov	 BYTE PTR [eax], 72	; 00000048H

; 811  : 	pm.disposeTossRet = tossRetID;

  00502	8d 4d f4	 lea	 ecx, DWORD PTR _tossRetID$[ebp]
  00505	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0050a	66 a3 20 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+32, ax

; 812  : 
; 813  : 	pm.RestArgs = 0;

  00510	66 c7 05 22 00
	00 00 00 00	 mov	 WORD PTR ?pm@@3VPMachine@@A+34, 0

; 814  : 
; 815  : #ifdef DEBUG
; 816  : 	pmSendStack = New SendStackDebug;
; 817  : #endif
; 818  : 
; 819  : 	startMethod = S_play;

  00519	c7 45 f8 33 00
	00 00		 mov	 DWORD PTR _startMethod$[ebp], 51 ; 00000033H
$__already_inited$59378:

; 820  : 
; 821  : __already_inited:
; 822  : 	pm.ipPtr = 0;

  00520	66 c7 05 3e 01
	00 00 00 00	 mov	 WORD PTR ?pm@@3VPMachine@@A+318, 0

; 823  : 	pmStackClear();

  00529	e8 00 00 00 00	 call	 ?pmStackClear@@YAXXZ	; pmStackClear

; 824  : 
; 825  : #ifdef DEBUG
; 826  : 	pmSendStack->Clear();
; 827  : 	ResetDebugInfo();
; 828  : #endif
; 829  : 
; 830  : 	_asm {
; 831  : 		lea		eax, pscript

  0052e	8d 85 fc ff ff
	ff		 lea	 eax, DWORD PTR _pscript$[ebp]

; 832  : 		push	eax

  00534	50		 push	 eax

; 833  : 		push	0

  00535	6a 00		 push	 0

; 834  : 		push	0

  00537	6a 00		 push	 0

; 835  : 		call	GetDispatchEntry

  00539	e8 00 00 00 00	 call	 _GetDispatchEntry

; 836  : 
; 837  : 		add		esp, 12	       	// remove junk

  0053e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 838  : 
; 839  : 		mov		pm.object, ax

  00541	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 840  : 		mov		pm.game, ax

  00547	66 a3 00 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A, ax

; 841  : 
; 842  : 		movzx	ebx, word ptr pscript

  0054d	0f b7 5d fc	 movzx	 ebx, WORD PTR _pscript$[ebp]

; 843  : //		memIDGetPtrEBX MemScript
; 844  :   			shl		ebx, 4

  00551	c1 e3 04	 shl	 ebx, 4

; 845  : 			add		ebx, _descTablePtr

  00554	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 846  : 			mov	ebx, [ebx]Descriptor.data

  0055a	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 847  : //
; 848  : 
; 849  : 		movzx	edx, word ptr [ebx]Script.vars

  0055d	0f b7 53 04	 movzx	 edx, WORD PTR [ebx+4]

; 850  : 		mov		pm.Globals, dx

  00561	66 89 15 1e 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+30, dx

; 851  : 	}
; 852  : 
; 853  : 	pm.GlobalPtr = (short *) pm.Globals.Lock();

  00568	b9 1e 00 00 00	 mov	 ecx, OFFSET FLAT:?pm@@3VPMachine@@A+30
  0056d	e8 00 00 00 00	 call	 ?Lock@FakeVariableID@@QBEPAUVariable@@XZ ; FakeVariableID::Lock
  00572	a3 14 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+20, eax

; 854  : 
; 855  : 	InitLanguage();

  00577	e8 00 00 00 00	 call	 ?InitLanguage@@YAXXZ	; InitLanguage

; 856  : 
; 857  : #ifdef DEBUG
; 858  : 	if (configMgr->Get(ConfigMgr::IntegrityChecking)) {
; 859  : 		int mask = CHECK_ALL;
; 860  : 		if (configMgr->Arg(configMgr->IntegrityChecking))
; 861  : 			mask = configMgr->Val(configMgr->IntegrityChecking);
; 862  : 		IntegrityChecking(mask,"-i");
; 863  : 	}
; 864  : 
; 865  : //  REMOVE THESE LINES when interpreter is 'solid'...
; 866  : 	// Enable integrity checking by default
; 867  : 	else
; 868  : 		IntegrityChecking(CHECK_ALL);
; 869  : //  ...end of 'REMOVE THESE LINES'
; 870  : 
; 871  : 	pmCheckIntegrity("PMachine Start");
; 872  : 
; 873  : #endif
; 874  : 	_asm {
; 875  : 		// setup the accumulator
; 876  : 		mov		eax, 0

  0057c	b8 00 00 00 00	 mov	 eax, 0

; 877  : 		mov		pm.acc, eax

  00581	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 878  : 
; 879  : 		push	pm.StackPtr

  00586	ff 35 0c 00 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+12

; 880  : 		push	0

  0058c	6a 00		 push	 0

; 881  : 		push	startMethod  //we want to call the 'startMethod' (selector) of the 'pm.game' object

  0058e	ff 75 f8	 push	 DWORD PTR _startMethod$[ebp]

; 882  : 		movzx	ebx, pm.game //load ebx with the handle

  00591	0f b7 1d 00 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A

; 883  : 		push	ebx			 //pm.game is the handle to the 'game' object

  00598	53		 push	 ebx

; 884  : 		call	invokeMethod //invokeMethod accepts the handle to the current object on top of the stack?

  00599	e8 00 00 00 00	 call	 ?invokeMethod@@YAJIIIPAX@Z ; invokeMethod

; 885  : 		add		esp, 16

  0059e	83 c4 10	 add	 esp, 16			; 00000010H

; 886  : 	}
; 887  : 
; 888  : //	invokeMethod((unsigned short) pm.game, startMethod, 0, pm.StackPtr);
; 889  : 
; 890  : #ifdef DEBUG
; 891  : 	pmCheckIntegrity("PMachine End");
; 892  : #endif
; 893  : }

  005a1	5f		 pop	 edi
  005a2	5e		 pop	 esi
  005a3	5b		 pop	 ebx
  005a4	8b e5		 mov	 esp, ebp
  005a6	5d		 pop	 ebp
  005a7	c3		 ret	 0
?pmRun@@YAXXZ ENDP					; pmRun
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
PUBLIC	?pmEnd@@YAXXZ					; pmEnd
_TEXT	SEGMENT
?pmEnd@@YAXXZ PROC NEAR					; pmEnd

; 896  : void pmEnd() {

  005a8	55		 push	 ebp
  005a9	8b ec		 mov	 ebp, esp

; 897  : 	pm.game = 0;

  005ab	66 c7 05 00 00
	00 00 00 00	 mov	 WORD PTR ?pm@@3VPMachine@@A, 0

; 898  : 
; 899  : #ifdef DEBUG
; 900  : 	delete pmSendStack;
; 901  : #endif
; 902  : }

  005b4	5d		 pop	 ebp
  005b5	c3		 ret	 0
?pmEnd@@YAXXZ ENDP					; pmEnd
_TEXT	ENDS
PUBLIC	?pmCheckIntegrity@@YA_NPAD@Z			; pmCheckIntegrity
EXTRN	?Alert@MsgMgr@@QAAHDPADHHZZ:NEAR		; MsgMgr::Alert
_DATA	SEGMENT
	ORG $+2
$SG59387 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\PMac'
	DB	'hine.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
?pmCheckIntegrity@@YA_NPAD@Z PROC NEAR			; pmCheckIntegrity

; 905  : bool pmCheckIntegrity(char* note) {

  005b6	55		 push	 ebp
  005b7	8b ec		 mov	 ebp, esp
  005b9	53		 push	 ebx
  005ba	56		 push	 esi
  005bb	57		 push	 edi

; 906  : 	_asm {
; 907  : //		memIDGet	pm.Globals
; 908  : 		movzx	ebx, word ptr pm.Globals

  005bc	0f b7 1d 1e 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+30

; 909  : 		shl		ebx, 4

  005c3	c1 e3 04	 shl	 ebx, 4

; 910  : 		add		ebx, _descTablePtr

  005c6	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 911  : //
; 912  : 
; 913  : 		mov		edx, [ebx]Descriptor.memInfo

  005cc	8b 13		 mov	 edx, DWORD PTR [ebx]

; 914  : 		test	edx, 00000200h		//	mMOVEABLE  

  005ce	f7 c2 00 02 00
	00		 test	 edx, 512		; 00000200H

; 915  : 		jnz		__True

  005d4	75 2e		 jne	 SHORT $__True$59386

; 916  : 
; 917  : 		mov		ebx, [ebx]Descriptor.data

  005d6	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 918  : 		cmp		ebx, pm.GlobalPtr

  005d9	3b 1d 14 00 00
	00		 cmp	 ebx, DWORD PTR ?pm@@3VPMachine@@A+20

; 919  : 		je		__True

  005df	74 23		 je	 SHORT $__True$59386

; 920  : 
; 921  : 	}
; 922  : 
; 923  : #ifdef DEBUG
; 924  : 	if (!msgMgr->Alert("%s - Something has stepped on globals pointer", note))
; 925  : 		EnterDebug();
; 926  : #else
; 927  : 	msgMgr->Alert(SrcLoc,Msg_GlobalPointer);

  005e1	68 8b 00 00 00	 push	 139			; 0000008bH
  005e6	68 9f 03 00 00	 push	 927			; 0000039fH
  005eb	68 00 00 00 00	 push	 OFFSET FLAT:$SG59387
  005f0	6a 61		 push	 97			; 00000061H
  005f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  005f7	50		 push	 eax
  005f8	e8 00 00 00 00	 call	 ?Alert@MsgMgr@@QAAHDPADHHZZ ; MsgMgr::Alert
  005fd	83 c4 14	 add	 esp, 20			; 00000014H

; 928  : #endif
; 929  : 
; 930  : 	return false;

  00600	32 c0		 xor	 al, al
  00602	eb 02		 jmp	 SHORT $L59385
$__True$59386:

; 931  : 
; 932  : __True:
; 933  : 	return true;

  00604	b0 01		 mov	 al, 1
$L59385:

; 934  : }

  00606	5f		 pop	 edi
  00607	5e		 pop	 esi
  00608	5b		 pop	 ebx
  00609	5d		 pop	 ebp
  0060a	c3		 ret	 0
?pmCheckIntegrity@@YA_NPAD@Z ENDP			; pmCheckIntegrity
_TEXT	ENDS
PUBLIC	?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_h$ = 16
_a$ = 20
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z PROC NEAR ; MemID::Get, COMDAT

; 47   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 		Get(type, size, a | PERSIST, 0, 0, 0, h);

  00007	8b 45 10	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	8b 4d 14	 mov	 ecx, DWORD PTR _a$[ebp]
  00014	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  0001a	51		 push	 ecx
  0001b	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 49   : 	}

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 10 00	 ret	 16			; 00000010H
?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z ENDP	; MemID::Get
_TEXT	ENDS
EXTRN	?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z:NEAR ; MemoryMgr::Alloc
EXTRN	_memMgr:DWORD
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_a$ = 16
_num$ = 20
_client$ = 24
_initChar$ = 28
_h$ = 32
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; MemID::Get, COMDAT

; 42   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		handle = memMgr->Alloc(type | a, size, num, client, initChar, h);

  00007	8b 45 20	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 1c	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0001e	0b 55 10	 or	 edx, DWORD PTR _a$[ebp]
  00021	52		 push	 edx
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00028	e8 00 00 00 00	 call	 ?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemoryMgr::Alloc
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	66 89 01	 mov	 WORD PTR [ecx], ax

; 44   : 	}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 1c 00	 ret	 28			; 0000001cH
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; MemID::Get
_TEXT	ENDS
PUBLIC	?pmPushMany@@YAXGIPAF@Z				; pmPushMany
_TEXT	SEGMENT
_select$ = 8
_nArgs$ = 12
_ptrs$ = 16
?pmPushMany@@YAXGIPAF@Z PROC NEAR			; pmPushMany

; 945  : void pmPushMany(Selector select, unsigned nArgs, short* ptrs) {

  0060b	55		 push	 ebp
  0060c	8b ec		 mov	 ebp, esp
  0060e	53		 push	 ebx
  0060f	56		 push	 esi
  00610	57		 push	 edi

; 946  : 	_asm {
; 947  : 		mov		dx, select

  00611	66 8b 55 08	 mov	 dx, WORD PTR _select$[ebp]

; 948  : 		mov		ecx, nArgs

  00615	8b 4d 0c	 mov	 ecx, DWORD PTR _nArgs$[ebp]

; 949  : 		mov		esi, ptrs

  00618	8b 75 10	 mov	 esi, DWORD PTR _ptrs$[ebp]

; 950  : 
; 951  : 		mov		edi, pm.StackPtr

  0061b	8b 3d 0c 00 00
	00		 mov	 edi, DWORD PTR ?pm@@3VPMachine@@A+12

; 952  : 
; 953  : 		mov		word ptr [edi + 2], dx

  00621	66 89 57 02	 mov	 WORD PTR [edi+2], dx

; 954  : 		mov		word ptr [edi + 4], cx

  00625	66 89 4f 04	 mov	 WORD PTR [edi+4], cx

; 955  : 		add		edi, 4

  00629	83 c7 04	 add	 edi, 4

; 956  : 
; 957  : 		jcxz	__no_parms

  0062c	67 e3 09	 jcxz	 $__no_parms$59393

; 958  : 
; 959  : 		add		edi, 2

  0062f	83 c7 02	 add	 edi, 2

; 960  : 
; 961  : 		rep		movsw

  00632	f3 66 a5	 rep	  movsw

; 962  :  
; 963  : 		sub		edi, 2

  00635	83 ef 02	 sub	 edi, 2
$__no_parms$59393:

; 964  : 
; 965  : __no_parms:
; 966  : 		mov		pm.StackPtr, edi

  00638	89 3d 0c 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+12, edi

; 967  : 	}
; 968  : }

  0063e	5f		 pop	 edi
  0063f	5e		 pop	 esi
  00640	5b		 pop	 ebx
  00641	5d		 pop	 ebp
  00642	c3		 ret	 0
?pmPushMany@@YAXGIPAF@Z ENDP				; pmPushMany
_TEXT	ENDS
PUBLIC	?pmCall@@YAXXZ					; pmCall
_TEXT	SEGMENT
?pmCall@@YAXXZ PROC NEAR				; pmCall

; 972  : 	_asm {
; 973  : // nIP		=	EBX
; 974  : // nArgChars	=	ECX
; 975  : 
; 976  : 	//	execute the subroutine at ip
; 977  : 
; 978  : 		//	save the parameter and temp pointers
; 979  : 		push	pm.ParmPtr

  00643	ff 35 18 00 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+24

; 980  : 		push	pm.TempPtr

  00649	ff 35 10 00 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+16

; 981  : 
; 982  : 		//	set up new parameter base
; 983  : 		mov	edx, edi

  0064f	8b d7		 mov	 edx, edi

; 984  : 		add	ecx, 2

  00651	83 c1 02	 add	 ecx, 2

; 985  : 		sub	edx, ecx

  00654	2b d1		 sub	 edx, ecx

; 986  : 		movzx	ecx, pm.RestArgs

  00656	0f b7 0d 22 00
	00 00		 movzx	 ecx, WORD PTR ?pm@@3VPMachine@@A+34

; 987  : 		sub	edx, ecx

  0065d	2b d1		 sub	 edx, ecx

; 988  : 		push	edx

  0065f	52		 push	 edx

; 989  : 		add	edx, 2

  00660	83 c2 02	 add	 edx, 2

; 990  : 		mov	pm.ParmPtr, edx

  00663	89 15 18 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+24, edx

; 991  : 
; 992  : 		shr	cx, 1

  00669	66 d1 e9	 shr	 cx, 1

; 993  : 		add	[edx], cx

  0066c	66 01 0a	 add	 WORD PTR [edx], cx

; 994  : 
; 995  : 		mov	pm.RestArgs, 0

  0066f	66 c7 05 22 00
	00 00 00 00	 mov	 WORD PTR ?pm@@3VPMachine@@A+34, 0

; 996  : 
; 997  : 		mov	esi, ebx

  00678	8b f3		 mov	 esi, ebx

; 998  : 		mov	pm.debugIP, esi

  0067a	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 999  : 
; 1000 : #ifdef DEBUG
; 1001 : 		push	eax
; 1002 : 		push	ebx
; 1003 : 		push	ecx
; 1004 : 		push	edx
; 1005 : 		push	esi
; 1006 : 		push	edi
; 1007 : 
; 1008 : 		call	PushDebugInfo
; 1009 : 
; 1010 : 		pop	edi
; 1011 : 		pop	esi
; 1012 : 		pop	edx
; 1013 : 		pop	ecx
; 1014 : 		pop	ebx
; 1015 : 		pop	eax
; 1016 : #endif
; 1017 : 
; 1018 : 		// get next opcode
; 1019 : 		movzx	ebx, byte ptr [esi]

  00680	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 1020 : 		inc	esi

  00683	46		 inc	 esi

; 1021 : 
; 1022 : 		// offset to opcode index
; 1023 : 		call	opTbl[ebx*4]

  00684	ff 14 9d 00 00
	00 00		 call	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]

; 1024 : 
; 1025 : #ifdef DEBUG
; 1026 : 		push	eax
; 1027 : 		push	ebx
; 1028 : 		push	ecx
; 1029 : 		push	edx
; 1030 : 		push	esi
; 1031 : 		push	edi
; 1032 : 
; 1033 : 		call	PopDebugInfo
; 1034 : 
; 1035 : 		pop	edi
; 1036 : 		pop	esi
; 1037 : 		pop	edx
; 1038 : 		pop	ecx
; 1039 : 		pop	ebx
; 1040 : 		pop	eax
; 1041 : #endif
; 1042 : 
; 1043 : 		//	pop the arguments off the pmStack
; 1044 : 		pop	edi

  0068b	5f		 pop	 edi

; 1045 : 
; 1046 : 		pop	pm.TempPtr

  0068c	8f 05 10 00 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+16

; 1047 : 		pop	pm.ParmPtr

  00692	8f 05 18 00 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+24

; 1048 : 
; 1049 : 		ret

  00698	c3		 ret	 0
?pmCall@@YAXXZ ENDP					; pmCall
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
PUBLIC	?pmDispatch@@YAXXZ				; pmDispatch
_TEXT	SEGMENT
?pmDispatch@@YAXXZ PROC NEAR				; pmDispatch

; 1055 : 	_asm {
; 1056 : //scriptNum	=	EBX
; 1057 : //entryNum	=	EDX
; 1058 : //nArgChars	=	ECX
; 1059 : 		push	ebp

  00699	55		 push	 ebp

; 1060 : 		mov	ebp, esp

  0069a	8b ec		 mov	 ebp, esp

; 1061 : 		sub	esp, 4

  0069c	83 ec 04	 sub	 esp, 4

; 1062 : 
; 1063 : 		//	execute the procedure at this script/entry
; 1064 : 
; 1065 : 		//	save the current script's variables
; 1066 : 		push	pm.Locals

  0069f	ff 35 1c 00 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+28

; 1067 : 		push	pm.curScriptNum

  006a5	66 ff 35 24 00
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+36

; 1068 : 		push	pm.curScriptNum

  006ac	66 ff 35 24 00
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+36

; 1069 : 
; 1070 : 		mov	pm.curScriptNum, bx

  006b3	66 89 1d 24 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+36, bx

; 1071 : 
; 1072 : //		pushIP
; 1073 : 		push	ebx

  006ba	53		 push	 ebx

; 1074 : 		movzx	ebx, pm.ipPtr

  006bb	0f b7 1d 3e 01
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+318

; 1075 : 		mov		dword ptr [pm.ipStack + ebx], esi

  006c2	89 b3 40 01 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A[ebx+320], esi

; 1076 : 		add		pm.ipPtr, 4

  006c8	66 83 05 3e 01
	00 00 04	 add	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 1077 : 		pop		ebx

  006d0	5b		 pop	 ebx

; 1078 : //
; 1079 : 
; 1080 : 		push	pm.ipMemID

  006d1	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 1081 : 		push	pm.ipMemID

  006d8	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 1082 : 
; 1083 : 		push	pm.ip

  006df	ff 35 38 01 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+312

; 1084 : 
; 1085 : 		//	get the new ip for this script/entry
; 1086 : 		push	eax

  006e5	50		 push	 eax

; 1087 : 		push	ecx

  006e6	51		 push	 ecx

; 1088 : 
; 1089 : 		lea	eax, [ebp - 4]

  006e7	8d 45 fc	 lea	 eax, DWORD PTR [ebp-4]

; 1090 : 		push	eax

  006ea	50		 push	 eax

; 1091 : 		push	edx

  006eb	52		 push	 edx

; 1092 : 		push	ebx

  006ec	53		 push	 ebx

; 1093 : 		call	GetDispatchEntry

  006ed	e8 00 00 00 00	 call	 _GetDispatchEntry

; 1094 : 		add	esp, 12

  006f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1095 : 
; 1096 : 		movzx	eax, ax

  006f5	0f b7 c0	 movzx	 eax, ax

; 1097 : 
; 1098 : //		memIDGetPtr	[ebp - 4], MemScript
; 1099 : 		movzx	ebx, word ptr [ebp - 4]

  006f8	0f b7 5d fc	 movzx	 ebx, WORD PTR [ebp-4]

; 1100 : 		shl		ebx, 4

  006fc	c1 e3 04	 shl	 ebx, 4

; 1101 : 		add		ebx, _descTablePtr

  006ff	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 1102 : 		mov		ebx, [ebx]Descriptor.data

  00705	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 1103 : //
; 1104 : 
; 1105 : 		//	set the new script's variables
; 1106 : 		movzx	ecx, word ptr [ebx]Script.vars

  00708	0f b7 4b 04	 movzx	 ecx, WORD PTR [ebx+4]

; 1107 : 		mov	pm.Locals, cx

  0070c	66 89 0d 1c 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+28, cx

; 1108 : 
; 1109 : 		movzx	ebx, word ptr [ebx]Script.code

  00713	0f b7 5b 0e	 movzx	 ebx, WORD PTR [ebx+14]

; 1110 : 		mov	pm.ipMemID, bx

  00717	66 89 1d 3c 01
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+316, bx

; 1111 : //		memIDGetPtrEBX MemCode
; 1112 :   			shl		ebx, 4

  0071e	c1 e3 04	 shl	 ebx, 4

; 1113 : 			add		ebx, _descTablePtr

  00721	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 1114 : 			mov	ebx, [ebx]Descriptor.data

  00727	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 1115 : //
; 1116 : 
; 1117 : 		mov	pm.ip, ebx

  0072a	89 1d 38 01 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+312, ebx

; 1118 : 		add	ebx, eax

  00730	03 d8		 add	 ebx, eax

; 1119 : 
; 1120 : 		pop	ecx

  00732	59		 pop	 ecx

; 1121 : 		pop	eax

  00733	58		 pop	 eax

; 1122 : 
; 1123 : 		//	execute the procedure
; 1124 : 		call	pmCall

  00734	e8 00 00 00 00	 call	 ?pmCall@@YAXXZ		; pmCall

; 1125 : 
; 1126 : 		//	restore script variables
; 1127 : 		pop	pm.ip

  00739	8f 05 38 01 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+312

; 1128 : 
; 1129 : 		pop	pm.ipMemID

  0073f	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 1130 : 		pop	pm.ipMemID

  00746	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 1131 : 
; 1132 : //		popIP
; 1133 : 		push	edx

  0074d	52		 push	 edx

; 1134 : 		sub		pm.ipPtr, 4

  0074e	66 83 2d 3e 01
	00 00 04	 sub	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 1135 : 		movzx	edx, pm.ipPtr

  00756	0f b7 15 3e 01
	00 00		 movzx	 edx, WORD PTR ?pm@@3VPMachine@@A+318

; 1136 : 		mov		esi, dword ptr [pm.ipStack + edx]

  0075d	8b b2 40 01 00
	00		 mov	 esi, DWORD PTR ?pm@@3VPMachine@@A[edx+320]

; 1137 : 		pop		edx

  00763	5a		 pop	 edx

; 1138 : //
; 1139 : 
; 1140 : 		pop	pm.curScriptNum

  00764	66 8f 05 24 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+36

; 1141 : 		pop	pm.curScriptNum

  0076b	66 8f 05 24 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+36

; 1142 : 		pop	pm.Locals

  00772	66 8f 05 1c 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+28

; 1143 : 
; 1144 : 		mov	esp, ebp

  00779	8b e5		 mov	 esp, ebp

; 1145 : 		pop	ebp

  0077b	5d		 pop	 ebp

; 1146 : 		
; 1147 : 		ret

  0077c	c3		 ret	 0
?pmDispatch@@YAXXZ ENDP					; pmDispatch
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT
_s$ = 8
_this$ = -4
??AMemID@@QBEAADI@Z PROC NEAR				; MemID::operator[], COMDAT

; 103  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 104  : 		return *((char*) memMgr->GetAddr(handle) + s);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00019	03 45 08	 add	 eax, DWORD PTR _s$[ebp]

; 105  : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??AMemID@@QBEAADI@Z ENDP				; MemID::operator[]
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
_TEXT	SEGMENT
?OP_bnot@@YAXXZ PROC NEAR				; OP_bnot

; 1153 : 	_asm {
; 1154 : 		not	eax

  0077d	f7 d0		 not	 eax

; 1155 : 
; 1156 : 		// get next opcode
; 1157 : 		mov	bl, byte ptr [esi]

  0077f	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1158 : 		inc	esi

  00781	46		 inc	 esi

; 1159 : 
; 1160 : 		// offset to opcode index
; 1161 : 		jmp	opTbl[ebx*4]

  00782	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_bnot@@YAXXZ ENDP					; OP_bnot
?OP_add@@YAXXZ PROC NEAR				; OP_add

; 1167 : 	_asm {
; 1168 : 		add	ax, word ptr [edi]

  00789	66 03 07	 add	 ax, WORD PTR [edi]

; 1169 : 		sub	edi, 2

  0078c	83 ef 02	 sub	 edi, 2

; 1170 : 
; 1171 : 		// get next opcode
; 1172 : 		mov	bl, byte ptr [esi]

  0078f	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1173 : 		inc	esi

  00791	46		 inc	 esi

; 1174 : 
; 1175 : 		// offset to opcode index
; 1176 : 		jmp	opTbl[ebx*4]

  00792	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_add@@YAXXZ ENDP					; OP_add
?OP_sub@@YAXXZ PROC NEAR				; OP_sub

; 1182 : 	_asm {
; 1183 : 	mov	cx, word ptr [edi]

  00799	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1184 : 	sub	edi, 2

  0079c	83 ef 02	 sub	 edi, 2

; 1185 : 	sub	cx, ax

  0079f	66 2b c8	 sub	 cx, ax

; 1186 : 	movsx	eax, cx

  007a2	0f bf c1	 movsx	 eax, cx

; 1187 : 
; 1188 : 	// get next opcode
; 1189 : 	mov	bl, byte ptr [esi]

  007a5	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1190 : 	inc	esi

  007a7	46		 inc	 esi

; 1191 : 
; 1192 : 	// offset to opcode index
; 1193 : 	jmp	opTbl[ebx*4]

  007a8	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sub@@YAXXZ ENDP					; OP_sub
?OP_mul@@YAXXZ PROC NEAR				; OP_mul

; 1199 : 	_asm {
; 1200 : 	imul	word ptr [edi]

  007af	66 f7 2f	 imul	 WORD PTR [edi]

; 1201 : 	sub	edi, 2

  007b2	83 ef 02	 sub	 edi, 2

; 1202 : 
; 1203 : 	// get next opcode
; 1204 : 	mov	bl, byte ptr [esi]

  007b5	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1205 : 	inc	esi

  007b7	46		 inc	 esi

; 1206 : 
; 1207 : 	// offset to opcode index
; 1208 : 	jmp	opTbl[ebx*4]

  007b8	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_mul@@YAXXZ ENDP					; OP_mul
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+3
$SG59410 DB	'Divide by zero', 00H
_DATA	ENDS
_TEXT	SEGMENT
?OP_div@@YAXXZ PROC NEAR				; OP_div

; 1214 : 	_asm {
; 1215 : 		mov	ecx, eax

  007bf	8b c8		 mov	 ecx, eax

; 1216 : 
; 1217 : 		cmp	cx, 0

  007c1	66 83 f9 00	 cmp	 cx, 0

; 1218 : 		jne	div_ok

  007c5	75 19		 jne	 SHORT $div_ok$59409

; 1219 : 
; 1220 : 		mov	pm.debugIP, esi

  007c7	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 1221 : 	}
; 1222 : 
; 1223 : 	msgMgr->Fatal ( "Divide by zero" );

  007cd	68 00 00 00 00	 push	 OFFSET FLAT:$SG59410
  007d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  007d7	50		 push	 eax
  007d8	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  007dd	83 c4 08	 add	 esp, 8
$div_ok$59409:

; 1224 : 
; 1225 : 	_asm {
; 1226 : div_ok:
; 1227 : 		mov		ax, word ptr [edi]

  007e0	66 8b 07	 mov	 ax, WORD PTR [edi]

; 1228 : 
; 1229 : #ifdef DEBUG
; 1230 : 		mov		word ptr [edi], 0
; 1231 : #endif
; 1232 : 
; 1233 : 		sub		edi, 2

  007e3	83 ef 02	 sub	 edi, 2

; 1234 : 
; 1235 : 		cwd

  007e6	66 99		 cwd

; 1236 : 		idiv	cx

  007e8	66 f7 f9	 idiv	 cx

; 1237 : 
; 1238 : 		// get next opcode
; 1239 : 		mov	bl, byte ptr [esi]

  007eb	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1240 : 		inc	esi

  007ed	46		 inc	 esi

; 1241 : 
; 1242 : 		// offset to opcode index
; 1243 : 		jmp	opTbl[ebx*4]

  007ee	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_div@@YAXXZ ENDP					; OP_div
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+1
$SG59414 DB	'Divide by zero', 00H
_DATA	ENDS
_TEXT	SEGMENT
?OP_mod@@YAXXZ PROC NEAR				; OP_mod

; 1249 : 	_asm {
; 1250 : 		mov	cx, ax

  007f5	66 8b c8	 mov	 cx, ax

; 1251 : 
; 1252 : 		cmp	cx, 0

  007f8	66 83 f9 00	 cmp	 cx, 0

; 1253 : 		jne	mod_ok

  007fc	75 19		 jne	 SHORT $mod_ok$59413

; 1254 : 
; 1255 : 		mov	pm.debugIP, esi

  007fe	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 1256 : 	}
; 1257 : 
; 1258 : 	msgMgr->Fatal ( "Divide by zero" );

  00804	68 00 00 00 00	 push	 OFFSET FLAT:$SG59414
  00809	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0080e	50		 push	 eax
  0080f	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00814	83 c4 08	 add	 esp, 8
$mod_ok$59413:

; 1259 : 
; 1260 : 	_asm {
; 1261 : mod_ok:
; 1262 : 		mov		ax, word ptr [edi]

  00817	66 8b 07	 mov	 ax, WORD PTR [edi]

; 1263 : 
; 1264 : #ifdef DEBUG
; 1265 : 		mov		word ptr [edi], 0
; 1266 : #endif
; 1267 : 
; 1268 : 		sub		edi, 2

  0081a	83 ef 02	 sub	 edi, 2

; 1269 : 
; 1270 : 		mov	dx, 0

  0081d	66 ba 00 00	 mov	 dx, 0

; 1271 : 		idiv	cx

  00821	66 f7 f9	 idiv	 cx

; 1272 : 		movzx	eax, dx

  00824	0f b7 c2	 movzx	 eax, dx

; 1273 : 
; 1274 : 		// get next opcode
; 1275 : 		mov	bl, byte ptr [esi]

  00827	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1276 : 		inc	esi

  00829	46		 inc	 esi

; 1277 : 
; 1278 : 		// offset to opcode index
; 1279 : 		jmp	opTbl[ebx*4]

  0082a	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_mod@@YAXXZ ENDP					; OP_mod
?OP_shr@@YAXXZ PROC NEAR				; OP_shr

; 1285 : 	_asm {
; 1286 : 	mov	ecx, eax

  00831	8b c8		 mov	 ecx, eax

; 1287 : 	movzx	eax, word ptr [edi]

  00833	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 1288 : 	sub	edi, 2

  00836	83 ef 02	 sub	 edi, 2

; 1289 : 	shr	eax, cl

  00839	d3 e8		 shr	 eax, cl

; 1290 : 
; 1291 : 	// get next opcode
; 1292 : 	mov	bl, byte ptr [esi]

  0083b	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1293 : 	inc	esi

  0083d	46		 inc	 esi

; 1294 : 
; 1295 : 	// offset to opcode index
; 1296 : 	jmp	opTbl[ebx*4]

  0083e	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_shr@@YAXXZ ENDP					; OP_shr
?OP_shl@@YAXXZ PROC NEAR				; OP_shl

; 1302 : 	_asm {
; 1303 : 	mov	ecx, eax

  00845	8b c8		 mov	 ecx, eax

; 1304 : 	movzx	eax, word ptr [edi]

  00847	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 1305 : 	sub	edi, 2

  0084a	83 ef 02	 sub	 edi, 2

; 1306 : 	shl	eax, cl

  0084d	d3 e0		 shl	 eax, cl

; 1307 : 
; 1308 : 	// get next opcode
; 1309 : 	mov	bl, byte ptr [esi]

  0084f	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1310 : 	inc	esi

  00851	46		 inc	 esi

; 1311 : 
; 1312 : 	// offset to opcode index
; 1313 : 	jmp	opTbl[ebx*4]

  00852	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_shl@@YAXXZ ENDP					; OP_shl
?OP_xor@@YAXXZ PROC NEAR				; OP_xor

; 1319 : 	_asm {
; 1320 : 	xor	ax, word ptr [edi]

  00859	66 33 07	 xor	 ax, WORD PTR [edi]

; 1321 : 	sub	edi, 2

  0085c	83 ef 02	 sub	 edi, 2

; 1322 : 
; 1323 : 	// get next opcode
; 1324 : 	mov	bl, byte ptr [esi]

  0085f	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1325 : 	inc	esi

  00861	46		 inc	 esi

; 1326 : 
; 1327 : 	// offset to opcode index
; 1328 : 	jmp	opTbl[ebx*4]

  00862	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_xor@@YAXXZ ENDP					; OP_xor
?OP_and@@YAXXZ PROC NEAR				; OP_and

; 1334 : 	_asm {
; 1335 : 	and	ax, word ptr [edi]

  00869	66 23 07	 and	 ax, WORD PTR [edi]

; 1336 : 	sub	edi, 2

  0086c	83 ef 02	 sub	 edi, 2

; 1337 : 
; 1338 : 	// get next opcode
; 1339 : 	mov	bl, byte ptr [esi]

  0086f	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1340 : 	inc	esi

  00871	46		 inc	 esi

; 1341 : 
; 1342 : 	// offset to opcode index
; 1343 : 	jmp	opTbl[ebx*4]

  00872	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_and@@YAXXZ ENDP					; OP_and
?OP_or@@YAXXZ PROC NEAR					; OP_or

; 1349 : 	_asm {
; 1350 : 	or	ax, word ptr [edi]

  00879	66 0b 07	 or	 ax, WORD PTR [edi]

; 1351 : 	sub	edi, 2

  0087c	83 ef 02	 sub	 edi, 2

; 1352 : 
; 1353 : 	// get next opcode
; 1354 : 	mov	bl, byte ptr [esi]

  0087f	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1355 : 	inc	esi

  00881	46		 inc	 esi

; 1356 : 
; 1357 : 	// offset to opcode index
; 1358 : 	jmp	opTbl[ebx*4]

  00882	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_or@@YAXXZ ENDP					; OP_or
?OP_neg@@YAXXZ PROC NEAR				; OP_neg

; 1364 : 	_asm {
; 1365 : 	neg	eax

  00889	f7 d8		 neg	 eax

; 1366 : 
; 1367 : 	// get next opcode
; 1368 : 	mov	bl, byte ptr [esi]

  0088b	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1369 : 	inc	esi

  0088d	46		 inc	 esi

; 1370 : 
; 1371 : 	// offset to opcode index
; 1372 : 	jmp	opTbl[ebx*4]

  0088e	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_neg@@YAXXZ ENDP					; OP_neg
?OP_not@@YAXXZ PROC NEAR				; OP_not

; 1378 : 	_asm {
; 1379 : 	or	ax, ax

  00895	66 0b c0	 or	 ax, ax

; 1380 : 	setz	al

  00898	0f 94 c0	 sete	 al

; 1381 : 	movzx	eax, al

  0089b	0f b6 c0	 movzx	 eax, al

; 1382 : 
; 1383 : 	// get next opcode
; 1384 : 	mov	bl, byte ptr [esi]

  0089e	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1385 : 	inc	esi

  008a0	46		 inc	 esi

; 1386 : 
; 1387 : 	// offset to opcode index
; 1388 : 	jmp	opTbl[ebx*4]

  008a1	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_not@@YAXXZ ENDP					; OP_not
?OP_eq@@YAXXZ PROC NEAR					; OP_eq

; 1394 : 	_asm {
; 1395 : 		mov		cx, word ptr [edi]

  008a8	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1396 : 
; 1397 : #ifdef DEBUG
; 1398 : 		mov		word ptr [edi], 0
; 1399 : #endif
; 1400 : 
; 1401 : 		sub		edi, 2

  008ab	83 ef 02	 sub	 edi, 2

; 1402 : 
; 1403 : 	mov	pm.prevAcc, eax

  008ae	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1404 : 	cmp	ax, cx

  008b3	66 3b c1	 cmp	 ax, cx

; 1405 : 	sete	al

  008b6	0f 94 c0	 sete	 al

; 1406 : 	movzx	eax, al

  008b9	0f b6 c0	 movzx	 eax, al

; 1407 : 
; 1408 : 	// get next opcode
; 1409 : 	mov	bl, byte ptr [esi]

  008bc	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1410 : 	inc	esi

  008be	46		 inc	 esi

; 1411 : 
; 1412 : 	// offset to opcode index
; 1413 : 	jmp	opTbl[ebx*4]

  008bf	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_eq@@YAXXZ ENDP					; OP_eq
?OP_ne@@YAXXZ PROC NEAR					; OP_ne

; 1419 : 	_asm {
; 1420 : 		mov		cx, word ptr [edi]

  008c6	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1421 : 
; 1422 : #ifdef DEBUG
; 1423 : 		mov		word ptr [edi], 0
; 1424 : #endif
; 1425 : 
; 1426 : 		sub		edi, 2

  008c9	83 ef 02	 sub	 edi, 2

; 1427 : 
; 1428 : 	mov	pm.prevAcc, eax

  008cc	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1429 : 	cmp	ax, cx

  008d1	66 3b c1	 cmp	 ax, cx

; 1430 : 	setne	al

  008d4	0f 95 c0	 setne	 al

; 1431 : 	movzx	eax, al

  008d7	0f b6 c0	 movzx	 eax, al

; 1432 : 
; 1433 : 	// get next opcode
; 1434 : 	mov	bl, byte ptr [esi]

  008da	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1435 : 	inc	esi

  008dc	46		 inc	 esi

; 1436 : 
; 1437 : 	// offset to opcode index
; 1438 : 	jmp	opTbl[ebx*4]

  008dd	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ne@@YAXXZ ENDP					; OP_ne
?OP_gt@@YAXXZ PROC NEAR					; OP_gt

; 1444 : 	_asm {
; 1445 : 		mov		cx, word ptr [edi]

  008e4	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1446 : 
; 1447 : #ifdef DEBUG
; 1448 : 		mov		word ptr [edi], 0
; 1449 : #endif
; 1450 : 
; 1451 : 		sub		edi, 2

  008e7	83 ef 02	 sub	 edi, 2

; 1452 : 
; 1453 : 	mov	pm.prevAcc, eax

  008ea	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1454 : 	cmp	ax, cx

  008ef	66 3b c1	 cmp	 ax, cx

; 1455 : 	setl	al

  008f2	0f 9c c0	 setl	 al

; 1456 : 	movzx	eax, al

  008f5	0f b6 c0	 movzx	 eax, al

; 1457 : 
; 1458 : 	// get next opcode
; 1459 : 	mov	bl, byte ptr [esi]

  008f8	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1460 : 	inc	esi

  008fa	46		 inc	 esi

; 1461 : 
; 1462 : 	// offset to opcode index
; 1463 : 	jmp	opTbl[ebx*4]

  008fb	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_gt@@YAXXZ ENDP					; OP_gt
?OP_ge@@YAXXZ PROC NEAR					; OP_ge

; 1469 : 	_asm {
; 1470 : 		mov		cx, word ptr [edi]

  00902	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1471 : 
; 1472 : #ifdef DEBUG
; 1473 : 		mov		word ptr [edi], 0
; 1474 : #endif
; 1475 : 
; 1476 : 		sub		edi, 2

  00905	83 ef 02	 sub	 edi, 2

; 1477 : 
; 1478 : 	mov	pm.prevAcc, eax

  00908	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1479 : 	cmp	ax, cx

  0090d	66 3b c1	 cmp	 ax, cx

; 1480 : 	setle	al

  00910	0f 9e c0	 setle	 al

; 1481 : 	movzx	eax, al

  00913	0f b6 c0	 movzx	 eax, al

; 1482 : 
; 1483 : 	// get next opcode
; 1484 : 	mov	bl, byte ptr [esi]

  00916	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1485 : 	inc	esi

  00918	46		 inc	 esi

; 1486 : 
; 1487 : 	// offset to opcode index
; 1488 : 	jmp	opTbl[ebx*4]

  00919	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ge@@YAXXZ ENDP					; OP_ge
?OP_lt@@YAXXZ PROC NEAR					; OP_lt

; 1494 : 	_asm {
; 1495 : 		mov		cx, word ptr [edi]

  00920	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1496 : 
; 1497 : #ifdef DEBUG
; 1498 : 		mov		word ptr [edi], 0
; 1499 : #endif
; 1500 : 
; 1501 : 		sub		edi, 2

  00923	83 ef 02	 sub	 edi, 2

; 1502 : 
; 1503 : 	mov	pm.prevAcc, eax

  00926	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1504 : 	cmp	ax, cx

  0092b	66 3b c1	 cmp	 ax, cx

; 1505 : 	setg	al

  0092e	0f 9f c0	 setg	 al

; 1506 : 	movzx	eax, al

  00931	0f b6 c0	 movzx	 eax, al

; 1507 : 
; 1508 : 	// get next opcode
; 1509 : 	mov	bl, byte ptr [esi]

  00934	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1510 : 	inc	esi

  00936	46		 inc	 esi

; 1511 : 
; 1512 : 	// offset to opcode index
; 1513 : 	jmp	opTbl[ebx*4]

  00937	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lt@@YAXXZ ENDP					; OP_lt
?OP_le@@YAXXZ PROC NEAR					; OP_le

; 1519 : 	_asm {
; 1520 : 		mov		cx, word ptr [edi]

  0093e	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1521 : 
; 1522 : #ifdef DEBUG
; 1523 : 		mov		word ptr [edi], 0
; 1524 : #endif
; 1525 : 
; 1526 : 		sub		edi, 2

  00941	83 ef 02	 sub	 edi, 2

; 1527 : 
; 1528 : 	mov	pm.prevAcc, eax

  00944	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1529 : 	cmp	ax, cx

  00949	66 3b c1	 cmp	 ax, cx

; 1530 : 	setge	al

  0094c	0f 9d c0	 setge	 al

; 1531 : 	movzx	eax, al

  0094f	0f b6 c0	 movzx	 eax, al

; 1532 : 
; 1533 : 	// get next opcode
; 1534 : 	mov	bl, byte ptr [esi]

  00952	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1535 : 	inc	esi

  00954	46		 inc	 esi

; 1536 : 
; 1537 : 	// offset to opcode index
; 1538 : 	jmp	opTbl[ebx*4]

  00955	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_le@@YAXXZ ENDP					; OP_le
?OP_ugt@@YAXXZ PROC NEAR				; OP_ugt

; 1544 : 	_asm {
; 1545 : 		mov		cx, word ptr [edi]

  0095c	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1546 : 
; 1547 : #ifdef DEBUG
; 1548 : 		mov		word ptr [edi], 0
; 1549 : #endif
; 1550 : 
; 1551 : 		sub		edi, 2

  0095f	83 ef 02	 sub	 edi, 2

; 1552 : 
; 1553 : 	mov	pm.prevAcc, eax

  00962	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1554 : 	cmp	ax, cx

  00967	66 3b c1	 cmp	 ax, cx

; 1555 : 	setb	al

  0096a	0f 92 c0	 setb	 al

; 1556 : 	movzx	eax, al

  0096d	0f b6 c0	 movzx	 eax, al

; 1557 : 
; 1558 : 	// get next opcode
; 1559 : 	mov	bl, byte ptr [esi]

  00970	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1560 : 	inc	esi

  00972	46		 inc	 esi

; 1561 : 
; 1562 : 	// offset to opcode index
; 1563 : 	jmp	opTbl[ebx*4]

  00973	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ugt@@YAXXZ ENDP					; OP_ugt
?OP_uge@@YAXXZ PROC NEAR				; OP_uge

; 1569 : 	_asm {
; 1570 : 		mov		cx, word ptr [edi]

  0097a	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1571 : 
; 1572 : #ifdef DEBUG
; 1573 : 		mov		word ptr [edi], 0
; 1574 : #endif
; 1575 : 
; 1576 : 		sub		edi, 2

  0097d	83 ef 02	 sub	 edi, 2

; 1577 : 
; 1578 : 	mov	pm.prevAcc, eax

  00980	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1579 : 	cmp	ax, cx

  00985	66 3b c1	 cmp	 ax, cx

; 1580 : 	setbe	al

  00988	0f 96 c0	 setbe	 al

; 1581 : 	movzx	eax, al

  0098b	0f b6 c0	 movzx	 eax, al

; 1582 : 
; 1583 : 	// get next opcode
; 1584 : 	mov	bl, byte ptr [esi]

  0098e	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1585 : 	inc	esi

  00990	46		 inc	 esi

; 1586 : 
; 1587 : 	// offset to opcode index
; 1588 : 	jmp	opTbl[ebx*4]

  00991	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_uge@@YAXXZ ENDP					; OP_uge
?OP_ult@@YAXXZ PROC NEAR				; OP_ult

; 1594 : 	_asm {
; 1595 : 		mov		cx, word ptr [edi]

  00998	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1596 : 
; 1597 : #ifdef DEBUG
; 1598 : 		mov		word ptr [edi], 0
; 1599 : #endif
; 1600 : 
; 1601 : 		sub		edi, 2

  0099b	83 ef 02	 sub	 edi, 2

; 1602 : 
; 1603 : 	mov	pm.prevAcc, eax

  0099e	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1604 : 	cmp	ax, cx

  009a3	66 3b c1	 cmp	 ax, cx

; 1605 : 	seta	al

  009a6	0f 97 c0	 seta	 al

; 1606 : 	movzx	eax, al

  009a9	0f b6 c0	 movzx	 eax, al

; 1607 : 
; 1608 : 	// get next opcode
; 1609 : 	mov	bl, byte ptr [esi]

  009ac	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1610 : 	inc	esi

  009ae	46		 inc	 esi

; 1611 : 
; 1612 : 	// offset to opcode index
; 1613 : 	jmp	opTbl[ebx*4]

  009af	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ult@@YAXXZ ENDP					; OP_ult
?OP_ule@@YAXXZ PROC NEAR				; OP_ule

; 1619 : 	_asm {
; 1620 : 		mov		cx, word ptr [edi]

  009b6	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1621 : 
; 1622 : #ifdef DEBUG
; 1623 : 		mov		word ptr [edi], 0
; 1624 : #endif
; 1625 : 
; 1626 : 		sub		edi, 2

  009b9	83 ef 02	 sub	 edi, 2

; 1627 : 
; 1628 : 	mov	pm.prevAcc, eax

  009bc	a3 08 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+8, eax

; 1629 : 	cmp	ax, cx

  009c1	66 3b c1	 cmp	 ax, cx

; 1630 : 	setae	al

  009c4	0f 93 c0	 setae	 al

; 1631 : 	movzx	eax, al

  009c7	0f b6 c0	 movzx	 eax, al

; 1632 : 
; 1633 : 	// get next opcode
; 1634 : 	mov	bl, byte ptr [esi]

  009ca	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1635 : 	inc	esi

  009cc	46		 inc	 esi

; 1636 : 
; 1637 : 	// offset to opcode index
; 1638 : 	jmp	opTbl[ebx*4]

  009cd	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ule@@YAXXZ ENDP					; OP_ule
?OP_bt_byte@@YAXXZ PROC NEAR				; OP_bt_byte

; 1644 : 	_asm {
; 1645 : 	cmp	ax, 0

  009d4	66 3d 00 00	 cmp	 ax, 0

; 1646 : 	jz	OP_bt_byte_SKIP

  009d8	74 05		 je	 SHORT $OP_bt_byte_SKIP$59451

; 1647 : 
; 1648 : 	movsx	ebx, byte ptr [esi]

  009da	0f be 1e	 movsx	 ebx, BYTE PTR [esi]

; 1649 : 	add	esi, ebx

  009dd	03 f3		 add	 esi, ebx
$OP_bt_byte_SKIP$59451:

; 1650 : 
; 1651 : OP_bt_byte_SKIP:
; 1652 : 	// get next opcode
; 1653 : 	movzx	ebx, byte ptr [esi + 1]

  009df	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 1654 : 	add	esi, 2

  009e3	83 c6 02	 add	 esi, 2

; 1655 : 
; 1656 : 	// offset to opcode index
; 1657 : 	jmp	opTbl[ebx*4]

  009e6	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_bt_byte@@YAXXZ ENDP					; OP_bt_byte
?OP_bt_word@@YAXXZ PROC NEAR				; OP_bt_word

; 1662 : 	_asm {
; 1663 : 	cmp	ax, 0

  009ed	66 3d 00 00	 cmp	 ax, 0

; 1664 : 	jz	OP_bt_word_SKIP

  009f1	74 05		 je	 SHORT $OP_bt_word_SKIP$59454

; 1665 : 
; 1666 : 	movsx	ebx, word ptr [esi]

  009f3	0f bf 1e	 movsx	 ebx, WORD PTR [esi]

; 1667 : 	add	esi, ebx

  009f6	03 f3		 add	 esi, ebx
$OP_bt_word_SKIP$59454:

; 1668 : 
; 1669 : OP_bt_word_SKIP:
; 1670 : 	// get next opcode
; 1671 : 	movzx	ebx, byte ptr [esi + 2]

  009f8	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 1672 : 	add	esi, 3

  009fc	83 c6 03	 add	 esi, 3

; 1673 : 
; 1674 : 	// offset to opcode index
; 1675 : 	jmp	opTbl[ebx*4]

  009ff	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_bt_word@@YAXXZ ENDP					; OP_bt_word
?OP_bnt_byte@@YAXXZ PROC NEAR				; OP_bnt_byte

; 1681 : 	_asm {
; 1682 : 	cmp	ax, 0

  00a06	66 3d 00 00	 cmp	 ax, 0

; 1683 : 	jnz	OP_bnt_byte_SKIP

  00a0a	75 05		 jne	 SHORT $OP_bnt_byte_SKIP$59457

; 1684 : 
; 1685 : 	movsx	ebx, byte ptr [esi]

  00a0c	0f be 1e	 movsx	 ebx, BYTE PTR [esi]

; 1686 : 	add	esi, ebx

  00a0f	03 f3		 add	 esi, ebx
$OP_bnt_byte_SKIP$59457:

; 1687 : 
; 1688 : OP_bnt_byte_SKIP:
; 1689 : 	// get next opcode
; 1690 : 	movzx	ebx, byte ptr [esi + 1]

  00a11	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 1691 : 	add	esi, 2

  00a15	83 c6 02	 add	 esi, 2

; 1692 : 
; 1693 : 	// offset to opcode index
; 1694 : 	jmp	opTbl[ebx*4]

  00a18	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_bnt_byte@@YAXXZ ENDP				; OP_bnt_byte
?OP_bnt_word@@YAXXZ PROC NEAR				; OP_bnt_word

; 1699 : 	_asm {
; 1700 : 	cmp	ax, 0

  00a1f	66 3d 00 00	 cmp	 ax, 0

; 1701 : 	jnz	OP_bnt_word_SKIP

  00a23	75 05		 jne	 SHORT $OP_bnt_word_SKIP$59460

; 1702 : 
; 1703 : 	movsx	ebx, word ptr [esi]

  00a25	0f bf 1e	 movsx	 ebx, WORD PTR [esi]

; 1704 : 	add	esi, ebx

  00a28	03 f3		 add	 esi, ebx
$OP_bnt_word_SKIP$59460:

; 1705 : 
; 1706 : OP_bnt_word_SKIP:
; 1707 : 	// get next opcode
; 1708 : 	movzx	ebx, byte ptr [esi + 2]

  00a2a	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 1709 : 	add	esi, 3

  00a2e	83 c6 03	 add	 esi, 3

; 1710 : 
; 1711 : 	// offset to opcode index
; 1712 : 	jmp	opTbl[ebx*4]

  00a31	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_bnt_word@@YAXXZ ENDP				; OP_bnt_word
?OP_jmp_byte@@YAXXZ PROC NEAR				; OP_jmp_byte

; 1718 : 	_asm {
; 1719 : 	movsx	ebx, byte ptr [esi]

  00a38	0f be 1e	 movsx	 ebx, BYTE PTR [esi]

; 1720 : 	add	esi, ebx

  00a3b	03 f3		 add	 esi, ebx

; 1721 : 
; 1722 : 	// get next opcode
; 1723 : 	movzx	ebx, byte ptr [esi + 1]

  00a3d	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 1724 : 	add	esi, 2

  00a41	83 c6 02	 add	 esi, 2

; 1725 : 
; 1726 : 	// offset to opcode index
; 1727 : 	jmp	opTbl[ebx*4]

  00a44	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_jmp_byte@@YAXXZ ENDP				; OP_jmp_byte
?OP_jmp_word@@YAXXZ PROC NEAR				; OP_jmp_word

; 1732 : 	_asm {
; 1733 : 	movsx	ebx, word ptr [esi]

  00a4b	0f bf 1e	 movsx	 ebx, WORD PTR [esi]

; 1734 : 	add	esi, ebx

  00a4e	03 f3		 add	 esi, ebx

; 1735 : 
; 1736 : 	// get next opcode
; 1737 : 	movzx	ebx, byte ptr [esi + 2]

  00a50	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 1738 : 	add	esi, 3

  00a54	83 c6 03	 add	 esi, 3

; 1739 : 
; 1740 : 	// offset to opcode index
; 1741 : 	jmp	opTbl[ebx*4]

  00a57	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_jmp_word@@YAXXZ ENDP				; OP_jmp_word
?OP_loadi_byte@@YAXXZ PROC NEAR				; OP_loadi_byte

; 1747 : 	_asm {
; 1748 : 	movsx	eax, byte ptr [esi]

  00a5e	0f be 06	 movsx	 eax, BYTE PTR [esi]

; 1749 : 
; 1750 : 	// get next opcode
; 1751 : 	mov	bl, byte ptr [esi + 1]

  00a61	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 1752 : 	add	esi, 2

  00a64	83 c6 02	 add	 esi, 2

; 1753 : 
; 1754 : 	// offset to opcode index
; 1755 : 	jmp	opTbl[ebx*4]

  00a67	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_loadi_byte@@YAXXZ ENDP				; OP_loadi_byte
?OP_loadi_word@@YAXXZ PROC NEAR				; OP_loadi_word

; 1760 : 	_asm {
; 1761 : 	movsx	eax, word ptr [esi]

  00a6e	0f bf 06	 movsx	 eax, WORD PTR [esi]

; 1762 : 
; 1763 : 	// get next opcode
; 1764 : 	mov	bl, byte ptr [esi + 2]

  00a71	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 1765 : 	add	esi, 3

  00a74	83 c6 03	 add	 esi, 3

; 1766 : 
; 1767 : 	// offset to opcode index
; 1768 : 	jmp	opTbl[ebx*4]

  00a77	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_loadi_word@@YAXXZ ENDP				; OP_loadi_word
?OP_push@@YAXXZ PROC NEAR				; OP_push

; 1774 : 	_asm {
; 1775 : 		add		edi, 2					//	ppush

  00a7e	83 c7 02	 add	 edi, 2

; 1776 : 		mov		word ptr [edi], ax

  00a81	66 89 07	 mov	 WORD PTR [edi], ax

; 1777 : 
; 1778 : 	// get next opcode
; 1779 : 	mov	bl, byte ptr [esi]

  00a84	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1780 : 	inc	esi

  00a86	46		 inc	 esi

; 1781 : 
; 1782 : 	// offset to opcode index
; 1783 : 	jmp	opTbl[ebx*4]

  00a87	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_push@@YAXXZ ENDP					; OP_push
?OP_pushi_byte@@YAXXZ PROC NEAR				; OP_pushi_byte

; 1789 : 	_asm {
; 1790 : 	movsx	cx, byte ptr [esi]

  00a8e	66 0f be 0e	 movsx	 cx, BYTE PTR [esi]

; 1791 : 		add		edi, 2					//	ppush

  00a92	83 c7 02	 add	 edi, 2

; 1792 : 		mov		word ptr [edi], cx

  00a95	66 89 0f	 mov	 WORD PTR [edi], cx

; 1793 : 
; 1794 : 
; 1795 : 	// get next opcode
; 1796 : 	mov	bl, byte ptr [esi + 1]

  00a98	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 1797 : 	add	esi, 2

  00a9b	83 c6 02	 add	 esi, 2

; 1798 : 
; 1799 : 	// offset to opcode index
; 1800 : 	jmp	opTbl[ebx*4]

  00a9e	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_pushi_byte@@YAXXZ ENDP				; OP_pushi_byte
?OP_pushi_word@@YAXXZ PROC NEAR				; OP_pushi_word

; 1805 : 	_asm {
; 1806 : 	mov	cx, word ptr [esi]

  00aa5	66 8b 0e	 mov	 cx, WORD PTR [esi]

; 1807 : 		add		edi, 2					//	ppush

  00aa8	83 c7 02	 add	 edi, 2

; 1808 : 		mov		word ptr [edi], cx

  00aab	66 89 0f	 mov	 WORD PTR [edi], cx

; 1809 : 
; 1810 : 	// get next opcode
; 1811 : 	mov	bl, byte ptr [esi + 2]

  00aae	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 1812 : 	add	esi, 3

  00ab1	83 c6 03	 add	 esi, 3

; 1813 : 
; 1814 : 	// offset to opcode index
; 1815 : 	jmp	opTbl[ebx*4]

  00ab4	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_pushi_word@@YAXXZ ENDP				; OP_pushi_word
?OP_toss@@YAXXZ PROC NEAR				; OP_toss

; 1821 : 	_asm {
; 1822 : 	mov	pm.debugIP, esi

  00abb	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 1823 : 	sub	edi, 2

  00ac1	83 ef 02	 sub	 edi, 2

; 1824 : 
; 1825 : 	// get next opcode
; 1826 : 	mov	bl, byte ptr [esi]

  00ac4	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1827 : 	inc	esi

  00ac6	46		 inc	 esi

; 1828 : 
; 1829 : 	// offset to opcode index
; 1830 : 	jmp	opTbl[ebx*4]

  00ac7	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_toss@@YAXXZ ENDP					; OP_toss
?OP_dup@@YAXXZ PROC NEAR				; OP_dup

; 1836 : 	_asm {
; 1837 : 		mov		cx, word ptr [edi]

  00ace	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 1838 : 
; 1839 : 		add		edi, 2					//	ppush

  00ad1	83 c7 02	 add	 edi, 2

; 1840 : 		mov		word ptr [edi], cx

  00ad4	66 89 0f	 mov	 WORD PTR [edi], cx

; 1841 : 
; 1842 : 	// get next opcode
; 1843 : 	mov	bl, byte ptr [esi]

  00ad7	8a 1e		 mov	 bl, BYTE PTR [esi]

; 1844 : 	inc	esi

  00ad9	46		 inc	 esi

; 1845 : 
; 1846 : 	// offset to opcode index
; 1847 : 	jmp	opTbl[ebx*4]

  00ada	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dup@@YAXXZ ENDP					; OP_dup
?OP_link_byte@@YAXXZ PROC NEAR				; OP_link_byte

; 1853 : 	_asm {
; 1854 : 	movzx	ecx, byte ptr [esi]

  00ae1	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 1855 : 	shl	ecx, 1

  00ae4	d1 e1		 shl	 ecx, 1

; 1856 : 	sub	ecx, 2

  00ae6	83 e9 02	 sub	 ecx, 2

; 1857 : 
; 1858 : 	add	edi, 2

  00ae9	83 c7 02	 add	 edi, 2

; 1859 : 	mov	pm.TempPtr, edi

  00aec	89 3d 10 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+16, edi

; 1860 : 
; 1861 : 	add	edi, ecx

  00af2	03 f9		 add	 edi, ecx

; 1862 : 
; 1863 : 	// get next opcode
; 1864 : 	mov	bl, byte ptr [esi + 1]

  00af4	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 1865 : 	add	esi, 2

  00af7	83 c6 02	 add	 esi, 2

; 1866 : 
; 1867 : 	// offset to opcode index
; 1868 : 	jmp	opTbl[ebx*4]

  00afa	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_link_byte@@YAXXZ ENDP				; OP_link_byte
?OP_link_word@@YAXXZ PROC NEAR				; OP_link_word

; 1873 : 	_asm {
; 1874 : 	movzx	ecx, word ptr [esi]

  00b01	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 1875 : 	shl	ecx, 1

  00b04	d1 e1		 shl	 ecx, 1

; 1876 : 	sub	ecx, 2

  00b06	83 e9 02	 sub	 ecx, 2

; 1877 : 
; 1878 : 	add	edi, 2

  00b09	83 c7 02	 add	 edi, 2

; 1879 : 	mov	pm.TempPtr, edi

  00b0c	89 3d 10 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+16, edi

; 1880 : 
; 1881 : 	add	edi, ecx

  00b12	03 f9		 add	 edi, ecx

; 1882 : 
; 1883 : 	// get next opcode
; 1884 : 	mov	bl, byte ptr [esi + 2]

  00b14	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 1885 : 	add	esi, 3

  00b17	83 c6 03	 add	 esi, 3

; 1886 : 
; 1887 : 	// offset to opcode index
; 1888 : 	jmp	opTbl[ebx*4]

  00b1a	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_link_word@@YAXXZ ENDP				; OP_link_word
?OP_call_byte@@YAXXZ PROC NEAR				; OP_call_byte

; 1893 : 	_asm {
; 1894 : 	mov	pm.debugIP, esi

  00b21	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 1895 : 
; 1896 : 	movsx	ebx, byte ptr [esi]

  00b27	0f be 1e	 movsx	 ebx, BYTE PTR [esi]

; 1897 : 	movsx	ecx, word ptr [esi + 1]

  00b2a	0f bf 4e 01	 movsx	 ecx, WORD PTR [esi+1]

; 1898 : 	add	esi, 3

  00b2e	83 c6 03	 add	 esi, 3

; 1899 : 
; 1900 : // save the instruction pointer and point it to the instruction
; 1901 : // to call
; 1902 : //	pushIP
; 1903 : 		push	ebx

  00b31	53		 push	 ebx

; 1904 : 		movzx	ebx, pm.ipPtr

  00b32	0f b7 1d 3e 01
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+318

; 1905 : 		mov		dword ptr [pm.ipStack + ebx], esi

  00b39	89 b3 40 01 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A[ebx+320], esi

; 1906 : 		add		pm.ipPtr, 4

  00b3f	66 83 05 3e 01
	00 00 04	 add	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 1907 : 		pop		ebx

  00b47	5b		 pop	 ebx

; 1908 : //
; 1909 : 
; 1910 : 	push	pm.ipMemID

  00b48	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 1911 : 	push	pm.ipMemID

  00b4f	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 1912 : 
; 1913 : 	push	pm.ip

  00b56	ff 35 38 01 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+312

; 1914 : 
; 1915 : 	add	ebx, esi

  00b5c	03 de		 add	 ebx, esi

; 1916 : 	
; 1917 : 	call	pmCall

  00b5e	e8 00 00 00 00	 call	 ?pmCall@@YAXXZ		; pmCall

; 1918 : 
; 1919 : 	// restore the instruction pointer 
; 1920 : 	pop	pm.ip

  00b63	8f 05 38 01 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+312

; 1921 : 
; 1922 : 	pop	pm.ipMemID

  00b69	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 1923 : 	pop	pm.ipMemID

  00b70	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 1924 : 
; 1925 : //		popIP
; 1926 : 		push	edx

  00b77	52		 push	 edx

; 1927 : 		sub		pm.ipPtr, 4

  00b78	66 83 2d 3e 01
	00 00 04	 sub	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 1928 : 		movzx	edx, pm.ipPtr

  00b80	0f b7 15 3e 01
	00 00		 movzx	 edx, WORD PTR ?pm@@3VPMachine@@A+318

; 1929 : 		mov		esi, dword ptr [pm.ipStack + edx]

  00b87	8b b2 40 01 00
	00		 mov	 esi, DWORD PTR ?pm@@3VPMachine@@A[edx+320]

; 1930 : 		pop		edx

  00b8d	5a		 pop	 edx

; 1931 : //
; 1932 : 
; 1933 : 	// get next opcode
; 1934 : 	movzx	ebx, byte ptr [esi]

  00b8e	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 1935 : 	inc	esi

  00b91	46		 inc	 esi

; 1936 : 
; 1937 : 	// offset to opcode index
; 1938 : 	jmp	opTbl[ebx*4]

  00b92	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_call_byte@@YAXXZ ENDP				; OP_call_byte
?OP_call_word@@YAXXZ PROC NEAR				; OP_call_word

; 1944 : 	_asm {
; 1945 : 	mov	pm.debugIP, esi

  00b99	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 1946 : 
; 1947 : 	movsx	ebx, word ptr [esi]

  00b9f	0f bf 1e	 movsx	 ebx, WORD PTR [esi]

; 1948 : 	movsx	ecx, word ptr [esi + 2]

  00ba2	0f bf 4e 02	 movsx	 ecx, WORD PTR [esi+2]

; 1949 : 	add	esi, 4

  00ba6	83 c6 04	 add	 esi, 4

; 1950 : 
; 1951 : 	// save the instruction pointer and point it to the instruction
; 1952 : 	// to call
; 1953 : //	pushIP
; 1954 : 		push	ebx

  00ba9	53		 push	 ebx

; 1955 : 		movzx	ebx, pm.ipPtr

  00baa	0f b7 1d 3e 01
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+318

; 1956 : 		mov		dword ptr [pm.ipStack + ebx], esi

  00bb1	89 b3 40 01 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A[ebx+320], esi

; 1957 : 		add		pm.ipPtr, 4

  00bb7	66 83 05 3e 01
	00 00 04	 add	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 1958 : 		pop		ebx

  00bbf	5b		 pop	 ebx

; 1959 : //
; 1960 : 
; 1961 : 	push	pm.ipMemID

  00bc0	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 1962 : 	push	pm.ipMemID

  00bc7	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 1963 : 
; 1964 : 	push	pm.ip

  00bce	ff 35 38 01 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+312

; 1965 : 
; 1966 : 	add	ebx, esi

  00bd4	03 de		 add	 ebx, esi

; 1967 : 	
; 1968 : 	call	pmCall

  00bd6	e8 00 00 00 00	 call	 ?pmCall@@YAXXZ		; pmCall

; 1969 : 
; 1970 : 	// restore the instruction pointer 
; 1971 : 	pop	pm.ip

  00bdb	8f 05 38 01 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+312

; 1972 : 
; 1973 : 	pop	pm.ipMemID

  00be1	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 1974 : 	pop	pm.ipMemID

  00be8	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 1975 : //		popIP
; 1976 : 		push	edx

  00bef	52		 push	 edx

; 1977 : 		sub		pm.ipPtr, 4

  00bf0	66 83 2d 3e 01
	00 00 04	 sub	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 1978 : 		movzx	edx, pm.ipPtr

  00bf8	0f b7 15 3e 01
	00 00		 movzx	 edx, WORD PTR ?pm@@3VPMachine@@A+318

; 1979 : 		mov		esi, dword ptr [pm.ipStack + edx]

  00bff	8b b2 40 01 00
	00		 mov	 esi, DWORD PTR ?pm@@3VPMachine@@A[edx+320]

; 1980 : 		pop		edx

  00c05	5a		 pop	 edx

; 1981 : //
; 1982 : 
; 1983 : 	// get next opcode
; 1984 : 	movzx	ebx, byte ptr [esi]

  00c06	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 1985 : 	inc	esi

  00c09	46		 inc	 esi

; 1986 : 
; 1987 : 	// offset to opcode index
; 1988 : 	jmp	opTbl[ebx*4]

  00c0a	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_call_word@@YAXXZ ENDP				; OP_call_word
_TEXT	ENDS
EXTRN	?kernelCalls@@3PAUKernelCall@@A:BYTE		; kernelCalls
_DATA	SEGMENT
	ORG $+1
$SG59490 DB	'PMachine stack has been overwritten! (ptr = 0x%x, end = '
	DB	'0x%x)', 00H
_DATA	ENDS
_TEXT	SEGMENT
?OP_callk_byte@@YAXXZ PROC NEAR				; OP_callk_byte

; 1994 : 	_asm {
; 1995 : 		mov		pm.debugIP, esi

  00c11	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 1996 : 
; 1997 : 		// point to the beginning of arguments
; 1998 : 		mov		ebx, edi

  00c17	8b df		 mov	 ebx, edi

; 1999 : 
; 2000 : 		movzx	edx, pm.RestArgs

  00c19	0f b7 15 22 00
	00 00		 movzx	 edx, WORD PTR ?pm@@3VPMachine@@A+34

; 2001 : 
; 2002 : 		movzx	ecx, word ptr [esi + 1]

  00c20	0f b7 4e 01	 movzx	 ecx, WORD PTR [esi+1]

; 2003 : 		add		ecx, edx

  00c24	03 ca		 add	 ecx, edx

; 2004 : 
; 2005 : 		sub		ebx, ecx

  00c26	2b d9		 sub	 ebx, ecx

; 2006 : 
; 2007 : 		// adjust number of arguments to include pmRestArgs
; 2008 : 		shr		edx, 1

  00c28	d1 ea		 shr	 edx, 1

; 2009 : 		add		word ptr [ebx], dx

  00c2a	66 01 13	 add	 WORD PTR [ebx], dx

; 2010 : 
; 2011 : 		// get the kernel call entry number
; 2012 : 		movzx	edx, byte ptr [esi]

  00c2d	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 2013 : 		add		esi, 3

  00c30	83 c6 03	 add	 esi, 3

; 2014 : 
; 2015 : 		mov		ecx, edx

  00c33	8b ca		 mov	 ecx, edx

; 2016 : 		shl		edx, 3

  00c35	c1 e2 03	 shl	 edx, 3

; 2017 : 		shl		ecx, 2

  00c38	c1 e1 02	 shl	 ecx, 2

; 2018 : 		add		edx, ecx

  00c3b	03 d1		 add	 edx, ecx

; 2019 : 
; 2020 : 		mov		pm.RestArgs, 0

  00c3d	66 c7 05 22 00
	00 00 00 00	 mov	 WORD PTR ?pm@@3VPMachine@@A+34, 0

; 2021 : 
; 2022 : 		// save the pmachine state
; 2023 : 		mov		pm.acc, eax

  00c46	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2024 : 		mov		pm.StackPtr, edi

  00c4b	89 3d 0c 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+12, edi

; 2025 : 
; 2026 : //	pushIP
; 2027 : 		push	ebx

  00c51	53		 push	 ebx

; 2028 : 		movzx	ebx, pm.ipPtr

  00c52	0f b7 1d 3e 01
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+318

; 2029 : 		mov		dword ptr [pm.ipStack + ebx], esi

  00c59	89 b3 40 01 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A[ebx+320], esi

; 2030 : 		add		pm.ipPtr, 4

  00c5f	66 83 05 3e 01
	00 00 04	 add	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 2031 : 		pop		ebx

  00c67	5b		 pop	 ebx

; 2032 : //
; 2033 : 
; 2034 : 		push	pm.ipMemID

  00c68	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 2035 : 		push	pm.ipMemID

  00c6f	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 2036 : 
; 2037 : 		push	pm.ip

  00c76	ff 35 38 01 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+312

; 2038 : 
; 2039 : 		push	ebx

  00c7c	53		 push	 ebx

; 2040 : 		push	ebx

  00c7d	53		 push	 ebx

; 2041 : 
; 2042 : 
; 2043 : 		// call the kernel function
; 2044 : 		call	kernelCalls[edx]

  00c7e	ff 92 00 00 00
	00		 call	 DWORD PTR ?kernelCalls@@3PAUKernelCall@@A[edx]

; 2045 : 
; 2046 : 		// restore the pmachine stack as well -- nifty shortcut
; 2047 : 		pop		edi

  00c84	5f		 pop	 edi

; 2048 : 		pop		edi

  00c85	5f		 pop	 edi

; 2049 : 		sub		edi, 2

  00c86	83 ef 02	 sub	 edi, 2

; 2050 : 
; 2051 : 		// restore the pmachine state
; 2052 : 		pop		pm.ip

  00c89	8f 05 38 01 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+312

; 2053 : 		pop		pm.ipMemID

  00c8f	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 2054 : 		pop		pm.ipMemID

  00c96	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 2055 : 
; 2056 : //		popIP
; 2057 : 		push	edx

  00c9d	52		 push	 edx

; 2058 : 		sub		pm.ipPtr, 4

  00c9e	66 83 2d 3e 01
	00 00 04	 sub	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 2059 : 		movzx	edx, pm.ipPtr

  00ca6	0f b7 15 3e 01
	00 00		 movzx	 edx, WORD PTR ?pm@@3VPMachine@@A+318

; 2060 : 		mov		esi, dword ptr [pm.ipStack + edx]

  00cad	8b b2 40 01 00
	00		 mov	 esi, DWORD PTR ?pm@@3VPMachine@@A[edx+320]

; 2061 : 		pop		edx

  00cb3	5a		 pop	 edx

; 2062 : //
; 2063 : 
; 2064 : 		// now the accumulator
; 2065 : 		mov		eax, pm.acc

  00cb4	a1 04 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+4

; 2066 : 		movsx	eax, ax

  00cb9	0f bf c0	 movsx	 eax, ax

; 2067 : 	
; 2068 : 		push	ebx

  00cbc	53		 push	 ebx

; 2069 : 		lea		ebx, pmStack

  00cbd	8d 1d 00 00 00
	00		 lea	 ebx, DWORD PTR ?pmStack@@3PAHA

; 2070 : 		add		ebx, 20476

  00cc3	81 c3 fc 4f 00
	00		 add	 ebx, 20476		; 00004ffcH

; 2071 : 		cmp		[ebx], 1599554882

  00cc9	80 3b 42	 cmp	 BYTE PTR [ebx], 66	; 00000042H

; 2072 : 		je		__ckb_stk_ok

  00ccc	74 2d		 je	 SHORT $__ckb_stk_ok$59489

; 2073 : 
; 2074 : 		mov		parm1, edi

  00cce	89 3d 00 00 00
	00		 mov	 DWORD PTR ?parm1@@3HA, edi ; parm1

; 2075 : 		mov		parm2, ebx

  00cd4	89 1d 00 00 00
	00		 mov	 DWORD PTR ?parm2@@3HA, ebx ; parm2

; 2076 : 	}
; 2077 : 
; 2078 : 	msgMgr->Fatal ( "PMachine stack has been overwritten! (ptr = 0x%x, end = 0x%x)", parm1, parm2 );

  00cda	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm2@@3HA ; parm2
  00cdf	50		 push	 eax
  00ce0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?parm1@@3HA ; parm1
  00ce6	51		 push	 ecx
  00ce7	68 00 00 00 00	 push	 OFFSET FLAT:$SG59490
  00cec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00cf2	52		 push	 edx
  00cf3	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00cf8	83 c4 10	 add	 esp, 16			; 00000010H
$__ckb_stk_ok$59489:

; 2079 : 
; 2080 : 	_asm {
; 2081 : __ckb_stk_ok:
; 2082 : 		pop	ebx

  00cfb	5b		 pop	 ebx

; 2083 : 
; 2084 : 		// get next opcode
; 2085 : 		movzx	ebx, byte ptr [esi]

  00cfc	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2086 : 		inc		esi

  00cff	46		 inc	 esi

; 2087 : 
; 2088 : 		// offset to opcode index
; 2089 : 		jmp		opTbl[ebx*4]

  00d00	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_callk_byte@@YAXXZ ENDP				; OP_callk_byte
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+2
$SG59494 DB	'PMachine stack has been overwritten! (ptr = 0x%x, end = '
	DB	'0x%x)', 00H
_DATA	ENDS
_TEXT	SEGMENT
?OP_callk_word@@YAXXZ PROC NEAR				; OP_callk_word

; 2094 : 	_asm {
; 2095 : 		mov		pm.debugIP, esi

  00d07	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2096 : 
; 2097 : 		// point to the beginning of arguments
; 2098 : 		mov		ebx, edi

  00d0d	8b df		 mov	 ebx, edi

; 2099 : 
; 2100 : 		movzx	edx, pm.RestArgs

  00d0f	0f b7 15 22 00
	00 00		 movzx	 edx, WORD PTR ?pm@@3VPMachine@@A+34

; 2101 : 
; 2102 : 		movzx	ecx, word ptr [esi + 2]

  00d16	0f b7 4e 02	 movzx	 ecx, WORD PTR [esi+2]

; 2103 : 		add		ecx, edx

  00d1a	03 ca		 add	 ecx, edx

; 2104 : 
; 2105 : 		sub		ebx, ecx

  00d1c	2b d9		 sub	 ebx, ecx

; 2106 : 
; 2107 : 		// adjust number of arguments to include pmRestArgs
; 2108 : 		shr		edx, 1

  00d1e	d1 ea		 shr	 edx, 1

; 2109 : 		add		word ptr [ebx], dx

  00d20	66 01 13	 add	 WORD PTR [ebx], dx

; 2110 : 
; 2111 : 		// get the kernel call entry number
; 2112 : 		movzx	edx, word ptr [esi]

  00d23	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 2113 : 		add		esi, 4

  00d26	83 c6 04	 add	 esi, 4

; 2114 : 
; 2115 : 		mov		ecx, edx

  00d29	8b ca		 mov	 ecx, edx

; 2116 : 		shl		edx, 3

  00d2b	c1 e2 03	 shl	 edx, 3

; 2117 : 		shl		ecx, 2

  00d2e	c1 e1 02	 shl	 ecx, 2

; 2118 : 		add		edx, ecx

  00d31	03 d1		 add	 edx, ecx

; 2119 : 
; 2120 : 		mov		pm.RestArgs, 0

  00d33	66 c7 05 22 00
	00 00 00 00	 mov	 WORD PTR ?pm@@3VPMachine@@A+34, 0

; 2121 : 
; 2122 : 		// save the pmachine state
; 2123 : 		mov		pm.acc, eax

  00d3c	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2124 : 		mov		pm.StackPtr, edi

  00d41	89 3d 0c 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+12, edi

; 2125 : 
; 2126 : //	pushIP
; 2127 : 		push	ebx

  00d47	53		 push	 ebx

; 2128 : 		movzx	ebx, pm.ipPtr

  00d48	0f b7 1d 3e 01
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+318

; 2129 : 		mov		dword ptr [pm.ipStack + ebx], esi

  00d4f	89 b3 40 01 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A[ebx+320], esi

; 2130 : 		add		pm.ipPtr, 4

  00d55	66 83 05 3e 01
	00 00 04	 add	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 2131 : 		pop		ebx

  00d5d	5b		 pop	 ebx

; 2132 : //
; 2133 : 
; 2134 : 		push	pm.ipMemID

  00d5e	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 2135 : 		push	pm.ipMemID

  00d65	66 ff 35 3c 01
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+316

; 2136 : 
; 2137 : 		push	pm.ip

  00d6c	ff 35 38 01 00
	00		 push	 DWORD PTR ?pm@@3VPMachine@@A+312

; 2138 : 
; 2139 : 		push	ebx

  00d72	53		 push	 ebx

; 2140 : 		push	ebx

  00d73	53		 push	 ebx

; 2141 : 
; 2142 : 		// call the kernel function
; 2143 : 		call	kernelCalls[edx]

  00d74	ff 92 00 00 00
	00		 call	 DWORD PTR ?kernelCalls@@3PAUKernelCall@@A[edx]

; 2144 : 
; 2145 : 		// restore the pmachine stack as well -- nifty shortcut
; 2146 : 		pop		edi

  00d7a	5f		 pop	 edi

; 2147 : 		pop		edi

  00d7b	5f		 pop	 edi

; 2148 : 		sub		edi, 2

  00d7c	83 ef 02	 sub	 edi, 2

; 2149 : 
; 2150 : 		// restore the pmachine state
; 2151 : 		pop		pm.ip

  00d7f	8f 05 38 01 00
	00		 pop	 DWORD PTR ?pm@@3VPMachine@@A+312

; 2152 : 		pop		pm.ipMemID

  00d85	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 2153 : 		pop		pm.ipMemID

  00d8c	66 8f 05 3c 01
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+316

; 2154 : 
; 2155 : //		popIP
; 2156 : 		push	edx

  00d93	52		 push	 edx

; 2157 : 		sub		pm.ipPtr, 4

  00d94	66 83 2d 3e 01
	00 00 04	 sub	 WORD PTR ?pm@@3VPMachine@@A+318, 4

; 2158 : 		movzx	edx, pm.ipPtr

  00d9c	0f b7 15 3e 01
	00 00		 movzx	 edx, WORD PTR ?pm@@3VPMachine@@A+318

; 2159 : 		mov		esi, dword ptr [pm.ipStack + edx]

  00da3	8b b2 40 01 00
	00		 mov	 esi, DWORD PTR ?pm@@3VPMachine@@A[edx+320]

; 2160 : 		pop		edx

  00da9	5a		 pop	 edx

; 2161 : //
; 2162 : 
; 2163 : 		// now the accumulator
; 2164 : 		mov		eax, pm.acc

  00daa	a1 04 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+4

; 2165 : 		movsx	eax, ax

  00daf	0f bf c0	 movsx	 eax, ax

; 2166 : 	
; 2167 : 		push	ebx

  00db2	53		 push	 ebx

; 2168 : 		lea		ebx, pmStack

  00db3	8d 1d 00 00 00
	00		 lea	 ebx, DWORD PTR ?pmStack@@3PAHA

; 2169 : 		add		ebx, 20476

  00db9	81 c3 fc 4f 00
	00		 add	 ebx, 20476		; 00004ffcH

; 2170 : 		cmp		[ebx], 1599554882

  00dbf	80 3b 42	 cmp	 BYTE PTR [ebx], 66	; 00000042H

; 2171 : 		je		__ckw_stk_ok

  00dc2	74 2d		 je	 SHORT $__ckw_stk_ok$59493

; 2172 : 
; 2173 : 		mov		parm1, edi

  00dc4	89 3d 00 00 00
	00		 mov	 DWORD PTR ?parm1@@3HA, edi ; parm1

; 2174 : 		mov		parm2, ebx

  00dca	89 1d 00 00 00
	00		 mov	 DWORD PTR ?parm2@@3HA, ebx ; parm2

; 2175 : 	}
; 2176 : 
; 2177 : 	msgMgr->Fatal ( "PMachine stack has been overwritten! (ptr = 0x%x, end = 0x%x)", parm1, parm2 );

  00dd0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm2@@3HA ; parm2
  00dd5	50		 push	 eax
  00dd6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?parm1@@3HA ; parm1
  00ddc	51		 push	 ecx
  00ddd	68 00 00 00 00	 push	 OFFSET FLAT:$SG59494
  00de2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00de8	52		 push	 edx
  00de9	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00dee	83 c4 10	 add	 esp, 16			; 00000010H
$__ckw_stk_ok$59493:

; 2178 : 
; 2179 : 	_asm {
; 2180 : __ckw_stk_ok:
; 2181 : 		pop		ebx

  00df1	5b		 pop	 ebx

; 2182 : 
; 2183 : 		// get next opcode
; 2184 : 		movzx	ebx, byte ptr [esi]

  00df2	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2185 : 		inc		esi

  00df5	46		 inc	 esi

; 2186 : 
; 2187 : 		// offset to opcode index
; 2188 : 		jmp		opTbl[ebx*4]

  00df6	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_callk_word@@YAXXZ ENDP				; OP_callk_word
?OP_callb_byte@@YAXXZ PROC NEAR				; OP_callb_byte

; 2194 : 	_asm {
; 2195 : 		mov	pm.debugIP, esi

  00dfd	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2196 : 
; 2197 : 		mov	ebx, 0

  00e03	bb 00 00 00 00	 mov	 ebx, 0

; 2198 : 		movzx	edx, byte ptr [esi]

  00e08	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 2199 : 		movzx	ecx, word ptr [esi + 1]

  00e0b	0f b7 4e 01	 movzx	 ecx, WORD PTR [esi+1]

; 2200 : 		add		esi, 3

  00e0f	83 c6 03	 add	 esi, 3

; 2201 : 	}
; 2202 : 
; 2203 : 	pmDispatch();

  00e12	e8 00 00 00 00	 call	 ?pmDispatch@@YAXXZ	; pmDispatch

; 2204 : 
; 2205 : 	_asm {
; 2206 : 		// get next opcode
; 2207 : 		movzx	ebx, byte ptr [esi]

  00e17	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2208 : 		inc	esi

  00e1a	46		 inc	 esi

; 2209 : 
; 2210 : 		mov	pm.debugIP, esi

  00e1b	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2211 : 
; 2212 : 		// offset to opcode index
; 2213 : 		jmp	opTbl[ebx*4]

  00e21	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_callb_byte@@YAXXZ ENDP				; OP_callb_byte
?OP_callb_word@@YAXXZ PROC NEAR				; OP_callb_word

; 2218 : 	_asm {
; 2219 : 	mov	pm.debugIP, esi

  00e28	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2220 : 
; 2221 : 	mov	ebx, 0

  00e2e	bb 00 00 00 00	 mov	 ebx, 0

; 2222 : 	movzx	edx, word ptr [esi]

  00e33	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 2223 : 	movzx	ecx, word ptr [esi + 2]

  00e36	0f b7 4e 02	 movzx	 ecx, WORD PTR [esi+2]

; 2224 : 	add	esi, 4

  00e3a	83 c6 04	 add	 esi, 4

; 2225 : 	}
; 2226 : 
; 2227 : 	pmDispatch();

  00e3d	e8 00 00 00 00	 call	 ?pmDispatch@@YAXXZ	; pmDispatch

; 2228 : 
; 2229 : 	_asm {
; 2230 : 	// get next opcode
; 2231 : 	movzx	ebx, byte ptr [esi]

  00e42	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2232 : 	inc	esi

  00e45	46		 inc	 esi

; 2233 : 
; 2234 : 	mov	pm.debugIP, esi

  00e46	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2235 : 
; 2236 : 	// offset to opcode index
; 2237 : 	jmp	opTbl[ebx*4]

  00e4c	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_callb_word@@YAXXZ ENDP				; OP_callb_word
?OP_calle_byte@@YAXXZ PROC NEAR				; OP_calle_byte

; 2243 : 	_asm {
; 2244 : 	mov	pm.debugIP, esi

  00e53	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2245 : 
; 2246 : 	movzx	ebx, byte ptr [esi]

  00e59	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2247 : 	movzx	edx, byte ptr [esi + 1]

  00e5c	0f b6 56 01	 movzx	 edx, BYTE PTR [esi+1]

; 2248 : 	movzx	ecx, word ptr [esi + 2]

  00e60	0f b7 4e 02	 movzx	 ecx, WORD PTR [esi+2]

; 2249 : 	add	esi, 4

  00e64	83 c6 04	 add	 esi, 4

; 2250 : 	}
; 2251 : 
; 2252 : 	pmDispatch();

  00e67	e8 00 00 00 00	 call	 ?pmDispatch@@YAXXZ	; pmDispatch

; 2253 : 
; 2254 : 	_asm {
; 2255 : 	// get next opcode
; 2256 : 	movzx	ebx, byte ptr [esi]

  00e6c	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2257 : 	inc	esi

  00e6f	46		 inc	 esi

; 2258 : 
; 2259 : 	mov	pm.debugIP, esi

  00e70	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2260 : 
; 2261 : 	// offset to opcode index
; 2262 : 	jmp	opTbl[ebx*4]

  00e76	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_calle_byte@@YAXXZ ENDP				; OP_calle_byte
?OP_calle_word@@YAXXZ PROC NEAR				; OP_calle_word

; 2267 : 	_asm {
; 2268 : 	mov	pm.debugIP, esi

  00e7d	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2269 : 
; 2270 : 	movzx	ebx, word ptr [esi]

  00e83	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 2271 : 	movzx	edx, word ptr [esi + 2]

  00e86	0f b7 56 02	 movzx	 edx, WORD PTR [esi+2]

; 2272 : 	movzx	ecx, word ptr [esi + 4]

  00e8a	0f b7 4e 04	 movzx	 ecx, WORD PTR [esi+4]

; 2273 : 	add	esi, 6

  00e8e	83 c6 06	 add	 esi, 6

; 2274 : 	}
; 2275 : 
; 2276 : 	pmDispatch();

  00e91	e8 00 00 00 00	 call	 ?pmDispatch@@YAXXZ	; pmDispatch

; 2277 : 
; 2278 : 	_asm {
; 2279 : 	// get next opcode
; 2280 : 	movzx	ebx, byte ptr [esi]

  00e96	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2281 : 	inc	esi

  00e99	46		 inc	 esi

; 2282 : 
; 2283 : 	mov	pm.debugIP, esi

  00e9a	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2284 : 
; 2285 : 	// offset to opcode index
; 2286 : 	jmp	opTbl[ebx*4]

  00ea0	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_calle_word@@YAXXZ ENDP				; OP_calle_word
?OP_ret@@YAXXZ PROC NEAR				; OP_ret

; 2292 : 	_asm {
; 2293 : 		ret

  00ea7	c3		 ret	 0
?OP_ret@@YAXXZ ENDP					; OP_ret
?OP_send_byte@@YAXXZ PROC NEAR				; OP_send_byte

; 2299 : 	_asm {
; 2300 : 	mov	pm.debugIP, esi

  00ea8	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2301 : 
; 2302 : 	push	pm.object

  00eae	66 ff 35 02 00
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+2

; 2303 : 	push	pm.object

  00eb5	66 ff 35 02 00
	00 00		 push	 WORD PTR ?pm@@3VPMachine@@A+2

; 2304 : 	mov	pm.object, ax

  00ebc	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 2305 : 	
; 2306 : 	movzx	ebx, ax

  00ec2	0f b7 d8	 movzx	 ebx, ax

; 2307 : 	movzx	ecx, word ptr [esi]

  00ec5	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2308 : 	add	esi, 2

  00ec8	83 c6 02	 add	 esi, 2

; 2309 : 	add	cx, pm.RestArgs

  00ecb	66 03 0d 22 00
	00 00		 add	 cx, WORD PTR ?pm@@3VPMachine@@A+34

; 2310 : 	call	pmQuickMessage_asm

  00ed2	e8 00 00 00 00	 call	 ?pmQuickMessage_asm@@YAXXZ ; pmQuickMessage_asm

; 2311 : 
; 2312 : 	pop	pm.object

  00ed7	66 8f 05 02 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+2

; 2313 : 	pop	pm.object

  00ede	66 8f 05 02 00
	00 00		 pop	 WORD PTR ?pm@@3VPMachine@@A+2

; 2314 : 
; 2315 : 	// get next opcode
; 2316 : 	movzx	ebx, byte ptr [esi]

  00ee5	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2317 : 	inc	esi

  00ee8	46		 inc	 esi

; 2318 : 
; 2319 : 	// offset to opcode index
; 2320 : 	jmp	opTbl[ebx*4]

  00ee9	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_send_byte@@YAXXZ ENDP				; OP_send_byte
_TEXT	ENDS
EXTRN	_GetClass:NEAR
_TEXT	SEGMENT
?OP_class_byte@@YAXXZ PROC NEAR				; OP_class_byte

; 2326 : 	_asm {
; 2327 : 		mov	pm.debugIP, esi

  00ef0	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2328 : 
; 2329 : 		movzx	ecx, byte ptr [esi]

  00ef6	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 2330 : 		mov		parm1, ecx

  00ef9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?parm1@@3HA, ecx ; parm1

; 2331 : 	}
; 2332 : 
; 2333 : 	GetClass(parm1);

  00eff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm1@@3HA ; parm1
  00f04	50		 push	 eax
  00f05	e8 00 00 00 00	 call	 _GetClass
  00f0a	83 c4 04	 add	 esp, 4

; 2334 : 
; 2335 : 	_asm {
; 2336 : 		movzx	eax, ax

  00f0d	0f b7 c0	 movzx	 eax, ax

; 2337 : 
; 2338 : 		// get next opcode
; 2339 : 		mov	bl, byte ptr [esi + 1]

  00f10	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 2340 : 		add	esi, 2

  00f13	83 c6 02	 add	 esi, 2

; 2341 : 
; 2342 : 		// offset to opcode index
; 2343 : 		jmp	opTbl[ebx*4]

  00f16	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_class_byte@@YAXXZ ENDP				; OP_class_byte
?OP_class_word@@YAXXZ PROC NEAR				; OP_class_word

; 2349 : 	_asm {
; 2350 : 		mov	pm.debugIP, esi

  00f1d	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2351 : 
; 2352 : 		movzx	ecx, word ptr [esi]

  00f23	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2353 : 		mov		parm1, ecx

  00f26	89 0d 00 00 00
	00		 mov	 DWORD PTR ?parm1@@3HA, ecx ; parm1

; 2354 : 	}
; 2355 : 
; 2356 : 	GetClass(parm1);

  00f2c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm1@@3HA ; parm1
  00f31	50		 push	 eax
  00f32	e8 00 00 00 00	 call	 _GetClass
  00f37	83 c4 04	 add	 esp, 4

; 2357 : 
; 2358 : 	_asm {
; 2359 : 		movzx	eax, ax

  00f3a	0f b7 c0	 movzx	 eax, ax

; 2360 : 
; 2361 : 		// get next opcode
; 2362 : 		mov	bl, byte ptr [esi + 2]

  00f3d	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 2363 : 		add	esi, 3

  00f40	83 c6 03	 add	 esi, 3

; 2364 : 
; 2365 : 		// offset to opcode index
; 2366 : 		jmp	opTbl[ebx*4]

  00f43	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_class_word@@YAXXZ ENDP				; OP_class_word
?OP_self@@YAXXZ PROC NEAR				; OP_self

; 2372 : 	_asm {
; 2373 : 	mov	pm.debugIP, esi

  00f4a	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2374 : 
; 2375 : 	movzx	ebx, pm.object

  00f50	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2376 : 	movzx	ecx, word ptr [esi]

  00f57	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2377 : 	add	esi, 2

  00f5a	83 c6 02	 add	 esi, 2

; 2378 : 	add	cx, pm.RestArgs

  00f5d	66 03 0d 22 00
	00 00		 add	 cx, WORD PTR ?pm@@3VPMachine@@A+34

; 2379 : 	call	pmQuickMessage_asm

  00f64	e8 00 00 00 00	 call	 ?pmQuickMessage_asm@@YAXXZ ; pmQuickMessage_asm

; 2380 : 	
; 2381 : 	// get next opcode
; 2382 : 	movzx	ebx, byte ptr [esi]

  00f69	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2383 : 	inc	esi

  00f6c	46		 inc	 esi

; 2384 : 
; 2385 : 	// offset to opcode index
; 2386 : 	jmp	opTbl[ebx*4]

  00f6d	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_self@@YAXXZ ENDP					; OP_self
?OP_super_byte@@YAXXZ PROC NEAR				; OP_super_byte

; 2392 : 	_asm {
; 2393 : 		mov	pm.debugIP, esi

  00f74	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2394 : 		movzx	ebx, byte ptr [esi]

  00f7a	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2395 : 		mov		parm1, ebx

  00f7d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?parm1@@3HA, ebx ; parm1

; 2396 : 	}
; 2397 : 
; 2398 : 	GetClass(parm1);

  00f83	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm1@@3HA ; parm1
  00f88	50		 push	 eax
  00f89	e8 00 00 00 00	 call	 _GetClass
  00f8e	83 c4 04	 add	 esp, 4

; 2399 : 
; 2400 : 	_asm {
; 2401 : 		movzx	eax, ax

  00f91	0f b7 c0	 movzx	 eax, ax

; 2402 : 		movzx	ebx, ax

  00f94	0f b7 d8	 movzx	 ebx, ax

; 2403 : 
; 2404 : 		movzx	ecx, word ptr [esi + 1]

  00f97	0f b7 4e 01	 movzx	 ecx, WORD PTR [esi+1]

; 2405 : 		add	esi, 3

  00f9b	83 c6 03	 add	 esi, 3

; 2406 : 		add	cx, pm.RestArgs

  00f9e	66 03 0d 22 00
	00 00		 add	 cx, WORD PTR ?pm@@3VPMachine@@A+34

; 2407 : 		call	pmQuickMessage_asm

  00fa5	e8 00 00 00 00	 call	 ?pmQuickMessage_asm@@YAXXZ ; pmQuickMessage_asm

; 2408 : 
; 2409 : 		// get next opcode
; 2410 : 		movzx	ebx, byte ptr [esi]

  00faa	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2411 : 		inc	esi

  00fad	46		 inc	 esi

; 2412 : 
; 2413 : 		// offset to opcode index
; 2414 : 		jmp	opTbl[ebx*4]

  00fae	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_super_byte@@YAXXZ ENDP				; OP_super_byte
?OP_super_word@@YAXXZ PROC NEAR				; OP_super_word

; 2420 : 	_asm {
; 2421 : 		mov		pm.debugIP, esi

  00fb5	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2422 : 		movzx	ebx, word ptr [esi]

  00fbb	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 2423 : 		mov		parm1, ebx

  00fbe	89 1d 00 00 00
	00		 mov	 DWORD PTR ?parm1@@3HA, ebx ; parm1

; 2424 : 	}
; 2425 : 
; 2426 : 	GetClass(parm1);

  00fc4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm1@@3HA ; parm1
  00fc9	50		 push	 eax
  00fca	e8 00 00 00 00	 call	 _GetClass
  00fcf	83 c4 04	 add	 esp, 4

; 2427 : 
; 2428 : 	_asm {
; 2429 : //		push	esi
; 2430 : 
; 2431 : 		movzx	eax, ax

  00fd2	0f b7 c0	 movzx	 eax, ax

; 2432 : 		mov		ebx, eax

  00fd5	8b d8		 mov	 ebx, eax

; 2433 : 
; 2434 : 		movzx	ecx, word ptr [esi + 2]

  00fd7	0f b7 4e 02	 movzx	 ecx, WORD PTR [esi+2]

; 2435 : 		add		esi, 4

  00fdb	83 c6 04	 add	 esi, 4

; 2436 : 		add		cx, pm.RestArgs

  00fde	66 03 0d 22 00
	00 00		 add	 cx, WORD PTR ?pm@@3VPMachine@@A+34

; 2437 : 		call	pmQuickMessage_asm

  00fe5	e8 00 00 00 00	 call	 ?pmQuickMessage_asm@@YAXXZ ; pmQuickMessage_asm

; 2438 : 
; 2439 : //		pop		ebx
; 2440 : 
; 2441 : 		// get next opcode
; 2442 : 		movzx	ebx, byte ptr [esi]

  00fea	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 2443 : 		inc		esi

  00fed	46		 inc	 esi

; 2444 : 
; 2445 : 		// offset to opcode index
; 2446 : 		jmp		opTbl[ebx*4]

  00fee	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_super_word@@YAXXZ ENDP				; OP_super_word
?OP_rest_byte@@YAXXZ PROC NEAR				; OP_rest_byte

; 2452 : 	_asm {
; 2453 : 	mov	ebx, pm.ParmPtr

  00ff5	8b 1d 18 00 00
	00		 mov	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 2454 : 	movzx	ecx, word ptr [ebx]

  00ffb	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]

; 2455 : 
; 2456 : 	movzx	edx, byte ptr [esi]

  00ffe	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 2457 : 
; 2458 : 	sub	ecx, edx

  01001	2b ca		 sub	 ecx, edx

; 2459 : 	inc	ecx

  01003	41		 inc	 ecx

; 2460 : 	shl	edx, 1

  01004	d1 e2		 shl	 edx, 1

; 2461 : 
; 2462 : 	cmp	ecx, 0

  01006	83 f9 00	 cmp	 ecx, 0

; 2463 : 	jle	__OP_rest_loop

  01009	7e 1d		 jle	 SHORT $__OP_rest_loop$59519

; 2464 : 
; 2465 : 	add	pm.RestArgs, cx

  0100b	66 01 0d 22 00
	00 00		 add	 WORD PTR ?pm@@3VPMachine@@A+34, cx

; 2466 : 	add	pm.RestArgs, cx

  01012	66 01 0d 22 00
	00 00		 add	 WORD PTR ?pm@@3VPMachine@@A+34, cx

; 2467 : 
; 2468 : 	add	edi, 2

  01019	83 c7 02	 add	 edi, 2

; 2469 : 	push	esi

  0101c	56		 push	 esi

; 2470 : 	mov	esi, ebx

  0101d	8b f3		 mov	 esi, ebx

; 2471 : 	add	esi, edx

  0101f	03 f2		 add	 esi, edx

; 2472 : 
; 2473 : 	rep	movsw

  01021	f3 66 a5	 rep	  movsw

; 2474 : 
; 2475 : 	pop	esi

  01024	5e		 pop	 esi

; 2476 : 	sub	edi, 2

  01025	83 ef 02	 sub	 edi, 2
$__OP_rest_loop$59519:

; 2477 : 
; 2478 : __OP_rest_loop:
; 2479 : 	
; 2480 : 	// get next opcode
; 2481 : 	movzx	ebx, byte ptr [esi + 1]

  01028	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 2482 : 	add	esi, 2

  0102c	83 c6 02	 add	 esi, 2

; 2483 : 
; 2484 : 	// offset to opcode index
; 2485 : 	jmp	opTbl[ebx*4]

  0102f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_rest_byte@@YAXXZ ENDP				; OP_rest_byte
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+2
$SG59522 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\PMac'
	DB	'hine.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
?OP_lea_byte@@YAXXZ PROC NEAR				; OP_lea_byte

; 2491 : 	msgMgr->Fatal(SrcLoc, Msg_BadOpcode, parm1);

  01036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm1@@3HA ; parm1
  0103b	50		 push	 eax
  0103c	6a 2c		 push	 44			; 0000002cH
  0103e	68 bb 09 00 00	 push	 2491			; 000009bbH
  01043	68 00 00 00 00	 push	 OFFSET FLAT:$SG59522
  01048	6a 61		 push	 97			; 00000061H
  0104a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01050	51		 push	 ecx
  01051	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  01056	83 c4 18	 add	 esp, 24			; 00000018H
?OP_lea_byte@@YAXXZ ENDP				; OP_lea_byte
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+3
$SG59525 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\PMac'
	DB	'hine.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
?OP_lea_word@@YAXXZ PROC NEAR				; OP_lea_word

; 2496 : 	msgMgr->Fatal(SrcLoc, Msg_BadOpcode, parm1);

  01059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm1@@3HA ; parm1
  0105e	50		 push	 eax
  0105f	6a 2c		 push	 44			; 0000002cH
  01061	68 c0 09 00 00	 push	 2496			; 000009c0H
  01066	68 00 00 00 00	 push	 OFFSET FLAT:$SG59525
  0106b	6a 61		 push	 97			; 00000061H
  0106d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01073	51		 push	 ecx
  01074	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  01079	83 c4 18	 add	 esp, 24			; 00000018H
?OP_lea_word@@YAXXZ ENDP				; OP_lea_word
?OP_selfID@@YAXXZ PROC NEAR				; OP_selfID

; 2501 : 	_asm {
; 2502 : 	movzx	eax, word ptr pm.object

  0107c	0f b7 05 02 00
	00 00		 movzx	 eax, WORD PTR ?pm@@3VPMachine@@A+2

; 2503 : 
; 2504 : 	// get next opcode
; 2505 : 	mov	bl, byte ptr [esi]

  01083	8a 1e		 mov	 bl, BYTE PTR [esi]

; 2506 : 	inc	esi

  01085	46		 inc	 esi

; 2507 : 
; 2508 : 	// offset to opcode index
; 2509 : 	jmp	opTbl[ebx*4]

  01086	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_selfID@@YAXXZ ENDP					; OP_selfID
?OP_pprev@@YAXXZ PROC NEAR				; OP_pprev

; 2515 : 	_asm {
; 2516 : 	mov	edx, pm.prevAcc

  0108d	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?pm@@3VPMachine@@A+8

; 2517 : 		add		edi, 2					//	ppush

  01093	83 c7 02	 add	 edi, 2

; 2518 : 		mov		word ptr [edi], dx

  01096	66 89 17	 mov	 WORD PTR [edi], dx

; 2519 : 
; 2520 : 	// get next opcode
; 2521 : 	mov	bl, byte ptr [esi]

  01099	8a 1e		 mov	 bl, BYTE PTR [esi]

; 2522 : 	inc	esi

  0109b	46		 inc	 esi

; 2523 : 
; 2524 : 	// offset to opcode index
; 2525 : 	jmp	opTbl[ebx*4]

  0109c	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_pprev@@YAXXZ ENDP					; OP_pprev
?OP_pToa_byte@@YAXXZ PROC NEAR				; OP_pToa_byte

; 2531 : 	_asm {
; 2532 : 	mov	pm.debugIP, esi

  010a3	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2533 : //	memIDGetPtr	pm.object, MemObject
; 2534 : 		movzx	ebx, word ptr pm.object

  010a9	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2535 : 		shl		ebx, 4

  010b0	c1 e3 04	 shl	 ebx, 4

; 2536 : 		add		ebx, _descTablePtr

  010b3	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2537 : 		mov		ebx, [ebx]Descriptor.data

  010b9	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2538 : //
; 2539 : 
; 2540 : 	movzx	ecx, byte ptr [esi]

  010bc	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 2541 : 	add	ebx, ecx

  010bf	03 d9		 add	 ebx, ecx

; 2542 : 	movsx	eax, word ptr [ebx]

  010c1	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 2543 : 	
; 2544 : 	// get next opcode
; 2545 : 	movzx	ebx, byte ptr [esi + 1]

  010c4	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 2546 : 	add	esi, 2

  010c8	83 c6 02	 add	 esi, 2

; 2547 : 
; 2548 : 	// offset to opcode index
; 2549 : 	jmp	opTbl[ebx*4]

  010cb	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_pToa_byte@@YAXXZ ENDP				; OP_pToa_byte
_TEXT	ENDS
EXTRN	?Lock@MemID@@QBEPAXXZ:NEAR			; MemID::Lock
;	COMDAT ?Lock@FakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT
_this$ = -4
?Lock@FakeVariableID@@QBEPAUVariable@@XZ PROC NEAR	; FakeVariableID::Lock, COMDAT

; 91   : FakeTemplateID(FakeVariableID, Variable, MemVariables)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lock@MemID@@QBEPAXXZ	; MemID::Lock
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Lock@FakeVariableID@@QBEPAUVariable@@XZ ENDP		; FakeVariableID::Lock
_TEXT	ENDS
_TEXT	SEGMENT
?OP_pToa_word@@YAXXZ PROC NEAR				; OP_pToa_word

; 2555 : 	_asm {
; 2556 : 	mov	pm.debugIP, esi

  010d2	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2557 : //	memIDGetPtr	pm.object, MemObject
; 2558 : 		movzx	ebx, word ptr pm.object

  010d8	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2559 : 		shl		ebx, 4

  010df	c1 e3 04	 shl	 ebx, 4

; 2560 : 		add		ebx, _descTablePtr

  010e2	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2561 : 		mov		ebx, [ebx]Descriptor.data

  010e8	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2562 : //
; 2563 : 
; 2564 : 	movzx	ecx, word ptr [esi]

  010eb	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2565 : 	add	ebx, ecx

  010ee	03 d9		 add	 ebx, ecx

; 2566 : 	movsx	eax, word ptr [ebx]

  010f0	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 2567 : 	
; 2568 : 	// get next opcode
; 2569 : 	movzx	ebx, byte ptr [esi + 2]

  010f3	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 2570 : 	add	esi, 3

  010f7	83 c6 03	 add	 esi, 3

; 2571 : 
; 2572 : 	// offset to opcode index
; 2573 : 	jmp	opTbl[ebx*4]

  010fa	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_pToa_word@@YAXXZ ENDP				; OP_pToa_word
?OP_aTop_byte@@YAXXZ PROC NEAR				; OP_aTop_byte

; 2579 : 	_asm {
; 2580 : 	mov	pm.debugIP, esi

  01101	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2581 : //	memIDGetPtr	pm.object, MemObject
; 2582 : 		movzx	ebx, word ptr pm.object

  01107	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2583 : 		shl		ebx, 4

  0110e	c1 e3 04	 shl	 ebx, 4

; 2584 : 		add		ebx, _descTablePtr

  01111	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2585 : 		mov		ebx, [ebx]Descriptor.data

  01117	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2586 : //
; 2587 : 
; 2588 : 	movzx	ecx, byte ptr [esi]

  0111a	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 2589 : 	cmp	cx, 0056h

  0111d	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2590 : 	ja	__not_Critical2

  01121	77 0b		 ja	 SHORT $__not_Critical2$59536

; 2591 : 	cmp	cx, 0030h

  01123	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2592 : 	jb	__not_Critical2

  01127	72 05		 jb	 SHORT $__not_Critical2$59536

; 2593 : 
; 2594 : 	or	word ptr [ebx + 14], 0008h

  01129	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical2$59536:

; 2595 : 
; 2596 : __not_Critical2:
; 2597 : 	add	ebx, ecx

  0112e	03 d9		 add	 ebx, ecx

; 2598 : 	mov	word ptr [ebx], ax

  01130	66 89 03	 mov	 WORD PTR [ebx], ax

; 2599 : 	
; 2600 : 	// get next opcode
; 2601 : 	movzx	ebx, byte ptr [esi + 1]

  01133	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 2602 : 	add	esi, 2

  01137	83 c6 02	 add	 esi, 2

; 2603 : 
; 2604 : 	// offset to opcode index
; 2605 : 	jmp	opTbl[ebx*4]

  0113a	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_aTop_byte@@YAXXZ ENDP				; OP_aTop_byte
_TEXT	ENDS
PUBLIC	??0FakeVariableID@@QAE@XZ			; FakeVariableID::FakeVariableID
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0VariableID@@QAE@XZ PROC NEAR				; VariableID::VariableID, COMDAT

; 93   : 	VariableID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeVariableID@@QAE@XZ ; FakeVariableID::FakeVariableID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0VariableID@@QAE@XZ ENDP				; VariableID::VariableID
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeVariableID@@QAE@XZ PROC NEAR			; FakeVariableID::FakeVariableID, COMDAT

; 91   : FakeTemplateID(FakeVariableID, Variable, MemVariables)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeVariableID@@QAE@XZ ENDP				; FakeVariableID::FakeVariableID
_TEXT	ENDS
_TEXT	SEGMENT
?OP_aTop_word@@YAXXZ PROC NEAR				; OP_aTop_word

; 2611 : 	_asm {
; 2612 : 	mov	pm.debugIP, esi

  01141	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2613 : //	memIDGetPtr	pm.object, MemObject
; 2614 : 		movzx	ebx, word ptr pm.object

  01147	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2615 : 		shl		ebx, 4

  0114e	c1 e3 04	 shl	 ebx, 4

; 2616 : 		add		ebx, _descTablePtr

  01151	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2617 : 		mov		ebx, [ebx]Descriptor.data

  01157	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2618 : //
; 2619 : 
; 2620 : 	movzx	ecx, word ptr [esi]

  0115a	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2621 : 	cmp	cx, 0056h

  0115d	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2622 : 	ja	__not_Critical3

  01161	77 0b		 ja	 SHORT $__not_Critical3$59539

; 2623 : 	cmp	cx, 0030h

  01163	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2624 : 	jb	__not_Critical3

  01167	72 05		 jb	 SHORT $__not_Critical3$59539

; 2625 : 
; 2626 : 	or	word ptr [ebx + 14], 0008h

  01169	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical3$59539:

; 2627 : 
; 2628 : __not_Critical3:
; 2629 : 	add	ebx, ecx

  0116e	03 d9		 add	 ebx, ecx

; 2630 : 	mov	word ptr [ebx], ax

  01170	66 89 03	 mov	 WORD PTR [ebx], ax

; 2631 : 	
; 2632 : 	// get next opcode
; 2633 : 	movzx	ebx, byte ptr [esi + 2]

  01173	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 2634 : 	add	esi, 3

  01177	83 c6 03	 add	 esi, 3

; 2635 : 
; 2636 : 	// offset to opcode index
; 2637 : 	jmp	opTbl[ebx*4]

  0117a	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_aTop_word@@YAXXZ ENDP				; OP_aTop_word
?OP_pTos_byte@@YAXXZ PROC NEAR				; OP_pTos_byte

; 2643 : 	_asm {
; 2644 : 	mov	pm.debugIP, esi

  01181	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2645 : //	memIDGetPtr	pm.object, MemObject
; 2646 : 		movzx	ebx, word ptr pm.object

  01187	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2647 : 		shl		ebx, 4

  0118e	c1 e3 04	 shl	 ebx, 4

; 2648 : 		add		ebx, _descTablePtr

  01191	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2649 : 		mov		ebx, [ebx]Descriptor.data

  01197	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2650 : //
; 2651 : 
; 2652 : 	movzx	ecx, byte ptr [esi]

  0119a	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 2653 : 	add	ebx, ecx

  0119d	03 d9		 add	 ebx, ecx

; 2654 : 	mov	cx, word ptr [ebx]

  0119f	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 2655 : 		add		edi, 2					//	ppush

  011a2	83 c7 02	 add	 edi, 2

; 2656 : 		mov		word ptr [edi], cx

  011a5	66 89 0f	 mov	 WORD PTR [edi], cx

; 2657 : 	
; 2658 : 	// get next opcode
; 2659 : 	movzx	ebx, byte ptr [esi + 1]

  011a8	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 2660 : 	add	esi, 2

  011ac	83 c6 02	 add	 esi, 2

; 2661 : 
; 2662 : 	// offset to opcode index
; 2663 : 	jmp	opTbl[ebx*4]

  011af	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_pTos_byte@@YAXXZ ENDP				; OP_pTos_byte
?OP_pTos_word@@YAXXZ PROC NEAR				; OP_pTos_word

; 2669 : 	_asm {
; 2670 : 	mov	pm.debugIP, esi

  011b6	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2671 : //	memIDGetPtr	pm.object, MemObject
; 2672 : 		movzx	ebx, word ptr pm.object

  011bc	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2673 : 		shl		ebx, 4

  011c3	c1 e3 04	 shl	 ebx, 4

; 2674 : 		add		ebx, _descTablePtr

  011c6	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2675 : 		mov		ebx, [ebx]Descriptor.data

  011cc	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2676 : //
; 2677 : 
; 2678 : 	movzx	ecx, word ptr [esi]

  011cf	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2679 : 	add	ebx, ecx

  011d2	03 d9		 add	 ebx, ecx

; 2680 : 	mov	cx, word ptr [ebx]

  011d4	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 2681 : 		add		edi, 2					//	ppush

  011d7	83 c7 02	 add	 edi, 2

; 2682 : 		mov		word ptr [edi], cx

  011da	66 89 0f	 mov	 WORD PTR [edi], cx

; 2683 : 
; 2684 : 	// get next opcode
; 2685 : 	movzx	ebx, byte ptr [esi + 2]

  011dd	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 2686 : 	add	esi, 3

  011e1	83 c6 03	 add	 esi, 3

; 2687 : 
; 2688 : 	// offset to opcode index
; 2689 : 	jmp	opTbl[ebx*4]

  011e4	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_pTos_word@@YAXXZ ENDP				; OP_pTos_word
?OP_sTop_byte@@YAXXZ PROC NEAR				; OP_sTop_byte

; 2695 : 	_asm {
; 2696 : 	mov	pm.debugIP, esi

  011eb	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2697 : //	memIDGetPtr	pm.object, MemObject
; 2698 : 		movzx	ebx, word ptr pm.object

  011f1	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2699 : 		shl		ebx, 4

  011f8	c1 e3 04	 shl	 ebx, 4

; 2700 : 		add		ebx, _descTablePtr

  011fb	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2701 : 		mov		ebx, [ebx]Descriptor.data

  01201	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2702 : //
; 2703 : 
; 2704 : 	movzx	ecx, byte ptr [esi]

  01204	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 2705 : 
; 2706 : 		mov		dx, word ptr [edi]

  01207	66 8b 17	 mov	 dx, WORD PTR [edi]

; 2707 : 
; 2708 : #ifdef DEBUG
; 2709 : 		mov		word ptr [edi], 0
; 2710 : #endif
; 2711 : 
; 2712 : 		sub		edi, 2

  0120a	83 ef 02	 sub	 edi, 2

; 2713 : 	
; 2714 : 	cmp	cx, 0056h

  0120d	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2715 : 	ja	__not_Critical4

  01211	77 0b		 ja	 SHORT $__not_Critical4$59546

; 2716 : 	cmp	cx, 0030h

  01213	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2717 : 	jb	__not_Critical4

  01217	72 05		 jb	 SHORT $__not_Critical4$59546

; 2718 : 
; 2719 : 	or	word ptr [ebx + 14], 0008h

  01219	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical4$59546:

; 2720 : 
; 2721 : __not_Critical4:
; 2722 : 	add	ebx, ecx

  0121e	03 d9		 add	 ebx, ecx

; 2723 : 	mov	word ptr [ebx], dx

  01220	66 89 13	 mov	 WORD PTR [ebx], dx

; 2724 : 	
; 2725 : 	// get next opcode
; 2726 : 	movzx	ebx, byte ptr [esi + 1]

  01223	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 2727 : 	add	esi, 2

  01227	83 c6 02	 add	 esi, 2

; 2728 : 
; 2729 : 	// offset to opcode index
; 2730 : 	jmp	opTbl[ebx*4]

  0122a	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sTop_byte@@YAXXZ ENDP				; OP_sTop_byte
?OP_sTop_word@@YAXXZ PROC NEAR				; OP_sTop_word

; 2736 : 	_asm {
; 2737 : 	mov	pm.debugIP, esi

  01231	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2738 : //	memIDGetPtr	pm.object, MemObject
; 2739 : 		movzx	ebx, word ptr pm.object

  01237	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2740 : 		shl		ebx, 4

  0123e	c1 e3 04	 shl	 ebx, 4

; 2741 : 		add		ebx, _descTablePtr

  01241	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2742 : 		mov		ebx, [ebx]Descriptor.data

  01247	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2743 : //
; 2744 : 
; 2745 : 		mov		dx, word ptr [edi]

  0124a	66 8b 17	 mov	 dx, WORD PTR [edi]

; 2746 : 
; 2747 : #ifdef DEBUG
; 2748 : 		mov		word ptr [edi], 0
; 2749 : #endif
; 2750 : 
; 2751 : 		sub		edi, 2

  0124d	83 ef 02	 sub	 edi, 2

; 2752 : 
; 2753 : 	movzx	ecx, word ptr [esi]

  01250	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2754 : 	cmp	cx, 0056h

  01253	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2755 : 	ja	__not_Critical5

  01257	77 0b		 ja	 SHORT $__not_Critical5$59549

; 2756 : 	cmp	cx, 0030h

  01259	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2757 : 	jb	__not_Critical5

  0125d	72 05		 jb	 SHORT $__not_Critical5$59549

; 2758 : 
; 2759 : 	or	word ptr [ebx + 14], 0008h

  0125f	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical5$59549:

; 2760 : 
; 2761 : __not_Critical5:
; 2762 : 	add	ebx, ecx

  01264	03 d9		 add	 ebx, ecx

; 2763 : 	mov	word ptr [ebx], dx

  01266	66 89 13	 mov	 WORD PTR [ebx], dx

; 2764 : 	
; 2765 : 	// get next opcode
; 2766 : 	movzx	ebx, byte ptr [esi + 2]

  01269	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 2767 : 	add	esi, 3

  0126d	83 c6 03	 add	 esi, 3

; 2768 : 
; 2769 : 	// offset to opcode index
; 2770 : 	jmp	opTbl[ebx*4]

  01270	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sTop_word@@YAXXZ ENDP				; OP_sTop_word
?OP_ipToa_byte@@YAXXZ PROC NEAR				; OP_ipToa_byte

; 2776 : 	_asm {
; 2777 : 	mov	pm.debugIP, esi

  01277	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2778 : //	memIDGetPtr	pm.object, MemObject
; 2779 : 		movzx	ebx, word ptr pm.object

  0127d	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2780 : 		shl		ebx, 4

  01284	c1 e3 04	 shl	 ebx, 4

; 2781 : 		add		ebx, _descTablePtr

  01287	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2782 : 		mov		ebx, [ebx]Descriptor.data

  0128d	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2783 : //
; 2784 : 
; 2785 : 	movzx	ecx, byte ptr [esi]

  01290	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 2786 : 	cmp	cx, 0056h

  01293	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2787 : 	ja	__not_Critical6

  01297	77 0b		 ja	 SHORT $__not_Critical6$59552

; 2788 : 	cmp	cx, 0030h

  01299	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2789 : 	jb	__not_Critical6

  0129d	72 05		 jb	 SHORT $__not_Critical6$59552

; 2790 : 
; 2791 : 	or	word ptr [ebx + 14], 0008h

  0129f	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical6$59552:

; 2792 : 
; 2793 : __not_Critical6:
; 2794 : 	add	ebx, ecx

  012a4	03 d9		 add	 ebx, ecx

; 2795 : 	inc	word ptr [ebx]

  012a6	66 ff 03	 inc	 WORD PTR [ebx]

; 2796 : 	movsx	eax, word ptr [ebx]

  012a9	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 2797 : 	
; 2798 : 	// get next opcode
; 2799 : 	movzx	ebx, byte ptr [esi + 1]

  012ac	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 2800 : 	add	esi, 2

  012b0	83 c6 02	 add	 esi, 2

; 2801 : 
; 2802 : 	// offset to opcode index
; 2803 : 	jmp	opTbl[ebx*4]

  012b3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ipToa_byte@@YAXXZ ENDP				; OP_ipToa_byte
?OP_ipToa_word@@YAXXZ PROC NEAR				; OP_ipToa_word

; 2809 : 	_asm {
; 2810 : 	mov	pm.debugIP, esi

  012ba	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2811 : //	memIDGetPtr	pm.object, MemObject
; 2812 : 		movzx	ebx, word ptr pm.object

  012c0	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2813 : 		shl		ebx, 4

  012c7	c1 e3 04	 shl	 ebx, 4

; 2814 : 		add		ebx, _descTablePtr

  012ca	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2815 : 		mov		ebx, [ebx]Descriptor.data

  012d0	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2816 : //
; 2817 : 
; 2818 : 	movzx	ecx, word ptr [esi]

  012d3	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2819 : 	cmp	cx, 0056h

  012d6	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2820 : 	ja	__not_Critical7

  012da	77 0b		 ja	 SHORT $__not_Critical7$59555

; 2821 : 	cmp	cx, 0030h

  012dc	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2822 : 	jb	__not_Critical7

  012e0	72 05		 jb	 SHORT $__not_Critical7$59555

; 2823 : 
; 2824 : 	or	word ptr [ebx + 14], 0008h

  012e2	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical7$59555:

; 2825 : 
; 2826 : __not_Critical7:
; 2827 : 	add	ebx, ecx

  012e7	03 d9		 add	 ebx, ecx

; 2828 : 	inc	word ptr [ebx]

  012e9	66 ff 03	 inc	 WORD PTR [ebx]

; 2829 : 	movsx	eax, word ptr [ebx]

  012ec	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 2830 : 	
; 2831 : 	// get next opcode
; 2832 : 	movzx	ebx, byte ptr [esi + 2]

  012ef	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 2833 : 	add	esi, 3

  012f3	83 c6 03	 add	 esi, 3

; 2834 : 
; 2835 : 	// offset to opcode index
; 2836 : 	jmp	opTbl[ebx*4]

  012f6	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ipToa_word@@YAXXZ ENDP				; OP_ipToa_word
?OP_dpToa_byte@@YAXXZ PROC NEAR				; OP_dpToa_byte

; 2842 : 	_asm {
; 2843 : 	mov	pm.debugIP, esi

  012fd	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2844 : //	memIDGetPtr	pm.object, MemObject
; 2845 : 		movzx	ebx, word ptr pm.object

  01303	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2846 : 		shl		ebx, 4

  0130a	c1 e3 04	 shl	 ebx, 4

; 2847 : 		add		ebx, _descTablePtr

  0130d	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2848 : 		mov		ebx, [ebx]Descriptor.data

  01313	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2849 : //
; 2850 : 
; 2851 : 	movzx	ecx, byte ptr [esi]

  01316	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 2852 : 	cmp	cx, 0056h

  01319	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2853 : 	ja	__not_Critical8

  0131d	77 0b		 ja	 SHORT $__not_Critical8$59558

; 2854 : 	cmp	cx, 0030h

  0131f	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2855 : 	jb	__not_Critical8

  01323	72 05		 jb	 SHORT $__not_Critical8$59558

; 2856 : 
; 2857 : 	or	word ptr [ebx + 14], 0008h

  01325	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical8$59558:

; 2858 : 
; 2859 : __not_Critical8:
; 2860 : 	add	ebx, ecx

  0132a	03 d9		 add	 ebx, ecx

; 2861 : 	dec	word ptr [ebx]

  0132c	66 ff 0b	 dec	 WORD PTR [ebx]

; 2862 : 	movsx	eax, word ptr [ebx]

  0132f	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 2863 : 	
; 2864 : 	// get next opcode
; 2865 : 	movzx	ebx, byte ptr [esi + 1]

  01332	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 2866 : 	add	esi, 2

  01336	83 c6 02	 add	 esi, 2

; 2867 : 
; 2868 : 	// offset to opcode index
; 2869 : 	jmp	opTbl[ebx*4]

  01339	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dpToa_byte@@YAXXZ ENDP				; OP_dpToa_byte
?OP_dpToa_word@@YAXXZ PROC NEAR				; OP_dpToa_word

; 2875 : 	_asm {
; 2876 : 	mov	pm.debugIP, esi

  01340	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2877 : //	memIDGetPtr	pm.object, MemObject
; 2878 : 		movzx	ebx, word ptr pm.object

  01346	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2879 : 		shl		ebx, 4

  0134d	c1 e3 04	 shl	 ebx, 4

; 2880 : 		add		ebx, _descTablePtr

  01350	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2881 : 		mov		ebx, [ebx]Descriptor.data

  01356	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2882 : //
; 2883 : 
; 2884 : 	movzx	ecx, word ptr [esi]

  01359	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2885 : 	cmp	cx, 0056h

  0135c	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2886 : 	ja	__not_Critical9

  01360	77 0b		 ja	 SHORT $__not_Critical9$59561

; 2887 : 	cmp	cx, 0030h

  01362	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2888 : 	jb	__not_Critical9

  01366	72 05		 jb	 SHORT $__not_Critical9$59561

; 2889 : 
; 2890 : 	or	word ptr [ebx + 14], 0008h

  01368	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical9$59561:

; 2891 : 
; 2892 : __not_Critical9:
; 2893 : 	add	ebx, ecx

  0136d	03 d9		 add	 ebx, ecx

; 2894 : 	dec	word ptr [ebx]

  0136f	66 ff 0b	 dec	 WORD PTR [ebx]

; 2895 : 	movsx	eax, word ptr [ebx]

  01372	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 2896 : 	
; 2897 : 	// get next opcode
; 2898 : 	movzx	ebx, byte ptr [esi + 2]

  01375	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 2899 : 	add	esi, 3

  01379	83 c6 03	 add	 esi, 3

; 2900 : 
; 2901 : 	// offset to opcode index
; 2902 : 	jmp	opTbl[ebx*4]

  0137c	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dpToa_word@@YAXXZ ENDP				; OP_dpToa_word
?OP_ipTos_byte@@YAXXZ PROC NEAR				; OP_ipTos_byte

; 2908 : 	_asm {
; 2909 : 	mov	pm.debugIP, esi

  01383	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2910 : //	memIDGetPtr	pm.object, MemObject
; 2911 : 		movzx	ebx, word ptr pm.object

  01389	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2912 : 		shl		ebx, 4

  01390	c1 e3 04	 shl	 ebx, 4

; 2913 : 		add		ebx, _descTablePtr

  01393	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2914 : 		mov		ebx, [ebx]Descriptor.data

  01399	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2915 : //
; 2916 : 
; 2917 : 	movzx	ecx, byte ptr [esi]

  0139c	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 2918 : 	cmp	cx, 0056h

  0139f	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2919 : 	ja	__not_Critical10

  013a3	77 0b		 ja	 SHORT $__not_Critical10$59564

; 2920 : 	cmp	cx, 0030h

  013a5	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2921 : 	jb	__not_Critical10

  013a9	72 05		 jb	 SHORT $__not_Critical10$59564

; 2922 : 
; 2923 : 	or	word ptr [ebx + 14], 0008h

  013ab	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical10$59564:

; 2924 : 
; 2925 : __not_Critical10:
; 2926 : 	add	ebx, ecx

  013b0	03 d9		 add	 ebx, ecx

; 2927 : 	inc	word ptr [ebx]

  013b2	66 ff 03	 inc	 WORD PTR [ebx]

; 2928 : 	mov	cx, word ptr [ebx]

  013b5	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 2929 : 		add		edi, 2					//	ppush

  013b8	83 c7 02	 add	 edi, 2

; 2930 : 		mov		word ptr [edi], cx

  013bb	66 89 0f	 mov	 WORD PTR [edi], cx

; 2931 : 
; 2932 : 	// get next opcode
; 2933 : 	movzx	ebx, byte ptr [esi + 1]

  013be	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 2934 : 	add	esi, 2

  013c2	83 c6 02	 add	 esi, 2

; 2935 : 
; 2936 : 	// offset to opcode index
; 2937 : 	jmp	opTbl[ebx*4]

  013c5	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ipTos_byte@@YAXXZ ENDP				; OP_ipTos_byte
?OP_ipTos_word@@YAXXZ PROC NEAR				; OP_ipTos_word

; 2943 : 	_asm {
; 2944 : 	mov	pm.debugIP, esi

  013cc	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2945 : //	memIDGetPtr	pm.object, MemObject
; 2946 : 		movzx	ebx, word ptr pm.object

  013d2	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2947 : 		shl		ebx, 4

  013d9	c1 e3 04	 shl	 ebx, 4

; 2948 : 		add		ebx, _descTablePtr

  013dc	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2949 : 		mov		ebx, [ebx]Descriptor.data

  013e2	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2950 : //
; 2951 : 
; 2952 : 	movzx	ecx, word ptr [esi]

  013e5	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2953 : 	cmp	cx, 0056h

  013e8	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2954 : 	ja	__not_Critical11

  013ec	77 0b		 ja	 SHORT $__not_Critical11$59567

; 2955 : 	cmp	cx, 0030h

  013ee	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2956 : 	jb	__not_Critical11

  013f2	72 05		 jb	 SHORT $__not_Critical11$59567

; 2957 : 
; 2958 : 	or	word ptr [ebx + 14], 0008h

  013f4	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical11$59567:

; 2959 : 
; 2960 : __not_Critical11:
; 2961 : 	add	ebx, ecx

  013f9	03 d9		 add	 ebx, ecx

; 2962 : 	inc	word ptr [ebx]

  013fb	66 ff 03	 inc	 WORD PTR [ebx]

; 2963 : 	mov	cx, word ptr [ebx]

  013fe	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 2964 : 		add		edi, 2					//	ppush

  01401	83 c7 02	 add	 edi, 2

; 2965 : 		mov		word ptr [edi], cx

  01404	66 89 0f	 mov	 WORD PTR [edi], cx

; 2966 : 
; 2967 : 	// get next opcode
; 2968 : 	movzx	ebx, byte ptr [esi + 2]

  01407	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 2969 : 	add	esi, 3

  0140b	83 c6 03	 add	 esi, 3

; 2970 : 
; 2971 : 	// offset to opcode index
; 2972 : 	jmp	opTbl[ebx*4]

  0140e	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ipTos_word@@YAXXZ ENDP				; OP_ipTos_word
?OP_dpTos_byte@@YAXXZ PROC NEAR				; OP_dpTos_byte

; 2978 : 	_asm {
; 2979 : 	mov	pm.debugIP, esi

  01415	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 2980 : //	memIDGetPtr	pm.object, MemObject
; 2981 : 		movzx	ebx, word ptr pm.object

  0141b	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 2982 : 		shl		ebx, 4

  01422	c1 e3 04	 shl	 ebx, 4

; 2983 : 		add		ebx, _descTablePtr

  01425	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 2984 : 		mov		ebx, [ebx]Descriptor.data

  0142b	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 2985 : //
; 2986 : 
; 2987 : 	movzx	ecx, byte ptr [esi]

  0142e	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 2988 : 	cmp	cx, 0056h

  01431	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 2989 : 	ja	__not_Critical12

  01435	77 0b		 ja	 SHORT $__not_Critical12$59570

; 2990 : 	cmp	cx, 0030h

  01437	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 2991 : 	jb	__not_Critical12

  0143b	72 05		 jb	 SHORT $__not_Critical12$59570

; 2992 : 
; 2993 : 	or	word ptr [ebx + 14], 0008h

  0143d	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical12$59570:

; 2994 : 
; 2995 : __not_Critical12:
; 2996 : 	add	ebx, ecx

  01442	03 d9		 add	 ebx, ecx

; 2997 : 	dec	word ptr [ebx]

  01444	66 ff 0b	 dec	 WORD PTR [ebx]

; 2998 : 	mov	cx, word ptr [ebx]

  01447	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 2999 : 		add		edi, 2					//	ppush

  0144a	83 c7 02	 add	 edi, 2

; 3000 : 		mov		word ptr [edi], cx

  0144d	66 89 0f	 mov	 WORD PTR [edi], cx

; 3001 : 
; 3002 : 	// get next opcode
; 3003 : 	movzx	ebx, byte ptr [esi + 1]

  01450	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3004 : 	add	esi, 2

  01454	83 c6 02	 add	 esi, 2

; 3005 : 
; 3006 : 	// offset to opcode index
; 3007 : 	jmp	opTbl[ebx*4]

  01457	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dpTos_byte@@YAXXZ ENDP				; OP_dpTos_byte
?OP_dpTos_word@@YAXXZ PROC NEAR				; OP_dpTos_word

; 3013 : 	_asm {
; 3014 : 	mov	pm.debugIP, esi

  0145e	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 3015 : //	memIDGetPtr	pm.object, MemObject
; 3016 : 		movzx	ebx, word ptr pm.object

  01464	0f b7 1d 02 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+2

; 3017 : 		shl		ebx, 4

  0146b	c1 e3 04	 shl	 ebx, 4

; 3018 : 		add		ebx, _descTablePtr

  0146e	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3019 : 		mov		ebx, [ebx]Descriptor.data

  01474	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3020 : //
; 3021 : 
; 3022 : 	movzx	ecx, word ptr [esi]

  01477	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 3023 : 	cmp	cx, 0056h

  0147a	66 83 f9 56	 cmp	 cx, 86			; 00000056H

; 3024 : 	ja	__not_Critical13

  0147e	77 0b		 ja	 SHORT $__not_Critical13$59573

; 3025 : 	cmp	cx, 0030h

  01480	66 83 f9 30	 cmp	 cx, 48			; 00000030H

; 3026 : 	jb	__not_Critical13

  01484	72 05		 jb	 SHORT $__not_Critical13$59573

; 3027 : 
; 3028 : 	or	word ptr [ebx + 14], 0008h

  01486	66 83 4b 0e 08	 or	 WORD PTR [ebx+14], 8
$__not_Critical13$59573:

; 3029 : 
; 3030 : __not_Critical13:
; 3031 : 	add	ebx, ecx

  0148b	03 d9		 add	 ebx, ecx

; 3032 : 	dec	word ptr [ebx]

  0148d	66 ff 0b	 dec	 WORD PTR [ebx]

; 3033 : 	mov	cx, word ptr [ebx]

  01490	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3034 : 		add		edi, 2					//	ppush

  01493	83 c7 02	 add	 edi, 2

; 3035 : 		mov		word ptr [edi], cx

  01496	66 89 0f	 mov	 WORD PTR [edi], cx

; 3036 : 
; 3037 : 	// get next opcode
; 3038 : 	movzx	ebx, byte ptr [esi + 2]

  01499	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3039 : 	add	esi, 3

  0149d	83 c6 03	 add	 esi, 3

; 3040 : 
; 3041 : 	// offset to opcode index
; 3042 : 	jmp	opTbl[ebx*4]

  014a0	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dpTos_word@@YAXXZ ENDP				; OP_dpTos_word
?OP_lofsa@@YAXXZ PROC NEAR				; OP_lofsa

; 3048 : 	_asm {
; 3049 : 	movzx	eax, word ptr [esi]

  014a7	0f b7 06	 movzx	 eax, WORD PTR [esi]

; 3050 : 
; 3051 : 	// get next opcode
; 3052 : 	mov	bl, byte ptr [esi + 2]

  014aa	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 3053 : 	add	esi, 3

  014ad	83 c6 03	 add	 esi, 3

; 3054 : 
; 3055 : 	// offset to opcode index
; 3056 : 	jmp	opTbl[ebx*4]

  014b0	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lofsa@@YAXXZ ENDP					; OP_lofsa
?OP_lofss@@YAXXZ PROC NEAR				; OP_lofss

; 3062 : 	_asm {
; 3063 : 	add	edi, 2

  014b7	83 c7 02	 add	 edi, 2

; 3064 : 	mov	cx, word ptr [esi]

  014ba	66 8b 0e	 mov	 cx, WORD PTR [esi]

; 3065 : 	mov	word ptr [edi], cx

  014bd	66 89 0f	 mov	 WORD PTR [edi], cx

; 3066 : 
; 3067 : 	// get next opcode
; 3068 : 	mov	bl, byte ptr [esi + 2]

  014c0	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 3069 : 	add	esi, 3

  014c3	83 c6 03	 add	 esi, 3

; 3070 : 
; 3071 : 	// offset to opcode index
; 3072 : 	jmp	opTbl[ebx*4]

  014c6	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lofss@@YAXXZ ENDP					; OP_lofss
?OP_push0@@YAXXZ PROC NEAR				; OP_push0

; 3078 : 	_asm {
; 3079 : 		add		edi, 2					//	ppush

  014cd	83 c7 02	 add	 edi, 2

; 3080 : 		mov		word ptr [edi], 0

  014d0	66 c7 07 00 00	 mov	 WORD PTR [edi], 0

; 3081 : 
; 3082 : 	// get next opcode
; 3083 : 	mov	bl, byte ptr [esi]

  014d5	8a 1e		 mov	 bl, BYTE PTR [esi]

; 3084 : 	inc	esi

  014d7	46		 inc	 esi

; 3085 : 
; 3086 : 	// offset to opcode index
; 3087 : 	jmp	opTbl[ebx*4]

  014d8	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_push0@@YAXXZ ENDP					; OP_push0
?OP_push1@@YAXXZ PROC NEAR				; OP_push1

; 3093 : 	_asm {
; 3094 : 		add		edi, 2					//	ppush

  014df	83 c7 02	 add	 edi, 2

; 3095 : 		mov		word ptr [edi], 1

  014e2	66 c7 07 01 00	 mov	 WORD PTR [edi], 1

; 3096 : 
; 3097 : 	// get next opcode
; 3098 : 	mov	bl, byte ptr [esi]

  014e7	8a 1e		 mov	 bl, BYTE PTR [esi]

; 3099 : 	inc	esi

  014e9	46		 inc	 esi

; 3100 : 
; 3101 : 	// offset to opcode index
; 3102 : 	jmp	opTbl[ebx*4]

  014ea	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_push1@@YAXXZ ENDP					; OP_push1
?OP_push2@@YAXXZ PROC NEAR				; OP_push2

; 3108 : 	_asm {
; 3109 : 		add		edi, 2					//	ppush

  014f1	83 c7 02	 add	 edi, 2

; 3110 : 		mov		word ptr [edi], 2

  014f4	66 c7 07 02 00	 mov	 WORD PTR [edi], 2

; 3111 : 
; 3112 : 	// get next opcode
; 3113 : 	mov	bl, byte ptr [esi]

  014f9	8a 1e		 mov	 bl, BYTE PTR [esi]

; 3114 : 	inc	esi

  014fb	46		 inc	 esi

; 3115 : 
; 3116 : 	// offset to opcode index
; 3117 : 	jmp	opTbl[ebx*4]

  014fc	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_push2@@YAXXZ ENDP					; OP_push2
?OP_pushSelf@@YAXXZ PROC NEAR				; OP_pushSelf

; 3123 : 	_asm {
; 3124 : 	mov	cx, pm.object

  01503	66 8b 0d 02 00
	00 00		 mov	 cx, WORD PTR ?pm@@3VPMachine@@A+2

; 3125 : 		add		edi, 2					//	ppush

  0150a	83 c7 02	 add	 edi, 2

; 3126 : 		mov		word ptr [edi], cx

  0150d	66 89 0f	 mov	 WORD PTR [edi], cx

; 3127 : 
; 3128 : 	// get next opcode
; 3129 : 	mov	bl, byte ptr [esi]

  01510	8a 1e		 mov	 bl, BYTE PTR [esi]

; 3130 : 	inc	esi

  01512	46		 inc	 esi

; 3131 : 
; 3132 : 	// offset to opcode index
; 3133 : 	jmp	opTbl[ebx*4]

  01513	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_pushSelf@@YAXXZ ENDP				; OP_pushSelf
?OP_lag_byte@@YAXXZ PROC NEAR				; OP_lag_byte

; 3139 : 	_asm {
; 3140 : 	movzx	edx, byte ptr [esi]

  0151a	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 3141 : 
; 3142 : 	shl	edx, 1

  0151d	d1 e2		 shl	 edx, 1

; 3143 : 	add	edx, pm.GlobalPtr

  0151f	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3144 : 	movsx	eax, word ptr [edx]

  01525	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 3145 : 
; 3146 : 	// get next opcode
; 3147 : 	mov	bl, byte ptr [esi + 1]

  01528	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 3148 : 	add	esi, 2

  0152b	83 c6 02	 add	 esi, 2

; 3149 : 
; 3150 : 	// offset to opcode index
; 3151 : 	jmp	opTbl[ebx*4]

  0152e	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lag_byte@@YAXXZ ENDP				; OP_lag_byte
?OP_lag_word@@YAXXZ PROC NEAR				; OP_lag_word

; 3156 : 	_asm {
; 3157 : 	movzx	edx, word ptr [esi]

  01535	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 3158 : 
; 3159 : 	shl	edx, 1

  01538	d1 e2		 shl	 edx, 1

; 3160 : 	add	edx, pm.GlobalPtr

  0153a	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3161 : 	movsx	eax, word ptr [edx]

  01540	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 3162 : 
; 3163 : 	// get next opcode
; 3164 : 	mov	bl, byte ptr [esi + 2]

  01543	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 3165 : 	add	esi, 3

  01546	83 c6 03	 add	 esi, 3

; 3166 : 
; 3167 : 	// offset to opcode index
; 3168 : 	jmp	opTbl[ebx*4]

  01549	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lag_word@@YAXXZ ENDP				; OP_lag_word
?OP_lal_byte@@YAXXZ PROC NEAR				; OP_lal_byte

; 3174 : 	_asm {
; 3175 : 	mov	pm.debugIP, esi

  01550	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 3176 : 	movzx	ecx, byte ptr [esi]

  01556	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 3177 : 
; 3178 : 	shl	ecx, 1

  01559	d1 e1		 shl	 ecx, 1

; 3179 : //	memIDGetPtr	pm.Locals, MemVariables
; 3180 : 		movzx	ebx, word ptr pm.Locals

  0155b	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3181 : 		shl		ebx, 4

  01562	c1 e3 04	 shl	 ebx, 4

; 3182 : 		add		ebx, _descTablePtr

  01565	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3183 : 		mov		ebx, [ebx]Descriptor.data

  0156b	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3184 : //
; 3185 : 
; 3186 : 	add	ebx, ecx

  0156e	03 d9		 add	 ebx, ecx

; 3187 : 	movsx	eax, word ptr [ebx]

  01570	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3188 : 
; 3189 : 	// get next opcode
; 3190 : 	movzx	ebx, byte ptr [esi + 1]

  01573	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3191 : 	add	esi, 2

  01577	83 c6 02	 add	 esi, 2

; 3192 : 
; 3193 : 	// offset to opcode index
; 3194 : 	jmp	opTbl[ebx*4]

  0157a	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lal_byte@@YAXXZ ENDP				; OP_lal_byte
_TEXT	ENDS
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
;	COMDAT ??DFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT
_this$ = -4
??DFakeObjectID@@QBEPAUObject@@XZ PROC NEAR		; FakeObjectID::operator*, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??DFakeObjectID@@QBEPAUObject@@XZ ENDP			; FakeObjectID::operator*
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
_TEXT	SEGMENT
?OP_lal_word@@YAXXZ PROC NEAR				; OP_lal_word

; 3199 : 	_asm {
; 3200 : 	mov	pm.debugIP, esi

  01581	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 3201 : 	movzx	ecx, word ptr [esi]

  01587	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 3202 : 
; 3203 : 	shl	ecx, 1

  0158a	d1 e1		 shl	 ecx, 1

; 3204 : //	memIDGetPtr	pm.Locals, MemVariables
; 3205 : 		movzx	ebx, word ptr pm.Locals

  0158c	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3206 : 		shl		ebx, 4

  01593	c1 e3 04	 shl	 ebx, 4

; 3207 : 		add		ebx, _descTablePtr

  01596	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3208 : 		mov		ebx, [ebx]Descriptor.data

  0159c	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3209 : //
; 3210 : 
; 3211 : 	add	ebx, ecx

  0159f	03 d9		 add	 ebx, ecx

; 3212 : 	movsx	eax, word ptr [ebx]

  015a1	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3213 : 
; 3214 : 	// get next opcode
; 3215 : 	movzx	ebx, byte ptr [esi + 2]

  015a4	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3216 : 	add	esi, 3

  015a8	83 c6 03	 add	 esi, 3

; 3217 : 
; 3218 : 	// offset to opcode index
; 3219 : 	jmp	opTbl[ebx*4]

  015ab	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lal_word@@YAXXZ ENDP				; OP_lal_word
?OP_lat_byte@@YAXXZ PROC NEAR				; OP_lat_byte

; 3225 : 	_asm {
; 3226 : 	movzx	ebx, byte ptr [esi]

  015b2	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3227 : 
; 3228 : 	shl	ebx, 1

  015b5	d1 e3		 shl	 ebx, 1

; 3229 : 	add	ebx, pm.TempPtr

  015b7	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3230 : 	movsx	eax, word ptr [ebx]

  015bd	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3231 : 
; 3232 : 	// get next opcode
; 3233 : 	movzx	ebx, byte ptr [esi + 1]

  015c0	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3234 : 	add	esi, 2

  015c4	83 c6 02	 add	 esi, 2

; 3235 : 
; 3236 : 	// offset to opcode index
; 3237 : 	jmp	opTbl[ebx*4]

  015c7	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lat_byte@@YAXXZ ENDP				; OP_lat_byte
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
_TEXT	SEGMENT
?OP_lat_word@@YAXXZ PROC NEAR				; OP_lat_word

; 3242 : 	_asm {
; 3243 : 	movzx	ebx, word ptr [esi]

  015ce	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3244 : 
; 3245 : 	shl	ebx, 1

  015d1	d1 e3		 shl	 ebx, 1

; 3246 : 	add	ebx, pm.TempPtr

  015d3	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3247 : 	movsx	eax, word ptr [ebx]

  015d9	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3248 : 
; 3249 : 	// get next opcode
; 3250 : 	movzx	ebx, byte ptr [esi + 2]

  015dc	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3251 : 	add	esi, 3

  015e0	83 c6 03	 add	 esi, 3

; 3252 : 
; 3253 : 	// offset to opcode index
; 3254 : 	jmp	opTbl[ebx*4]

  015e3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lat_word@@YAXXZ ENDP				; OP_lat_word
?OP_lap_byte@@YAXXZ PROC NEAR				; OP_lap_byte

; 3260 : 	_asm {
; 3261 : 	movzx	ebx, byte ptr [esi]

  015ea	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3262 : 
; 3263 : 	shl	ebx, 1

  015ed	d1 e3		 shl	 ebx, 1

; 3264 : 	add	ebx, pm.ParmPtr

  015ef	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3265 : 	movsx	eax, word ptr [ebx]

  015f5	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3266 : 
; 3267 : 	// get next opcode
; 3268 : 	movzx	ebx, byte ptr [esi + 1]

  015f8	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3269 : 	add	esi, 2

  015fc	83 c6 02	 add	 esi, 2

; 3270 : 
; 3271 : 	// offset to opcode index
; 3272 : 	jmp	opTbl[ebx*4]

  015ff	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lap_byte@@YAXXZ ENDP				; OP_lap_byte
?OP_lap_word@@YAXXZ PROC NEAR				; OP_lap_word

; 3277 : 	_asm {
; 3278 : 	movzx	ebx, word ptr [esi]

  01606	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3279 : 
; 3280 : 	shl	ebx, 1

  01609	d1 e3		 shl	 ebx, 1

; 3281 : 	add	ebx, pm.ParmPtr

  0160b	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3282 : 	movsx	eax, word ptr [ebx]

  01611	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3283 : 
; 3284 : 	// get next opcode
; 3285 : 	movzx	ebx, byte ptr [esi + 2]

  01614	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3286 : 	add	esi, 3

  01618	83 c6 03	 add	 esi, 3

; 3287 : 
; 3288 : 	// offset to opcode index
; 3289 : 	jmp	opTbl[ebx*4]

  0161b	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lap_word@@YAXXZ ENDP				; OP_lap_word
?OP_lsg_byte@@YAXXZ PROC NEAR				; OP_lsg_byte

; 3295 : 	_asm {
; 3296 : 	movzx	edx, byte ptr [esi]

  01622	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 3297 : 
; 3298 : 	shl	edx, 1

  01625	d1 e2		 shl	 edx, 1

; 3299 : 	add	edx, pm.GlobalPtr

  01627	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3300 : 	mov	cx, word ptr [edx]

  0162d	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 3301 : 	add	edi, 2

  01630	83 c7 02	 add	 edi, 2

; 3302 : 	mov	word ptr [edi], cx

  01633	66 89 0f	 mov	 WORD PTR [edi], cx

; 3303 : 
; 3304 : 	// get next opcode
; 3305 : 	mov	bl, byte ptr [esi + 1]

  01636	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 3306 : 	add	esi, 2

  01639	83 c6 02	 add	 esi, 2

; 3307 : 
; 3308 : 	// offset to opcode index
; 3309 : 	jmp	opTbl[ebx*4]

  0163c	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsg_byte@@YAXXZ ENDP				; OP_lsg_byte
?OP_lsg_word@@YAXXZ PROC NEAR				; OP_lsg_word

; 3314 : 	_asm {
; 3315 : 	movzx	edx, word ptr [esi]

  01643	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 3316 : 
; 3317 : 	shl	edx, 1

  01646	d1 e2		 shl	 edx, 1

; 3318 : 	add	edx, pm.GlobalPtr

  01648	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3319 : 	mov	cx, word ptr [edx]

  0164e	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 3320 : 	add	edi, 2

  01651	83 c7 02	 add	 edi, 2

; 3321 : 	mov	word ptr [edi], cx

  01654	66 89 0f	 mov	 WORD PTR [edi], cx

; 3322 : 
; 3323 : 	// get next opcode
; 3324 : 	mov	bl, byte ptr [esi + 2]

  01657	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 3325 : 	add	esi, 3

  0165a	83 c6 03	 add	 esi, 3

; 3326 : 
; 3327 : 	// offset to opcode index
; 3328 : 	jmp	opTbl[ebx*4]

  0165d	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsg_word@@YAXXZ ENDP				; OP_lsg_word
?OP_lsl_byte@@YAXXZ PROC NEAR				; OP_lsl_byte

; 3334 : 	_asm {
; 3335 : 	mov	pm.debugIP, esi

  01664	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 3336 : 	movzx	ecx, byte ptr [esi]

  0166a	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 3337 : 
; 3338 : 	shl	ecx, 1

  0166d	d1 e1		 shl	 ecx, 1

; 3339 : //	memIDGetPtr	pm.Locals, MemVariables
; 3340 : 		movzx	ebx, word ptr pm.Locals

  0166f	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3341 : 		shl		ebx, 4

  01676	c1 e3 04	 shl	 ebx, 4

; 3342 : 		add		ebx, _descTablePtr

  01679	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3343 : 		mov		ebx, [ebx]Descriptor.data

  0167f	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3344 : //
; 3345 : 
; 3346 : 	add	ebx, ecx

  01682	03 d9		 add	 ebx, ecx

; 3347 : 	mov	cx, word ptr [ebx]

  01684	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3348 : 	add	edi, 2

  01687	83 c7 02	 add	 edi, 2

; 3349 : 	mov	word ptr [edi], cx

  0168a	66 89 0f	 mov	 WORD PTR [edi], cx

; 3350 : 
; 3351 : 	// get next opcode
; 3352 : 	movzx	ebx, byte ptr [esi + 1]

  0168d	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3353 : 	add	esi, 2

  01691	83 c6 02	 add	 esi, 2

; 3354 : 
; 3355 : 	// offset to opcode index
; 3356 : 	jmp	opTbl[ebx*4]

  01694	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsl_byte@@YAXXZ ENDP				; OP_lsl_byte
?OP_lsl_word@@YAXXZ PROC NEAR				; OP_lsl_word

; 3361 : 	_asm {
; 3362 : 	mov	pm.debugIP, esi

  0169b	89 35 f0 05 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+1520, esi

; 3363 : 	movzx	ecx, word ptr [esi]

  016a1	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 3364 : 
; 3365 : 	shl	ecx, 1

  016a4	d1 e1		 shl	 ecx, 1

; 3366 : //	memIDGetPtr	pm.Locals, MemVariables
; 3367 : 		movzx	ebx, word ptr pm.Locals

  016a6	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3368 : 		shl		ebx, 4

  016ad	c1 e3 04	 shl	 ebx, 4

; 3369 : 		add		ebx, _descTablePtr

  016b0	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3370 : 		mov		ebx, [ebx]Descriptor.data

  016b6	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3371 : //
; 3372 : 
; 3373 : 	add	ebx, ecx

  016b9	03 d9		 add	 ebx, ecx

; 3374 : 	mov	cx, word ptr [ebx]

  016bb	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3375 : 	add	edi, 2

  016be	83 c7 02	 add	 edi, 2

; 3376 : 	mov	word ptr [edi], cx

  016c1	66 89 0f	 mov	 WORD PTR [edi], cx

; 3377 : 
; 3378 : 	// get next opcode
; 3379 : 	movzx	ebx, byte ptr [esi + 2]

  016c4	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3380 : 	add	esi, 3

  016c8	83 c6 03	 add	 esi, 3

; 3381 : 
; 3382 : 	// offset to opcode index
; 3383 : 	jmp	opTbl[ebx*4]

  016cb	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsl_word@@YAXXZ ENDP				; OP_lsl_word
?OP_lst_byte@@YAXXZ PROC NEAR				; OP_lst_byte

; 3389 : 	_asm {
; 3390 : 	movzx	ebx, byte ptr [esi]

  016d2	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3391 : 
; 3392 : 	shl	ebx, 1

  016d5	d1 e3		 shl	 ebx, 1

; 3393 : 	add	ebx, pm.TempPtr

  016d7	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3394 : 	mov	cx, word ptr [ebx]

  016dd	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3395 : 	add	edi, 2

  016e0	83 c7 02	 add	 edi, 2

; 3396 : 	mov	word ptr [edi], cx

  016e3	66 89 0f	 mov	 WORD PTR [edi], cx

; 3397 : 
; 3398 : 	// get next opcode
; 3399 : 	movzx	ebx, byte ptr [esi + 1]

  016e6	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3400 : 	add	esi, 2

  016ea	83 c6 02	 add	 esi, 2

; 3401 : 
; 3402 : 	// offset to opcode index
; 3403 : 	jmp	opTbl[ebx*4]

  016ed	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lst_byte@@YAXXZ ENDP				; OP_lst_byte
?OP_lst_word@@YAXXZ PROC NEAR				; OP_lst_word

; 3408 : 	_asm {
; 3409 : 	movzx	ebx, word ptr [esi]

  016f4	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3410 : 
; 3411 : 	shl	ebx, 1

  016f7	d1 e3		 shl	 ebx, 1

; 3412 : 	add	ebx, pm.TempPtr

  016f9	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3413 : 	mov	cx, word ptr [ebx]

  016ff	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3414 : 	add	edi, 2

  01702	83 c7 02	 add	 edi, 2

; 3415 : 	mov	word ptr [edi], cx

  01705	66 89 0f	 mov	 WORD PTR [edi], cx

; 3416 : 
; 3417 : 	// get next opcode
; 3418 : 	movzx	ebx, byte ptr [esi + 2]

  01708	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3419 : 	add	esi, 3

  0170c	83 c6 03	 add	 esi, 3

; 3420 : 
; 3421 : 	// offset to opcode index
; 3422 : 	jmp	opTbl[ebx*4]

  0170f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lst_word@@YAXXZ ENDP				; OP_lst_word
?OP_lsp_byte@@YAXXZ PROC NEAR				; OP_lsp_byte

; 3428 : 	_asm {
; 3429 : 	movzx	ebx, byte ptr [esi]

  01716	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3430 : 
; 3431 : 	shl	ebx, 1

  01719	d1 e3		 shl	 ebx, 1

; 3432 : 	add	ebx, pm.ParmPtr

  0171b	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3433 : 	mov	cx, word ptr [ebx]

  01721	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3434 : 	add	edi, 2

  01724	83 c7 02	 add	 edi, 2

; 3435 : 	mov	word ptr [edi], cx

  01727	66 89 0f	 mov	 WORD PTR [edi], cx

; 3436 : 
; 3437 : 	// get next opcode
; 3438 : 	movzx	ebx, byte ptr [esi + 1]

  0172a	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3439 : 	add	esi, 2

  0172e	83 c6 02	 add	 esi, 2

; 3440 : 
; 3441 : 	// offset to opcode index
; 3442 : 	jmp	opTbl[ebx*4]

  01731	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsp_byte@@YAXXZ ENDP				; OP_lsp_byte
?OP_lsp_word@@YAXXZ PROC NEAR				; OP_lsp_word

; 3447 : 	_asm {
; 3448 : 	movzx	ebx, word ptr [esi]

  01738	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3449 : 
; 3450 : 	shl	ebx, 1

  0173b	d1 e3		 shl	 ebx, 1

; 3451 : 	add	ebx, pm.ParmPtr

  0173d	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3452 : 	mov	cx, word ptr [ebx]

  01743	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3453 : 	add	edi, 2

  01746	83 c7 02	 add	 edi, 2

; 3454 : 	mov	word ptr [edi], cx

  01749	66 89 0f	 mov	 WORD PTR [edi], cx

; 3455 : 
; 3456 : 	// get next opcode
; 3457 : 	movzx	ebx, byte ptr [esi + 2]

  0174c	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3458 : 	add	esi, 3

  01750	83 c6 03	 add	 esi, 3

; 3459 : 
; 3460 : 	// offset to opcode index
; 3461 : 	jmp	opTbl[ebx*4]

  01753	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsp_word@@YAXXZ ENDP				; OP_lsp_word
?OP_lagi_byte@@YAXXZ PROC NEAR				; OP_lagi_byte

; 3467 : 	_asm {
; 3468 : 	movzx	edx, byte ptr [esi]

  0175a	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 3469 : 
; 3470 : 	add	edx, eax

  0175d	03 d0		 add	 edx, eax

; 3471 : 	shl	edx, 1

  0175f	d1 e2		 shl	 edx, 1

; 3472 : 	add	edx, pm.GlobalPtr

  01761	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3473 : 	movsx	eax, word ptr [edx]

  01767	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 3474 : 
; 3475 : 	// get next opcode
; 3476 : 	mov	bl, byte ptr [esi + 1]

  0176a	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 3477 : 	add	esi, 2

  0176d	83 c6 02	 add	 esi, 2

; 3478 : 
; 3479 : 	// offset to opcode index
; 3480 : 	jmp	opTbl[ebx*4]

  01770	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lagi_byte@@YAXXZ ENDP				; OP_lagi_byte
?OP_lagi_word@@YAXXZ PROC NEAR				; OP_lagi_word

; 3485 : 	_asm {
; 3486 : 	movzx	edx, word ptr [esi]

  01777	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 3487 : 
; 3488 : 	add	edx, eax

  0177a	03 d0		 add	 edx, eax

; 3489 : 	shl	edx, 1

  0177c	d1 e2		 shl	 edx, 1

; 3490 : 	add	edx, pm.GlobalPtr

  0177e	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3491 : 	movsx	eax, word ptr [edx]

  01784	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 3492 : 
; 3493 : 	// get next opcode
; 3494 : 	mov	bl, byte ptr [esi + 2]

  01787	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 3495 : 	add	esi, 3

  0178a	83 c6 03	 add	 esi, 3

; 3496 : 
; 3497 : 	// offset to opcode index
; 3498 : 	jmp	opTbl[ebx*4]

  0178d	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lagi_word@@YAXXZ ENDP				; OP_lagi_word
?OP_lali_byte@@YAXXZ PROC NEAR				; OP_lali_byte

; 3504 : 	_asm {
; 3505 : 	movzx	ecx, byte ptr [esi]

  01794	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 3506 : 
; 3507 : 	add	ecx, eax

  01797	03 c8		 add	 ecx, eax

; 3508 : 	shl	ecx, 1

  01799	d1 e1		 shl	 ecx, 1

; 3509 : //	memIDGetPtr	pm.Locals, MemVariables
; 3510 : 		movzx	ebx, word ptr pm.Locals

  0179b	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3511 : 		shl		ebx, 4

  017a2	c1 e3 04	 shl	 ebx, 4

; 3512 : 		add		ebx, _descTablePtr

  017a5	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3513 : 		mov		ebx, [ebx]Descriptor.data

  017ab	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3514 : //
; 3515 : 
; 3516 : 	add	ebx, ecx

  017ae	03 d9		 add	 ebx, ecx

; 3517 : 	movsx	eax, word ptr [ebx]

  017b0	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3518 : 
; 3519 : 	// get next opcode
; 3520 : 	movzx	ebx, byte ptr [esi + 1]

  017b3	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3521 : 	add	esi, 2

  017b7	83 c6 02	 add	 esi, 2

; 3522 : 
; 3523 : 	// offset to opcode index
; 3524 : 	jmp	opTbl[ebx*4]

  017ba	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lali_byte@@YAXXZ ENDP				; OP_lali_byte
?OP_lali_word@@YAXXZ PROC NEAR				; OP_lali_word

; 3529 : 	_asm {
; 3530 : 	movzx	ecx, word ptr [esi]

  017c1	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 3531 : 
; 3532 : 	add	ecx, eax

  017c4	03 c8		 add	 ecx, eax

; 3533 : 	shl	ecx, 1

  017c6	d1 e1		 shl	 ecx, 1

; 3534 : //	memIDGetPtr	pm.Locals, MemVariables
; 3535 : 		movzx	ebx, word ptr pm.Locals

  017c8	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3536 : 		shl		ebx, 4

  017cf	c1 e3 04	 shl	 ebx, 4

; 3537 : 		add		ebx, _descTablePtr

  017d2	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3538 : 		mov		ebx, [ebx]Descriptor.data

  017d8	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3539 : //
; 3540 : 
; 3541 : 	add	ebx, ecx

  017db	03 d9		 add	 ebx, ecx

; 3542 : 	movsx	eax, word ptr [ebx]

  017dd	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3543 : 
; 3544 : 	// get next opcode
; 3545 : 	movzx	ebx, byte ptr [esi + 2]

  017e0	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3546 : 	add	esi, 3

  017e4	83 c6 03	 add	 esi, 3

; 3547 : 
; 3548 : 	// offset to opcode index
; 3549 : 	jmp	opTbl[ebx*4]

  017e7	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lali_word@@YAXXZ ENDP				; OP_lali_word
?OP_lati_byte@@YAXXZ PROC NEAR				; OP_lati_byte

; 3555 : 	_asm {
; 3556 : 	movzx	ebx, byte ptr [esi]

  017ee	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3557 : 
; 3558 : 	add	ebx, eax

  017f1	03 d8		 add	 ebx, eax

; 3559 : 	shl	ebx, 1

  017f3	d1 e3		 shl	 ebx, 1

; 3560 : 	add	ebx, pm.TempPtr

  017f5	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3561 : 	movsx	eax, word ptr [ebx]

  017fb	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3562 : 
; 3563 : 	// get next opcode
; 3564 : 	movzx	ebx, byte ptr [esi + 1]

  017fe	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3565 : 	add	esi, 2

  01802	83 c6 02	 add	 esi, 2

; 3566 : 
; 3567 : 	// offset to opcode index
; 3568 : 	jmp	opTbl[ebx*4]

  01805	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lati_byte@@YAXXZ ENDP				; OP_lati_byte
?OP_lati_word@@YAXXZ PROC NEAR				; OP_lati_word

; 3573 : 	_asm {
; 3574 : 	movzx	ebx, word ptr [esi]

  0180c	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3575 : 
; 3576 : 	add	ebx, eax

  0180f	03 d8		 add	 ebx, eax

; 3577 : 	shl	ebx, 1

  01811	d1 e3		 shl	 ebx, 1

; 3578 : 	add	ebx, pm.TempPtr

  01813	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3579 : 	movsx	eax, word ptr [ebx]

  01819	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3580 : 
; 3581 : 	// get next opcode
; 3582 : 	movzx	ebx, byte ptr [esi + 2]

  0181c	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3583 : 	add	esi, 3

  01820	83 c6 03	 add	 esi, 3

; 3584 : 
; 3585 : 	// offset to opcode index
; 3586 : 	jmp	opTbl[ebx*4]

  01823	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lati_word@@YAXXZ ENDP				; OP_lati_word
?OP_lapi_byte@@YAXXZ PROC NEAR				; OP_lapi_byte

; 3592 : 	_asm {
; 3593 : 	movzx	ebx, byte ptr [esi]

  0182a	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3594 : 
; 3595 : 	add	ebx, eax

  0182d	03 d8		 add	 ebx, eax

; 3596 : 	shl	ebx, 1

  0182f	d1 e3		 shl	 ebx, 1

; 3597 : 	add	ebx, pm.ParmPtr

  01831	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3598 : 	movsx	eax, word ptr [ebx]

  01837	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3599 : 
; 3600 : 	// get next opcode
; 3601 : 	movzx	ebx, byte ptr [esi + 1]

  0183a	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3602 : 	add	esi, 2

  0183e	83 c6 02	 add	 esi, 2

; 3603 : 
; 3604 : 	// offset to opcode index
; 3605 : 	jmp	opTbl[ebx*4]

  01841	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lapi_byte@@YAXXZ ENDP				; OP_lapi_byte
?OP_lapi_word@@YAXXZ PROC NEAR				; OP_lapi_word

; 3610 : 	_asm {
; 3611 : 	movzx	ebx, word ptr [esi]

  01848	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3612 : 
; 3613 : 	add	ebx, eax

  0184b	03 d8		 add	 ebx, eax

; 3614 : 	shl	ebx, 1

  0184d	d1 e3		 shl	 ebx, 1

; 3615 : 	add	ebx, pm.ParmPtr

  0184f	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3616 : 	movsx	eax, word ptr [ebx]

  01855	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 3617 : 
; 3618 : 	// get next opcode
; 3619 : 	movzx	ebx, byte ptr [esi + 2]

  01858	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3620 : 	add	esi, 3

  0185c	83 c6 03	 add	 esi, 3

; 3621 : 
; 3622 : 	// offset to opcode index
; 3623 : 	jmp	opTbl[ebx*4]

  0185f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lapi_word@@YAXXZ ENDP				; OP_lapi_word
?OP_lsgi_byte@@YAXXZ PROC NEAR				; OP_lsgi_byte

; 3629 : 	_asm {
; 3630 : 	movzx	edx, byte ptr [esi]

  01866	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 3631 : 
; 3632 : 	add	edx, eax

  01869	03 d0		 add	 edx, eax

; 3633 : 	shl	edx, 1

  0186b	d1 e2		 shl	 edx, 1

; 3634 : 	add	edx, pm.GlobalPtr

  0186d	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3635 : 	mov	cx, word ptr [edx]

  01873	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 3636 : 	add	edi, 2

  01876	83 c7 02	 add	 edi, 2

; 3637 : 	mov	word ptr [edi], cx

  01879	66 89 0f	 mov	 WORD PTR [edi], cx

; 3638 : 
; 3639 : 	// get next opcode
; 3640 : 	mov	bl, byte ptr [esi + 1]

  0187c	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 3641 : 	add	esi, 2

  0187f	83 c6 02	 add	 esi, 2

; 3642 : 
; 3643 : 	// offset to opcode index
; 3644 : 	jmp	opTbl[ebx*4]

  01882	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsgi_byte@@YAXXZ ENDP				; OP_lsgi_byte
?OP_lsgi_word@@YAXXZ PROC NEAR				; OP_lsgi_word

; 3649 : 	_asm {
; 3650 : 	movzx	edx, word ptr [esi]

  01889	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 3651 : 
; 3652 : 	add	edx, eax

  0188c	03 d0		 add	 edx, eax

; 3653 : 	shl	edx, 1

  0188e	d1 e2		 shl	 edx, 1

; 3654 : 	add	edx, pm.GlobalPtr

  01890	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3655 : 	mov	cx, word ptr [edx]

  01896	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 3656 : 	add	edi, 2

  01899	83 c7 02	 add	 edi, 2

; 3657 : 	mov	word ptr [edi], cx

  0189c	66 89 0f	 mov	 WORD PTR [edi], cx

; 3658 : 
; 3659 : 	// get next opcode
; 3660 : 	mov	bl, byte ptr [esi + 2]

  0189f	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 3661 : 	add	esi, 3

  018a2	83 c6 03	 add	 esi, 3

; 3662 : 
; 3663 : 	// offset to opcode index
; 3664 : 	jmp	opTbl[ebx*4]

  018a5	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsgi_word@@YAXXZ ENDP				; OP_lsgi_word
?OP_lsli_byte@@YAXXZ PROC NEAR				; OP_lsli_byte

; 3670 : 	_asm {
; 3671 : 	movzx	ecx, byte ptr [esi]

  018ac	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 3672 : 
; 3673 : 	add	ecx, eax

  018af	03 c8		 add	 ecx, eax

; 3674 : 	shl	ecx, 1

  018b1	d1 e1		 shl	 ecx, 1

; 3675 : //	memIDGetPtr	pm.Locals, MemVariables
; 3676 : 		movzx	ebx, word ptr pm.Locals

  018b3	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3677 : 		shl		ebx, 4

  018ba	c1 e3 04	 shl	 ebx, 4

; 3678 : 		add		ebx, _descTablePtr

  018bd	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3679 : 		mov		ebx, [ebx]Descriptor.data

  018c3	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3680 : //
; 3681 : 
; 3682 : 	add	ebx, ecx

  018c6	03 d9		 add	 ebx, ecx

; 3683 : 	mov	cx, word ptr [ebx]

  018c8	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3684 : 	add	edi, 2

  018cb	83 c7 02	 add	 edi, 2

; 3685 : 	mov	word ptr [edi], cx

  018ce	66 89 0f	 mov	 WORD PTR [edi], cx

; 3686 : 
; 3687 : 	// get next opcode
; 3688 : 	movzx	ebx, byte ptr [esi + 1]

  018d1	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3689 : 	add	esi, 2

  018d5	83 c6 02	 add	 esi, 2

; 3690 : 
; 3691 : 	// offset to opcode index
; 3692 : 	jmp	opTbl[ebx*4]

  018d8	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsli_byte@@YAXXZ ENDP				; OP_lsli_byte
?OP_lsli_word@@YAXXZ PROC NEAR				; OP_lsli_word

; 3697 : 	_asm {
; 3698 : 	movzx	ecx, word ptr [esi]

  018df	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 3699 : 
; 3700 : 	add	ecx, eax

  018e2	03 c8		 add	 ecx, eax

; 3701 : 	shl	ecx, 1

  018e4	d1 e1		 shl	 ecx, 1

; 3702 : //	memIDGetPtr	pm.Locals, MemVariables
; 3703 : 		movzx	ebx, word ptr pm.Locals

  018e6	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3704 : 		shl		ebx, 4

  018ed	c1 e3 04	 shl	 ebx, 4

; 3705 : 		add		ebx, _descTablePtr

  018f0	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3706 : 		mov		ebx, [ebx]Descriptor.data

  018f6	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3707 : //
; 3708 : 
; 3709 : 	add	ebx, ecx

  018f9	03 d9		 add	 ebx, ecx

; 3710 : 	mov	cx, word ptr [ebx]

  018fb	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3711 : 	add	edi, 2

  018fe	83 c7 02	 add	 edi, 2

; 3712 : 	mov	word ptr [edi], cx

  01901	66 89 0f	 mov	 WORD PTR [edi], cx

; 3713 : 
; 3714 : 	// get next opcode
; 3715 : 	movzx	ebx, byte ptr [esi + 2]

  01904	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3716 : 	add	esi, 3

  01908	83 c6 03	 add	 esi, 3

; 3717 : 
; 3718 : 	// offset to opcode index
; 3719 : 	jmp	opTbl[ebx*4]

  0190b	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsli_word@@YAXXZ ENDP				; OP_lsli_word
?OP_lsti_byte@@YAXXZ PROC NEAR				; OP_lsti_byte

; 3725 : 	_asm {
; 3726 : 	movzx	ebx, byte ptr [esi]

  01912	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3727 : 
; 3728 : 	add	ebx, eax

  01915	03 d8		 add	 ebx, eax

; 3729 : 	shl	ebx, 1

  01917	d1 e3		 shl	 ebx, 1

; 3730 : 	add	ebx, pm.TempPtr

  01919	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3731 : 	mov	cx, word ptr [ebx]

  0191f	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3732 : 	add	edi, 2

  01922	83 c7 02	 add	 edi, 2

; 3733 : 	mov	word ptr [edi], cx

  01925	66 89 0f	 mov	 WORD PTR [edi], cx

; 3734 : 
; 3735 : 	// get next opcode
; 3736 : 	movzx	ebx, byte ptr [esi + 1]

  01928	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3737 : 	add	esi, 2

  0192c	83 c6 02	 add	 esi, 2

; 3738 : 
; 3739 : 	// offset to opcode index
; 3740 : 	jmp	opTbl[ebx*4]

  0192f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsti_byte@@YAXXZ ENDP				; OP_lsti_byte
?OP_lsti_word@@YAXXZ PROC NEAR				; OP_lsti_word

; 3745 : 	_asm {
; 3746 : 	movzx	ebx, word ptr [esi]

  01936	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3747 : 
; 3748 : 	add	ebx, eax

  01939	03 d8		 add	 ebx, eax

; 3749 : 	shl	ebx, 1

  0193b	d1 e3		 shl	 ebx, 1

; 3750 : 	add	ebx, pm.TempPtr

  0193d	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3751 : 	mov	cx, word ptr [ebx]

  01943	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3752 : 	add	edi, 2

  01946	83 c7 02	 add	 edi, 2

; 3753 : 	mov	word ptr [edi], cx

  01949	66 89 0f	 mov	 WORD PTR [edi], cx

; 3754 : 
; 3755 : 	// get next opcode
; 3756 : 	movzx	ebx, byte ptr [esi + 2]

  0194c	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3757 : 	add	esi, 3

  01950	83 c6 03	 add	 esi, 3

; 3758 : 
; 3759 : 	// offset to opcode index
; 3760 : 	jmp	opTbl[ebx*4]

  01953	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lsti_word@@YAXXZ ENDP				; OP_lsti_word
?OP_lspi_byte@@YAXXZ PROC NEAR				; OP_lspi_byte

; 3766 : 	_asm {
; 3767 : 	movzx	ebx, byte ptr [esi]

  0195a	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3768 : 
; 3769 : 	add	ebx, eax

  0195d	03 d8		 add	 ebx, eax

; 3770 : 	shl	ebx, 1

  0195f	d1 e3		 shl	 ebx, 1

; 3771 : 	add	ebx, pm.ParmPtr

  01961	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3772 : 	mov	cx, word ptr [ebx]

  01967	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3773 : 	add	edi, 2

  0196a	83 c7 02	 add	 edi, 2

; 3774 : 	mov	word ptr [edi], cx

  0196d	66 89 0f	 mov	 WORD PTR [edi], cx

; 3775 : 
; 3776 : 	// get next opcode
; 3777 : 	movzx	ebx, byte ptr [esi + 1]

  01970	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3778 : 	add	esi, 2

  01974	83 c6 02	 add	 esi, 2

; 3779 : 
; 3780 : 	// offset to opcode index
; 3781 : 	jmp	opTbl[ebx*4]

  01977	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lspi_byte@@YAXXZ ENDP				; OP_lspi_byte
?OP_lspi_word@@YAXXZ PROC NEAR				; OP_lspi_word

; 3786 : 	_asm {
; 3787 : 	movzx	ebx, word ptr [esi]

  0197e	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3788 : 
; 3789 : 	add	ebx, eax

  01981	03 d8		 add	 ebx, eax

; 3790 : 	shl	ebx, 1

  01983	d1 e3		 shl	 ebx, 1

; 3791 : 	add	ebx, pm.ParmPtr

  01985	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3792 : 	mov	cx, word ptr [ebx]

  0198b	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 3793 : 	add	edi, 2

  0198e	83 c7 02	 add	 edi, 2

; 3794 : 	mov	word ptr [edi], cx

  01991	66 89 0f	 mov	 WORD PTR [edi], cx

; 3795 : 
; 3796 : 	// get next opcode
; 3797 : 	movzx	ebx, byte ptr [esi + 2]

  01994	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3798 : 	add	esi, 3

  01998	83 c6 03	 add	 esi, 3

; 3799 : 
; 3800 : 	// offset to opcode index
; 3801 : 	jmp	opTbl[ebx*4]

  0199b	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_lspi_word@@YAXXZ ENDP				; OP_lspi_word
?OP_sag_byte@@YAXXZ PROC NEAR				; OP_sag_byte

; 3807 : 	_asm {
; 3808 : 	movzx	edx, byte ptr [esi]

  019a2	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 3809 : 
; 3810 : 	shl	edx, 1

  019a5	d1 e2		 shl	 edx, 1

; 3811 : 	add	edx, pm.GlobalPtr

  019a7	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3812 : 	mov	word ptr [edx], ax

  019ad	66 89 02	 mov	 WORD PTR [edx], ax

; 3813 : 
; 3814 : 	// get next opcode
; 3815 : 	mov	bl, byte ptr [esi + 1]

  019b0	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 3816 : 	add	esi, 2

  019b3	83 c6 02	 add	 esi, 2

; 3817 : 
; 3818 : 	// offset to opcode index
; 3819 : 	jmp	opTbl[ebx*4]

  019b6	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sag_byte@@YAXXZ ENDP				; OP_sag_byte
?OP_sag_word@@YAXXZ PROC NEAR				; OP_sag_word

; 3824 : 	_asm {
; 3825 : 	movzx	edx, word ptr [esi]

  019bd	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 3826 : 
; 3827 : 	shl	edx, 1

  019c0	d1 e2		 shl	 edx, 1

; 3828 : 	add	edx, pm.GlobalPtr

  019c2	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3829 : 	mov	word ptr [edx], ax

  019c8	66 89 02	 mov	 WORD PTR [edx], ax

; 3830 : 
; 3831 : 	// get next opcode
; 3832 : 	mov	bl, byte ptr [esi + 2]

  019cb	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 3833 : 	add	esi, 3

  019ce	83 c6 03	 add	 esi, 3

; 3834 : 
; 3835 : 	// offset to opcode index
; 3836 : 	jmp	opTbl[ebx*4]

  019d1	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sag_word@@YAXXZ ENDP				; OP_sag_word
?OP_sal_byte@@YAXXZ PROC NEAR				; OP_sal_byte

; 3842 : 	_asm {
; 3843 : 	movzx	ecx, byte ptr [esi]

  019d8	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 3844 : 
; 3845 : 	shl	ecx, 1

  019db	d1 e1		 shl	 ecx, 1

; 3846 : //	memIDGetPtr	pm.Locals, MemVariables
; 3847 : 		movzx	ebx, word ptr pm.Locals

  019dd	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3848 : 		shl		ebx, 4

  019e4	c1 e3 04	 shl	 ebx, 4

; 3849 : 		add		ebx, _descTablePtr

  019e7	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3850 : 		mov		ebx, [ebx]Descriptor.data

  019ed	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3851 : //
; 3852 : 
; 3853 : 	add	ebx, ecx

  019f0	03 d9		 add	 ebx, ecx

; 3854 : 	mov	word ptr [ebx], ax

  019f2	66 89 03	 mov	 WORD PTR [ebx], ax

; 3855 : 
; 3856 : 	// get next opcode
; 3857 : 	movzx	ebx, byte ptr [esi + 1]

  019f5	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3858 : 	add	esi, 2

  019f9	83 c6 02	 add	 esi, 2

; 3859 : 
; 3860 : 	// offset to opcode index
; 3861 : 	jmp	opTbl[ebx*4]

  019fc	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sal_byte@@YAXXZ ENDP				; OP_sal_byte
?OP_sal_word@@YAXXZ PROC NEAR				; OP_sal_word

; 3866 : 	_asm {
; 3867 : 	movzx	ecx, word ptr [esi]

  01a03	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 3868 : 
; 3869 : 	shl	ecx, 1

  01a06	d1 e1		 shl	 ecx, 1

; 3870 : //	memIDGetPtr	pm.Locals, MemVariables
; 3871 : 		movzx	ebx, word ptr pm.Locals

  01a08	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 3872 : 		shl		ebx, 4

  01a0f	c1 e3 04	 shl	 ebx, 4

; 3873 : 		add		ebx, _descTablePtr

  01a12	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 3874 : 		mov		ebx, [ebx]Descriptor.data

  01a18	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 3875 : //
; 3876 : 
; 3877 : 	add	ebx, ecx

  01a1b	03 d9		 add	 ebx, ecx

; 3878 : 	mov	word ptr [ebx], ax

  01a1d	66 89 03	 mov	 WORD PTR [ebx], ax

; 3879 : 
; 3880 : 	// get next opcode
; 3881 : 	movzx	ebx, byte ptr [esi + 2]

  01a20	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3882 : 	add	esi, 3

  01a24	83 c6 03	 add	 esi, 3

; 3883 : 
; 3884 : 	// offset to opcode index
; 3885 : 	jmp	opTbl[ebx*4]

  01a27	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sal_word@@YAXXZ ENDP				; OP_sal_word
?OP_sat_byte@@YAXXZ PROC NEAR				; OP_sat_byte

; 3891 : 	_asm {
; 3892 : 	movzx	ebx, byte ptr [esi]

  01a2e	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3893 : 
; 3894 : 	shl	ebx, 1

  01a31	d1 e3		 shl	 ebx, 1

; 3895 : 	add	ebx, pm.TempPtr

  01a33	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3896 : 	mov	word ptr [ebx], ax

  01a39	66 89 03	 mov	 WORD PTR [ebx], ax

; 3897 : 
; 3898 : 	// get next opcode
; 3899 : 	movzx	ebx, byte ptr [esi + 1]

  01a3c	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3900 : 	add	esi, 2

  01a40	83 c6 02	 add	 esi, 2

; 3901 : 
; 3902 : 	// offset to opcode index
; 3903 : 	jmp	opTbl[ebx*4]

  01a43	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sat_byte@@YAXXZ ENDP				; OP_sat_byte
?OP_sat_word@@YAXXZ PROC NEAR				; OP_sat_word

; 3908 : 	_asm {
; 3909 : 	movzx	ebx, word ptr [esi]

  01a4a	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3910 : 
; 3911 : 	shl	ebx, 1

  01a4d	d1 e3		 shl	 ebx, 1

; 3912 : 	add	ebx, pm.TempPtr

  01a4f	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 3913 : 	mov	word ptr [ebx], ax

  01a55	66 89 03	 mov	 WORD PTR [ebx], ax

; 3914 : 
; 3915 : 	// get next opcode
; 3916 : 	movzx	ebx, byte ptr [esi + 2]

  01a58	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3917 : 	add	esi, 3

  01a5c	83 c6 03	 add	 esi, 3

; 3918 : 
; 3919 : 	// offset to opcode index
; 3920 : 	jmp	opTbl[ebx*4]

  01a5f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sat_word@@YAXXZ ENDP				; OP_sat_word
?OP_sap_byte@@YAXXZ PROC NEAR				; OP_sap_byte

; 3926 : 	_asm {
; 3927 : 	movzx	ebx, byte ptr [esi]

  01a66	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 3928 : 
; 3929 : 	shl	ebx, 1

  01a69	d1 e3		 shl	 ebx, 1

; 3930 : 	add	ebx, pm.ParmPtr

  01a6b	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3931 : 	mov	word ptr [ebx], ax

  01a71	66 89 03	 mov	 WORD PTR [ebx], ax

; 3932 : 
; 3933 : 	// get next opcode
; 3934 : 	movzx	ebx, byte ptr [esi + 1]

  01a74	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 3935 : 	add	esi, 2

  01a78	83 c6 02	 add	 esi, 2

; 3936 : 
; 3937 : 	// offset to opcode index
; 3938 : 	jmp	opTbl[ebx*4]

  01a7b	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sap_byte@@YAXXZ ENDP				; OP_sap_byte
?OP_sap_word@@YAXXZ PROC NEAR				; OP_sap_word

; 3943 : 	_asm {
; 3944 : 	movzx	ebx, word ptr [esi]

  01a82	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 3945 : 
; 3946 : 	shl	ebx, 1

  01a85	d1 e3		 shl	 ebx, 1

; 3947 : 	add	ebx, pm.ParmPtr

  01a87	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 3948 : 	mov	word ptr [ebx], ax

  01a8d	66 89 03	 mov	 WORD PTR [ebx], ax

; 3949 : 
; 3950 : 	// get next opcode
; 3951 : 	movzx	ebx, byte ptr [esi + 2]

  01a90	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 3952 : 	add	esi, 3

  01a94	83 c6 03	 add	 esi, 3

; 3953 : 
; 3954 : 	// offset to opcode index
; 3955 : 	jmp	opTbl[ebx*4]

  01a97	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sap_word@@YAXXZ ENDP				; OP_sap_word
?OP_ssg_byte@@YAXXZ PROC NEAR				; OP_ssg_byte

; 3961 : 	_asm {
; 3962 : 	movzx	edx, byte ptr [esi]

  01a9e	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 3963 : 
; 3964 : 	shl	edx, 1

  01aa1	d1 e2		 shl	 edx, 1

; 3965 : 	add	edx, pm.GlobalPtr

  01aa3	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3966 : 	mov	cx, word ptr [edi]

  01aa9	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 3967 : 	sub	edi, 2

  01aac	83 ef 02	 sub	 edi, 2

; 3968 : 	mov	word ptr [edx], cx

  01aaf	66 89 0a	 mov	 WORD PTR [edx], cx

; 3969 : 
; 3970 : 	// get next opcode
; 3971 : 	mov	bl, byte ptr [esi + 1]

  01ab2	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 3972 : 	add	esi, 2

  01ab5	83 c6 02	 add	 esi, 2

; 3973 : 
; 3974 : 	// offset to opcode index
; 3975 : 	jmp	opTbl[ebx*4]

  01ab8	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssg_byte@@YAXXZ ENDP				; OP_ssg_byte
?OP_ssg_word@@YAXXZ PROC NEAR				; OP_ssg_word

; 3980 : 	_asm {
; 3981 : 	movzx	edx, word ptr [esi]

  01abf	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 3982 : 
; 3983 : 	shl	edx, 1

  01ac2	d1 e2		 shl	 edx, 1

; 3984 : 	add	edx, pm.GlobalPtr

  01ac4	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 3985 : 	mov	cx, word ptr [edi]

  01aca	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 3986 : 	sub	edi, 2

  01acd	83 ef 02	 sub	 edi, 2

; 3987 : 	mov	word ptr [edx], cx

  01ad0	66 89 0a	 mov	 WORD PTR [edx], cx

; 3988 : 
; 3989 : 	// get next opcode
; 3990 : 	mov	bl, byte ptr [esi + 2]

  01ad3	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 3991 : 	add	esi, 3

  01ad6	83 c6 03	 add	 esi, 3

; 3992 : 
; 3993 : 	// offset to opcode index
; 3994 : 	jmp	opTbl[ebx*4]

  01ad9	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssg_word@@YAXXZ ENDP				; OP_ssg_word
?OP_ssl_byte@@YAXXZ PROC NEAR				; OP_ssl_byte

; 4000 : 	_asm {
; 4001 : 	movzx	ecx, byte ptr [esi]

  01ae0	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 4002 : 
; 4003 : 	shl	ecx, 1

  01ae3	d1 e1		 shl	 ecx, 1

; 4004 : //	memIDGetPtr	pm.Locals, MemVariables
; 4005 : 		movzx	ebx, word ptr pm.Locals

  01ae5	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4006 : 		shl		ebx, 4

  01aec	c1 e3 04	 shl	 ebx, 4

; 4007 : 		add		ebx, _descTablePtr

  01aef	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4008 : 		mov		ebx, [ebx]Descriptor.data

  01af5	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4009 : //
; 4010 : 
; 4011 : 	add	ebx, ecx

  01af8	03 d9		 add	 ebx, ecx

; 4012 : 	mov	cx, word ptr [edi]

  01afa	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4013 : 	sub	edi, 2

  01afd	83 ef 02	 sub	 edi, 2

; 4014 : 	mov	word ptr [ebx], cx

  01b00	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4015 : 
; 4016 : 	// get next opcode
; 4017 : 	movzx	ebx, byte ptr [esi + 1]

  01b03	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4018 : 	add	esi, 2

  01b07	83 c6 02	 add	 esi, 2

; 4019 : 
; 4020 : 	// offset to opcode index
; 4021 : 	jmp	opTbl[ebx*4]

  01b0a	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssl_byte@@YAXXZ ENDP				; OP_ssl_byte
?OP_ssl_word@@YAXXZ PROC NEAR				; OP_ssl_word

; 4026 : 	_asm {
; 4027 : 	movzx	ecx, word ptr [esi]

  01b11	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 4028 : 
; 4029 : 	shl	ecx, 1

  01b14	d1 e1		 shl	 ecx, 1

; 4030 : //	memIDGetPtr	pm.Locals, MemVariables
; 4031 : 		movzx	ebx, word ptr pm.Locals

  01b16	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4032 : 		shl		ebx, 4

  01b1d	c1 e3 04	 shl	 ebx, 4

; 4033 : 		add		ebx, _descTablePtr

  01b20	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4034 : 		mov		ebx, [ebx]Descriptor.data

  01b26	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4035 : //
; 4036 : 
; 4037 : 	add	ebx, ecx

  01b29	03 d9		 add	 ebx, ecx

; 4038 : 	mov	cx, word ptr [edi]

  01b2b	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4039 : 	sub	edi, 2

  01b2e	83 ef 02	 sub	 edi, 2

; 4040 : 	mov	word ptr [ebx], cx

  01b31	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4041 : 
; 4042 : 	// get next opcode
; 4043 : 	movzx	ebx, byte ptr [esi + 2]

  01b34	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4044 : 	add	esi, 3

  01b38	83 c6 03	 add	 esi, 3

; 4045 : 
; 4046 : 	// offset to opcode index
; 4047 : 	jmp	opTbl[ebx*4]

  01b3b	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssl_word@@YAXXZ ENDP				; OP_ssl_word
?OP_sst_byte@@YAXXZ PROC NEAR				; OP_sst_byte

; 4053 : 	_asm {
; 4054 : 	movzx	ebx, byte ptr [esi]

  01b42	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4055 : 
; 4056 : 	shl	ebx, 1

  01b45	d1 e3		 shl	 ebx, 1

; 4057 : 	add	ebx, pm.TempPtr

  01b47	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4058 : 	mov	cx, word ptr [edi]

  01b4d	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4059 : 	sub	edi, 2

  01b50	83 ef 02	 sub	 edi, 2

; 4060 : 	mov	word ptr [ebx], cx

  01b53	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4061 : 
; 4062 : 	// get next opcode
; 4063 : 	movzx	ebx, byte ptr [esi + 1]

  01b56	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4064 : 	add	esi, 2

  01b5a	83 c6 02	 add	 esi, 2

; 4065 : 
; 4066 : 	// offset to opcode index
; 4067 : 	jmp	opTbl[ebx*4]

  01b5d	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sst_byte@@YAXXZ ENDP				; OP_sst_byte
?OP_sst_word@@YAXXZ PROC NEAR				; OP_sst_word

; 4072 : 	_asm {
; 4073 : 	movzx	ebx, word ptr [esi]

  01b64	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4074 : 
; 4075 : 	shl	ebx, 1

  01b67	d1 e3		 shl	 ebx, 1

; 4076 : 	add	ebx, pm.TempPtr

  01b69	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4077 : 	mov	cx, word ptr [edi]

  01b6f	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4078 : 	sub	edi, 2

  01b72	83 ef 02	 sub	 edi, 2

; 4079 : 	mov	word ptr [ebx], cx

  01b75	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4080 : 
; 4081 : 	// get next opcode
; 4082 : 	movzx	ebx, byte ptr [esi + 2]

  01b78	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4083 : 	add	esi, 3

  01b7c	83 c6 03	 add	 esi, 3

; 4084 : 
; 4085 : 	// offset to opcode index
; 4086 : 	jmp	opTbl[ebx*4]

  01b7f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sst_word@@YAXXZ ENDP				; OP_sst_word
?OP_ssp_byte@@YAXXZ PROC NEAR				; OP_ssp_byte

; 4092 : 	_asm {
; 4093 : 	movzx	ebx, byte ptr [esi]

  01b86	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4094 : 
; 4095 : 	shl	ebx, 1

  01b89	d1 e3		 shl	 ebx, 1

; 4096 : 	add	ebx, pm.ParmPtr

  01b8b	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4097 : 	mov	cx, word ptr [edi]

  01b91	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4098 : 	sub	edi, 2

  01b94	83 ef 02	 sub	 edi, 2

; 4099 : 	mov	word ptr [ebx], cx

  01b97	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4100 : 
; 4101 : 	// get next opcode
; 4102 : 	movzx	ebx, byte ptr [esi + 1]

  01b9a	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4103 : 	add	esi, 2

  01b9e	83 c6 02	 add	 esi, 2

; 4104 : 
; 4105 : 	// offset to opcode index
; 4106 : 	jmp	opTbl[ebx*4]

  01ba1	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssp_byte@@YAXXZ ENDP				; OP_ssp_byte
?OP_ssp_word@@YAXXZ PROC NEAR				; OP_ssp_word

; 4111 : 	_asm {
; 4112 : 	movzx	ebx, word ptr [esi]

  01ba8	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4113 : 
; 4114 : 	shl	ebx, 1

  01bab	d1 e3		 shl	 ebx, 1

; 4115 : 	add	ebx, pm.ParmPtr

  01bad	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4116 : 	mov	cx, word ptr [edi]

  01bb3	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4117 : 	sub	edi, 2

  01bb6	83 ef 02	 sub	 edi, 2

; 4118 : 	mov	word ptr [ebx], cx

  01bb9	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4119 : 
; 4120 : 	// get next opcode
; 4121 : 	movzx	ebx, byte ptr [esi + 2]

  01bbc	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4122 : 	add	esi, 3

  01bc0	83 c6 03	 add	 esi, 3

; 4123 : 
; 4124 : 	// offset to opcode index
; 4125 : 	jmp	opTbl[ebx*4]

  01bc3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssp_word@@YAXXZ ENDP				; OP_ssp_word
?OP_sagi_byte@@YAXXZ PROC NEAR				; OP_sagi_byte

; 4131 : 	_asm {
; 4132 : 	movzx	edx, byte ptr [esi]

  01bca	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 4133 : 
; 4134 : 	add	edx, eax

  01bcd	03 d0		 add	 edx, eax

; 4135 : 	shl	edx, 1

  01bcf	d1 e2		 shl	 edx, 1

; 4136 : 	add	edx, pm.GlobalPtr

  01bd1	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4137 : 	movzx	eax, word ptr [edi]

  01bd7	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 4138 : 	sub	edi, 2

  01bda	83 ef 02	 sub	 edi, 2

; 4139 : 	mov	word ptr [edx], ax

  01bdd	66 89 02	 mov	 WORD PTR [edx], ax

; 4140 : 
; 4141 : 	// get next opcode
; 4142 : 	mov	bl, byte ptr [esi + 1]

  01be0	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 4143 : 	add	esi, 2

  01be3	83 c6 02	 add	 esi, 2

; 4144 : 
; 4145 : 	// offset to opcode index
; 4146 : 	jmp	opTbl[ebx*4]

  01be6	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sagi_byte@@YAXXZ ENDP				; OP_sagi_byte
?OP_sagi_word@@YAXXZ PROC NEAR				; OP_sagi_word

; 4151 : 	_asm {
; 4152 : 	movzx	edx, word ptr [esi]

  01bed	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 4153 : 
; 4154 : 	add	edx, eax

  01bf0	03 d0		 add	 edx, eax

; 4155 : 	shl	edx, 1

  01bf2	d1 e2		 shl	 edx, 1

; 4156 : 	add	edx, pm.GlobalPtr

  01bf4	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4157 : 	movzx	eax, word ptr [edi]

  01bfa	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 4158 : 	sub	edi, 2

  01bfd	83 ef 02	 sub	 edi, 2

; 4159 : 	mov	word ptr [edx], ax

  01c00	66 89 02	 mov	 WORD PTR [edx], ax

; 4160 : 
; 4161 : 	// get next opcode
; 4162 : 	mov	bl, byte ptr [esi + 2]

  01c03	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 4163 : 	add	esi, 3

  01c06	83 c6 03	 add	 esi, 3

; 4164 : 
; 4165 : 	// offset to opcode index
; 4166 : 	jmp	opTbl[ebx*4]

  01c09	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sagi_word@@YAXXZ ENDP				; OP_sagi_word
?OP_sali_byte@@YAXXZ PROC NEAR				; OP_sali_byte

; 4172 : 	_asm {
; 4173 : 	movzx	ecx, byte ptr [esi]

  01c10	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 4174 : 
; 4175 : 	add	ecx, eax

  01c13	03 c8		 add	 ecx, eax

; 4176 : 	shl	ecx, 1

  01c15	d1 e1		 shl	 ecx, 1

; 4177 : //	memIDGetPtr	pm.Locals, MemVariables
; 4178 : 		movzx	ebx, word ptr pm.Locals

  01c17	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4179 : 		shl		ebx, 4

  01c1e	c1 e3 04	 shl	 ebx, 4

; 4180 : 		add		ebx, _descTablePtr

  01c21	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4181 : 		mov		ebx, [ebx]Descriptor.data

  01c27	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4182 : //
; 4183 : 
; 4184 : 	add	ebx, ecx

  01c2a	03 d9		 add	 ebx, ecx

; 4185 : 	movsx	eax, word ptr [edi]

  01c2c	0f bf 07	 movsx	 eax, WORD PTR [edi]

; 4186 : 	sub	edi, 2

  01c2f	83 ef 02	 sub	 edi, 2

; 4187 : 	mov	word ptr [ebx], ax

  01c32	66 89 03	 mov	 WORD PTR [ebx], ax

; 4188 : 
; 4189 : 	// get next opcode
; 4190 : 	movzx	ebx, byte ptr [esi + 1]

  01c35	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4191 : 	add	esi, 2

  01c39	83 c6 02	 add	 esi, 2

; 4192 : 
; 4193 : 	// offset to opcode index
; 4194 : 	jmp	opTbl[ebx*4]

  01c3c	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sali_byte@@YAXXZ ENDP				; OP_sali_byte
?OP_sali_word@@YAXXZ PROC NEAR				; OP_sali_word

; 4199 : 	_asm {
; 4200 : 	movzx	ecx, word ptr [esi]

  01c43	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 4201 : 
; 4202 : 	add	ecx, eax

  01c46	03 c8		 add	 ecx, eax

; 4203 : 	shl	ecx, 1

  01c48	d1 e1		 shl	 ecx, 1

; 4204 : //	memIDGetPtr	pm.Locals, MemVariables
; 4205 : 		movzx	ebx, word ptr pm.Locals

  01c4a	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4206 : 		shl		ebx, 4

  01c51	c1 e3 04	 shl	 ebx, 4

; 4207 : 		add		ebx, _descTablePtr

  01c54	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4208 : 		mov		ebx, [ebx]Descriptor.data

  01c5a	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4209 : //
; 4210 : 
; 4211 : 	add	ebx, ecx

  01c5d	03 d9		 add	 ebx, ecx

; 4212 : 	movsx	eax, word ptr [edi]

  01c5f	0f bf 07	 movsx	 eax, WORD PTR [edi]

; 4213 : 	sub	edi, 2

  01c62	83 ef 02	 sub	 edi, 2

; 4214 : 	mov	word ptr [ebx], ax

  01c65	66 89 03	 mov	 WORD PTR [ebx], ax

; 4215 : 
; 4216 : 	// get next opcode
; 4217 : 	movzx	ebx, byte ptr [esi + 2]

  01c68	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4218 : 	add	esi, 3

  01c6c	83 c6 03	 add	 esi, 3

; 4219 : 
; 4220 : 	// offset to opcode index
; 4221 : 	jmp	opTbl[ebx*4]

  01c6f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sali_word@@YAXXZ ENDP				; OP_sali_word
?OP_sati_byte@@YAXXZ PROC NEAR				; OP_sati_byte

; 4227 : 	_asm {
; 4228 : 	movzx	ebx, byte ptr [esi]

  01c76	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4229 : 
; 4230 : 	add	ebx, eax

  01c79	03 d8		 add	 ebx, eax

; 4231 : 	shl	ebx, 1

  01c7b	d1 e3		 shl	 ebx, 1

; 4232 : 	add	ebx, pm.TempPtr

  01c7d	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4233 : 	movsx	eax, word ptr [edi]

  01c83	0f bf 07	 movsx	 eax, WORD PTR [edi]

; 4234 : 	sub	edi, 2

  01c86	83 ef 02	 sub	 edi, 2

; 4235 : 	mov	word ptr [ebx], ax

  01c89	66 89 03	 mov	 WORD PTR [ebx], ax

; 4236 : 
; 4237 : 	// get next opcode
; 4238 : 	movzx	ebx, byte ptr [esi + 1]

  01c8c	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4239 : 	add	esi, 2

  01c90	83 c6 02	 add	 esi, 2

; 4240 : 
; 4241 : 	// offset to opcode index
; 4242 : 	jmp	opTbl[ebx*4]

  01c93	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sati_byte@@YAXXZ ENDP				; OP_sati_byte
?OP_sati_word@@YAXXZ PROC NEAR				; OP_sati_word

; 4247 : 	_asm {
; 4248 : 	movzx	ebx, word ptr [esi]

  01c9a	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4249 : 
; 4250 : 	add	ebx, eax

  01c9d	03 d8		 add	 ebx, eax

; 4251 : 	shl	ebx, 1

  01c9f	d1 e3		 shl	 ebx, 1

; 4252 : 	add	ebx, pm.TempPtr

  01ca1	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4253 : 	movsx	eax, word ptr [edi]

  01ca7	0f bf 07	 movsx	 eax, WORD PTR [edi]

; 4254 : 	sub	edi, 2

  01caa	83 ef 02	 sub	 edi, 2

; 4255 : 	mov	word ptr [ebx], ax

  01cad	66 89 03	 mov	 WORD PTR [ebx], ax

; 4256 : 
; 4257 : 	// get next opcode
; 4258 : 	movzx	ebx, byte ptr [esi + 2]

  01cb0	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4259 : 	add	esi, 3

  01cb4	83 c6 03	 add	 esi, 3

; 4260 : 
; 4261 : 	// offset to opcode index
; 4262 : 	jmp	opTbl[ebx*4]

  01cb7	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sati_word@@YAXXZ ENDP				; OP_sati_word
?OP_sapi_byte@@YAXXZ PROC NEAR				; OP_sapi_byte

; 4268 : 	_asm {
; 4269 : 	movzx	ebx, byte ptr [esi]

  01cbe	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4270 : 
; 4271 : 	add	ebx, eax

  01cc1	03 d8		 add	 ebx, eax

; 4272 : 	shl	ebx, 1

  01cc3	d1 e3		 shl	 ebx, 1

; 4273 : 	add	ebx, pm.ParmPtr

  01cc5	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4274 : 	movsx	eax, word ptr [edi]

  01ccb	0f bf 07	 movsx	 eax, WORD PTR [edi]

; 4275 : 	sub	edi, 2

  01cce	83 ef 02	 sub	 edi, 2

; 4276 : 	mov	word ptr [ebx], ax

  01cd1	66 89 03	 mov	 WORD PTR [ebx], ax

; 4277 : 
; 4278 : 	// get next opcode
; 4279 : 	movzx	ebx, byte ptr [esi + 1]

  01cd4	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4280 : 	add	esi, 2

  01cd8	83 c6 02	 add	 esi, 2

; 4281 : 
; 4282 : 	// offset to opcode index
; 4283 : 	jmp	opTbl[ebx*4]

  01cdb	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sapi_byte@@YAXXZ ENDP				; OP_sapi_byte
?OP_sapi_word@@YAXXZ PROC NEAR				; OP_sapi_word

; 4288 : 	_asm {
; 4289 : 	movzx	ebx, word ptr [esi]

  01ce2	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4290 : 
; 4291 : 	add	ebx, eax

  01ce5	03 d8		 add	 ebx, eax

; 4292 : 	shl	ebx, 1

  01ce7	d1 e3		 shl	 ebx, 1

; 4293 : 	add	ebx, pm.ParmPtr

  01ce9	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4294 : 	movsx	eax, word ptr [edi]

  01cef	0f bf 07	 movsx	 eax, WORD PTR [edi]

; 4295 : 	sub	edi, 2

  01cf2	83 ef 02	 sub	 edi, 2

; 4296 : 	mov	word ptr [ebx], ax

  01cf5	66 89 03	 mov	 WORD PTR [ebx], ax

; 4297 : 
; 4298 : 	// get next opcode
; 4299 : 	movzx	ebx, byte ptr [esi + 2]

  01cf8	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4300 : 	add	esi, 3

  01cfc	83 c6 03	 add	 esi, 3

; 4301 : 
; 4302 : 	// offset to opcode index
; 4303 : 	jmp	opTbl[ebx*4]

  01cff	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sapi_word@@YAXXZ ENDP				; OP_sapi_word
?OP_ssgi_byte@@YAXXZ PROC NEAR				; OP_ssgi_byte

; 4309 : 	_asm {
; 4310 : 	movzx	edx, byte ptr [esi]

  01d06	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 4311 : 
; 4312 : 	add	edx, eax

  01d09	03 d0		 add	 edx, eax

; 4313 : 	shl	edx, 1

  01d0b	d1 e2		 shl	 edx, 1

; 4314 : 	add	edx, pm.GlobalPtr

  01d0d	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4315 : 	mov	cx, word ptr [edi]

  01d13	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4316 : 	sub	edi, 2

  01d16	83 ef 02	 sub	 edi, 2

; 4317 : 	mov	word ptr [edx], cx

  01d19	66 89 0a	 mov	 WORD PTR [edx], cx

; 4318 : 
; 4319 : 	// get next opcode
; 4320 : 	mov	bl, byte ptr [esi + 1]

  01d1c	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 4321 : 	add	esi, 2

  01d1f	83 c6 02	 add	 esi, 2

; 4322 : 
; 4323 : 	// offset to opcode index
; 4324 : 	jmp	opTbl[ebx*4]

  01d22	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssgi_byte@@YAXXZ ENDP				; OP_ssgi_byte
?OP_ssgi_word@@YAXXZ PROC NEAR				; OP_ssgi_word

; 4329 : 	_asm {
; 4330 : 	movzx	edx, word ptr [esi]

  01d29	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 4331 : 
; 4332 : 	add	edx, eax

  01d2c	03 d0		 add	 edx, eax

; 4333 : 	shl	edx, 1

  01d2e	d1 e2		 shl	 edx, 1

; 4334 : 	add	edx, pm.GlobalPtr

  01d30	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4335 : 	mov	cx, word ptr [edi]

  01d36	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4336 : 	sub	edi, 2

  01d39	83 ef 02	 sub	 edi, 2

; 4337 : 	mov	word ptr [edx], cx

  01d3c	66 89 0a	 mov	 WORD PTR [edx], cx

; 4338 : 
; 4339 : 	// get next opcode
; 4340 : 	mov	bl, byte ptr [esi + 2]

  01d3f	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 4341 : 	add	esi, 3

  01d42	83 c6 03	 add	 esi, 3

; 4342 : 
; 4343 : 	// offset to opcode index
; 4344 : 	jmp	opTbl[ebx*4]

  01d45	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssgi_word@@YAXXZ ENDP				; OP_ssgi_word
?OP_ssli_byte@@YAXXZ PROC NEAR				; OP_ssli_byte

; 4350 : 	_asm {
; 4351 : 	movzx	ecx, byte ptr [esi]

  01d4c	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 4352 : 
; 4353 : 	add	ecx, eax

  01d4f	03 c8		 add	 ecx, eax

; 4354 : 	shl	ecx, 1

  01d51	d1 e1		 shl	 ecx, 1

; 4355 : //	memIDGetPtr	pm.Locals, MemVariables
; 4356 : 		movzx	ebx, word ptr pm.Locals

  01d53	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4357 : 		shl		ebx, 4

  01d5a	c1 e3 04	 shl	 ebx, 4

; 4358 : 		add		ebx, _descTablePtr

  01d5d	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4359 : 		mov		ebx, [ebx]Descriptor.data

  01d63	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4360 : //
; 4361 : 
; 4362 : 	add	ebx, ecx

  01d66	03 d9		 add	 ebx, ecx

; 4363 : 	mov	cx, word ptr [edi]

  01d68	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4364 : 	sub	edi, 2

  01d6b	83 ef 02	 sub	 edi, 2

; 4365 : 	mov	word ptr [ebx], cx

  01d6e	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4366 : 
; 4367 : 	// get next opcode
; 4368 : 	movzx	ebx, byte ptr [esi + 1]

  01d71	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4369 : 	add	esi, 2

  01d75	83 c6 02	 add	 esi, 2

; 4370 : 
; 4371 : 	// offset to opcode index
; 4372 : 	jmp	opTbl[ebx*4]

  01d78	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssli_byte@@YAXXZ ENDP				; OP_ssli_byte
?OP_ssli_word@@YAXXZ PROC NEAR				; OP_ssli_word

; 4377 : 	_asm {
; 4378 : 	movzx	ecx, word ptr [esi]

  01d7f	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 4379 : 
; 4380 : 	add	ecx, eax

  01d82	03 c8		 add	 ecx, eax

; 4381 : 	shl	ecx, 1

  01d84	d1 e1		 shl	 ecx, 1

; 4382 : //	memIDGetPtr	pm.Locals, MemVariables
; 4383 : 		movzx	ebx, word ptr pm.Locals

  01d86	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4384 : 		shl		ebx, 4

  01d8d	c1 e3 04	 shl	 ebx, 4

; 4385 : 		add		ebx, _descTablePtr

  01d90	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4386 : 		mov		ebx, [ebx]Descriptor.data

  01d96	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4387 : //
; 4388 : 
; 4389 : 	add	ebx, ecx

  01d99	03 d9		 add	 ebx, ecx

; 4390 : 	mov	cx, word ptr [edi]

  01d9b	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4391 : 	sub	edi, 2

  01d9e	83 ef 02	 sub	 edi, 2

; 4392 : 	mov	word ptr [ebx], cx

  01da1	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4393 : 
; 4394 : 	// get next opcode
; 4395 : 	movzx	ebx, byte ptr [esi + 2]

  01da4	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4396 : 	add	esi, 3

  01da8	83 c6 03	 add	 esi, 3

; 4397 : 
; 4398 : 	// offset to opcode index
; 4399 : 	jmp	opTbl[ebx*4]

  01dab	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssli_word@@YAXXZ ENDP				; OP_ssli_word
?OP_ssti_byte@@YAXXZ PROC NEAR				; OP_ssti_byte

; 4405 : 	_asm {
; 4406 : 	movzx	ebx, byte ptr [esi]

  01db2	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4407 : 
; 4408 : 	add	ebx, eax

  01db5	03 d8		 add	 ebx, eax

; 4409 : 	shl	ebx, 1

  01db7	d1 e3		 shl	 ebx, 1

; 4410 : 	add	ebx, pm.TempPtr

  01db9	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4411 : 	mov	cx, word ptr [edi]

  01dbf	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4412 : 	sub	edi, 2

  01dc2	83 ef 02	 sub	 edi, 2

; 4413 : 	mov	word ptr [ebx], cx

  01dc5	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4414 : 
; 4415 : 	// get next opcode
; 4416 : 	movzx	ebx, byte ptr [esi + 1]

  01dc8	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4417 : 	add	esi, 2

  01dcc	83 c6 02	 add	 esi, 2

; 4418 : 
; 4419 : 	// offset to opcode index
; 4420 : 	jmp	opTbl[ebx*4]

  01dcf	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssti_byte@@YAXXZ ENDP				; OP_ssti_byte
?OP_ssti_word@@YAXXZ PROC NEAR				; OP_ssti_word

; 4425 : 	_asm {
; 4426 : 	movzx	ebx, word ptr [esi]

  01dd6	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4427 : 
; 4428 : 	add	ebx, eax

  01dd9	03 d8		 add	 ebx, eax

; 4429 : 	shl	ebx, 1

  01ddb	d1 e3		 shl	 ebx, 1

; 4430 : 	add	ebx, pm.TempPtr

  01ddd	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4431 : 	mov	cx, word ptr [edi]

  01de3	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4432 : 	sub	edi, 2

  01de6	83 ef 02	 sub	 edi, 2

; 4433 : 	mov	word ptr [ebx], cx

  01de9	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4434 : 
; 4435 : 	// get next opcode
; 4436 : 	movzx	ebx, byte ptr [esi + 2]

  01dec	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4437 : 	add	esi, 3

  01df0	83 c6 03	 add	 esi, 3

; 4438 : 
; 4439 : 	// offset to opcode index
; 4440 : 	jmp	opTbl[ebx*4]

  01df3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ssti_word@@YAXXZ ENDP				; OP_ssti_word
?OP_sspi_byte@@YAXXZ PROC NEAR				; OP_sspi_byte

; 4446 : 	_asm {
; 4447 : 	movzx	ebx, byte ptr [esi]

  01dfa	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4448 : 
; 4449 : 	add	ebx, eax

  01dfd	03 d8		 add	 ebx, eax

; 4450 : 	shl	ebx, 1

  01dff	d1 e3		 shl	 ebx, 1

; 4451 : 	add	ebx, pm.ParmPtr

  01e01	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4452 : 	mov	cx, word ptr [edi]

  01e07	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4453 : 	sub	edi, 2

  01e0a	83 ef 02	 sub	 edi, 2

; 4454 : 	mov	word ptr [ebx], cx

  01e0d	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4455 : 
; 4456 : 	// get next opcode
; 4457 : 	movzx	ebx, byte ptr [esi + 1]

  01e10	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4458 : 	add	esi, 2

  01e14	83 c6 02	 add	 esi, 2

; 4459 : 
; 4460 : 	// offset to opcode index
; 4461 : 	jmp	opTbl[ebx*4]

  01e17	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sspi_byte@@YAXXZ ENDP				; OP_sspi_byte
?OP_sspi_word@@YAXXZ PROC NEAR				; OP_sspi_word

; 4466 : 	_asm {
; 4467 : 	movzx	ebx, word ptr [esi]

  01e1e	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4468 : 
; 4469 : 	add	ebx, eax

  01e21	03 d8		 add	 ebx, eax

; 4470 : 	shl	ebx, 1

  01e23	d1 e3		 shl	 ebx, 1

; 4471 : 	add	ebx, pm.ParmPtr

  01e25	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4472 : 	mov	cx, word ptr [edi]

  01e2b	66 8b 0f	 mov	 cx, WORD PTR [edi]

; 4473 : 	sub	edi, 2

  01e2e	83 ef 02	 sub	 edi, 2

; 4474 : 	mov	word ptr [ebx], cx

  01e31	66 89 0b	 mov	 WORD PTR [ebx], cx

; 4475 : 
; 4476 : 	// get next opcode
; 4477 : 	movzx	ebx, byte ptr [esi + 2]

  01e34	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4478 : 	add	esi, 3

  01e38	83 c6 03	 add	 esi, 3

; 4479 : 
; 4480 : 	// offset to opcode index
; 4481 : 	jmp	opTbl[ebx*4]

  01e3b	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_sspi_word@@YAXXZ ENDP				; OP_sspi_word
?OP_iag_byte@@YAXXZ PROC NEAR				; OP_iag_byte

; 4487 : 	_asm {
; 4488 : 	movzx	edx, byte ptr [esi]

  01e42	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 4489 : 
; 4490 : 	shl	edx, 1

  01e45	d1 e2		 shl	 edx, 1

; 4491 : 	add	edx, pm.GlobalPtr

  01e47	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4492 : 	inc	word ptr [edx]

  01e4d	66 ff 02	 inc	 WORD PTR [edx]

; 4493 : 	movsx	eax, word ptr [edx]

  01e50	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 4494 : 
; 4495 : 	// get next opcode
; 4496 : 	mov	bl, byte ptr [esi + 1]

  01e53	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 4497 : 	add	esi, 2

  01e56	83 c6 02	 add	 esi, 2

; 4498 : 
; 4499 : 	// offset to opcode index
; 4500 : 	jmp	opTbl[ebx*4]

  01e59	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iag_byte@@YAXXZ ENDP				; OP_iag_byte
?OP_iag_word@@YAXXZ PROC NEAR				; OP_iag_word

; 4505 : 	_asm {
; 4506 : 	movzx	edx, word ptr [esi]

  01e60	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 4507 : 
; 4508 : 	shl	edx, 1

  01e63	d1 e2		 shl	 edx, 1

; 4509 : 	add	edx, pm.GlobalPtr

  01e65	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4510 : 	inc	word ptr [edx]

  01e6b	66 ff 02	 inc	 WORD PTR [edx]

; 4511 : 	movsx	eax, word ptr [edx]

  01e6e	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 4512 : 
; 4513 : 	// get next opcode
; 4514 : 	mov	bl, byte ptr [esi + 2]

  01e71	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 4515 : 	add	esi, 3

  01e74	83 c6 03	 add	 esi, 3

; 4516 : 
; 4517 : 	// offset to opcode index
; 4518 : 	jmp	opTbl[ebx*4]

  01e77	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iag_word@@YAXXZ ENDP				; OP_iag_word
?OP_ial_byte@@YAXXZ PROC NEAR				; OP_ial_byte

; 4524 : 	_asm {
; 4525 : 	movzx	ecx, byte ptr [esi]

  01e7e	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 4526 : 
; 4527 : 	shl	ecx, 1

  01e81	d1 e1		 shl	 ecx, 1

; 4528 : //	memIDGetPtr	pm.Locals, MemVariables
; 4529 : 		movzx	ebx, word ptr pm.Locals

  01e83	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4530 : 		shl		ebx, 4

  01e8a	c1 e3 04	 shl	 ebx, 4

; 4531 : 		add		ebx, _descTablePtr

  01e8d	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4532 : 		mov		ebx, [ebx]Descriptor.data

  01e93	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4533 : //
; 4534 : 
; 4535 : 	add	ebx, ecx

  01e96	03 d9		 add	 ebx, ecx

; 4536 : 	inc	word ptr [ebx]

  01e98	66 ff 03	 inc	 WORD PTR [ebx]

; 4537 : 	movsx	eax, word ptr [ebx]

  01e9b	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4538 : 
; 4539 : 	// get next opcode
; 4540 : 	movzx	ebx, byte ptr [esi + 1]

  01e9e	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4541 : 	add	esi, 2

  01ea2	83 c6 02	 add	 esi, 2

; 4542 : 
; 4543 : 	// offset to opcode index
; 4544 : 	jmp	opTbl[ebx*4]

  01ea5	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ial_byte@@YAXXZ ENDP				; OP_ial_byte
?OP_ial_word@@YAXXZ PROC NEAR				; OP_ial_word

; 4549 : 	_asm {
; 4550 : 	movzx	ecx, word ptr [esi]

  01eac	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 4551 : 
; 4552 : 	shl	ecx, 1

  01eaf	d1 e1		 shl	 ecx, 1

; 4553 : //	memIDGetPtr	pm.Locals, MemVariables
; 4554 : 		movzx	ebx, word ptr pm.Locals

  01eb1	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4555 : 		shl		ebx, 4

  01eb8	c1 e3 04	 shl	 ebx, 4

; 4556 : 		add		ebx, _descTablePtr

  01ebb	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4557 : 		mov		ebx, [ebx]Descriptor.data

  01ec1	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4558 : //
; 4559 : 
; 4560 : 	add	ebx, ecx

  01ec4	03 d9		 add	 ebx, ecx

; 4561 : 	inc	word ptr [ebx]

  01ec6	66 ff 03	 inc	 WORD PTR [ebx]

; 4562 : 	movsx	eax, word ptr [ebx]

  01ec9	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4563 : 
; 4564 : 	// get next opcode
; 4565 : 	movzx	ebx, byte ptr [esi + 2]

  01ecc	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4566 : 	add	esi, 3

  01ed0	83 c6 03	 add	 esi, 3

; 4567 : 
; 4568 : 	// offset to opcode index
; 4569 : 	jmp	opTbl[ebx*4]

  01ed3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ial_word@@YAXXZ ENDP				; OP_ial_word
?OP_iat_byte@@YAXXZ PROC NEAR				; OP_iat_byte

; 4575 : 	_asm {
; 4576 : 	movzx	ebx, byte ptr [esi]

  01eda	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4577 : 
; 4578 : 	shl	ebx, 1

  01edd	d1 e3		 shl	 ebx, 1

; 4579 : 	add	ebx, pm.TempPtr

  01edf	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4580 : 	inc	word ptr [ebx]

  01ee5	66 ff 03	 inc	 WORD PTR [ebx]

; 4581 : 	movsx	eax, word ptr [ebx]

  01ee8	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4582 : 
; 4583 : 	// get next opcode
; 4584 : 	movzx	ebx, byte ptr [esi + 1]

  01eeb	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4585 : 	add	esi, 2

  01eef	83 c6 02	 add	 esi, 2

; 4586 : 
; 4587 : 	// offset to opcode index
; 4588 : 	jmp	opTbl[ebx*4]

  01ef2	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iat_byte@@YAXXZ ENDP				; OP_iat_byte
?OP_iat_word@@YAXXZ PROC NEAR				; OP_iat_word

; 4593 : 	_asm {
; 4594 : 	movzx	ebx, word ptr [esi]

  01ef9	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4595 : 
; 4596 : 	shl	ebx, 1

  01efc	d1 e3		 shl	 ebx, 1

; 4597 : 	add	ebx, pm.TempPtr

  01efe	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4598 : 	inc	word ptr [ebx]

  01f04	66 ff 03	 inc	 WORD PTR [ebx]

; 4599 : 	movsx	eax, word ptr [ebx]

  01f07	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4600 : 
; 4601 : 	// get next opcode
; 4602 : 	movzx	ebx, byte ptr [esi + 2]

  01f0a	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4603 : 	add	esi, 3

  01f0e	83 c6 03	 add	 esi, 3

; 4604 : 
; 4605 : 	// offset to opcode index
; 4606 : 	jmp	opTbl[ebx*4]

  01f11	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iat_word@@YAXXZ ENDP				; OP_iat_word
?OP_iap_byte@@YAXXZ PROC NEAR				; OP_iap_byte

; 4612 : 	_asm {
; 4613 : 	movzx	ebx, byte ptr [esi]

  01f18	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4614 : 
; 4615 : 	shl	ebx, 1

  01f1b	d1 e3		 shl	 ebx, 1

; 4616 : 	add	ebx, pm.ParmPtr

  01f1d	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4617 : 	inc	word ptr [ebx]

  01f23	66 ff 03	 inc	 WORD PTR [ebx]

; 4618 : 	movsx	eax, word ptr [ebx]

  01f26	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4619 : 
; 4620 : 	// get next opcode
; 4621 : 	movzx	ebx, byte ptr [esi + 1]

  01f29	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4622 : 	add	esi, 2

  01f2d	83 c6 02	 add	 esi, 2

; 4623 : 
; 4624 : 	// offset to opcode index
; 4625 : 	jmp	opTbl[ebx*4]

  01f30	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iap_byte@@YAXXZ ENDP				; OP_iap_byte
?OP_iap_word@@YAXXZ PROC NEAR				; OP_iap_word

; 4630 : 	_asm {
; 4631 : 	movzx	ebx, word ptr [esi]

  01f37	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4632 : 
; 4633 : 	shl	ebx, 1

  01f3a	d1 e3		 shl	 ebx, 1

; 4634 : 	add	ebx, pm.ParmPtr

  01f3c	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4635 : 	inc	word ptr [ebx]

  01f42	66 ff 03	 inc	 WORD PTR [ebx]

; 4636 : 	movsx	eax, word ptr [ebx]

  01f45	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4637 : 
; 4638 : 	// get next opcode
; 4639 : 	movzx	ebx, byte ptr [esi + 2]

  01f48	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4640 : 	add	esi, 3

  01f4c	83 c6 03	 add	 esi, 3

; 4641 : 
; 4642 : 	// offset to opcode index
; 4643 : 	jmp	opTbl[ebx*4]

  01f4f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iap_word@@YAXXZ ENDP				; OP_iap_word
?OP_isg_byte@@YAXXZ PROC NEAR				; OP_isg_byte

; 4649 : 	_asm {
; 4650 : 	movzx	edx, byte ptr [esi]

  01f56	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 4651 : 
; 4652 : 	shl	edx, 1

  01f59	d1 e2		 shl	 edx, 1

; 4653 : 	add	edx, pm.GlobalPtr

  01f5b	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4654 : 	inc	word ptr [edx]

  01f61	66 ff 02	 inc	 WORD PTR [edx]

; 4655 : 	mov	cx, word ptr [edx]

  01f64	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 4656 : 	add	edi, 2

  01f67	83 c7 02	 add	 edi, 2

; 4657 : 	mov	word ptr [edi], cx

  01f6a	66 89 0f	 mov	 WORD PTR [edi], cx

; 4658 : 
; 4659 : 	// get next opcode
; 4660 : 	mov	bl, byte ptr [esi + 1]

  01f6d	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 4661 : 	add	esi, 2

  01f70	83 c6 02	 add	 esi, 2

; 4662 : 
; 4663 : 	// offset to opcode index
; 4664 : 	jmp	opTbl[ebx*4]

  01f73	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isg_byte@@YAXXZ ENDP				; OP_isg_byte
?OP_isg_word@@YAXXZ PROC NEAR				; OP_isg_word

; 4669 : 	_asm {
; 4670 : 	movzx	edx, word ptr [esi]

  01f7a	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 4671 : 
; 4672 : 	shl	edx, 1

  01f7d	d1 e2		 shl	 edx, 1

; 4673 : 	add	edx, pm.GlobalPtr

  01f7f	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4674 : 	inc	word ptr [edx]

  01f85	66 ff 02	 inc	 WORD PTR [edx]

; 4675 : 	mov	cx, word ptr [edx]

  01f88	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 4676 : 	add	edi, 2

  01f8b	83 c7 02	 add	 edi, 2

; 4677 : 	mov	word ptr [edi], cx

  01f8e	66 89 0f	 mov	 WORD PTR [edi], cx

; 4678 : 
; 4679 : 	// get next opcode
; 4680 : 	mov	bl, byte ptr [esi + 2]

  01f91	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 4681 : 	add	esi, 3

  01f94	83 c6 03	 add	 esi, 3

; 4682 : 
; 4683 : 	// offset to opcode index
; 4684 : 	jmp	opTbl[ebx*4]

  01f97	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isg_word@@YAXXZ ENDP				; OP_isg_word
?OP_isl_byte@@YAXXZ PROC NEAR				; OP_isl_byte

; 4690 : 	_asm {
; 4691 : 	movzx	ecx, byte ptr [esi]

  01f9e	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 4692 : 
; 4693 : 	shl	ecx, 1

  01fa1	d1 e1		 shl	 ecx, 1

; 4694 : //	memIDGetPtr	pm.Locals, MemVariables
; 4695 : 		movzx	ebx, word ptr pm.Locals

  01fa3	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4696 : 		shl		ebx, 4

  01faa	c1 e3 04	 shl	 ebx, 4

; 4697 : 		add		ebx, _descTablePtr

  01fad	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4698 : 		mov		ebx, [ebx]Descriptor.data

  01fb3	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4699 : //
; 4700 : 
; 4701 : 	add	ebx, ecx

  01fb6	03 d9		 add	 ebx, ecx

; 4702 : 	inc	word ptr [ebx]

  01fb8	66 ff 03	 inc	 WORD PTR [ebx]

; 4703 : 	mov	cx, word ptr [ebx]

  01fbb	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 4704 : 	add	edi, 2

  01fbe	83 c7 02	 add	 edi, 2

; 4705 : 	mov	word ptr [edi], cx

  01fc1	66 89 0f	 mov	 WORD PTR [edi], cx

; 4706 : 
; 4707 : 	// get next opcode
; 4708 : 	movzx	ebx, byte ptr [esi + 1]

  01fc4	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4709 : 	add	esi, 2

  01fc8	83 c6 02	 add	 esi, 2

; 4710 : 
; 4711 : 	// offset to opcode index
; 4712 : 	jmp	opTbl[ebx*4]

  01fcb	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isl_byte@@YAXXZ ENDP				; OP_isl_byte
?OP_isl_word@@YAXXZ PROC NEAR				; OP_isl_word

; 4717 : 	_asm {
; 4718 : 	movzx	ecx, word ptr [esi]

  01fd2	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 4719 : 
; 4720 : 	shl	ecx, 1

  01fd5	d1 e1		 shl	 ecx, 1

; 4721 : //	memIDGetPtr	pm.Locals, MemVariables
; 4722 : 		movzx	ebx, word ptr pm.Locals

  01fd7	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4723 : 		shl		ebx, 4

  01fde	c1 e3 04	 shl	 ebx, 4

; 4724 : 		add		ebx, _descTablePtr

  01fe1	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4725 : 		mov		ebx, [ebx]Descriptor.data

  01fe7	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4726 : //
; 4727 : 
; 4728 : 	add	ebx, ecx

  01fea	03 d9		 add	 ebx, ecx

; 4729 : 	inc	word ptr [ebx]

  01fec	66 ff 03	 inc	 WORD PTR [ebx]

; 4730 : 	mov	cx, word ptr [ebx]

  01fef	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 4731 : 	add	edi, 2

  01ff2	83 c7 02	 add	 edi, 2

; 4732 : 	mov	word ptr [edi], cx

  01ff5	66 89 0f	 mov	 WORD PTR [edi], cx

; 4733 : 
; 4734 : 	// get next opcode
; 4735 : 	movzx	ebx, byte ptr [esi + 2]

  01ff8	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4736 : 	add	esi, 3

  01ffc	83 c6 03	 add	 esi, 3

; 4737 : 
; 4738 : 	// offset to opcode index
; 4739 : 	jmp	opTbl[ebx*4]

  01fff	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isl_word@@YAXXZ ENDP				; OP_isl_word
?OP_ist_byte@@YAXXZ PROC NEAR				; OP_ist_byte

; 4745 : 	_asm {
; 4746 : 	movzx	ebx, byte ptr [esi]

  02006	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4747 : 
; 4748 : 	shl	ebx, 1

  02009	d1 e3		 shl	 ebx, 1

; 4749 : 	add	ebx, pm.TempPtr

  0200b	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4750 : 	inc	word ptr [ebx]

  02011	66 ff 03	 inc	 WORD PTR [ebx]

; 4751 : 	mov	cx, word ptr [ebx]

  02014	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 4752 : 	add	edi, 2

  02017	83 c7 02	 add	 edi, 2

; 4753 : 	mov	word ptr [edi], cx

  0201a	66 89 0f	 mov	 WORD PTR [edi], cx

; 4754 : 
; 4755 : 	// get next opcode
; 4756 : 	movzx	ebx, byte ptr [esi + 1]

  0201d	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4757 : 	add	esi, 2

  02021	83 c6 02	 add	 esi, 2

; 4758 : 
; 4759 : 	// offset to opcode index
; 4760 : 	jmp	opTbl[ebx*4]

  02024	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ist_byte@@YAXXZ ENDP				; OP_ist_byte
?OP_ist_word@@YAXXZ PROC NEAR				; OP_ist_word

; 4765 : 	_asm {
; 4766 : 	movzx	ebx, word ptr [esi]

  0202b	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4767 : 
; 4768 : 	shl	ebx, 1

  0202e	d1 e3		 shl	 ebx, 1

; 4769 : 	add	ebx, pm.TempPtr

  02030	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4770 : 	inc	word ptr [ebx]

  02036	66 ff 03	 inc	 WORD PTR [ebx]

; 4771 : 	mov	cx, word ptr [ebx]

  02039	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 4772 : 	add	edi, 2

  0203c	83 c7 02	 add	 edi, 2

; 4773 : 	mov	word ptr [edi], cx

  0203f	66 89 0f	 mov	 WORD PTR [edi], cx

; 4774 : 
; 4775 : 	// get next opcode
; 4776 : 	movzx	ebx, byte ptr [esi + 2]

  02042	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4777 : 	add	esi, 3

  02046	83 c6 03	 add	 esi, 3

; 4778 : 
; 4779 : 	// offset to opcode index
; 4780 : 	jmp	opTbl[ebx*4]

  02049	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ist_word@@YAXXZ ENDP				; OP_ist_word
?OP_isp_byte@@YAXXZ PROC NEAR				; OP_isp_byte

; 4786 : 	_asm {
; 4787 : 	movzx	ebx, byte ptr [esi]

  02050	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4788 : 
; 4789 : 	shl	ebx, 1

  02053	d1 e3		 shl	 ebx, 1

; 4790 : 	add	ebx, pm.ParmPtr

  02055	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4791 : 	inc	word ptr [ebx]

  0205b	66 ff 03	 inc	 WORD PTR [ebx]

; 4792 : 	mov	cx, word ptr [ebx]

  0205e	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 4793 : 	add	edi, 2

  02061	83 c7 02	 add	 edi, 2

; 4794 : 	mov	word ptr [edi], cx

  02064	66 89 0f	 mov	 WORD PTR [edi], cx

; 4795 : 
; 4796 : 	// get next opcode
; 4797 : 	movzx	ebx, byte ptr [esi + 1]

  02067	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4798 : 	add	esi, 2

  0206b	83 c6 02	 add	 esi, 2

; 4799 : 
; 4800 : 	// offset to opcode index
; 4801 : 	jmp	opTbl[ebx*4]

  0206e	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isp_byte@@YAXXZ ENDP				; OP_isp_byte
?OP_isp_word@@YAXXZ PROC NEAR				; OP_isp_word

; 4806 : 	_asm {
; 4807 : 	movzx	ebx, word ptr [esi]

  02075	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4808 : 
; 4809 : 	shl	ebx, 1

  02078	d1 e3		 shl	 ebx, 1

; 4810 : 	add	ebx, pm.ParmPtr

  0207a	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4811 : 	inc	word ptr [ebx]

  02080	66 ff 03	 inc	 WORD PTR [ebx]

; 4812 : 	mov	cx, word ptr [ebx]

  02083	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 4813 : 	add	edi, 2

  02086	83 c7 02	 add	 edi, 2

; 4814 : 	mov	word ptr [edi], cx

  02089	66 89 0f	 mov	 WORD PTR [edi], cx

; 4815 : 
; 4816 : 	// get next opcode
; 4817 : 	movzx	ebx, byte ptr [esi + 2]

  0208c	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4818 : 	add	esi, 3

  02090	83 c6 03	 add	 esi, 3

; 4819 : 
; 4820 : 	// offset to opcode index
; 4821 : 	jmp	opTbl[ebx*4]

  02093	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isp_word@@YAXXZ ENDP				; OP_isp_word
?OP_iagi_byte@@YAXXZ PROC NEAR				; OP_iagi_byte

; 4827 : 	_asm {
; 4828 : 	movzx	edx, byte ptr [esi]

  0209a	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 4829 : 
; 4830 : 	add	edx, eax

  0209d	03 d0		 add	 edx, eax

; 4831 : 	shl	edx, 1

  0209f	d1 e2		 shl	 edx, 1

; 4832 : 	add	edx, pm.GlobalPtr

  020a1	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4833 : 	inc	word ptr [edx]

  020a7	66 ff 02	 inc	 WORD PTR [edx]

; 4834 : 	movsx	eax, word ptr [edx]

  020aa	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 4835 : 
; 4836 : 	// get next opcode
; 4837 : 	mov	bl, byte ptr [esi + 1]

  020ad	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 4838 : 	add	esi, 2

  020b0	83 c6 02	 add	 esi, 2

; 4839 : 
; 4840 : 	// offset to opcode index
; 4841 : 	jmp	opTbl[ebx*4]

  020b3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iagi_byte@@YAXXZ ENDP				; OP_iagi_byte
?OP_iagi_word@@YAXXZ PROC NEAR				; OP_iagi_word

; 4846 : 	_asm {
; 4847 : 	movzx	edx, word ptr [esi]

  020ba	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 4848 : 
; 4849 : 	add	edx, eax

  020bd	03 d0		 add	 edx, eax

; 4850 : 	shl	edx, 1

  020bf	d1 e2		 shl	 edx, 1

; 4851 : 	add	edx, pm.GlobalPtr

  020c1	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 4852 : 	inc	word ptr [edx]

  020c7	66 ff 02	 inc	 WORD PTR [edx]

; 4853 : 	movsx	eax, word ptr [edx]

  020ca	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 4854 : 
; 4855 : 	// get next opcode
; 4856 : 	mov	bl, byte ptr [esi + 2]

  020cd	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 4857 : 	add	esi, 3

  020d0	83 c6 03	 add	 esi, 3

; 4858 : 
; 4859 : 	// offset to opcode index
; 4860 : 	jmp	opTbl[ebx*4]

  020d3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iagi_word@@YAXXZ ENDP				; OP_iagi_word
?OP_iali_byte@@YAXXZ PROC NEAR				; OP_iali_byte

; 4866 : 	_asm {
; 4867 : 	movzx	ecx, byte ptr [esi]

  020da	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 4868 : 
; 4869 : 	add	ecx, eax

  020dd	03 c8		 add	 ecx, eax

; 4870 : 	shl	ecx, 1

  020df	d1 e1		 shl	 ecx, 1

; 4871 : //	memIDGetPtr	pm.Locals, MemVariables
; 4872 : 		movzx	ebx, word ptr pm.Locals

  020e1	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4873 : 		shl		ebx, 4

  020e8	c1 e3 04	 shl	 ebx, 4

; 4874 : 		add		ebx, _descTablePtr

  020eb	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4875 : 		mov		ebx, [ebx]Descriptor.data

  020f1	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4876 : //
; 4877 : 
; 4878 : 	add	ebx, ecx

  020f4	03 d9		 add	 ebx, ecx

; 4879 : 	inc	word ptr [ebx]

  020f6	66 ff 03	 inc	 WORD PTR [ebx]

; 4880 : 	movsx	eax, word ptr [ebx]

  020f9	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4881 : 
; 4882 : 	// get next opcode
; 4883 : 	movzx	ebx, byte ptr [esi + 1]

  020fc	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4884 : 	add	esi, 2

  02100	83 c6 02	 add	 esi, 2

; 4885 : 
; 4886 : 	// offset to opcode index
; 4887 : 	jmp	opTbl[ebx*4]

  02103	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iali_byte@@YAXXZ ENDP				; OP_iali_byte
?OP_iali_word@@YAXXZ PROC NEAR				; OP_iali_word

; 4892 : 	_asm {
; 4893 : 	movzx	ecx, word ptr [esi]

  0210a	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 4894 : 
; 4895 : 	add	ecx, eax

  0210d	03 c8		 add	 ecx, eax

; 4896 : 	shl	ecx, 1

  0210f	d1 e1		 shl	 ecx, 1

; 4897 : //	memIDGetPtr	pm.Locals, MemVariables
; 4898 : 		movzx	ebx, word ptr pm.Locals

  02111	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 4899 : 		shl		ebx, 4

  02118	c1 e3 04	 shl	 ebx, 4

; 4900 : 		add		ebx, _descTablePtr

  0211b	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 4901 : 		mov		ebx, [ebx]Descriptor.data

  02121	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 4902 : //
; 4903 : 
; 4904 : 	add	ebx, ecx

  02124	03 d9		 add	 ebx, ecx

; 4905 : 	inc	word ptr [ebx]

  02126	66 ff 03	 inc	 WORD PTR [ebx]

; 4906 : 	movsx	eax, word ptr [ebx]

  02129	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4907 : 
; 4908 : 	// get next opcode
; 4909 : 	movzx	ebx, byte ptr [esi + 2]

  0212c	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4910 : 	add	esi, 3

  02130	83 c6 03	 add	 esi, 3

; 4911 : 
; 4912 : 	// offset to opcode index
; 4913 : 	jmp	opTbl[ebx*4]

  02133	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iali_word@@YAXXZ ENDP				; OP_iali_word
?OP_iati_byte@@YAXXZ PROC NEAR				; OP_iati_byte

; 4919 : 	_asm {
; 4920 : 	movzx	ebx, byte ptr [esi]

  0213a	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4921 : 
; 4922 : 	add	ebx, eax

  0213d	03 d8		 add	 ebx, eax

; 4923 : 	shl	ebx, 1

  0213f	d1 e3		 shl	 ebx, 1

; 4924 : 	add	ebx, pm.TempPtr

  02141	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4925 : 	inc	word ptr [ebx]

  02147	66 ff 03	 inc	 WORD PTR [ebx]

; 4926 : 	movsx	eax, word ptr [ebx]

  0214a	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4927 : 
; 4928 : 	// get next opcode
; 4929 : 	movzx	ebx, byte ptr [esi + 1]

  0214d	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4930 : 	add	esi, 2

  02151	83 c6 02	 add	 esi, 2

; 4931 : 
; 4932 : 	// offset to opcode index
; 4933 : 	jmp	opTbl[ebx*4]

  02154	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iati_byte@@YAXXZ ENDP				; OP_iati_byte
?OP_iati_word@@YAXXZ PROC NEAR				; OP_iati_word

; 4938 : 	_asm {
; 4939 : 	movzx	ebx, word ptr [esi]

  0215b	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4940 : 
; 4941 : 	add	ebx, eax

  0215e	03 d8		 add	 ebx, eax

; 4942 : 	shl	ebx, 1

  02160	d1 e3		 shl	 ebx, 1

; 4943 : 	add	ebx, pm.TempPtr

  02162	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 4944 : 	inc	word ptr [ebx]

  02168	66 ff 03	 inc	 WORD PTR [ebx]

; 4945 : 	movsx	eax, word ptr [ebx]

  0216b	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4946 : 
; 4947 : 	// get next opcode
; 4948 : 	movzx	ebx, byte ptr [esi + 2]

  0216e	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4949 : 	add	esi, 3

  02172	83 c6 03	 add	 esi, 3

; 4950 : 
; 4951 : 	// offset to opcode index
; 4952 : 	jmp	opTbl[ebx*4]

  02175	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iati_word@@YAXXZ ENDP				; OP_iati_word
?OP_iapi_byte@@YAXXZ PROC NEAR				; OP_iapi_byte

; 4958 : 	_asm {
; 4959 : 	movzx	ebx, byte ptr [esi]

  0217c	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 4960 : 
; 4961 : 	add	ebx, eax

  0217f	03 d8		 add	 ebx, eax

; 4962 : 	shl	ebx, 1

  02181	d1 e3		 shl	 ebx, 1

; 4963 : 	add	ebx, pm.ParmPtr

  02183	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4964 : 	inc	word ptr [ebx]

  02189	66 ff 03	 inc	 WORD PTR [ebx]

; 4965 : 	movsx	eax, word ptr [ebx]

  0218c	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4966 : 
; 4967 : 	// get next opcode
; 4968 : 	movzx	ebx, byte ptr [esi + 1]

  0218f	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 4969 : 	add	esi, 2

  02193	83 c6 02	 add	 esi, 2

; 4970 : 
; 4971 : 	// offset to opcode index
; 4972 : 	jmp	opTbl[ebx*4]

  02196	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iapi_byte@@YAXXZ ENDP				; OP_iapi_byte
?OP_iapi_word@@YAXXZ PROC NEAR				; OP_iapi_word

; 4977 : 	_asm {
; 4978 : 	movzx	ebx, word ptr [esi]

  0219d	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 4979 : 
; 4980 : 	add	ebx, eax

  021a0	03 d8		 add	 ebx, eax

; 4981 : 	shl	ebx, 1

  021a2	d1 e3		 shl	 ebx, 1

; 4982 : 	add	ebx, pm.ParmPtr

  021a4	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 4983 : 	inc	word ptr [ebx]

  021aa	66 ff 03	 inc	 WORD PTR [ebx]

; 4984 : 	movsx	eax, word ptr [ebx]

  021ad	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 4985 : 
; 4986 : 	// get next opcode
; 4987 : 	movzx	ebx, byte ptr [esi + 2]

  021b0	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 4988 : 	add	esi, 3

  021b4	83 c6 03	 add	 esi, 3

; 4989 : 
; 4990 : 	// offset to opcode index
; 4991 : 	jmp	opTbl[ebx*4]

  021b7	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_iapi_word@@YAXXZ ENDP				; OP_iapi_word
?OP_isgi_byte@@YAXXZ PROC NEAR				; OP_isgi_byte

; 4997 : 	_asm {
; 4998 : 	movzx	edx, byte ptr [esi]

  021be	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 4999 : 
; 5000 : 	add	edx, eax

  021c1	03 d0		 add	 edx, eax

; 5001 : 	shl	edx, 1

  021c3	d1 e2		 shl	 edx, 1

; 5002 : 	add	edx, pm.GlobalPtr

  021c5	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5003 : 	inc	word ptr [edx]

  021cb	66 ff 02	 inc	 WORD PTR [edx]

; 5004 : 	mov	cx, word ptr [edx]

  021ce	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 5005 : 	add	edi, 2

  021d1	83 c7 02	 add	 edi, 2

; 5006 : 	mov	word ptr [edi], cx

  021d4	66 89 0f	 mov	 WORD PTR [edi], cx

; 5007 : 
; 5008 : 	// get next opcode
; 5009 : 	mov	bl, byte ptr [esi + 1]

  021d7	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 5010 : 	add	esi, 2

  021da	83 c6 02	 add	 esi, 2

; 5011 : 
; 5012 : 	// offset to opcode index
; 5013 : 	jmp	opTbl[ebx*4]

  021dd	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isgi_byte@@YAXXZ ENDP				; OP_isgi_byte
?OP_isgi_word@@YAXXZ PROC NEAR				; OP_isgi_word

; 5018 : 	_asm {
; 5019 : 	movzx	edx, word ptr [esi]

  021e4	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 5020 : 
; 5021 : 	add	edx, eax

  021e7	03 d0		 add	 edx, eax

; 5022 : 	shl	edx, 1

  021e9	d1 e2		 shl	 edx, 1

; 5023 : 	add	edx, pm.GlobalPtr

  021eb	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5024 : 	inc	word ptr [edx]

  021f1	66 ff 02	 inc	 WORD PTR [edx]

; 5025 : 	mov	cx, word ptr [edx]

  021f4	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 5026 : 	add	edi, 2

  021f7	83 c7 02	 add	 edi, 2

; 5027 : 	mov	word ptr [edi], cx

  021fa	66 89 0f	 mov	 WORD PTR [edi], cx

; 5028 : 
; 5029 : 	// get next opcode
; 5030 : 	mov	bl, byte ptr [esi + 2]

  021fd	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 5031 : 	add	esi, 3

  02200	83 c6 03	 add	 esi, 3

; 5032 : 
; 5033 : 	// offset to opcode index
; 5034 : 	jmp	opTbl[ebx*4]

  02203	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isgi_word@@YAXXZ ENDP				; OP_isgi_word
?OP_isli_byte@@YAXXZ PROC NEAR				; OP_isli_byte

; 5040 : 	_asm {
; 5041 : 	movzx	ecx, byte ptr [esi]

  0220a	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 5042 : 
; 5043 : 	add	ecx, eax

  0220d	03 c8		 add	 ecx, eax

; 5044 : 	shl	ecx, 1

  0220f	d1 e1		 shl	 ecx, 1

; 5045 : //	memIDGetPtr	pm.Locals, MemVariables
; 5046 : 		movzx	ebx, word ptr pm.Locals

  02211	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5047 : 		shl		ebx, 4

  02218	c1 e3 04	 shl	 ebx, 4

; 5048 : 		add		ebx, _descTablePtr

  0221b	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5049 : 		mov		ebx, [ebx]Descriptor.data

  02221	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5050 : //
; 5051 : 
; 5052 : 	add	ebx, ecx

  02224	03 d9		 add	 ebx, ecx

; 5053 : 	inc	word ptr [ebx]

  02226	66 ff 03	 inc	 WORD PTR [ebx]

; 5054 : 	mov	cx, word ptr [ebx]

  02229	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5055 : 	add	edi, 2

  0222c	83 c7 02	 add	 edi, 2

; 5056 : 	mov	word ptr [edi], cx

  0222f	66 89 0f	 mov	 WORD PTR [edi], cx

; 5057 : 
; 5058 : 	// get next opcode
; 5059 : 	movzx	ebx, byte ptr [esi + 1]

  02232	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5060 : 	add	esi, 2

  02236	83 c6 02	 add	 esi, 2

; 5061 : 
; 5062 : 	// offset to opcode index
; 5063 : 	jmp	opTbl[ebx*4]

  02239	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isli_byte@@YAXXZ ENDP				; OP_isli_byte
?OP_isli_word@@YAXXZ PROC NEAR				; OP_isli_word

; 5068 : 	_asm {
; 5069 : 	movzx	ecx, word ptr [esi]

  02240	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 5070 : 
; 5071 : 	add	ecx, eax

  02243	03 c8		 add	 ecx, eax

; 5072 : 	shl	ecx, 1

  02245	d1 e1		 shl	 ecx, 1

; 5073 : //	memIDGetPtr	pm.Locals, MemVariables
; 5074 : 		movzx	ebx, word ptr pm.Locals

  02247	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5075 : 		shl		ebx, 4

  0224e	c1 e3 04	 shl	 ebx, 4

; 5076 : 		add		ebx, _descTablePtr

  02251	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5077 : 		mov		ebx, [ebx]Descriptor.data

  02257	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5078 : //
; 5079 : 
; 5080 : 	add	ebx, ecx

  0225a	03 d9		 add	 ebx, ecx

; 5081 : 	inc	word ptr [ebx]

  0225c	66 ff 03	 inc	 WORD PTR [ebx]

; 5082 : 	mov	cx, word ptr [ebx]

  0225f	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5083 : 	add	edi, 2

  02262	83 c7 02	 add	 edi, 2

; 5084 : 	mov	word ptr [edi], cx

  02265	66 89 0f	 mov	 WORD PTR [edi], cx

; 5085 : 
; 5086 : 	// get next opcode
; 5087 : 	movzx	ebx, byte ptr [esi + 2]

  02268	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5088 : 	add	esi, 3

  0226c	83 c6 03	 add	 esi, 3

; 5089 : 
; 5090 : 	// offset to opcode index
; 5091 : 	jmp	opTbl[ebx*4]

  0226f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isli_word@@YAXXZ ENDP				; OP_isli_word
?OP_isti_byte@@YAXXZ PROC NEAR				; OP_isti_byte

; 5097 : 	_asm {
; 5098 : 	movzx	ebx, byte ptr [esi]

  02276	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5099 : 
; 5100 : 	add	ebx, eax

  02279	03 d8		 add	 ebx, eax

; 5101 : 	shl	ebx, 1

  0227b	d1 e3		 shl	 ebx, 1

; 5102 : 	add	ebx, pm.TempPtr

  0227d	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5103 : 	inc	word ptr [ebx]

  02283	66 ff 03	 inc	 WORD PTR [ebx]

; 5104 : 	mov	cx, word ptr [ebx]

  02286	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5105 : 	add	edi, 2

  02289	83 c7 02	 add	 edi, 2

; 5106 : 	mov	word ptr [edi], cx

  0228c	66 89 0f	 mov	 WORD PTR [edi], cx

; 5107 : 
; 5108 : 	// get next opcode
; 5109 : 	movzx	ebx, byte ptr [esi + 1]

  0228f	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5110 : 	add	esi, 2

  02293	83 c6 02	 add	 esi, 2

; 5111 : 
; 5112 : 	// offset to opcode index
; 5113 : 	jmp	opTbl[ebx*4]

  02296	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isti_byte@@YAXXZ ENDP				; OP_isti_byte
?OP_isti_word@@YAXXZ PROC NEAR				; OP_isti_word

; 5118 : 	_asm {
; 5119 : 	movzx	ebx, word ptr [esi]

  0229d	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5120 : 
; 5121 : 	add	ebx, eax

  022a0	03 d8		 add	 ebx, eax

; 5122 : 	shl	ebx, 1

  022a2	d1 e3		 shl	 ebx, 1

; 5123 : 	add	ebx, pm.TempPtr

  022a4	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5124 : 	inc	word ptr [ebx]

  022aa	66 ff 03	 inc	 WORD PTR [ebx]

; 5125 : 	mov	cx, word ptr [ebx]

  022ad	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5126 : 	add	edi, 2

  022b0	83 c7 02	 add	 edi, 2

; 5127 : 	mov	word ptr [edi], cx

  022b3	66 89 0f	 mov	 WORD PTR [edi], cx

; 5128 : 
; 5129 : 	// get next opcode
; 5130 : 	movzx	ebx, byte ptr [esi + 2]

  022b6	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5131 : 	add	esi, 3

  022ba	83 c6 03	 add	 esi, 3

; 5132 : 
; 5133 : 	// offset to opcode index
; 5134 : 	jmp	opTbl[ebx*4]

  022bd	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_isti_word@@YAXXZ ENDP				; OP_isti_word
?OP_ispi_byte@@YAXXZ PROC NEAR				; OP_ispi_byte

; 5140 : 	_asm {
; 5141 : 	movzx	ebx, byte ptr [esi]

  022c4	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5142 : 
; 5143 : 	add	ebx, eax

  022c7	03 d8		 add	 ebx, eax

; 5144 : 	shl	ebx, 1

  022c9	d1 e3		 shl	 ebx, 1

; 5145 : 	add	ebx, pm.ParmPtr

  022cb	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5146 : 	inc	word ptr [ebx]

  022d1	66 ff 03	 inc	 WORD PTR [ebx]

; 5147 : 	mov	cx, word ptr [ebx]

  022d4	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5148 : 	add	edi, 2

  022d7	83 c7 02	 add	 edi, 2

; 5149 : 	mov	word ptr [edi], cx

  022da	66 89 0f	 mov	 WORD PTR [edi], cx

; 5150 : 
; 5151 : 	// get next opcode
; 5152 : 	movzx	ebx, byte ptr [esi + 1]

  022dd	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5153 : 	add	esi, 2

  022e1	83 c6 02	 add	 esi, 2

; 5154 : 
; 5155 : 	// offset to opcode index
; 5156 : 	jmp	opTbl[ebx*4]

  022e4	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ispi_byte@@YAXXZ ENDP				; OP_ispi_byte
?OP_ispi_word@@YAXXZ PROC NEAR				; OP_ispi_word

; 5161 : 	_asm {
; 5162 : 	movzx	ebx, word ptr [esi]

  022eb	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5163 : 
; 5164 : 	add	ebx, eax

  022ee	03 d8		 add	 ebx, eax

; 5165 : 	shl	ebx, 1

  022f0	d1 e3		 shl	 ebx, 1

; 5166 : 	add	ebx, pm.ParmPtr

  022f2	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5167 : 	inc	word ptr [ebx]

  022f8	66 ff 03	 inc	 WORD PTR [ebx]

; 5168 : 	mov	cx, word ptr [ebx]

  022fb	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5169 : 	add	edi, 2

  022fe	83 c7 02	 add	 edi, 2

; 5170 : 	mov	word ptr [edi], cx

  02301	66 89 0f	 mov	 WORD PTR [edi], cx

; 5171 : 
; 5172 : 	// get next opcode
; 5173 : 	movzx	ebx, byte ptr [esi + 2]

  02304	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5174 : 	add	esi, 3

  02308	83 c6 03	 add	 esi, 3

; 5175 : 
; 5176 : 	// offset to opcode index
; 5177 : 	jmp	opTbl[ebx*4]

  0230b	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_ispi_word@@YAXXZ ENDP				; OP_ispi_word
?OP_dag_byte@@YAXXZ PROC NEAR				; OP_dag_byte

; 5183 : 	_asm {
; 5184 : 	movzx	edx, byte ptr [esi]

  02312	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 5185 : 
; 5186 : 	shl	edx, 1

  02315	d1 e2		 shl	 edx, 1

; 5187 : 	add	edx, pm.GlobalPtr

  02317	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5188 : 	dec	word ptr [edx]

  0231d	66 ff 0a	 dec	 WORD PTR [edx]

; 5189 : 	movsx	eax, word ptr [edx]

  02320	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 5190 : 
; 5191 : 	// get next opcode
; 5192 : 	mov	bl, byte ptr [esi + 1]

  02323	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 5193 : 	add	esi, 2

  02326	83 c6 02	 add	 esi, 2

; 5194 : 
; 5195 : 	// offset to opcode index
; 5196 : 	jmp	opTbl[ebx*4]

  02329	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dag_byte@@YAXXZ ENDP				; OP_dag_byte
?OP_dag_word@@YAXXZ PROC NEAR				; OP_dag_word

; 5201 : 	_asm {
; 5202 : 	movzx	edx, word ptr [esi]

  02330	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 5203 : 
; 5204 : 	shl	edx, 1

  02333	d1 e2		 shl	 edx, 1

; 5205 : 	add	edx, pm.GlobalPtr

  02335	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5206 : 	dec	word ptr [edx]

  0233b	66 ff 0a	 dec	 WORD PTR [edx]

; 5207 : 	movsx	eax, word ptr [edx]

  0233e	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 5208 : 
; 5209 : 	// get next opcode
; 5210 : 	mov	bl, byte ptr [esi + 2]

  02341	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 5211 : 	add	esi, 3

  02344	83 c6 03	 add	 esi, 3

; 5212 : 
; 5213 : 	// offset to opcode index
; 5214 : 	jmp	opTbl[ebx*4]

  02347	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dag_word@@YAXXZ ENDP				; OP_dag_word
?OP_dal_byte@@YAXXZ PROC NEAR				; OP_dal_byte

; 5220 : 	_asm {
; 5221 : 	movzx	ecx, byte ptr [esi]

  0234e	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 5222 : 
; 5223 : 	shl	ecx, 1

  02351	d1 e1		 shl	 ecx, 1

; 5224 : //	memIDGetPtr	pm.Locals, MemVariables
; 5225 : 		movzx	ebx, word ptr pm.Locals

  02353	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5226 : 		shl		ebx, 4

  0235a	c1 e3 04	 shl	 ebx, 4

; 5227 : 		add		ebx, _descTablePtr

  0235d	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5228 : 		mov		ebx, [ebx]Descriptor.data

  02363	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5229 : //
; 5230 : 
; 5231 : 	add	ebx, ecx

  02366	03 d9		 add	 ebx, ecx

; 5232 : 	dec	word ptr [ebx]

  02368	66 ff 0b	 dec	 WORD PTR [ebx]

; 5233 : 	movsx	eax, word ptr [ebx]

  0236b	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5234 : 
; 5235 : 	// get next opcode
; 5236 : 	movzx	ebx, byte ptr [esi + 1]

  0236e	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5237 : 	add	esi, 2

  02372	83 c6 02	 add	 esi, 2

; 5238 : 
; 5239 : 	// offset to opcode index
; 5240 : 	jmp	opTbl[ebx*4]

  02375	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dal_byte@@YAXXZ ENDP				; OP_dal_byte
?OP_dal_word@@YAXXZ PROC NEAR				; OP_dal_word

; 5245 : 	_asm {
; 5246 : 	movzx	ecx, word ptr [esi]

  0237c	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 5247 : 
; 5248 : 	shl	ecx, 1

  0237f	d1 e1		 shl	 ecx, 1

; 5249 : //	memIDGetPtr	pm.Locals, MemVariables
; 5250 : 		movzx	ebx, word ptr pm.Locals

  02381	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5251 : 		shl		ebx, 4

  02388	c1 e3 04	 shl	 ebx, 4

; 5252 : 		add		ebx, _descTablePtr

  0238b	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5253 : 		mov		ebx, [ebx]Descriptor.data

  02391	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5254 : //
; 5255 : 
; 5256 : 	add	ebx, ecx

  02394	03 d9		 add	 ebx, ecx

; 5257 : 	dec	word ptr [ebx]

  02396	66 ff 0b	 dec	 WORD PTR [ebx]

; 5258 : 	movsx	eax, word ptr [ebx]

  02399	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5259 : 
; 5260 : 	// get next opcode
; 5261 : 	movzx	ebx, byte ptr [esi + 2]

  0239c	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5262 : 	add	esi, 3

  023a0	83 c6 03	 add	 esi, 3

; 5263 : 
; 5264 : 	// offset to opcode index
; 5265 : 	jmp	opTbl[ebx*4]

  023a3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dal_word@@YAXXZ ENDP				; OP_dal_word
?OP_dat_byte@@YAXXZ PROC NEAR				; OP_dat_byte

; 5271 : 	_asm {
; 5272 : 	movzx	ebx, byte ptr [esi]

  023aa	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5273 : 
; 5274 : 	shl	ebx, 1

  023ad	d1 e3		 shl	 ebx, 1

; 5275 : 	add	ebx, pm.TempPtr

  023af	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5276 : 	dec	word ptr [ebx]

  023b5	66 ff 0b	 dec	 WORD PTR [ebx]

; 5277 : 	movsx	eax, word ptr [ebx]

  023b8	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5278 : 
; 5279 : 	// get next opcode
; 5280 : 	movzx	ebx, byte ptr [esi + 1]

  023bb	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5281 : 	add	esi, 2

  023bf	83 c6 02	 add	 esi, 2

; 5282 : 
; 5283 : 	// offset to opcode index
; 5284 : 	jmp	opTbl[ebx*4]

  023c2	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dat_byte@@YAXXZ ENDP				; OP_dat_byte
?OP_dat_word@@YAXXZ PROC NEAR				; OP_dat_word

; 5289 : 	_asm {
; 5290 : 	movzx	ebx, word ptr [esi]

  023c9	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5291 : 
; 5292 : 	shl	ebx, 1

  023cc	d1 e3		 shl	 ebx, 1

; 5293 : 	add	ebx, pm.TempPtr

  023ce	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5294 : 	dec	word ptr [ebx]

  023d4	66 ff 0b	 dec	 WORD PTR [ebx]

; 5295 : 	movsx	eax, word ptr [ebx]

  023d7	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5296 : 
; 5297 : 	// get next opcode
; 5298 : 	movzx	ebx, byte ptr [esi + 2]

  023da	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5299 : 	add	esi, 3

  023de	83 c6 03	 add	 esi, 3

; 5300 : 
; 5301 : 	// offset to opcode index
; 5302 : 	jmp	opTbl[ebx*4]

  023e1	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dat_word@@YAXXZ ENDP				; OP_dat_word
?OP_dap_byte@@YAXXZ PROC NEAR				; OP_dap_byte

; 5308 : 	_asm {
; 5309 : 	movzx	ebx, byte ptr [esi]

  023e8	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5310 : 
; 5311 : 	shl	ebx, 1

  023eb	d1 e3		 shl	 ebx, 1

; 5312 : 	add	ebx, pm.ParmPtr

  023ed	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5313 : 	dec	word ptr [ebx]

  023f3	66 ff 0b	 dec	 WORD PTR [ebx]

; 5314 : 	movsx	eax, word ptr [ebx]

  023f6	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5315 : 
; 5316 : 	// get next opcode
; 5317 : 	movzx	ebx, byte ptr [esi + 1]

  023f9	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5318 : 	add	esi, 2

  023fd	83 c6 02	 add	 esi, 2

; 5319 : 
; 5320 : 	// offset to opcode index
; 5321 : 	jmp	opTbl[ebx*4]

  02400	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dap_byte@@YAXXZ ENDP				; OP_dap_byte
?OP_dap_word@@YAXXZ PROC NEAR				; OP_dap_word

; 5326 : 	_asm {
; 5327 : 	movzx	ebx, word ptr [esi]

  02407	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5328 : 
; 5329 : 	shl	ebx, 1

  0240a	d1 e3		 shl	 ebx, 1

; 5330 : 	add	ebx, pm.ParmPtr

  0240c	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5331 : 	dec	word ptr [ebx]

  02412	66 ff 0b	 dec	 WORD PTR [ebx]

; 5332 : 	movsx	eax, word ptr [ebx]

  02415	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5333 : 
; 5334 : 	// get next opcode
; 5335 : 	movzx	ebx, byte ptr [esi + 2]

  02418	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5336 : 	add	esi, 3

  0241c	83 c6 03	 add	 esi, 3

; 5337 : 
; 5338 : 	// offset to opcode index
; 5339 : 	jmp	opTbl[ebx*4]

  0241f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dap_word@@YAXXZ ENDP				; OP_dap_word
?OP_dsg_byte@@YAXXZ PROC NEAR				; OP_dsg_byte

; 5345 : 	_asm {
; 5346 : 	movzx	edx, byte ptr [esi]

  02426	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 5347 : 
; 5348 : 	shl	edx, 1

  02429	d1 e2		 shl	 edx, 1

; 5349 : 	add	edx, pm.GlobalPtr

  0242b	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5350 : 	dec	word ptr [edx]

  02431	66 ff 0a	 dec	 WORD PTR [edx]

; 5351 : 	mov	cx, word ptr [edx]

  02434	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 5352 : 	add	edi, 2

  02437	83 c7 02	 add	 edi, 2

; 5353 : 	mov	word ptr [edi], cx

  0243a	66 89 0f	 mov	 WORD PTR [edi], cx

; 5354 : 
; 5355 : 	// get next opcode
; 5356 : 	mov	bl, byte ptr [esi + 1]

  0243d	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 5357 : 	add	esi, 2

  02440	83 c6 02	 add	 esi, 2

; 5358 : 
; 5359 : 	// offset to opcode index
; 5360 : 	jmp	opTbl[ebx*4]

  02443	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsg_byte@@YAXXZ ENDP				; OP_dsg_byte
?OP_dsg_word@@YAXXZ PROC NEAR				; OP_dsg_word

; 5365 : 	_asm {
; 5366 : 	movzx	edx, word ptr [esi]

  0244a	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 5367 : 
; 5368 : 	shl	edx, 1

  0244d	d1 e2		 shl	 edx, 1

; 5369 : 	add	edx, pm.GlobalPtr

  0244f	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5370 : 	dec	word ptr [edx]

  02455	66 ff 0a	 dec	 WORD PTR [edx]

; 5371 : 	mov	cx, word ptr [edx]

  02458	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 5372 : 	add	edi, 2

  0245b	83 c7 02	 add	 edi, 2

; 5373 : 	mov	word ptr [edi], cx

  0245e	66 89 0f	 mov	 WORD PTR [edi], cx

; 5374 : 
; 5375 : 	// get next opcode
; 5376 : 	mov	bl, byte ptr [esi + 2]

  02461	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 5377 : 	add	esi, 3

  02464	83 c6 03	 add	 esi, 3

; 5378 : 
; 5379 : 	// offset to opcode index
; 5380 : 	jmp	opTbl[ebx*4]

  02467	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsg_word@@YAXXZ ENDP				; OP_dsg_word
?OP_dsl_byte@@YAXXZ PROC NEAR				; OP_dsl_byte

; 5386 : 	_asm {
; 5387 : 	movzx	ecx, byte ptr [esi]

  0246e	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 5388 : 
; 5389 : 	shl	ecx, 1

  02471	d1 e1		 shl	 ecx, 1

; 5390 : //	memIDGetPtr	pm.Locals, MemVariables
; 5391 : 		movzx	ebx, word ptr pm.Locals

  02473	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5392 : 		shl		ebx, 4

  0247a	c1 e3 04	 shl	 ebx, 4

; 5393 : 		add		ebx, _descTablePtr

  0247d	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5394 : 		mov		ebx, [ebx]Descriptor.data

  02483	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5395 : //
; 5396 : 
; 5397 : 	add	ebx, ecx

  02486	03 d9		 add	 ebx, ecx

; 5398 : 	dec	word ptr [ebx]

  02488	66 ff 0b	 dec	 WORD PTR [ebx]

; 5399 : 	mov	cx, word ptr [ebx]

  0248b	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5400 : 	add	edi, 2

  0248e	83 c7 02	 add	 edi, 2

; 5401 : 	mov	word ptr [edi], cx

  02491	66 89 0f	 mov	 WORD PTR [edi], cx

; 5402 : 
; 5403 : 	// get next opcode
; 5404 : 	movzx	ebx, byte ptr [esi + 1]

  02494	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5405 : 	add	esi, 2

  02498	83 c6 02	 add	 esi, 2

; 5406 : 
; 5407 : 	// offset to opcode index
; 5408 : 	jmp	opTbl[ebx*4]

  0249b	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsl_byte@@YAXXZ ENDP				; OP_dsl_byte
?OP_dsl_word@@YAXXZ PROC NEAR				; OP_dsl_word

; 5413 : 	_asm {
; 5414 : 	movzx	ecx, word ptr [esi]

  024a2	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 5415 : 
; 5416 : 	shl	ecx, 1

  024a5	d1 e1		 shl	 ecx, 1

; 5417 : //	memIDGetPtr	pm.Locals, MemVariables
; 5418 : 		movzx	ebx, word ptr pm.Locals

  024a7	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5419 : 		shl		ebx, 4

  024ae	c1 e3 04	 shl	 ebx, 4

; 5420 : 		add		ebx, _descTablePtr

  024b1	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5421 : 		mov		ebx, [ebx]Descriptor.data

  024b7	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5422 : //
; 5423 : 
; 5424 : 	add	ebx, ecx

  024ba	03 d9		 add	 ebx, ecx

; 5425 : 	dec	word ptr [ebx]

  024bc	66 ff 0b	 dec	 WORD PTR [ebx]

; 5426 : 	mov	cx, word ptr [ebx]

  024bf	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5427 : 	add	edi, 2

  024c2	83 c7 02	 add	 edi, 2

; 5428 : 	mov	word ptr [edi], cx

  024c5	66 89 0f	 mov	 WORD PTR [edi], cx

; 5429 : 
; 5430 : 	// get next opcode
; 5431 : 	movzx	ebx, byte ptr [esi + 2]

  024c8	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5432 : 	add	esi, 3

  024cc	83 c6 03	 add	 esi, 3

; 5433 : 
; 5434 : 	// offset to opcode index
; 5435 : 	jmp	opTbl[ebx*4]

  024cf	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsl_word@@YAXXZ ENDP				; OP_dsl_word
?OP_dst_byte@@YAXXZ PROC NEAR				; OP_dst_byte

; 5441 : 	_asm {
; 5442 : 	movzx	ebx, byte ptr [esi]

  024d6	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5443 : 
; 5444 : 	shl	ebx, 1

  024d9	d1 e3		 shl	 ebx, 1

; 5445 : 	add	ebx, pm.TempPtr

  024db	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5446 : 	dec	word ptr [ebx]

  024e1	66 ff 0b	 dec	 WORD PTR [ebx]

; 5447 : 	mov	cx, word ptr [ebx]

  024e4	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5448 : 	add	edi, 2

  024e7	83 c7 02	 add	 edi, 2

; 5449 : 	mov	word ptr [edi], cx

  024ea	66 89 0f	 mov	 WORD PTR [edi], cx

; 5450 : 
; 5451 : 	// get next opcode
; 5452 : 	movzx	ebx, byte ptr [esi + 1]

  024ed	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5453 : 	add	esi, 2

  024f1	83 c6 02	 add	 esi, 2

; 5454 : 
; 5455 : 	// offset to opcode index
; 5456 : 	jmp	opTbl[ebx*4]

  024f4	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dst_byte@@YAXXZ ENDP				; OP_dst_byte
?OP_dst_word@@YAXXZ PROC NEAR				; OP_dst_word

; 5461 : 	_asm {
; 5462 : 	movzx	ebx, word ptr [esi]

  024fb	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5463 : 
; 5464 : 	shl	ebx, 1

  024fe	d1 e3		 shl	 ebx, 1

; 5465 : 	add	ebx, pm.TempPtr

  02500	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5466 : 	dec	word ptr [ebx]

  02506	66 ff 0b	 dec	 WORD PTR [ebx]

; 5467 : 	mov	cx, word ptr [ebx]

  02509	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5468 : 	add	edi, 2

  0250c	83 c7 02	 add	 edi, 2

; 5469 : 	mov	word ptr [edi], cx

  0250f	66 89 0f	 mov	 WORD PTR [edi], cx

; 5470 : 
; 5471 : 	// get next opcode
; 5472 : 	movzx	ebx, byte ptr [esi + 2] 

  02512	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5473 : 	add	esi, 3

  02516	83 c6 03	 add	 esi, 3

; 5474 : 
; 5475 : 	// offset to opcode index
; 5476 : 	jmp	opTbl[ebx*4]

  02519	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dst_word@@YAXXZ ENDP				; OP_dst_word
?OP_dsp_byte@@YAXXZ PROC NEAR				; OP_dsp_byte

; 5482 : 	_asm {
; 5483 : 	movzx	ebx, byte ptr [esi]

  02520	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5484 : 
; 5485 : 	shl	ebx, 1

  02523	d1 e3		 shl	 ebx, 1

; 5486 : 	add	ebx, pm.ParmPtr

  02525	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5487 : 	dec	word ptr [ebx]

  0252b	66 ff 0b	 dec	 WORD PTR [ebx]

; 5488 : 	mov	cx, word ptr [ebx]

  0252e	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5489 : 	add	edi, 2

  02531	83 c7 02	 add	 edi, 2

; 5490 : 	mov	word ptr [edi], cx

  02534	66 89 0f	 mov	 WORD PTR [edi], cx

; 5491 : 
; 5492 : 	// get next opcode
; 5493 : 	movzx	ebx, byte ptr [esi + 1] 

  02537	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5494 : 	add	esi, 2

  0253b	83 c6 02	 add	 esi, 2

; 5495 : 
; 5496 : 	// offset to opcode index
; 5497 : 	jmp	opTbl[ebx*4]

  0253e	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsp_byte@@YAXXZ ENDP				; OP_dsp_byte
?OP_dsp_word@@YAXXZ PROC NEAR				; OP_dsp_word

; 5502 : 	_asm {
; 5503 : 	movzx	ebx, word ptr [esi]

  02545	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5504 : 
; 5505 : 	shl	ebx, 1

  02548	d1 e3		 shl	 ebx, 1

; 5506 : 	add	ebx, pm.ParmPtr

  0254a	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5507 : 	dec	word ptr [ebx]

  02550	66 ff 0b	 dec	 WORD PTR [ebx]

; 5508 : 	mov	cx, word ptr [ebx]

  02553	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5509 : 	add	edi, 2

  02556	83 c7 02	 add	 edi, 2

; 5510 : 	mov	word ptr [edi], cx

  02559	66 89 0f	 mov	 WORD PTR [edi], cx

; 5511 : 
; 5512 : 	// get next opcode
; 5513 : 	movzx	ebx, byte ptr [esi + 2]

  0255c	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5514 : 	add	esi, 3

  02560	83 c6 03	 add	 esi, 3

; 5515 : 
; 5516 : 	// offset to opcode index
; 5517 : 	jmp	opTbl[ebx*4]

  02563	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsp_word@@YAXXZ ENDP				; OP_dsp_word
?OP_dagi_byte@@YAXXZ PROC NEAR				; OP_dagi_byte

; 5523 : 	_asm {
; 5524 : 	movzx	edx, byte ptr [esi]

  0256a	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 5525 : 
; 5526 : 	add	edx, eax

  0256d	03 d0		 add	 edx, eax

; 5527 : 	shl	edx, 1

  0256f	d1 e2		 shl	 edx, 1

; 5528 : 	add	edx, pm.GlobalPtr

  02571	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5529 : 	dec	word ptr [edx]

  02577	66 ff 0a	 dec	 WORD PTR [edx]

; 5530 : 	movsx	eax, word ptr [edx]

  0257a	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 5531 : 
; 5532 : 	// get next opcode
; 5533 : 	mov	bl, byte ptr [esi + 1]

  0257d	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 5534 : 	add	esi, 2

  02580	83 c6 02	 add	 esi, 2

; 5535 : 
; 5536 : 	// offset to opcode index
; 5537 : 	jmp	opTbl[ebx*4]

  02583	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dagi_byte@@YAXXZ ENDP				; OP_dagi_byte
?OP_dagi_word@@YAXXZ PROC NEAR				; OP_dagi_word

; 5542 : 	_asm {
; 5543 : 	movzx	edx, word ptr [esi]

  0258a	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 5544 : 
; 5545 : 	add	edx, eax

  0258d	03 d0		 add	 edx, eax

; 5546 : 	shl	edx, 1

  0258f	d1 e2		 shl	 edx, 1

; 5547 : 	add	edx, pm.GlobalPtr

  02591	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5548 : 	dec	word ptr [edx]

  02597	66 ff 0a	 dec	 WORD PTR [edx]

; 5549 : 	movsx	eax, word ptr [edx]

  0259a	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 5550 : 
; 5551 : 	// get next opcode
; 5552 : 	mov	bl, byte ptr [esi + 2]

  0259d	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 5553 : 	add	esi, 3

  025a0	83 c6 03	 add	 esi, 3

; 5554 : 
; 5555 : 	// offset to opcode index
; 5556 : 	jmp	opTbl[ebx*4]

  025a3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dagi_word@@YAXXZ ENDP				; OP_dagi_word
?OP_dali_byte@@YAXXZ PROC NEAR				; OP_dali_byte

; 5562 : 	_asm {
; 5563 : 	movzx	ecx, byte ptr [esi]

  025aa	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 5564 : 
; 5565 : 	add	ecx, eax

  025ad	03 c8		 add	 ecx, eax

; 5566 : 	shl	ecx, 1

  025af	d1 e1		 shl	 ecx, 1

; 5567 : //	memIDGetPtr	pm.Locals, MemVariables
; 5568 : 		movzx	ebx, word ptr pm.Locals

  025b1	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5569 : 		shl		ebx, 4

  025b8	c1 e3 04	 shl	 ebx, 4

; 5570 : 		add		ebx, _descTablePtr

  025bb	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5571 : 		mov		ebx, [ebx]Descriptor.data

  025c1	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5572 : //
; 5573 : 
; 5574 : 	add	ebx, ecx

  025c4	03 d9		 add	 ebx, ecx

; 5575 : 	dec	word ptr [ebx]

  025c6	66 ff 0b	 dec	 WORD PTR [ebx]

; 5576 : 	movsx	eax, word ptr [ebx]

  025c9	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5577 : 
; 5578 : 	// get next opcode
; 5579 : 	movzx	ebx, byte ptr [esi + 1]

  025cc	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5580 : 	add	esi, 2

  025d0	83 c6 02	 add	 esi, 2

; 5581 : 
; 5582 : 	// offset to opcode index
; 5583 : 	jmp	opTbl[ebx*4]

  025d3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dali_byte@@YAXXZ ENDP				; OP_dali_byte
?OP_dali_word@@YAXXZ PROC NEAR				; OP_dali_word

; 5588 : 	_asm {
; 5589 : 	movzx	ecx, word ptr [esi]

  025da	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 5590 : 
; 5591 : 	add	ecx, eax

  025dd	03 c8		 add	 ecx, eax

; 5592 : 	shl	ecx, 1

  025df	d1 e1		 shl	 ecx, 1

; 5593 : //	memIDGetPtr	pm.Locals, MemVariables
; 5594 : 		movzx	ebx, word ptr pm.Locals

  025e1	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5595 : 		shl		ebx, 4

  025e8	c1 e3 04	 shl	 ebx, 4

; 5596 : 		add		ebx, _descTablePtr

  025eb	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5597 : 		mov		ebx, [ebx]Descriptor.data

  025f1	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5598 : //
; 5599 : 
; 5600 : 	add	ebx, ecx

  025f4	03 d9		 add	 ebx, ecx

; 5601 : 	dec	word ptr [ebx]

  025f6	66 ff 0b	 dec	 WORD PTR [ebx]

; 5602 : 	movsx	eax, word ptr [ebx]

  025f9	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5603 : 
; 5604 : 	// get next opcode
; 5605 : 	movzx	ebx, byte ptr [esi + 2]

  025fc	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5606 : 	add	esi, 3

  02600	83 c6 03	 add	 esi, 3

; 5607 : 
; 5608 : 	// offset to opcode index
; 5609 : 	jmp	opTbl[ebx*4]

  02603	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dali_word@@YAXXZ ENDP				; OP_dali_word
?OP_dati_byte@@YAXXZ PROC NEAR				; OP_dati_byte

; 5615 : 	_asm {
; 5616 : 	movzx	ebx, byte ptr [esi]

  0260a	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5617 : 
; 5618 : 	add	ebx, eax

  0260d	03 d8		 add	 ebx, eax

; 5619 : 	shl	ebx, 1

  0260f	d1 e3		 shl	 ebx, 1

; 5620 : 	add	ebx, pm.TempPtr

  02611	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5621 : 	dec	word ptr [ebx]

  02617	66 ff 0b	 dec	 WORD PTR [ebx]

; 5622 : 	movsx	eax, word ptr [ebx]

  0261a	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5623 : 
; 5624 : 	// get next opcode
; 5625 : 	movzx	ebx, byte ptr [esi + 1]

  0261d	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5626 : 	add	esi, 2

  02621	83 c6 02	 add	 esi, 2

; 5627 : 
; 5628 : 	// offset to opcode index
; 5629 : 	jmp	opTbl[ebx*4]

  02624	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dati_byte@@YAXXZ ENDP				; OP_dati_byte
?OP_dati_word@@YAXXZ PROC NEAR				; OP_dati_word

; 5634 : 	_asm {
; 5635 : 	movzx	ebx, word ptr [esi]

  0262b	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5636 : 
; 5637 : 	add	ebx, eax

  0262e	03 d8		 add	 ebx, eax

; 5638 : 	shl	ebx, 1

  02630	d1 e3		 shl	 ebx, 1

; 5639 : 	add	ebx, pm.TempPtr

  02632	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5640 : 	dec	word ptr [ebx]

  02638	66 ff 0b	 dec	 WORD PTR [ebx]

; 5641 : 	movsx	eax, word ptr [ebx]

  0263b	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5642 : 
; 5643 : 	// get next opcode
; 5644 : 	movzx	ebx, byte ptr [esi + 2]

  0263e	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5645 : 	add	esi, 3

  02642	83 c6 03	 add	 esi, 3

; 5646 : 
; 5647 : 	// offset to opcode index
; 5648 : 	jmp	opTbl[ebx*4]

  02645	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dati_word@@YAXXZ ENDP				; OP_dati_word
?OP_dapi_byte@@YAXXZ PROC NEAR				; OP_dapi_byte

; 5654 : 	_asm {
; 5655 : 	movzx	ebx, byte ptr [esi]

  0264c	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5656 : 
; 5657 : 	add	ebx, eax

  0264f	03 d8		 add	 ebx, eax

; 5658 : 	shl	ebx, 1

  02651	d1 e3		 shl	 ebx, 1

; 5659 : 	add	ebx, pm.ParmPtr

  02653	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5660 : 	dec	word ptr [ebx]

  02659	66 ff 0b	 dec	 WORD PTR [ebx]

; 5661 : 	movsx	eax, word ptr [ebx]

  0265c	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5662 : 
; 5663 : 	// get next opcode
; 5664 : 	movzx	ebx, byte ptr [esi + 1]

  0265f	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5665 : 	add	esi, 2

  02663	83 c6 02	 add	 esi, 2

; 5666 : 
; 5667 : 	// offset to opcode index
; 5668 : 	jmp	opTbl[ebx*4]

  02666	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dapi_byte@@YAXXZ ENDP				; OP_dapi_byte
?OP_dapi_word@@YAXXZ PROC NEAR				; OP_dapi_word

; 5673 : 	_asm {
; 5674 : 	movzx	ebx, word ptr [esi]

  0266d	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5675 : 
; 5676 : 	add	ebx, eax

  02670	03 d8		 add	 ebx, eax

; 5677 : 	shl	ebx, 1

  02672	d1 e3		 shl	 ebx, 1

; 5678 : 	add	ebx, pm.ParmPtr

  02674	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5679 : 	dec	word ptr [ebx]

  0267a	66 ff 0b	 dec	 WORD PTR [ebx]

; 5680 : 	movsx	eax, word ptr [ebx]

  0267d	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 5681 : 
; 5682 : 	// get next opcode
; 5683 : 	movzx	ebx, byte ptr [esi + 2]

  02680	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5684 : 	add	esi, 3

  02684	83 c6 03	 add	 esi, 3

; 5685 : 
; 5686 : 	// offset to opcode index
; 5687 : 	jmp	opTbl[ebx*4]

  02687	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dapi_word@@YAXXZ ENDP				; OP_dapi_word
?OP_dsgi_byte@@YAXXZ PROC NEAR				; OP_dsgi_byte

; 5693 : 	_asm {
; 5694 : 	movzx	edx, byte ptr [esi]

  0268e	0f b6 16	 movzx	 edx, BYTE PTR [esi]

; 5695 : 
; 5696 : 	add	edx, eax

  02691	03 d0		 add	 edx, eax

; 5697 : 	shl	edx, 1

  02693	d1 e2		 shl	 edx, 1

; 5698 : 	add	edx, pm.GlobalPtr

  02695	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5699 : 	dec	word ptr [edx]

  0269b	66 ff 0a	 dec	 WORD PTR [edx]

; 5700 : 	mov	cx, word ptr [edx]

  0269e	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 5701 : 	add	edi, 2

  026a1	83 c7 02	 add	 edi, 2

; 5702 : 	mov	word ptr [edi], cx

  026a4	66 89 0f	 mov	 WORD PTR [edi], cx

; 5703 : 
; 5704 : 	// get next opcode
; 5705 : 	mov	bl, byte ptr [esi + 1]

  026a7	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 5706 : 	add	esi, 2

  026aa	83 c6 02	 add	 esi, 2

; 5707 : 
; 5708 : 	// offset to opcode index
; 5709 : 	jmp	opTbl[ebx*4]

  026ad	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsgi_byte@@YAXXZ ENDP				; OP_dsgi_byte
?OP_dsgi_word@@YAXXZ PROC NEAR				; OP_dsgi_word

; 5714 : 	_asm {
; 5715 : 	movzx	edx, word ptr [esi]

  026b4	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 5716 : 
; 5717 : 	add	edx, eax

  026b7	03 d0		 add	 edx, eax

; 5718 : 	shl	edx, 1

  026b9	d1 e2		 shl	 edx, 1

; 5719 : 	add	edx, pm.GlobalPtr

  026bb	03 15 14 00 00
	00		 add	 edx, DWORD PTR ?pm@@3VPMachine@@A+20

; 5720 : 	dec	word ptr [edx]

  026c1	66 ff 0a	 dec	 WORD PTR [edx]

; 5721 : 	mov	cx, word ptr [edx]

  026c4	66 8b 0a	 mov	 cx, WORD PTR [edx]

; 5722 : 	add	edi, 2

  026c7	83 c7 02	 add	 edi, 2

; 5723 : 	mov	word ptr [edi], cx

  026ca	66 89 0f	 mov	 WORD PTR [edi], cx

; 5724 : 
; 5725 : 	// get next opcode
; 5726 : 	mov	bl, byte ptr [esi + 2]

  026cd	8a 5e 02	 mov	 bl, BYTE PTR [esi+2]

; 5727 : 	add	esi, 3

  026d0	83 c6 03	 add	 esi, 3

; 5728 : 
; 5729 : 	// offset to opcode index
; 5730 : 	jmp	opTbl[ebx*4]

  026d3	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsgi_word@@YAXXZ ENDP				; OP_dsgi_word
?OP_dsli_byte@@YAXXZ PROC NEAR				; OP_dsli_byte

; 5736 : 	_asm {
; 5737 : 	movzx	ecx, byte ptr [esi]

  026da	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]

; 5738 : 
; 5739 : 	add	ecx, eax

  026dd	03 c8		 add	 ecx, eax

; 5740 : 	shl	ecx, 1

  026df	d1 e1		 shl	 ecx, 1

; 5741 : //	memIDGetPtr	pm.Locals, MemVariables
; 5742 : 		movzx	ebx, word ptr pm.Locals

  026e1	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5743 : 		shl		ebx, 4

  026e8	c1 e3 04	 shl	 ebx, 4

; 5744 : 		add		ebx, _descTablePtr

  026eb	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5745 : 		mov		ebx, [ebx]Descriptor.data

  026f1	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5746 : //
; 5747 : 
; 5748 : 	add	ebx, ecx

  026f4	03 d9		 add	 ebx, ecx

; 5749 : 	dec	word ptr [ebx]

  026f6	66 ff 0b	 dec	 WORD PTR [ebx]

; 5750 : 	mov	cx, word ptr [ebx]

  026f9	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5751 : 	add	edi, 2

  026fc	83 c7 02	 add	 edi, 2

; 5752 : 	mov	word ptr [edi], cx

  026ff	66 89 0f	 mov	 WORD PTR [edi], cx

; 5753 : 
; 5754 : 	// get next opcode
; 5755 : 	movzx	ebx, byte ptr [esi + 1]

  02702	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5756 : 	add	esi, 2

  02706	83 c6 02	 add	 esi, 2

; 5757 : 
; 5758 : 	// offset to opcode index
; 5759 : 	jmp	opTbl[ebx*4]

  02709	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsli_byte@@YAXXZ ENDP				; OP_dsli_byte
?OP_dsli_word@@YAXXZ PROC NEAR				; OP_dsli_word

; 5764 : 	_asm {
; 5765 : 	movzx	ecx, word ptr [esi]

  02710	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 5766 : 
; 5767 : 	add	ecx, eax

  02713	03 c8		 add	 ecx, eax

; 5768 : 	shl	ecx, 1

  02715	d1 e1		 shl	 ecx, 1

; 5769 : //	memIDGetPtr	pm.Locals, MemVariables
; 5770 : 		movzx	ebx, word ptr pm.Locals

  02717	0f b7 1d 1c 00
	00 00		 movzx	 ebx, WORD PTR ?pm@@3VPMachine@@A+28

; 5771 : 		shl		ebx, 4

  0271e	c1 e3 04	 shl	 ebx, 4

; 5772 : 		add		ebx, _descTablePtr

  02721	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?_descTablePtr@@3PAXA ; _descTablePtr

; 5773 : 		mov		ebx, [ebx]Descriptor.data

  02727	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 5774 : //
; 5775 : 
; 5776 : 	add	ebx, ecx

  0272a	03 d9		 add	 ebx, ecx

; 5777 : 	dec	word ptr [ebx]

  0272c	66 ff 0b	 dec	 WORD PTR [ebx]

; 5778 : 	mov	cx, word ptr [ebx]

  0272f	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5779 : 	add	edi, 2

  02732	83 c7 02	 add	 edi, 2

; 5780 : 	mov	word ptr [edi], cx

  02735	66 89 0f	 mov	 WORD PTR [edi], cx

; 5781 : 
; 5782 : 	// get next opcode
; 5783 : 	movzx	ebx, byte ptr [esi + 2]

  02738	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5784 : 	add	esi, 3

  0273c	83 c6 03	 add	 esi, 3

; 5785 : 
; 5786 : 	// offset to opcode index
; 5787 : 	jmp	opTbl[ebx*4]

  0273f	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsli_word@@YAXXZ ENDP				; OP_dsli_word
?OP_dsti_byte@@YAXXZ PROC NEAR				; OP_dsti_byte

; 5793 : 	_asm {
; 5794 : 	movzx	ebx, byte ptr [esi]

  02746	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5795 : 
; 5796 : 	add	ebx, eax

  02749	03 d8		 add	 ebx, eax

; 5797 : 	shl	ebx, 1

  0274b	d1 e3		 shl	 ebx, 1

; 5798 : 	add	ebx, pm.TempPtr

  0274d	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5799 : 	dec	word ptr [ebx]

  02753	66 ff 0b	 dec	 WORD PTR [ebx]

; 5800 : 	mov	cx, word ptr [ebx]

  02756	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5801 : 	add	edi, 2

  02759	83 c7 02	 add	 edi, 2

; 5802 : 	mov	word ptr [edi], cx

  0275c	66 89 0f	 mov	 WORD PTR [edi], cx

; 5803 : 
; 5804 : 	// get next opcode
; 5805 : 	movzx	ebx, byte ptr [esi + 1]

  0275f	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5806 : 	add	esi, 2

  02763	83 c6 02	 add	 esi, 2

; 5807 : 
; 5808 : 	// offset to opcode index
; 5809 : 	jmp	opTbl[ebx*4]

  02766	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsti_byte@@YAXXZ ENDP				; OP_dsti_byte
?OP_dsti_word@@YAXXZ PROC NEAR				; OP_dsti_word

; 5814 : 	_asm {
; 5815 : 	movzx	ebx, word ptr [esi]

  0276d	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5816 : 
; 5817 : 	add	ebx, eax

  02770	03 d8		 add	 ebx, eax

; 5818 : 	shl	ebx, 1

  02772	d1 e3		 shl	 ebx, 1

; 5819 : 	add	ebx, pm.TempPtr

  02774	03 1d 10 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+16

; 5820 : 	dec	word ptr [ebx]

  0277a	66 ff 0b	 dec	 WORD PTR [ebx]

; 5821 : 	mov	cx, word ptr [ebx]

  0277d	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5822 : 	add	edi, 2

  02780	83 c7 02	 add	 edi, 2

; 5823 : 	mov	word ptr [edi], cx

  02783	66 89 0f	 mov	 WORD PTR [edi], cx

; 5824 : 
; 5825 : 	// get next opcode
; 5826 : 	movzx	ebx, byte ptr [esi + 2]

  02786	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5827 : 	add	esi, 3

  0278a	83 c6 03	 add	 esi, 3

; 5828 : 
; 5829 : 	// offset to opcode index
; 5830 : 	jmp	opTbl[ebx*4]

  0278d	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dsti_word@@YAXXZ ENDP				; OP_dsti_word
?OP_dspi_byte@@YAXXZ PROC NEAR				; OP_dspi_byte

; 5836 : 	_asm {
; 5837 : 	movzx	ebx, byte ptr [esi]

  02794	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5838 : 
; 5839 : 	add	ebx, eax

  02797	03 d8		 add	 ebx, eax

; 5840 : 	shl	ebx, 1

  02799	d1 e3		 shl	 ebx, 1

; 5841 : 	add	ebx, pm.ParmPtr

  0279b	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5842 : 	dec	word ptr [ebx]

  027a1	66 ff 0b	 dec	 WORD PTR [ebx]

; 5843 : 	mov	cx, word ptr [ebx]

  027a4	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5844 : 	add	edi, 2

  027a7	83 c7 02	 add	 edi, 2

; 5845 : 	mov	word ptr [edi], cx

  027aa	66 89 0f	 mov	 WORD PTR [edi], cx

; 5846 : 
; 5847 : 	// get next opcode
; 5848 : 	movzx	ebx, byte ptr [esi + 1]

  027ad	0f b6 5e 01	 movzx	 ebx, BYTE PTR [esi+1]

; 5849 : 	add	esi, 2

  027b1	83 c6 02	 add	 esi, 2

; 5850 : 
; 5851 : 	// offset to opcode index
; 5852 : 	jmp	opTbl[ebx*4]

  027b4	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dspi_byte@@YAXXZ ENDP				; OP_dspi_byte
?OP_dspi_word@@YAXXZ PROC NEAR				; OP_dspi_word

; 5857 : 	_asm {
; 5858 : 	movzx	ebx, word ptr [esi]

  027bb	0f b7 1e	 movzx	 ebx, WORD PTR [esi]

; 5859 : 
; 5860 : 	add	ebx, eax

  027be	03 d8		 add	 ebx, eax

; 5861 : 	shl	ebx, 1

  027c0	d1 e3		 shl	 ebx, 1

; 5862 : 	add	ebx, pm.ParmPtr

  027c2	03 1d 18 00 00
	00		 add	 ebx, DWORD PTR ?pm@@3VPMachine@@A+24

; 5863 : 	dec	word ptr [ebx]

  027c8	66 ff 0b	 dec	 WORD PTR [ebx]

; 5864 : 	mov	cx, word ptr [ebx]

  027cb	66 8b 0b	 mov	 cx, WORD PTR [ebx]

; 5865 : 	add	edi, 2

  027ce	83 c7 02	 add	 edi, 2

; 5866 : 	mov	word ptr [edi], cx

  027d1	66 89 0f	 mov	 WORD PTR [edi], cx

; 5867 : 
; 5868 : 	// get next opcode
; 5869 : 	movzx	ebx, byte ptr [esi + 2]

  027d4	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5870 : 	add	esi, 3

  027d8	83 c6 03	 add	 esi, 3

; 5871 : 
; 5872 : 	// offset to opcode index
; 5873 : 	jmp	opTbl[ebx*4]

  027db	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_dspi_word@@YAXXZ ENDP				; OP_dspi_word
?OP_filename@@YAXXZ PROC NEAR				; OP_filename

; 5878 : 	_asm {
; 5879 : 		mov	ebx, 0

  027e2	bb 00 00 00 00	 mov	 ebx, 0
$__scan$59844:

; 5880 : 
; 5881 : __scan:
; 5882 : 		mov	dl, [esi + ebx]

  027e7	8a 14 1e	 mov	 dl, BYTE PTR [esi+ebx]

; 5883 : 		mov	[pm.curSourceFile + ebx], dl

  027ea	88 93 26 00 00
	00		 mov	 BYTE PTR ?pm@@3VPMachine@@A[ebx+38], dl

; 5884 : 		inc	ebx

  027f0	43		 inc	 ebx

; 5885 : 		test	byte ptr [esi + ebx], 255

  027f1	f6 04 1e ff	 test	 BYTE PTR [esi+ebx], -1

; 5886 : 		jnz	__scan

  027f5	75 f0		 jne	 SHORT $__scan$59844

; 5887 : 
; 5888 : 		mov	[pm.curSourceFile + ebx], 0

  027f7	c6 83 26 00 00
	00 00		 mov	 BYTE PTR ?pm@@3VPMachine@@A[ebx+38], 0

; 5889 : 
; 5890 : 		add	esi, ebx

  027fe	03 f3		 add	 esi, ebx

; 5891 : 		inc	esi

  02800	46		 inc	 esi

; 5892 : 
; 5893 : 		// get next opcode
; 5894 : 		movzx	ebx, byte ptr [esi]

  02801	0f b6 1e	 movzx	 ebx, BYTE PTR [esi]

; 5895 : 		inc	esi

  02804	46		 inc	 esi

; 5896 : 
; 5897 : 		// offset to opcode index
; 5898 : 		jmp	opTbl[ebx*4]

  02805	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_filename@@YAXXZ ENDP				; OP_filename
?OP_linenum@@YAXXZ PROC NEAR				; OP_linenum

; 5903 : 	_asm {
; 5904 : 		mov	bx, word ptr [esi]

  0280c	66 8b 1e	 mov	 bx, WORD PTR [esi]

; 5905 : 		mov	pm.curSourceLineNum, bx

  0280f	66 89 1d 26 01
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+294, bx

; 5906 : 
; 5907 : 		// get next opcode
; 5908 : 		movzx	ebx, byte ptr [esi + 2]

  02816	0f b6 5e 02	 movzx	 ebx, BYTE PTR [esi+2]

; 5909 : 		add	esi, 3

  0281a	83 c6 03	 add	 esi, 3

; 5910 : 
; 5911 : 		// offset to opcode index
; 5912 : 		jmp	opTbl[ebx*4]

  0281d	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR ?opTbl@@3PAPAXA[ebx*4]
?OP_linenum@@YAXXZ ENDP					; OP_linenum
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+3
$SG59849 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\PMac'
	DB	'hine.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
?BadOp@@YAXXZ PROC NEAR					; BadOp

; 5918 : 	_asm {
; 5919 : 		mov	parm1, ebx

  02824	89 1d 00 00 00
	00		 mov	 DWORD PTR ?parm1@@3HA, ebx ; parm1

; 5920 : 	}
; 5921 : 
; 5922 : 	msgMgr->Fatal(SrcLoc, Msg_BadOpcode, parm1);

  0282a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?parm1@@3HA ; parm1
  0282f	50		 push	 eax
  02830	6a 2c		 push	 44			; 0000002cH
  02832	68 22 17 00 00	 push	 5922			; 00001722H
  02837	68 00 00 00 00	 push	 OFFSET FLAT:$SG59849
  0283c	6a 61		 push	 97			; 00000061H
  0283e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  02844	51		 push	 ecx
  02845	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  0284a	83 c4 18	 add	 esp, 24			; 00000018H
?BadOp@@YAXXZ ENDP					; BadOp
_TEXT	ENDS
END

	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Plist.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Plane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Id@SOL_Plane@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Priority@SOL_Plane@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Plane@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??0PlaneList@@QAE@XZ				; PlaneList::PlaneList
_TEXT	SEGMENT
_this$ = -4
??0PlaneList@@QAE@XZ PROC NEAR				; PlaneList::PlaneList

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : 	length = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 80 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+400], 0

; 13   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0PlaneList@@QAE@XZ ENDP				; PlaneList::PlaneList
_TEXT	ENDS
PUBLIC	??_GSOL_Plane@@QAEPAXI@Z			; SOL_Plane::`scalar deleting destructor'
PUBLIC	??1PlaneList@@QAE@XZ				; PlaneList::~PlaneList
_TEXT	SEGMENT
$T57437 = -8
$T57438 = -12
_this$ = -16
_i$ = -4
??1PlaneList@@QAE@XZ PROC NEAR				; PlaneList::~PlaneList

; 17   : {

  0001b	55		 push	 ebp
  0001c	8b ec		 mov	 ebp, esp
  0001e	83 ec 14	 sub	 esp, 20			; 00000014H
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : 	for (int i = 0; i < length; i++)

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002b	eb 09		 jmp	 SHORT $L57253
$L57254:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00030	83 c0 01	 add	 eax, 1
  00033	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L57253:
  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0003c	3b 91 90 01 00
	00		 cmp	 edx, DWORD PTR [ecx+400]
  00042	7d 30		 jge	 SHORT $L57255

; 19   : 		delete planeArray[i];

  00044	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0004d	89 55 f4	 mov	 DWORD PTR $T57438[ebp], edx
  00050	8b 45 f4	 mov	 eax, DWORD PTR $T57438[ebp]
  00053	89 45 f8	 mov	 DWORD PTR $T57437[ebp], eax
  00056	83 7d f8 00	 cmp	 DWORD PTR $T57437[ebp], 0
  0005a	74 0f		 je	 SHORT $L57439
  0005c	6a 01		 push	 1
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR $T57437[ebp]
  00061	e8 00 00 00 00	 call	 ??_GSOL_Plane@@QAEPAXI@Z ; SOL_Plane::`scalar deleting destructor'
  00066	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00069	eb 07		 jmp	 SHORT $L57440
$L57439:
  0006b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L57440:
  00072	eb b9		 jmp	 SHORT $L57254
$L57255:

; 20   : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??1PlaneList@@QAE@XZ ENDP				; PlaneList::~PlaneList
_TEXT	ENDS
PUBLIC	??1SOL_Plane@@QAE@XZ				; SOL_Plane::~SOL_Plane
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ??_GSOL_Plane@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GSOL_Plane@@QAEPAXI@Z PROC NEAR			; SOL_Plane::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1SOL_Plane@@QAE@XZ	; SOL_Plane::~SOL_Plane
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L57261
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L57261:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GSOL_Plane@@QAEPAXI@Z ENDP				; SOL_Plane::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1ScreenItemList@@QAE@XZ:NEAR			; ScreenItemList::~ScreenItemList
;	COMDAT ??1SOL_Plane@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1SOL_Plane@@QAE@XZ PROC NEAR				; SOL_Plane::~SOL_Plane, COMDAT

; 49   : 	~SOL_Plane(){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0000d	e8 00 00 00 00	 call	 ??1ScreenItemList@@QAE@XZ ; ScreenItemList::~ScreenItemList
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1SOL_Plane@@QAE@XZ ENDP				; SOL_Plane::~SOL_Plane
_TEXT	ENDS
PUBLIC	??0PlaneList@@QAE@ABV0@@Z			; PlaneList::PlaneList
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??0SOL_Plane@@QAE@ABV0@@Z:NEAR			; SOL_Plane::SOL_Plane
xdata$x	SEGMENT
$T57453	DD	019930520H
	DD	01H
	DD	FLAT:$T57456
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T57456	DD	0ffffffffH
	DD	FLAT:$L57449
xdata$x	ENDS
_TEXT	SEGMENT
$T57445 = -20
$T57446 = -24
__$EHRec$ = -12
_src$ = 8
_this$ = -28
_i$ = -16
??0PlaneList@@QAE@ABV0@@Z PROC NEAR			; PlaneList::PlaneList

; 23   : {

  00078	55		 push	 ebp
  00079	8b ec		 mov	 ebp, esp
  0007b	6a ff		 push	 -1
  0007d	68 00 00 00 00	 push	 $L57454
  00082	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00088	50		 push	 eax
  00089	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00090	83 ec 14	 sub	 esp, 20			; 00000014H
  00093	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	length = src.length;

  00096	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0009c	8b 91 90 01 00
	00		 mov	 edx, DWORD PTR [ecx+400]
  000a2	89 90 90 01 00
	00		 mov	 DWORD PTR [eax+400], edx

; 25   : 	for (int i = 0; i < length; i++)

  000a8	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000af	eb 09		 jmp	 SHORT $L57267
$L57268:
  000b1	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000b4	83 c0 01	 add	 eax, 1
  000b7	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L57267:
  000ba	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  000c0	3b 91 90 01 00
	00		 cmp	 edx, DWORD PTR [ecx+400]
  000c6	7d 56		 jge	 SHORT $L57269

; 26   : 		planeArray[i] = New SOL_Plane(*src.planeArray[i]);

  000c8	68 c8 9c 00 00	 push	 40136			; 00009cc8H
  000cd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d2	83 c4 04	 add	 esp, 4
  000d5	89 45 e8	 mov	 DWORD PTR $T57446[ebp], eax
  000d8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000df	83 7d e8 00	 cmp	 DWORD PTR $T57446[ebp], 0
  000e3	74 17		 je	 SHORT $L57447
  000e5	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  000eb	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000ee	52		 push	 edx
  000ef	8b 4d e8	 mov	 ecx, DWORD PTR $T57446[ebp]
  000f2	e8 00 00 00 00	 call	 ??0SOL_Plane@@QAE@ABV0@@Z ; SOL_Plane::SOL_Plane
  000f7	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  000fa	eb 07		 jmp	 SHORT $L57448
$L57447:
  000fc	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L57448:
  00103	8b 45 e0	 mov	 eax, DWORD PTR -32+[ebp]
  00106	89 45 ec	 mov	 DWORD PTR $T57445[ebp], eax
  00109	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00110	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00113	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00116	8b 45 ec	 mov	 eax, DWORD PTR $T57445[ebp]
  00119	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  0011c	eb 93		 jmp	 SHORT $L57268
$L57269:

; 27   : }

  0011e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00121	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00124	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L57449:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T57446[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L57454:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T57453
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0PlaneList@@QAE@ABV0@@Z ENDP				; PlaneList::PlaneList
PUBLIC	??4PlaneList@@QAEABV0@ABV0@@Z			; PlaneList::operator=
PUBLIC	?Clear@PlaneList@@QAEXXZ			; PlaneList::Clear
xdata$x	SEGMENT
$T57465	DD	019930520H
	DD	01H
	DD	FLAT:$T57467
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T57467	DD	0ffffffffH
	DD	FLAT:$L57463
xdata$x	ENDS
_TEXT	SEGMENT
$T57459 = -20
$T57460 = -24
__$EHRec$ = -12
_src$ = 8
_this$ = -28
_i$ = -16
??4PlaneList@@QAEABV0@ABV0@@Z PROC NEAR			; PlaneList::operator=

; 31   : {

  00131	55		 push	 ebp
  00132	8b ec		 mov	 ebp, esp
  00134	6a ff		 push	 -1
  00136	68 00 00 00 00	 push	 $L57466
  0013b	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00141	50		 push	 eax
  00142	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00149	83 ec 14	 sub	 esp, 20			; 00000014H
  0014c	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	Clear();

  0014f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00152	e8 00 00 00 00	 call	 ?Clear@PlaneList@@QAEXXZ ; PlaneList::Clear

; 33   : 	length = src.length;

  00157	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0015d	8b 91 90 01 00
	00		 mov	 edx, DWORD PTR [ecx+400]
  00163	89 90 90 01 00
	00		 mov	 DWORD PTR [eax+400], edx

; 34   : 	for (int i = 0; i < length; i++)

  00169	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00170	eb 09		 jmp	 SHORT $L57279
$L57280:
  00172	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00175	83 c0 01	 add	 eax, 1
  00178	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L57279:
  0017b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00181	3b 91 90 01 00
	00		 cmp	 edx, DWORD PTR [ecx+400]
  00187	7d 56		 jge	 SHORT $L57281

; 35   : 		planeArray[i] = New SOL_Plane(*src.planeArray[i]);

  00189	68 c8 9c 00 00	 push	 40136			; 00009cc8H
  0018e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00193	83 c4 04	 add	 esp, 4
  00196	89 45 e8	 mov	 DWORD PTR $T57460[ebp], eax
  00199	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001a0	83 7d e8 00	 cmp	 DWORD PTR $T57460[ebp], 0
  001a4	74 17		 je	 SHORT $L57461
  001a6	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  001ac	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  001af	52		 push	 edx
  001b0	8b 4d e8	 mov	 ecx, DWORD PTR $T57460[ebp]
  001b3	e8 00 00 00 00	 call	 ??0SOL_Plane@@QAE@ABV0@@Z ; SOL_Plane::SOL_Plane
  001b8	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  001bb	eb 07		 jmp	 SHORT $L57462
$L57461:
  001bd	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L57462:
  001c4	8b 45 e0	 mov	 eax, DWORD PTR -32+[ebp]
  001c7	89 45 ec	 mov	 DWORD PTR $T57459[ebp], eax
  001ca	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001d1	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  001d4	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  001d7	8b 45 ec	 mov	 eax, DWORD PTR $T57459[ebp]
  001da	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  001dd	eb 93		 jmp	 SHORT $L57280
$L57281:

; 36   : 
; 37   : 	return *this;

  001df	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]

; 38   : }

  001e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L57463:
  00015	8b 45 e8	 mov	 eax, DWORD PTR $T57460[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
  0001f	c3		 ret	 0
$L57466:
  00020	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T57465
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??4PlaneList@@QAEABV0@ABV0@@Z ENDP			; PlaneList::operator=
PUBLIC	?Id@SOL_Plane@@QBEJXZ				; SOL_Plane::Id
PUBLIC	?Priority@SOL_Plane@@QBEHXZ			; SOL_Plane::Priority
PUBLIC	?Add@PlaneList@@QAEHPAVSOL_Plane@@@Z		; PlaneList::Add
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
$SG57293 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Plis'
	DB	't.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_plane$ = 8
_this$ = -12
_i$ = -4
_j$ = -8
?Add@PlaneList@@QAEHPAVSOL_Plane@@@Z PROC NEAR		; PlaneList::Add

; 43   : {

  001f2	55		 push	 ebp
  001f3	8b ec		 mov	 ebp, esp
  001f5	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001f8	56		 push	 esi
  001f9	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 	int i, j;
; 45   : 	if (length == MAXPLANES)

  001fc	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  001ff	83 b8 90 01 00
	00 64		 cmp	 DWORD PTR [eax+400], 100 ; 00000064H
  00206	75 1a		 jne	 SHORT $L57292

; 46   : 		msgMgr->Fatal(SrcLoc, Msg_TooManyPlanes);

  00208	6a 60		 push	 96			; 00000060H
  0020a	6a 2e		 push	 46			; 0000002eH
  0020c	68 00 00 00 00	 push	 OFFSET FLAT:$SG57293
  00211	6a 61		 push	 97			; 00000061H
  00213	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00219	51		 push	 ecx
  0021a	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  0021f	83 c4 14	 add	 esp, 20			; 00000014H
$L57292:

; 47   : 
; 48   : 	for (i = 0; i < length; i++)  {

  00222	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00229	eb 09		 jmp	 SHORT $L57294
$L57295:
  0022b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0022e	83 c2 01	 add	 edx, 1
  00231	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L57294:
  00234	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00237	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0023a	3b 88 90 01 00
	00		 cmp	 ecx, DWORD PTR [eax+400]
  00240	7d 20		 jge	 SHORT $L57296

; 49   : 		if (planeArray[i]->Priority() >= plane->Priority())

  00242	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00245	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00248	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0024b	e8 00 00 00 00	 call	 ?Priority@SOL_Plane@@QBEHXZ ; SOL_Plane::Priority
  00250	8b f0		 mov	 esi, eax
  00252	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  00255	e8 00 00 00 00	 call	 ?Priority@SOL_Plane@@QBEHXZ ; SOL_Plane::Priority
  0025a	3b f0		 cmp	 esi, eax
  0025c	7c 02		 jl	 SHORT $L57297

; 50   : 			break;

  0025e	eb 02		 jmp	 SHORT $L57296
$L57297:

; 51   : 	}

  00260	eb c9		 jmp	 SHORT $L57295
$L57296:

; 52   : 
; 53   : 	for (j = length; j > i; j--)

  00262	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00265	8b 91 90 01 00
	00		 mov	 edx, DWORD PTR [ecx+400]
  0026b	89 55 f8	 mov	 DWORD PTR _j$[ebp], edx
  0026e	eb 09		 jmp	 SHORT $L57298
$L57299:
  00270	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00273	83 e8 01	 sub	 eax, 1
  00276	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$L57298:
  00279	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0027c	3b 4d fc	 cmp	 ecx, DWORD PTR _i$[ebp]
  0027f	7e 15		 jle	 SHORT $L57300

; 54   : 		planeArray[j] = planeArray[j - 1];

  00281	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00284	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00287	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0028a	8b 75 f4	 mov	 esi, DWORD PTR _this$[ebp]
  0028d	8b 4c 8e fc	 mov	 ecx, DWORD PTR [esi+ecx*4-4]
  00291	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  00294	eb da		 jmp	 SHORT $L57299
$L57300:

; 55   : 
; 56   : 	planeArray[i] = plane;

  00296	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00299	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0029c	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  0029f	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 57   : 	length++;

  002a2	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  002a5	8b 82 90 01 00
	00		 mov	 eax, DWORD PTR [edx+400]
  002ab	83 c0 01	 add	 eax, 1
  002ae	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  002b1	89 81 90 01 00
	00		 mov	 DWORD PTR [ecx+400], eax

; 58   : 	return plane->Id();

  002b7	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  002ba	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id

; 59   : }

  002bf	5e		 pop	 esi
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c2 04 00	 ret	 4
?Add@PlaneList@@QAEHPAVSOL_Plane@@@Z ENDP		; PlaneList::Add
_TEXT	ENDS
;	COMDAT ?Id@SOL_Plane@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Id@SOL_Plane@@QBEJXZ PROC NEAR				; SOL_Plane::Id, COMDAT

; 64   : 	long				Id() const					{return planeId;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?Id@SOL_Plane@@QBEJXZ ENDP				; SOL_Plane::Id
_TEXT	ENDS
;	COMDAT ?Priority@SOL_Plane@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Priority@SOL_Plane@@QBEHXZ PROC NEAR			; SOL_Plane::Priority, COMDAT

; 67   : 	int				Priority() const			{return priority;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Priority@SOL_Plane@@QBEHXZ ENDP			; SOL_Plane::Priority
_TEXT	ENDS
PUBLIC	?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ	; SOL_Plane::SIList
PUBLIC	?Delete@PlaneList@@QAEXH@Z			; PlaneList::Delete
EXTRN	?Clear@ScreenItemList@@QAEXXZ:NEAR		; ScreenItemList::Clear
_DATA	SEGMENT
	ORG $+2
$SG57306 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Plis'
	DB	't.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T57472 = -8
$T57473 = -12
_index$ = 8
_this$ = -16
_i$ = -4
?Delete@PlaneList@@QAEXH@Z PROC NEAR			; PlaneList::Delete

; 64   : {

  002c6	55		 push	 ebp
  002c7	8b ec		 mov	 ebp, esp
  002c9	83 ec 14	 sub	 esp, 20			; 00000014H
  002cc	56		 push	 esi
  002cd	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	if (index >= length)

  002d0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002d3	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  002d6	3b 88 90 01 00
	00		 cmp	 ecx, DWORD PTR [eax+400]
  002dc	7c 1a		 jl	 SHORT $L57305

; 66   : 		msgMgr->Fatal(SrcLoc, Msg_InvalidPlaneIndex);

  002de	6a 61		 push	 97			; 00000061H
  002e0	6a 42		 push	 66			; 00000042H
  002e2	68 00 00 00 00	 push	 OFFSET FLAT:$SG57306
  002e7	6a 61		 push	 97			; 00000061H
  002e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  002ef	52		 push	 edx
  002f0	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  002f5	83 c4 14	 add	 esp, 20			; 00000014H
$L57305:

; 67   : 
; 68   : 	planeArray[index]->SIList().Clear();

  002f8	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  002fb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002fe	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00301	e8 00 00 00 00	 call	 ?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ ; SOL_Plane::SIList
  00306	8b c8		 mov	 ecx, eax
  00308	e8 00 00 00 00	 call	 ?Clear@ScreenItemList@@QAEXXZ ; ScreenItemList::Clear

; 69   : 	delete planeArray[index];

  0030d	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00310	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00313	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00316	89 4d f4	 mov	 DWORD PTR $T57473[ebp], ecx
  00319	8b 55 f4	 mov	 edx, DWORD PTR $T57473[ebp]
  0031c	89 55 f8	 mov	 DWORD PTR $T57472[ebp], edx
  0031f	83 7d f8 00	 cmp	 DWORD PTR $T57472[ebp], 0
  00323	74 0f		 je	 SHORT $L57474
  00325	6a 01		 push	 1
  00327	8b 4d f8	 mov	 ecx, DWORD PTR $T57472[ebp]
  0032a	e8 00 00 00 00	 call	 ??_GSOL_Plane@@QAEPAXI@Z ; SOL_Plane::`scalar deleting destructor'
  0032f	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00332	eb 07		 jmp	 SHORT $L57475
$L57474:
  00334	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L57475:

; 70   : 	for (int i = index + 1; i < length; i++)

  0033b	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0033e	83 c0 01	 add	 eax, 1
  00341	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00344	eb 09		 jmp	 SHORT $L57310
$L57311:
  00346	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00349	83 c1 01	 add	 ecx, 1
  0034c	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L57310:
  0034f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00352	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00355	3b 82 90 01 00
	00		 cmp	 eax, DWORD PTR [edx+400]
  0035b	7d 15		 jge	 SHORT $L57312

; 71   : 		planeArray[i - 1] = planeArray[i];

  0035d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00360	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00363	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00366	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  00369	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  0036c	89 44 8a fc	 mov	 DWORD PTR [edx+ecx*4-4], eax
  00370	eb d4		 jmp	 SHORT $L57311
$L57312:

; 72   : 	length--;

  00372	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00375	8b 91 90 01 00
	00		 mov	 edx, DWORD PTR [ecx+400]
  0037b	83 ea 01	 sub	 edx, 1
  0037e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00381	89 90 90 01 00
	00		 mov	 DWORD PTR [eax+400], edx

; 73   : }

  00387	5e		 pop	 esi
  00388	8b e5		 mov	 esp, ebp
  0038a	5d		 pop	 ebp
  0038b	c2 04 00	 ret	 4
?Delete@PlaneList@@QAEXH@Z ENDP				; PlaneList::Delete
_TEXT	ENDS
;	COMDAT ?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ
_TEXT	SEGMENT
_this$ = -4
?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ PROC NEAR	; SOL_Plane::SIList, COMDAT

; 125  : 						SIList()						{return siArray;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 7c	 add	 eax, 124		; 0000007cH
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ ENDP	; SOL_Plane::SIList
_TEXT	ENDS
PUBLIC	?Search@PlaneList@@QBEHI@Z			; PlaneList::Search
_TEXT	SEGMENT
_id$ = 8
_this$ = -8
_i$ = -4
?Search@PlaneList@@QBEHI@Z PROC NEAR			; PlaneList::Search

; 78   : {

  0038e	55		 push	 ebp
  0038f	8b ec		 mov	 ebp, esp
  00391	83 ec 08	 sub	 esp, 8
  00394	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 79   : 	for (int i = 0; i < length; i++)  {

  00397	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0039e	eb 09		 jmp	 SHORT $L57318
$L57319:
  003a0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003a3	83 c0 01	 add	 eax, 1
  003a6	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L57318:
  003a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003ac	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  003af	3b 91 90 01 00
	00		 cmp	 edx, DWORD PTR [ecx+400]
  003b5	7d 1a		 jge	 SHORT $L57320

; 80   : 		if (planeArray[i]->Id() == id)

  003b7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003bd	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  003c0	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id
  003c5	3b 45 08	 cmp	 eax, DWORD PTR _id$[ebp]
  003c8	75 05		 jne	 SHORT $L57321

; 81   : 			return i;

  003ca	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003cd	eb 05		 jmp	 SHORT $L57316
$L57321:

; 82   : 	}

  003cf	eb cf		 jmp	 SHORT $L57319
$L57320:

; 83   : 	return -1;

  003d1	83 c8 ff	 or	 eax, -1
$L57316:

; 84   : }

  003d4	8b e5		 mov	 esp, ebp
  003d6	5d		 pop	 ebp
  003d7	c2 04 00	 ret	 4
?Search@PlaneList@@QBEHI@Z ENDP				; PlaneList::Search
$T57479 = -8
$T57480 = -12
_this$ = -16
_i$ = -4
?Clear@PlaneList@@QAEXXZ PROC NEAR			; PlaneList::Clear

; 88   : {

  003da	55		 push	 ebp
  003db	8b ec		 mov	 ebp, esp
  003dd	83 ec 14	 sub	 esp, 20			; 00000014H
  003e0	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 89   : 	for (int i = 0; i < length; i++)

  003e3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003ea	eb 09		 jmp	 SHORT $L57326
$L57327:
  003ec	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003ef	83 c0 01	 add	 eax, 1
  003f2	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L57326:
  003f5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003f8	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  003fb	3b 91 90 01 00
	00		 cmp	 edx, DWORD PTR [ecx+400]
  00401	7d 30		 jge	 SHORT $L57328

; 90   : 		delete planeArray[i];

  00403	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00406	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00409	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0040c	89 55 f4	 mov	 DWORD PTR $T57480[ebp], edx
  0040f	8b 45 f4	 mov	 eax, DWORD PTR $T57480[ebp]
  00412	89 45 f8	 mov	 DWORD PTR $T57479[ebp], eax
  00415	83 7d f8 00	 cmp	 DWORD PTR $T57479[ebp], 0
  00419	74 0f		 je	 SHORT $L57481
  0041b	6a 01		 push	 1
  0041d	8b 4d f8	 mov	 ecx, DWORD PTR $T57479[ebp]
  00420	e8 00 00 00 00	 call	 ??_GSOL_Plane@@QAEPAXI@Z ; SOL_Plane::`scalar deleting destructor'
  00425	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00428	eb 07		 jmp	 SHORT $L57482
$L57481:
  0042a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L57482:
  00431	eb b9		 jmp	 SHORT $L57327
$L57328:

; 91   : 	length = 0;

  00433	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00436	c7 81 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+400], 0

; 92   : }

  00440	8b e5		 mov	 esp, ebp
  00442	5d		 pop	 ebp
  00443	c3		 ret	 0
?Clear@PlaneList@@QAEXXZ ENDP				; PlaneList::Clear
_TEXT	ENDS
PUBLIC	?Sort@PlaneList@@QAEXXZ				; PlaneList::Sort
_TEXT	SEGMENT
_temp$57345 = -16
_this$ = -20
_i$ = -4
_swap$57338 = -12
_j$57339 = -8
?Sort@PlaneList@@QAEXXZ PROC NEAR			; PlaneList::Sort

; 109  : {

  00444	55		 push	 ebp
  00445	8b ec		 mov	 ebp, esp
  00447	83 ec 14	 sub	 esp, 20			; 00000014H
  0044a	56		 push	 esi
  0044b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 110  : 	for (int i = length - 1; i > 0; i--)  {

  0044e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00451	8b 88 90 01 00
	00		 mov	 ecx, DWORD PTR [eax+400]
  00457	83 e9 01	 sub	 ecx, 1
  0045a	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  0045d	eb 09		 jmp	 SHORT $L57335
$L57336:
  0045f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00462	83 ea 01	 sub	 edx, 1
  00465	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L57335:
  00468	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  0046c	0f 8e d3 00 00
	00		 jle	 $L57337

; 111  : 		int swap = False;

  00472	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _swap$57338[ebp], 0

; 112  : 
; 113  : 		for (int j = 0; j < i; j++)  {

  00479	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$57339[ebp], 0
  00480	eb 09		 jmp	 SHORT $L57340
$L57341:
  00482	8b 45 f8	 mov	 eax, DWORD PTR _j$57339[ebp]
  00485	83 c0 01	 add	 eax, 1
  00488	89 45 f8	 mov	 DWORD PTR _j$57339[ebp], eax
$L57340:
  0048b	8b 4d f8	 mov	 ecx, DWORD PTR _j$57339[ebp]
  0048e	3b 4d fc	 cmp	 ecx, DWORD PTR _i$[ebp]
  00491	0f 8d a1 00 00
	00		 jge	 $L57342

; 115  : 				(planeArray[j]->Priority() > planeArray[j+1]->Priority()) 
; 116  : 				||
; 117  : 				(
; 118  : 				(planeArray[j]->Priority() == planeArray[j+1]->Priority()) 
; 119  : 				&&
; 120  : 				(planeArray[j]->Id() > planeArray[j+1]->Id())
; 121  : 				)
; 122  : 				)  {

  00497	8b 55 f8	 mov	 edx, DWORD PTR _j$57339[ebp]
  0049a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0049d	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  004a0	e8 00 00 00 00	 call	 ?Priority@SOL_Plane@@QBEHXZ ; SOL_Plane::Priority
  004a5	8b f0		 mov	 esi, eax
  004a7	8b 4d f8	 mov	 ecx, DWORD PTR _j$57339[ebp]
  004aa	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  004ad	8b 4c 8a 04	 mov	 ecx, DWORD PTR [edx+ecx*4+4]
  004b1	e8 00 00 00 00	 call	 ?Priority@SOL_Plane@@QBEHXZ ; SOL_Plane::Priority
  004b6	3b f0		 cmp	 esi, eax
  004b8	7f 46		 jg	 SHORT $L57344
  004ba	8b 45 f8	 mov	 eax, DWORD PTR _j$57339[ebp]
  004bd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  004c0	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  004c3	e8 00 00 00 00	 call	 ?Priority@SOL_Plane@@QBEHXZ ; SOL_Plane::Priority
  004c8	8b f0		 mov	 esi, eax
  004ca	8b 55 f8	 mov	 edx, DWORD PTR _j$57339[ebp]
  004cd	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  004d0	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  004d4	e8 00 00 00 00	 call	 ?Priority@SOL_Plane@@QBEHXZ ; SOL_Plane::Priority
  004d9	3b f0		 cmp	 esi, eax
  004db	75 56		 jne	 SHORT $L57343
  004dd	8b 4d f8	 mov	 ecx, DWORD PTR _j$57339[ebp]
  004e0	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  004e3	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  004e6	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id
  004eb	8b f0		 mov	 esi, eax
  004ed	8b 45 f8	 mov	 eax, DWORD PTR _j$57339[ebp]
  004f0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  004f3	8b 4c 81 04	 mov	 ecx, DWORD PTR [ecx+eax*4+4]
  004f7	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id
  004fc	3b f0		 cmp	 esi, eax
  004fe	7e 33		 jle	 SHORT $L57343
$L57344:

; 123  : 				SOL_Plane* temp = planeArray[j+1];

  00500	8b 55 f8	 mov	 edx, DWORD PTR _j$57339[ebp]
  00503	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00506	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  0050a	89 4d f0	 mov	 DWORD PTR _temp$57345[ebp], ecx

; 124  : 				planeArray[j+1] = planeArray[j];

  0050d	8b 55 f8	 mov	 edx, DWORD PTR _j$57339[ebp]
  00510	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00513	8b 4d f8	 mov	 ecx, DWORD PTR _j$57339[ebp]
  00516	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00519	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  0051c	89 4c 90 04	 mov	 DWORD PTR [eax+edx*4+4], ecx

; 125  : 				planeArray[j] = temp;

  00520	8b 55 f8	 mov	 edx, DWORD PTR _j$57339[ebp]
  00523	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00526	8b 4d f0	 mov	 ecx, DWORD PTR _temp$57345[ebp]
  00529	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 126  : 				swap = True;

  0052c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _swap$57338[ebp], 1
$L57343:

; 128  : 		}

  00533	e9 4a ff ff ff	 jmp	 $L57341
$L57342:

; 129  : 		if (!swap)

  00538	83 7d f4 00	 cmp	 DWORD PTR _swap$57338[ebp], 0
  0053c	75 02		 jne	 SHORT $L57346

; 130  : 			break;

  0053e	eb 05		 jmp	 SHORT $L57337
$L57346:

; 131  : 	}

  00540	e9 1a ff ff ff	 jmp	 $L57336
$L57337:

; 132  : }

  00545	5e		 pop	 esi
  00546	8b e5		 mov	 esp, ebp
  00548	5d		 pop	 ebp
  00549	c3		 ret	 0
?Sort@PlaneList@@QAEXXZ ENDP				; PlaneList::Sort
_TEXT	ENDS
PUBLIC	?TopPlane@PlaneList@@QBEHXZ			; PlaneList::TopPlane
_TEXT	SEGMENT
_this$ = -4
?TopPlane@PlaneList@@QBEHXZ PROC NEAR			; PlaneList::TopPlane

; 136  : {

  0054a	55		 push	 ebp
  0054b	8b ec		 mov	 ebp, esp
  0054d	51		 push	 ecx
  0054e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 137  : 	if (length)

  00551	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00554	83 b8 90 01 00
	00 00		 cmp	 DWORD PTR [eax+400], 0
  0055b	74 17		 je	 SHORT $L57350

; 138  : 		return planeArray[length-1]->Priority();

  0055d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00560	8b 91 90 01 00
	00		 mov	 edx, DWORD PTR [ecx+400]
  00566	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00569	8b 4c 90 fc	 mov	 ecx, DWORD PTR [eax+edx*4-4]
  0056d	e8 00 00 00 00	 call	 ?Priority@SOL_Plane@@QBEHXZ ; SOL_Plane::Priority
  00572	eb 02		 jmp	 SHORT $L57351
$L57350:

; 140  : 		return 0;

  00574	33 c0		 xor	 eax, eax
$L57351:

; 141  : }

  00576	8b e5		 mov	 esp, ebp
  00578	5d		 pop	 ebp
  00579	c3		 ret	 0
?TopPlane@PlaneList@@QBEHXZ ENDP			; PlaneList::TopPlane
_TEXT	ENDS
PUBLIC	?TopSCIPlane@PlaneList@@QBEHXZ			; PlaneList::TopSCIPlane
_TEXT	SEGMENT
_this$ = -12
_topPri$ = -4
_i$57357 = -8
?TopSCIPlane@PlaneList@@QBEHXZ PROC NEAR		; PlaneList::TopSCIPlane

; 146  : {

  0057a	55		 push	 ebp
  0057b	8b ec		 mov	 ebp, esp
  0057d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00580	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 147  :    // This method returns the highest priority
; 148  :    // for a non_Window plane (Window planes begin
; 149  :    // at priority PLANEPRIORITYSTART.
; 150  :    int topPri = 0;

  00583	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _topPri$[ebp], 0

; 151  : 	if (length) {

  0058a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0058d	83 b8 90 01 00
	00 00		 cmp	 DWORD PTR [eax+400], 0
  00594	74 4c		 je	 SHORT $L57360

; 152  : 	   for (int i = 0;i < length;i++)  {

  00596	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$57357[ebp], 0
  0059d	eb 09		 jmp	 SHORT $L57358
$L57359:
  0059f	8b 4d f8	 mov	 ecx, DWORD PTR _i$57357[ebp]
  005a2	83 c1 01	 add	 ecx, 1
  005a5	89 4d f8	 mov	 DWORD PTR _i$57357[ebp], ecx
$L57358:
  005a8	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  005ab	8b 45 f8	 mov	 eax, DWORD PTR _i$57357[ebp]
  005ae	3b 82 90 01 00
	00		 cmp	 eax, DWORD PTR [edx+400]
  005b4	7d 2c		 jge	 SHORT $L57360

; 153  :          if (planeArray[i]->Priority() < PLANEPRIORITYSTART)

  005b6	8b 4d f8	 mov	 ecx, DWORD PTR _i$57357[ebp]
  005b9	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  005bc	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  005bf	e8 00 00 00 00	 call	 ?Priority@SOL_Plane@@QBEHXZ ; SOL_Plane::Priority
  005c4	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  005c9	7d 13		 jge	 SHORT $L57361

; 154  :             topPri = planeArray[i]->Priority();

  005cb	8b 45 f8	 mov	 eax, DWORD PTR _i$57357[ebp]
  005ce	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  005d1	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  005d4	e8 00 00 00 00	 call	 ?Priority@SOL_Plane@@QBEHXZ ; SOL_Plane::Priority
  005d9	89 45 fc	 mov	 DWORD PTR _topPri$[ebp], eax

; 155  :          else

  005dc	eb 02		 jmp	 SHORT $L57362
$L57361:

; 156  :             break;

  005de	eb 02		 jmp	 SHORT $L57360
$L57362:

; 157  :       }

  005e0	eb bd		 jmp	 SHORT $L57359
$L57360:

; 159  : 	return topPri;

  005e2	8b 45 fc	 mov	 eax, DWORD PTR _topPri$[ebp]

; 160  : }

  005e5	8b e5		 mov	 esp, ebp
  005e7	5d		 pop	 ebp
  005e8	c3		 ret	 0
?TopSCIPlane@PlaneList@@QBEHXZ ENDP			; PlaneList::TopSCIPlane
_TEXT	ENDS
END

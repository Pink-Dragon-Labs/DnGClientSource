	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Window.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@MemoryMgr@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9SOL_Point@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmpty@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Offset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Scale@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScaleInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Id@SOL_Plane@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPicNum@SOL_Plane@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FontMgr@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PointSize@FontMgr@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetColor@FontMgr@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetMode@FontMgr@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFont@FontMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetXRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetYRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetText@FontMgr@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PointerDevice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPointerDevice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Mouse@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSwiftInfo@SOL_Mouse@@UBEHPAH000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSwift@SOL_Mouse@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Vibrate@SOL_Mouse@@UBEXHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetHotRectangleStatus@SOL_Mouse@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Mouse@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@TextID@@QAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScrollEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScrollEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScrollEntryID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@FakeScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@FakeScrollEntryID@@QAEXIW4ReservedHandle@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@FakeScrollEntryID@@QAEXVMemID@@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScrollEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScrollEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScrollEntryID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScrollEntryID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Window@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Window@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GEventWindow@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCIScrollWindow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSCIScrollWindow@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScrollWindowID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScrollWindowID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScrollWindowID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@FakeScrollWindowID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScrollWindowID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScrollWindowID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TextID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7EventWindow@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SCIScrollWindow@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PointerDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SOL_Mouse@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SOL_Window@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??0SCIScrollWindow@@QAE@AAVSOL_Rect@@VSOL_Point@@HGGGFFH@Z ; SCIScrollWindow::SCIScrollWindow
PUBLIC	??2@YAPAXIG@Z					; operator new
PUBLIC	?Get@FakeScrollWindowID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ; FakeScrollWindowID::Get
PUBLIC	??0SOL_Point@@QAE@ABV0@@Z			; SOL_Point::SOL_Point
PUBLIC	?Get@ScrollWindowID@@QAEXAAVSOL_Rect@@VSOL_Point@@HGGGFFH@Z ; ScrollWindowID::Get
_TEXT	SEGMENT
$T63882 = -4
_theWindow$ = 8
_thePos$ = 12
_thePlaneID$ = 20
_theFore$ = 24
_theBack$ = 28
_theFont$ = 32
_theMode$ = 36
_theBorder$ = 40
_theSize$ = 44
_this$ = -12
?Get@ScrollWindowID@@QAEXAAVSOL_Rect@@VSOL_Point@@HGGGFFH@Z PROC NEAR ; ScrollWindowID::Get

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	FakeScrollWindowID::Get(sizeof(SCIScrollWindow), LOCKED | LOCKEDNOSAVE);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	68 00 00 40 00	 push	 4194304			; 00400000H
  00016	68 b0 00 00 00	 push	 176			; 000000b0H
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?Get@FakeScrollWindowID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ; FakeScrollWindowID::Get

; 31   : 	new(handle) SCIScrollWindow(theWindow,	thePos, thePlaneID, theFore,
; 32   : 									theBack,theFont,theMode,theBorder,theSize);

  00023	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00026	66 8b 08	 mov	 cx, WORD PTR [eax]
  00029	51		 push	 ecx
  0002a	68 b0 00 00 00	 push	 176			; 000000b0H
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXIG@Z		; operator new
  00034	83 c4 08	 add	 esp, 8
  00037	89 45 fc	 mov	 DWORD PTR $T63882[ebp], eax
  0003a	83 7d fc 00	 cmp	 DWORD PTR $T63882[ebp], 0
  0003e	74 40		 je	 SHORT $L63884
  00040	8b 55 2c	 mov	 edx, DWORD PTR _theSize$[ebp]
  00043	52		 push	 edx
  00044	66 8b 45 28	 mov	 ax, WORD PTR _theBorder$[ebp]
  00048	50		 push	 eax
  00049	66 8b 4d 24	 mov	 cx, WORD PTR _theMode$[ebp]
  0004d	51		 push	 ecx
  0004e	66 8b 55 20	 mov	 dx, WORD PTR _theFont$[ebp]
  00052	52		 push	 edx
  00053	66 8b 45 1c	 mov	 ax, WORD PTR _theBack$[ebp]
  00057	50		 push	 eax
  00058	66 8b 4d 18	 mov	 cx, WORD PTR _theFore$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR _thePlaneID$[ebp]
  00060	52		 push	 edx
  00061	83 ec 08	 sub	 esp, 8
  00064	8b cc		 mov	 ecx, esp
  00066	8d 45 0c	 lea	 eax, DWORD PTR _thePos$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _theWindow$[ebp]
  00072	51		 push	 ecx
  00073	8b 4d fc	 mov	 ecx, DWORD PTR $T63882[ebp]
  00076	e8 00 00 00 00	 call	 ??0SCIScrollWindow@@QAE@AAVSOL_Rect@@VSOL_Point@@HGGGFFH@Z ; SCIScrollWindow::SCIScrollWindow
  0007b	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
  0007e	eb 07		 jmp	 SHORT $L63885
$L63884:
  00080	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR -16+[ebp], 0
$L63885:

; 33   : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 28 00	 ret	 40			; 00000028H
?Get@ScrollWindowID@@QAEXAAVSOL_Rect@@VSOL_Point@@HGGGFFH@Z ENDP ; ScrollWindowID::Get
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
EXTRN	_memMgr:DWORD
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT
_handle$ = 12
??2@YAPAXIG@Z PROC NEAR					; operator new, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 	return memMgr->GetAddr(handle);

  00003	66 8b 45 0c	 mov	 ax, WORD PTR _handle$[ebp]
  00007	50		 push	 eax
  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  0000e	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 188  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??2@YAPAXIG@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??0SOL_Point@@QAE@ABV0@@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 22   : 	SOL_Point(const SOL_Point& p) : x(p.x), y(p.y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0SOL_Point@@QAE@ABV0@@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
PUBLIC	?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get
;	COMDAT ?Get@FakeScrollWindowID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_size$ = 8
_attrs$ = 12
_num$ = 16
_client$ = 20
_initChar$ = 24
_h$ = 28
_this$ = -4
?Get@FakeScrollWindowID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; FakeScrollWindowID::Get, COMDAT

; 261  : FakeTemplateID(FakeScrollWindowID, SCIScrollWindow, MemWindow)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 1c	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 18	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 14	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _attrs$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _size$[ebp]
  0001e	52		 push	 edx
  0001f	6a 52		 push	 82			; 00000052H
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 18 00	 ret	 24			; 00000018H
?Get@FakeScrollWindowID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; FakeScrollWindowID::Get
_TEXT	ENDS
EXTRN	?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z:NEAR ; MemoryMgr::Alloc
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_a$ = 16
_num$ = 20
_client$ = 24
_initChar$ = 28
_h$ = 32
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; MemID::Get, COMDAT

; 42   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		handle = memMgr->Alloc(type | a, size, num, client, initChar, h);

  00007	8b 45 20	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 1c	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0001e	0b 55 10	 or	 edx, DWORD PTR _a$[ebp]
  00021	52		 push	 edx
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00028	e8 00 00 00 00	 call	 ?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemoryMgr::Alloc
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	66 89 01	 mov	 WORD PTR [ecx], ax

; 44   : 	}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 1c 00	 ret	 28			; 0000001cH
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; MemID::Get
_TEXT	ENDS
PUBLIC	?Free@MemID@@QAEXXZ				; MemID::Free
PUBLIC	??DFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator*
PUBLIC	?Free@ScrollWindowID@@QAEXXZ			; ScrollWindowID::Free
_TEXT	SEGMENT
_this$ = -4
?Free@ScrollWindowID@@QAEXXZ PROC NEAR			; ScrollWindowID::Free

; 37   : {

  0008d	55		 push	 ebp
  0008e	8b ec		 mov	 ebp, esp
  00090	83 ec 08	 sub	 esp, 8
  00093	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	if(handle)

  00096	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00099	33 c9		 xor	 ecx, ecx
  0009b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0009e	85 c9		 test	 ecx, ecx
  000a0	74 17		 je	 SHORT $L62901

; 39   : 		(**this)->~SCIScrollWindow();

  000a2	6a 00		 push	 0
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	e8 00 00 00 00	 call	 ??DFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator*
  000ac	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  000af	8b 55 f8	 mov	 edx, DWORD PTR -8+[ebp]
  000b2	8b 02		 mov	 eax, DWORD PTR [edx]
  000b4	8b 4d f8	 mov	 ecx, DWORD PTR -8+[ebp]
  000b7	ff 10		 call	 DWORD PTR [eax]
$L62901:

; 40   : 	FakeScrollWindowID::Free();

  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 41   : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
?Free@ScrollWindowID@@QAEXXZ ENDP			; ScrollWindowID::Free
_TEXT	ENDS
EXTRN	?Free@MemoryMgr@@QAEXG@Z:NEAR			; MemoryMgr::Free
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Free@MemID@@QAEXXZ PROC NEAR				; MemID::Free, COMDAT

; 32   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 		if (handle) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 1a		 je	 SHORT $L54501

; 34   : 			memMgr->Free(handle);

  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	66 8b 02	 mov	 ax, WORD PTR [edx]
  00019	50		 push	 eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00020	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 35   : 			handle = 0;

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
$L54501:

; 37   : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?Free@MemID@@QAEXXZ ENDP				; MemID::Free
_TEXT	ENDS
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
;	COMDAT ??DFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ
_TEXT	SEGMENT
_this$ = -4
??DFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ PROC NEAR ; FakeScrollWindowID::operator*, COMDAT

; 261  : FakeTemplateID(FakeScrollWindowID, SCIScrollWindow, MemWindow)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??DFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ENDP	; FakeScrollWindowID::operator*
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
PUBLIC	??0SOL_Window@@QAE@AAVSOL_Rect@@VSOL_Point@@HPADGGGFF2GGGH@Z ; SOL_Window::SOL_Window
PUBLIC	?Hide@SOL_Window@@UAEXXZ			; SOL_Window::Hide
PUBLIC	?Move@SOL_Window@@UAEXVSOL_Point@@@Z		; SOL_Window::Move
PUBLIC	?ResizeWindow@SOL_Window@@UAEXAAVSOL_Rect@@@Z	; SOL_Window::ResizeWindow
PUBLIC	?SetText@SOL_Window@@UAEXPADHH@Z		; SOL_Window::SetText
PUBLIC	?Show@SOL_Window@@UAEXXZ			; SOL_Window::Show
PUBLIC	?PageUp@SOL_Window@@UAEXXZ			; SOL_Window::PageUp
PUBLIC	?PageDown@SOL_Window@@UAEXXZ			; SOL_Window::PageDown
PUBLIC	?Home@SOL_Window@@UAEXXZ			; SOL_Window::Home
PUBLIC	?End@SOL_Window@@UAEXXZ				; SOL_Window::End
PUBLIC	?UpArrow@SOL_Window@@UAEXXZ			; SOL_Window::UpArrow
PUBLIC	?DownArrow@SOL_Window@@UAEXXZ			; SOL_Window::DownArrow
PUBLIC	?ReDrawText@SOL_Window@@UAEXXZ			; SOL_Window::ReDrawText
PUBLIC	?GetLineIndices@SOL_Window@@MAEXXZ		; SOL_Window::GetLineIndices
PUBLIC	??_7SOL_Window@@6B@				; SOL_Window::`vftable'
PUBLIC	??_GSOL_Window@@UAEPAXI@Z			; SOL_Window::`scalar deleting destructor'
PUBLIC	??_ESOL_Window@@UAEPAXI@Z			; SOL_Window::`vector deleting destructor'
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
PUBLIC	??AMemID@@QBEAADI@Z				; MemID::operator[]
PUBLIC	??0SOL_Point@@QAE@XZ				; SOL_Point::SOL_Point
PUBLIC	??4SOL_Point@@QAEAAV0@ABV0@@Z			; SOL_Point::operator=
PUBLIC	?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z	; GraphicsMgr::GetPlaneNext
PUBLIC	??0FontMgr@@QAE@G@Z				; FontMgr::FontMgr
PUBLIC	?PointSize@FontMgr@@QAEHH@Z			; FontMgr::PointSize
PUBLIC	??0SOL_Rect@@QAE@XZ				; SOL_Rect::SOL_Rect
PUBLIC	?GetXRes@FontMgr@@QBEHXZ			; FontMgr::GetXRes
PUBLIC	?GetYRes@FontMgr@@QBEHXZ			; FontMgr::GetYRes
PUBLIC	?Xlen@SOL_Rect@@QBEHXZ				; SOL_Rect::Xlen
PUBLIC	?Ylen@SOL_Rect@@QBEHXZ				; SOL_Rect::Ylen
PUBLIC	?Scale@SOL_Rect@@QAEXHHHH@Z			; SOL_Rect::Scale
PUBLIC	??4SOL_Rect@@QAEAAV0@ABV0@@Z			; SOL_Rect::operator=
PUBLIC	??DTextID@@QAEPADXZ				; TextID::operator*
PUBLIC	?Get@TextID@@QAEXII@Z				; TextID::Get
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	_strlen:NEAR
EXTRN	__imp__strncpy:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
EXTRN	?TitledFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHH1HHHH@Z:NEAR ; FontMgr::TitledFBM
EXTRN	?SetFont@FontMgr@@QAEXH@Z:NEAR			; FontMgr::SetFont
EXTRN	?TextCount@FontMgr@@QAEHVMemID@@HAAVSOL_Rect@@H@Z:NEAR ; FontMgr::TextCount
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
EXTRN	??0TextID@@QAE@XZ:NEAR				; TextID::TextID
EXTRN	?Add@TextID@@QAEXPBD@Z:NEAR			; TextID::Add
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
;	COMDAT ??_7SOL_Window@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Window.cpp
CONST	SEGMENT
??_7SOL_Window@@6B@ DD FLAT:??_ESOL_Window@@UAEPAXI@Z	; SOL_Window::`vftable'
	DD	FLAT:?Hide@SOL_Window@@UAEXXZ
	DD	FLAT:?Move@SOL_Window@@UAEXVSOL_Point@@@Z
	DD	FLAT:?ResizeWindow@SOL_Window@@UAEXAAVSOL_Rect@@@Z
	DD	FLAT:?SetText@SOL_Window@@UAEXPADHH@Z
	DD	FLAT:?Show@SOL_Window@@UAEXXZ
	DD	FLAT:?PageUp@SOL_Window@@UAEXXZ
	DD	FLAT:?PageDown@SOL_Window@@UAEXXZ
	DD	FLAT:?Home@SOL_Window@@UAEXXZ
	DD	FLAT:?End@SOL_Window@@UAEXXZ
	DD	FLAT:?UpArrow@SOL_Window@@UAEXXZ
	DD	FLAT:?DownArrow@SOL_Window@@UAEXXZ
	DD	FLAT:?ReDrawText@SOL_Window@@UAEXXZ
	DD	FLAT:?GetLineIndices@SOL_Window@@MAEXXZ
CONST	ENDS
_DATA	SEGMENT
$SG62920 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Wind'
	DB	'ow.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T63912	DD	019930520H
	DD	01H
	DD	FLAT:$T63915
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63915	DD	0ffffffffH
	DD	FLAT:$L63908
xdata$x	ENDS
_TEXT	SEGMENT
$T63896 = -24
$T63897 = -28
$T63900 = -32
$T63901 = -36
$T63902 = -40
$T63903 = -44
$T63904 = -48
$T63905 = -52
$T63906 = -56
$T63907 = -60
__$EHRec$ = -12
_theWindow$ = 8
_thePos$ = 12
_thePlaneID$ = 20
_theText$ = 24
_theFore$ = 28
_theBack$ = 32
_theFont$ = 36
_theMode$ = 40
_theBorder$ = 44
_theTitle$ = 48
_theTitleFore$ = 52
_theTitleBack$ = 56
_theTitleFont$ = 60
_makeVisible$ = 64
_this$ = -64
_titleSize$ = -16
_skip$ = -20
??0SOL_Window@@QAE@AAVSOL_Rect@@VSOL_Point@@HPADGGGFF2GGGH@Z PROC NEAR ; SOL_Window::SOL_Window

; 59   : {

  000c5	55		 push	 ebp
  000c6	8b ec		 mov	 ebp, esp
  000c8	6a ff		 push	 -1
  000ca	68 00 00 00 00	 push	 $L63913
  000cf	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  000d5	50		 push	 eax
  000d6	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  000dd	83 ec 38	 sub	 esp, 56			; 00000038H
  000e0	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx
  000e3	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	83 c1 08	 add	 ecx, 8
  000e9	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  000ee	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	83 c1 0a	 add	 ecx, 10			; 0000000aH
  000f4	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  000f9	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	83 c1 10	 add	 ecx, 16			; 00000010H
  000ff	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00104	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	83 c1 20	 add	 ecx, 32			; 00000020H
  0010a	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  0010f	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	83 c1 48	 add	 ecx, 72			; 00000048H
  00115	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  0011a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  00124	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	83 c1 50	 add	 ecx, 80			; 00000050H
  0012a	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  0012f	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	83 c1 60	 add	 ecx, 96			; 00000060H
  00135	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  0013a	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	83 c1 74	 add	 ecx, 116		; 00000074H
  00140	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  00145	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0014b	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  00150	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00153	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00159	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0015e	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  00167	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0016c	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00175	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0017a	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	81 c1 8a 00 00
	00		 add	 ecx, 138		; 0000008aH
  00183	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00188	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0018b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7SOL_Window@@6B@ ; SOL_Window::`vftable'

; 60   : 
; 61   : 	if (!theTitle)

  00191	83 7d 30 00	 cmp	 DWORD PTR _theTitle$[ebp], 0
  00195	75 1a		 jne	 SHORT $L62919

; 62   : 		msgMgr->Fatal(SrcLoc,Msg_NoWindowTitle);

  00197	6a 5d		 push	 93			; 0000005dH
  00199	6a 3e		 push	 62			; 0000003eH
  0019b	68 00 00 00 00	 push	 OFFSET FLAT:$SG62920
  001a0	6a 61		 push	 97			; 00000061H
  001a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  001a8	52		 push	 edx
  001a9	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  001ae	83 c4 14	 add	 esp, 20			; 00000014H
$L62919:

; 63   : 
; 64   : 	// Make copies of the character strings
; 65   : 	text.Add(theText);

  001b1	8b 45 18	 mov	 eax, DWORD PTR _theText$[ebp]
  001b4	50		 push	 eax
  001b5	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  001b8	83 c1 0a	 add	 ecx, 10			; 0000000aH
  001bb	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXPBD@Z	; TextID::Add

; 66   : 	title.Add(theTitle);

  001c0	8b 4d 30	 mov	 ecx, DWORD PTR _theTitle$[ebp]
  001c3	51		 push	 ecx
  001c4	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	83 c1 20	 add	 ecx, 32			; 00000020H
  001ca	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXPBD@Z	; TextID::Add

; 67   :  
; 68   : 	// Get a font manager for this window
; 69   : 	fntMgr = New FontMgr(theTitleFont);

  001cf	68 58 02 00 00	 push	 600			; 00000258H
  001d4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001d9	83 c4 04	 add	 esp, 4
  001dc	89 45 e4	 mov	 DWORD PTR $T63897[ebp], eax
  001df	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001e6	83 7d e4 00	 cmp	 DWORD PTR $T63897[ebp], 0
  001ea	74 12		 je	 SHORT $L63898
  001ec	66 8b 55 3c	 mov	 dx, WORD PTR _theTitleFont$[ebp]
  001f0	52		 push	 edx
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR $T63897[ebp]
  001f4	e8 00 00 00 00	 call	 ??0FontMgr@@QAE@G@Z	; FontMgr::FontMgr
  001f9	89 45 bc	 mov	 DWORD PTR -68+[ebp], eax
  001fc	eb 07		 jmp	 SHORT $L63899
$L63898:
  001fe	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR -68+[ebp], 0
$L63899:
  00205	8b 45 bc	 mov	 eax, DWORD PTR -68+[ebp]
  00208	89 45 e8	 mov	 DWORD PTR $T63896[ebp], eax
  0020b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00212	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00215	8b 55 e8	 mov	 edx, DWORD PTR $T63896[ebp]
  00218	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 70   : 
; 71   : 	// Get resolution
; 72   : 	xRes = fntMgr->GetXRes();

  0021b	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0021e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00221	e8 00 00 00 00	 call	 ?GetXRes@FontMgr@@QBEHXZ ; FontMgr::GetXRes
  00226	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00229	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 73   : 	yRes = fntMgr->GetYRes();

  0022c	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0022f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00232	e8 00 00 00 00	 call	 ?GetYRes@FontMgr@@QBEHXZ ; FontMgr::GetYRes
  00237	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0023a	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 74   : 	
; 75   : 	// Determine the title size
; 76   : 	int titleSize = fntMgr->PointSize(False) + 3;

  0023d	6a 00		 push	 0
  0023f	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00242	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00245	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  0024a	83 c0 03	 add	 eax, 3
  0024d	89 45 f0	 mov	 DWORD PTR _titleSize$[ebp], eax

; 77   : 
; 78   : 	visible = False;

  00250	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00253	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 79   : 	startChar = 0;

  0025a	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0025d	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 80   : 	startLine = 1;

  00264	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00267	c7 42 24 01 00
	00 00		 mov	 DWORD PTR [edx+36], 1

; 81   : 
; 82   : 	plane = graphMgr->GetPlaneNext(thePlaneID);

  0026e	8b 45 14	 mov	 eax, DWORD PTR _thePlaneID$[ebp]
  00271	50		 push	 eax
  00272	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00278	e8 00 00 00 00	 call	 ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::GetPlaneNext
  0027d	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00280	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 83   : 	pos = thePos;

  00283	8d 55 0c	 lea	 edx, DWORD PTR _thePos$[ebp]
  00286	52		 push	 edx
  00287	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0028a	83 c1 74	 add	 ecx, 116		; 00000074H
  0028d	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 84   : 	int skip = 0;

  00292	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _skip$[ebp], 0

; 85   : 	// Determine a skip color that will not be hit
; 86   : 	for (skip=0;skip<255;++skip) {

  00299	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _skip$[ebp], 0
  002a0	eb 09		 jmp	 SHORT $L62927
$L62928:
  002a2	8b 45 ec	 mov	 eax, DWORD PTR _skip$[ebp]
  002a5	83 c0 01	 add	 eax, 1
  002a8	89 45 ec	 mov	 DWORD PTR _skip$[ebp], eax
$L62927:
  002ab	81 7d ec ff 00
	00 00		 cmp	 DWORD PTR _skip$[ebp], 255 ; 000000ffH
  002b2	7d 20		 jge	 SHORT $L62929

; 89   : 			(skip != theFore)		  &&
; 90   : 			(skip != theBack)
; 91   : 			)

  002b4	8b 4d 1c	 mov	 ecx, DWORD PTR _theFore$[ebp]
  002b7	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002bd	39 4d ec	 cmp	 DWORD PTR _skip$[ebp], ecx
  002c0	74 10		 je	 SHORT $L62930
  002c2	8b 55 20	 mov	 edx, DWORD PTR _theBack$[ebp]
  002c5	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  002cb	39 55 ec	 cmp	 DWORD PTR _skip$[ebp], edx
  002ce	74 02		 je	 SHORT $L62930

; 92   : 			break;

  002d0	eb 02		 jmp	 SHORT $L62929
$L62930:

; 93   : 	}

  002d2	eb ce		 jmp	 SHORT $L62928
$L62929:

; 94   : 
; 95   : 	// Save the parameters
; 96   : 	scaleWindow = window = theWindow;

  002d4	8b 45 08	 mov	 eax, DWORD PTR _theWindow$[ebp]
  002d7	50		 push	 eax
  002d8	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  002db	83 c1 50	 add	 ecx, 80			; 00000050H
  002de	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=
  002e3	50		 push	 eax
  002e4	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  002e7	83 c1 60	 add	 ecx, 96			; 00000060H
  002ea	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 97   :    scaleWindow.Scale(xRes,SCIRESX,yRes,SCIRESY);

  002ef	68 e0 01 00 00	 push	 480			; 000001e0H
  002f4	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  002f7	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  002fa	52		 push	 edx
  002fb	68 80 02 00 00	 push	 640			; 00000280H
  00300	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00303	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00306	51		 push	 ecx
  00307	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0030a	83 c1 60	 add	 ecx, 96			; 00000060H
  0030d	e8 00 00 00 00	 call	 ?Scale@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Scale

; 98   :    border = theBorder;

  00312	0f bf 55 2c	 movsx	 edx, WORD PTR _theBorder$[ebp]
  00316	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00319	89 90 98 00 00
	00		 mov	 DWORD PTR [eax+152], edx

; 99   : 
; 100  : 	textBox.A.x = 2;

  0031f	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00322	c7 41 10 02 00
	00 00		 mov	 DWORD PTR [ecx+16], 2

; 101  : 	textBox.A.y = titleSize + 1;

  00329	8b 55 f0	 mov	 edx, DWORD PTR _titleSize$[ebp]
  0032c	83 c2 01	 add	 edx, 1
  0032f	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00332	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 102  : 	textBox.B.x = scaleWindow.Xlen() - 3;

  00335	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00338	83 c1 60	 add	 ecx, 96			; 00000060H
  0033b	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  00340	83 e8 03	 sub	 eax, 3
  00343	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00346	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 103  : 	textBox.B.y = scaleWindow.Ylen() - 3;

  00349	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0034c	83 c1 60	 add	 ecx, 96			; 00000060H
  0034f	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  00354	83 e8 03	 sub	 eax, 3
  00357	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0035a	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 104  : 
; 105  : 	// Determine the string to draw
; 106  :    
; 107  : 	font = theFont;

  0035d	8b 45 24	 mov	 eax, DWORD PTR _theFont$[ebp]
  00360	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00365	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00368	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 108  : 	fore = theFore;

  0036e	8b 55 1c	 mov	 edx, DWORD PTR _theFore$[ebp]
  00371	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00377	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0037a	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 109  : 	mode = theMode;

  00380	0f bf 4d 28	 movsx	 ecx, WORD PTR _theMode$[ebp]
  00384	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00387	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 110  : 	fntMgr->SetFont(theFont);

  0038d	8b 45 24	 mov	 eax, DWORD PTR _theFont$[ebp]
  00390	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00395	50		 push	 eax
  00396	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00399	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0039c	e8 00 00 00 00	 call	 ?SetFont@FontMgr@@QAEXH@Z ; FontMgr::SetFont

; 111  : 	pointSize = fntMgr->PointSize(False);

  003a1	6a 00		 push	 0
  003a3	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  003a6	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  003a9	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  003ae	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  003b1	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax

; 112  : 	lastChar = fntMgr->TextCount(text,0,textBox,False) - 1;

  003b7	6a 00		 push	 0
  003b9	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  003bc	83 c2 10	 add	 edx, 16			; 00000010H
  003bf	52		 push	 edx
  003c0	6a 00		 push	 0
  003c2	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  003c5	83 c0 0a	 add	 eax, 10			; 0000000aH
  003c8	51		 push	 ecx
  003c9	8b cc		 mov	 ecx, esp
  003cb	89 65 e0	 mov	 DWORD PTR $T63900[ebp], esp
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  003d4	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  003d7	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  003da	e8 00 00 00 00	 call	 ?TextCount@FontMgr@@QAEHVMemID@@HAAVSOL_Rect@@H@Z ; FontMgr::TextCount
  003df	83 e8 01	 sub	 eax, 1
  003e2	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  003e5	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 113  : 
; 114  : 	textSize = strlen(*text);

  003e8	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  003eb	83 c1 0a	 add	 ecx, 10			; 0000000aH
  003ee	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  003f3	50		 push	 eax
  003f4	e8 00 00 00 00	 call	 _strlen
  003f9	83 c4 04	 add	 esp, 4
  003fc	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  003ff	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 115  : 	workText.Get(textSize+1);

  00402	68 00 02 01 00	 push	 66048			; 00010200H
  00407	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0040a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0040d	83 c0 01	 add	 eax, 1
  00410	50		 push	 eax
  00411	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00414	83 c1 48	 add	 ecx, 72			; 00000048H
  00417	e8 00 00 00 00	 call	 ?Get@TextID@@QAEXII@Z	; TextID::Get

; 116  : 	strncpy(*workText,*text,lastChar+1);

  0041c	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0041f	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00422	83 c2 01	 add	 edx, 1
  00425	52		 push	 edx
  00426	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00429	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0042c	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00431	50		 push	 eax
  00432	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00435	83 c1 48	 add	 ecx, 72			; 00000048H
  00438	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0043d	50		 push	 eax
  0043e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00444	83 c4 0c	 add	 esp, 12			; 0000000cH

; 117  : 	workText[lastChar+1] = 0;

  00447	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0044a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0044d	83 c1 01	 add	 ecx, 1
  00450	51		 push	 ecx
  00451	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00454	83 c1 48	 add	 ecx, 72			; 00000048H
  00457	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  0045c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 118  : 
; 119  : 	// Get the line indices for the text
; 120  : 	lineIndicesID = (MemID)0;

  0045f	6a 00		 push	 0
  00461	8d 4d dc	 lea	 ecx, DWORD PTR $T63901[ebp]
  00464	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00469	66 8b 10	 mov	 dx, WORD PTR [eax]
  0046c	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0046f	66 89 90 84 00
	00 00		 mov	 WORD PTR [eax+132], dx

; 121  : 	fontIndicesID = (MemID)0;

  00476	6a 00		 push	 0
  00478	8d 4d d8	 lea	 ecx, DWORD PTR $T63902[ebp]
  0047b	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00480	66 8b 08	 mov	 cx, WORD PTR [eax]
  00483	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00486	66 89 8a 86 00
	00 00		 mov	 WORD PTR [edx+134], cx

; 122  : 	colorIndicesID = (MemID)0;

  0048d	6a 00		 push	 0
  0048f	8d 4d d4	 lea	 ecx, DWORD PTR $T63903[ebp]
  00492	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00497	66 8b 00	 mov	 ax, WORD PTR [eax]
  0049a	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0049d	66 89 81 88 00
	00 00		 mov	 WORD PTR [ecx+136], ax

; 123  : 	modeIndicesID = (MemID)0;

  004a4	6a 00		 push	 0
  004a6	8d 4d d0	 lea	 ecx, DWORD PTR $T63904[ebp]
  004a9	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  004ae	66 8b 10	 mov	 dx, WORD PTR [eax]
  004b1	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  004b4	66 89 90 8a 00
	00 00		 mov	 WORD PTR [eax+138], dx

; 124  : 
; 125  : 	GetLineIndices();

  004bb	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  004be	e8 00 00 00 00	 call	 ?GetLineIndices@SOL_Window@@MAEXXZ ; SOL_Window::GetLineIndices

; 126  : 		
; 127  : 	// Create a fontBitmap
; 128  : 	fontBitmap = fntMgr->TitledFBM(scaleWindow.Xlen(),
; 129  : 											 scaleWindow.Ylen(),
; 130  : 											 textBox,
; 131  : 											 workText,
; 132  : 											 theFore,
; 133  : 											 theBack,
; 134  : 												skip,
; 135  : 											 theFont,
; 136  : 											 theMode,
; 137  : 											theBorder,
; 138  : 											 title,
; 139  : 											 theTitleFore,
; 140  : 											 theTitleBack,
; 141  : 											 theTitleFont,
; 142  : 											 False);

  004c3	6a 00		 push	 0
  004c5	8b 4d 3c	 mov	 ecx, DWORD PTR _theTitleFont$[ebp]
  004c8	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  004ce	51		 push	 ecx
  004cf	8b 55 38	 mov	 edx, DWORD PTR _theTitleBack$[ebp]
  004d2	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  004d8	52		 push	 edx
  004d9	8b 45 34	 mov	 eax, DWORD PTR _theTitleFore$[ebp]
  004dc	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  004e1	50		 push	 eax
  004e2	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  004e5	83 c1 20	 add	 ecx, 32			; 00000020H
  004e8	51		 push	 ecx
  004e9	8b d4		 mov	 edx, esp
  004eb	89 65 cc	 mov	 DWORD PTR $T63905[ebp], esp
  004ee	51		 push	 ecx
  004ef	8b ca		 mov	 ecx, edx
  004f1	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  004f6	0f bf 45 2c	 movsx	 eax, WORD PTR _theBorder$[ebp]
  004fa	50		 push	 eax
  004fb	0f bf 4d 28	 movsx	 ecx, WORD PTR _theMode$[ebp]
  004ff	51		 push	 ecx
  00500	8b 55 24	 mov	 edx, DWORD PTR _theFont$[ebp]
  00503	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00509	52		 push	 edx
  0050a	8b 45 ec	 mov	 eax, DWORD PTR _skip$[ebp]
  0050d	50		 push	 eax
  0050e	8b 4d 20	 mov	 ecx, DWORD PTR _theBack$[ebp]
  00511	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00517	51		 push	 ecx
  00518	8b 55 1c	 mov	 edx, DWORD PTR _theFore$[ebp]
  0051b	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00521	52		 push	 edx
  00522	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00525	83 c0 48	 add	 eax, 72			; 00000048H
  00528	51		 push	 ecx
  00529	8b cc		 mov	 ecx, esp
  0052b	89 65 c8	 mov	 DWORD PTR $T63906[ebp], esp
  0052e	50		 push	 eax
  0052f	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00534	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00537	83 c1 10	 add	 ecx, 16			; 00000010H
  0053a	51		 push	 ecx
  0053b	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0053e	83 c1 60	 add	 ecx, 96			; 00000060H
  00541	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  00546	50		 push	 eax
  00547	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0054a	83 c1 60	 add	 ecx, 96			; 00000060H
  0054d	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  00552	50		 push	 eax
  00553	8d 55 c4	 lea	 edx, DWORD PTR $T63907[ebp]
  00556	52		 push	 edx
  00557	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0055a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0055d	e8 00 00 00 00	 call	 ?TitledFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHH1HHHH@Z ; FontMgr::TitledFBM
  00562	66 8b 08	 mov	 cx, WORD PTR [eax]
  00565	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00568	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 143  : 	// Show if visible
; 144  : 	if (makeVisible) Show();

  0056c	83 7d 40 00	 cmp	 DWORD PTR _makeVisible$[ebp], 0
  00570	74 08		 je	 SHORT $L62943
  00572	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00575	e8 00 00 00 00	 call	 ?Show@SOL_Window@@UAEXXZ ; SOL_Window::Show
$L62943:

; 145  : }

  0057a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0057d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00580	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00587	8b e5		 mov	 esp, ebp
  00589	5d		 pop	 ebp
  0058a	c2 3c 00	 ret	 60			; 0000003cH
_TEXT	ENDS
text$x	SEGMENT
$L63908:
  00000	8b 45 e4	 mov	 eax, DWORD PTR $T63897[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L63913:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63912
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0SOL_Window@@QAE@AAVSOL_Rect@@VSOL_Point@@HPADGGGFF2GGGH@Z ENDP ; SOL_Window::SOL_Window
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT
_s$ = 8
_this$ = -4
??AMemID@@QBEAADI@Z PROC NEAR				; MemID::operator[], COMDAT

; 103  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 104  : 		return *((char*) memMgr->GetAddr(handle) + s);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00019	03 45 08	 add	 eax, DWORD PTR _s$[ebp]

; 105  : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??AMemID@@QBEAADI@Z ENDP				; MemID::operator[]
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Point@@QAE@XZ PROC NEAR				; SOL_Point::SOL_Point, COMDAT

; 20   : 	SOL_Point() : x(DefaultCoord), y(DefaultCoord) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 ef cd ab
	89		 mov	 DWORD PTR [eax], -1985229329 ; 89abcdefH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 ef cd
	ab 89		 mov	 DWORD PTR [ecx+4], -1985229329 ; 89abcdefH
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Point@@QAE@XZ ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??4SOL_Point@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Point::operator=, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	x = p.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 119  : 	y = p.y;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 120  : 	return *this;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 121  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4SOL_Point@@QAEAAV0@ABV0@@Z ENDP			; SOL_Point::operator=
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Rect@@QAE@XZ PROC NEAR				; SOL_Rect::SOL_Rect, COMDAT

; 13   : 	SOL_Rect()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Rect@@QAE@XZ ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Xlen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Xlen, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	return B.x - A.x + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	83 c0 01	 add	 eax, 1

; 155  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?Xlen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Xlen
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Ylen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Ylen, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 	return B.y - A.y + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	83 c0 01	 add	 eax, 1

; 163  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Ylen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Ylen
_TEXT	ENDS
;	COMDAT ?Scale@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT
_nx$ = 8
_dx$ = 12
_ny$ = 16
_dy$ = 20
_this$ = -4
?Scale@SOL_Rect@@QAEXHHHH@Z PROC NEAR			; SOL_Rect::Scale, COMDAT

; 339  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 340  : 	A.x = A.x * nx / dx;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	0f af 45 08	 imul	 eax, DWORD PTR _nx$[ebp]
  00010	99		 cdq
  00011	f7 7d 0c	 idiv	 DWORD PTR _dx$[ebp]
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 341  : 	B.x = B.x * nx / dx;

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	0f af 45 08	 imul	 eax, DWORD PTR _nx$[ebp]
  00023	99		 cdq
  00024	f7 7d 0c	 idiv	 DWORD PTR _dx$[ebp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 342  : 	A.y = A.y * ny / dy;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00033	0f af 45 10	 imul	 eax, DWORD PTR _ny$[ebp]
  00037	99		 cdq
  00038	f7 7d 14	 idiv	 DWORD PTR _dy$[ebp]
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 343  : 	B.y = B.y * ny / dy;

  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00047	0f af 45 10	 imul	 eax, DWORD PTR _ny$[ebp]
  0004b	99		 cdq
  0004c	f7 7d 14	 idiv	 DWORD PTR _dy$[ebp]
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 344  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 10 00	 ret	 16			; 00000010H
?Scale@SOL_Rect@@QAEXHHHH@Z ENDP			; SOL_Rect::Scale
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4SOL_Rect@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Rect::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??4SOL_Rect@@QAEAAV0@ABV0@@Z ENDP			; SOL_Rect::operator=
_TEXT	ENDS
EXTRN	?GetPlane@Screen@@QAEPAVSOL_Plane@@H@Z:NEAR	; Screen::GetPlane
;	COMDAT ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z
_TEXT	SEGMENT
_planeId$ = 8
_this$ = -4
?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z PROC NEAR ; GraphicsMgr::GetPlaneNext, COMDAT

; 69   : 	SOL_Plane* 	GetPlaneNext(int planeId) 			{return next.GetPlane(planeId);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _planeId$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e8 00 00 00 00	 call	 ?GetPlane@Screen@@QAEPAVSOL_Plane@@H@Z ; Screen::GetPlane
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ENDP	; GraphicsMgr::GetPlaneNext
_TEXT	ENDS
PUBLIC	??0Bitmap@@QAE@XZ				; Bitmap::Bitmap
EXTRN	?BuildFontTable@FontMgr@@IAEXH@Z:NEAR		; FontMgr::BuildFontTable
;	COMDAT ??0FontMgr@@QAE@G@Z
_TEXT	SEGMENT
_theFont$ = 8
_this$ = -4
??0FontMgr@@QAE@G@Z PROC NEAR				; FontMgr::FontMgr, COMDAT

; 45   : 	FontMgr(ushort theFont = systemFont) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 14	 add	 ecx, 20			; 00000014H
  00018	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 24	 add	 ecx, 36			; 00000024H
  00023	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 30	 add	 ecx, 48			; 00000030H
  0002e	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@XZ	; Bitmap::Bitmap
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	83 c1 4e	 add	 ecx, 78			; 0000004eH
  00039	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 46   : 		font = theFont+1;	// if font==theFont BuildFontTable just returns

  0003e	8b 45 08	 mov	 eax, DWORD PTR _theFont$[ebp]
  00041	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00046	83 c0 01	 add	 eax, 1
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	66 89 41 28	 mov	 WORD PTR [ecx+40], ax

; 47   : 		BuildFontTable(theFont);

  00050	8b 55 08	 mov	 edx, DWORD PTR _theFont$[ebp]
  00053	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00059	52		 push	 edx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?BuildFontTable@FontMgr@@IAEXH@Z ; FontMgr::BuildFontTable

; 48   : 	}

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
??0FontMgr@@QAE@G@Z ENDP				; FontMgr::FontMgr
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Bitmap@@QAE@XZ PROC NEAR				; Bitmap::Bitmap, COMDAT

; 130  : 	Bitmap() 													{view = loop = cel = 0; type = tMem;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0Bitmap@@QAE@XZ ENDP					; Bitmap::Bitmap
_TEXT	ENDS
EXTRN	?yRes@FontMgr@@1HA:DWORD			; FontMgr::yRes
;	COMDAT ?PointSize@FontMgr@@QAEHH@Z
_TEXT	SEGMENT
_scale$ = 8
_this$ = -4
?PointSize@FontMgr@@QAEHH@Z PROC NEAR			; FontMgr::PointSize, COMDAT

; 110  : 	int 				PointSize(Bool scale = True) {if (scale) return (pointSize * SCIRESY + yRes - 1) / yRes; return pointSize;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	83 7d 08 00	 cmp	 DWORD PTR _scale$[ebp], 0
  0000b	74 22		 je	 SHORT $L58137
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	33 c9		 xor	 ecx, ecx
  00012	66 8b 48 4c	 mov	 cx, WORD PTR [eax+76]
  00016	69 c9 e0 01 00
	00		 imul	 ecx, 480		; 000001e0H
  0001c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?yRes@FontMgr@@1HA ; FontMgr::yRes
  00022	8d 44 11 ff	 lea	 eax, DWORD PTR [ecx+edx-1]
  00026	99		 cdq
  00027	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?yRes@FontMgr@@1HA ; FontMgr::yRes
  0002d	eb 0b		 jmp	 SHORT $L58136
$L58137:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	33 c9		 xor	 ecx, ecx
  00034	66 8b 48 4c	 mov	 cx, WORD PTR [eax+76]
  00038	8b c1		 mov	 eax, ecx
$L58136:
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?PointSize@FontMgr@@QAEHH@Z ENDP			; FontMgr::PointSize
_TEXT	ENDS
EXTRN	?xRes@FontMgr@@1HA:DWORD			; FontMgr::xRes
;	COMDAT ?GetXRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetXRes@FontMgr@@QBEHXZ PROC NEAR			; FontMgr::GetXRes, COMDAT

; 121  : 	int 				GetXRes() const {return xRes;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?xRes@FontMgr@@1HA ; FontMgr::xRes
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetXRes@FontMgr@@QBEHXZ ENDP				; FontMgr::GetXRes
_TEXT	ENDS
;	COMDAT ?GetYRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetYRes@FontMgr@@QBEHXZ PROC NEAR			; FontMgr::GetYRes, COMDAT

; 122  : 	int 				GetYRes() const {return yRes;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?yRes@FontMgr@@1HA ; FontMgr::yRes
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetYRes@FontMgr@@QBEHXZ ENDP				; FontMgr::GetYRes
_TEXT	ENDS
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\textid.hpp
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4
??DTextID@@QAEPADXZ PROC NEAR				; TextID::operator*, COMDAT

; 24   : 	char	*operator *() { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return handle ? (char *)MemID::operator*() : ""; 

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	33 c9		 xor	 ecx, ecx
  0000e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0d		 je	 SHORT $L63935
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0001d	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00020	eb 07		 jmp	 SHORT $L63936
$L63935:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L63936:
  00029	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 26   : 	}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??DTextID@@QAEPADXZ ENDP				; TextID::operator*
_TEXT	ENDS
;	COMDAT ?Get@TextID@@QAEXII@Z
_TEXT	SEGMENT
_size$ = 8
_attrs$ = 12
_this$ = -4
?Get@TextID@@QAEXII@Z PROC NEAR				; TextID::Get, COMDAT

; 34   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 		MemID::Get(MemText, size, attrs);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _attrs$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  00016	51		 push	 ecx
  00017	6a 33		 push	 51			; 00000033H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 36   : 	}

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?Get@TextID@@QAEXII@Z ENDP				; TextID::Get
_TEXT	ENDS
PUBLIC	??1SOL_Window@@UAE@XZ				; SOL_Window::~SOL_Window
;	COMDAT ??_GSOL_Window@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GSOL_Window@@UAEPAXI@Z PROC NEAR			; SOL_Window::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1SOL_Window@@UAE@XZ	; SOL_Window::~SOL_Window
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L62584
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L62584:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GSOL_Window@@UAEPAXI@Z ENDP				; SOL_Window::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0SOL_Window@@QAE@AAVSOL_Rect@@VSOL_Point@@HPADGGGFFH@Z ; SOL_Window::SOL_Window
EXTRN	?BuildFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHHHH@Z:NEAR ; FontMgr::BuildFBM
EXTRN	?TextCount@FontMgr@@QAEHVMemID@@HHAAVSOL_Rect@@H@Z:NEAR ; FontMgr::TextCount
xdata$x	SEGMENT
$T63950	DD	019930520H
	DD	01H
	DD	FLAT:$T63952
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63952	DD	0ffffffffH
	DD	FLAT:$L63948
xdata$x	ENDS
_TEXT	SEGMENT
$T63941 = -20
$T63942 = -24
$T63945 = -28
$T63946 = -32
$T63947 = -36
__$EHRec$ = -12
_theWindow$ = 8
_thePos$ = 12
_thePlaneID$ = 20
_theText$ = 24
_theFore$ = 28
_theBack$ = 32
_theFont$ = 36
_theMode$ = 40
_theBorder$ = 44
_makeVisible$ = 48
_this$ = -40
_skip$ = -16
??0SOL_Window@@QAE@AAVSOL_Rect@@VSOL_Point@@HPADGGGFFH@Z PROC NEAR ; SOL_Window::SOL_Window

; 159  : {

  0058d	55		 push	 ebp
  0058e	8b ec		 mov	 ebp, esp
  00590	6a ff		 push	 -1
  00592	68 00 00 00 00	 push	 $L63951
  00597	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0059d	50		 push	 eax
  0059e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  005a5	83 ec 20	 sub	 esp, 32			; 00000020H
  005a8	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  005ab	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  005ae	83 c1 08	 add	 ecx, 8
  005b1	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  005b6	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  005b9	83 c1 0a	 add	 ecx, 10			; 0000000aH
  005bc	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  005c1	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  005c4	83 c1 10	 add	 ecx, 16			; 00000010H
  005c7	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  005cc	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  005cf	83 c1 20	 add	 ecx, 32			; 00000020H
  005d2	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  005d7	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  005da	83 c1 48	 add	 ecx, 72			; 00000048H
  005dd	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  005e2	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  005e5	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  005ec	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  005ef	83 c1 50	 add	 ecx, 80			; 00000050H
  005f2	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  005f7	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  005fa	83 c1 60	 add	 ecx, 96			; 00000060H
  005fd	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00602	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00605	83 c1 74	 add	 ecx, 116		; 00000074H
  00608	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0060d	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00610	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00613	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  00618	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0061b	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00621	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00626	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00629	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  0062f	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00634	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00637	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0063d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00642	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00645	81 c1 8a 00 00
	00		 add	 ecx, 138		; 0000008aH
  0064b	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00650	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00653	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7SOL_Window@@6B@ ; SOL_Window::`vftable'

; 160  : 	// Make a copy of the character string
; 161  : 	text.Add(theText);

  00659	8b 55 18	 mov	 edx, DWORD PTR _theText$[ebp]
  0065c	52		 push	 edx
  0065d	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00660	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00663	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXPBD@Z	; TextID::Add

; 162  :  
; 163  : 	// Get a font manager for this window
; 164  : 	fntMgr = New FontMgr(theFont);

  00668	68 58 02 00 00	 push	 600			; 00000258H
  0066d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00672	83 c4 04	 add	 esp, 4
  00675	89 45 e8	 mov	 DWORD PTR $T63942[ebp], eax
  00678	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0067f	83 7d e8 00	 cmp	 DWORD PTR $T63942[ebp], 0
  00683	74 12		 je	 SHORT $L63943
  00685	66 8b 45 24	 mov	 ax, WORD PTR _theFont$[ebp]
  00689	50		 push	 eax
  0068a	8b 4d e8	 mov	 ecx, DWORD PTR $T63942[ebp]
  0068d	e8 00 00 00 00	 call	 ??0FontMgr@@QAE@G@Z	; FontMgr::FontMgr
  00692	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  00695	eb 07		 jmp	 SHORT $L63944
$L63943:
  00697	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR -44+[ebp], 0
$L63944:
  0069e	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  006a1	89 4d ec	 mov	 DWORD PTR $T63941[ebp], ecx
  006a4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006ab	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  006ae	8b 45 ec	 mov	 eax, DWORD PTR $T63941[ebp]
  006b1	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 165  : 
; 166  : 	// Get resolution
; 167  : 	xRes = fntMgr->GetXRes();

  006b4	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  006b7	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  006ba	e8 00 00 00 00	 call	 ?GetXRes@FontMgr@@QBEHXZ ; FontMgr::GetXRes
  006bf	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  006c2	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 168  : 	yRes = fntMgr->GetYRes();

  006c5	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  006c8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  006cb	e8 00 00 00 00	 call	 ?GetYRes@FontMgr@@QBEHXZ ; FontMgr::GetYRes
  006d0	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  006d3	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 169  : 
; 170  : 	visible = False;

  006d6	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  006d9	c7 42 44 00 00
	00 00		 mov	 DWORD PTR [edx+68], 0

; 171  : 	startChar = 0;

  006e0	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  006e3	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 172  : 	startLine = 1;

  006ea	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  006ed	c7 41 24 01 00
	00 00		 mov	 DWORD PTR [ecx+36], 1

; 173  : 
; 174  : 	// Save the parameters 
; 175  : 	plane = graphMgr->GetPlaneNext(thePlaneID);

  006f4	8b 55 14	 mov	 edx, DWORD PTR _thePlaneID$[ebp]
  006f7	52		 push	 edx
  006f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  006fe	e8 00 00 00 00	 call	 ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::GetPlaneNext
  00703	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00706	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 176  : 	pos = thePos;

  00709	8d 55 0c	 lea	 edx, DWORD PTR _thePos$[ebp]
  0070c	52		 push	 edx
  0070d	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00710	83 c1 74	 add	 ecx, 116		; 00000074H
  00713	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 177  : 	scaleWindow = window = theWindow;

  00718	8b 45 08	 mov	 eax, DWORD PTR _theWindow$[ebp]
  0071b	50		 push	 eax
  0071c	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0071f	83 c1 50	 add	 ecx, 80			; 00000050H
  00722	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=
  00727	50		 push	 eax
  00728	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0072b	83 c1 60	 add	 ecx, 96			; 00000060H
  0072e	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 178  :    scaleWindow.Scale(xRes,SCIRESX,yRes,SCIRESY);

  00733	68 e0 01 00 00	 push	 480			; 000001e0H
  00738	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0073b	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0073e	52		 push	 edx
  0073f	68 80 02 00 00	 push	 640			; 00000280H
  00744	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00747	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0074a	51		 push	 ecx
  0074b	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0074e	83 c1 60	 add	 ecx, 96			; 00000060H
  00751	e8 00 00 00 00	 call	 ?Scale@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Scale

; 179  :    border = theBorder;

  00756	0f bf 55 2c	 movsx	 edx, WORD PTR _theBorder$[ebp]
  0075a	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0075d	89 90 98 00 00
	00		 mov	 DWORD PTR [eax+152], edx

; 180  : 	textBox.A.x = 2;

  00763	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00766	c7 41 10 02 00
	00 00		 mov	 DWORD PTR [ecx+16], 2

; 181  : 	textBox.A.y = 2;

  0076d	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00770	c7 42 14 02 00
	00 00		 mov	 DWORD PTR [edx+20], 2

; 182  : 	textBox.B.x = scaleWindow.Xlen() - 3;

  00777	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0077a	83 c1 60	 add	 ecx, 96			; 00000060H
  0077d	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  00782	83 e8 03	 sub	 eax, 3
  00785	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00788	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 183  : 	textBox.B.y = scaleWindow.Ylen() - 3;

  0078b	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0078e	83 c1 60	 add	 ecx, 96			; 00000060H
  00791	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  00796	83 e8 03	 sub	 eax, 3
  00799	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0079c	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 184  : 
; 185  : 	// Determine the string to draw
; 186  : 	font = theFont;

  0079f	8b 45 24	 mov	 eax, DWORD PTR _theFont$[ebp]
  007a2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  007a7	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  007aa	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 187  : 	fore = theFore;

  007b0	8b 55 1c	 mov	 edx, DWORD PTR _theFore$[ebp]
  007b3	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  007b9	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  007bc	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 188  : 	mode = theMode;

  007c2	0f bf 4d 28	 movsx	 ecx, WORD PTR _theMode$[ebp]
  007c6	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  007c9	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 189  : 	lastChar = fntMgr->TextCount(text,0,theFont,textBox,False) - 1;

  007cf	6a 00		 push	 0
  007d1	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  007d4	83 c0 10	 add	 eax, 16			; 00000010H
  007d7	50		 push	 eax
  007d8	8b 4d 24	 mov	 ecx, DWORD PTR _theFont$[ebp]
  007db	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  007e1	51		 push	 ecx
  007e2	6a 00		 push	 0
  007e4	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  007e7	83 c2 0a	 add	 edx, 10			; 0000000aH
  007ea	51		 push	 ecx
  007eb	8b cc		 mov	 ecx, esp
  007ed	89 65 e4	 mov	 DWORD PTR $T63945[ebp], esp
  007f0	52		 push	 edx
  007f1	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  007f6	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  007f9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  007fc	e8 00 00 00 00	 call	 ?TextCount@FontMgr@@QAEHVMemID@@HHAAVSOL_Rect@@H@Z ; FontMgr::TextCount
  00801	83 e8 01	 sub	 eax, 1
  00804	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00807	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 190  : 	pointSize = fntMgr->PointSize(False);

  0080a	6a 00		 push	 0
  0080c	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0080f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00812	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  00817	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0081a	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax

; 191  : 
; 192  : 	textSize = strlen(*text);

  00820	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00823	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00826	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0082b	50		 push	 eax
  0082c	e8 00 00 00 00	 call	 _strlen
  00831	83 c4 04	 add	 esp, 4
  00834	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00837	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 193  : 	workText.Get(strlen(*text)+1);

  0083a	68 00 02 01 00	 push	 66048			; 00010200H
  0083f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00842	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00845	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0084a	50		 push	 eax
  0084b	e8 00 00 00 00	 call	 _strlen
  00850	83 c4 04	 add	 esp, 4
  00853	83 c0 01	 add	 eax, 1
  00856	50		 push	 eax
  00857	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0085a	83 c1 48	 add	 ecx, 72			; 00000048H
  0085d	e8 00 00 00 00	 call	 ?Get@TextID@@QAEXII@Z	; TextID::Get

; 194  : 	strncpy(*workText,*text,lastChar+1);

  00862	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00865	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00868	83 c1 01	 add	 ecx, 1
  0086b	51		 push	 ecx
  0086c	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0086f	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00872	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00877	50		 push	 eax
  00878	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0087b	83 c1 48	 add	 ecx, 72			; 00000048H
  0087e	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00883	50		 push	 eax
  00884	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0088a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 195  : 	workText[lastChar+1] = 0;

  0088d	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00890	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00893	83 c0 01	 add	 eax, 1
  00896	50		 push	 eax
  00897	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0089a	83 c1 48	 add	 ecx, 72			; 00000048H
  0089d	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  008a2	c6 00 00	 mov	 BYTE PTR [eax], 0

; 196  : 
; 197  : 	// Get the line indices for the text
; 198  : 	GetLineIndices();

  008a5	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  008a8	e8 00 00 00 00	 call	 ?GetLineIndices@SOL_Window@@MAEXXZ ; SOL_Window::GetLineIndices

; 199  : 	int skip = 0;

  008ad	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _skip$[ebp], 0

; 200  : 	// Determine a skip color that will not be hit
; 201  : 	for (skip=0;skip<255;++skip) {

  008b4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _skip$[ebp], 0
  008bb	eb 09		 jmp	 SHORT $L62963
$L62964:
  008bd	8b 4d f0	 mov	 ecx, DWORD PTR _skip$[ebp]
  008c0	83 c1 01	 add	 ecx, 1
  008c3	89 4d f0	 mov	 DWORD PTR _skip$[ebp], ecx
$L62963:
  008c6	81 7d f0 ff 00
	00 00		 cmp	 DWORD PTR _skip$[ebp], 255 ; 000000ffH
  008cd	7d 1f		 jge	 SHORT $L62965

; 204  : 			(skip != theFore)		  &&
; 205  : 			(skip != theBack)
; 206  : 			)

  008cf	8b 55 1c	 mov	 edx, DWORD PTR _theFore$[ebp]
  008d2	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  008d8	39 55 f0	 cmp	 DWORD PTR _skip$[ebp], edx
  008db	74 0f		 je	 SHORT $L62966
  008dd	8b 45 20	 mov	 eax, DWORD PTR _theBack$[ebp]
  008e0	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  008e5	39 45 f0	 cmp	 DWORD PTR _skip$[ebp], eax
  008e8	74 02		 je	 SHORT $L62966

; 207  : 			break;

  008ea	eb 02		 jmp	 SHORT $L62965
$L62966:

; 208  : 	}

  008ec	eb cf		 jmp	 SHORT $L62964
$L62965:

; 209  : 
; 210  : 	// Create a fontBitmap
; 211  : 	fontBitmap = fntMgr->BuildFBM(scaleWindow.Xlen(),
; 212  : 								  			scaleWindow.Ylen(),
; 213  : 								  			textBox,
; 214  : 								  			workText,
; 215  : 								  			theFore,
; 216  : 								  			theBack,
; 217  : 								  			skip,
; 218  : 								  			theFont,
; 219  : 								  			theMode,
; 220  :                                  border,
; 221  : 								  			0,False);

  008ee	6a 00		 push	 0
  008f0	6a 00		 push	 0
  008f2	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  008f5	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  008fb	52		 push	 edx
  008fc	0f bf 45 28	 movsx	 eax, WORD PTR _theMode$[ebp]
  00900	50		 push	 eax
  00901	8b 4d 24	 mov	 ecx, DWORD PTR _theFont$[ebp]
  00904	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0090a	51		 push	 ecx
  0090b	8b 55 f0	 mov	 edx, DWORD PTR _skip$[ebp]
  0090e	52		 push	 edx
  0090f	8b 45 20	 mov	 eax, DWORD PTR _theBack$[ebp]
  00912	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00917	50		 push	 eax
  00918	8b 4d 1c	 mov	 ecx, DWORD PTR _theFore$[ebp]
  0091b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00921	51		 push	 ecx
  00922	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00925	83 c2 48	 add	 edx, 72			; 00000048H
  00928	51		 push	 ecx
  00929	8b cc		 mov	 ecx, esp
  0092b	89 65 e0	 mov	 DWORD PTR $T63946[ebp], esp
  0092e	52		 push	 edx
  0092f	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00934	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00937	83 c0 10	 add	 eax, 16			; 00000010H
  0093a	50		 push	 eax
  0093b	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0093e	83 c1 60	 add	 ecx, 96			; 00000060H
  00941	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  00946	50		 push	 eax
  00947	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0094a	83 c1 60	 add	 ecx, 96			; 00000060H
  0094d	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  00952	50		 push	 eax
  00953	8d 4d dc	 lea	 ecx, DWORD PTR $T63947[ebp]
  00956	51		 push	 ecx
  00957	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0095a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0095d	e8 00 00 00 00	 call	 ?BuildFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHHHH@Z ; FontMgr::BuildFBM
  00962	66 8b 00	 mov	 ax, WORD PTR [eax]
  00965	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00968	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 222  : 	// Show if visible
; 223  : 	if (makeVisible) Show();

  0096c	83 7d 30 00	 cmp	 DWORD PTR _makeVisible$[ebp], 0
  00970	74 08		 je	 SHORT $L62969
  00972	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00975	e8 00 00 00 00	 call	 ?Show@SOL_Window@@UAEXXZ ; SOL_Window::Show
$L62969:

; 224  : }

  0097a	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0097d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00980	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00987	8b e5		 mov	 esp, ebp
  00989	5d		 pop	 ebp
  0098a	c2 2c 00	 ret	 44			; 0000002cH
_TEXT	ENDS
text$x	SEGMENT
$L63948:
  00015	8b 45 e8	 mov	 eax, DWORD PTR $T63942[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
  0001f	c3		 ret	 0
$L63951:
  00020	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63950
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0SOL_Window@@QAE@AAVSOL_Rect@@VSOL_Point@@HPADGGGFFH@Z ENDP ; SOL_Window::SOL_Window
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
_TEXT	SEGMENT
$T63954 = -4
_this$ = -8
??1SOL_Window@@UAE@XZ PROC NEAR				; SOL_Window::~SOL_Window

; 227  : {

  0098d	55		 push	 ebp
  0098e	8b ec		 mov	 ebp, esp
  00990	83 ec 08	 sub	 esp, 8
  00993	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00996	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00999	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7SOL_Window@@6B@ ; SOL_Window::`vftable'

; 228  : 	if (visible) Hide();

  0099f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009a2	83 79 44 00	 cmp	 DWORD PTR [ecx+68], 0
  009a6	74 08		 je	 SHORT $L62973
  009a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009ab	e8 00 00 00 00	 call	 ?Hide@SOL_Window@@UAEXXZ ; SOL_Window::Hide
$L62973:

; 229  : 	memMgr->Free(fontBitmap);

  009b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009b3	83 c1 08	 add	 ecx, 8
  009b6	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  009bb	50		 push	 eax
  009bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  009c2	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 230  : 	memMgr->Free(workText);

  009c7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009ca	83 c1 48	 add	 ecx, 72			; 00000048H
  009cd	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  009d2	50		 push	 eax
  009d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  009d9	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 231  : 	memMgr->Free(text);

  009de	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009e1	83 c1 0a	 add	 ecx, 10			; 0000000aH
  009e4	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  009e9	50		 push	 eax
  009ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  009f0	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 232  : 	memMgr->Free(lineIndicesID);

  009f5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009f8	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  009fe	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00a03	50		 push	 eax
  00a04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00a0a	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 233  : 	memMgr->Free(fontIndicesID);

  00a0f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a12	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  00a18	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00a1d	50		 push	 eax
  00a1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00a24	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 234  : 	if ((int) title) memMgr->Free(title);

  00a29	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a2c	83 c1 20	 add	 ecx, 32			; 00000020H
  00a2f	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00a34	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00a39	85 c0		 test	 eax, eax
  00a3b	74 17		 je	 SHORT $L62975
  00a3d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a40	83 c1 20	 add	 ecx, 32			; 00000020H
  00a43	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00a48	50		 push	 eax
  00a49	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00a4f	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free
$L62975:

; 235  : 	delete fntMgr;

  00a54	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a57	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00a5a	89 45 fc	 mov	 DWORD PTR $T63954[ebp], eax
  00a5d	8b 4d fc	 mov	 ecx, DWORD PTR $T63954[ebp]
  00a60	51		 push	 ecx
  00a61	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00a66	83 c4 04	 add	 esp, 4

; 236  : }

  00a69	8b e5		 mov	 esp, ebp
  00a6b	5d		 pop	 ebp
  00a6c	c3		 ret	 0
??1SOL_Window@@UAE@XZ ENDP				; SOL_Window::~SOL_Window
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
PUBLIC	??0Bitmap@@QAE@VMemID@@@Z			; Bitmap::Bitmap
PUBLIC	?Id@SOL_Plane@@QBEJXZ				; SOL_Plane::Id
PUBLIC	?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::AddScreenItem
PUBLIC	??0ScaleInfo@@QAE@XZ				; ScaleInfo::ScaleInfo
EXTRN	?Fatal@MsgMgr@@QAAXDPADH0ZZ:NEAR		; MsgMgr::Fatal
EXTRN	??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@@Z:NEAR ; ScreenItem::ScreenItem
_DATA	SEGMENT
	ORG $+1
$SG62992 DB	'No Plane defined', 00H
	ORG $+3
$SG62993 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Wind'
	DB	'ow.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T63965	DD	019930520H
	DD	01H
	DD	FLAT:$T63967
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63967	DD	0ffffffffH
	DD	FLAT:$L63963
xdata$x	ENDS
_TEXT	SEGMENT
$T63957 = -52
$T63958 = -56
$T63959 = -60
$T63960 = -64
__$EHRec$ = -12
_this$ = -68
_bitmap$ = -32
_scaleInfo$ = -48
?Show@SOL_Window@@UAEXXZ PROC NEAR			; SOL_Window::Show

; 241  : {

  00a6d	55		 push	 ebp
  00a6e	8b ec		 mov	 ebp, esp
  00a70	6a ff		 push	 -1
  00a72	68 00 00 00 00	 push	 $L63966
  00a77	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00a7d	50		 push	 eax
  00a7e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00a85	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00a88	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 242  : 	if (visible) return;

  00a8b	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00a8e	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00a92	74 05		 je	 SHORT $L62980
  00a94	e9 01 01 00 00	 jmp	 $L62979
$L62980:

; 243  : 	visible = True;

  00a99	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a9c	c7 41 44 01 00
	00 00		 mov	 DWORD PTR [ecx+68], 1

; 244  : 	Bitmap bitmap(fontBitmap);

  00aa3	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00aa6	83 c2 08	 add	 edx, 8
  00aa9	51		 push	 ecx
  00aaa	8b cc		 mov	 ecx, esp
  00aac	89 65 cc	 mov	 DWORD PTR $T63957[ebp], esp
  00aaf	52		 push	 edx
  00ab0	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00ab5	8d 4d e0	 lea	 ecx, DWORD PTR _bitmap$[ebp]
  00ab8	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@VMemID@@@Z ; Bitmap::Bitmap

; 245  : 	ScaleInfo scaleInfo;

  00abd	8d 4d d0	 lea	 ecx, DWORD PTR _scaleInfo$[ebp]
  00ac0	e8 00 00 00 00	 call	 ??0ScaleInfo@@QAE@XZ	; ScaleInfo::ScaleInfo

; 246  : 	if (!si) {

  00ac5	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00ac8	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00acc	0f 85 b6 00 00
	00		 jne	 $L62991

; 247  :    	if(plane)

  00ad2	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad5	83 79 70 00	 cmp	 DWORD PTR [ecx+112], 0
  00ad9	0f 84 89 00 00
	00		 je	 $L62985

; 248  : 			si = New ScreenItem(plane->Id(),bitmap,pos,scaleInfo);

  00adf	68 98 00 00 00	 push	 152			; 00000098H
  00ae4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00ae9	83 c4 04	 add	 esp, 4
  00aec	89 45 c4	 mov	 DWORD PTR $T63959[ebp], eax
  00aef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00af6	83 7d c4 00	 cmp	 DWORD PTR $T63959[ebp], 0
  00afa	74 4d		 je	 SHORT $L63961
  00afc	83 ec 10	 sub	 esp, 16			; 00000010H
  00aff	8b d4		 mov	 edx, esp
  00b01	8b 45 d0	 mov	 eax, DWORD PTR _scaleInfo$[ebp]
  00b04	89 02		 mov	 DWORD PTR [edx], eax
  00b06	8b 4d d4	 mov	 ecx, DWORD PTR _scaleInfo$[ebp+4]
  00b09	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00b0c	8b 45 d8	 mov	 eax, DWORD PTR _scaleInfo$[ebp+8]
  00b0f	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00b12	8b 4d dc	 mov	 ecx, DWORD PTR _scaleInfo$[ebp+12]
  00b15	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00b18	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00b1b	83 c2 74	 add	 edx, 116		; 00000074H
  00b1e	83 ec 08	 sub	 esp, 8
  00b21	8b cc		 mov	 ecx, esp
  00b23	89 65 c0	 mov	 DWORD PTR $T63960[ebp], esp
  00b26	52		 push	 edx
  00b27	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00b2c	8d 45 e0	 lea	 eax, DWORD PTR _bitmap$[ebp]
  00b2f	50		 push	 eax
  00b30	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b33	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00b36	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id
  00b3b	50		 push	 eax
  00b3c	8b 4d c4	 mov	 ecx, DWORD PTR $T63959[ebp]
  00b3f	e8 00 00 00 00	 call	 ??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@@Z ; ScreenItem::ScreenItem
  00b44	89 45 b8	 mov	 DWORD PTR -72+[ebp], eax
  00b47	eb 07		 jmp	 SHORT $L63962
$L63961:
  00b49	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR -72+[ebp], 0
$L63962:
  00b50	8b 55 b8	 mov	 edx, DWORD PTR -72+[ebp]
  00b53	89 55 c8	 mov	 DWORD PTR $T63958[ebp], edx
  00b56	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00b5d	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00b60	8b 4d c8	 mov	 ecx, DWORD PTR $T63958[ebp]
  00b63	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 249  : 		else  

  00b66	eb 20		 jmp	 SHORT $L62991
$L62985:

; 250  : 			msgMgr->Fatal(SrcLoc,"No Plane defined");

  00b68	68 00 00 00 00	 push	 OFFSET FLAT:$SG62992
  00b6d	68 fa 00 00 00	 push	 250			; 000000faH
  00b72	68 00 00 00 00	 push	 OFFSET FLAT:$SG62993
  00b77	6a 61		 push	 97			; 00000061H
  00b79	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00b7f	52		 push	 edx
  00b80	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  00b85	83 c4 14	 add	 esp, 20			; 00000014H
$L62991:

; 252  : 	graphMgr->AddScreenItem(si);

  00b88	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00b8b	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00b8e	51		 push	 ecx
  00b8f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00b95	e8 00 00 00 00	 call	 ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::AddScreenItem
$L62979:

; 253  : //	graphMgr->FrameOut();
; 254  : }

  00b9a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b9d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00ba4	8b e5		 mov	 esp, ebp
  00ba6	5d		 pop	 ebp
  00ba7	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L63963:
  0002a	8b 45 c4	 mov	 eax, DWORD PTR $T63959[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	59		 pop	 ecx
  00034	c3		 ret	 0
$L63966:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63965
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Show@SOL_Window@@UAEXXZ ENDP				; SOL_Window::Show
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0Bitmap@@QAE@VMemID@@@Z PROC NEAR			; Bitmap::Bitmap, COMDAT

; 128  : 	Bitmap(const MemID id)									{view = loop = cel = 0; type = tMem; memid = id;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	66 8b 55 08	 mov	 dx, WORD PTR _id$[ebp]
  00040	66 89 51 10	 mov	 WORD PTR [ecx+16], dx
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
??0Bitmap@@QAE@VMemID@@@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
;	COMDAT ??0ScaleInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ScaleInfo@@QAE@XZ PROC NEAR				; ScaleInfo::ScaleInfo, COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	scaleX = 128;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 80 00 00
	00		 mov	 DWORD PTR [eax], 128	; 00000080H

; 42   : 	scaleY = 128;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 80 00
	00 00		 mov	 DWORD PTR [ecx+4], 128	; 00000080H

; 43   : 	maxScale = 100;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 64 00
	00 00		 mov	 DWORD PTR [edx+8], 100	; 00000064H

; 44   : 	scaleType = SCALE_OFF;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 45   : }

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0ScaleInfo@@QAE@XZ ENDP				; ScaleInfo::ScaleInfo
_TEXT	ENDS
;	COMDAT ?Id@SOL_Plane@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Id@SOL_Plane@@QBEJXZ PROC NEAR				; SOL_Plane::Id, COMDAT

; 64   : 	long				Id() const					{return planeId;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?Id@SOL_Plane@@QBEJXZ ENDP				; SOL_Plane::Id
_TEXT	ENDS
EXTRN	?AddScreenItem@Screen@@QAEXPAVScreenItem@@@Z:NEAR ; Screen::AddScreenItem
;	COMDAT ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z
_TEXT	SEGMENT
_si$ = 8
_this$ = -4
?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z PROC NEAR ; GraphicsMgr::AddScreenItem, COMDAT

; 60   : 	void		AddScreenItem(ScreenItem* si)		{next.AddScreenItem(si);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e8 00 00 00 00	 call	 ?AddScreenItem@Screen@@QAEXPAVScreenItem@@@Z ; Screen::AddScreenItem
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ENDP	; GraphicsMgr::AddScreenItem
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -8
_indices$62998 = -4
?PageUp@SOL_Window@@UAEXXZ PROC NEAR			; SOL_Window::PageUp

; 258  : {

  00ba8	55		 push	 ebp
  00ba9	8b ec		 mov	 ebp, esp
  00bab	83 ec 08	 sub	 esp, 8
  00bae	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 259  : 	// Up one page
; 260  : 	if (startLine > 1) { 

  00bb1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00bb4	83 78 24 01	 cmp	 DWORD PTR [eax+36], 1
  00bb8	0f 8e 87 00 00
	00		 jle	 $L62997

; 261  : 		uint* indices = (uint*) *lineIndicesID;

  00bbe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00bc1	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00bc7	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00bcc	89 45 fc	 mov	 DWORD PTR _indices$62998[ebp], eax

; 262  : 		lastLine = startLine - 1;

  00bcf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00bd2	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00bd5	83 ea 01	 sub	 edx, 1
  00bd8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00bdb	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 263  : 		if (lastLine < linesPerPage) lastLine = linesPerPage;

  00bde	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00be1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00be4	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00be7	3b 42 2c	 cmp	 eax, DWORD PTR [edx+44]
  00bea	7d 0c		 jge	 SHORT $L63000
  00bec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00bef	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00bf2	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00bf5	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$L63000:

; 264  : 		startLine -= linesPerPage;

  00bf8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00bfb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00bfe	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00c01	2b 42 2c	 sub	 eax, DWORD PTR [edx+44]
  00c04	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c07	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 265  : 		if (startLine < 1) startLine = 1;

  00c0a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c0d	83 7a 24 01	 cmp	 DWORD PTR [edx+36], 1
  00c11	7d 0a		 jge	 SHORT $L63001
  00c13	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c16	c7 40 24 01 00
	00 00		 mov	 DWORD PTR [eax+36], 1
$L63001:

; 266  : 		startChar = indices[startLine];

  00c1d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c20	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00c23	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c26	8b 4d fc	 mov	 ecx, DWORD PTR _indices$62998[ebp]
  00c29	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  00c2c	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 267  : 		lastChar = indices[lastLine+1] - 1;

  00c2f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c32	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00c35	8b 55 fc	 mov	 edx, DWORD PTR _indices$62998[ebp]
  00c38	8b 44 8a 04	 mov	 eax, DWORD PTR [edx+ecx*4+4]
  00c3c	83 e8 01	 sub	 eax, 1
  00c3f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c42	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$L62997:

; 270  : }

  00c45	8b e5		 mov	 esp, ebp
  00c47	5d		 pop	 ebp
  00c48	c3		 ret	 0
?PageUp@SOL_Window@@UAEXXZ ENDP				; SOL_Window::PageUp
_this$ = -8
_indices$63006 = -4
?PageDown@SOL_Window@@UAEXXZ PROC NEAR			; SOL_Window::PageDown

; 274  : { 

  00c49	55		 push	 ebp
  00c4a	8b ec		 mov	 ebp, esp
  00c4c	83 ec 08	 sub	 esp, 8
  00c4f	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 275  : 	// Down one page
; 276  : 	if (lastLine < maxLines) { 

  00c52	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c55	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c58	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00c5b	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  00c5e	7d 74		 jge	 SHORT $L63005

; 277  : 		uint* indices = (uint*) *lineIndicesID;

  00c60	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c63	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00c69	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00c6e	89 45 fc	 mov	 DWORD PTR _indices$63006[ebp], eax

; 278  : 		startLine = lastLine + 1;

  00c71	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c74	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00c77	83 c1 01	 add	 ecx, 1
  00c7a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c7d	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 279  : 		startChar = indices[startLine];

  00c80	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c83	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00c86	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c89	8b 45 fc	 mov	 eax, DWORD PTR _indices$63006[ebp]
  00c8c	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00c8f	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 280  : 		lastLine += linesPerPage;

  00c92	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c95	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00c98	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c9b	03 41 2c	 add	 eax, DWORD PTR [ecx+44]
  00c9e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ca1	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 281  : 		if (lastLine > maxLines) lastLine = maxLines;

  00ca4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ca7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00caa	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00cad	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  00cb0	7e 0c		 jle	 SHORT $L63008
  00cb2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00cb5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00cb8	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00cbb	89 50 28	 mov	 DWORD PTR [eax+40], edx
$L63008:

; 282  : 		lastChar = indices[lastLine+1] - 1;

  00cbe	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00cc1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00cc4	8b 55 fc	 mov	 edx, DWORD PTR _indices$63006[ebp]
  00cc7	8b 44 8a 04	 mov	 eax, DWORD PTR [edx+ecx*4+4]
  00ccb	83 e8 01	 sub	 eax, 1
  00cce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00cd1	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$L63005:

; 285  : }

  00cd4	8b e5		 mov	 esp, ebp
  00cd6	5d		 pop	 ebp
  00cd7	c3		 ret	 0
?PageDown@SOL_Window@@UAEXXZ ENDP			; SOL_Window::PageDown
_this$ = -8
_indices$63013 = -4
?Home@SOL_Window@@UAEXXZ PROC NEAR			; SOL_Window::Home

; 289  : {  

  00cd8	55		 push	 ebp
  00cd9	8b ec		 mov	 ebp, esp
  00cdb	83 ec 08	 sub	 esp, 8
  00cde	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 290  : 	// Top of document
; 291  : 	if (startLine > 1) {

  00ce1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ce4	83 78 24 01	 cmp	 DWORD PTR [eax+36], 1
  00ce8	7e 61		 jle	 SHORT $L63012

; 292  : 		uint* indices = (uint*) *lineIndicesID;

  00cea	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ced	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00cf3	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00cf8	89 45 fc	 mov	 DWORD PTR _indices$63013[ebp], eax

; 293  : 		startChar = 0;

  00cfb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00cfe	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 294  : 		startLine = 1;

  00d05	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d08	c7 42 24 01 00
	00 00		 mov	 DWORD PTR [edx+36], 1

; 295  : 		lastLine = linesPerPage;

  00d0f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d12	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d15	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00d18	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 296  : 		if (lastLine > maxLines) lastLine = maxLines;

  00d1b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d1e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d21	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00d24	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  00d27	7e 0c		 jle	 SHORT $L63015
  00d29	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d2c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d2f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00d32	89 50 28	 mov	 DWORD PTR [eax+40], edx
$L63015:

; 297  : 		lastChar = indices[lastLine+1] - 1;

  00d35	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d38	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00d3b	8b 55 fc	 mov	 edx, DWORD PTR _indices$63013[ebp]
  00d3e	8b 44 8a 04	 mov	 eax, DWORD PTR [edx+ecx*4+4]
  00d42	83 e8 01	 sub	 eax, 1
  00d45	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d48	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$L63012:

; 300  : }

  00d4b	8b e5		 mov	 esp, ebp
  00d4d	5d		 pop	 ebp
  00d4e	c3		 ret	 0
?Home@SOL_Window@@UAEXXZ ENDP				; SOL_Window::Home
_this$ = -8
_indices$63020 = -4
?End@SOL_Window@@UAEXXZ PROC NEAR			; SOL_Window::End

; 304  : { 

  00d4f	55		 push	 ebp
  00d50	8b ec		 mov	 ebp, esp
  00d52	83 ec 08	 sub	 esp, 8
  00d55	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 305  : 	// Last page of document
; 306  : 	if (lastLine < maxLines) {

  00d58	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d5b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d5e	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00d61	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  00d64	7d 6d		 jge	 SHORT $L63019

; 307  : 		uint* indices = (uint*) *lineIndicesID;

  00d66	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d69	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00d6f	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00d74	89 45 fc	 mov	 DWORD PTR _indices$63020[ebp], eax

; 308  : 		lastLine = maxLines;

  00d77	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d7a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d7d	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00d80	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 309  : 		startLine = lastLine - linesPerPage + 1;

  00d83	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d86	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d89	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00d8c	2b 51 2c	 sub	 edx, DWORD PTR [ecx+44]
  00d8f	83 c2 01	 add	 edx, 1
  00d92	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d95	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 310  : 		if (startLine < 1) startLine = 1;

  00d98	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d9b	83 79 24 01	 cmp	 DWORD PTR [ecx+36], 1
  00d9f	7d 0a		 jge	 SHORT $L63022
  00da1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00da4	c7 42 24 01 00
	00 00		 mov	 DWORD PTR [edx+36], 1
$L63022:

; 311  : 		startChar = indices[startLine];

  00dab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00dae	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00db1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00db4	8b 45 fc	 mov	 eax, DWORD PTR _indices$63020[ebp]
  00db7	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00dba	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 312  : 		lastChar = indices[lastLine+1] - 1;

  00dbd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00dc0	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00dc3	8b 4d fc	 mov	 ecx, DWORD PTR _indices$63020[ebp]
  00dc6	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  00dca	83 ea 01	 sub	 edx, 1
  00dcd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00dd0	89 50 38	 mov	 DWORD PTR [eax+56], edx
$L63019:

; 315  : }

  00dd3	8b e5		 mov	 esp, ebp
  00dd5	5d		 pop	 ebp
  00dd6	c3		 ret	 0
?End@SOL_Window@@UAEXXZ ENDP				; SOL_Window::End
_TEXT	ENDS
PUBLIC	?SetColor@FontMgr@@QAEXH@Z			; FontMgr::SetColor
PUBLIC	?SetMode@FontMgr@@QAEXH@Z			; FontMgr::SetMode
EXTRN	?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z:NEAR ; GraphicsMgr::UpdateScreenItem
EXTRN	?DownOneLine@FontMgr@@QAEXIIH@Z:NEAR		; FontMgr::DownOneLine
_TEXT	SEGMENT
_this$ = -28
_indices$63027 = -4
_fonts$63029 = -8
_colors$63031 = -24
_modes$63033 = -20
_length$63036 = -12
_drawCount$63037 = -16
?UpArrow@SOL_Window@@UAEXXZ PROC NEAR			; SOL_Window::UpArrow

; 319  : {

  00dd7	55		 push	 ebp
  00dd8	8b ec		 mov	 ebp, esp
  00dda	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00ddd	56		 push	 esi
  00dde	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 320  :   // Up one line
; 321  : 	if (startLine > 1) {

  00de1	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00de4	83 78 24 01	 cmp	 DWORD PTR [eax+36], 1
  00de8	0f 8e b4 01 00
	00		 jle	 $L63039

; 322  : 		uint* indices = (uint*) *lineIndicesID;

  00dee	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00df1	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00df7	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00dfc	89 45 fc	 mov	 DWORD PTR _indices$63027[ebp], eax

; 323  : 		uint* fonts = (uint*) *fontIndicesID;

  00dff	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e02	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  00e08	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00e0d	89 45 f8	 mov	 DWORD PTR _fonts$63029[ebp], eax

; 324  : 		uint* colors = (uint*) *colorIndicesID;

  00e10	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e13	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00e19	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00e1e	89 45 e8	 mov	 DWORD PTR _colors$63031[ebp], eax

; 325  : 		uint* modes = (uint*) *modeIndicesID;

  00e21	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e24	81 c1 8a 00 00
	00		 add	 ecx, 138		; 0000008aH
  00e2a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00e2f	89 45 ec	 mov	 DWORD PTR _modes$63033[ebp], eax

; 326  : 		startLine--;

  00e32	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e35	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00e38	83 ea 01	 sub	 edx, 1
  00e3b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00e3e	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 327  : 		lastLine--;

  00e41	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e44	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00e47	83 ea 01	 sub	 edx, 1
  00e4a	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00e4d	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 328  : 		if (lastLine - startLine + 1 < linesPerPage) lastLine = maxLines;

  00e50	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e53	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00e56	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00e59	2b 42 24	 sub	 eax, DWORD PTR [edx+36]
  00e5c	83 c0 01	 add	 eax, 1
  00e5f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e62	3b 41 2c	 cmp	 eax, DWORD PTR [ecx+44]
  00e65	7d 0c		 jge	 SHORT $L63035
  00e67	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00e6a	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00e6d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00e70	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
$L63035:

; 329  : 		startChar = indices[startLine];

  00e73	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00e76	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00e79	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e7c	8b 55 fc	 mov	 edx, DWORD PTR _indices$63027[ebp]
  00e7f	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00e82	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 330  : 		lastChar = indices[lastLine+1] - 1;

  00e85	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e88	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00e8b	8b 45 fc	 mov	 eax, DWORD PTR _indices$63027[ebp]
  00e8e	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  00e92	83 e9 01	 sub	 ecx, 1
  00e95	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00e98	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 331  : 		int length = lastChar - startChar + 1;

  00e9b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00e9e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ea1	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  00ea4	2b 51 34	 sub	 edx, DWORD PTR [ecx+52]
  00ea7	83 c2 01	 add	 edx, 1
  00eaa	89 55 f4	 mov	 DWORD PTR _length$63036[ebp], edx

; 332  : 		strncpy(*workText,&text[startChar],length);

  00ead	8b 45 f4	 mov	 eax, DWORD PTR _length$63036[ebp]
  00eb0	50		 push	 eax
  00eb1	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00eb4	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00eb7	52		 push	 edx
  00eb8	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ebb	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00ebe	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  00ec3	50		 push	 eax
  00ec4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ec7	83 c1 48	 add	 ecx, 72			; 00000048H
  00eca	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00ecf	50		 push	 eax
  00ed0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00ed6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 333  : 		// Insert terminator
; 334  : 		workText[length] = 0;

  00ed9	8b 45 f4	 mov	 eax, DWORD PTR _length$63036[ebp]
  00edc	50		 push	 eax
  00edd	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ee0	83 c1 48	 add	 ecx, 72			; 00000048H
  00ee3	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  00ee8	c6 00 00	 mov	 BYTE PTR [eax], 0

; 335  : 		int drawCount = indices[startLine+1]-indices[startLine];

  00eeb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00eee	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00ef1	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00ef4	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00ef7	8b 45 fc	 mov	 eax, DWORD PTR _indices$63027[ebp]
  00efa	8b 75 fc	 mov	 esi, DWORD PTR _indices$63027[ebp]
  00efd	8b 54 90 04	 mov	 edx, DWORD PTR [eax+edx*4+4]
  00f01	2b 14 8e	 sub	 edx, DWORD PTR [esi+ecx*4]
  00f04	89 55 f0	 mov	 DWORD PTR _drawCount$63037[ebp], edx

; 336  : 		if (text[indices[startLine+1]-1] == Kbd::LineFeed)

  00f07	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00f0a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00f0d	8b 55 fc	 mov	 edx, DWORD PTR _indices$63027[ebp]
  00f10	8b 44 8a 04	 mov	 eax, DWORD PTR [edx+ecx*4+4]
  00f14	83 e8 01	 sub	 eax, 1
  00f17	50		 push	 eax
  00f18	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00f1b	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00f1e	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  00f23	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00f26	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00f29	75 09		 jne	 SHORT $L63038

; 337  : 			drawCount--;

  00f2b	8b 55 f0	 mov	 edx, DWORD PTR _drawCount$63037[ebp]
  00f2e	83 ea 01	 sub	 edx, 1
  00f31	89 55 f0	 mov	 DWORD PTR _drawCount$63037[ebp], edx
$L63038:

; 338  : 		fntMgr->SetColor(colors[startLine]);

  00f34	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00f37	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00f3a	8b 55 e8	 mov	 edx, DWORD PTR _colors$63031[ebp]
  00f3d	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00f40	50		 push	 eax
  00f41	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00f44	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00f47	e8 00 00 00 00	 call	 ?SetColor@FontMgr@@QAEXH@Z ; FontMgr::SetColor

; 339  : 		fntMgr->SetMode(modes[startLine]);

  00f4c	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00f4f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00f52	8b 4d ec	 mov	 ecx, DWORD PTR _modes$63033[ebp]
  00f55	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00f58	52		 push	 edx
  00f59	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00f5c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00f5f	e8 00 00 00 00	 call	 ?SetMode@FontMgr@@QAEXH@Z ; FontMgr::SetMode

; 340  : 		fntMgr->DownOneLine(drawCount,linesPerPage,fonts[startLine]);

  00f64	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00f67	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00f6a	8b 45 f8	 mov	 eax, DWORD PTR _fonts$63029[ebp]
  00f6d	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00f70	51		 push	 ecx
  00f71	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00f74	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00f77	50		 push	 eax
  00f78	8b 4d f0	 mov	 ecx, DWORD PTR _drawCount$63037[ebp]
  00f7b	51		 push	 ecx
  00f7c	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00f7f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00f82	e8 00 00 00 00	 call	 ?DownOneLine@FontMgr@@QAEXIIH@Z ; FontMgr::DownOneLine

; 341  :       if (visible) {

  00f87	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00f8a	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00f8e	74 12		 je	 SHORT $L63039

; 342  : 	      graphMgr->UpdateScreenItem(si);

  00f90	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00f93	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00f96	52		 push	 edx
  00f97	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00f9d	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem
$L63039:

; 345  : }

  00fa2	5e		 pop	 esi
  00fa3	8b e5		 mov	 esp, ebp
  00fa5	5d		 pop	 ebp
  00fa6	c3		 ret	 0
?UpArrow@SOL_Window@@UAEXXZ ENDP			; SOL_Window::UpArrow
_TEXT	ENDS
;	COMDAT ?SetColor@FontMgr@@QAEXH@Z
_TEXT	SEGMENT
_theFore$ = 8
_this$ = -4
?SetColor@FontMgr@@QAEXH@Z PROC NEAR			; FontMgr::SetColor, COMDAT

; 115  : 	void 				SetColor(int theFore) {fore = theFore;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _theFore$[ebp]
  0000e	66 89 48 06	 mov	 WORD PTR [eax+6], cx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?SetColor@FontMgr@@QAEXH@Z ENDP				; FontMgr::SetColor
_TEXT	ENDS
;	COMDAT ?SetMode@FontMgr@@QAEXH@Z
_TEXT	SEGMENT
_theMode$ = 8
_this$ = -4
?SetMode@FontMgr@@QAEXH@Z PROC NEAR			; FontMgr::SetMode, COMDAT

; 116  : 	void 				SetMode(int theMode) {mode = theMode;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _theMode$[ebp]
  0000e	66 89 48 46	 mov	 WORD PTR [eax+70], cx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?SetMode@FontMgr@@QAEXH@Z ENDP				; FontMgr::SetMode
_TEXT	ENDS
EXTRN	?UpOneLine@FontMgr@@QAEXIIIH@Z:NEAR		; FontMgr::UpOneLine
_TEXT	SEGMENT
_this$ = -24
_indices$63044 = -4
_fonts$63046 = -8
_colors$63048 = -20
_modes$63050 = -16
_length$63054 = -12
?DownArrow@SOL_Window@@UAEXXZ PROC NEAR			; SOL_Window::DownArrow

; 349  : { 

  00fa7	55		 push	 ebp
  00fa8	8b ec		 mov	 ebp, esp
  00faa	83 ec 18	 sub	 esp, 24			; 00000018H
  00fad	56		 push	 esi
  00fae	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 	// Down one line
; 351  : 	if (startLine < maxLines) {

  00fb1	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00fb4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fb7	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00fba	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  00fbd	0f 8d f2 01 00
	00		 jge	 $L63057

; 352  : 		uint* indices = (uint*) *lineIndicesID;

  00fc3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fc6	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00fcc	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00fd1	89 45 fc	 mov	 DWORD PTR _indices$63044[ebp], eax

; 353  : 		uint* fonts = (uint*) *fontIndicesID;

  00fd4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fd7	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  00fdd	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00fe2	89 45 f8	 mov	 DWORD PTR _fonts$63046[ebp], eax

; 354  : 		uint* colors = (uint*) *colorIndicesID;

  00fe5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fe8	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00fee	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00ff3	89 45 ec	 mov	 DWORD PTR _colors$63048[ebp], eax

; 355  : 		uint* modes = (uint*) *modeIndicesID;

  00ff6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ff9	81 c1 8a 00 00
	00		 add	 ecx, 138		; 0000008aH
  00fff	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01004	89 45 f0	 mov	 DWORD PTR _modes$63050[ebp], eax

; 356  : 		startLine++;

  01007	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0100a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0100d	83 c1 01	 add	 ecx, 1
  01010	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01013	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 357  : 		lastLine++;

  01016	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01019	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0101c	83 c1 01	 add	 ecx, 1
  0101f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01022	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 358  : 		if (lastLine > maxLines) lastLine = maxLines;

  01025	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01028	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0102b	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  0102e	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  01031	7e 0c		 jle	 SHORT $L63052
  01033	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01036	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01039	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0103c	89 50 28	 mov	 DWORD PTR [eax+40], edx
$L63052:

; 359  : 		startChar = indices[startLine];

  0103f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01042	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  01045	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01048	8b 45 fc	 mov	 eax, DWORD PTR _indices$63044[ebp]
  0104b	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0104e	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 360  : 		lastChar = indices[lastLine+1] - 1;

  01051	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01054	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  01057	8b 4d fc	 mov	 ecx, DWORD PTR _indices$63044[ebp]
  0105a	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  0105e	83 ea 01	 sub	 edx, 1
  01061	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01064	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 361  : 		if (text[lastChar] == Kbd::LineFeed) lastChar--;

  01067	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0106a	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0106d	52		 push	 edx
  0106e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01071	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01074	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  01079	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0107c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0107f	75 0f		 jne	 SHORT $L63053
  01081	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01084	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  01087	83 ea 01	 sub	 edx, 1
  0108a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0108d	89 50 38	 mov	 DWORD PTR [eax+56], edx
$L63053:

; 362  : 		int length = lastChar - startChar + 1;

  01090	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01093	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01096	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  01099	2b 42 34	 sub	 eax, DWORD PTR [edx+52]
  0109c	83 c0 01	 add	 eax, 1
  0109f	89 45 f4	 mov	 DWORD PTR _length$63054[ebp], eax

; 363  : 		strncpy(*workText,&text[startChar],length);

  010a2	8b 4d f4	 mov	 ecx, DWORD PTR _length$63054[ebp]
  010a5	51		 push	 ecx
  010a6	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  010a9	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  010ac	50		 push	 eax
  010ad	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  010b0	83 c1 0a	 add	 ecx, 10			; 0000000aH
  010b3	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  010b8	50		 push	 eax
  010b9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  010bc	83 c1 48	 add	 ecx, 72			; 00000048H
  010bf	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  010c4	50		 push	 eax
  010c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  010cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 364  : 		// Insert terminator
; 365  : 		workText[length] = 0;

  010ce	8b 4d f4	 mov	 ecx, DWORD PTR _length$63054[ebp]
  010d1	51		 push	 ecx
  010d2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  010d5	83 c1 48	 add	 ecx, 72			; 00000048H
  010d8	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  010dd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 366  : 		fntMgr->SetColor(colors[lastLine]);

  010e0	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  010e3	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  010e6	8b 4d ec	 mov	 ecx, DWORD PTR _colors$63048[ebp]
  010e9	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  010ec	52		 push	 edx
  010ed	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  010f0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  010f3	e8 00 00 00 00	 call	 ?SetColor@FontMgr@@QAEXH@Z ; FontMgr::SetColor

; 367  : 		fntMgr->SetMode(modes[lastLine]);

  010f8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  010fb	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  010fe	8b 45 f0	 mov	 eax, DWORD PTR _modes$63050[ebp]
  01101	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  01104	51		 push	 ecx
  01105	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01108	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0110b	e8 00 00 00 00	 call	 ?SetMode@FontMgr@@QAEXH@Z ; FontMgr::SetMode

; 368  : 		if ((lastLine - startLine + 1) == linesPerPage)	{

  01110	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01113	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01116	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  01119	2b 51 24	 sub	 edx, DWORD PTR [ecx+36]
  0111c	83 c2 01	 add	 edx, 1
  0111f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01122	3b 50 2c	 cmp	 edx, DWORD PTR [eax+44]
  01125	75 50		 jne	 SHORT $L63055

; 369  : 			fntMgr->UpOneLine(indices[lastLine]-indices[startLine],
; 370  : 									lastChar-indices[lastLine] + 1,
; 371  : 									linesPerPage,
; 372  : 									fonts[lastLine]);

  01127	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0112a	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0112d	8b 45 f8	 mov	 eax, DWORD PTR _fonts$63046[ebp]
  01130	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  01133	51		 push	 ecx
  01134	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01137	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0113a	50		 push	 eax
  0113b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0113e	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  01141	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01144	8b 4d fc	 mov	 ecx, DWORD PTR _indices$63044[ebp]
  01147	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0114a	2b 04 91	 sub	 eax, DWORD PTR [ecx+edx*4]
  0114d	83 c0 01	 add	 eax, 1
  01150	50		 push	 eax
  01151	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01154	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  01157	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0115a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0115d	8b 45 fc	 mov	 eax, DWORD PTR _indices$63044[ebp]
  01160	8b 75 fc	 mov	 esi, DWORD PTR _indices$63044[ebp]
  01163	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  01166	2b 14 8e	 sub	 edx, DWORD PTR [esi+ecx*4]
  01169	52		 push	 edx
  0116a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0116d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01170	e8 00 00 00 00	 call	 ?UpOneLine@FontMgr@@QAEXIIIH@Z ; FontMgr::UpOneLine

; 374  : 		else {

  01175	eb 23		 jmp	 SHORT $L63056
$L63055:

; 375  : 			fntMgr->UpOneLine(0,
; 376  : 									0,
; 377  : 									linesPerPage,
; 378  : 									fonts[lastLine]);

  01177	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0117a	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0117d	8b 45 f8	 mov	 eax, DWORD PTR _fonts$63046[ebp]
  01180	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  01183	51		 push	 ecx
  01184	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01187	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0118a	50		 push	 eax
  0118b	6a 00		 push	 0
  0118d	6a 00		 push	 0
  0118f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01192	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  01195	e8 00 00 00 00	 call	 ?UpOneLine@FontMgr@@QAEXIIIH@Z ; FontMgr::UpOneLine
$L63056:

; 380  :       if (visible) {

  0119a	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0119d	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  011a1	74 12		 je	 SHORT $L63057

; 381  : 		   graphMgr->UpdateScreenItem(si);

  011a3	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  011a6	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  011a9	51		 push	 ecx
  011aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  011b0	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem
$L63057:

; 384  : }

  011b5	5e		 pop	 esi
  011b6	8b e5		 mov	 esp, ebp
  011b8	5d		 pop	 ebp
  011b9	c3		 ret	 0
?DownArrow@SOL_Window@@UAEXXZ ENDP			; SOL_Window::DownArrow
_TEXT	ENDS
PUBLIC	?BackAWord@SOL_Window@@IAEHXZ			; SOL_Window::BackAWord
_TEXT	SEGMENT
_this$ = -8
_returnValue$ = -4
?BackAWord@SOL_Window@@IAEHXZ PROC NEAR			; SOL_Window::BackAWord

; 388  : {

  011ba	55		 push	 ebp
  011bb	8b ec		 mov	 ebp, esp
  011bd	83 ec 08	 sub	 esp, 8
  011c0	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 389  : 	// Back up a word
; 390  : 	Bool returnValue = True;

  011c3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 1

; 391  : 
; 392  : 	if (((char*) *text)[startChar] != ' ') {

  011ca	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011cd	83 c1 0a	 add	 ecx, 10			; 0000000aH
  011d0	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  011d5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011d8	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  011db	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  011df	83 f8 20	 cmp	 eax, 32			; 00000020H
  011e2	74 3d		 je	 SHORT $L63066
$L63065:

; 393  : 		while (((char*) *text)[startChar] != ' ') {

  011e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011e7	83 c1 0a	 add	 ecx, 10			; 0000000aH
  011ea	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  011ef	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011f2	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  011f5	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  011f9	83 f8 20	 cmp	 eax, 32			; 00000020H
  011fc	74 23		 je	 SHORT $L63066

; 394  : 			if (!startChar) {

  011fe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01201	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  01205	75 09		 jne	 SHORT $L63068

; 395  : 				returnValue = False;

  01207	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 0

; 396  : 				break;

  0120e	eb 11		 jmp	 SHORT $L63066
$L63068:

; 398  : 			startChar--;

  01210	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01213	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  01216	83 e8 01	 sub	 eax, 1
  01219	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0121c	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 399  : 		}

  0121f	eb c3		 jmp	 SHORT $L63065
$L63066:

; 401  : 	while (((char*) *text)[startChar] == ' ') {

  01221	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01224	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01227	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0122c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0122f	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]
  01232	0f be 14 08	 movsx	 edx, BYTE PTR [eax+ecx]
  01236	83 fa 20	 cmp	 edx, 32			; 00000020H
  01239	75 23		 jne	 SHORT $L63071

; 402  : 		if (!startChar) {

  0123b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0123e	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  01242	75 09		 jne	 SHORT $L63073

; 403  : 			returnValue = False;

  01244	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 0

; 404  : 			break;

  0124b	eb 11		 jmp	 SHORT $L63071
$L63073:

; 406  : 		startChar--;

  0124d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01250	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01253	83 ea 01	 sub	 edx, 1
  01256	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01259	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 407  : 	}

  0125c	eb c3		 jmp	 SHORT $L63066
$L63071:

; 408  : 	while (((char*) *text)[startChar-1] != ' ') {

  0125e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01261	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01264	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  01269	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0126c	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0126f	0f be 44 10 ff	 movsx	 eax, BYTE PTR [eax+edx-1]
  01274	83 f8 20	 cmp	 eax, 32			; 00000020H
  01277	74 1c		 je	 SHORT $L63076

; 409  : 		if (!startChar) {

  01279	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0127c	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  01280	75 02		 jne	 SHORT $L63078

; 410  : 			break;

  01282	eb 11		 jmp	 SHORT $L63076
$L63078:

; 412  : 		startChar--;

  01284	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01287	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0128a	83 e8 01	 sub	 eax, 1
  0128d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01290	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 413  : 	}

  01293	eb c9		 jmp	 SHORT $L63071
$L63076:

; 414  : 	return returnValue;

  01295	8b 45 fc	 mov	 eax, DWORD PTR _returnValue$[ebp]

; 415  : }

  01298	8b e5		 mov	 esp, ebp
  0129a	5d		 pop	 ebp
  0129b	c3		 ret	 0
?BackAWord@SOL_Window@@IAEHXZ ENDP			; SOL_Window::BackAWord
_TEXT	ENDS
PUBLIC	?ForwardAWord@SOL_Window@@IAEHXZ		; SOL_Window::ForwardAWord
_TEXT	SEGMENT
_this$ = -8
_returnValue$ = -4
?ForwardAWord@SOL_Window@@IAEHXZ PROC NEAR		; SOL_Window::ForwardAWord

; 419  : {

  0129c	55		 push	 ebp
  0129d	8b ec		 mov	 ebp, esp
  0129f	83 ec 08	 sub	 esp, 8
  012a2	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 420  : 	// Back up a word
; 421  : 	Bool returnValue = True;

  012a5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 1

; 422  : 
; 423  : 	if (((char*) *text)[startChar] != ' ') {

  012ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012af	83 c1 0a	 add	 ecx, 10			; 0000000aH
  012b2	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  012b7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012ba	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  012bd	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  012c1	83 f8 20	 cmp	 eax, 32			; 00000020H
  012c4	74 45		 je	 SHORT $L63087
$L63086:

; 424  : 		while (((char*) *text)[startChar] != ' ') {

  012c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012c9	83 c1 0a	 add	 ecx, 10			; 0000000aH
  012cc	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  012d1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012d4	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  012d7	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  012db	83 f8 20	 cmp	 eax, 32			; 00000020H
  012de	74 2b		 je	 SHORT $L63087

; 425  : 			if (startChar > (textSize-1)) {

  012e0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012e3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  012e6	83 ea 01	 sub	 edx, 1
  012e9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  012ec	39 50 34	 cmp	 DWORD PTR [eax+52], edx
  012ef	76 09		 jbe	 SHORT $L63089

; 426  : 				returnValue = False;

  012f1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 0

; 427  : 				break;

  012f8	eb 11		 jmp	 SHORT $L63087
$L63089:

; 429  : 			startChar++;

  012fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012fd	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01300	83 c2 01	 add	 edx, 1
  01303	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01306	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 430  : 		}

  01309	eb bb		 jmp	 SHORT $L63086
$L63087:

; 432  : 	while (((char*) *text)[startChar] == ' ') {

  0130b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0130e	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01311	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  01316	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01319	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0131c	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  01320	83 f8 20	 cmp	 eax, 32			; 00000020H
  01323	75 2b		 jne	 SHORT $L63092

; 433  : 		if (startChar > (textSize-1)) {

  01325	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01328	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0132b	83 ea 01	 sub	 edx, 1
  0132e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01331	39 50 34	 cmp	 DWORD PTR [eax+52], edx
  01334	76 09		 jbe	 SHORT $L63094

; 434  : 			returnValue = False;

  01336	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 0

; 435  : 			break;

  0133d	eb 11		 jmp	 SHORT $L63092
$L63094:

; 437  : 		startChar++;

  0133f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01342	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01345	83 c2 01	 add	 edx, 1
  01348	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0134b	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 438  : 	}

  0134e	eb bb		 jmp	 SHORT $L63087
$L63092:

; 439  : 	return returnValue;

  01350	8b 45 fc	 mov	 eax, DWORD PTR _returnValue$[ebp]

; 440  : }

  01353	8b e5		 mov	 esp, ebp
  01355	5d		 pop	 ebp
  01356	c3		 ret	 0
?ForwardAWord@SOL_Window@@IAEHXZ ENDP			; SOL_Window::ForwardAWord
_TEXT	ENDS
EXTRN	?DrawTextBox@FontMgr@@QAEXXZ:NEAR		; FontMgr::DrawTextBox
EXTRN	?Erase@FontMgr@@QAEXAAVSOL_Rect@@H@Z:NEAR	; FontMgr::Erase
_TEXT	SEGMENT
_this$ = -20
_fonts$ = -4
_colors$ = -16
_modes$ = -12
_length$ = -8
?ReDrawText@SOL_Window@@UAEXXZ PROC NEAR		; SOL_Window::ReDrawText

; 444  : {

  01357	55		 push	 ebp
  01358	8b ec		 mov	 ebp, esp
  0135a	83 ec 14	 sub	 esp, 20			; 00000014H
  0135d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 445  :   	uint* fonts = (uint*) *fontIndicesID;

  01360	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01363	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  01369	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0136e	89 45 fc	 mov	 DWORD PTR _fonts$[ebp], eax

; 446  :   	uint* colors = (uint*) *colorIndicesID;

  01371	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01374	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0137a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0137f	89 45 f0	 mov	 DWORD PTR _colors$[ebp], eax

; 447  : 	uint* modes = (uint*) *modeIndicesID;

  01382	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01385	81 c1 8a 00 00
	00		 add	 ecx, 138		; 0000008aH
  0138b	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01390	89 45 f4	 mov	 DWORD PTR _modes$[ebp], eax

; 448  : 
; 449  : 	// Redraw with new text
; 450  : 	int length = lastChar - startChar + 1; 

  01393	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01396	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01399	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  0139c	2b 51 34	 sub	 edx, DWORD PTR [ecx+52]
  0139f	83 c2 01	 add	 edx, 1
  013a2	89 55 f8	 mov	 DWORD PTR _length$[ebp], edx

; 451  : 	strncpy(*workText,&text[startChar],length);

  013a5	8b 45 f8	 mov	 eax, DWORD PTR _length$[ebp]
  013a8	50		 push	 eax
  013a9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  013ac	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  013af	52		 push	 edx
  013b0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  013b3	83 c1 0a	 add	 ecx, 10			; 0000000aH
  013b6	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  013bb	50		 push	 eax
  013bc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  013bf	83 c1 48	 add	 ecx, 72			; 00000048H
  013c2	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  013c7	50		 push	 eax
  013c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  013ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 452  : 	// Insert terminator
; 453  : 	workText[length] = 0;

  013d1	8b 45 f8	 mov	 eax, DWORD PTR _length$[ebp]
  013d4	50		 push	 eax
  013d5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  013d8	83 c1 48	 add	 ecx, 72			; 00000048H
  013db	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  013e0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 454  : 
; 455  : 	fntMgr->Erase(textBox,False);

  013e3	6a 00		 push	 0
  013e5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  013e8	83 c1 10	 add	 ecx, 16			; 00000010H
  013eb	51		 push	 ecx
  013ec	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  013ef	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  013f2	e8 00 00 00 00	 call	 ?Erase@FontMgr@@QAEXAAVSOL_Rect@@H@Z ; FontMgr::Erase

; 456  : 	fntMgr->SetColor(colors[startLine]);

  013f7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  013fa	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  013fd	8b 55 f0	 mov	 edx, DWORD PTR _colors$[ebp]
  01400	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  01403	50		 push	 eax
  01404	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01407	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0140a	e8 00 00 00 00	 call	 ?SetColor@FontMgr@@QAEXH@Z ; FontMgr::SetColor

; 457  : 	fntMgr->SetMode(modes[startLine]);

  0140f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01412	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01415	8b 4d f4	 mov	 ecx, DWORD PTR _modes$[ebp]
  01418	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0141b	52		 push	 edx
  0141c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0141f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01422	e8 00 00 00 00	 call	 ?SetMode@FontMgr@@QAEXH@Z ; FontMgr::SetMode

; 458  : 	fntMgr->SetFont(fonts[startLine]);

  01427	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0142a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0142d	8b 45 fc	 mov	 eax, DWORD PTR _fonts$[ebp]
  01430	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  01433	51		 push	 ecx
  01434	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01437	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0143a	e8 00 00 00 00	 call	 ?SetFont@FontMgr@@QAEXH@Z ; FontMgr::SetFont

; 459  : 	fntMgr->DrawTextBox();

  0143f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01442	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01445	e8 00 00 00 00	 call	 ?DrawTextBox@FontMgr@@QAEXXZ ; FontMgr::DrawTextBox

; 460  : 
; 461  :    if (visible) {

  0144a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0144d	83 79 44 00	 cmp	 DWORD PTR [ecx+68], 0
  01451	74 12		 je	 SHORT $L63105

; 462  : 	   graphMgr->UpdateScreenItem(si);

  01453	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01456	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  01459	50		 push	 eax
  0145a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01460	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem
$L63105:

; 464  : }

  01465	8b e5		 mov	 esp, ebp
  01467	5d		 pop	 ebp
  01468	c3		 ret	 0
?ReDrawText@SOL_Window@@UAEXXZ ENDP			; SOL_Window::ReDrawText
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@HHHH@Z				; SOL_Rect::SOL_Rect
PUBLIC	??0SOL_Rect@@QAE@ABV0@@Z			; SOL_Rect::SOL_Rect
EXTRN	?DeleteScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@H@Z:NEAR ; GraphicsMgr::DeleteScreenItem
_TEXT	SEGMENT
$T63985 = -20
_this$ = -24
?Hide@SOL_Window@@UAEXXZ PROC NEAR			; SOL_Window::Hide

; 469  : {

  01469	55		 push	 ebp
  0146a	8b ec		 mov	 ebp, esp
  0146c	83 ec 18	 sub	 esp, 24			; 00000018H
  0146f	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 470  : 	if (!visible) return;

  01472	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01475	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  01479	75 02		 jne	 SHORT $L63109
  0147b	eb 60		 jmp	 SHORT $L63108
$L63109:

; 471  : 	visible = False;

  0147d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01480	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 472  : 	graphMgr->DeleteScreenItem(si,plane->Id());

  01487	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0148a	8b 4a 70	 mov	 ecx, DWORD PTR [edx+112]
  0148d	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id
  01492	50		 push	 eax
  01493	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01496	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  01499	51		 push	 ecx
  0149a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  014a0	e8 00 00 00 00	 call	 ?DeleteScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@H@Z ; GraphicsMgr::DeleteScreenItem

; 473  : 	graphMgr->FrameOut();

  014a5	6a ff		 push	 -1
  014a7	6a ff		 push	 -1
  014a9	6a 00		 push	 0
  014ab	6a 00		 push	 0
  014ad	8d 4d ec	 lea	 ecx, DWORD PTR $T63985[ebp]
  014b0	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  014b5	83 ec 10	 sub	 esp, 16			; 00000010H
  014b8	8b cc		 mov	 ecx, esp
  014ba	50		 push	 eax
  014bb	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  014c0	6a 01		 push	 1
  014c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  014c8	8b 02		 mov	 eax, DWORD PTR [edx]
  014ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  014d0	ff 50 14	 call	 DWORD PTR [eax+20]

; 474  :    si = NULL;

  014d3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  014d6	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
$L63108:

; 475  : }

  014dd	8b e5		 mov	 esp, ebp
  014df	5d		 pop	 ebp
  014e0	c3		 ret	 0
?Hide@SOL_Window@@UAEXXZ ENDP				; SOL_Window::Hide
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
??0SOL_Rect@@QAE@HHHH@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 56   : 	A.x = xa;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 	A.y = ya;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00028	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 	B.x = xb;

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  00031	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 59   : 	B.y = yb;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  0003a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 60   : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
??0SOL_Rect@@QAE@HHHH@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_Rect@@QAE@ABV0@@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0SOL_Rect@@QAE@ABV0@@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
PUBLIC	?Offset@SOL_Rect@@QAEXHH@Z			; SOL_Rect::Offset
_TEXT	SEGMENT
_pt$ = 8
_this$ = -4
?Move@SOL_Window@@UAEXVSOL_Point@@@Z PROC NEAR		; SOL_Window::Move

; 480  : {

  014e1	55		 push	 ebp
  014e2	8b ec		 mov	 ebp, esp
  014e4	51		 push	 ecx
  014e5	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	window.Offset(pt.x - window.A.x,pt.y - window.A.y);

  014e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  014eb	8b 4d 0c	 mov	 ecx, DWORD PTR _pt$[ebp+4]
  014ee	2b 48 54	 sub	 ecx, DWORD PTR [eax+84]
  014f1	51		 push	 ecx
  014f2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  014f5	8b 45 08	 mov	 eax, DWORD PTR _pt$[ebp]
  014f8	2b 42 50	 sub	 eax, DWORD PTR [edx+80]
  014fb	50		 push	 eax
  014fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014ff	83 c1 50	 add	 ecx, 80			; 00000050H
  01502	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 482  :    pos = pt;

  01507	8d 4d 08	 lea	 ecx, DWORD PTR _pt$[ebp]
  0150a	51		 push	 ecx
  0150b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0150e	83 c1 74	 add	 ecx, 116		; 00000074H
  01511	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 483  :    if (visible) {

  01516	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01519	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  0151d	74 21		 je	 SHORT $L63116

; 484  : 	   si->pos = pt;

  0151f	8d 45 08	 lea	 eax, DWORD PTR _pt$[ebp]
  01522	50		 push	 eax
  01523	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01526	8b 49 4c	 mov	 ecx, DWORD PTR [ecx+76]
  01529	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 485  : 	   graphMgr->UpdateScreenItem(si);

  0152e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01531	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  01534	50		 push	 eax
  01535	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0153b	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem
$L63116:

; 487  : }

  01540	8b e5		 mov	 esp, ebp
  01542	5d		 pop	 ebp
  01543	c2 08 00	 ret	 8
?Move@SOL_Window@@UAEXVSOL_Point@@@Z ENDP		; SOL_Window::Move
_TEXT	ENDS
;	COMDAT ?Offset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT
_dx$ = 8
_dy$ = 12
_this$ = -4
?Offset@SOL_Rect@@QAEXHH@Z PROC NEAR			; SOL_Rect::Offset, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 318  : 	A.x += dx;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	03 4d 08	 add	 ecx, DWORD PTR _dx$[ebp]
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx

; 319  : 	B.x += dx;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001a	03 4d 08	 add	 ecx, DWORD PTR _dx$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 320  : 	A.y += dy;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	03 4d 0c	 add	 ecx, DWORD PTR _dy$[ebp]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 321  : 	B.y += dy;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00038	03 4d 0c	 add	 ecx, DWORD PTR _dy$[ebp]
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 322  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?Offset@SOL_Rect@@QAEXHH@Z ENDP				; SOL_Rect::Offset
_TEXT	ENDS
PUBLIC	?IsEmpty@SOL_Rect@@QBEHXZ			; SOL_Rect::IsEmpty
EXTRN	?CharWidth@FontMgr@@QAEEEH@Z:NEAR		; FontMgr::CharWidth
EXTRN	?ResizeBitMap@FontMgr@@QAEXVSOL_Rect@@H@Z:NEAR	; FontMgr::ResizeBitMap
_TEXT	SEGMENT
_newWindow$ = 8
_this$ = -60
_tempWindow$63122 = -32
_newTextBox$63123 = -16
_indices$63125 = -36
_fonts$63127 = -40
_colors$63129 = -52
_modes$63131 = -48
_length$63137 = -44
?ResizeWindow@SOL_Window@@UAEXAAVSOL_Rect@@@Z PROC NEAR	; SOL_Window::ResizeWindow

; 491  : {

  01546	55		 push	 ebp
  01547	8b ec		 mov	 ebp, esp
  01549	83 ec 3c	 sub	 esp, 60			; 0000003cH
  0154c	56		 push	 esi
  0154d	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 492  : 	if (!newWindow.IsEmpty())	{

  01550	8b 4d 08	 mov	 ecx, DWORD PTR _newWindow$[ebp]
  01553	e8 00 00 00 00	 call	 ?IsEmpty@SOL_Rect@@QBEHXZ ; SOL_Rect::IsEmpty
  01558	85 c0		 test	 eax, eax
  0155a	0f 85 a2 02 00
	00		 jne	 $L63139

; 493  : 
; 494  : 	   SOL_Rect tempWindow = newWindow;

  01560	8b 45 08	 mov	 eax, DWORD PTR _newWindow$[ebp]
  01563	50		 push	 eax
  01564	8d 4d e0	 lea	 ecx, DWORD PTR _tempWindow$63122[ebp]
  01567	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 495  :  		// The new window will work
; 496  :   	   newWindow.Scale(xRes,SCIRESX,yRes,SCIRESY);

  0156c	68 e0 01 00 00	 push	 480			; 000001e0H
  01571	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01574	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  01577	52		 push	 edx
  01578	68 80 02 00 00	 push	 640			; 00000280H
  0157d	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01580	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  01583	51		 push	 ecx
  01584	8b 4d 08	 mov	 ecx, DWORD PTR _newWindow$[ebp]
  01587	e8 00 00 00 00	 call	 ?Scale@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Scale

; 497  : 
; 498  : 		// Calculate the new textBox
; 499  : 		SOL_Rect newTextBox(textBox.A.x,
; 500  : 								  textBox.A.y,
; 501  : 								  newWindow.Xlen()-3,
; 502  : 								  newWindow.Ylen()-3
; 503  : 								  );

  0158c	8b 4d 08	 mov	 ecx, DWORD PTR _newWindow$[ebp]
  0158f	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  01594	83 e8 03	 sub	 eax, 3
  01597	50		 push	 eax
  01598	8b 4d 08	 mov	 ecx, DWORD PTR _newWindow$[ebp]
  0159b	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  015a0	83 e8 03	 sub	 eax, 3
  015a3	50		 push	 eax
  015a4	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  015a7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  015aa	50		 push	 eax
  015ab	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  015ae	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  015b1	52		 push	 edx
  015b2	8d 4d f0	 lea	 ecx, DWORD PTR _newTextBox$63123[ebp]
  015b5	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 506  : 			(newTextBox.Ylen() > (fntMgr->PointSize(False) + 3))		&&
; 507  : 			(newTextBox.Ylen() < yRes)								&&
; 508  : 			(newTextBox.Xlen() > (5*fntMgr->CharWidth('M',False)))	&&
; 509  : 			(newTextBox.Xlen() < xRes)
; 510  : 			) {

  015ba	8d 4d f0	 lea	 ecx, DWORD PTR _newTextBox$63123[ebp]
  015bd	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  015c2	8b f0		 mov	 esi, eax
  015c4	6a 00		 push	 0
  015c6	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  015c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  015cc	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  015d1	83 c0 03	 add	 eax, 3
  015d4	3b f0		 cmp	 esi, eax
  015d6	0f 8e 26 02 00
	00		 jle	 $L63139
  015dc	8d 4d f0	 lea	 ecx, DWORD PTR _newTextBox$63123[ebp]
  015df	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  015e4	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  015e7	3b 41 40	 cmp	 eax, DWORD PTR [ecx+64]
  015ea	0f 8d 12 02 00
	00		 jge	 $L63139
  015f0	8d 4d f0	 lea	 ecx, DWORD PTR _newTextBox$63123[ebp]
  015f3	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  015f8	8b f0		 mov	 esi, eax
  015fa	6a 00		 push	 0
  015fc	6a 4d		 push	 77			; 0000004dH
  015fe	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  01601	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01604	e8 00 00 00 00	 call	 ?CharWidth@FontMgr@@QAEEEH@Z ; FontMgr::CharWidth
  01609	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0160e	6b c0 05	 imul	 eax, 5
  01611	3b f0		 cmp	 esi, eax
  01613	0f 8e e9 01 00
	00		 jle	 $L63139
  01619	8d 4d f0	 lea	 ecx, DWORD PTR _newTextBox$63123[ebp]
  0161c	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  01621	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01624	3b 41 3c	 cmp	 eax, DWORD PTR [ecx+60]
  01627	0f 8d d5 01 00
	00		 jge	 $L63139

; 511  : 
; 512  :          window = tempWindow;

  0162d	8d 55 e0	 lea	 edx, DWORD PTR _tempWindow$63122[ebp]
  01630	52		 push	 edx
  01631	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01634	83 c1 50	 add	 ecx, 80			; 00000050H
  01637	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 513  : 			scaleWindow = newWindow;

  0163c	8b 45 08	 mov	 eax, DWORD PTR _newWindow$[ebp]
  0163f	50		 push	 eax
  01640	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01643	83 c1 60	 add	 ecx, 96			; 00000060H
  01646	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 514  : 			textBox = newTextBox;

  0164b	8d 4d f0	 lea	 ecx, DWORD PTR _newTextBox$63123[ebp]
  0164e	51		 push	 ecx
  0164f	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01652	83 c1 10	 add	 ecx, 16			; 00000010H
  01655	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 515  : 
; 516  : 			// Get new line indices
; 517  : 			GetLineIndices();

  0165a	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  0165d	8b 02		 mov	 eax, DWORD PTR [edx]
  0165f	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01662	ff 50 34	 call	 DWORD PTR [eax+52]

; 518  : 
; 519  : 			// Calculate the workText so that the old Start
; 520  : 			// character is still visible in the new window
; 521  : 			uint* indices = (uint*) *lineIndicesID;

  01665	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01668	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0166e	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01673	89 45 dc	 mov	 DWORD PTR _indices$63125[ebp], eax

; 522  : 			uint* fonts = (uint*) *fontIndicesID;

  01676	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01679	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  0167f	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01684	89 45 d8	 mov	 DWORD PTR _fonts$63127[ebp], eax

; 523  : 			uint* colors = (uint*) *colorIndicesID;

  01687	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0168a	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  01690	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01695	89 45 cc	 mov	 DWORD PTR _colors$63129[ebp], eax

; 524  : 			uint* modes = (uint*) *modeIndicesID;

  01698	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0169b	81 c1 8a 00 00
	00		 add	 ecx, 138		; 0000008aH
  016a1	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  016a6	89 45 d0	 mov	 DWORD PTR _modes$63131[ebp], eax

; 525  : 			startLine = 0;

  016a9	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  016ac	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
$L63134:

; 526  : 			while (indices[startLine+1] <= startChar) startLine++;

  016b3	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  016b6	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  016b9	8b 4d dc	 mov	 ecx, DWORD PTR _indices$63125[ebp]
  016bc	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  016bf	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]
  016c3	3b 42 34	 cmp	 eax, DWORD PTR [edx+52]
  016c6	77 11		 ja	 SHORT $L63135
  016c8	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  016cb	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  016ce	83 c2 01	 add	 edx, 1
  016d1	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  016d4	89 50 24	 mov	 DWORD PTR [eax+36], edx
  016d7	eb da		 jmp	 SHORT $L63134
$L63135:

; 527  : 			lastLine = startLine + linesPerPage - 1;

  016d9	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  016dc	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  016df	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  016e2	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  016e5	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  016e9	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  016ec	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 528  : 			if (lastLine > maxLines) lastLine = maxLines;

  016ef	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  016f2	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  016f5	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  016f8	3b 42 30	 cmp	 eax, DWORD PTR [edx+48]
  016fb	7e 0c		 jle	 SHORT $L63136
  016fd	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01700	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  01703	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  01706	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$L63136:

; 529  : 			startChar = indices[startLine];

  01709	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0170c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0170f	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01712	8b 4d dc	 mov	 ecx, DWORD PTR _indices$63125[ebp]
  01715	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  01718	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 530  : 			lastChar = indices[lastLine+1] - 1;

  0171b	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  0171e	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  01721	8b 55 dc	 mov	 edx, DWORD PTR _indices$63125[ebp]
  01724	8b 44 8a 04	 mov	 eax, DWORD PTR [edx+ecx*4+4]
  01728	83 e8 01	 sub	 eax, 1
  0172b	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0172e	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 531  : 			int length = lastChar - startChar + 1;

  01731	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  01734	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01737	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  0173a	2b 48 34	 sub	 ecx, DWORD PTR [eax+52]
  0173d	83 c1 01	 add	 ecx, 1
  01740	89 4d d4	 mov	 DWORD PTR _length$63137[ebp], ecx

; 532  : 			strncpy(*workText,&text[startChar],length);

  01743	8b 55 d4	 mov	 edx, DWORD PTR _length$63137[ebp]
  01746	52		 push	 edx
  01747	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  0174a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0174d	51		 push	 ecx
  0174e	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01751	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01754	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  01759	50		 push	 eax
  0175a	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0175d	83 c1 48	 add	 ecx, 72			; 00000048H
  01760	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  01765	50		 push	 eax
  01766	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0176c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 533  : 			// insert terminator
; 534  : 			workText[length] = 0;

  0176f	8b 55 d4	 mov	 edx, DWORD PTR _length$63137[ebp]
  01772	52		 push	 edx
  01773	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01776	83 c1 48	 add	 ecx, 72			; 00000048H
  01779	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  0177e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 535  : 			// Rebuild the fontBitmap
; 536  : 			fntMgr->SetFont(fonts[startLine]);

  01781	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01784	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  01787	8b 55 d8	 mov	 edx, DWORD PTR _fonts$63127[ebp]
  0178a	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0178d	50		 push	 eax
  0178e	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01791	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  01794	e8 00 00 00 00	 call	 ?SetFont@FontMgr@@QAEXH@Z ; FontMgr::SetFont

; 537  : 			fntMgr->SetColor(colors[startLine]);

  01799	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  0179c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0179f	8b 4d cc	 mov	 ecx, DWORD PTR _colors$63129[ebp]
  017a2	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  017a5	52		 push	 edx
  017a6	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  017a9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  017ac	e8 00 00 00 00	 call	 ?SetColor@FontMgr@@QAEXH@Z ; FontMgr::SetColor

; 538  : 			fntMgr->SetMode(modes[startLine]);

  017b1	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  017b4	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  017b7	8b 45 d0	 mov	 eax, DWORD PTR _modes$63131[ebp]
  017ba	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  017bd	51		 push	 ecx
  017be	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  017c1	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  017c4	e8 00 00 00 00	 call	 ?SetMode@FontMgr@@QAEXH@Z ; FontMgr::SetMode

; 539  : 			fntMgr->ResizeBitMap(scaleWindow,False);

  017c9	6a 00		 push	 0
  017cb	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  017ce	83 c0 60	 add	 eax, 96			; 00000060H
  017d1	83 ec 10	 sub	 esp, 16			; 00000010H
  017d4	8b cc		 mov	 ecx, esp
  017d6	50		 push	 eax
  017d7	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  017dc	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  017df	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  017e2	e8 00 00 00 00	 call	 ?ResizeBitMap@FontMgr@@QAEXVSOL_Rect@@H@Z ; FontMgr::ResizeBitMap

; 540  : 			// Show the new bit map
; 541  :          if (visible) {

  017e7	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  017ea	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  017ee	74 12		 je	 SHORT $L63139

; 542  : 			   graphMgr->UpdateScreenItem(si);

  017f0	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  017f3	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  017f6	51		 push	 ecx
  017f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  017fd	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem
$L63139:

; 546  : }

  01802	5e		 pop	 esi
  01803	8b e5		 mov	 esp, ebp
  01805	5d		 pop	 ebp
  01806	c2 04 00	 ret	 4
?ResizeWindow@SOL_Window@@UAEXAAVSOL_Rect@@@Z ENDP	; SOL_Window::ResizeWindow
_TEXT	ENDS
;	COMDAT ?IsEmpty@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsEmpty@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::IsEmpty, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 	if (B.x < A.x  ||  B.y < A.y)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00010	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00012	7c 0e		 jl	 SHORT $L56110
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0001d	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00020	7d 07		 jge	 SHORT $L56109
$L56110:

; 118  : 		return True;

  00022	b8 01 00 00 00	 mov	 eax, 1
  00027	eb 02		 jmp	 SHORT $L56108
$L56109:

; 119  : 	return False;

  00029	33 c0		 xor	 eax, eax
$L56108:

; 120  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?IsEmpty@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::IsEmpty
_TEXT	ENDS
PUBLIC	?GetFont@FontMgr@@QBEHXZ			; FontMgr::GetFont
PUBLIC	?SetText@FontMgr@@QAEXVMemID@@@Z		; FontMgr::SetText
EXTRN	?Realloc@MemoryMgr@@QAEXGI@Z:NEAR		; MemoryMgr::Realloc
EXTRN	??4TextID@@QAEAAV0@PBD@Z:NEAR			; TextID::operator=
_DATA	SEGMENT
	ORG $+1
$SG63161 DB	'Illegal font size font = %d pointSize = %d, should be %d'
	DB	'.', 00H
	ORG $+2
$SG63162 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Wind'
	DB	'ow.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T63996 = -44
_theText$ = 8
_showIt$ = 12
_theStartChar$ = 16
_this$ = -48
_indices$ = -4
_fonts$ = -8
_colors$ = -20
_modes$ = -16
_length$ = -12
?SetText@SOL_Window@@UAEXPADHH@Z PROC NEAR		; SOL_Window::SetText

; 550  : {

  01809	55		 push	 ebp
  0180a	8b ec		 mov	 ebp, esp
  0180c	83 ec 30	 sub	 esp, 48			; 00000030H
  0180f	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 551  : 	if(theText != NULL)

  01812	83 7d 08 00	 cmp	 DWORD PTR _theText$[ebp], 0
  01816	74 0f		 je	 SHORT $L63146

; 552  : 		text = theText;

  01818	8b 45 08	 mov	 eax, DWORD PTR _theText$[ebp]
  0181b	50		 push	 eax
  0181c	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0181f	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01822	e8 00 00 00 00	 call	 ??4TextID@@QAEAAV0@PBD@Z ; TextID::operator=
$L63146:

; 553  : 
; 554  : 	textSize = strlen(*text); 

  01827	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0182a	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0182d	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  01832	50		 push	 eax
  01833	e8 00 00 00 00	 call	 _strlen
  01838	83 c4 04	 add	 esp, 4
  0183b	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0183e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 555  : 	memMgr->Realloc(workText,textSize+1);

  01841	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01844	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01847	83 c0 01	 add	 eax, 1
  0184a	50		 push	 eax
  0184b	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0184e	83 c1 48	 add	 ecx, 72			; 00000048H
  01851	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01856	50		 push	 eax
  01857	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  0185d	e8 00 00 00 00	 call	 ?Realloc@MemoryMgr@@QAEXGI@Z ; MemoryMgr::Realloc

; 556  : 
; 557  : 	// Get the line indices for the text
; 558  : 	GetLineIndices();

  01862	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01865	8b 11		 mov	 edx, DWORD PTR [ecx]
  01867	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0186a	ff 52 34	 call	 DWORD PTR [edx+52]

; 559  : 
; 560  : 	uint* indices = (uint*) *lineIndicesID;

  0186d	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01870	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  01876	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0187b	89 45 fc	 mov	 DWORD PTR _indices$[ebp], eax

; 561  : 	uint* fonts = (uint*) *fontIndicesID;

  0187e	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01881	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  01887	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0188c	89 45 f8	 mov	 DWORD PTR _fonts$[ebp], eax

; 562  : 	uint* colors = (uint*) *colorIndicesID;

  0188f	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01892	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  01898	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0189d	89 45 ec	 mov	 DWORD PTR _colors$[ebp], eax

; 563  : 	uint* modes = (uint*) *modeIndicesID;

  018a0	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  018a3	81 c1 8a 00 00
	00		 add	 ecx, 138		; 0000008aH
  018a9	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  018ae	89 45 f0	 mov	 DWORD PTR _modes$[ebp], eax

; 564  : 
; 565  : 	startLine = 1;

  018b1	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  018b4	c7 40 24 01 00
	00 00		 mov	 DWORD PTR [eax+36], 1
$L63156:

; 566  : 	while (indices[startLine+1] <= theStartChar) 

  018bb	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  018be	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  018c1	8b 45 fc	 mov	 eax, DWORD PTR _indices$[ebp]
  018c4	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  018c8	3b 4d 10	 cmp	 ecx, DWORD PTR _theStartChar$[ebp]
  018cb	77 11		 ja	 SHORT $L63157

; 567  : 		startLine++;

  018cd	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  018d0	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  018d3	83 c0 01	 add	 eax, 1
  018d6	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  018d9	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  018dc	eb dd		 jmp	 SHORT $L63156
$L63157:

; 568  : 
; 569  : 	lastLine = startLine + linesPerPage - 1;

  018de	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  018e1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  018e4	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  018e7	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  018ea	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  018ee	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  018f1	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 570  : 
; 571  : 	if (lastLine > maxLines) 

  018f4	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  018f7	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  018fa	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  018fd	3b 48 30	 cmp	 ecx, DWORD PTR [eax+48]
  01900	7e 0c		 jle	 SHORT $L63158

; 572  : 		lastLine = maxLines;

  01902	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01905	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  01908	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0190b	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
$L63158:

; 573  : 
; 574  : 	startChar = indices[startLine];

  0190e	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01911	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01914	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01917	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0191a	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0191d	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 575  : 	lastChar = indices[lastLine+1] - 1;

  01920	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01923	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  01926	8b 45 fc	 mov	 eax, DWORD PTR _indices$[ebp]
  01929	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  0192d	83 e9 01	 sub	 ecx, 1
  01930	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01933	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 576  : 
; 577  : 	int length = lastChar - startChar + 1;

  01936	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  01939	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0193c	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  0193f	2b 51 34	 sub	 edx, DWORD PTR [ecx+52]
  01942	83 c2 01	 add	 edx, 1
  01945	89 55 f4	 mov	 DWORD PTR _length$[ebp], edx

; 578  : 	strncpy(*workText,&text[startChar],length);

  01948	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  0194b	50		 push	 eax
  0194c	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0194f	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01952	52		 push	 edx
  01953	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01956	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01959	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  0195e	50		 push	 eax
  0195f	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01962	83 c1 48	 add	 ecx, 72			; 00000048H
  01965	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0196a	50		 push	 eax
  0196b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  01971	83 c4 0c	 add	 esp, 12			; 0000000cH

; 579  : 
; 580  : 	// insert terminator
; 581  : 	workText[length] = 0;

  01974	8b 45 f4	 mov	 eax, DWORD PTR _length$[ebp]
  01977	50		 push	 eax
  01978	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0197b	83 c1 48	 add	 ecx, 72			; 00000048H
  0197e	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  01983	c6 00 00	 mov	 BYTE PTR [eax], 0

; 582  : 	fntMgr->SetFont(fonts[startLine]);

  01986	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01989	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0198c	8b 45 f8	 mov	 eax, DWORD PTR _fonts$[ebp]
  0198f	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  01992	51		 push	 ecx
  01993	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01996	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01999	e8 00 00 00 00	 call	 ?SetFont@FontMgr@@QAEXH@Z ; FontMgr::SetFont

; 583  : 
; 584  :    if (pointSize != fntMgr->PointSize(False))

  0199e	6a 00		 push	 0
  019a0	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  019a3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  019a6	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  019ab	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  019ae	39 81 9c 00 00
	00		 cmp	 DWORD PTR [ecx+156], eax
  019b4	74 43		 je	 SHORT $L63160

; 586  :                     fntMgr->GetFont(),fntMgr->PointSize(False),pointSize);

  019b6	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  019b9	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  019bf	50		 push	 eax
  019c0	6a 00		 push	 0
  019c2	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  019c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  019c8	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  019cd	50		 push	 eax
  019ce	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  019d1	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  019d4	e8 00 00 00 00	 call	 ?GetFont@FontMgr@@QBEHXZ ; FontMgr::GetFont
  019d9	50		 push	 eax
  019da	68 00 00 00 00	 push	 OFFSET FLAT:$SG63161
  019df	68 49 02 00 00	 push	 585			; 00000249H
  019e4	68 00 00 00 00	 push	 OFFSET FLAT:$SG63162
  019e9	6a 61		 push	 97			; 00000061H
  019eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  019f0	50		 push	 eax
  019f1	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  019f6	83 c4 20	 add	 esp, 32			; 00000020H
$L63160:

; 587  : 
; 588  : 	colors = (uint*) *colorIndicesID;

  019f9	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  019fc	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  01a02	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01a07	89 45 ec	 mov	 DWORD PTR _colors$[ebp], eax

; 589  : 	modes = (uint*) *modeIndicesID;

  01a0a	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a0d	81 c1 8a 00 00
	00		 add	 ecx, 138		; 0000008aH
  01a13	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01a18	89 45 f0	 mov	 DWORD PTR _modes$[ebp], eax

; 590  : 
; 591  : 	if ( visible && showIt ) {

  01a1b	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a1e	83 79 44 00	 cmp	 DWORD PTR [ecx+68], 0
  01a22	0f 84 b3 00 00
	00		 je	 $L63165
  01a28	83 7d 0c 00	 cmp	 DWORD PTR _showIt$[ebp], 0
  01a2c	0f 84 a9 00 00
	00		 je	 $L63165

; 592  : 		fntMgr->SetColor(colors[startLine]);

  01a32	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01a35	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01a38	8b 4d ec	 mov	 ecx, DWORD PTR _colors$[ebp]
  01a3b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  01a3e	52		 push	 edx
  01a3f	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  01a42	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01a45	e8 00 00 00 00	 call	 ?SetColor@FontMgr@@QAEXH@Z ; FontMgr::SetColor

; 593  : 		fntMgr->SetMode(modes[startLine]);

  01a4a	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a4d	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  01a50	8b 45 f0	 mov	 eax, DWORD PTR _modes$[ebp]
  01a53	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  01a56	51		 push	 ecx
  01a57	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01a5a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01a5d	e8 00 00 00 00	 call	 ?SetMode@FontMgr@@QAEXH@Z ; FontMgr::SetMode

; 594  : 		fntMgr->SetText(workText);

  01a62	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  01a65	83 c0 48	 add	 eax, 72			; 00000048H
  01a68	51		 push	 ecx
  01a69	8b cc		 mov	 ecx, esp
  01a6b	50		 push	 eax
  01a6c	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01a71	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a74	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  01a77	e8 00 00 00 00	 call	 ?SetText@FontMgr@@QAEXVMemID@@@Z ; FontMgr::SetText

; 595  : 		fntMgr->Erase(textBox,False);

  01a7c	6a 00		 push	 0
  01a7e	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01a81	83 c2 10	 add	 edx, 16			; 00000010H
  01a84	52		 push	 edx
  01a85	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  01a88	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01a8b	e8 00 00 00 00	 call	 ?Erase@FontMgr@@QAEXAAVSOL_Rect@@H@Z ; FontMgr::Erase

; 596  : 		fntMgr->DrawTextBox();

  01a90	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a93	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  01a96	e8 00 00 00 00	 call	 ?DrawTextBox@FontMgr@@QAEXXZ ; FontMgr::DrawTextBox

; 597  : 
; 598  : 		graphMgr->UpdateScreenItem(si);

  01a9b	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01a9e	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  01aa1	50		 push	 eax
  01aa2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01aa8	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem

; 599  : 		graphMgr->FrameOut();

  01aad	6a ff		 push	 -1
  01aaf	6a ff		 push	 -1
  01ab1	6a 00		 push	 0
  01ab3	6a 00		 push	 0
  01ab5	8d 4d d4	 lea	 ecx, DWORD PTR $T63996[ebp]
  01ab8	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  01abd	83 ec 10	 sub	 esp, 16			; 00000010H
  01ac0	8b cc		 mov	 ecx, esp
  01ac2	50		 push	 eax
  01ac3	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  01ac8	6a 01		 push	 1
  01aca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01ad0	8b 11		 mov	 edx, DWORD PTR [ecx]
  01ad2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01ad8	ff 52 14	 call	 DWORD PTR [edx+20]
$L63165:

; 601  : }

  01adb	8b e5		 mov	 esp, ebp
  01add	5d		 pop	 ebp
  01ade	c2 0c 00	 ret	 12			; 0000000cH
?SetText@SOL_Window@@UAEXPADHH@Z ENDP			; SOL_Window::SetText
_TEXT	ENDS
;	COMDAT ?GetFont@FontMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetFont@FontMgr@@QBEHXZ PROC NEAR			; FontMgr::GetFont, COMDAT

; 118  : 	int 				GetFont() const {return font;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 48 28	 mov	 cx, WORD PTR [eax+40]
  00010	8b c1		 mov	 eax, ecx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?GetFont@FontMgr@@QBEHXZ ENDP				; FontMgr::GetFont
_TEXT	ENDS
;	COMDAT ?SetText@FontMgr@@QAEXVMemID@@@Z
_TEXT	SEGMENT
_theText$ = 8
_this$ = -4
?SetText@FontMgr@@QAEXVMemID@@@Z PROC NEAR		; FontMgr::SetText, COMDAT

; 123  : 	void 				SetText(MemID theText) {text = theText;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _theText$[ebp]
  0000e	66 89 48 0e	 mov	 WORD PTR [eax+14], cx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?SetText@FontMgr@@QAEXVMemID@@@Z ENDP			; FontMgr::SetText
_TEXT	ENDS
PUBLIC	??8MemID@@QBEHABV0@@Z				; MemID::operator==
EXTRN	?Realloc@MemID@@QBEPAXI@Z:NEAR			; MemID::Realloc
_DATA	SEGMENT
	ORG $+1
$SG63207 DB	'Illegal font size font = %d pointSize = %d, should be %d'
	DB	00H
	ORG $+3
$SG63208 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Wind'
	DB	'ow.cpp', 00H
	ORG $+1
$SG63215 DB	'Illegal font size font = %d pointSize = %d, should be %d'
	DB	00H
	ORG $+3
$SG63216 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Wind'
	DB	'ow.cpp', 00H
	ORG $+1
$SG63220 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Wind'
	DB	'ow.cpp', 00H
	ORG $+1
$SG63236 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Wind'
	DB	'ow.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T64000 = -64
$T64001 = -68
$T64002 = -72
$T64003 = -76
_this$ = -88
_lineCount$ = -40
_indexMemory$ = -36
_fontIndexMemory$ = -60
_colorIndexMemory$ = -48
_modeIndexMemory$ = -32
_indices$ = -24
_fonts$ = -28
_colors$ = -56
_modes$ = -44
_line$ = -4
_r$ = -20
_start$ = -52
?GetLineIndices@SOL_Window@@MAEXXZ PROC NEAR		; SOL_Window::GetLineIndices

; 605  : {

  01ae1	55		 push	 ebp
  01ae2	8b ec		 mov	 ebp, esp
  01ae4	83 ec 58	 sub	 esp, 88			; 00000058H
  01ae7	89 4d a8	 mov	 DWORD PTR _this$[ebp], ecx

; 606  : 	// Get the line indices for text using the fntMgr
; 607  : 	fntMgr->SetFont(font);

  01aea	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01aed	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01af3	51		 push	 ecx
  01af4	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01af7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01afa	e8 00 00 00 00	 call	 ?SetFont@FontMgr@@QAEXH@Z ; FontMgr::SetFont

; 608  : 	fntMgr->SetColor(fore);

  01aff	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01b02	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  01b08	51		 push	 ecx
  01b09	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01b0c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01b0f	e8 00 00 00 00	 call	 ?SetColor@FontMgr@@QAEXH@Z ; FontMgr::SetColor

; 609  : 	fntMgr->SetMode(mode);

  01b14	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01b17	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  01b1d	51		 push	 ecx
  01b1e	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01b21	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01b24	e8 00 00 00 00	 call	 ?SetMode@FontMgr@@QAEXH@Z ; FontMgr::SetMode

; 610  : 
; 611  : 	// Allocate some memory
; 612  : 	uint lineCount = 100;

  01b29	c7 45 d8 64 00
	00 00		 mov	 DWORD PTR _lineCount$[ebp], 100 ; 00000064H

; 613  : 	MemID indexMemory, fontIndexMemory, colorIndexMemory, modeIndexMemory;

  01b30	8d 4d dc	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  01b33	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  01b38	8d 4d c4	 lea	 ecx, DWORD PTR _fontIndexMemory$[ebp]
  01b3b	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  01b40	8d 4d d0	 lea	 ecx, DWORD PTR _colorIndexMemory$[ebp]
  01b43	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  01b48	8d 4d e0	 lea	 ecx, DWORD PTR _modeIndexMemory$[ebp]
  01b4b	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 614  : 
; 615  : 	if ( lineIndicesID == (MemID)0 ) {

  01b50	6a 00		 push	 0
  01b52	8d 4d c0	 lea	 ecx, DWORD PTR $T64000[ebp]
  01b55	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01b5a	50		 push	 eax
  01b5b	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01b5e	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  01b64	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  01b69	85 c0		 test	 eax, eax
  01b6b	74 24		 je	 SHORT $L63179

; 616  : 		indexMemory.Get(MemWindowEntry,(lineCount + 2)*sizeof(uint));

  01b6d	6a 00		 push	 0
  01b6f	6a 00		 push	 0
  01b71	6a 00		 push	 0
  01b73	6a 00		 push	 0
  01b75	68 00 02 00 00	 push	 512			; 00000200H
  01b7a	8b 45 d8	 mov	 eax, DWORD PTR _lineCount$[ebp]
  01b7d	8d 0c 85 08 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+8]
  01b84	51		 push	 ecx
  01b85	6a 53		 push	 83			; 00000053H
  01b87	8d 4d dc	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  01b8a	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 617  : 	} else {

  01b8f	eb 0e		 jmp	 SHORT $L63181
$L63179:

; 618  : 		indexMemory = lineIndicesID;

  01b91	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01b94	66 8b 82 84 00
	00 00		 mov	 ax, WORD PTR [edx+132]
  01b9b	66 89 45 dc	 mov	 WORD PTR _indexMemory$[ebp], ax
$L63181:

; 620  : 
; 621  : 	if ( fontIndicesID == (MemID)0 ) {

  01b9f	6a 00		 push	 0
  01ba1	8d 4d bc	 lea	 ecx, DWORD PTR $T64001[ebp]
  01ba4	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01ba9	50		 push	 eax
  01baa	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01bad	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  01bb3	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  01bb8	85 c0		 test	 eax, eax
  01bba	74 24		 je	 SHORT $L63184

; 622  : 		fontIndexMemory.Get(MemWindowEntry,(lineCount + 2)*sizeof(uint));

  01bbc	6a 00		 push	 0
  01bbe	6a 00		 push	 0
  01bc0	6a 00		 push	 0
  01bc2	6a 00		 push	 0
  01bc4	68 00 02 00 00	 push	 512			; 00000200H
  01bc9	8b 4d d8	 mov	 ecx, DWORD PTR _lineCount$[ebp]
  01bcc	8d 14 8d 08 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+8]
  01bd3	52		 push	 edx
  01bd4	6a 53		 push	 83			; 00000053H
  01bd6	8d 4d c4	 lea	 ecx, DWORD PTR _fontIndexMemory$[ebp]
  01bd9	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 623  : 	} else {

  01bde	eb 0e		 jmp	 SHORT $L63186
$L63184:

; 624  : 		fontIndexMemory = fontIndicesID;

  01be0	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01be3	66 8b 88 86 00
	00 00		 mov	 cx, WORD PTR [eax+134]
  01bea	66 89 4d c4	 mov	 WORD PTR _fontIndexMemory$[ebp], cx
$L63186:

; 626  : 
; 627  : 	if ( colorIndicesID == (MemID)0 ) {

  01bee	6a 00		 push	 0
  01bf0	8d 4d b8	 lea	 ecx, DWORD PTR $T64002[ebp]
  01bf3	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01bf8	50		 push	 eax
  01bf9	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01bfc	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  01c02	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  01c07	85 c0		 test	 eax, eax
  01c09	74 24		 je	 SHORT $L63189

; 628  : 		colorIndexMemory.Get(MemWindowEntry,(lineCount + 2)*sizeof(uint));

  01c0b	6a 00		 push	 0
  01c0d	6a 00		 push	 0
  01c0f	6a 00		 push	 0
  01c11	6a 00		 push	 0
  01c13	68 00 02 00 00	 push	 512			; 00000200H
  01c18	8b 55 d8	 mov	 edx, DWORD PTR _lineCount$[ebp]
  01c1b	8d 04 95 08 00
	00 00		 lea	 eax, DWORD PTR [edx*4+8]
  01c22	50		 push	 eax
  01c23	6a 53		 push	 83			; 00000053H
  01c25	8d 4d d0	 lea	 ecx, DWORD PTR _colorIndexMemory$[ebp]
  01c28	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 629  : 	} else {

  01c2d	eb 0e		 jmp	 SHORT $L63191
$L63189:

; 630  : 		colorIndexMemory = colorIndicesID;

  01c2f	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c32	66 8b 91 88 00
	00 00		 mov	 dx, WORD PTR [ecx+136]
  01c39	66 89 55 d0	 mov	 WORD PTR _colorIndexMemory$[ebp], dx
$L63191:

; 632  : 
; 633  : 	if ( modeIndicesID == (MemID)0 ) {

  01c3d	6a 00		 push	 0
  01c3f	8d 4d b4	 lea	 ecx, DWORD PTR $T64003[ebp]
  01c42	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01c47	50		 push	 eax
  01c48	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c4b	81 c1 8a 00 00
	00		 add	 ecx, 138		; 0000008aH
  01c51	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  01c56	85 c0		 test	 eax, eax
  01c58	74 24		 je	 SHORT $L63194

; 634  : 		modeIndexMemory.Get(MemWindowEntry,(lineCount + 2)*sizeof(uint));

  01c5a	6a 00		 push	 0
  01c5c	6a 00		 push	 0
  01c5e	6a 00		 push	 0
  01c60	6a 00		 push	 0
  01c62	68 00 02 00 00	 push	 512			; 00000200H
  01c67	8b 45 d8	 mov	 eax, DWORD PTR _lineCount$[ebp]
  01c6a	8d 0c 85 08 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+8]
  01c71	51		 push	 ecx
  01c72	6a 53		 push	 83			; 00000053H
  01c74	8d 4d e0	 lea	 ecx, DWORD PTR _modeIndexMemory$[ebp]
  01c77	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 635  : 	} else {

  01c7c	eb 0e		 jmp	 SHORT $L63196
$L63194:

; 636  : 		modeIndexMemory = modeIndicesID;

  01c7e	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01c81	66 8b 82 8a 00
	00 00		 mov	 ax, WORD PTR [edx+138]
  01c88	66 89 45 e0	 mov	 WORD PTR _modeIndexMemory$[ebp], ax
$L63196:

; 638  : 
; 639  : 	uint* indices = (uint*) *indexMemory;

  01c8c	8d 4d dc	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  01c8f	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01c94	89 45 e8	 mov	 DWORD PTR _indices$[ebp], eax

; 640  : 	uint* fonts = (uint*) *fontIndexMemory;

  01c97	8d 4d c4	 lea	 ecx, DWORD PTR _fontIndexMemory$[ebp]
  01c9a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01c9f	89 45 e4	 mov	 DWORD PTR _fonts$[ebp], eax

; 641  : 	uint* colors = (uint*) *colorIndexMemory;

  01ca2	8d 4d d0	 lea	 ecx, DWORD PTR _colorIndexMemory$[ebp]
  01ca5	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01caa	89 45 c8	 mov	 DWORD PTR _colors$[ebp], eax

; 642  : 	uint* modes = (uint*) *modeIndexMemory;

  01cad	8d 4d e0	 lea	 ecx, DWORD PTR _modeIndexMemory$[ebp]
  01cb0	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01cb5	89 45 d4	 mov	 DWORD PTR _modes$[ebp], eax

; 643  : 
; 644  : 	uint line = 0;

  01cb8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _line$[ebp], 0

; 645  : 	fonts[line] = 0;

  01cbf	8b 4d fc	 mov	 ecx, DWORD PTR _line$[ebp]
  01cc2	8b 55 e4	 mov	 edx, DWORD PTR _fonts$[ebp]
  01cc5	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0

; 646  : 	colors[line] = 0;

  01ccc	8b 45 fc	 mov	 eax, DWORD PTR _line$[ebp]
  01ccf	8b 4d c8	 mov	 ecx, DWORD PTR _colors$[ebp]
  01cd2	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0

; 647  : 	modes[line] = 0;

  01cd9	8b 55 fc	 mov	 edx, DWORD PTR _line$[ebp]
  01cdc	8b 45 d4	 mov	 eax, DWORD PTR _modes$[ebp]
  01cdf	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0

; 648  : 	indices[line++] = 0;

  01ce6	8b 4d fc	 mov	 ecx, DWORD PTR _line$[ebp]
  01ce9	8b 55 e8	 mov	 edx, DWORD PTR _indices$[ebp]
  01cec	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0
  01cf3	8b 45 fc	 mov	 eax, DWORD PTR _line$[ebp]
  01cf6	83 c0 01	 add	 eax, 1
  01cf9	89 45 fc	 mov	 DWORD PTR _line$[ebp], eax

; 649  : 
; 650  : 	// Make a text rectangle that will hold just one line
; 651  :    if (pointSize != fntMgr->PointSize(False))

  01cfc	6a 00		 push	 0
  01cfe	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01d01	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  01d04	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  01d09	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01d0c	39 82 9c 00 00
	00		 cmp	 DWORD PTR [edx+156], eax
  01d12	74 44		 je	 SHORT $L63206

; 653  :                     fntMgr->GetFont(),fntMgr->PointSize(False),pointSize);

  01d14	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01d17	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  01d1d	51		 push	 ecx
  01d1e	6a 00		 push	 0
  01d20	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01d23	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01d26	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  01d2b	50		 push	 eax
  01d2c	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01d2f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01d32	e8 00 00 00 00	 call	 ?GetFont@FontMgr@@QBEHXZ ; FontMgr::GetFont
  01d37	50		 push	 eax
  01d38	68 00 00 00 00	 push	 OFFSET FLAT:$SG63207
  01d3d	68 8c 02 00 00	 push	 652			; 0000028cH
  01d42	68 00 00 00 00	 push	 OFFSET FLAT:$SG63208
  01d47	6a 61		 push	 97			; 00000061H
  01d49	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01d4f	51		 push	 ecx
  01d50	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  01d55	83 c4 20	 add	 esp, 32			; 00000020H
$L63206:

; 654  : 
; 655  : 	SOL_Rect r(0,0,textBox.Xlen()-1,fntMgr->PointSize(False)+2);

  01d58	6a 00		 push	 0
  01d5a	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01d5d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01d60	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  01d65	83 c0 02	 add	 eax, 2
  01d68	50		 push	 eax
  01d69	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01d6c	83 c1 10	 add	 ecx, 16			; 00000010H
  01d6f	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  01d74	83 e8 01	 sub	 eax, 1
  01d77	50		 push	 eax
  01d78	6a 00		 push	 0
  01d7a	6a 00		 push	 0
  01d7c	8d 4d ec	 lea	 ecx, DWORD PTR _r$[ebp]
  01d7f	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 656  : 	uint start;
; 657  : 	for (start = 0;start < textSize;line++) {

  01d84	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _start$[ebp], 0
  01d8b	eb 09		 jmp	 SHORT $L63211
$L63212:
  01d8d	8b 45 fc	 mov	 eax, DWORD PTR _line$[ebp]
  01d90	83 c0 01	 add	 eax, 1
  01d93	89 45 fc	 mov	 DWORD PTR _line$[ebp], eax
$L63211:
  01d96	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01d99	8b 55 cc	 mov	 edx, DWORD PTR _start$[ebp]
  01d9c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  01d9f	0f 83 b5 01 00
	00		 jae	 $L63213

; 658  :       if (pointSize != fntMgr->PointSize(False))

  01da5	6a 00		 push	 0
  01da7	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01daa	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01dad	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  01db2	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01db5	39 81 9c 00 00
	00		 cmp	 DWORD PTR [ecx+156], eax
  01dbb	74 43		 je	 SHORT $L63214

; 660  : 							  "Illegal font size font = %d pointSize = %d, should be %d",
; 661  :          					fntMgr->GetFont(),
; 662  : 								fntMgr->PointSize(False),
; 663  : 								pointSize);

  01dbd	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01dc0	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  01dc6	50		 push	 eax
  01dc7	6a 00		 push	 0
  01dc9	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01dcc	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  01dcf	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  01dd4	50		 push	 eax
  01dd5	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01dd8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01ddb	e8 00 00 00 00	 call	 ?GetFont@FontMgr@@QBEHXZ ; FontMgr::GetFont
  01de0	50		 push	 eax
  01de1	68 00 00 00 00	 push	 OFFSET FLAT:$SG63215
  01de6	68 93 02 00 00	 push	 659			; 00000293H
  01deb	68 00 00 00 00	 push	 OFFSET FLAT:$SG63216
  01df0	6a 61		 push	 97			; 00000061H
  01df2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01df7	50		 push	 eax
  01df8	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  01dfd	83 c4 20	 add	 esp, 32			; 00000020H
$L63214:

; 664  : 
; 665  : 		indices[line] = start;

  01e00	8b 4d fc	 mov	 ecx, DWORD PTR _line$[ebp]
  01e03	8b 55 e8	 mov	 edx, DWORD PTR _indices$[ebp]
  01e06	8b 45 cc	 mov	 eax, DWORD PTR _start$[ebp]
  01e09	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 666  : 		indices[0]++;

  01e0c	8b 4d e8	 mov	 ecx, DWORD PTR _indices$[ebp]
  01e0f	8b 11		 mov	 edx, DWORD PTR [ecx]
  01e11	83 c2 01	 add	 edx, 1
  01e14	8b 45 e8	 mov	 eax, DWORD PTR _indices$[ebp]
  01e17	89 10		 mov	 DWORD PTR [eax], edx

; 667  : 
; 668  : 		fonts[line] = font;

  01e19	8b 4d fc	 mov	 ecx, DWORD PTR _line$[ebp]
  01e1c	8b 55 e4	 mov	 edx, DWORD PTR _fonts$[ebp]
  01e1f	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01e22	8b 80 8c 00 00
	00		 mov	 eax, DWORD PTR [eax+140]
  01e28	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 669  : 		fonts[0]++;

  01e2b	8b 4d e4	 mov	 ecx, DWORD PTR _fonts$[ebp]
  01e2e	8b 11		 mov	 edx, DWORD PTR [ecx]
  01e30	83 c2 01	 add	 edx, 1
  01e33	8b 45 e4	 mov	 eax, DWORD PTR _fonts$[ebp]
  01e36	89 10		 mov	 DWORD PTR [eax], edx

; 670  : 
; 671  : 		colors[line] = fore;

  01e38	8b 4d fc	 mov	 ecx, DWORD PTR _line$[ebp]
  01e3b	8b 55 c8	 mov	 edx, DWORD PTR _colors$[ebp]
  01e3e	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01e41	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  01e47	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 672  : 		colors[0]++;

  01e4a	8b 4d c8	 mov	 ecx, DWORD PTR _colors$[ebp]
  01e4d	8b 11		 mov	 edx, DWORD PTR [ecx]
  01e4f	83 c2 01	 add	 edx, 1
  01e52	8b 45 c8	 mov	 eax, DWORD PTR _colors$[ebp]
  01e55	89 10		 mov	 DWORD PTR [eax], edx

; 673  : 
; 674  : 		modes[line] = mode;

  01e57	8b 4d fc	 mov	 ecx, DWORD PTR _line$[ebp]
  01e5a	8b 55 d4	 mov	 edx, DWORD PTR _modes$[ebp]
  01e5d	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01e60	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [eax+148]
  01e66	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 675  : 		modes[0]++;

  01e69	8b 4d d4	 mov	 ecx, DWORD PTR _modes$[ebp]
  01e6c	8b 11		 mov	 edx, DWORD PTR [ecx]
  01e6e	83 c2 01	 add	 edx, 1
  01e71	8b 45 d4	 mov	 eax, DWORD PTR _modes$[ebp]
  01e74	89 10		 mov	 DWORD PTR [eax], edx

; 676  : 
; 677  : 		start += fntMgr->TextCount(text,start,r,False);

  01e76	6a 00		 push	 0
  01e78	8d 4d ec	 lea	 ecx, DWORD PTR _r$[ebp]
  01e7b	51		 push	 ecx
  01e7c	8b 55 cc	 mov	 edx, DWORD PTR _start$[ebp]
  01e7f	52		 push	 edx
  01e80	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01e83	83 c0 0a	 add	 eax, 10			; 0000000aH
  01e86	51		 push	 ecx
  01e87	8b cc		 mov	 ecx, esp
  01e89	50		 push	 eax
  01e8a	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01e8f	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e92	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  01e95	e8 00 00 00 00	 call	 ?TextCount@FontMgr@@QAEHVMemID@@HAAVSOL_Rect@@H@Z ; FontMgr::TextCount
  01e9a	8b 55 cc	 mov	 edx, DWORD PTR _start$[ebp]
  01e9d	03 d0		 add	 edx, eax
  01e9f	89 55 cc	 mov	 DWORD PTR _start$[ebp], edx

; 678  : 
; 679  : 		if (line == lineCount) {

  01ea2	8b 45 fc	 mov	 eax, DWORD PTR _line$[ebp]
  01ea5	3b 45 d8	 cmp	 eax, DWORD PTR _lineCount$[ebp]
  01ea8	0f 85 a7 00 00
	00		 jne	 $L63218

; 680  : 			if (lineCount > 1000)

  01eae	81 7d d8 e8 03
	00 00		 cmp	 DWORD PTR _lineCount$[ebp], 1000 ; 000003e8H
  01eb5	76 1d		 jbe	 SHORT $L63219

; 681  : 				msgMgr->Fatal(SrcLoc,Msg_WindowTextTooBig);

  01eb7	6a 40		 push	 64			; 00000040H
  01eb9	68 a9 02 00 00	 push	 681			; 000002a9H
  01ebe	68 00 00 00 00	 push	 OFFSET FLAT:$SG63220
  01ec3	6a 61		 push	 97			; 00000061H
  01ec5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01ecb	51		 push	 ecx
  01ecc	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  01ed1	83 c4 14	 add	 esp, 20			; 00000014H
$L63219:

; 682  : 			lineCount += 100;

  01ed4	8b 55 d8	 mov	 edx, DWORD PTR _lineCount$[ebp]
  01ed7	83 c2 64	 add	 edx, 100		; 00000064H
  01eda	89 55 d8	 mov	 DWORD PTR _lineCount$[ebp], edx

; 683  : 
; 684  : 			indexMemory.Realloc((lineCount + 2)*sizeof(uint));

  01edd	8b 45 d8	 mov	 eax, DWORD PTR _lineCount$[ebp]
  01ee0	8d 0c 85 08 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+8]
  01ee7	51		 push	 ecx
  01ee8	8d 4d dc	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  01eeb	e8 00 00 00 00	 call	 ?Realloc@MemID@@QBEPAXI@Z ; MemID::Realloc

; 685  : 			fontIndexMemory.Realloc((lineCount + 2)*sizeof(uint));

  01ef0	8b 55 d8	 mov	 edx, DWORD PTR _lineCount$[ebp]
  01ef3	8d 04 95 08 00
	00 00		 lea	 eax, DWORD PTR [edx*4+8]
  01efa	50		 push	 eax
  01efb	8d 4d c4	 lea	 ecx, DWORD PTR _fontIndexMemory$[ebp]
  01efe	e8 00 00 00 00	 call	 ?Realloc@MemID@@QBEPAXI@Z ; MemID::Realloc

; 686  : 			colorIndexMemory.Realloc((lineCount + 2)*sizeof(uint));

  01f03	8b 4d d8	 mov	 ecx, DWORD PTR _lineCount$[ebp]
  01f06	8d 14 8d 08 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+8]
  01f0d	52		 push	 edx
  01f0e	8d 4d d0	 lea	 ecx, DWORD PTR _colorIndexMemory$[ebp]
  01f11	e8 00 00 00 00	 call	 ?Realloc@MemID@@QBEPAXI@Z ; MemID::Realloc

; 687  : 			modeIndexMemory.Realloc((lineCount + 2)*sizeof(uint));

  01f16	8b 45 d8	 mov	 eax, DWORD PTR _lineCount$[ebp]
  01f19	8d 0c 85 08 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+8]
  01f20	51		 push	 ecx
  01f21	8d 4d e0	 lea	 ecx, DWORD PTR _modeIndexMemory$[ebp]
  01f24	e8 00 00 00 00	 call	 ?Realloc@MemID@@QBEPAXI@Z ; MemID::Realloc

; 688  : 
; 689  : 			indices = (uint*) *indexMemory;

  01f29	8d 4d dc	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  01f2c	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01f31	89 45 e8	 mov	 DWORD PTR _indices$[ebp], eax

; 690  : 			fonts = (uint*) *fontIndexMemory;

  01f34	8d 4d c4	 lea	 ecx, DWORD PTR _fontIndexMemory$[ebp]
  01f37	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01f3c	89 45 e4	 mov	 DWORD PTR _fonts$[ebp], eax

; 691  : 			colors = (uint*) *colorIndexMemory;

  01f3f	8d 4d d0	 lea	 ecx, DWORD PTR _colorIndexMemory$[ebp]
  01f42	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01f47	89 45 c8	 mov	 DWORD PTR _colors$[ebp], eax

; 692  : 			modes = (uint*) *modeIndexMemory;

  01f4a	8d 4d e0	 lea	 ecx, DWORD PTR _modeIndexMemory$[ebp]
  01f4d	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01f52	89 45 d4	 mov	 DWORD PTR _modes$[ebp], eax
$L63218:

; 694  :  	}

  01f55	e9 33 fe ff ff	 jmp	 $L63212
$L63213:

; 695  : 
; 696  : 	indices[line] = start; 

  01f5a	8b 55 fc	 mov	 edx, DWORD PTR _line$[ebp]
  01f5d	8b 45 e8	 mov	 eax, DWORD PTR _indices$[ebp]
  01f60	8b 4d cc	 mov	 ecx, DWORD PTR _start$[ebp]
  01f63	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 697  : 	fonts[line] = font;

  01f66	8b 55 fc	 mov	 edx, DWORD PTR _line$[ebp]
  01f69	8b 45 e4	 mov	 eax, DWORD PTR _fonts$[ebp]
  01f6c	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f6f	8b 89 8c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+140]
  01f75	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 698  : 	colors[line] = fore;

  01f78	8b 55 fc	 mov	 edx, DWORD PTR _line$[ebp]
  01f7b	8b 45 c8	 mov	 eax, DWORD PTR _colors$[ebp]
  01f7e	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f81	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  01f87	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 699  : 	modes[line] = mode;

  01f8a	8b 55 fc	 mov	 edx, DWORD PTR _line$[ebp]
  01f8d	8b 45 d4	 mov	 eax, DWORD PTR _modes$[ebp]
  01f90	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f93	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  01f99	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 700  : 	maxLines = indices[0];

  01f9c	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01f9f	8b 45 e8	 mov	 eax, DWORD PTR _indices$[ebp]
  01fa2	8b 08		 mov	 ecx, DWORD PTR [eax]
  01fa4	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 701  : 
; 702  : 	lineIndicesID = indexMemory;

  01fa7	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01faa	66 8b 45 dc	 mov	 ax, WORD PTR _indexMemory$[ebp]
  01fae	66 89 82 84 00
	00 00		 mov	 WORD PTR [edx+132], ax

; 703  : 	fontIndicesID = fontIndexMemory;

  01fb5	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fb8	66 8b 55 c4	 mov	 dx, WORD PTR _fontIndexMemory$[ebp]
  01fbc	66 89 91 86 00
	00 00		 mov	 WORD PTR [ecx+134], dx

; 704  : 	colorIndicesID = colorIndexMemory;

  01fc3	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  01fc6	66 8b 4d d0	 mov	 cx, WORD PTR _colorIndexMemory$[ebp]
  01fca	66 89 88 88 00
	00 00		 mov	 WORD PTR [eax+136], cx

; 705  : 	modeIndicesID = modeIndexMemory;

  01fd1	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01fd4	66 8b 45 e0	 mov	 ax, WORD PTR _modeIndexMemory$[ebp]
  01fd8	66 89 82 8a 00
	00 00		 mov	 WORD PTR [edx+138], ax

; 706  : 
; 707  : 	lastChar = fntMgr->TextCount(text,0,font,textBox,False) - 1;

  01fdf	6a 00		 push	 0
  01fe1	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fe4	83 c1 10	 add	 ecx, 16			; 00000010H
  01fe7	51		 push	 ecx
  01fe8	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  01feb	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  01ff1	50		 push	 eax
  01ff2	6a 00		 push	 0
  01ff4	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  01ff7	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01ffa	51		 push	 ecx
  01ffb	8b d4		 mov	 edx, esp
  01ffd	51		 push	 ecx
  01ffe	8b ca		 mov	 ecx, edx
  02000	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02005	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  02008	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0200b	e8 00 00 00 00	 call	 ?TextCount@FontMgr@@QAEHVMemID@@HHAAVSOL_Rect@@H@Z ; FontMgr::TextCount
  02010	83 e8 01	 sub	 eax, 1
  02013	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  02016	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 708  : 
; 709  : 	lastLine = 0;

  02019	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  0201c	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0
$L63231:

; 710  : 
; 711  : 	while (lastLine < indices[0]) {

  02023	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  02026	8b 4d e8	 mov	 ecx, DWORD PTR _indices$[ebp]
  02029	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  0202c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0202e	73 2a		 jae	 SHORT $L63232

; 712  : 		if (indices[lastLine+1] < lastChar)

  02030	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  02033	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  02036	8b 55 e8	 mov	 edx, DWORD PTR _indices$[ebp]
  02039	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  0203c	8b 4c 8a 04	 mov	 ecx, DWORD PTR [edx+ecx*4+4]
  02040	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  02043	73 11		 jae	 SHORT $L63233

; 713  : 			lastLine++;

  02045	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  02048	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0204b	83 c0 01	 add	 eax, 1
  0204e	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  02051	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 714  : 		else

  02054	eb 02		 jmp	 SHORT $L63234
$L63233:

; 715  : 			break;

  02056	eb 02		 jmp	 SHORT $L63232
$L63234:

; 716  : 	}

  02058	eb c9		 jmp	 SHORT $L63231
$L63232:

; 717  : 
; 718  : 	linesPerPage = lastLine;

  0205a	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  0205d	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  02060	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  02063	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 719  : 
; 720  : 	if (lastLine > indices[0])

  02066	8b 55 a8	 mov	 edx, DWORD PTR _this$[ebp]
  02069	8b 45 e8	 mov	 eax, DWORD PTR _indices$[ebp]
  0206c	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  0206f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  02071	76 20		 jbe	 SHORT $L63235

; 721  : 		msgMgr->Fatal(SrcLoc,Msg_InternalErrorOnLastLine);

  02073	68 83 00 00 00	 push	 131			; 00000083H
  02078	68 d1 02 00 00	 push	 721			; 000002d1H
  0207d	68 00 00 00 00	 push	 OFFSET FLAT:$SG63236
  02082	6a 61		 push	 97			; 00000061H
  02084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0208a	52		 push	 edx
  0208b	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  02090	83 c4 14	 add	 esp, 20			; 00000014H
$L63235:

; 722  : }   

  02093	8b e5		 mov	 esp, ebp
  02095	5d		 pop	 ebp
  02096	c3		 ret	 0
?GetLineIndices@SOL_Window@@MAEXXZ ENDP			; SOL_Window::GetLineIndices
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??8MemID@@QBEHABV0@@Z PROC NEAR				; MemID::operator==, COMDAT

; 108  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 		return handle == id.handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _id$[ebp]
  00012	33 c0		 xor	 eax, eax
  00014	66 8b 02	 mov	 ax, WORD PTR [edx]
  00017	33 d2		 xor	 edx, edx
  00019	3b c8		 cmp	 ecx, eax
  0001b	0f 94 c2	 sete	 dl
  0001e	8b c2		 mov	 eax, edx

; 110  : 	}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??8MemID@@QBEHABV0@@Z ENDP				; MemID::operator==
_TEXT	ENDS
PUBLIC	??1EventWindow@@UAE@XZ				; EventWindow::~EventWindow
PUBLIC	?Hide@EventWindow@@UAEXXZ			; EventWindow::Hide
PUBLIC	?Move@EventWindow@@UAEXVSOL_Point@@@Z		; EventWindow::Move
PUBLIC	?ResizeWindow@EventWindow@@UAEXAAVSOL_Rect@@@Z	; EventWindow::ResizeWindow
PUBLIC	?Show@EventWindow@@UAEXXZ			; EventWindow::Show
PUBLIC	??_7EventWindow@@6B@				; EventWindow::`vftable'
PUBLIC	??_GEventWindow@@UAEPAXI@Z			; EventWindow::`scalar deleting destructor'
PUBLIC	??_EEventWindow@@UAEPAXI@Z			; EventWindow::`vector deleting destructor'
EXTRN	?DeletePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z:NEAR ; GraphicsMgr::DeletePlane
;	COMDAT ??_7EventWindow@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Window.cpp
CONST	SEGMENT
??_7EventWindow@@6B@ DD FLAT:??_EEventWindow@@UAEPAXI@Z	; EventWindow::`vftable'
	DD	FLAT:?Hide@EventWindow@@UAEXXZ
	DD	FLAT:?Move@EventWindow@@UAEXVSOL_Point@@@Z
	DD	FLAT:?ResizeWindow@EventWindow@@UAEXAAVSOL_Rect@@@Z
	DD	FLAT:?SetText@SOL_Window@@UAEXPADHH@Z
	DD	FLAT:?Show@EventWindow@@UAEXXZ
	DD	FLAT:?PageUp@SOL_Window@@UAEXXZ
	DD	FLAT:?PageDown@SOL_Window@@UAEXXZ
	DD	FLAT:?Home@SOL_Window@@UAEXXZ
	DD	FLAT:?End@SOL_Window@@UAEXXZ
	DD	FLAT:?UpArrow@SOL_Window@@UAEXXZ
	DD	FLAT:?DownArrow@SOL_Window@@UAEXXZ
	DD	FLAT:?ReDrawText@SOL_Window@@UAEXXZ
	DD	FLAT:?GetLineIndices@SOL_Window@@MAEXXZ
CONST	ENDS
xdata$x	SEGMENT
$T64010	DD	019930520H
	DD	01H
	DD	FLAT:$T64012
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T64012	DD	0ffffffffH
	DD	FLAT:$L64008
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1EventWindow@@UAE@XZ PROC NEAR			; EventWindow::~EventWindow

; 726  : {

  02097	55		 push	 ebp
  02098	8b ec		 mov	 ebp, esp
  0209a	6a ff		 push	 -1
  0209c	68 00 00 00 00	 push	 $L64011
  020a1	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  020a7	50		 push	 eax
  020a8	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  020af	51		 push	 ecx
  020b0	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  020b3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  020b6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7EventWindow@@6B@ ; EventWindow::`vftable'
  020bc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 727  : 	if (plane)

  020c3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  020c6	83 79 70 00	 cmp	 DWORD PTR [ecx+112], 0
  020ca	74 12		 je	 SHORT $L63240

; 728  : 		graphMgr->DeletePlane(plane);

  020cc	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  020cf	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  020d2	50		 push	 eax
  020d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  020d9	e8 00 00 00 00	 call	 ?DeletePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::DeletePlane
$L63240:

; 729  : }

  020de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  020e5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  020e8	e8 00 00 00 00	 call	 ??1SOL_Window@@UAE@XZ	; SOL_Window::~SOL_Window
  020ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  020f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  020f7	8b e5		 mov	 esp, ebp
  020f9	5d		 pop	 ebp
  020fa	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L64008:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??1SOL_Window@@UAE@XZ	; SOL_Window::~SOL_Window
  00047	c3		 ret	 0
$L64011:
  00048	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T64010
  0004d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1EventWindow@@UAE@XZ ENDP				; EventWindow::~EventWindow
;	COMDAT ??_GEventWindow@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GEventWindow@@UAEPAXI@Z PROC NEAR			; EventWindow::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1EventWindow@@UAE@XZ	; EventWindow::~EventWindow
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L62639
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L62639:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GEventWindow@@UAEPAXI@Z ENDP				; EventWindow::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?HandleEvent@EventWindow@@QAEHAAVSOL_Event@@@Z	; EventWindow::HandleEvent
PUBLIC	??0SOL_Point@@QAE@HH@Z				; SOL_Point::SOL_Point
PUBLIC	??9SOL_Point@@QBEHABV0@@Z			; SOL_Point::operator!=
PUBLIC	?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z		; SOL_Rect::Intersect
EXTRN	??0SOL_Event@@QAE@XZ:NEAR			; SOL_Event::SOL_Event
EXTRN	?eventMgr@@3PAUEventMgr@@A:DWORD		; eventMgr
EXTRN	?MoveDelta@SOL_Plane@@QAEXHH@Z:NEAR		; SOL_Plane::MoveDelta
EXTRN	?UpdatePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z:NEAR ; GraphicsMgr::UpdatePlane
EXTRN	?mouse@@3PAVSOL_Mouse@@A:DWORD			; mouse
_TEXT	SEGMENT
$T64019 = -180
_theEvent$ = 8
_this$ = -184
_returnValue$ = -4
_indices$63262 = -8
_titleRect$63267 = -24
_mousePt$63273 = -72
_delta$63275 = -80
_evt$63278 = -64
_mousePt$63284 = -128
_delta$63286 = -136
_newWindow$63287 = -152
_evt$63288 = -120
?HandleEvent@EventWindow@@QAEHAAVSOL_Event@@@Z PROC NEAR ; EventWindow::HandleEvent

; 735  : {

  020fb	55		 push	 ebp
  020fc	8b ec		 mov	 ebp, esp
  020fe	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  02104	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 736  : 	// Handles events
; 737  : 	// 	Events handled:
; 738  : 	//			PageUp
; 739  : 	//			PageDown
; 740  : 	//			Home
; 741  : 	//			End
; 742  : 	//       UpArrow
; 743  : 	//       DownArrow
; 744  : 	//			MouseDown followed by a MouseUp (causes a drag or resize)
; 745  : 	// If the event is handled the return
; 746  : 	// value is True, else it's False.
; 747  : 
; 748  : 	int returnValue = False;

  0210a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 0

; 749  : 
; 750  : 	switch(theEvent.type) {

  02111	8b 45 08	 mov	 eax, DWORD PTR _theEvent$[ebp]
  02114	33 c9		 xor	 ecx, ecx
  02116	66 8b 08	 mov	 cx, WORD PTR [eax]
  02119	89 8d 44 ff ff
	ff		 mov	 DWORD PTR -188+[ebp], ecx
  0211f	83 bd 44 ff ff
	ff 01		 cmp	 DWORD PTR -188+[ebp], 1
  02126	0f 84 26 01 00
	00		 je	 $L63261
  0212c	83 bd 44 ff ff
	ff 04		 cmp	 DWORD PTR -188+[ebp], 4
  02133	74 05		 je	 SHORT $L63250
  02135	e9 10 04 00 00	 jmp	 $L63247
$L63250:

; 751  : 		case SOL_Event::KeyDown:
; 752  : 			switch (theEvent.message) {

  0213a	8b 55 08	 mov	 edx, DWORD PTR _theEvent$[ebp]
  0213d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  02140	89 85 40 ff ff
	ff		 mov	 DWORD PTR -192+[ebp], eax
  02146	81 bd 40 ff ff
	ff 00 4f 00 00	 cmp	 DWORD PTR -192+[ebp], 20224 ; 00004f00H
  02150	7f 3d		 jg	 SHORT $L64015
  02152	81 bd 40 ff ff
	ff 00 4f 00 00	 cmp	 DWORD PTR -192+[ebp], 20224 ; 00004f00H
  0215c	0f 84 9f 00 00
	00		 je	 $L63258
  02162	81 bd 40 ff ff
	ff 00 47 00 00	 cmp	 DWORD PTR -192+[ebp], 18176 ; 00004700H
  0216c	74 79		 je	 SHORT $L63257
  0216e	81 bd 40 ff ff
	ff 00 48 00 00	 cmp	 DWORD PTR -192+[ebp], 18432 ; 00004800H
  02178	0f 84 9d 00 00
	00		 je	 $L63259
  0217e	81 bd 40 ff ff
	ff 00 49 00 00	 cmp	 DWORD PTR -192+[ebp], 18688 ; 00004900H
  02188	74 43		 je	 SHORT $L63256
  0218a	e9 be 00 00 00	 jmp	 $L63252
$L64015:
  0218f	81 bd 40 ff ff
	ff 00 50 00 00	 cmp	 DWORD PTR -192+[ebp], 20480 ; 00005000H
  02199	0f 84 96 00 00
	00		 je	 $L63260
  0219f	81 bd 40 ff ff
	ff 00 51 00 00	 cmp	 DWORD PTR -192+[ebp], 20736 ; 00005100H
  021a9	74 05		 je	 SHORT $L63255
  021ab	e9 9d 00 00 00	 jmp	 $L63252
$L63255:

; 753  : 				case Kbd::PgDn:
; 754  :             	PageDown();

  021b0	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  021b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  021b8	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  021be	ff 52 1c	 call	 DWORD PTR [edx+28]

; 755  : 					returnValue = True;

  021c1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 1

; 756  : 					break;

  021c8	e9 80 00 00 00	 jmp	 $L63252
$L63256:

; 757  : 				case Kbd::PgUp:
; 758  :             	PageUp();

  021cd	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  021d3	8b 10		 mov	 edx, DWORD PTR [eax]
  021d5	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  021db	ff 52 18	 call	 DWORD PTR [edx+24]

; 759  : 					returnValue = True;

  021de	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 1

; 760  : 					break;

  021e5	eb 66		 jmp	 SHORT $L63252
$L63257:

; 761  : 				case Kbd::Home:
; 762  :             	Home();

  021e7	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  021ed	8b 10		 mov	 edx, DWORD PTR [eax]
  021ef	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  021f5	ff 52 20	 call	 DWORD PTR [edx+32]

; 763  : 					returnValue = True;

  021f8	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 1

; 764  : 					break;

  021ff	eb 4c		 jmp	 SHORT $L63252
$L63258:

; 765  : 				case Kbd::End:
; 766  :             	End();

  02201	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02207	8b 10		 mov	 edx, DWORD PTR [eax]
  02209	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0220f	ff 52 24	 call	 DWORD PTR [edx+36]

; 767  : 					returnValue = True;

  02212	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 1

; 768  : 					break;

  02219	eb 32		 jmp	 SHORT $L63252
$L63259:

; 769  : 				case Kbd::Up:
; 770  :             	UpArrow();

  0221b	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02221	8b 10		 mov	 edx, DWORD PTR [eax]
  02223	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02229	ff 52 28	 call	 DWORD PTR [edx+40]

; 771  : 					returnValue = True;

  0222c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 1

; 772  : 					break;

  02233	eb 18		 jmp	 SHORT $L63252
$L63260:

; 773  : 				case Kbd::Down:
; 774  :             	DownArrow();

  02235	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0223b	8b 10		 mov	 edx, DWORD PTR [eax]
  0223d	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02243	ff 52 2c	 call	 DWORD PTR [edx+44]

; 775  : 					returnValue = True;

  02246	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 1
$L63252:

; 778  : 			break;

  0224d	e9 f8 02 00 00	 jmp	 $L63247
$L63261:

; 779  : 
; 780  : 		case SOL_Event::MouseDown:
; 781  : 			// If the mouse is in the title area move the window else
; 782  : 			// if the mouse is in the textBox resize the window from
; 783  : 			// the bottom right corner	relative to the mouse move vector.
; 784  : 											 
; 785  : 			uint* indices = (uint*) *lineIndicesID;

  02252	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02258	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0225e	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  02263	89 45 f8	 mov	 DWORD PTR _indices$63262[ebp], eax

; 786  : 			// Check for right mouse click
; 787  : 			if (theEvent.modifiers == Kbd::Shift)

  02266	8b 45 08	 mov	 eax, DWORD PTR _theEvent$[ebp]
  02269	33 c9		 xor	 ecx, ecx
  0226b	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  0226f	83 f9 03	 cmp	 ecx, 3
  02272	75 05		 jne	 SHORT $L63264

; 788  : 				break;

  02274	e9 d1 02 00 00	 jmp	 $L63247
$L63264:

; 789  : 			if (!window.Intersect(theEvent.where))

  02279	8b 55 08	 mov	 edx, DWORD PTR _theEvent$[ebp]
  0227c	83 c2 10	 add	 edx, 16			; 00000010H
  0227f	83 ec 08	 sub	 esp, 8
  02282	8b cc		 mov	 ecx, esp
  02284	52		 push	 edx
  02285	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  0228a	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02290	83 c1 50	 add	 ecx, 80			; 00000050H
  02293	e8 00 00 00 00	 call	 ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z ; SOL_Rect::Intersect
  02298	85 c0		 test	 eax, eax
  0229a	75 05		 jne	 SHORT $L63266

; 790  : 				break;

  0229c	e9 a9 02 00 00	 jmp	 $L63247
$L63266:

; 791  : 			mouseStart = theEvent.where;

  022a1	8b 45 08	 mov	 eax, DWORD PTR _theEvent$[ebp]
  022a4	83 c0 10	 add	 eax, 16			; 00000010H
  022a7	50		 push	 eax
  022a8	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  022ae	83 c1 7c	 add	 ecx, 124		; 0000007cH
  022b1	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 792  : 			SOL_Rect titleRect = window;

  022b6	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  022bc	83 c1 50	 add	 ecx, 80			; 00000050H
  022bf	51		 push	 ecx
  022c0	8d 4d e8	 lea	 ecx, DWORD PTR _titleRect$63267[ebp]
  022c3	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 793  : 			titleRect.B.y -= textBox.Ylen() * SCIRESY / yRes;

  022c8	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  022ce	83 c1 10	 add	 ecx, 16			; 00000010H
  022d1	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  022d6	69 c0 e0 01 00
	00		 imul	 eax, 480		; 000001e0H
  022dc	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  022e2	99		 cdq
  022e3	f7 79 40	 idiv	 DWORD PTR [ecx+64]
  022e6	8b 55 f4	 mov	 edx, DWORD PTR _titleRect$63267[ebp+12]
  022e9	2b d0		 sub	 edx, eax
  022eb	89 55 f4	 mov	 DWORD PTR _titleRect$63267[ebp+12], edx

; 794  : 			if (titleRect.Intersect(mouseStart))	{

  022ee	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  022f4	83 c0 7c	 add	 eax, 124		; 0000007cH
  022f7	83 ec 08	 sub	 esp, 8
  022fa	8b cc		 mov	 ecx, esp
  022fc	50		 push	 eax
  022fd	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  02302	8d 4d e8	 lea	 ecx, DWORD PTR _titleRect$63267[ebp]
  02305	e8 00 00 00 00	 call	 ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z ; SOL_Rect::Intersect
  0230a	85 c0		 test	 eax, eax
  0230c	0f 84 27 01 00
	00		 je	 $L63269
$L63271:

; 795  : 				// mouseDown in the title bar
; 796  : 				// move the dialog until a mouse up
; 797  : 				while (True) {

  02312	b9 01 00 00 00	 mov	 ecx, 1
  02317	85 c9		 test	 ecx, ecx
  02319	0f 84 15 01 00
	00		 je	 $L63272

; 798  : 					// Poll the mouse position
; 799  : 					SOL_Point mousePt;

  0231f	8d 4d b8	 lea	 ecx, DWORD PTR _mousePt$63273[ebp]
  02322	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 800  : 					mouse->GlobalPosSci(&mousePt);

  02327	8d 55 b8	 lea	 edx, DWORD PTR _mousePt$63273[ebp]
  0232a	52		 push	 edx
  0232b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3PAVSOL_Mouse@@A ; mouse
  02330	8b 10		 mov	 edx, DWORD PTR [eax]
  02332	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3PAVSOL_Mouse@@A ; mouse
  02338	ff 52 1c	 call	 DWORD PTR [edx+28]

; 801  : 					if (mousePt != mouseStart) {

  0233b	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02341	83 c0 7c	 add	 eax, 124		; 0000007cH
  02344	50		 push	 eax
  02345	8d 4d b8	 lea	 ecx, DWORD PTR _mousePt$63273[ebp]
  02348	e8 00 00 00 00	 call	 ??9SOL_Point@@QBEHABV0@@Z ; SOL_Point::operator!=
  0234d	85 c0		 test	 eax, eax
  0234f	0f 84 a8 00 00
	00		 je	 $L63274

; 802  : 						SOL_Point delta(mousePt.x - mouseStart.x,mousePt.y - mouseStart.y);

  02355	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0235b	8b 55 bc	 mov	 edx, DWORD PTR _mousePt$63273[ebp+4]
  0235e	2b 91 80 00 00
	00		 sub	 edx, DWORD PTR [ecx+128]
  02364	52		 push	 edx
  02365	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0236b	8b 4d b8	 mov	 ecx, DWORD PTR _mousePt$63273[ebp]
  0236e	2b 48 7c	 sub	 ecx, DWORD PTR [eax+124]
  02371	51		 push	 ecx
  02372	8d 4d b0	 lea	 ecx, DWORD PTR _delta$63275[ebp]
  02375	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 803  : 						// Move the window
; 804  : 						window.Offset(delta.x,delta.y);

  0237a	8b 55 b4	 mov	 edx, DWORD PTR _delta$63275[ebp+4]
  0237d	52		 push	 edx
  0237e	8b 45 b0	 mov	 eax, DWORD PTR _delta$63275[ebp]
  02381	50		 push	 eax
  02382	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02388	83 c1 50	 add	 ecx, 80			; 00000050H
  0238b	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 805  : 						plane->MoveDelta(delta.x,delta.y);

  02390	8b 4d b4	 mov	 ecx, DWORD PTR _delta$63275[ebp+4]
  02393	51		 push	 ecx
  02394	8b 55 b0	 mov	 edx, DWORD PTR _delta$63275[ebp]
  02397	52		 push	 edx
  02398	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0239e	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  023a1	e8 00 00 00 00	 call	 ?MoveDelta@SOL_Plane@@QAEXHH@Z ; SOL_Plane::MoveDelta

; 806  : 						graphMgr->UpdatePlane(plane);

  023a6	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  023ac	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  023af	52		 push	 edx
  023b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  023b6	e8 00 00 00 00	 call	 ?UpdatePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::UpdatePlane

; 807  : 						graphMgr->FrameOut();

  023bb	6a ff		 push	 -1
  023bd	6a ff		 push	 -1
  023bf	6a 00		 push	 0
  023c1	6a 00		 push	 0
  023c3	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T64019[ebp]
  023c9	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  023ce	83 ec 10	 sub	 esp, 16			; 00000010H
  023d1	8b cc		 mov	 ecx, esp
  023d3	50		 push	 eax
  023d4	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  023d9	6a 01		 push	 1
  023db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  023e0	8b 10		 mov	 edx, DWORD PTR [eax]
  023e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  023e8	ff 52 14	 call	 DWORD PTR [edx+20]

; 808  : 						mouseStart = mousePt;

  023eb	8d 45 b8	 lea	 eax, DWORD PTR _mousePt$63273[ebp]
  023ee	50		 push	 eax
  023ef	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  023f5	83 c1 7c	 add	 ecx, 124		; 0000007cH
  023f8	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
$L63274:

; 810  : 					SOL_Event evt;

  023fd	8d 4d c0	 lea	 ecx, DWORD PTR _evt$63278[ebp]
  02400	e8 00 00 00 00	 call	 ??0SOL_Event@@QAE@XZ	; SOL_Event::SOL_Event

; 811  : 					eventMgr->Get(&evt,SOL_Event::All);

  02405	68 ff 7f 00 00	 push	 32767			; 00007fffH
  0240a	8d 4d c0	 lea	 ecx, DWORD PTR _evt$63278[ebp]
  0240d	51		 push	 ecx
  0240e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  02414	8b 02		 mov	 eax, DWORD PTR [edx]
  02416	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  0241c	ff 50 08	 call	 DWORD PTR [eax+8]

; 812  : 					if (evt.type == SOL_Event::MouseUp) break;

  0241f	8b 4d c0	 mov	 ecx, DWORD PTR _evt$63278[ebp]
  02422	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  02428	83 f9 02	 cmp	 ecx, 2
  0242b	75 02		 jne	 SHORT $L63279
  0242d	eb 05		 jmp	 SHORT $L63272
$L63279:

; 813  : 				}

  0242f	e9 de fe ff ff	 jmp	 $L63271
$L63272:

; 815  : 			else {

  02434	e9 0a 01 00 00	 jmp	 $L63283
$L63269:

; 816  : 				// mouseDown in the text area
; 817  : 				// resize the dialog until a mouse up
; 818  : 
; 819  : 				while (True) {

  02439	ba 01 00 00 00	 mov	 edx, 1
  0243e	85 d2		 test	 edx, edx
  02440	0f 84 fd 00 00
	00		 je	 $L63283

; 820  : 					// Poll the mouse position
; 821  : 					SOL_Point mousePt;

  02446	8d 4d 80	 lea	 ecx, DWORD PTR _mousePt$63284[ebp]
  02449	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 822  : 					mouse->GlobalPosSci(&mousePt);

  0244e	8d 45 80	 lea	 eax, DWORD PTR _mousePt$63284[ebp]
  02451	50		 push	 eax
  02452	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3PAVSOL_Mouse@@A ; mouse
  02458	8b 11		 mov	 edx, DWORD PTR [ecx]
  0245a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3PAVSOL_Mouse@@A ; mouse
  02460	ff 52 1c	 call	 DWORD PTR [edx+28]

; 823  : 					if (mousePt != mouseStart) {

  02463	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02469	83 c0 7c	 add	 eax, 124		; 0000007cH
  0246c	50		 push	 eax
  0246d	8d 4d 80	 lea	 ecx, DWORD PTR _mousePt$63284[ebp]
  02470	e8 00 00 00 00	 call	 ??9SOL_Point@@QBEHABV0@@Z ; SOL_Point::operator!=
  02475	85 c0		 test	 eax, eax
  02477	0f 84 91 00 00
	00		 je	 $L63285

; 824  : 						SOL_Point delta(mousePt.x - mouseStart.x,mousePt.y - mouseStart.y);

  0247d	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02483	8b 55 84	 mov	 edx, DWORD PTR _mousePt$63284[ebp+4]
  02486	2b 91 80 00 00
	00		 sub	 edx, DWORD PTR [ecx+128]
  0248c	52		 push	 edx
  0248d	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02493	8b 4d 80	 mov	 ecx, DWORD PTR _mousePt$63284[ebp]
  02496	2b 48 7c	 sub	 ecx, DWORD PTR [eax+124]
  02499	51		 push	 ecx
  0249a	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _delta$63286[ebp]
  024a0	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 825  : 						// Resize the window
; 826  : 						SOL_Rect newWindow(window.A.x,window.A.y,
; 827  : 												 window.B.x+delta.x,
; 828  : 												 window.B.y+delta.y);

  024a5	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  024ab	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  024ae	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _delta$63286[ebp+4]
  024b4	50		 push	 eax
  024b5	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  024bb	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  024be	03 95 78 ff ff
	ff		 add	 edx, DWORD PTR _delta$63286[ebp]
  024c4	52		 push	 edx
  024c5	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  024cb	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  024ce	51		 push	 ecx
  024cf	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  024d5	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  024d8	50		 push	 eax
  024d9	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _newWindow$63287[ebp]
  024df	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 829  : 						ResizeWindow(newWindow);

  024e4	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _newWindow$63287[ebp]
  024ea	51		 push	 ecx
  024eb	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  024f1	8b 02		 mov	 eax, DWORD PTR [edx]
  024f3	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  024f9	ff 50 0c	 call	 DWORD PTR [eax+12]

; 830  : 						mouseStart = mousePt;

  024fc	8d 4d 80	 lea	 ecx, DWORD PTR _mousePt$63284[ebp]
  024ff	51		 push	 ecx
  02500	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02506	83 c1 7c	 add	 ecx, 124		; 0000007cH
  02509	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
$L63285:

; 832  : 					SOL_Event evt;

  0250e	8d 4d 88	 lea	 ecx, DWORD PTR _evt$63288[ebp]
  02511	e8 00 00 00 00	 call	 ??0SOL_Event@@QAE@XZ	; SOL_Event::SOL_Event

; 833  : 					eventMgr->Get(&evt,SOL_Event::All);

  02516	68 ff 7f 00 00	 push	 32767			; 00007fffH
  0251b	8d 55 88	 lea	 edx, DWORD PTR _evt$63288[ebp]
  0251e	52		 push	 edx
  0251f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  02524	8b 10		 mov	 edx, DWORD PTR [eax]
  02526	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  0252c	ff 52 08	 call	 DWORD PTR [edx+8]

; 834  : 					if (evt.type == SOL_Event::MouseUp)	break;

  0252f	8b 45 88	 mov	 eax, DWORD PTR _evt$63288[ebp]
  02532	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  02537	83 f8 02	 cmp	 eax, 2
  0253a	75 02		 jne	 SHORT $L63289
  0253c	eb 05		 jmp	 SHORT $L63283
$L63289:

; 835  : 				}

  0253e	e9 f6 fe ff ff	 jmp	 $L63269
$L63283:

; 837  : 			returnValue = True;

  02543	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _returnValue$[ebp], 1
$L63247:

; 841  : 	return returnValue;

  0254a	8b 45 fc	 mov	 eax, DWORD PTR _returnValue$[ebp]

; 842  : }

  0254d	8b e5		 mov	 esp, ebp
  0254f	5d		 pop	 ebp
  02550	c2 04 00	 ret	 4
?HandleEvent@EventWindow@@QAEHAAVSOL_Event@@@Z ENDP	; EventWindow::HandleEvent
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_this$ = -4
??0SOL_Point@@QAE@HH@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 21   : 	SOL_Point(Coord x, Coord y) : x(x), y(y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0SOL_Point@@QAE@HH@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??9SOL_Point@@QBEHABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??9SOL_Point@@QBEHABV0@@Z PROC NEAR			; SOL_Point::operator!=, COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 198  : 	return x != p.x  ||  y != p.y;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	75 17		 jne	 SHORT $L64022
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00021	75 09		 jne	 SHORT $L64022
  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
  0002a	eb 07		 jmp	 SHORT $L64023
$L64022:
  0002c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
$L64023:
  00033	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 199  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??9SOL_Point@@QBEHABV0@@Z ENDP				; SOL_Point::operator!=
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT
_P$ = 8
_this$ = -4
?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z PROC NEAR	; SOL_Rect::Intersect, COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 178  : 	if (P.x < A.x  ||  P.x > B.x)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _P$[ebp]
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	7c 0b		 jl	 SHORT $L56139
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00017	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0001a	7e 04		 jle	 SHORT $L56138
$L56139:

; 179  : 		return False;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 1f		 jmp	 SHORT $L56137
$L56138:

; 180  : 	if (P.y < A.y  ||  P.y > B.y)

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 55 0c	 mov	 edx, DWORD PTR _P$[ebp+4]
  00026	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00029	7c 0b		 jl	 SHORT $L56141
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _P$[ebp+4]
  00031	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00034	7e 04		 jle	 SHORT $L56140
$L56141:

; 181  : 		return False;

  00036	33 c0		 xor	 eax, eax
  00038	eb 05		 jmp	 SHORT $L56137
$L56140:

; 182  : 	return True;

  0003a	b8 01 00 00 00	 mov	 eax, 1
$L56137:

; 183  : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z ENDP		; SOL_Rect::Intersect
_TEXT	ENDS
_TEXT	SEGMENT
$T64027 = -20
_this$ = -24
?Hide@EventWindow@@UAEXXZ PROC NEAR			; EventWindow::Hide

; 846  : {

  02553	55		 push	 ebp
  02554	8b ec		 mov	 ebp, esp
  02556	83 ec 18	 sub	 esp, 24			; 00000018H
  02559	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 847  : 	if (!visible) return;

  0255c	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0255f	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  02563	75 02		 jne	 SHORT $L63293
  02565	eb 5d		 jmp	 SHORT $L63292
$L63293:

; 848  : 	visible = False;

  02567	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0256a	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 849  : 	graphMgr->DeletePlane(plane);

  02571	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  02574	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  02577	50		 push	 eax
  02578	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0257e	e8 00 00 00 00	 call	 ?DeletePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::DeletePlane

; 850  :    si = NULL;

  02583	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  02586	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0

; 851  : 	plane = NULL;

  0258d	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  02590	c7 42 70 00 00
	00 00		 mov	 DWORD PTR [edx+112], 0

; 852  : 	graphMgr->FrameOut();

  02597	6a ff		 push	 -1
  02599	6a ff		 push	 -1
  0259b	6a 00		 push	 0
  0259d	6a 00		 push	 0
  0259f	8d 4d ec	 lea	 ecx, DWORD PTR $T64027[ebp]
  025a2	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  025a7	83 ec 10	 sub	 esp, 16			; 00000010H
  025aa	8b cc		 mov	 ecx, esp
  025ac	50		 push	 eax
  025ad	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  025b2	6a 01		 push	 1
  025b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  025b9	8b 10		 mov	 edx, DWORD PTR [eax]
  025bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  025c1	ff 52 14	 call	 DWORD PTR [edx+20]
$L63292:

; 853  : }

  025c4	8b e5		 mov	 esp, ebp
  025c6	5d		 pop	 ebp
  025c7	c3		 ret	 0
?Hide@EventWindow@@UAEXXZ ENDP				; EventWindow::Hide
_TEXT	ENDS
EXTRN	?MoveTo@SOL_Plane@@QAEXVSOL_Point@@@Z:NEAR	; SOL_Plane::MoveTo
_TEXT	SEGMENT
$T64031 = -24
_pt$ = 8
_this$ = -28
?Move@EventWindow@@UAEXVSOL_Point@@@Z PROC NEAR		; EventWindow::Move

; 857  : {

  025c8	55		 push	 ebp
  025c9	8b ec		 mov	 ebp, esp
  025cb	83 ec 1c	 sub	 esp, 28			; 0000001cH
  025ce	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 858  : 	if(plane) {

  025d1	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  025d4	83 78 70 00	 cmp	 DWORD PTR [eax+112], 0
  025d8	0f 84 81 00 00
	00		 je	 $L63302

; 859  : 		window.Offset(pt.x - window.A.x,pt.y - window.A.y);

  025de	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  025e1	8b 55 0c	 mov	 edx, DWORD PTR _pt$[ebp+4]
  025e4	2b 51 54	 sub	 edx, DWORD PTR [ecx+84]
  025e7	52		 push	 edx
  025e8	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  025eb	8b 4d 08	 mov	 ecx, DWORD PTR _pt$[ebp]
  025ee	2b 48 50	 sub	 ecx, DWORD PTR [eax+80]
  025f1	51		 push	 ecx
  025f2	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  025f5	83 c1 50	 add	 ecx, 80			; 00000050H
  025f8	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 860  : 		plane->MoveTo(pt);

  025fd	83 ec 08	 sub	 esp, 8
  02600	8b cc		 mov	 ecx, esp
  02602	8d 55 08	 lea	 edx, DWORD PTR _pt$[ebp]
  02605	52		 push	 edx
  02606	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  0260b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0260e	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  02611	e8 00 00 00 00	 call	 ?MoveTo@SOL_Plane@@QAEXVSOL_Point@@@Z ; SOL_Plane::MoveTo

; 861  :       if (visible) {

  02616	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  02619	83 79 44 00	 cmp	 DWORD PTR [ecx+68], 0
  0261d	74 40		 je	 SHORT $L63302

; 862  :    		graphMgr->UpdatePlane(plane);

  0261f	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  02622	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  02625	50		 push	 eax
  02626	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0262c	e8 00 00 00 00	 call	 ?UpdatePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::UpdatePlane

; 863  : 	   	graphMgr->FrameOut();

  02631	6a ff		 push	 -1
  02633	6a ff		 push	 -1
  02635	6a 00		 push	 0
  02637	6a 00		 push	 0
  02639	8d 4d e8	 lea	 ecx, DWORD PTR $T64031[ebp]
  0263c	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  02641	83 ec 10	 sub	 esp, 16			; 00000010H
  02644	8b cc		 mov	 ecx, esp
  02646	50		 push	 eax
  02647	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  0264c	6a 01		 push	 1
  0264e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02654	8b 11		 mov	 edx, DWORD PTR [ecx]
  02656	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0265c	ff 52 14	 call	 DWORD PTR [edx+20]
$L63302:

; 866  : }

  0265f	8b e5		 mov	 esp, ebp
  02661	5d		 pop	 ebp
  02662	c2 08 00	 ret	 8
?Move@EventWindow@@UAEXVSOL_Point@@@Z ENDP		; EventWindow::Move
_TEXT	ENDS
EXTRN	?ResizePlane@SOL_Plane@@QAEXHH@Z:NEAR		; SOL_Plane::ResizePlane
_TEXT	SEGMENT
_newWindow$ = 8
_this$ = -4
?ResizeWindow@EventWindow@@UAEXAAVSOL_Rect@@@Z PROC NEAR ; EventWindow::ResizeWindow

; 870  : {

  02665	55		 push	 ebp
  02666	8b ec		 mov	 ebp, esp
  02668	51		 push	 ecx
  02669	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  : 	if (!newWindow.IsEmpty())	{

  0266c	8b 4d 08	 mov	 ecx, DWORD PTR _newWindow$[ebp]
  0266f	e8 00 00 00 00	 call	 ?IsEmpty@SOL_Rect@@QBEHXZ ; SOL_Rect::IsEmpty
  02674	85 c0		 test	 eax, eax
  02676	75 29		 jne	 SHORT $L63309

; 872  : 		plane->ResizePlane(newWindow.Xlen(),newWindow.Ylen());

  02678	8b 4d 08	 mov	 ecx, DWORD PTR _newWindow$[ebp]
  0267b	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  02680	50		 push	 eax
  02681	8b 4d 08	 mov	 ecx, DWORD PTR _newWindow$[ebp]
  02684	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  02689	50		 push	 eax
  0268a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0268d	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  02690	e8 00 00 00 00	 call	 ?ResizePlane@SOL_Plane@@QAEXHH@Z ; SOL_Plane::ResizePlane

; 873  : 		SOL_Window::ResizeWindow(newWindow);

  02695	8b 4d 08	 mov	 ecx, DWORD PTR _newWindow$[ebp]
  02698	51		 push	 ecx
  02699	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0269c	e8 00 00 00 00	 call	 ?ResizeWindow@SOL_Window@@UAEXAAVSOL_Rect@@@Z ; SOL_Window::ResizeWindow
$L63309:

; 875  : }

  026a1	8b e5		 mov	 esp, ebp
  026a3	5d		 pop	 ebp
  026a4	c2 04 00	 ret	 4
?ResizeWindow@EventWindow@@UAEXAAVSOL_Rect@@@Z ENDP	; EventWindow::ResizeWindow
_TEXT	ENDS
PUBLIC	?SetPicNum@SOL_Plane@@QAEXH@Z			; SOL_Plane::SetPicNum
PUBLIC	?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z	; GraphicsMgr::AddPlane
EXTRN	??0SOL_Plane@@QAE@ABVSOL_Rect@@@Z:NEAR		; SOL_Plane::SOL_Plane
xdata$x	SEGMENT
$T64042	DD	019930520H
	DD	01H
	DD	FLAT:$T64044
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T64044	DD	0ffffffffH
	DD	FLAT:$L64040
xdata$x	ENDS
_TEXT	SEGMENT
$T64034 = -16
$T64035 = -20
$T64038 = -24
$T64039 = -40
__$EHRec$ = -12
_this$ = -44
?Show@EventWindow@@UAEXXZ PROC NEAR			; EventWindow::Show

; 879  : {   

  026a7	55		 push	 ebp
  026a8	8b ec		 mov	 ebp, esp
  026aa	6a ff		 push	 -1
  026ac	68 00 00 00 00	 push	 $L64043
  026b1	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  026b7	50		 push	 eax
  026b8	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  026bf	83 ec 24	 sub	 esp, 36			; 00000024H
  026c2	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 880  : 	if (visible) return;

  026c5	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  026c8	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  026cc	74 05		 je	 SHORT $L63313
  026ce	e9 ae 00 00 00	 jmp	 $L63312
$L63313:

; 881  : 
; 882  : 	if (!plane)

  026d3	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  026d6	83 79 70 00	 cmp	 DWORD PTR [ecx+112], 0
  026da	75 4e		 jne	 SHORT $L63314

; 883  : 		plane = New SOL_Plane(window);

  026dc	68 c8 9c 00 00	 push	 40136			; 00009cc8H
  026e1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  026e6	83 c4 04	 add	 esp, 4
  026e9	89 45 ec	 mov	 DWORD PTR $T64035[ebp], eax
  026ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  026f3	83 7d ec 00	 cmp	 DWORD PTR $T64035[ebp], 0
  026f7	74 14		 je	 SHORT $L64036
  026f9	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  026fc	83 c2 50	 add	 edx, 80			; 00000050H
  026ff	52		 push	 edx
  02700	8b 4d ec	 mov	 ecx, DWORD PTR $T64035[ebp]
  02703	e8 00 00 00 00	 call	 ??0SOL_Plane@@QAE@ABVSOL_Rect@@@Z ; SOL_Plane::SOL_Plane
  02708	89 45 d0	 mov	 DWORD PTR -48+[ebp], eax
  0270b	eb 07		 jmp	 SHORT $L64037
$L64036:
  0270d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR -48+[ebp], 0
$L64037:
  02714	8b 45 d0	 mov	 eax, DWORD PTR -48+[ebp]
  02717	89 45 f0	 mov	 DWORD PTR $T64034[ebp], eax
  0271a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02721	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  02724	8b 55 f0	 mov	 edx, DWORD PTR $T64034[ebp]
  02727	89 51 70	 mov	 DWORD PTR [ecx+112], edx
$L63314:

; 884  : 	// force no plane background drawing
; 885  : // HOOK
; 886  : // Since the bitmap may not fit the plane
; 887  : //	plane->SetPicNum(-3); 
; 888  : 	plane->SetPicNum(-2); 

  0272a	6a fe		 push	 -2			; fffffffeH
  0272c	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0272f	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  02732	e8 00 00 00 00	 call	 ?SetPicNum@SOL_Plane@@QAEXH@Z ; SOL_Plane::SetPicNum

; 889  : 	graphMgr->AddPlane(plane);

  02737	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0273a	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0273d	52		 push	 edx
  0273e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02744	e8 00 00 00 00	 call	 ?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::AddPlane

; 890  : 	SOL_Window::Show();

  02749	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0274c	e8 00 00 00 00	 call	 ?Show@SOL_Window@@UAEXXZ ; SOL_Window::Show

; 891  : 	graphMgr->FrameOut();

  02751	6a ff		 push	 -1
  02753	6a ff		 push	 -1
  02755	6a 00		 push	 0
  02757	6a 00		 push	 0
  02759	8d 4d d8	 lea	 ecx, DWORD PTR $T64039[ebp]
  0275c	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  02761	83 ec 10	 sub	 esp, 16			; 00000010H
  02764	8b cc		 mov	 ecx, esp
  02766	89 65 e8	 mov	 DWORD PTR $T64038[ebp], esp
  02769	50		 push	 eax
  0276a	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  0276f	6a 01		 push	 1
  02771	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02776	8b 10		 mov	 edx, DWORD PTR [eax]
  02778	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0277e	ff 52 14	 call	 DWORD PTR [edx+20]
$L63312:

; 892  : }

  02781	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02784	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0278b	8b e5		 mov	 esp, ebp
  0278d	5d		 pop	 ebp
  0278e	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L64040:
  00052	8b 45 ec	 mov	 eax, DWORD PTR $T64035[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005b	59		 pop	 ecx
  0005c	c3		 ret	 0
$L64043:
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T64042
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Show@EventWindow@@UAEXXZ ENDP				; EventWindow::Show
EXTRN	?SetType@SOL_Plane@@QAEXXZ:NEAR			; SOL_Plane::SetType
EXTRN	?ChangePic@SOL_Plane@@IAEXXZ:NEAR		; SOL_Plane::ChangePic
;	COMDAT ?SetPicNum@SOL_Plane@@QAEXH@Z
_TEXT	SEGMENT
_num$ = 8
_this$ = -4
?SetPicNum@SOL_Plane@@QAEXH@Z PROC NEAR			; SOL_Plane::SetPicNum, COMDAT

; 119  : 	void				SetPicNum(int num)		{picResNum = num;SetType();ChangePic();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _num$[ebp]
  0000d	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?SetType@SOL_Plane@@QAEXXZ ; SOL_Plane::SetType
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?ChangePic@SOL_Plane@@IAEXXZ ; SOL_Plane::ChangePic
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetPicNum@SOL_Plane@@QAEXH@Z ENDP			; SOL_Plane::SetPicNum
_TEXT	ENDS
EXTRN	?AddPlane@Screen@@QAEXPAVSOL_Plane@@@Z:NEAR	; Screen::AddPlane
;	COMDAT ?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z
_TEXT	SEGMENT
_plane$ = 8
_this$ = -4
?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z PROC NEAR	; GraphicsMgr::AddPlane, COMDAT

; 59   : 	void		AddPlane(SOL_Plane* plane)				{next.AddPlane(plane);}	// cant be const

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e8 00 00 00 00	 call	 ?AddPlane@Screen@@QAEXPAVSOL_Plane@@@Z ; Screen::AddPlane
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ENDP	; GraphicsMgr::AddPlane
_TEXT	ENDS
PUBLIC	??_7SCIScrollWindow@@6B@			; SCIScrollWindow::`vftable'
PUBLIC	??_GSCIScrollWindow@@UAEPAXI@Z			; SCIScrollWindow::`scalar deleting destructor'
PUBLIC	??_ESCIScrollWindow@@UAEPAXI@Z			; SCIScrollWindow::`vector deleting destructor'
PUBLIC	??0ScrollEntryID@@QAE@XZ			; ScrollEntryID::ScrollEntryID
PUBLIC	?Get@ScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ; ScrollEntryID::Get
PUBLIC	??AScrollEntryID@@QBEAAUScrollEntry@@I@Z	; ScrollEntryID::operator[]
EXTRN	?systemFont@@3GA:WORD				; systemFont
EXTRN	??0TextID@@QAE@G@Z:NEAR				; TextID::TextID
_BSS	SEGMENT
$SG63334 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_7SCIScrollWindow@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Window.cpp
CONST	SEGMENT
??_7SCIScrollWindow@@6B@ DD FLAT:??_ESCIScrollWindow@@UAEPAXI@Z ; SCIScrollWindow::`vftable'
	DD	FLAT:?Hide@SOL_Window@@UAEXXZ
	DD	FLAT:?Move@SOL_Window@@UAEXVSOL_Point@@@Z
	DD	FLAT:?ResizeWindow@SOL_Window@@UAEXAAVSOL_Rect@@@Z
	DD	FLAT:?SetText@SOL_Window@@UAEXPADHH@Z
	DD	FLAT:?Show@SOL_Window@@UAEXXZ
	DD	FLAT:?PageUp@SOL_Window@@UAEXXZ
	DD	FLAT:?PageDown@SOL_Window@@UAEXXZ
	DD	FLAT:?Home@SOL_Window@@UAEXXZ
	DD	FLAT:?End@SOL_Window@@UAEXXZ
	DD	FLAT:?UpArrow@SOL_Window@@UAEXXZ
	DD	FLAT:?DownArrow@SOL_Window@@UAEXXZ
	DD	FLAT:?ReDrawText@SOL_Window@@UAEXXZ
	DD	FLAT:?GetLineIndices@SOL_Window@@MAEXXZ
CONST	ENDS
xdata$x	SEGMENT
$T64052	DD	019930520H
	DD	01H
	DD	FLAT:$T64054
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T64054	DD	0ffffffffH
	DD	FLAT:$L64050
xdata$x	ENDS
_TEXT	SEGMENT
$T64048 = -20
$T64049 = -24
__$EHRec$ = -12
_theWindow$ = 8
_thePos$ = 12
_thePlaneID$ = 20
_theFore$ = 24
_theBack$ = 28
_theFont$ = 32
_theMode$ = 36
_theBorder$ = 40
_theSize$ = 44
_this$ = -28
_i$ = -16
??0SCIScrollWindow@@QAE@AAVSOL_Rect@@VSOL_Point@@HGGGFFH@Z PROC NEAR ; SCIScrollWindow::SCIScrollWindow

; 908  : {

  0278f	55		 push	 ebp
  02790	8b ec		 mov	 ebp, esp
  02792	6a ff		 push	 -1
  02794	68 00 00 00 00	 push	 $L64053
  02799	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0279f	50		 push	 eax
  027a0	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  027a7	83 ec 10	 sub	 esp, 16			; 00000010H
  027aa	56		 push	 esi
  027ab	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  027ae	6a 00		 push	 0
  027b0	66 8b 45 28	 mov	 ax, WORD PTR _theBorder$[ebp]
  027b4	50		 push	 eax
  027b5	66 8b 4d 24	 mov	 cx, WORD PTR _theMode$[ebp]
  027b9	51		 push	 ecx
  027ba	66 8b 55 20	 mov	 dx, WORD PTR _theFont$[ebp]
  027be	52		 push	 edx
  027bf	66 8b 45 1c	 mov	 ax, WORD PTR _theBack$[ebp]
  027c3	50		 push	 eax
  027c4	66 8b 4d 18	 mov	 cx, WORD PTR _theFore$[ebp]
  027c8	51		 push	 ecx
  027c9	68 00 00 00 00	 push	 OFFSET FLAT:$SG63334
  027ce	8b 55 14	 mov	 edx, DWORD PTR _thePlaneID$[ebp]
  027d1	52		 push	 edx
  027d2	83 ec 08	 sub	 esp, 8
  027d5	8b cc		 mov	 ecx, esp
  027d7	89 65 ec	 mov	 DWORD PTR $T64048[ebp], esp
  027da	8d 45 0c	 lea	 eax, DWORD PTR _thePos$[ebp]
  027dd	50		 push	 eax
  027de	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  027e3	8b 4d 08	 mov	 ecx, DWORD PTR _theWindow$[ebp]
  027e6	51		 push	 ecx
  027e7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  027ea	e8 00 00 00 00	 call	 ??0SOL_Window@@QAE@AAVSOL_Rect@@VSOL_Point@@HPADGGGFFH@Z ; SOL_Window::SOL_Window
  027ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  027f6	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  027f9	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  027ff	e8 00 00 00 00	 call	 ??0ScrollEntryID@@QAE@XZ ; ScrollEntryID::ScrollEntryID
  02804	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  02807	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7SCIScrollWindow@@6B@ ; SCIScrollWindow::`vftable'

; 909  :    refType = SCROLLWINDOW;

  0280d	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  02810	c7 80 a0 00 00
	00 cc f0 00 00	 mov	 DWORD PTR [eax+160], 61644 ; 0000f0ccH

; 910  : 	end = 0;

  0281a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0281d	c7 81 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+164], 0

; 911  :    size = theSize;

  02827	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0282a	8b 45 2c	 mov	 eax, DWORD PTR _theSize$[ebp]
  0282d	89 82 ac 00 00
	00		 mov	 DWORD PTR [edx+172], eax

; 912  : 	entries.Get(size);

  02833	6a 00		 push	 0
  02835	6a 00		 push	 0
  02837	6a 00		 push	 0
  02839	6a 00		 push	 0
  0283b	68 00 02 00 00	 push	 512			; 00000200H
  02840	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  02843	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  02849	52		 push	 edx
  0284a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0284d	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02853	e8 00 00 00 00	 call	 ?Get@ScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ; ScrollEntryID::Get

; 913  : 	for (int i=0;i<size;++i) {

  02858	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0285f	eb 09		 jmp	 SHORT $L63336
$L63337:
  02861	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  02864	83 c0 01	 add	 eax, 1
  02867	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L63336:
  0286a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0286d	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  02870	3b 91 ac 00 00
	00		 cmp	 edx, DWORD PTR [ecx+172]
  02876	7d 79		 jge	 SHORT $L63338

; 914  : 		entries[i].textID = (TextID)0;

  02878	6a 00		 push	 0
  0287a	8d 4d e8	 lea	 ecx, DWORD PTR $T64049[ebp]
  0287d	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  02882	66 8b 30	 mov	 si, WORD PTR [eax]
  02885	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  02888	50		 push	 eax
  02889	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0288c	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02892	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02897	66 89 30	 mov	 WORD PTR [eax], si

; 915  : 		entries[i].font = systemFont;

  0289a	33 c9		 xor	 ecx, ecx
  0289c	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?systemFont@@3GA ; systemFont
  028a3	8b f1		 mov	 esi, ecx
  028a5	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  028a8	52		 push	 edx
  028a9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  028ac	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  028b2	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  028b7	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 916  : 		entries[i].color = SOL_BLACK;

  028ba	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  028bd	50		 push	 eax
  028be	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  028c1	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  028c7	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  028cc	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 917  : 		entries[i].mode = TEJUSTCENTER;

  028d3	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  028d6	51		 push	 ecx
  028d7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  028da	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  028e0	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  028e5	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1

; 918  : 	}

  028ec	e9 70 ff ff ff	 jmp	 $L63337
$L63338:

; 919  : }

  028f1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  028f8	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  028fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  028fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02905	5e		 pop	 esi
  02906	8b e5		 mov	 esp, ebp
  02908	5d		 pop	 ebp
  02909	c2 28 00	 ret	 40			; 00000028H
_TEXT	ENDS
text$x	SEGMENT
$L64050:
  00067	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ??1SOL_Window@@UAE@XZ	; SOL_Window::~SOL_Window
  0006f	c3		 ret	 0
$L64053:
  00070	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T64052
  00075	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0SCIScrollWindow@@QAE@AAVSOL_Rect@@VSOL_Point@@HGGGFFH@Z ENDP ; SCIScrollWindow::SCIScrollWindow
PUBLIC	??0FakeScrollEntryID@@QAE@XZ			; FakeScrollEntryID::FakeScrollEntryID
;	COMDAT ??0ScrollEntryID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ScrollEntryID@@QAE@XZ PROC NEAR			; ScrollEntryID::ScrollEntryID, COMDAT

; 40   : 	ScrollEntryID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeScrollEntryID@@QAE@XZ ; FakeScrollEntryID::FakeScrollEntryID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ScrollEntryID@@QAE@XZ ENDP				; ScrollEntryID::ScrollEntryID
_TEXT	ENDS
;	COMDAT ??0FakeScrollEntryID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeScrollEntryID@@QAE@XZ PROC NEAR			; FakeScrollEntryID::FakeScrollEntryID, COMDAT

; 36   : FakeTemplateID(FakeScrollEntryID, ScrollEntry,MemWindowEntry)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeScrollEntryID@@QAE@XZ ENDP			; FakeScrollEntryID::FakeScrollEntryID
_TEXT	ENDS
PUBLIC	?Get@FakeScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ; FakeScrollEntryID::Get
;	COMDAT ?Get@ScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_this$ = -4
_size$ = 8
_attrs$ = 12
_num$ = 16
_client$ = 20
_initChar$ = 24
_h$ = 28
?Get@ScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; ScrollEntryID::Get, COMDAT

; 50   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 		FakeScrollEntryID::Get(size * sizeof(ScrollEntry), attrs, num, client, initChar, h);

  00007	8b 45 1c	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 18	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 14	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _attrs$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _size$[ebp]
  0001e	c1 e2 04	 shl	 edx, 4
  00021	52		 push	 edx
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?Get@FakeScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ; FakeScrollEntryID::Get

; 52   : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 18 00	 ret	 24			; 00000018H
?Get@ScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; ScrollEntryID::Get
_TEXT	ENDS
;	COMDAT ?Get@FakeScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_size$ = 8
_attrs$ = 12
_num$ = 16
_client$ = 20
_initChar$ = 24
_h$ = 28
_this$ = -4
?Get@FakeScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; FakeScrollEntryID::Get, COMDAT

; 36   : FakeTemplateID(FakeScrollEntryID, ScrollEntry,MemWindowEntry)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 1c	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 18	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 14	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _attrs$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _size$[ebp]
  0001e	52		 push	 edx
  0001f	6a 53		 push	 83			; 00000053H
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 18 00	 ret	 24			; 00000018H
?Get@FakeScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; FakeScrollEntryID::Get
_TEXT	ENDS
;	COMDAT ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z
_TEXT	SEGMENT
_this$ = -4
_s$ = 8
??AScrollEntryID@@QBEAAUScrollEntry@@I@Z PROC NEAR	; ScrollEntryID::operator[], COMDAT

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 		return *(ScrollEntry*)(&FakeScrollEntryID::operator[](s * sizeof(ScrollEntry)));

  00007	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000a	c1 e0 04	 shl	 eax, 4
  0000d	50		 push	 eax
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]

; 69   : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ENDP		; ScrollEntryID::operator[]
_TEXT	ENDS
PUBLIC	??1SCIScrollWindow@@UAE@XZ			; SCIScrollWindow::~SCIScrollWindow
;	COMDAT ??_GSCIScrollWindow@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GSCIScrollWindow@@UAEPAXI@Z PROC NEAR		; SCIScrollWindow::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1SCIScrollWindow@@UAE@XZ ; SCIScrollWindow::~SCIScrollWindow
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L62713
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L62713:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GSCIScrollWindow@@UAEPAXI@Z ENDP			; SCIScrollWindow::`scalar deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
$T64064	DD	019930520H
	DD	01H
	DD	FLAT:$T64066
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T64066	DD	0ffffffffH
	DD	FLAT:$L64062
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -20
_index$ = -16
??1SCIScrollWindow@@UAE@XZ PROC NEAR			; SCIScrollWindow::~SCIScrollWindow

; 922  : {

  0290c	55		 push	 ebp
  0290d	8b ec		 mov	 ebp, esp
  0290f	6a ff		 push	 -1
  02911	68 00 00 00 00	 push	 $L64065
  02916	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0291c	50		 push	 eax
  0291d	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  02924	83 ec 08	 sub	 esp, 8
  02927	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0292a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0292d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7SCIScrollWindow@@6B@ ; SCIScrollWindow::`vftable'
  02933	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 923  :    for (int index = 0; index < end; index++) 

  0293a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
  02941	eb 09		 jmp	 SHORT $L63345
$L63346:
  02943	8b 4d f0	 mov	 ecx, DWORD PTR _index$[ebp]
  02946	83 c1 01	 add	 ecx, 1
  02949	89 4d f0	 mov	 DWORD PTR _index$[ebp], ecx
$L63345:
  0294c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0294f	8b 45 f0	 mov	 eax, DWORD PTR _index$[ebp]
  02952	3b 82 a4 00 00
	00		 cmp	 eax, DWORD PTR [edx+164]
  02958	7d 1b		 jge	 SHORT $L63347

; 924  :       entries[index].textID.Free();

  0295a	8b 4d f0	 mov	 ecx, DWORD PTR _index$[ebp]
  0295d	51		 push	 ecx
  0295e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02961	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02967	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0296c	8b c8		 mov	 ecx, eax
  0296e	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free
  02973	eb ce		 jmp	 SHORT $L63346
$L63347:

; 925  : 	entries.Free();

  02975	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02978	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0297e	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 926  : }

  02983	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0298a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0298d	e8 00 00 00 00	 call	 ??1SOL_Window@@UAE@XZ	; SOL_Window::~SOL_Window
  02992	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02995	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0299c	8b e5		 mov	 esp, ebp
  0299e	5d		 pop	 ebp
  0299f	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L64062:
  0007a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ??1SOL_Window@@UAE@XZ	; SOL_Window::~SOL_Window
  00082	c3		 ret	 0
$L64065:
  00083	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T64064
  00088	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1SCIScrollWindow@@UAE@XZ ENDP				; SCIScrollWindow::~SCIScrollWindow
PUBLIC	?Add@SCIScrollWindow@@QAE?AVTextID@@V2@HHHH@Z	; SCIScrollWindow::Add
PUBLIC	??0TextID@@QAE@ABV0@@Z				; TextID::TextID
EXTRN	_memcpy:NEAR
EXTRN	?Add@TextID@@QAEXV1@@Z:NEAR			; TextID::Add
EXTRN	__imp__sprintf:NEAR
_DATA	SEGMENT
	ORG $+1
$SG63366 DB	'|f%d||c%d||a%d|%s', 00H
_DATA	ENDS
_TEXT	SEGMENT
_textID$ = 12
_font$ = 16
_color$ = 20
_mode$ = 24
_jump$ = 28
___$ReturnUdt$ = 8
_this$ = -1048
_textPtr$63359 = -1032
_strPtr$63360 = -1040
_len$63361 = -1036
_textCopy$ = -4
_newText$ = -1028
?Add@SCIScrollWindow@@QAE?AVTextID@@V2@HHHH@Z PROC NEAR	; SCIScrollWindow::Add

; 930  : {

  029a0	55		 push	 ebp
  029a1	8b ec		 mov	 ebp, esp
  029a3	81 ec 18 04 00
	00		 sub	 esp, 1048		; 00000418H
  029a9	56		 push	 esi
  029aa	89 8d e8 fb ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 931  : 	if(end < size) {

  029b0	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  029b6	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  029bc	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  029c2	3b 91 ac 00 00
	00		 cmp	 edx, DWORD PTR [ecx+172]
  029c8	7d 20		 jge	 SHORT $L63357

; 932  :       end++;

  029ca	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  029d0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  029d6	83 c1 01	 add	 ecx, 1
  029d9	8b 95 e8 fb ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  029df	89 8a a4 00 00
	00		 mov	 DWORD PTR [edx+164], ecx

; 933  : 	} else {

  029e5	e9 de 00 00 00	 jmp	 $L63358
$L63357:

; 934  : 		char *textPtr = *text, *strPtr = *(entries[0].textID);

  029ea	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  029f0	83 c1 0a	 add	 ecx, 10			; 0000000aH
  029f3	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  029f8	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _textPtr$63359[ebp], eax
  029fe	6a 00		 push	 0
  02a00	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02a06	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02a0c	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02a11	8b c8		 mov	 ecx, eax
  02a13	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  02a18	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _strPtr$63360[ebp], eax

; 935  : 
; 936  : 		int len = strlen ( strPtr );

  02a1e	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _strPtr$63360[ebp]
  02a24	50		 push	 eax
  02a25	e8 00 00 00 00	 call	 _strlen
  02a2a	83 c4 04	 add	 esp, 4
  02a2d	89 85 f4 fb ff
	ff		 mov	 DWORD PTR _len$63361[ebp], eax

; 937  : 		memcpy ( textPtr, textPtr + len, len );

  02a33	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _len$63361[ebp]
  02a39	51		 push	 ecx
  02a3a	8b 95 f8 fb ff
	ff		 mov	 edx, DWORD PTR _textPtr$63359[ebp]
  02a40	03 95 f4 fb ff
	ff		 add	 edx, DWORD PTR _len$63361[ebp]
  02a46	52		 push	 edx
  02a47	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _textPtr$63359[ebp]
  02a4d	50		 push	 eax
  02a4e	e8 00 00 00 00	 call	 _memcpy
  02a53	83 c4 0c	 add	 esp, 12			; 0000000cH

; 938  : 
; 939  :       startChar -= len;

  02a56	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02a5c	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  02a5f	2b 95 f4 fb ff
	ff		 sub	 edx, DWORD PTR _len$63361[ebp]
  02a65	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02a6b	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 940  :       entries[0].textID.Free();

  02a6e	6a 00		 push	 0
  02a70	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02a76	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02a7c	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02a81	8b c8		 mov	 ecx, eax
  02a83	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 941  : 
; 942  : 		memcpy ( &entries[0], &entries[1], sizeof ( ScrollEntry ) * end );

  02a88	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02a8e	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  02a94	c1 e2 04	 shl	 edx, 4
  02a97	52		 push	 edx
  02a98	6a 01		 push	 1
  02a9a	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02aa0	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02aa6	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02aab	50		 push	 eax
  02aac	6a 00		 push	 0
  02aae	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02ab4	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02aba	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02abf	50		 push	 eax
  02ac0	e8 00 00 00 00	 call	 _memcpy
  02ac5	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63358:

; 944  : 
; 945  : 	// Make a copy of the text
; 946  : 	TextID textCopy;

  02ac8	8d 4d fc	 lea	 ecx, DWORD PTR _textCopy$[ebp]
  02acb	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID

; 947  : 	textCopy.Add(textID);

  02ad0	51		 push	 ecx
  02ad1	8b cc		 mov	 ecx, esp
  02ad3	8d 45 0c	 lea	 eax, DWORD PTR _textID$[ebp]
  02ad6	50		 push	 eax
  02ad7	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  02adc	8d 4d fc	 lea	 ecx, DWORD PTR _textCopy$[ebp]
  02adf	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXV1@@Z	; TextID::Add

; 948  : 
; 949  : 	// Add a new entry
; 950  : 	entries[end - 1].textID = textCopy;

  02ae4	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02aea	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  02af0	83 ea 01	 sub	 edx, 1
  02af3	52		 push	 edx
  02af4	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02afa	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02b00	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02b05	66 8b 4d fc	 mov	 cx, WORD PTR _textCopy$[ebp]
  02b09	66 89 08	 mov	 WORD PTR [eax], cx

; 951  : 	entries[end - 1].font = font;

  02b0c	8b 95 e8 fb ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  02b12	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  02b18	83 e8 01	 sub	 eax, 1
  02b1b	50		 push	 eax
  02b1c	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02b22	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02b28	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02b2d	8b 4d 10	 mov	 ecx, DWORD PTR _font$[ebp]
  02b30	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 952  : 	entries[end - 1].color = color;

  02b33	8b 95 e8 fb ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  02b39	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  02b3f	83 e8 01	 sub	 eax, 1
  02b42	50		 push	 eax
  02b43	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02b49	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02b4f	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02b54	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  02b57	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 953  : 	entries[end - 1].mode = mode;

  02b5a	8b 95 e8 fb ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  02b60	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  02b66	83 e8 01	 sub	 eax, 1
  02b69	50		 push	 eax
  02b6a	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02b70	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02b76	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02b7b	8b 4d 18	 mov	 ecx, DWORD PTR _mode$[ebp]
  02b7e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 954  : 
; 955  : 	char newText[1024];
; 956  : 	sprintf ( newText, "|f%d||c%d||a%d|%s", font, color, mode, *textID );

  02b81	8d 4d 0c	 lea	 ecx, DWORD PTR _textID$[ebp]
  02b84	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  02b89	50		 push	 eax
  02b8a	8b 55 18	 mov	 edx, DWORD PTR _mode$[ebp]
  02b8d	52		 push	 edx
  02b8e	8b 45 14	 mov	 eax, DWORD PTR _color$[ebp]
  02b91	50		 push	 eax
  02b92	8b 4d 10	 mov	 ecx, DWORD PTR _font$[ebp]
  02b95	51		 push	 ecx
  02b96	68 00 00 00 00	 push	 OFFSET FLAT:$SG63366
  02b9b	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _newText$[ebp]
  02ba1	52		 push	 edx
  02ba2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  02ba8	83 c4 18	 add	 esp, 24			; 00000018H

; 957  : 	text.Add ( newText );

  02bab	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _newText$[ebp]
  02bb1	50		 push	 eax
  02bb2	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02bb8	83 c1 0a	 add	 ecx, 10			; 0000000aH
  02bbb	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXPBD@Z	; TextID::Add

; 958  : 
; 959  :    if(jump)

  02bc0	83 7d 1c 00	 cmp	 DWORD PTR _jump$[ebp], 0
  02bc4	74 33		 je	 SHORT $L63367

; 960  :       startChar = strlen(*text) - strlen(newText);

  02bc6	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02bcc	83 c1 0a	 add	 ecx, 10			; 0000000aH
  02bcf	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  02bd4	50		 push	 eax
  02bd5	e8 00 00 00 00	 call	 _strlen
  02bda	83 c4 04	 add	 esp, 4
  02bdd	8b f0		 mov	 esi, eax
  02bdf	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _newText$[ebp]
  02be5	51		 push	 ecx
  02be6	e8 00 00 00 00	 call	 _strlen
  02beb	83 c4 04	 add	 esp, 4
  02bee	2b f0		 sub	 esi, eax
  02bf0	8b 95 e8 fb ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  02bf6	89 72 34	 mov	 DWORD PTR [edx+52], esi
$L63367:

; 961  : 
; 962  :    if (end)

  02bf9	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02bff	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  02c06	74 1f		 je	 SHORT $L63368

; 963  : 	   SetText(NULL,False,startChar);

  02c08	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02c0e	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  02c11	52		 push	 edx
  02c12	6a 00		 push	 0
  02c14	6a 00		 push	 0
  02c16	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02c1c	8b 10		 mov	 edx, DWORD PTR [eax]
  02c1e	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02c24	ff 52 10	 call	 DWORD PTR [edx+16]
$L63368:

; 964  : 
; 965  :    return entries[end - 1].textID;

  02c27	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02c2d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02c33	83 e9 01	 sub	 ecx, 1
  02c36	51		 push	 ecx
  02c37	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02c3d	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02c43	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02c48	50		 push	 eax
  02c49	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  02c4c	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  02c51	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 966  : }

  02c54	5e		 pop	 esi
  02c55	8b e5		 mov	 esp, ebp
  02c57	5d		 pop	 ebp
  02c58	c2 18 00	 ret	 24			; 00000018H
?Add@SCIScrollWindow@@QAE?AVTextID@@V2@HHHH@Z ENDP	; SCIScrollWindow::Add
_TEXT	ENDS
;	COMDAT ??0TextID@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0TextID@@QAE@ABV0@@Z PROC NEAR			; TextID::TextID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0TextID@@QAE@ABV0@@Z ENDP				; TextID::TextID
_TEXT	ENDS
PUBLIC	?Delete@SCIScrollWindow@@QAEXVTextID@@@Z	; SCIScrollWindow::Delete
EXTRN	?AddF@TextID@@QAAXPBDZZ:NEAR			; TextID::AddF
_DATA	SEGMENT
	ORG $+2
$SG63391 DB	'|s%d|', 00H
	ORG $+2
$SG63393 DB	'|f%d|', 00H
	ORG $+2
$SG63395 DB	'|c%d|', 00H
	ORG $+2
$SG63397 DB	'|a%d|', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T64071 = -12
_key$ = 8
_this$ = -20
_index$ = -8
_i$ = -4
?Delete@SCIScrollWindow@@QAEXVTextID@@@Z PROC NEAR	; SCIScrollWindow::Delete

; 970  : {

  02c5b	55		 push	 ebp
  02c5c	8b ec		 mov	 ebp, esp
  02c5e	83 ec 14	 sub	 esp, 20			; 00000014H
  02c61	56		 push	 esi
  02c62	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 971  :    int index, i;
; 972  :    for (index = 0; index < end; index++) 

  02c65	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
  02c6c	eb 09		 jmp	 SHORT $L63378
$L63379:
  02c6e	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  02c71	83 c0 01	 add	 eax, 1
  02c74	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
$L63378:
  02c77	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02c7a	8b 55 f8	 mov	 edx, DWORD PTR _index$[ebp]
  02c7d	3b 91 a4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+164]
  02c83	7d 25		 jge	 SHORT $L63380

; 973  :       if(entries[index].textID == key)

  02c85	8d 45 08	 lea	 eax, DWORD PTR _key$[ebp]
  02c88	50		 push	 eax
  02c89	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  02c8c	51		 push	 ecx
  02c8d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02c90	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02c96	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02c9b	8b c8		 mov	 ecx, eax
  02c9d	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  02ca2	85 c0		 test	 eax, eax
  02ca4	74 02		 je	 SHORT $L63381

; 974  :          break;

  02ca6	eb 02		 jmp	 SHORT $L63380
$L63381:

; 975  : 
; 976  : 	if (index < end) {

  02ca8	eb c4		 jmp	 SHORT $L63379
$L63380:
  02caa	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  02cad	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  02cb0	3b 82 a4 00 00
	00		 cmp	 eax, DWORD PTR [edx+164]
  02cb6	0f 8d 92 02 00
	00		 jge	 $L63382

; 977  : 		startChar -= strlen ( *entries[index].textID );

  02cbc	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  02cbf	51		 push	 ecx
  02cc0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02cc3	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02cc9	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02cce	8b c8		 mov	 ecx, eax
  02cd0	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  02cd5	50		 push	 eax
  02cd6	e8 00 00 00 00	 call	 _strlen
  02cdb	83 c4 04	 add	 esp, 4
  02cde	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  02ce1	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]
  02ce4	2b c8		 sub	 ecx, eax
  02ce6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  02ce9	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 978  : 
; 979  : 		entries[index].textID.Free();

  02cec	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  02cef	50		 push	 eax
  02cf0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02cf3	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02cf9	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02cfe	8b c8		 mov	 ecx, eax
  02d00	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 980  : 		end--;

  02d05	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02d08	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  02d0e	83 ea 01	 sub	 edx, 1
  02d11	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  02d14	89 90 a4 00 00
	00		 mov	 DWORD PTR [eax+164], edx

; 981  : 		for(i = index; i < end; i++) {

  02d1a	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  02d1d	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  02d20	eb 09		 jmp	 SHORT $L63383
$L63384:
  02d22	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  02d25	83 c2 01	 add	 edx, 1
  02d28	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L63383:
  02d2b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  02d2e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  02d31	3b 88 a4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+164]
  02d37	0f 8d bf 00 00
	00		 jge	 $L63385

; 982  : 			entries[i].textID = entries[i + 1].textID;

  02d3d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  02d40	83 c2 01	 add	 edx, 1
  02d43	52		 push	 edx
  02d44	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02d47	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02d4d	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02d52	66 8b 30	 mov	 si, WORD PTR [eax]
  02d55	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02d58	50		 push	 eax
  02d59	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02d5c	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02d62	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02d67	66 89 30	 mov	 WORD PTR [eax], si

; 983  : 			entries[i].font = entries[i + 1].font;     

  02d6a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  02d6d	83 c1 01	 add	 ecx, 1
  02d70	51		 push	 ecx
  02d71	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02d74	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02d7a	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02d7f	8b f0		 mov	 esi, eax
  02d81	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  02d84	52		 push	 edx
  02d85	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02d88	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02d8e	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02d93	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  02d96	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 984  : 			entries[i].color = entries[i + 1].color;

  02d99	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  02d9c	83 c2 01	 add	 edx, 1
  02d9f	52		 push	 edx
  02da0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02da3	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02da9	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02dae	8b f0		 mov	 esi, eax
  02db0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02db3	50		 push	 eax
  02db4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02db7	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02dbd	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02dc2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  02dc5	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 985  : 			entries[i].mode = entries[i + 1].mode;

  02dc8	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  02dcb	83 c2 01	 add	 edx, 1
  02dce	52		 push	 edx
  02dcf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02dd2	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02dd8	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02ddd	8b f0		 mov	 esi, eax
  02ddf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02de2	50		 push	 eax
  02de3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02de6	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02dec	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02df1	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  02df4	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 986  : 		}

  02df7	e9 26 ff ff ff	 jmp	 $L63384
$L63385:

; 987  :       entries[end].textID = (TextID)0;

  02dfc	6a 00		 push	 0
  02dfe	8d 4d f4	 lea	 ecx, DWORD PTR $T64071[ebp]
  02e01	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  02e06	66 8b 30	 mov	 si, WORD PTR [eax]
  02e09	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  02e0c	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  02e12	50		 push	 eax
  02e13	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02e16	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02e1c	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02e21	66 89 30	 mov	 WORD PTR [eax], si

; 988  : 		text.Free();

  02e24	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02e27	83 c1 0a	 add	 ecx, 10			; 0000000aH
  02e2a	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 989  : 		for(i = 0; i < end; i++) {

  02e2f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  02e36	eb 09		 jmp	 SHORT $L63388
$L63389:
  02e38	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  02e3b	83 c1 01	 add	 ecx, 1
  02e3e	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L63388:
  02e41	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  02e44	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02e47	3b 82 a4 00 00
	00		 cmp	 eax, DWORD PTR [edx+164]
  02e4d	0f 8d e5 00 00
	00		 jge	 $L63390

; 990  : 			 
; 991  : 			text.AddF("|s%d|",i);

  02e53	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  02e56	51		 push	 ecx
  02e57	68 00 00 00 00	 push	 OFFSET FLAT:$SG63391
  02e5c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  02e5f	83 c2 0a	 add	 edx, 10			; 0000000aH
  02e62	52		 push	 edx
  02e63	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  02e68	83 c4 0c	 add	 esp, 12			; 0000000cH

; 992  : 
; 993  : 			if (font != -1)    

  02e6b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  02e6e	83 b8 8c 00 00
	00 ff		 cmp	 DWORD PTR [eax+140], -1
  02e75	74 2a		 je	 SHORT $L63392

; 994  : 				text.AddF("|f%d|",entries[i].font);

  02e77	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  02e7a	51		 push	 ecx
  02e7b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02e7e	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02e84	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02e89	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  02e8c	52		 push	 edx
  02e8d	68 00 00 00 00	 push	 OFFSET FLAT:$SG63393
  02e92	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  02e95	83 c0 0a	 add	 eax, 10			; 0000000aH
  02e98	50		 push	 eax
  02e99	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  02e9e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63392:

; 995  : 
; 996  : 			if (fore != -1)

  02ea1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02ea4	83 b9 90 00 00
	00 ff		 cmp	 DWORD PTR [ecx+144], -1
  02eab	74 2a		 je	 SHORT $L63394

; 997  : 				text.AddF("|c%d|",entries[i].color);

  02ead	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  02eb0	52		 push	 edx
  02eb1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02eb4	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02eba	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02ebf	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  02ec2	50		 push	 eax
  02ec3	68 00 00 00 00	 push	 OFFSET FLAT:$SG63395
  02ec8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02ecb	83 c1 0a	 add	 ecx, 10			; 0000000aH
  02ece	51		 push	 ecx
  02ecf	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  02ed4	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63394:

; 998  : 
; 999  : 			if (mode != -1)

  02ed7	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  02eda	83 ba 94 00 00
	00 ff		 cmp	 DWORD PTR [edx+148], -1
  02ee1	74 2a		 je	 SHORT $L63396

; 1000 : 				text.AddF("|a%d|",entries[i].mode);

  02ee3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02ee6	50		 push	 eax
  02ee7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02eea	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02ef0	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02ef5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02ef8	51		 push	 ecx
  02ef9	68 00 00 00 00	 push	 OFFSET FLAT:$SG63397
  02efe	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  02f01	83 c2 0a	 add	 edx, 10			; 0000000aH
  02f04	52		 push	 edx
  02f05	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  02f0a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63396:

; 1001 : 			
; 1002 : 			text.Add(entries[i].textID);

  02f0d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02f10	50		 push	 eax
  02f11	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02f14	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02f1a	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02f1f	51		 push	 ecx
  02f20	8b cc		 mov	 ecx, esp
  02f22	50		 push	 eax
  02f23	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  02f28	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02f2b	83 c1 0a	 add	 ecx, 10			; 0000000aH
  02f2e	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXV1@@Z	; TextID::Add

; 1003 : 		}

  02f33	e9 00 ff ff ff	 jmp	 $L63389
$L63390:

; 1004 : 		SetText(NULL,False,startChar);

  02f38	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02f3b	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  02f3e	52		 push	 edx
  02f3f	6a 00		 push	 0
  02f41	6a 00		 push	 0
  02f43	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  02f46	8b 10		 mov	 edx, DWORD PTR [eax]
  02f48	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02f4b	ff 52 10	 call	 DWORD PTR [edx+16]
$L63382:

; 1006 : 
; 1007 : }

  02f4e	5e		 pop	 esi
  02f4f	8b e5		 mov	 esp, ebp
  02f51	5d		 pop	 ebp
  02f52	c2 04 00	 ret	 4
?Delete@SCIScrollWindow@@QAEXVTextID@@@Z ENDP		; SCIScrollWindow::Delete
_TEXT	ENDS
PUBLIC	?Clear@SCIScrollWindow@@QAEXXZ			; SCIScrollWindow::Clear
_BSS	SEGMENT
	ALIGN	4

$SG63406 DB	01H DUP (?)
_BSS	ENDS
_TEXT	SEGMENT
_this$ = -8
_i$ = -4
?Clear@SCIScrollWindow@@QAEXXZ PROC NEAR		; SCIScrollWindow::Clear

; 1011 : {

  02f55	55		 push	 ebp
  02f56	8b ec		 mov	 ebp, esp
  02f58	83 ec 08	 sub	 esp, 8
  02f5b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1012 : 	for(int i = 0; i < end; i++)

  02f5e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  02f65	eb 09		 jmp	 SHORT $L63403
$L63404:
  02f67	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02f6a	83 c0 01	 add	 eax, 1
  02f6d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L63403:
  02f70	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02f73	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  02f76	3b 91 a4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+164]
  02f7c	7d 1b		 jge	 SHORT $L63405

; 1013 :    	entries[i].textID.Free();

  02f7e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  02f81	50		 push	 eax
  02f82	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02f85	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02f8b	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  02f90	8b c8		 mov	 ecx, eax
  02f92	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free
  02f97	eb ce		 jmp	 SHORT $L63404
$L63405:

; 1014 : 	end = 0;

  02f99	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02f9c	c7 81 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+164], 0

; 1015 :    SetText("",False);

  02fa6	6a 00		 push	 0
  02fa8	6a 00		 push	 0
  02faa	68 00 00 00 00	 push	 OFFSET FLAT:$SG63406
  02faf	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  02fb2	8b 02		 mov	 eax, DWORD PTR [edx]
  02fb4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02fb7	ff 50 10	 call	 DWORD PTR [eax+16]

; 1016 : }

  02fba	8b e5		 mov	 esp, ebp
  02fbc	5d		 pop	 ebp
  02fbd	c3		 ret	 0
?Clear@SCIScrollWindow@@QAEXXZ ENDP			; SCIScrollWindow::Clear
_TEXT	ENDS
PUBLIC	?GetSize@MemoryMgr@@QAEIG@Z			; MemoryMgr::GetSize
PUBLIC	?CopyEntries@SCIScrollWindow@@QAE?AVScrollEntryID@@XZ ; SCIScrollWindow::CopyEntries
PUBLIC	??0ScrollEntryID@@QAE@ABV0@@Z			; ScrollEntryID::ScrollEntryID
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -28
_entriesCopy$ = -8
_textCopy$ = -4
_target$ = -24
_source$ = -12
_sizeMem$ = -20
_i$ = -16
?CopyEntries@SCIScrollWindow@@QAE?AVScrollEntryID@@XZ PROC NEAR ; SCIScrollWindow::CopyEntries

; 1020 : {

  02fbe	55		 push	 ebp
  02fbf	8b ec		 mov	 ebp, esp
  02fc1	83 ec 1c	 sub	 esp, 28			; 0000001cH
  02fc4	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 1021 : 	ScrollEntryID 	entriesCopy;

  02fc7	8d 4d f8	 lea	 ecx, DWORD PTR _entriesCopy$[ebp]
  02fca	e8 00 00 00 00	 call	 ??0ScrollEntryID@@QAE@XZ ; ScrollEntryID::ScrollEntryID

; 1022 : 	TextID 			textCopy;

  02fcf	8d 4d fc	 lea	 ecx, DWORD PTR _textCopy$[ebp]
  02fd2	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID

; 1023 : 	char* 			target;
; 1024 : 	char* 			source;
; 1025 : 	size_t 			sizeMem;
; 1026 : 
; 1027 : 	sizeMem = memMgr->GetSize((SOL_Handle) entries);

  02fd7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  02fda	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  02fe0	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02fe5	50		 push	 eax
  02fe6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  02fec	e8 00 00 00 00	 call	 ?GetSize@MemoryMgr@@QAEIG@Z ; MemoryMgr::GetSize
  02ff1	89 45 ec	 mov	 DWORD PTR _sizeMem$[ebp], eax

; 1028 : 
; 1029 : 	entriesCopy.Get(size);

  02ff4	6a 00		 push	 0
  02ff6	6a 00		 push	 0
  02ff8	6a 00		 push	 0
  02ffa	6a 00		 push	 0
  02ffc	68 00 02 00 00	 push	 512			; 00000200H
  03001	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  03004	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0300a	51		 push	 ecx
  0300b	8d 4d f8	 lea	 ecx, DWORD PTR _entriesCopy$[ebp]
  0300e	e8 00 00 00 00	 call	 ?Get@ScrollEntryID@@QAEXIIIPAUMemClient@@DW4ReservedHandle@@@Z ; ScrollEntryID::Get

; 1030 : 	target = (char*) memMgr->GetAddr((int) entriesCopy);

  03013	8d 4d f8	 lea	 ecx, DWORD PTR _entriesCopy$[ebp]
  03016	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0301b	50		 push	 eax
  0301c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  03022	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  03027	89 45 e8	 mov	 DWORD PTR _target$[ebp], eax

; 1031 : 	source = (char*) memMgr->GetAddr((int) entries);

  0302a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0302d	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03033	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03038	50		 push	 eax
  03039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  0303f	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  03044	89 45 f4	 mov	 DWORD PTR _source$[ebp], eax

; 1032 : 	memcpy(target,source,sizeMem);

  03047	8b 55 ec	 mov	 edx, DWORD PTR _sizeMem$[ebp]
  0304a	52		 push	 edx
  0304b	8b 45 f4	 mov	 eax, DWORD PTR _source$[ebp]
  0304e	50		 push	 eax
  0304f	8b 4d e8	 mov	 ecx, DWORD PTR _target$[ebp]
  03052	51		 push	 ecx
  03053	e8 00 00 00 00	 call	 _memcpy
  03058	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1033 : 
; 1034 : 	for (int i=0;i<size;++i) {

  0305b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  03062	eb 09		 jmp	 SHORT $L63422
$L63423:
  03064	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  03067	83 c2 01	 add	 edx, 1
  0306a	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$L63422:
  0306d	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  03070	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  03073	3b 88 ac 00 00
	00		 cmp	 ecx, DWORD PTR [eax+172]
  03079	0f 8d ca 00 00
	00		 jge	 $L63424

; 1035 : 		if ((int) entries[i].textID) {

  0307f	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  03082	52		 push	 edx
  03083	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  03086	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0308c	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03091	8b c8		 mov	 ecx, eax
  03093	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03098	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0309d	85 c0		 test	 eax, eax
  0309f	0f 84 9f 00 00
	00		 je	 $L63426

; 1036 : 			// Make a copy
; 1037 : 			sizeMem = memMgr->GetSize((SOL_Handle) entries[i].textID);

  030a5	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  030a8	50		 push	 eax
  030a9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  030ac	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  030b2	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  030b7	8b c8		 mov	 ecx, eax
  030b9	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  030be	50		 push	 eax
  030bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  030c5	e8 00 00 00 00	 call	 ?GetSize@MemoryMgr@@QAEIG@Z ; MemoryMgr::GetSize
  030ca	89 45 ec	 mov	 DWORD PTR _sizeMem$[ebp], eax

; 1038 : 			textCopy.Get(sizeMem);

  030cd	68 00 02 01 00	 push	 66048			; 00010200H
  030d2	8b 4d ec	 mov	 ecx, DWORD PTR _sizeMem$[ebp]
  030d5	51		 push	 ecx
  030d6	8d 4d fc	 lea	 ecx, DWORD PTR _textCopy$[ebp]
  030d9	e8 00 00 00 00	 call	 ?Get@TextID@@QAEXII@Z	; TextID::Get

; 1039 : 
; 1040 : 			target = (char*) memMgr->GetAddr((int) textCopy);

  030de	8d 4d fc	 lea	 ecx, DWORD PTR _textCopy$[ebp]
  030e1	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  030e6	50		 push	 eax
  030e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  030ed	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  030f2	89 45 e8	 mov	 DWORD PTR _target$[ebp], eax

; 1041 : 			source = (char*) memMgr->GetAddr((int) entries[i].textID);

  030f5	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  030f8	52		 push	 edx
  030f9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  030fc	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03102	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03107	8b c8		 mov	 ecx, eax
  03109	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0310e	50		 push	 eax
  0310f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  03115	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  0311a	89 45 f4	 mov	 DWORD PTR _source$[ebp], eax

; 1042 : 
; 1043 : 			memcpy(target,source,sizeMem);

  0311d	8b 45 ec	 mov	 eax, DWORD PTR _sizeMem$[ebp]
  03120	50		 push	 eax
  03121	8b 4d f4	 mov	 ecx, DWORD PTR _source$[ebp]
  03124	51		 push	 ecx
  03125	8b 55 e8	 mov	 edx, DWORD PTR _target$[ebp]
  03128	52		 push	 edx
  03129	e8 00 00 00 00	 call	 _memcpy
  0312e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1044 : 
; 1045 : 			entriesCopy[i].textID = textCopy;

  03131	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  03134	50		 push	 eax
  03135	8d 4d f8	 lea	 ecx, DWORD PTR _entriesCopy$[ebp]
  03138	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0313d	66 8b 4d fc	 mov	 cx, WORD PTR _textCopy$[ebp]
  03141	66 89 08	 mov	 WORD PTR [eax], cx
$L63426:

; 1047 : 	}

  03144	e9 1b ff ff ff	 jmp	 $L63423
$L63424:

; 1048 : 	return entriesCopy;

  03149	8d 55 f8	 lea	 edx, DWORD PTR _entriesCopy$[ebp]
  0314c	52		 push	 edx
  0314d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  03150	e8 00 00 00 00	 call	 ??0ScrollEntryID@@QAE@ABV0@@Z ; ScrollEntryID::ScrollEntryID
  03155	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1049 : }

  03158	8b e5		 mov	 esp, ebp
  0315a	5d		 pop	 ebp
  0315b	c2 04 00	 ret	 4
?CopyEntries@SCIScrollWindow@@QAE?AVScrollEntryID@@XZ ENDP ; SCIScrollWindow::CopyEntries
_TEXT	ENDS
;	COMDAT ?GetSize@MemoryMgr@@QAEIG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetSize@MemoryMgr@@QAEIG@Z PROC NEAR			; MemoryMgr::GetSize, COMDAT

; 357  : 	size_t GetSize(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 358  : //		CheckValid(theID);
; 359  : 		return desc[theID].size;

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	c1 e0 04	 shl	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00018	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]

; 360  : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?GetSize@MemoryMgr@@QAEIG@Z ENDP			; MemoryMgr::GetSize
_TEXT	ENDS
PUBLIC	??0FakeScrollEntryID@@QAE@ABVMemID@@@Z		; FakeScrollEntryID::FakeScrollEntryID
;	COMDAT ??0ScrollEntryID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4
_id$ = 8
??0ScrollEntryID@@QAE@ABV0@@Z PROC NEAR			; ScrollEntryID::ScrollEntryID, COMDAT

; 42   : 	ScrollEntryID(const ScrollEntryID& id) : FakeScrollEntryID((MemID&) id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeScrollEntryID@@QAE@ABVMemID@@@Z ; FakeScrollEntryID::FakeScrollEntryID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ScrollEntryID@@QAE@ABV0@@Z ENDP			; ScrollEntryID::ScrollEntryID
_TEXT	ENDS
;	COMDAT ??0FakeScrollEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0FakeScrollEntryID@@QAE@ABVMemID@@@Z PROC NEAR	; FakeScrollEntryID::FakeScrollEntryID, COMDAT

; 36   : FakeTemplateID(FakeScrollEntryID, ScrollEntry,MemWindowEntry)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeScrollEntryID@@QAE@ABVMemID@@@Z ENDP		; FakeScrollEntryID::FakeScrollEntryID
_TEXT	ENDS
PUBLIC	?Reconstruct@SCIScrollWindow@@QAEXVScrollEntryID@@@Z ; SCIScrollWindow::Reconstruct
_TEXT	SEGMENT
_newEntries$ = 8
_this$ = -16
_e$ = -4
_i$ = -8
?Reconstruct@SCIScrollWindow@@QAEXVScrollEntryID@@@Z PROC NEAR ; SCIScrollWindow::Reconstruct

; 1053 : {

  0315e	55		 push	 ebp
  0315f	8b ec		 mov	 ebp, esp
  03161	83 ec 10	 sub	 esp, 16			; 00000010H
  03164	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1054 : 	entries.Free();

  03167	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0316a	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03170	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1055 : 	int e = 0;

  03175	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _e$[ebp], 0

; 1056 : 	entries = newEntries;

  0317c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0317f	66 8b 4d 08	 mov	 cx, WORD PTR _newEntries$[ebp]
  03183	66 89 88 a8 00
	00 00		 mov	 WORD PTR [eax+168], cx

; 1057 : 	for (int i=0;i<size;++i) {

  0318a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  03191	eb 09		 jmp	 SHORT $L63438
$L63439:
  03193	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  03196	83 c2 01	 add	 edx, 1
  03199	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L63438:
  0319c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0319f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  031a2	3b 88 ac 00 00
	00		 cmp	 ecx, DWORD PTR [eax+172]
  031a8	7d 67		 jge	 SHORT $L63440

; 1058 : 		if (!(int) entries[i].textID) 

  031aa	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  031ad	52		 push	 edx
  031ae	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  031b1	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  031b7	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  031bc	8b c8		 mov	 ecx, eax
  031be	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  031c3	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  031c8	85 c0		 test	 eax, eax
  031ca	75 02		 jne	 SHORT $L63442

; 1059 : 			break;

  031cc	eb 43		 jmp	 SHORT $L63440
$L63442:

; 1060 : 		text.Add(entries[i].textID);

  031ce	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  031d1	50		 push	 eax
  031d2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  031d5	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  031db	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  031e0	51		 push	 ecx
  031e1	8b cc		 mov	 ecx, esp
  031e3	50		 push	 eax
  031e4	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  031e9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  031ec	83 c1 0a	 add	 ecx, 10			; 0000000aH
  031ef	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXV1@@Z	; TextID::Add

; 1061 : 		e = i;

  031f4	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  031f7	89 4d fc	 mov	 DWORD PTR _e$[ebp], ecx

; 1062 :       end++;

  031fa	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  031fd	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  03203	83 c0 01	 add	 eax, 1
  03206	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03209	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 1063 : 	}

  0320f	eb 82		 jmp	 SHORT $L63439
$L63440:

; 1064 : 	if ((int) entries[e].textID) // was i but not in loop ? 

  03211	8b 55 fc	 mov	 edx, DWORD PTR _e$[ebp]
  03214	52		 push	 edx
  03215	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03218	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0321e	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03223	8b c8		 mov	 ecx, eax
  03225	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0322a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0322f	85 c0		 test	 eax, eax
  03231	74 16		 je	 SHORT $L63445

; 1065 : 	   SetText(NULL,False,startChar);

  03233	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  03236	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  03239	51		 push	 ecx
  0323a	6a 00		 push	 0
  0323c	6a 00		 push	 0
  0323e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  03241	8b 02		 mov	 eax, DWORD PTR [edx]
  03243	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  03246	ff 50 10	 call	 DWORD PTR [eax+16]
$L63445:

; 1066 : }

  03249	8b e5		 mov	 esp, ebp
  0324b	5d		 pop	 ebp
  0324c	c2 04 00	 ret	 4
?Reconstruct@SCIScrollWindow@@QAEXVScrollEntryID@@@Z ENDP ; SCIScrollWindow::Reconstruct
_TEXT	ENDS
PUBLIC	?Go@SCIScrollWindow@@QAEXHH@Z			; SCIScrollWindow::Go
EXTRN	?Fatal@MsgMgr@@QAAXPADZZ:NEAR			; MsgMgr::Fatal
_DATA	SEGMENT
	ORG $+2
$SG63452 DB	'Range must be greater than 0', 00H
	ORG $+3
$SG63454 DB	'Index is Out of Range in SCIScrollWindow', 00H
_DATA	ENDS
_TEXT	SEGMENT
_index$ = 8
_scale$ = 12
_this$ = -8
_indices$ = -4
?Go@SCIScrollWindow@@QAEXHH@Z PROC NEAR			; SCIScrollWindow::Go

; 1070 : {

  0324f	55		 push	 ebp
  03250	8b ec		 mov	 ebp, esp
  03252	83 ec 08	 sub	 esp, 8
  03255	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1071 :    if(!scale)

  03258	83 7d 0c 00	 cmp	 DWORD PTR _scale$[ebp], 0
  0325c	75 13		 jne	 SHORT $L63451

; 1072 : 		msgMgr->Fatal("Range must be greater than 0");

  0325e	68 00 00 00 00	 push	 OFFSET FLAT:$SG63452
  03263	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03268	50		 push	 eax
  03269	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  0326e	83 c4 08	 add	 esp, 8
$L63451:

; 1073 : 
; 1074 : 	if(index > scale) 

  03271	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  03274	3b 4d 0c	 cmp	 ecx, DWORD PTR _scale$[ebp]
  03277	7e 14		 jle	 SHORT $L63453

; 1075 : 		msgMgr->Fatal("Index is Out of Range in SCIScrollWindow");

  03279	68 00 00 00 00	 push	 OFFSET FLAT:$SG63454
  0327e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03284	52		 push	 edx
  03285	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  0328a	83 c4 08	 add	 esp, 8
$L63453:

; 1076 : 
; 1077 : 	uint* indices = (uint*) *lineIndicesID;

  0328d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03290	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  03296	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0329b	89 45 fc	 mov	 DWORD PTR _indices$[ebp], eax

; 1078 : 	startLine = (index * maxLines / scale) + 1; // add 1 to make 1 relative not zero

  0329e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  032a1	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  032a4	0f af 48 30	 imul	 ecx, DWORD PTR [eax+48]
  032a8	8b c1		 mov	 eax, ecx
  032aa	99		 cdq
  032ab	f7 7d 0c	 idiv	 DWORD PTR _scale$[ebp]
  032ae	83 c0 01	 add	 eax, 1
  032b1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  032b4	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 1079 : 	startChar = indices[startLine];

  032b7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  032ba	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  032bd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  032c0	8b 45 fc	 mov	 eax, DWORD PTR _indices$[ebp]
  032c3	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  032c6	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 1080 : 	lastLine = startLine + linesPerPage - 1;

  032c9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  032cc	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  032cf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  032d2	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  032d5	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  032d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  032dc	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 1081 : 	if (lastLine > maxLines) lastLine = maxLines;

  032df	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  032e2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  032e5	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  032e8	3b 48 30	 cmp	 ecx, DWORD PTR [eax+48]
  032eb	7e 0c		 jle	 SHORT $L63457
  032ed	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  032f0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  032f3	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  032f6	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
$L63457:

; 1082 : 	lastChar = indices[lastLine+1] - 1;

  032f9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  032fc	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  032ff	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  03302	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  03306	83 ea 01	 sub	 edx, 1
  03309	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0330c	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 1083 : //	ReDrawText();
; 1084 : }

  0330f	8b e5		 mov	 esp, ebp
  03311	5d		 pop	 ebp
  03312	c2 08 00	 ret	 8
?Go@SCIScrollWindow@@QAEXHH@Z ENDP			; SCIScrollWindow::Go
_TEXT	ENDS
PUBLIC	?Where@SCIScrollWindow@@QAEHH@Z			; SCIScrollWindow::Where
_TEXT	SEGMENT
_scale$ = 8
_this$ = -4
?Where@SCIScrollWindow@@QAEHH@Z PROC NEAR		; SCIScrollWindow::Where

; 1088 : {

  03315	55		 push	 ebp
  03316	8b ec		 mov	 ebp, esp
  03318	51		 push	 ecx
  03319	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1089 :    if(maxLines)

  0331c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0331f	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  03323	74 16		 je	 SHORT $L63462

; 1090 : 	   return (startLine - 1) * scale / maxLines;

  03325	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03328	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0332b	83 e8 01	 sub	 eax, 1
  0332e	0f af 45 08	 imul	 eax, DWORD PTR _scale$[ebp]
  03332	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03335	99		 cdq
  03336	f7 79 30	 idiv	 DWORD PTR [ecx+48]
  03339	eb 02		 jmp	 SHORT $L63461
$L63462:

; 1091 :    return 0;

  0333b	33 c0		 xor	 eax, eax
$L63461:

; 1092 : }

  0333d	8b e5		 mov	 esp, ebp
  0333f	5d		 pop	 ebp
  03340	c2 04 00	 ret	 4
?Where@SCIScrollWindow@@QAEHH@Z ENDP			; SCIScrollWindow::Where
_TEXT	ENDS
PUBLIC	?Insert@SCIScrollWindow@@QAE?AVTextID@@V2@0HHH@Z ; SCIScrollWindow::Insert
_DATA	SEGMENT
	ORG $+3
$SG63496 DB	'|s%d|', 00H
	ORG $+2
$SG63498 DB	'|f%d|', 00H
	ORG $+2
$SG63500 DB	'|c%d|', 00H
	ORG $+2
$SG63502 DB	'|a%d|', 00H
_DATA	ENDS
_TEXT	SEGMENT
_textCopy$63488 = -8
_start$63490 = -16
_i$63491 = -12
_key$ = 12
_textID$ = 16
_font$ = 20
_color$ = 24
_mode$ = 28
___$ReturnUdt$ = 8
_this$ = -36
_index$ = -4
_i$63479 = -20
_i$63484 = -24
?Insert@SCIScrollWindow@@QAE?AVTextID@@V2@0HHH@Z PROC NEAR ; SCIScrollWindow::Insert

; 1096 : {

  03343	55		 push	 ebp
  03344	8b ec		 mov	 ebp, esp
  03346	83 ec 24	 sub	 esp, 36			; 00000024H
  03349	56		 push	 esi
  0334a	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 1097 :    int index;
; 1098 :    for (index = 0; index < end; index++) 

  0334d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
  03354	eb 09		 jmp	 SHORT $L63473
$L63474:
  03356	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  03359	83 c0 01	 add	 eax, 1
  0335c	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax
$L63473:
  0335f	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03362	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  03365	3b 91 a4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+164]
  0336b	7d 25		 jge	 SHORT $L63475

; 1099 :       if(entries[index].textID == key)

  0336d	8d 45 0c	 lea	 eax, DWORD PTR _key$[ebp]
  03370	50		 push	 eax
  03371	8b 4d fc	 mov	 ecx, DWORD PTR _index$[ebp]
  03374	51		 push	 ecx
  03375	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03378	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0337e	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03383	8b c8		 mov	 ecx, eax
  03385	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  0338a	85 c0		 test	 eax, eax
  0338c	74 02		 je	 SHORT $L63476

; 1100 :          break;

  0338e	eb 02		 jmp	 SHORT $L63475
$L63476:

; 1101 : 
; 1102 : 	if(index < end) {

  03390	eb c4		 jmp	 SHORT $L63474
$L63475:
  03392	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  03395	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  03398	3b 82 a4 00 00
	00		 cmp	 eax, DWORD PTR [edx+164]
  0339e	0f 8d e0 03 00
	00		 jge	 $L63477

; 1103 : 		if(end < size) {

  033a4	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  033a7	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  033aa	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  033b0	3b 82 ac 00 00
	00		 cmp	 eax, DWORD PTR [edx+172]
  033b6	0f 8d fc 00 00
	00		 jge	 $L63478

; 1104 : 			for(int i = index; i < end; i++) {

  033bc	8b 4d fc	 mov	 ecx, DWORD PTR _index$[ebp]
  033bf	89 4d ec	 mov	 DWORD PTR _i$63479[ebp], ecx
  033c2	eb 09		 jmp	 SHORT $L63480
$L63481:
  033c4	8b 55 ec	 mov	 edx, DWORD PTR _i$63479[ebp]
  033c7	83 c2 01	 add	 edx, 1
  033ca	89 55 ec	 mov	 DWORD PTR _i$63479[ebp], edx
$L63480:
  033cd	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  033d0	8b 4d ec	 mov	 ecx, DWORD PTR _i$63479[ebp]
  033d3	3b 88 a4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+164]
  033d9	0f 8d bf 00 00
	00		 jge	 $L63482

; 1105 : 			   entries[i + 1].textID = entries[i].textID;

  033df	8b 55 ec	 mov	 edx, DWORD PTR _i$63479[ebp]
  033e2	52		 push	 edx
  033e3	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  033e6	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  033ec	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  033f1	66 8b 30	 mov	 si, WORD PTR [eax]
  033f4	8b 45 ec	 mov	 eax, DWORD PTR _i$63479[ebp]
  033f7	83 c0 01	 add	 eax, 1
  033fa	50		 push	 eax
  033fb	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  033fe	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03404	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03409	66 89 30	 mov	 WORD PTR [eax], si

; 1106 : 			   entries[i + 1].font = entries[i].font;     

  0340c	8b 4d ec	 mov	 ecx, DWORD PTR _i$63479[ebp]
  0340f	51		 push	 ecx
  03410	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03413	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03419	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0341e	8b f0		 mov	 esi, eax
  03420	8b 55 ec	 mov	 edx, DWORD PTR _i$63479[ebp]
  03423	83 c2 01	 add	 edx, 1
  03426	52		 push	 edx
  03427	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0342a	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03430	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03435	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  03438	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1107 : 			   entries[i + 1].color = entries[i].color;

  0343b	8b 55 ec	 mov	 edx, DWORD PTR _i$63479[ebp]
  0343e	52		 push	 edx
  0343f	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03442	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03448	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0344d	8b f0		 mov	 esi, eax
  0344f	8b 45 ec	 mov	 eax, DWORD PTR _i$63479[ebp]
  03452	83 c0 01	 add	 eax, 1
  03455	50		 push	 eax
  03456	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03459	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0345f	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03464	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  03467	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1108 : 				entries[i + 1].mode = entries[i].mode;

  0346a	8b 55 ec	 mov	 edx, DWORD PTR _i$63479[ebp]
  0346d	52		 push	 edx
  0346e	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03471	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03477	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0347c	8b f0		 mov	 esi, eax
  0347e	8b 45 ec	 mov	 eax, DWORD PTR _i$63479[ebp]
  03481	83 c0 01	 add	 eax, 1
  03484	50		 push	 eax
  03485	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03488	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0348e	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03493	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  03496	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1109 : 			}   

  03499	e9 26 ff ff ff	 jmp	 $L63481
$L63482:

; 1110 : 			end++;

  0349e	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  034a1	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  034a7	83 c0 01	 add	 eax, 1
  034aa	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  034ad	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 1111 : 		} else {

  034b3	e9 f4 00 00 00	 jmp	 $L63487
$L63478:

; 1112 : 			entries[0].textID.Free();

  034b8	6a 00		 push	 0
  034ba	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  034bd	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  034c3	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  034c8	8b c8		 mov	 ecx, eax
  034ca	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1113 : 			for(int i = 0; i < index; i++) { 

  034cf	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$63484[ebp], 0
  034d6	eb 09		 jmp	 SHORT $L63485
$L63486:
  034d8	8b 55 e8	 mov	 edx, DWORD PTR _i$63484[ebp]
  034db	83 c2 01	 add	 edx, 1
  034de	89 55 e8	 mov	 DWORD PTR _i$63484[ebp], edx
$L63485:
  034e1	8b 45 e8	 mov	 eax, DWORD PTR _i$63484[ebp]
  034e4	3b 45 fc	 cmp	 eax, DWORD PTR _index$[ebp]
  034e7	0f 8d bf 00 00
	00		 jge	 $L63487

; 1114 : 			   entries[i].textID = entries[i + 1].textID;

  034ed	8b 4d e8	 mov	 ecx, DWORD PTR _i$63484[ebp]
  034f0	83 c1 01	 add	 ecx, 1
  034f3	51		 push	 ecx
  034f4	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  034f7	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  034fd	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03502	66 8b 30	 mov	 si, WORD PTR [eax]
  03505	8b 55 e8	 mov	 edx, DWORD PTR _i$63484[ebp]
  03508	52		 push	 edx
  03509	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0350c	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03512	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03517	66 89 30	 mov	 WORD PTR [eax], si

; 1115 : 			   entries[i].font = entries[i + 1].font;     

  0351a	8b 45 e8	 mov	 eax, DWORD PTR _i$63484[ebp]
  0351d	83 c0 01	 add	 eax, 1
  03520	50		 push	 eax
  03521	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03524	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0352a	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0352f	8b f0		 mov	 esi, eax
  03531	8b 4d e8	 mov	 ecx, DWORD PTR _i$63484[ebp]
  03534	51		 push	 ecx
  03535	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03538	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0353e	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03543	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  03546	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1116 : 			   entries[i].color = entries[i + 1].color;

  03549	8b 45 e8	 mov	 eax, DWORD PTR _i$63484[ebp]
  0354c	83 c0 01	 add	 eax, 1
  0354f	50		 push	 eax
  03550	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03553	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03559	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0355e	8b f0		 mov	 esi, eax
  03560	8b 4d e8	 mov	 ecx, DWORD PTR _i$63484[ebp]
  03563	51		 push	 ecx
  03564	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03567	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0356d	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03572	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  03575	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1117 : 			   entries[i].mode = entries[i + 1].mode;

  03578	8b 45 e8	 mov	 eax, DWORD PTR _i$63484[ebp]
  0357b	83 c0 01	 add	 eax, 1
  0357e	50		 push	 eax
  0357f	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03582	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03588	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0358d	8b f0		 mov	 esi, eax
  0358f	8b 4d e8	 mov	 ecx, DWORD PTR _i$63484[ebp]
  03592	51		 push	 ecx
  03593	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03596	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0359c	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  035a1	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  035a4	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 1118 : 			}

  035a7	e9 2c ff ff ff	 jmp	 $L63486
$L63487:

; 1120 : 
; 1121 : 		// Make a copy of the text
; 1122 : 		TextID textCopy;

  035ac	8d 4d f8	 lea	 ecx, DWORD PTR _textCopy$63488[ebp]
  035af	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID

; 1123 : 		textCopy.Add(textID);

  035b4	51		 push	 ecx
  035b5	8b cc		 mov	 ecx, esp
  035b7	8d 45 10	 lea	 eax, DWORD PTR _textID$[ebp]
  035ba	50		 push	 eax
  035bb	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  035c0	8d 4d f8	 lea	 ecx, DWORD PTR _textCopy$63488[ebp]
  035c3	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXV1@@Z	; TextID::Add

; 1124 : 
; 1125 : 		// Replace the entry
; 1126 : 		entries[index].textID = textCopy;

  035c8	8b 4d fc	 mov	 ecx, DWORD PTR _index$[ebp]
  035cb	51		 push	 ecx
  035cc	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  035cf	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  035d5	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  035da	66 8b 55 f8	 mov	 dx, WORD PTR _textCopy$63488[ebp]
  035de	66 89 10	 mov	 WORD PTR [eax], dx

; 1127 : 		entries[index].font = font;

  035e1	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  035e4	50		 push	 eax
  035e5	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  035e8	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  035ee	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  035f3	8b 4d 14	 mov	 ecx, DWORD PTR _font$[ebp]
  035f6	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1128 : 		entries[index].color = color;

  035f9	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  035fc	52		 push	 edx
  035fd	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03600	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03606	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0360b	8b 4d 18	 mov	 ecx, DWORD PTR _color$[ebp]
  0360e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1129 : 		entries[index].mode = mode;

  03611	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  03614	52		 push	 edx
  03615	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03618	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0361e	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03623	8b 4d 1c	 mov	 ecx, DWORD PTR _mode$[ebp]
  03626	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1130 :   
; 1131 : 		text.Free();

  03629	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0362c	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0362f	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1132 :       int start = 0;

  03634	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _start$63490[ebp], 0

; 1133 : 		for(int i = 0; i < end; i++) {

  0363b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$63491[ebp], 0
  03642	eb 09		 jmp	 SHORT $L63492
$L63493:
  03644	8b 55 f4	 mov	 edx, DWORD PTR _i$63491[ebp]
  03647	83 c2 01	 add	 edx, 1
  0364a	89 55 f4	 mov	 DWORD PTR _i$63491[ebp], edx
$L63492:
  0364d	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  03650	8b 4d f4	 mov	 ecx, DWORD PTR _i$63491[ebp]
  03653	3b 88 a4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+164]
  03659	0f 8d f2 00 00
	00		 jge	 $L63494

; 1134 : 			if(i == index)

  0365f	8b 55 f4	 mov	 edx, DWORD PTR _i$63491[ebp]
  03662	3b 55 fc	 cmp	 edx, DWORD PTR _index$[ebp]
  03665	75 17		 jne	 SHORT $L63495

; 1135 : 				start = strlen(*text);

  03667	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0366a	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0366d	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  03672	50		 push	 eax
  03673	e8 00 00 00 00	 call	 _strlen
  03678	83 c4 04	 add	 esp, 4
  0367b	89 45 f0	 mov	 DWORD PTR _start$63490[ebp], eax
$L63495:

; 1136 : 			text.AddF("|s%d|",i);

  0367e	8b 45 f4	 mov	 eax, DWORD PTR _i$63491[ebp]
  03681	50		 push	 eax
  03682	68 00 00 00 00	 push	 OFFSET FLAT:$SG63496
  03687	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0368a	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0368d	51		 push	 ecx
  0368e	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  03693	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1137 : 			if (font != -1)    

  03696	83 7d 14 ff	 cmp	 DWORD PTR _font$[ebp], -1
  0369a	74 2a		 je	 SHORT $L63497

; 1138 : 				text.AddF("|f%d|",entries[i].font);

  0369c	8b 55 f4	 mov	 edx, DWORD PTR _i$63491[ebp]
  0369f	52		 push	 edx
  036a0	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  036a3	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  036a9	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  036ae	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  036b1	50		 push	 eax
  036b2	68 00 00 00 00	 push	 OFFSET FLAT:$SG63498
  036b7	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  036ba	83 c1 0a	 add	 ecx, 10			; 0000000aH
  036bd	51		 push	 ecx
  036be	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  036c3	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63497:

; 1139 : 			if (color != -1)

  036c6	83 7d 18 ff	 cmp	 DWORD PTR _color$[ebp], -1
  036ca	74 2a		 je	 SHORT $L63499

; 1140 : 				text.AddF("|c%d|",entries[i].color);

  036cc	8b 55 f4	 mov	 edx, DWORD PTR _i$63491[ebp]
  036cf	52		 push	 edx
  036d0	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  036d3	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  036d9	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  036de	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  036e1	50		 push	 eax
  036e2	68 00 00 00 00	 push	 OFFSET FLAT:$SG63500
  036e7	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  036ea	83 c1 0a	 add	 ecx, 10			; 0000000aH
  036ed	51		 push	 ecx
  036ee	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  036f3	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63499:

; 1141 : 			if (mode != -1)

  036f6	83 7d 1c ff	 cmp	 DWORD PTR _mode$[ebp], -1
  036fa	74 2a		 je	 SHORT $L63501

; 1142 : 				text.AddF("|a%d|",entries[i].mode);

  036fc	8b 55 f4	 mov	 edx, DWORD PTR _i$63491[ebp]
  036ff	52		 push	 edx
  03700	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03703	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03709	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0370e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  03711	50		 push	 eax
  03712	68 00 00 00 00	 push	 OFFSET FLAT:$SG63502
  03717	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0371a	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0371d	51		 push	 ecx
  0371e	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  03723	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63501:

; 1143 : 			text.Add(entries[i].textID);

  03726	8b 55 f4	 mov	 edx, DWORD PTR _i$63491[ebp]
  03729	52		 push	 edx
  0372a	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0372d	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03733	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03738	51		 push	 ecx
  03739	8b cc		 mov	 ecx, esp
  0373b	50		 push	 eax
  0373c	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  03741	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03744	83 c1 0a	 add	 ecx, 10			; 0000000aH
  03747	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXV1@@Z	; TextID::Add

; 1144 : 		}

  0374c	e9 f3 fe ff ff	 jmp	 $L63493
$L63494:

; 1145 : 
; 1146 : 		SetText(NULL,False,start);

  03751	8b 45 f0	 mov	 eax, DWORD PTR _start$63490[ebp]
  03754	50		 push	 eax
  03755	6a 00		 push	 0
  03757	6a 00		 push	 0
  03759	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0375c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0375e	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  03761	ff 52 10	 call	 DWORD PTR [edx+16]

; 1147 :       return entries[index].textID;

  03764	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  03767	50		 push	 eax
  03768	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0376b	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03771	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03776	50		 push	 eax
  03777	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0377a	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  0377f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  03782	eb 0d		 jmp	 SHORT $L63471
$L63477:

; 1149 :    return 0;

  03784	6a 00		 push	 0
  03786	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  03789	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  0378e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L63471:

; 1150 : }

  03791	5e		 pop	 esi
  03792	8b e5		 mov	 esp, ebp
  03794	5d		 pop	 ebp
  03795	c2 18 00	 ret	 24			; 00000018H
?Insert@SCIScrollWindow@@QAE?AVTextID@@V2@0HHH@Z ENDP	; SCIScrollWindow::Insert
_TEXT	ENDS
PUBLIC	?Modify@SCIScrollWindow@@QAE?AVTextID@@V2@0HHHH@Z ; SCIScrollWindow::Modify
_DATA	SEGMENT
	ORG $+2
$SG63528 DB	'|s%d|', 00H
	ORG $+2
$SG63530 DB	'|f%d|', 00H
	ORG $+2
$SG63532 DB	'|c%d|', 00H
	ORG $+2
$SG63534 DB	'|a%d|', 00H
_DATA	ENDS
_TEXT	SEGMENT
_key$ = 12
_textID$ = 16
_font$ = 20
_color$ = 24
_mode$ = 28
_jump$ = 32
___$ReturnUdt$ = 8
_this$ = -32
_index$ = -4
_textCopy$63520 = -8
_start$63522 = -16
_i$63523 = -12
$T64088 = -28
?Modify@SCIScrollWindow@@QAE?AVTextID@@V2@0HHHH@Z PROC NEAR ; SCIScrollWindow::Modify

; 1154 : {

  03798	55		 push	 ebp
  03799	8b ec		 mov	 ebp, esp
  0379b	83 ec 20	 sub	 esp, 32			; 00000020H
  0379e	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1155 :    int index;
; 1156 :    for (index = 0; index < end; index++) 

  037a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
  037a8	eb 09		 jmp	 SHORT $L63515
$L63516:
  037aa	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  037ad	83 c0 01	 add	 eax, 1
  037b0	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax
$L63515:
  037b3	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  037b6	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  037b9	3b 91 a4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+164]
  037bf	7d 25		 jge	 SHORT $L63517

; 1157 :       if(entries[index].textID == key)

  037c1	8d 45 0c	 lea	 eax, DWORD PTR _key$[ebp]
  037c4	50		 push	 eax
  037c5	8b 4d fc	 mov	 ecx, DWORD PTR _index$[ebp]
  037c8	51		 push	 ecx
  037c9	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  037cc	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  037d2	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  037d7	8b c8		 mov	 ecx, eax
  037d9	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  037de	85 c0		 test	 eax, eax
  037e0	74 02		 je	 SHORT $L63518

; 1158 :          break;

  037e2	eb 02		 jmp	 SHORT $L63517
$L63518:

; 1159 : 
; 1160 : 	if(index < end) {

  037e4	eb c4		 jmp	 SHORT $L63516
$L63517:
  037e6	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  037e9	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  037ec	3b 82 a4 00 00
	00		 cmp	 eax, DWORD PTR [edx+164]
  037f2	0f 8d 03 02 00
	00		 jge	 $L63519

; 1161 : 
; 1162 :    	entries[index].textID.Free();

  037f8	8b 4d fc	 mov	 ecx, DWORD PTR _index$[ebp]
  037fb	51		 push	 ecx
  037fc	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  037ff	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03805	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0380a	8b c8		 mov	 ecx, eax
  0380c	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1163 : 		// Make a copy of the text
; 1164 : 		TextID textCopy;

  03811	8d 4d f8	 lea	 ecx, DWORD PTR _textCopy$63520[ebp]
  03814	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID

; 1165 : 		textCopy.Add(textID);

  03819	51		 push	 ecx
  0381a	8b cc		 mov	 ecx, esp
  0381c	8d 55 10	 lea	 edx, DWORD PTR _textID$[ebp]
  0381f	52		 push	 edx
  03820	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  03825	8d 4d f8	 lea	 ecx, DWORD PTR _textCopy$63520[ebp]
  03828	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXV1@@Z	; TextID::Add

; 1166 : 		entries[index].textID = textCopy;

  0382d	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  03830	50		 push	 eax
  03831	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  03834	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0383a	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0383f	66 8b 4d f8	 mov	 cx, WORD PTR _textCopy$63520[ebp]
  03843	66 89 08	 mov	 WORD PTR [eax], cx

; 1167 : 		// Update entry
; 1168 : 		entries[index].font = font;

  03846	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  03849	52		 push	 edx
  0384a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0384d	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03853	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03858	8b 4d 14	 mov	 ecx, DWORD PTR _font$[ebp]
  0385b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1169 : 		entries[index].color = color;

  0385e	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  03861	52		 push	 edx
  03862	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  03865	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0386b	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03870	8b 4d 18	 mov	 ecx, DWORD PTR _color$[ebp]
  03873	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1170 : 		entries[index].mode = mode;  

  03876	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  03879	52		 push	 edx
  0387a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0387d	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03883	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03888	8b 4d 1c	 mov	 ecx, DWORD PTR _mode$[ebp]
  0388b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1171 : 		text.Free();

  0388e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  03891	83 c1 0a	 add	 ecx, 10			; 0000000aH
  03894	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1172 :       int start = 0;

  03899	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _start$63522[ebp], 0

; 1173 : 		for(int i = 0; i < end; i++) {

  038a0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$63523[ebp], 0
  038a7	eb 09		 jmp	 SHORT $L63524
$L63525:
  038a9	8b 55 f4	 mov	 edx, DWORD PTR _i$63523[ebp]
  038ac	83 c2 01	 add	 edx, 1
  038af	89 55 f4	 mov	 DWORD PTR _i$63523[ebp], edx
$L63524:
  038b2	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  038b5	8b 4d f4	 mov	 ecx, DWORD PTR _i$63523[ebp]
  038b8	3b 88 a4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+164]
  038be	0f 8d f2 00 00
	00		 jge	 $L63526

; 1174 : 			if(i == index)

  038c4	8b 55 f4	 mov	 edx, DWORD PTR _i$63523[ebp]
  038c7	3b 55 fc	 cmp	 edx, DWORD PTR _index$[ebp]
  038ca	75 17		 jne	 SHORT $L63527

; 1175 : 				start = strlen(*text);

  038cc	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  038cf	83 c1 0a	 add	 ecx, 10			; 0000000aH
  038d2	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  038d7	50		 push	 eax
  038d8	e8 00 00 00 00	 call	 _strlen
  038dd	83 c4 04	 add	 esp, 4
  038e0	89 45 f0	 mov	 DWORD PTR _start$63522[ebp], eax
$L63527:

; 1176 : 			text.AddF("|s%d|",i);

  038e3	8b 45 f4	 mov	 eax, DWORD PTR _i$63523[ebp]
  038e6	50		 push	 eax
  038e7	68 00 00 00 00	 push	 OFFSET FLAT:$SG63528
  038ec	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  038ef	83 c1 0a	 add	 ecx, 10			; 0000000aH
  038f2	51		 push	 ecx
  038f3	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  038f8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1177 : 			if (font != -1)    

  038fb	83 7d 14 ff	 cmp	 DWORD PTR _font$[ebp], -1
  038ff	74 2a		 je	 SHORT $L63529

; 1178 : 				text.AddF("|f%d|",entries[i].font);

  03901	8b 55 f4	 mov	 edx, DWORD PTR _i$63523[ebp]
  03904	52		 push	 edx
  03905	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  03908	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0390e	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03913	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  03916	50		 push	 eax
  03917	68 00 00 00 00	 push	 OFFSET FLAT:$SG63530
  0391c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0391f	83 c1 0a	 add	 ecx, 10			; 0000000aH
  03922	51		 push	 ecx
  03923	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  03928	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63529:

; 1179 : 			if (color != -1)

  0392b	83 7d 18 ff	 cmp	 DWORD PTR _color$[ebp], -1
  0392f	74 2a		 je	 SHORT $L63531

; 1180 : 				text.AddF("|c%d|",entries[i].color);

  03931	8b 55 f4	 mov	 edx, DWORD PTR _i$63523[ebp]
  03934	52		 push	 edx
  03935	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  03938	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0393e	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03943	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  03946	50		 push	 eax
  03947	68 00 00 00 00	 push	 OFFSET FLAT:$SG63532
  0394c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0394f	83 c1 0a	 add	 ecx, 10			; 0000000aH
  03952	51		 push	 ecx
  03953	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  03958	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63531:

; 1181 : 			if (mode != -1)

  0395b	83 7d 1c ff	 cmp	 DWORD PTR _mode$[ebp], -1
  0395f	74 2a		 je	 SHORT $L63533

; 1182 : 				text.AddF("|a%d|",entries[i].mode);

  03961	8b 55 f4	 mov	 edx, DWORD PTR _i$63523[ebp]
  03964	52		 push	 edx
  03965	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  03968	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0396e	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03973	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  03976	50		 push	 eax
  03977	68 00 00 00 00	 push	 OFFSET FLAT:$SG63534
  0397c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0397f	83 c1 0a	 add	 ecx, 10			; 0000000aH
  03982	51		 push	 ecx
  03983	e8 00 00 00 00	 call	 ?AddF@TextID@@QAAXPBDZZ	; TextID::AddF
  03988	83 c4 0c	 add	 esp, 12			; 0000000cH
$L63533:

; 1183 : 			text.Add(entries[i].textID);

  0398b	8b 55 f4	 mov	 edx, DWORD PTR _i$63523[ebp]
  0398e	52		 push	 edx
  0398f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  03992	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03998	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  0399d	51		 push	 ecx
  0399e	8b cc		 mov	 ecx, esp
  039a0	50		 push	 eax
  039a1	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  039a6	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  039a9	83 c1 0a	 add	 ecx, 10			; 0000000aH
  039ac	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXV1@@Z	; TextID::Add

; 1184 : 		} 

  039b1	e9 f3 fe ff ff	 jmp	 $L63525
$L63526:

; 1185 :       if(jump)

  039b6	83 7d 20 00	 cmp	 DWORD PTR _jump$[ebp], 0
  039ba	74 09		 je	 SHORT $L63536

; 1186 :          startChar = start;

  039bc	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  039bf	8b 4d f0	 mov	 ecx, DWORD PTR _start$63522[ebp]
  039c2	89 48 34	 mov	 DWORD PTR [eax+52], ecx
$L63536:

; 1187 : 		SetText(NULL,False,startChar);

  039c5	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  039c8	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  039cb	50		 push	 eax
  039cc	6a 00		 push	 0
  039ce	6a 00		 push	 0
  039d0	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  039d3	8b 11		 mov	 edx, DWORD PTR [ecx]
  039d5	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  039d8	ff 52 10	 call	 DWORD PTR [edx+16]

; 1188 :       return entries[index].textID;

  039db	8b 45 fc	 mov	 eax, DWORD PTR _index$[ebp]
  039de	50		 push	 eax
  039df	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  039e2	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  039e8	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  039ed	50		 push	 eax
  039ee	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  039f1	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  039f6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  039f9	eb 16		 jmp	 SHORT $L63513
$L63519:

; 1190 :    return (TextID)0;

  039fb	6a 00		 push	 0
  039fd	8d 4d e4	 lea	 ecx, DWORD PTR $T64088[ebp]
  03a00	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  03a05	50		 push	 eax
  03a06	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  03a09	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  03a0e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L63513:

; 1191 : }

  03a11	8b e5		 mov	 esp, ebp
  03a13	5d		 pop	 ebp
  03a14	c2 1c 00	 ret	 28			; 0000001cH
?Modify@SCIScrollWindow@@QAE?AVTextID@@V2@0HHHH@Z ENDP	; SCIScrollWindow::Modify
_TEXT	ENDS
PUBLIC	?Get@SCIScrollWindow@@QAE?AVTextID@@H@Z		; SCIScrollWindow::Get
_TEXT	SEGMENT
_index$ = 12
___$ReturnUdt$ = 8
_this$ = -8
$T64090 = -4
?Get@SCIScrollWindow@@QAE?AVTextID@@H@Z PROC NEAR	; SCIScrollWindow::Get

; 1195 : {

  03a17	55		 push	 ebp
  03a18	8b ec		 mov	 ebp, esp
  03a1a	83 ec 08	 sub	 esp, 8
  03a1d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1196 : 	if(index < end)

  03a20	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  03a23	8b 4d 0c	 mov	 ecx, DWORD PTR _index$[ebp]
  03a26	3b 88 a4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+164]
  03a2c	7d 20		 jge	 SHORT $L63544

; 1197 : 		return (entries[index].textID);

  03a2e	8b 55 0c	 mov	 edx, DWORD PTR _index$[ebp]
  03a31	52		 push	 edx
  03a32	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03a35	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03a3b	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03a40	50		 push	 eax
  03a41	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  03a44	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  03a49	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  03a4c	eb 16		 jmp	 SHORT $L63545
$L63544:

; 1199 :       return (TextID)0;

  03a4e	6a 00		 push	 0
  03a50	8d 4d fc	 lea	 ecx, DWORD PTR $T64090[ebp]
  03a53	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  03a58	50		 push	 eax
  03a59	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  03a5c	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  03a61	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L63545:

; 1200 : } 

  03a64	8b e5		 mov	 esp, ebp
  03a66	5d		 pop	 ebp
  03a67	c2 08 00	 ret	 8
?Get@SCIScrollWindow@@QAE?AVTextID@@H@Z ENDP		; SCIScrollWindow::Get
_TEXT	ENDS
PUBLIC	?Which@SCIScrollWindow@@QAEHVTextID@@@Z		; SCIScrollWindow::Which
_TEXT	SEGMENT
_theText$ = 8
_this$ = -8
_i$ = -4
?Which@SCIScrollWindow@@QAEHVTextID@@@Z PROC NEAR	; SCIScrollWindow::Which

; 1204 : {

  03a6a	55		 push	 ebp
  03a6b	8b ec		 mov	 ebp, esp
  03a6d	83 ec 08	 sub	 esp, 8
  03a70	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1205 : 	for(int i = 0; i< end; i++) {

  03a73	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  03a7a	eb 09		 jmp	 SHORT $L63553
$L63554:
  03a7c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  03a7f	83 c0 01	 add	 eax, 1
  03a82	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L63553:
  03a85	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03a88	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  03a8b	3b 91 a4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+164]
  03a91	7d 26		 jge	 SHORT $L63555

; 1206 : 		if(theText == entries[i].textID)

  03a93	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  03a96	50		 push	 eax
  03a97	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  03a9a	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  03aa0	e8 00 00 00 00	 call	 ??AScrollEntryID@@QBEAAUScrollEntry@@I@Z ; ScrollEntryID::operator[]
  03aa5	50		 push	 eax
  03aa6	8d 4d 08	 lea	 ecx, DWORD PTR _theText$[ebp]
  03aa9	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  03aae	85 c0		 test	 eax, eax
  03ab0	74 05		 je	 SHORT $L63556

; 1207 :       	return i;

  03ab2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  03ab5	eb 05		 jmp	 SHORT $L63551
$L63556:

; 1208 : 	}

  03ab7	eb c3		 jmp	 SHORT $L63554
$L63555:

; 1209 :    return -1;

  03ab9	83 c8 ff	 or	 eax, -1
$L63551:

; 1210 : }

  03abc	8b e5		 mov	 esp, ebp
  03abe	5d		 pop	 ebp
  03abf	c2 04 00	 ret	 4
?Which@SCIScrollWindow@@QAEHVTextID@@@Z ENDP		; SCIScrollWindow::Which
_TEXT	ENDS
PUBLIC	?WaitOnUser@@YAHPAVEventWindow@@@Z		; WaitOnUser
_TEXT	SEGMENT
_w$ = 8
_userEvent$ = -40
?WaitOnUser@@YAHPAVEventWindow@@@Z PROC NEAR		; WaitOnUser

; 1317 : {

  03ac2	55		 push	 ebp
  03ac3	8b ec		 mov	 ebp, esp
  03ac5	83 ec 28	 sub	 esp, 40			; 00000028H

; 1318 : 	if(!eventMgr)

  03ac8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eventMgr@@3PAUEventMgr@@A, 0 ; eventMgr
  03acf	75 07		 jne	 SHORT $L63560

; 1319 : 		return False;

  03ad1	33 c0		 xor	 eax, eax
  03ad3	e9 87 00 00 00	 jmp	 $L63564
$L63560:

; 1320 : 
; 1321 : 	SOL_Event userEvent;

  03ad8	8d 4d d8	 lea	 ecx, DWORD PTR _userEvent$[ebp]
  03adb	e8 00 00 00 00	 call	 ??0SOL_Event@@QAE@XZ	; SOL_Event::SOL_Event
$L63563:

; 1322 : 	while (True) {

  03ae0	b8 01 00 00 00	 mov	 eax, 1
  03ae5	85 c0		 test	 eax, eax
  03ae7	74 76		 je	 SHORT $L63564

; 1323 : 		eventMgr->Get(&userEvent,SOL_Event::MouseDown | SOL_Event::KeyDown);

  03ae9	6a 05		 push	 5
  03aeb	8d 4d d8	 lea	 ecx, DWORD PTR _userEvent$[ebp]
  03aee	51		 push	 ecx
  03aef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  03af5	8b 02		 mov	 eax, DWORD PTR [edx]
  03af7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  03afd	ff 50 08	 call	 DWORD PTR [eax+8]

; 1324 : 		if (w && w->HandleEvent(userEvent)) 

  03b00	83 7d 08 00	 cmp	 DWORD PTR _w$[ebp], 0
  03b04	74 12		 je	 SHORT $L63565
  03b06	8d 4d d8	 lea	 ecx, DWORD PTR _userEvent$[ebp]
  03b09	51		 push	 ecx
  03b0a	8b 4d 08	 mov	 ecx, DWORD PTR _w$[ebp]
  03b0d	e8 00 00 00 00	 call	 ?HandleEvent@EventWindow@@QAEHAAVSOL_Event@@@Z ; EventWindow::HandleEvent
  03b12	85 c0		 test	 eax, eax
  03b14	74 02		 je	 SHORT $L63565

; 1325 : 			continue;

  03b16	eb c8		 jmp	 SHORT $L63563
$L63565:

; 1327 : 			(userEvent.type == SOL_Event::KeyDown) &&
; 1328 : 			(
; 1329 : 			(userEvent.message == Kbd::Enter) ||
; 1330 : 			(userEvent.message == Kbd::Esc)
; 1331 : 			)
; 1332 : 			)

  03b18	8b 55 d8	 mov	 edx, DWORD PTR _userEvent$[ebp]
  03b1b	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  03b21	83 fa 04	 cmp	 edx, 4
  03b24	75 17		 jne	 SHORT $L63566
  03b26	83 7d dc 0d	 cmp	 DWORD PTR _userEvent$[ebp+4], 13 ; 0000000dH
  03b2a	74 06		 je	 SHORT $L63567
  03b2c	83 7d dc 1b	 cmp	 DWORD PTR _userEvent$[ebp+4], 27 ; 0000001bH
  03b30	75 0b		 jne	 SHORT $L63566
$L63567:

; 1333 : 			return userEvent.message == Kbd::Esc;

  03b32	33 c0		 xor	 eax, eax
  03b34	83 7d dc 1b	 cmp	 DWORD PTR _userEvent$[ebp+4], 27 ; 0000001bH
  03b38	0f 94 c0	 sete	 al
  03b3b	eb 22		 jmp	 SHORT $L63564
$L63566:

; 1334 : 		if (userEvent.type == SOL_Event::MouseDown)

  03b3d	8b 45 d8	 mov	 eax, DWORD PTR _userEvent$[ebp]
  03b40	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  03b45	83 f8 01	 cmp	 eax, 1
  03b48	75 13		 jne	 SHORT $L63568

; 1335 : 			return userEvent.modifiers == Kbd::Shift;

  03b4a	8b 4d e0	 mov	 ecx, DWORD PTR _userEvent$[ebp+8]
  03b4d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  03b53	33 c0		 xor	 eax, eax
  03b55	83 f9 03	 cmp	 ecx, 3
  03b58	0f 94 c0	 sete	 al
  03b5b	eb 02		 jmp	 SHORT $L63564
$L63568:

; 1336 : // BEW CLEANUP 			if (
; 1337 : // BEW CLEANUP 				(userEvent.type == SOL_Event::KeyDown) &&
; 1338 : // BEW CLEANUP 				(userEvent.message == 'S')
; 1339 : // BEW CLEANUP 				)
; 1340 : // BEW CLEANUP 				mapStamp = -1;
; 1341 : 	}

  03b5d	eb 81		 jmp	 SHORT $L63563
$L63564:

; 1342 : }

  03b5f	8b e5		 mov	 esp, ebp
  03b61	5d		 pop	 ebp
  03b62	c3		 ret	 0
?WaitOnUser@@YAHPAVEventWindow@@@Z ENDP			; WaitOnUser
_TEXT	ENDS
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
PUBLIC	??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
PUBLIC	??0ScrollWindowID@@QAE@XZ			; ScrollWindowID::ScrollWindowID
PUBLIC	??0ScrollWindowID@@QAE@G@Z			; ScrollWindowID::ScrollWindowID
PUBLIC	?KSCIScrollWindow@@YAXPAF@Z			; KSCIScrollWindow
PUBLIC	??0ObjectID@@QAE@XZ				; ObjectID::ObjectID
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
PUBLIC	?GetProperty@ObjectID@@QBEFG@Z			; ObjectID::GetProperty
PUBLIC	??0ScrollEntryID@@QAE@G@Z			; ScrollEntryID::ScrollEntryID
EXTRN	?Alert@MsgMgr@@QAAHPADZZ:NEAR			; MsgMgr::Alert
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
_DATA	SEGMENT
	ORG $+2
$SG63577 DB	'Illegal number of arguments to SCIScrollWindow - CREATE', 00H
$SG63586 DB	'Handle does not corispond to Scroll Window Type', 00H
$SG63594 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Wind'
	DB	'ow.cpp', 00H
	ORG $+1
$SG63596 DB	'Illegal number of arguments to SCIScrollWindow - ADD', 0aH
	DB	' numArgs = %d', 00H
	ORG $+1
$SG63606 DB	'Illegal number of arguments to SCIScrollWindow - CLEAR', 00H
	ORG $+1
$SG63609 DB	'Illegal number of arguments to SCIScrollWindow - PAGEUP', 00H
$SG63612 DB	'Illegal number of arguments to SCIScrollWindow - PAGEDOW'
	DB	'N', 00H
	ORG $+2
$SG63615 DB	'Illegal number of arguments to SCIScrollWindow - UPARROW'
	DB	00H
	ORG $+3
$SG63618 DB	'Illegal number of arguments to SCIScrollWindow - DOWNARR'
	DB	'OW', 00H
	ORG $+1
$SG63621 DB	'Illegal number of arguments to SCIScrollWindow - HOME', 00H
	ORG $+2
$SG63624 DB	'Illegal number of arguments to SCIScrollWindow - END', 00H
	ORG $+3
$SG63627 DB	'Illegal number of arguments to SCIScrollWindow - RESIZE', 00H
$SG63631 DB	'Illegal number of arguments to SCIScrollWindow - WHERE', 00H
	ORG $+1
$SG63634 DB	'Illegal number of arguments to SCIScrollWindow - GO', 00H
$SG63637 DB	'Illegal number of arguments to SCIScrollWindow - INSERT', 00H
$SG63643 DB	'Illegal number of arguments to SCIScrollWindow - DELETE', 00H
$SG63656 DB	'Illegal number of arguments to SCIScrollWindow - MODIFY', 00H
$SG63659 DB	'Illegal number of arguments to SCIScrollWindow - HIDE', 00H
	ORG $+2
$SG63662 DB	'Illegal number of arguments to SCIScrollWindow - SHOW', 00H
	ORG $+2
$SG63665 DB	'Illegal number of arguments to SCIScrollWindow - DESTROY'
	DB	00H
	ORG $+3
$SG63668 DB	'Illegal number of arguments to SCIScrollWindow - TEXT', 00H
	ORG $+2
$SG63673 DB	'Illegal number of arguments to SCIScrollWindow - RECONST'
	DB	'RUCT', 00H
	ORG $+3
$SG63677 DB	'Illegal Procedure In SCIScrollWindow Kernel Call', 00H
_DATA	ENDS
_TEXT	SEGMENT
_args$ = 8
_obj$ = -4
_scrollWindow$63575 = -36
_window$63579 = -24
_pt$63580 = -32
_scrollWindow$63584 = -56
_window$63587 = -52
$T64094 = -60
$T64097 = -72
$T64099 = -80
$T64100 = -84
$T64103 = -96
$T64107 = -112
$T64110 = -124
$T64111 = -128
?KSCIScrollWindow@@YAXPAF@Z PROC NEAR			; KSCIScrollWindow

; 1346 : {

  03b63	55		 push	 ebp
  03b64	8b ec		 mov	 ebp, esp
  03b66	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H

; 1347 : 	int startTime;
; 1348 : 
; 1349 : 	// arg(1) type of call      
; 1350 :    ObjectID obj;

  03b6c	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03b6f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@XZ	; ObjectID::ObjectID

; 1351 : 	if(!arg(1)) { // call to create window, CREATE = 0

  03b74	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03b77	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  03b7b	85 c9		 test	 ecx, ecx
  03b7d	0f 85 25 01 00
	00		 jne	 $L63574

; 1352 : 
; 1353 : 		ScrollWindowID scrollWindow;

  03b83	8d 4d dc	 lea	 ecx, DWORD PTR _scrollWindow$63575[ebp]
  03b86	e8 00 00 00 00	 call	 ??0ScrollWindowID@@QAE@XZ ; ScrollWindowID::ScrollWindowID

; 1354 :         
; 1355 : 		// arg(2) objID;
; 1356 : 		// arg(3) is num text entries  
; 1357 :       if(arg(0) != 3)

  03b8b	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03b8e	0f bf 02	 movsx	 eax, WORD PTR [edx]
  03b91	83 f8 03	 cmp	 eax, 3
  03b94	74 14		 je	 SHORT $L63576

; 1358 :          msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - CREATE");

  03b96	68 00 00 00 00	 push	 OFFSET FLAT:$SG63577
  03b9b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03ba1	51		 push	 ecx
  03ba2	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03ba7	83 c4 08	 add	 esp, 8
$L63576:

; 1359 : 		obj = arg(2);

  03baa	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03bad	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  03bb1	50		 push	 eax
  03bb2	8d 4d c4	 lea	 ecx, DWORD PTR $T64094[ebp]
  03bb5	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  03bba	66 8b 4d c4	 mov	 cx, WORD PTR $T64094[ebp]
  03bbe	66 89 4d fc	 mov	 WORD PTR _obj$[ebp], cx

; 1360 : 		SOL_Rect window;

  03bc2	8d 4d e8	 lea	 ecx, DWORD PTR _window$63579[ebp]
  03bc5	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 1361 :    	SOL_Point pt;

  03bca	8d 4d e0	 lea	 ecx, DWORD PTR _pt$63580[ebp]
  03bcd	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 1362 : 	
; 1363 : #ifdef NETWORK
; 1364 : 		pt.x = window.A.x = obj.GetProperty(s_left);

  03bd2	68 87 00 00 00	 push	 135			; 00000087H
  03bd7	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03bda	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03bdf	0f bf d0	 movsx	 edx, ax
  03be2	89 55 e8	 mov	 DWORD PTR _window$63579[ebp], edx
  03be5	8b 45 e8	 mov	 eax, DWORD PTR _window$63579[ebp]
  03be8	89 45 e0	 mov	 DWORD PTR _pt$63580[ebp], eax

; 1365 : 		pt.y = window.A.y = obj.GetProperty(s_top);

  03beb	68 89 00 00 00	 push	 137			; 00000089H
  03bf0	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03bf3	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03bf8	0f bf c8	 movsx	 ecx, ax
  03bfb	89 4d ec	 mov	 DWORD PTR _window$63579[ebp+4], ecx
  03bfe	8b 55 ec	 mov	 edx, DWORD PTR _window$63579[ebp+4]
  03c01	89 55 e4	 mov	 DWORD PTR _pt$63580[ebp+4], edx

; 1366 : 		window.B.x = obj.GetProperty(s_right);

  03c04	68 88 00 00 00	 push	 136			; 00000088H
  03c09	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03c0c	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03c11	0f bf c0	 movsx	 eax, ax
  03c14	89 45 f0	 mov	 DWORD PTR _window$63579[ebp+8], eax

; 1367 : 		window.B.y = obj.GetProperty(s_bottom);

  03c17	68 8a 00 00 00	 push	 138			; 0000008aH
  03c1c	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03c1f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03c24	0f bf c8	 movsx	 ecx, ax
  03c27	89 4d f4	 mov	 DWORD PTR _window$63579[ebp+12], ecx

; 1368 : #else
; 1369 : 		pt.x = window.A.x = obj.GetProperty(s_nowSeenL);
; 1370 : 		pt.y = window.A.y = obj.GetProperty(s_nowSeenT);
; 1371 : 		window.B.x = obj.GetProperty(s_nowSeenR);
; 1372 : 		window.B.y = obj.GetProperty(s_nowSeenB);
; 1373 : #endif
; 1374 : 
; 1375 : 		scrollWindow.Get( window, pt,
; 1376 : 						obj.GetProperty(s_plane),
; 1377 : 			  			obj.GetProperty(s_fore),
; 1378 : 			  			obj.GetProperty(s_back),
; 1379 : 			  			obj.GetProperty(s_font),
; 1380 : 			  			obj.GetProperty(s_mode),
; 1381 : 			  			obj.GetProperty(s_borderColor),
; 1382 : 						arg(3) //size
; 1383 : 					);

  03c2a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03c2d	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  03c31	50		 push	 eax
  03c32	6a 7a		 push	 122			; 0000007aH
  03c34	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03c37	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03c3c	50		 push	 eax
  03c3d	6a 27		 push	 39			; 00000027H
  03c3f	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03c42	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03c47	50		 push	 eax
  03c48	6a 2a		 push	 42			; 0000002aH
  03c4a	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03c4d	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03c52	50		 push	 eax
  03c53	6a 26		 push	 38			; 00000026H
  03c55	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03c58	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03c5d	50		 push	 eax
  03c5e	6a 25		 push	 37			; 00000025H
  03c60	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03c63	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03c68	50		 push	 eax
  03c69	6a 00		 push	 0
  03c6b	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  03c6e	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  03c73	0f bf c8	 movsx	 ecx, ax
  03c76	51		 push	 ecx
  03c77	83 ec 08	 sub	 esp, 8
  03c7a	8b cc		 mov	 ecx, esp
  03c7c	8d 55 e0	 lea	 edx, DWORD PTR _pt$63580[ebp]
  03c7f	52		 push	 edx
  03c80	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  03c85	8d 45 e8	 lea	 eax, DWORD PTR _window$63579[ebp]
  03c88	50		 push	 eax
  03c89	8d 4d dc	 lea	 ecx, DWORD PTR _scrollWindow$63575[ebp]
  03c8c	e8 00 00 00 00	 call	 ?Get@ScrollWindowID@@QAEXAAVSOL_Rect@@VSOL_Point@@HGGGFFH@Z ; ScrollWindowID::Get

; 1384 : 		pm.acc = scrollWindow; 

  03c91	8d 4d dc	 lea	 ecx, DWORD PTR _scrollWindow$63575[ebp]
  03c94	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03c99	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  03c9e	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1385 : 
; 1386 : 	} else {

  03ca3	e9 c3 07 00 00	 jmp	 $L63589
$L63574:

; 1387 : 		// arg(2) of all but the create call is the ScrollWindow ID
; 1388 : 		ScrollWindowID scrollWindow((SOL_Handle) arg(2));

  03ca8	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03cab	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  03caf	52		 push	 edx
  03cb0	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03cb3	e8 00 00 00 00	 call	 ??0ScrollWindowID@@QAE@G@Z ; ScrollWindowID::ScrollWindowID

; 1389 : 
; 1390 : 		if(scrollWindow->refType != SCROLLWINDOW)

  03cb8	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03cbb	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03cc0	81 b8 a0 00 00
	00 cc f0 00 00	 cmp	 DWORD PTR [eax+160], 61644 ; 0000f0ccH
  03cca	74 13		 je	 SHORT $L63585

; 1391 :          msgMgr->Fatal("Handle does not corispond to Scroll Window Type");

  03ccc	68 00 00 00 00	 push	 OFFSET FLAT:$SG63586
  03cd1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03cd6	50		 push	 eax
  03cd7	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03cdc	83 c4 08	 add	 esp, 8
$L63585:

; 1392 :    
; 1393 : 		SOL_Rect window;

  03cdf	8d 4d cc	 lea	 ecx, DWORD PTR _window$63587[ebp]
  03ce2	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 1394 : 		switch(arg(1)) {

  03ce7	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03cea	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  03cee	89 95 78 ff ff
	ff		 mov	 DWORD PTR -136+[ebp], edx
  03cf4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR -136+[ebp]
  03cfa	83 e8 01	 sub	 eax, 1
  03cfd	89 85 78 ff ff
	ff		 mov	 DWORD PTR -136+[ebp], eax
  03d03	83 bd 78 ff ff
	ff 13		 cmp	 DWORD PTR -136+[ebp], 19 ; 00000013H
  03d0a	0f 87 48 07 00
	00		 ja	 $L63676
  03d10	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR -136+[ebp]
  03d16	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L64113[ecx*4]
$L63592:

; 1395 : 			case eADD:  // add a text block to window
; 1396 : 				// arg(3) is textID
; 1397 : 				// arg(4) is font
; 1398 : 				// arg(5) is color
; 1399 :             // arg(6) is allinment
; 1400 :             // arg(7) is optional Should Jump
; 1401 : 
; 1402 :             // HOOK
; 1403 :             // This statement should be surrounded by DEBUG
; 1404 :             // **********************************
; 1405 : 		      if (!memMgr->IsValid(arg(3)))

  03d1d	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03d20	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  03d24	50		 push	 eax
  03d25	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  03d2b	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid
  03d30	85 c0		 test	 eax, eax
  03d32	75 24		 jne	 SHORT $L63593

; 1406 : 			      msgMgr->Fatal(SrcLoc,Msg_InvalidHandle,arg(3));

  03d34	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03d37	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  03d3b	52		 push	 edx
  03d3c	6a 4c		 push	 76			; 0000004cH
  03d3e	68 7e 05 00 00	 push	 1406			; 0000057eH
  03d43	68 00 00 00 00	 push	 OFFSET FLAT:$SG63594
  03d48	6a 61		 push	 97			; 00000061H
  03d4a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03d4f	50		 push	 eax
  03d50	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  03d55	83 c4 18	 add	 esp, 24			; 00000018H
$L63593:

; 1407 :             // **********************************
; 1408 : 
; 1409 :             if(arg(0) < 6)

  03d58	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03d5b	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  03d5e	83 fa 06	 cmp	 edx, 6
  03d61	7d 20		 jge	 SHORT $L63595

; 1410 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - ADD\n numArgs = %d",arg(0));

  03d63	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03d66	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  03d69	51		 push	 ecx
  03d6a	68 00 00 00 00	 push	 OFFSET FLAT:$SG63596
  03d6f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03d75	52		 push	 edx
  03d76	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03d7b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1411 :             else if(arg(0) < 7)

  03d7e	e9 af 00 00 00	 jmp	 $L63601
$L63595:
  03d83	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03d86	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  03d89	83 f9 07	 cmp	 ecx, 7
  03d8c	7d 50		 jge	 SHORT $L63598

; 1412 : 					pm.acc = scrollWindow->Add(arg(3),arg(4),arg(5),arg(6));

  03d8e	6a 01		 push	 1
  03d90	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03d93	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  03d97	50		 push	 eax
  03d98	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03d9b	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  03d9f	52		 push	 edx
  03da0	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03da3	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  03da7	51		 push	 ecx
  03da8	51		 push	 ecx
  03da9	8b cc		 mov	 ecx, esp
  03dab	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03dae	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  03db2	50		 push	 eax
  03db3	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  03db8	8d 4d b8	 lea	 ecx, DWORD PTR $T64097[ebp]
  03dbb	51		 push	 ecx
  03dbc	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03dbf	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03dc4	8b c8		 mov	 ecx, eax
  03dc6	e8 00 00 00 00	 call	 ?Add@SCIScrollWindow@@QAE?AVTextID@@V2@HHHH@Z ; SCIScrollWindow::Add
  03dcb	8b c8		 mov	 ecx, eax
  03dcd	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03dd2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  03dd7	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1413 :             else

  03ddc	eb 54		 jmp	 SHORT $L63601
$L63598:

; 1414 : 					pm.acc = scrollWindow->Add(arg(3),arg(4),arg(5),arg(6),arg(7));

  03dde	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03de1	0f bf 42 0e	 movsx	 eax, WORD PTR [edx+14]
  03de5	50		 push	 eax
  03de6	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03de9	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  03ded	52		 push	 edx
  03dee	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03df1	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  03df5	51		 push	 ecx
  03df6	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03df9	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  03dfd	50		 push	 eax
  03dfe	51		 push	 ecx
  03dff	8b cc		 mov	 ecx, esp
  03e01	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03e04	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  03e08	50		 push	 eax
  03e09	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  03e0e	8d 4d b0	 lea	 ecx, DWORD PTR $T64099[ebp]
  03e11	51		 push	 ecx
  03e12	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03e15	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03e1a	8b c8		 mov	 ecx, eax
  03e1c	e8 00 00 00 00	 call	 ?Add@SCIScrollWindow@@QAE?AVTextID@@V2@HHHH@Z ; SCIScrollWindow::Add
  03e21	8b c8		 mov	 ecx, eax
  03e23	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03e28	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  03e2d	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax
$L63601:

; 1415 : 
; 1416 : 				break;

  03e32	e9 34 06 00 00	 jmp	 $L63589
$L63604:

; 1417 : 
; 1418 : 			case eCLEAR: // clear all entries to window
; 1419 :             if(arg(0) != 2)

  03e37	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03e3a	0f bf 02	 movsx	 eax, WORD PTR [edx]
  03e3d	83 f8 02	 cmp	 eax, 2
  03e40	74 14		 je	 SHORT $L63605

; 1420 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - CLEAR");

  03e42	68 00 00 00 00	 push	 OFFSET FLAT:$SG63606
  03e47	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03e4d	51		 push	 ecx
  03e4e	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03e53	83 c4 08	 add	 esp, 8
$L63605:

; 1421 : 				scrollWindow->Clear();

  03e56	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03e59	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03e5e	8b c8		 mov	 ecx, eax
  03e60	e8 00 00 00 00	 call	 ?Clear@SCIScrollWindow@@QAEXXZ ; SCIScrollWindow::Clear

; 1422 : 				break;

  03e65	e9 01 06 00 00	 jmp	 $L63589
$L63607:

; 1423 : 
; 1424 : 			case ePAGEUP:
; 1425 :             if(arg(0) != 2)

  03e6a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03e6d	0f bf 02	 movsx	 eax, WORD PTR [edx]
  03e70	83 f8 02	 cmp	 eax, 2
  03e73	74 14		 je	 SHORT $L63608

; 1426 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - PAGEUP");

  03e75	68 00 00 00 00	 push	 OFFSET FLAT:$SG63609
  03e7a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03e80	51		 push	 ecx
  03e81	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03e86	83 c4 08	 add	 esp, 8
$L63608:

; 1427 : 				scrollWindow->PageUp();

  03e89	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03e8c	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03e91	89 85 74 ff ff
	ff		 mov	 DWORD PTR -140+[ebp], eax
  03e97	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR -140+[ebp]
  03e9d	8b 02		 mov	 eax, DWORD PTR [edx]
  03e9f	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR -140+[ebp]
  03ea5	ff 50 18	 call	 DWORD PTR [eax+24]

; 1428 : 				break;

  03ea8	e9 be 05 00 00	 jmp	 $L63589
$L63610:

; 1429 : 
; 1430 : 			case ePAGEDOWN:
; 1431 :             if(arg(0) != 2)

  03ead	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03eb0	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  03eb3	83 fa 02	 cmp	 edx, 2
  03eb6	74 13		 je	 SHORT $L63611

; 1432 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - PAGEDOWN");

  03eb8	68 00 00 00 00	 push	 OFFSET FLAT:$SG63612
  03ebd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03ec2	50		 push	 eax
  03ec3	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03ec8	83 c4 08	 add	 esp, 8
$L63611:

; 1433 : 				scrollWindow->PageDown();

  03ecb	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03ece	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03ed3	89 85 70 ff ff
	ff		 mov	 DWORD PTR -144+[ebp], eax
  03ed9	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR -144+[ebp]
  03edf	8b 11		 mov	 edx, DWORD PTR [ecx]
  03ee1	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR -144+[ebp]
  03ee7	ff 52 1c	 call	 DWORD PTR [edx+28]

; 1434 : 				break;

  03eea	e9 7c 05 00 00	 jmp	 $L63589
$L63613:

; 1435 : 
; 1436 : 			case eUPARROW:
; 1437 :             if(arg(0) != 2)

  03eef	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03ef2	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  03ef5	83 f9 02	 cmp	 ecx, 2
  03ef8	74 14		 je	 SHORT $L63614

; 1438 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - UPARROW");

  03efa	68 00 00 00 00	 push	 OFFSET FLAT:$SG63615
  03eff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03f05	52		 push	 edx
  03f06	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03f0b	83 c4 08	 add	 esp, 8
$L63614:

; 1439 : 				scrollWindow->UpArrow();

  03f0e	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03f11	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03f16	89 85 6c ff ff
	ff		 mov	 DWORD PTR -148+[ebp], eax
  03f1c	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR -148+[ebp]
  03f22	8b 10		 mov	 edx, DWORD PTR [eax]
  03f24	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR -148+[ebp]
  03f2a	ff 52 28	 call	 DWORD PTR [edx+40]

; 1440 : 				break;

  03f2d	e9 39 05 00 00	 jmp	 $L63589
$L63616:

; 1441 : 
; 1442 : 			case eDOWNARROW:
; 1443 :             if(arg(0) != 2)

  03f32	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03f35	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  03f38	83 f9 02	 cmp	 ecx, 2
  03f3b	74 14		 je	 SHORT $L63617

; 1444 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - DOWNARROW");

  03f3d	68 00 00 00 00	 push	 OFFSET FLAT:$SG63618
  03f42	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03f48	52		 push	 edx
  03f49	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03f4e	83 c4 08	 add	 esp, 8
$L63617:

; 1445 : 				scrollWindow->DownArrow();

  03f51	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03f54	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03f59	89 85 68 ff ff
	ff		 mov	 DWORD PTR -152+[ebp], eax
  03f5f	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR -152+[ebp]
  03f65	8b 10		 mov	 edx, DWORD PTR [eax]
  03f67	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR -152+[ebp]
  03f6d	ff 52 2c	 call	 DWORD PTR [edx+44]

; 1446 : 				break;

  03f70	e9 f6 04 00 00	 jmp	 $L63589
$L63619:

; 1447 : 
; 1448 : 			case eHOME:
; 1449 :             if(arg(0) != 2)

  03f75	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03f78	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  03f7b	83 f9 02	 cmp	 ecx, 2
  03f7e	74 14		 je	 SHORT $L63620

; 1450 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - HOME");

  03f80	68 00 00 00 00	 push	 OFFSET FLAT:$SG63621
  03f85	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03f8b	52		 push	 edx
  03f8c	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03f91	83 c4 08	 add	 esp, 8
$L63620:

; 1451 : 				scrollWindow->Home();

  03f94	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03f97	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03f9c	89 85 64 ff ff
	ff		 mov	 DWORD PTR -156+[ebp], eax
  03fa2	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR -156+[ebp]
  03fa8	8b 10		 mov	 edx, DWORD PTR [eax]
  03faa	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR -156+[ebp]
  03fb0	ff 52 20	 call	 DWORD PTR [edx+32]

; 1452 : 				break;

  03fb3	e9 b3 04 00 00	 jmp	 $L63589
$L63622:

; 1453 : 
; 1454 : 			case eEND:
; 1455 :             if(arg(0) != 2)

  03fb8	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03fbb	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  03fbe	83 f9 02	 cmp	 ecx, 2
  03fc1	74 14		 je	 SHORT $L63623

; 1456 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - END");

  03fc3	68 00 00 00 00	 push	 OFFSET FLAT:$SG63624
  03fc8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03fce	52		 push	 edx
  03fcf	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03fd4	83 c4 08	 add	 esp, 8
$L63623:

; 1457 : 				scrollWindow->End();

  03fd7	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  03fda	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  03fdf	89 85 60 ff ff
	ff		 mov	 DWORD PTR -160+[ebp], eax
  03fe5	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR -160+[ebp]
  03feb	8b 10		 mov	 edx, DWORD PTR [eax]
  03fed	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR -160+[ebp]
  03ff3	ff 52 24	 call	 DWORD PTR [edx+36]

; 1458 : 				break;

  03ff6	e9 70 04 00 00	 jmp	 $L63589
$L63625:

; 1459 : 
; 1460 : 			case eRESIZE:   
; 1461 :             if(arg(0) != 3)

  03ffb	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03ffe	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  04001	83 f9 03	 cmp	 ecx, 3
  04004	74 14		 je	 SHORT $L63626

; 1462 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - RESIZE"); 

  04006	68 00 00 00 00	 push	 OFFSET FLAT:$SG63627
  0400b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  04011	52		 push	 edx
  04012	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  04017	83 c4 08	 add	 esp, 8
$L63626:

; 1463 : 		      obj = arg(3);

  0401a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0401d	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  04021	51		 push	 ecx
  04022	8d 4d ac	 lea	 ecx, DWORD PTR $T64100[ebp]
  04025	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0402a	66 8b 55 ac	 mov	 dx, WORD PTR $T64100[ebp]
  0402e	66 89 55 fc	 mov	 WORD PTR _obj$[ebp], dx

; 1464 : #ifdef NETWORK
; 1465 : 				window.A.x = obj.GetProperty(s_left);

  04032	68 87 00 00 00	 push	 135			; 00000087H
  04037	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  0403a	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0403f	0f bf c0	 movsx	 eax, ax
  04042	89 45 cc	 mov	 DWORD PTR _window$63587[ebp], eax

; 1466 : 				window.A.y = obj.GetProperty(s_top);

  04045	68 89 00 00 00	 push	 137			; 00000089H
  0404a	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  0404d	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  04052	0f bf c8	 movsx	 ecx, ax
  04055	89 4d d0	 mov	 DWORD PTR _window$63587[ebp+4], ecx

; 1467 : 				window.B.x = obj.GetProperty(s_right);

  04058	68 88 00 00 00	 push	 136			; 00000088H
  0405d	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  04060	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  04065	0f bf d0	 movsx	 edx, ax
  04068	89 55 d4	 mov	 DWORD PTR _window$63587[ebp+8], edx

; 1468 : 				window.B.y = obj.GetProperty(s_bottom);

  0406b	68 8a 00 00 00	 push	 138			; 0000008aH
  04070	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  04073	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  04078	0f bf c0	 movsx	 eax, ax
  0407b	89 45 d8	 mov	 DWORD PTR _window$63587[ebp+12], eax

; 1469 : #else
; 1470 : 				window.A.x = obj.GetProperty(s_nowSeenL);
; 1471 : 				window.A.y = obj.GetProperty(s_nowSeenT);
; 1472 : 				window.B.x = obj.GetProperty(s_nowSeenR);
; 1473 : 				window.B.y = obj.GetProperty(s_nowSeenB);
; 1474 : #endif
; 1475 : 
; 1476 : 				scrollWindow->ResizeWindow(window);

  0407e	8d 4d cc	 lea	 ecx, DWORD PTR _window$63587[ebp]
  04081	51		 push	 ecx
  04082	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  04085	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  0408a	89 85 5c ff ff
	ff		 mov	 DWORD PTR -164+[ebp], eax
  04090	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR -164+[ebp]
  04096	8b 02		 mov	 eax, DWORD PTR [edx]
  04098	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR -164+[ebp]
  0409e	ff 50 0c	 call	 DWORD PTR [eax+12]

; 1477 : 				break;

  040a1	e9 c5 03 00 00	 jmp	 $L63589
$L63629:

; 1478 : 
; 1479 : 			case eWHERE: // Given the range, Where in that range would the thumb lie
; 1480 :             if(arg(0) != 3)

  040a6	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  040a9	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  040ac	83 fa 03	 cmp	 edx, 3
  040af	74 13		 je	 SHORT $L63630

; 1481 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - WHERE");

  040b1	68 00 00 00 00	 push	 OFFSET FLAT:$SG63631
  040b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  040bb	50		 push	 eax
  040bc	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  040c1	83 c4 08	 add	 esp, 8
$L63630:

; 1482 : 				pm.acc = scrollWindow->Where(arg(3));

  040c4	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  040c7	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  040cb	52		 push	 edx
  040cc	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  040cf	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  040d4	8b c8		 mov	 ecx, eax
  040d6	e8 00 00 00 00	 call	 ?Where@SCIScrollWindow@@QAEHH@Z ; SCIScrollWindow::Where
  040db	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1483 : 				break;

  040e0	e9 86 03 00 00	 jmp	 $L63589
$L63632:

; 1484 : 
; 1485 : 			case eGO: // Goto the window position corisponding to a given thumb and range
; 1486 :             if(arg(0) != 4)

  040e5	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  040e8	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  040eb	83 f9 04	 cmp	 ecx, 4
  040ee	74 14		 je	 SHORT $L63633

; 1487 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - GO");

  040f0	68 00 00 00 00	 push	 OFFSET FLAT:$SG63634
  040f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  040fb	52		 push	 edx
  040fc	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  04101	83 c4 08	 add	 esp, 8
$L63633:

; 1488 : 				scrollWindow->Go(arg(3), arg(4));

  04104	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04107	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0410b	51		 push	 ecx
  0410c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0410f	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  04113	50		 push	 eax
  04114	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  04117	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  0411c	8b c8		 mov	 ecx, eax
  0411e	e8 00 00 00 00	 call	 ?Go@SCIScrollWindow@@QAEXHH@Z ; SCIScrollWindow::Go

; 1489 : 				break;

  04123	e9 43 03 00 00	 jmp	 $L63589
$L63635:

; 1490 : 
; 1491 :          case eINSERT:
; 1492 :             if(arg(0) != 7)

  04128	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0412b	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0412e	83 fa 07	 cmp	 edx, 7
  04131	74 13		 je	 SHORT $L63636

; 1493 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - INSERT");

  04133	68 00 00 00 00	 push	 OFFSET FLAT:$SG63637
  04138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0413d	50		 push	 eax
  0413e	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  04143	83 c4 08	 add	 esp, 8
$L63636:

; 1494 : 				pm.acc = scrollWindow->Insert(arg(3),arg(4),arg(5),arg(6),arg(7));

  04146	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04149	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  0414d	52		 push	 edx
  0414e	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04151	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  04155	51		 push	 ecx
  04156	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04159	0f bf 42 0a	 movsx	 eax, WORD PTR [edx+10]
  0415d	50		 push	 eax
  0415e	51		 push	 ecx
  0415f	8b cc		 mov	 ecx, esp
  04161	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04164	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  04168	50		 push	 eax
  04169	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  0416e	51		 push	 ecx
  0416f	8b cc		 mov	 ecx, esp
  04171	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04174	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  04178	50		 push	 eax
  04179	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  0417e	8d 4d a0	 lea	 ecx, DWORD PTR $T64103[ebp]
  04181	51		 push	 ecx
  04182	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  04185	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  0418a	8b c8		 mov	 ecx, eax
  0418c	e8 00 00 00 00	 call	 ?Insert@SCIScrollWindow@@QAE?AVTextID@@V2@0HHH@Z ; SCIScrollWindow::Insert
  04191	8b c8		 mov	 ecx, eax
  04193	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04198	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0419d	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1495 :             break;

  041a2	e9 c4 02 00 00	 jmp	 $L63589
$L63641:

; 1496 : 
; 1497 :          case eDELETE:
; 1498 :             if(arg(0) != 3)

  041a7	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  041aa	0f bf 02	 movsx	 eax, WORD PTR [edx]
  041ad	83 f8 03	 cmp	 eax, 3
  041b0	74 14		 je	 SHORT $L63642

; 1499 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - DELETE");

  041b2	68 00 00 00 00	 push	 OFFSET FLAT:$SG63643
  041b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  041bd	51		 push	 ecx
  041be	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  041c3	83 c4 08	 add	 esp, 8
$L63642:

; 1500 : 				scrollWindow->Delete(arg(3));

  041c6	51		 push	 ecx
  041c7	8b cc		 mov	 ecx, esp
  041c9	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  041cc	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  041d0	50		 push	 eax
  041d1	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  041d6	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  041d9	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  041de	8b c8		 mov	 ecx, eax
  041e0	e8 00 00 00 00	 call	 ?Delete@SCIScrollWindow@@QAEXVTextID@@@Z ; SCIScrollWindow::Delete

; 1501 :             break;

  041e5	e9 81 02 00 00	 jmp	 $L63589
$L63645:

; 1502 : 
; 1503 :          case eMODIFY:
; 1504 :             if(arg(0) == 7)

  041ea	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  041ed	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  041f0	83 fa 07	 cmp	 edx, 7
  041f3	75 63		 jne	 SHORT $L63646

; 1505 : 					pm.acc = scrollWindow->Modify(arg(3),arg(4),arg(5),arg(6),arg(7));

  041f5	6a 01		 push	 1
  041f7	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  041fa	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  041fe	51		 push	 ecx
  041ff	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04202	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  04206	50		 push	 eax
  04207	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0420a	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  0420e	52		 push	 edx
  0420f	51		 push	 ecx
  04210	8b cc		 mov	 ecx, esp
  04212	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04215	66 8b 50 08	 mov	 dx, WORD PTR [eax+8]
  04219	52		 push	 edx
  0421a	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  0421f	51		 push	 ecx
  04220	8b cc		 mov	 ecx, esp
  04222	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04225	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  04229	52		 push	 edx
  0422a	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  0422f	8d 45 90	 lea	 eax, DWORD PTR $T64107[ebp]
  04232	50		 push	 eax
  04233	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  04236	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  0423b	8b c8		 mov	 ecx, eax
  0423d	e8 00 00 00 00	 call	 ?Modify@SCIScrollWindow@@QAE?AVTextID@@V2@0HHHH@Z ; SCIScrollWindow::Modify
  04242	8b c8		 mov	 ecx, eax
  04244	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04249	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0424e	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1506 :             else if(arg(0) == 8)

  04253	e9 85 00 00 00	 jmp	 $L63655
$L63646:
  04258	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0425b	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0425e	83 fa 08	 cmp	 edx, 8
  04261	75 66		 jne	 SHORT $L63651

; 1507 : 					pm.acc = scrollWindow->Modify(arg(3),arg(4),arg(5),arg(6),arg(7),arg(8));

  04263	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04266	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0426a	51		 push	 ecx
  0426b	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0426e	0f bf 42 0e	 movsx	 eax, WORD PTR [edx+14]
  04272	50		 push	 eax
  04273	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04276	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  0427a	52		 push	 edx
  0427b	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0427e	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  04282	51		 push	 ecx
  04283	51		 push	 ecx
  04284	8b cc		 mov	 ecx, esp
  04286	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04289	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  0428d	50		 push	 eax
  0428e	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  04293	51		 push	 ecx
  04294	8b cc		 mov	 ecx, esp
  04296	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04299	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  0429d	50		 push	 eax
  0429e	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  042a3	8d 4d 84	 lea	 ecx, DWORD PTR $T64110[ebp]
  042a6	51		 push	 ecx
  042a7	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  042aa	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  042af	8b c8		 mov	 ecx, eax
  042b1	e8 00 00 00 00	 call	 ?Modify@SCIScrollWindow@@QAE?AVTextID@@V2@0HHHH@Z ; SCIScrollWindow::Modify
  042b6	8b c8		 mov	 ecx, eax
  042b8	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  042bd	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  042c2	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1508 :             else

  042c7	eb 14		 jmp	 SHORT $L63655
$L63651:

; 1509 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - MODIFY");

  042c9	68 00 00 00 00	 push	 OFFSET FLAT:$SG63656
  042ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  042d4	52		 push	 edx
  042d5	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  042da	83 c4 08	 add	 esp, 8
$L63655:

; 1510 :             break;

  042dd	e9 89 01 00 00	 jmp	 $L63589
$L63657:

; 1511 : 
; 1512 : 			case eHIDE: 
; 1513 :             if(arg(0) != 2)

  042e2	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  042e5	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  042e8	83 f9 02	 cmp	 ecx, 2
  042eb	74 14		 je	 SHORT $L63658

; 1514 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - HIDE");

  042ed	68 00 00 00 00	 push	 OFFSET FLAT:$SG63659
  042f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  042f8	52		 push	 edx
  042f9	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  042fe	83 c4 08	 add	 esp, 8
$L63658:

; 1515 : 				scrollWindow->Hide();

  04301	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  04304	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  04309	89 85 58 ff ff
	ff		 mov	 DWORD PTR -168+[ebp], eax
  0430f	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR -168+[ebp]
  04315	8b 10		 mov	 edx, DWORD PTR [eax]
  04317	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR -168+[ebp]
  0431d	ff 52 04	 call	 DWORD PTR [edx+4]

; 1516 : 				break;

  04320	e9 46 01 00 00	 jmp	 $L63589
$L63660:

; 1517 : 
; 1518 : 			case eSHOW: 
; 1519 :             if(arg(0) != 2)

  04325	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04328	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0432b	83 f9 02	 cmp	 ecx, 2
  0432e	74 14		 je	 SHORT $L63661

; 1520 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - SHOW");

  04330	68 00 00 00 00	 push	 OFFSET FLAT:$SG63662
  04335	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0433b	52		 push	 edx
  0433c	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  04341	83 c4 08	 add	 esp, 8
$L63661:

; 1521 : 				scrollWindow->Show();

  04344	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  04347	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  0434c	89 85 54 ff ff
	ff		 mov	 DWORD PTR -172+[ebp], eax
  04352	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR -172+[ebp]
  04358	8b 10		 mov	 edx, DWORD PTR [eax]
  0435a	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR -172+[ebp]
  04360	ff 52 14	 call	 DWORD PTR [edx+20]

; 1522 : 				break;

  04363	e9 03 01 00 00	 jmp	 $L63589
$L63663:

; 1523 : 
; 1524 : 			case eDESTROY:
; 1525 :             if(arg(0) != 2)

  04368	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0436b	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0436e	83 f9 02	 cmp	 ecx, 2
  04371	74 14		 je	 SHORT $L63664

; 1526 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - DESTROY");

  04373	68 00 00 00 00	 push	 OFFSET FLAT:$SG63665
  04378	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0437e	52		 push	 edx
  0437f	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  04384	83 c4 08	 add	 esp, 8
$L63664:

; 1527 : 				scrollWindow->Hide();

  04387	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  0438a	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  0438f	89 85 50 ff ff
	ff		 mov	 DWORD PTR -176+[ebp], eax
  04395	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR -176+[ebp]
  0439b	8b 10		 mov	 edx, DWORD PTR [eax]
  0439d	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR -176+[ebp]
  043a3	ff 52 04	 call	 DWORD PTR [edx+4]

; 1528 : 				scrollWindow.Free();

  043a6	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  043a9	e8 00 00 00 00	 call	 ?Free@ScrollWindowID@@QAEXXZ ; ScrollWindowID::Free

; 1529 : 				break;

  043ae	e9 b8 00 00 00	 jmp	 $L63589
$L63666:

; 1532 :             if(arg(0) != 2)

  043b3	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  043b6	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  043b9	83 f9 02	 cmp	 ecx, 2
  043bc	74 14		 je	 SHORT $L63667

; 1533 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - TEXT");

  043be	68 00 00 00 00	 push	 OFFSET FLAT:$SG63668
  043c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  043c9	52		 push	 edx
  043ca	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  043cf	83 c4 08	 add	 esp, 8
$L63667:

; 1534 : 				pm.acc = (Acc) scrollWindow->CopyEntries();

  043d2	8d 45 80	 lea	 eax, DWORD PTR $T64111[ebp]
  043d5	50		 push	 eax
  043d6	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  043d9	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  043de	8b c8		 mov	 ecx, eax
  043e0	e8 00 00 00 00	 call	 ?CopyEntries@SCIScrollWindow@@QAE?AVScrollEntryID@@XZ ; SCIScrollWindow::CopyEntries
  043e5	8b c8		 mov	 ecx, eax
  043e7	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  043ec	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  043f1	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1535 : 				break;

  043f6	eb 73		 jmp	 SHORT $L63589
$L63671:

; 1537 : 
; 1538 : 			case eRECONSTRUCT:
; 1539 :             if(arg(0) != 3)

  043f8	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  043fb	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  043fe	83 fa 03	 cmp	 edx, 3
  04401	74 13		 je	 SHORT $L63672

; 1540 :                msgMgr->Fatal("Illegal number of arguments to SCIScrollWindow - RECONSTRUCT");

  04403	68 00 00 00 00	 push	 OFFSET FLAT:$SG63673
  04408	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0440d	50		 push	 eax
  0440e	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  04413	83 c4 08	 add	 esp, 8
$L63672:

; 1541 : 				scrollWindow->Reconstruct(arg(3));

  04416	51		 push	 ecx
  04417	8b cc		 mov	 ecx, esp
  04419	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0441c	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  04420	50		 push	 eax
  04421	e8 00 00 00 00	 call	 ??0ScrollEntryID@@QAE@G@Z ; ScrollEntryID::ScrollEntryID
  04426	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  04429	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  0442e	8b c8		 mov	 ecx, eax
  04430	e8 00 00 00 00	 call	 ?Reconstruct@SCIScrollWindow@@QAEXVScrollEntryID@@@Z ; SCIScrollWindow::Reconstruct

; 1542 : 				break;

  04435	eb 34		 jmp	 SHORT $L63589
$L63675:

; 1543 : 
; 1544 : 			case eREDRAW:
; 1545 : 				scrollWindow->ReDrawText();

  04437	8d 4d c8	 lea	 ecx, DWORD PTR _scrollWindow$63584[ebp]
  0443a	e8 00 00 00 00	 call	 ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ; FakeScrollWindowID::operator->
  0443f	89 85 4c ff ff
	ff		 mov	 DWORD PTR -180+[ebp], eax
  04445	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR -180+[ebp]
  0444b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0444d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR -180+[ebp]
  04453	ff 52 30	 call	 DWORD PTR [edx+48]

; 1546 : 				break;

  04456	eb 13		 jmp	 SHORT $L63589
$L63676:

; 1547 : 
; 1548 : 			default:
; 1549 :          	msgMgr->Alert("Illegal Procedure In SCIScrollWindow Kernel Call");

  04458	68 00 00 00 00	 push	 OFFSET FLAT:$SG63677
  0445d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  04462	50		 push	 eax
  04463	e8 00 00 00 00	 call	 ?Alert@MsgMgr@@QAAHPADZZ ; MsgMgr::Alert
  04468	83 c4 08	 add	 esp, 8
$L63589:

; 1554 : }

  0446b	8b e5		 mov	 esp, ebp
  0446d	5d		 pop	 ebp
  0446e	c3		 ret	 0
$L64113:
  0446f	00 00 00 00	 DD	 $L63592
  04473	00 00 00 00	 DD	 $L63604
  04477	00 00 00 00	 DD	 $L63607
  0447b	00 00 00 00	 DD	 $L63610
  0447f	00 00 00 00	 DD	 $L63613
  04483	00 00 00 00	 DD	 $L63616
  04487	00 00 00 00	 DD	 $L63619
  0448b	00 00 00 00	 DD	 $L63622
  0448f	00 00 00 00	 DD	 $L63625
  04493	00 00 00 00	 DD	 $L63629
  04497	00 00 00 00	 DD	 $L63632
  0449b	00 00 00 00	 DD	 $L63635
  0449f	00 00 00 00	 DD	 $L63641
  044a3	00 00 00 00	 DD	 $L63645
  044a7	00 00 00 00	 DD	 $L63657
  044ab	00 00 00 00	 DD	 $L63660
  044af	00 00 00 00	 DD	 $L63663
  044b3	00 00 00 00	 DD	 $L63666
  044b7	00 00 00 00	 DD	 $L63671
  044bb	00 00 00 00	 DD	 $L63675
?KSCIScrollWindow@@YAXPAF@Z ENDP			; KSCIScrollWindow
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L64115
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L64115
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L64115
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L64115
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L64116
$L64115:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L64116:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@XZ				; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ObjectID@@QAE@XZ PROC NEAR				; ObjectID::ObjectID, COMDAT

; 227  : 	ObjectID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@XZ	; FakeObjectID::FakeObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ObjectID@@QAE@XZ ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeObjectID@@QAE@XZ PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeObjectID@@QAE@XZ ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	?GetProperty@Object@@QAEFG@Z			; Object::GetProperty
PUBLIC	??CFakeObjectID@@QBEPAUObject@@XZ		; FakeObjectID::operator->
PUBLIC	?AssureValid@ObjectID@@QBEXXZ			; ObjectID::AssureValid
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@ObjectID@@QBEFG@Z PROC NEAR		; ObjectID::GetProperty, COMDAT

; 290  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 		//	get a property given a selector
; 292  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 293  : 		return (*this)->GetProperty(selector);

  0000f	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty

; 294  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetProperty@ObjectID@@QBEFG@Z ENDP			; ObjectID::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddrCheck@Object@@QAEPAFG@Z		; Object::GetPropAddrCheck
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@Object@@QAEFG@Z PROC NEAR			; Object::GetProperty, COMDAT

; 170  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		//	get a property given a selector
; 172  : 		return *GetPropAddrCheck(selector);

  00007	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00014	66 8b 00	 mov	 ax, WORD PTR [eax]

; 173  : 	}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetProperty@Object@@QAEFG@Z ENDP			; Object::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddr@Object@@QAEPAFG@Z			; Object::GetPropAddr
EXTRN	?Fatal@MsgMgr@@QAAXHZZ:NEAR			; MsgMgr::Fatal
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -8
_property$ = -4
?GetPropAddrCheck@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddrCheck, COMDAT

; 153  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 		//	get a property's address, checking for valid property
; 155  : 		Property* property = GetPropAddr(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddr@Object@@QAEPAFG@Z ; Object::GetPropAddr
  00016	89 45 fc	 mov	 DWORD PTR _property$[ebp], eax

; 156  : 		if (!property)

  00019	83 7d fc 00	 cmp	 DWORD PTR _property$[ebp], 0
  0001d	75 1b		 jne	 SHORT $L61129

; 157  : 			msgMgr->Fatal(Msg_InvalidProperty, selector);

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _selector$[ebp]
  00022	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00028	51		 push	 ecx
  00029	6a 29		 push	 41			; 00000029H
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
$L61129:

; 158  : 		return property;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _property$[ebp]

; 159  : 	}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetPropAddrCheck@Object@@QAEPAFG@Z ENDP		; Object::GetPropAddrCheck
_TEXT	ENDS
PUBLIC	?selectorDict@Object@@QAEPAVSelectorDict@@XZ	; Object::selectorDict
PUBLIC	??AObject@@QAEAAFH@Z				; Object::operator[]
EXTRN	?get@SelectorDict@@QAEHG@Z:NEAR			; SelectorDict::get
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -8
_index$ = -4
?GetPropAddr@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddr, COMDAT

; 127  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 		int index = selectorDict()->get ( selector );

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?get@SelectorDict@@QAEHG@Z ; SelectorDict::get
  0001d	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 129  : 
; 130  : 		if ( index != -1 && !selectorDict()->script )

  00020	83 7d fc ff	 cmp	 DWORD PTR _index$[ebp], -1
  00024	74 2b		 je	 SHORT $L61120
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  0002e	33 c9		 xor	 ecx, ecx
  00030	66 8b 48 16	 mov	 cx, WORD PTR [eax+22]
  00034	85 c9		 test	 ecx, ecx
  00036	75 19		 jne	 SHORT $L61120

; 131  : 			return &(*this)[selectorDict()->offset]; 

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00040	33 d2		 xor	 edx, edx
  00042	66 8b 50 14	 mov	 dx, WORD PTR [eax+20]
  00046	52		 push	 edx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ??AObject@@QAEAAFH@Z	; Object::operator[]
  0004f	eb 02		 jmp	 SHORT $L61118
$L61120:

; 132  : 
; 133  : 		return 0;

  00051	33 c0		 xor	 eax, eax
$L61118:

; 134  : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?GetPropAddr@Object@@QAEPAFG@Z ENDP			; Object::GetPropAddr
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT
_this$ = -4
?selectorDict@Object@@QAEPAVSelectorDict@@XZ PROC NEAR	; Object::selectorDict, COMDAT

; 102  : 	SelectorDict *selectorDict ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 		return _selectorDict;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 104  : 	};

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?selectorDict@Object@@QAEPAVSelectorDict@@XZ ENDP	; Object::selectorDict
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
??AObject@@QAEAAFH@Z PROC NEAR				; Object::operator[], COMDAT

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		//	get a reference to a property given the number of the property
; 119  : 		return ((Property*) this)[index];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 120  : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??AObject@@QAEAAFH@Z ENDP				; Object::operator[]
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeObjectID@@QBEPAUObject@@XZ PROC NEAR		; FakeObjectID::operator->, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeObjectID@@QBEPAUObject@@XZ ENDP			; FakeObjectID::operator->
_TEXT	ENDS
PUBLIC	?IsObject@ObjectID@@QBEHXZ			; ObjectID::IsObject
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssureValid@ObjectID@@QBEXXZ PROC NEAR			; ObjectID::AssureValid, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 239  : 		if (!IsObject())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  0000f	85 c0		 test	 eax, eax
  00011	75 1e		 jne	 SHORT $L61288

; 240  : 			msgMgr->Fatal(Msg_NotObject, (int) *this);

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0001b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00020	50		 push	 eax
  00021	6a 2f		 push	 47			; 0000002fH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L61288:

; 241  : 	}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?AssureValid@ObjectID@@QBEXXZ ENDP			; ObjectID::AssureValid
_TEXT	ENDS
PUBLIC	?IsValid@MemID@@QBEHXZ				; MemID::IsValid
EXTRN	?GetMemType@MemID@@QBE?AW4MemType@@XZ:NEAR	; MemID::GetMemType
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsObject@ObjectID@@QBEHXZ PROC NEAR			; ObjectID::IsObject, COMDAT

; 247  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 		return IsValid() && GetMemType() == MemObject;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00011	85 c0		 test	 eax, eax
  00013	74 16		 je	 SHORT $L64130
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0001d	83 f8 34	 cmp	 eax, 52			; 00000034H
  00020	75 09		 jne	 SHORT $L64130
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  00029	eb 07		 jmp	 SHORT $L64131
$L64130:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L64131:
  00032	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 249  : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?IsObject@ObjectID@@QBEHXZ ENDP				; ObjectID::IsObject
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@MemID@@QBEHXZ PROC NEAR			; MemID::IsValid, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return memMgr->IsValid(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid

; 64   : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IsValid@MemID@@QBEHXZ ENDP				; MemID::IsValid
_TEXT	ENDS
PUBLIC	??0FakeScrollEntryID@@QAE@G@Z			; FakeScrollEntryID::FakeScrollEntryID
;	COMDAT ??0ScrollEntryID@@QAE@G@Z
_TEXT	SEGMENT
_this$ = -4
_h$ = 8
??0ScrollEntryID@@QAE@G@Z PROC NEAR			; ScrollEntryID::ScrollEntryID, COMDAT

; 43   : 	ScrollEntryID(SOL_Handle h) : FakeScrollEntryID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeScrollEntryID@@QAE@G@Z ; FakeScrollEntryID::FakeScrollEntryID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ScrollEntryID@@QAE@G@Z ENDP				; ScrollEntryID::ScrollEntryID
_TEXT	ENDS
;	COMDAT ??0FakeScrollEntryID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeScrollEntryID@@QAE@G@Z PROC NEAR			; FakeScrollEntryID::FakeScrollEntryID, COMDAT

; 36   : FakeTemplateID(FakeScrollEntryID, ScrollEntry,MemWindowEntry)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeScrollEntryID@@QAE@G@Z ENDP			; FakeScrollEntryID::FakeScrollEntryID
_TEXT	ENDS
;	COMDAT ??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ PROC NEAR ; FakeScrollWindowID::operator->, COMDAT

; 261  : FakeTemplateID(FakeScrollWindowID, SCIScrollWindow, MemWindow)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeScrollWindowID@@QBEPAVSCIScrollWindow@@XZ ENDP	; FakeScrollWindowID::operator->
_TEXT	ENDS
PUBLIC	??0FakeScrollWindowID@@QAE@XZ			; FakeScrollWindowID::FakeScrollWindowID
;	COMDAT ??0ScrollWindowID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ScrollWindowID@@QAE@XZ PROC NEAR			; ScrollWindowID::ScrollWindowID, COMDAT

; 265  : 	ScrollWindowID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeScrollWindowID@@QAE@XZ ; FakeScrollWindowID::FakeScrollWindowID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ScrollWindowID@@QAE@XZ ENDP				; ScrollWindowID::ScrollWindowID
_TEXT	ENDS
;	COMDAT ??0FakeScrollWindowID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeScrollWindowID@@QAE@XZ PROC NEAR			; FakeScrollWindowID::FakeScrollWindowID, COMDAT

; 261  : FakeTemplateID(FakeScrollWindowID, SCIScrollWindow, MemWindow)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeScrollWindowID@@QAE@XZ ENDP			; FakeScrollWindowID::FakeScrollWindowID
_TEXT	ENDS
PUBLIC	??0FakeScrollWindowID@@QAE@G@Z			; FakeScrollWindowID::FakeScrollWindowID
;	COMDAT ??0ScrollWindowID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ScrollWindowID@@QAE@G@Z PROC NEAR			; ScrollWindowID::ScrollWindowID, COMDAT

; 268  : 	ScrollWindowID(SOL_Handle h) : FakeScrollWindowID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeScrollWindowID@@QAE@G@Z ; FakeScrollWindowID::FakeScrollWindowID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ScrollWindowID@@QAE@G@Z ENDP				; ScrollWindowID::ScrollWindowID
_TEXT	ENDS
;	COMDAT ??0FakeScrollWindowID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeScrollWindowID@@QAE@G@Z PROC NEAR		; FakeScrollWindowID::FakeScrollWindowID, COMDAT

; 261  : FakeTemplateID(FakeScrollWindowID, SCIScrollWindow, MemWindow)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeScrollWindowID@@QAE@G@Z ENDP			; FakeScrollWindowID::FakeScrollWindowID
_TEXT	ENDS
END

	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Memid.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Critical@MemoryMgr@@QAEXGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDiscardable@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNotDiscardable@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@MemoryMgr@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMemType@MemoryMgr@@QAE?AW4MemType@@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMemAttrs@MemoryMgr@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?GetMemAttrs@MemoryMgr@@QAEIG@Z			; MemoryMgr::GetMemAttrs
PUBLIC	?Attrs@MemID@@QBEIXZ				; MemID::Attrs
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
EXTRN	_memMgr:DWORD
_TEXT	SEGMENT
_this$ = -4
?Attrs@MemID@@QBEIXZ PROC NEAR				; MemID::Attrs

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 11   : 	return memMgr->GetMemAttrs(*this);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0000f	50		 push	 eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00016	e8 00 00 00 00	 call	 ?GetMemAttrs@MemoryMgr@@QAEIG@Z ; MemoryMgr::GetMemAttrs

; 12   : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?Attrs@MemID@@QBEIXZ ENDP				; MemID::Attrs
_TEXT	ENDS
PUBLIC	?GetMemType@MemoryMgr@@QAE?AW4MemType@@G@Z	; MemoryMgr::GetMemType
PUBLIC	?GetMemType@MemID@@QBE?AW4MemType@@XZ		; MemID::GetMemType
_TEXT	SEGMENT
_this$ = -4
?GetMemType@MemID@@QBE?AW4MemType@@XZ PROC NEAR		; MemID::GetMemType

; 16   : {

  0001f	55		 push	 ebp
  00020	8b ec		 mov	 ebp, esp
  00022	51		 push	 ecx
  00023	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 17   : 	return memMgr->GetMemType(*this);

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0002e	50		 push	 eax
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00035	e8 00 00 00 00	 call	 ?GetMemType@MemoryMgr@@QAE?AW4MemType@@G@Z ; MemoryMgr::GetMemType

; 18   : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?GetMemType@MemID@@QBE?AW4MemType@@XZ ENDP		; MemID::GetMemType
_TEXT	ENDS
PUBLIC	?GetMemTypeStr@MemID@@QBEPBDXZ			; MemID::GetMemTypeStr
EXTRN	?GetMemTypeStr@MemoryMgr@@QAEPBDG@Z:NEAR	; MemoryMgr::GetMemTypeStr
_TEXT	SEGMENT
_this$ = -4
?GetMemTypeStr@MemID@@QBEPBDXZ PROC NEAR		; MemID::GetMemTypeStr

; 22   : {

  0003e	55		 push	 ebp
  0003f	8b ec		 mov	 ebp, esp
  00041	51		 push	 ecx
  00042	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	return memMgr->GetMemTypeStr(*this);

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0004d	50		 push	 eax
  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00054	e8 00 00 00 00	 call	 ?GetMemTypeStr@MemoryMgr@@QAEPBDG@Z ; MemoryMgr::GetMemTypeStr

; 24   : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?GetMemTypeStr@MemID@@QBEPBDXZ ENDP			; MemID::GetMemTypeStr
_TEXT	ENDS
PUBLIC	?Clear@MemID@@QBEXXZ				; MemID::Clear
PUBLIC	?Fill@MemID@@QBEXE@Z				; MemID::Fill
_TEXT	SEGMENT
_this$ = -4
?Clear@MemID@@QBEXXZ PROC NEAR				; MemID::Clear

; 28   : {

  0005d	55		 push	 ebp
  0005e	8b ec		 mov	 ebp, esp
  00060	51		 push	 ecx
  00061	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 	Fill(0);

  00064	6a 00		 push	 0
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?Fill@MemID@@QBEXE@Z	; MemID::Fill

; 30   : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?Clear@MemID@@QBEXXZ ENDP				; MemID::Clear
_TEXT	ENDS
PUBLIC	?Critical@MemoryMgr@@QAEXGH@Z			; MemoryMgr::Critical
PUBLIC	?Critical@MemID@@QBEXH@Z			; MemID::Critical
_TEXT	SEGMENT
_on$ = 8
_this$ = -4
?Critical@MemID@@QBEXH@Z PROC NEAR			; MemID::Critical

; 34   : {

  00072	55		 push	 ebp
  00073	8b ec		 mov	 ebp, esp
  00075	51		 push	 ecx
  00076	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	memMgr->Critical(handle, on);

  00079	8b 45 08	 mov	 eax, DWORD PTR _on$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00083	52		 push	 edx
  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  0008a	e8 00 00 00 00	 call	 ?Critical@MemoryMgr@@QAEXGH@Z ; MemoryMgr::Critical

; 36   : }

  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
?Critical@MemID@@QBEXH@Z ENDP				; MemID::Critical
_TEXT	ENDS
PUBLIC	?GetSize@MemoryMgr@@QAEIG@Z			; MemoryMgr::GetSize
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
EXTRN	_memset:NEAR
_TEXT	SEGMENT
_c$ = 8
_this$ = -4
?Fill@MemID@@QBEXE@Z PROC NEAR				; MemID::Fill

; 40   : {

  00095	55		 push	 ebp
  00096	8b ec		 mov	 ebp, esp
  00098	51		 push	 ecx
  00099	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	memset(**this, c, (size_t) memMgr->GetSize(*this));

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  000a4	50		 push	 eax
  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  000ab	e8 00 00 00 00	 call	 ?GetSize@MemoryMgr@@QAEIG@Z ; MemoryMgr::GetSize
  000b0	50		 push	 eax
  000b1	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  000b4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000b9	50		 push	 eax
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _memset
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : }

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 04 00	 ret	 4
?Fill@MemID@@QBEXE@Z ENDP				; MemID::Fill
_TEXT	ENDS
PUBLIC	?Lock@MemID@@QBEPAXXZ				; MemID::Lock
EXTRN	?Lock@MemoryMgr@@QAEPAXG@Z:NEAR			; MemoryMgr::Lock
_TEXT	SEGMENT
_this$ = -4
?Lock@MemID@@QBEPAXXZ PROC NEAR				; MemID::Lock

; 46   : {

  000d1	55		 push	 ebp
  000d2	8b ec		 mov	 ebp, esp
  000d4	51		 push	 ecx
  000d5	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 	return memMgr->Lock(*this);

  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  000e0	50		 push	 eax
  000e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  000e7	e8 00 00 00 00	 call	 ?Lock@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::Lock

; 48   : }

  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
?Lock@MemID@@QBEPAXXZ ENDP				; MemID::Lock
_TEXT	ENDS
PUBLIC	?Unlock@MemID@@QBEPAXXZ				; MemID::Unlock
EXTRN	?Unlock@MemoryMgr@@QAEPAXG@Z:NEAR		; MemoryMgr::Unlock
_TEXT	SEGMENT
_this$ = -4
?Unlock@MemID@@QBEPAXXZ PROC NEAR			; MemID::Unlock

; 52   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	51		 push	 ecx
  000f4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : 	return memMgr->Unlock(*this);

  000f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fa	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  000ff	50		 push	 eax
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00106	e8 00 00 00 00	 call	 ?Unlock@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::Unlock

; 54   : }

  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
?Unlock@MemID@@QBEPAXXZ ENDP				; MemID::Unlock
_TEXT	ENDS
PUBLIC	?SetDiscardable@MemoryMgr@@QAEXG@Z		; MemoryMgr::SetDiscardable
PUBLIC	?SetDiscardable@MemID@@QBEXXZ			; MemID::SetDiscardable
_TEXT	SEGMENT
_this$ = -4
?SetDiscardable@MemID@@QBEXXZ PROC NEAR			; MemID::SetDiscardable

; 58   : {

  0010f	55		 push	 ebp
  00110	8b ec		 mov	 ebp, esp
  00112	51		 push	 ecx
  00113	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 	memMgr->SetDiscardable(*this);

  00116	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0011e	50		 push	 eax
  0011f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00125	e8 00 00 00 00	 call	 ?SetDiscardable@MemoryMgr@@QAEXG@Z ; MemoryMgr::SetDiscardable

; 60   : }

  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?SetDiscardable@MemID@@QBEXXZ ENDP			; MemID::SetDiscardable
_TEXT	ENDS
PUBLIC	?SetNotDiscardable@MemoryMgr@@QAEXG@Z		; MemoryMgr::SetNotDiscardable
PUBLIC	?SetNotDiscardable@MemID@@QBEXXZ		; MemID::SetNotDiscardable
_TEXT	SEGMENT
_this$ = -4
?SetNotDiscardable@MemID@@QBEXXZ PROC NEAR		; MemID::SetNotDiscardable

; 64   : {

  0012e	55		 push	 ebp
  0012f	8b ec		 mov	 ebp, esp
  00131	51		 push	 ecx
  00132	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	memMgr->SetNotDiscardable(*this);

  00135	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0013d	50		 push	 eax
  0013e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00144	e8 00 00 00 00	 call	 ?SetNotDiscardable@MemoryMgr@@QAEXG@Z ; MemoryMgr::SetNotDiscardable

; 66   : }

  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
?SetNotDiscardable@MemID@@QBEXXZ ENDP			; MemID::SetNotDiscardable
_TEXT	ENDS
PUBLIC	?Realloc@MemID@@QBEPAXI@Z			; MemID::Realloc
EXTRN	?Realloc@MemoryMgr@@QAEXGI@Z:NEAR		; MemoryMgr::Realloc
_TEXT	SEGMENT
_size$ = 8
_this$ = -4
?Realloc@MemID@@QBEPAXI@Z PROC NEAR			; MemID::Realloc

; 70   : {

  0014d	55		 push	 ebp
  0014e	8b ec		 mov	 ebp, esp
  00150	51		 push	 ecx
  00151	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 71   : 	memMgr->Realloc(*this, size);

  00154	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00157	50		 push	 eax
  00158	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015b	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00160	50		 push	 eax
  00161	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00167	e8 00 00 00 00	 call	 ?Realloc@MemoryMgr@@QAEXGI@Z ; MemoryMgr::Realloc

; 72   : 	return **this;

  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*

; 73   : }

  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c2 04 00	 ret	 4
?Realloc@MemID@@QBEPAXI@Z ENDP				; MemID::Realloc
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
PUBLIC	?Read@MemID@@QBEHH@Z				; MemID::Read
PUBLIC	?Size@MemID@@QBEIXZ				; MemID::Size
EXTRN	?ReadMemID@@YAHHVMemID@@H@Z:NEAR		; ReadMemID
_TEXT	SEGMENT
_fd$ = 8
_this$ = -8
?Read@MemID@@QBEHH@Z PROC NEAR				; MemID::Read

; 77   : {

  0017a	55		 push	 ebp
  0017b	8b ec		 mov	 ebp, esp
  0017d	83 ec 08	 sub	 esp, 8
  00180	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 	return ReadMemID(fd, *this, Size());

  00183	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	e8 00 00 00 00	 call	 ?Size@MemID@@QBEIXZ	; MemID::Size
  0018b	50		 push	 eax
  0018c	51		 push	 ecx
  0018d	8b cc		 mov	 ecx, esp
  0018f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00198	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0019b	51		 push	 ecx
  0019c	e8 00 00 00 00	 call	 ?ReadMemID@@YAHHVMemID@@H@Z ; ReadMemID
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 79   : }

  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c2 04 00	 ret	 4
?Read@MemID@@QBEHH@Z ENDP				; MemID::Read
_TEXT	ENDS
PUBLIC	?Read@MemID@@QBEHHII@Z				; MemID::Read
PUBLIC	??AMemID@@QBEAADI@Z				; MemID::operator[]
EXTRN	?Read@@YAHHPAXH@Z:NEAR				; Read
_TEXT	SEGMENT
_fd$ = 8
_ofs$ = 12
_size$ = 16
_this$ = -4
?Read@MemID@@QBEHHII@Z PROC NEAR			; MemID::Read

; 83   : {

  001aa	55		 push	 ebp
  001ab	8b ec		 mov	 ebp, esp
  001ad	51		 push	 ecx
  001ae	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 84   : 	return ::Read(fd, &(*this)[ofs], size);

  001b1	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  001b4	50		 push	 eax
  001b5	8b 4d 0c	 mov	 ecx, DWORD PTR _ofs$[ebp]
  001b8	51		 push	 ecx
  001b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bc	e8 00 00 00 00	 call	 ??AMemID@@QBEAADI@Z	; MemID::operator[]
  001c1	50		 push	 eax
  001c2	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  001c5	52		 push	 edx
  001c6	e8 00 00 00 00	 call	 ?Read@@YAHHPAXH@Z	; Read
  001cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 85   : }

  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c2 0c 00	 ret	 12			; 0000000cH
?Read@MemID@@QBEHHII@Z ENDP				; MemID::Read
_TEXT	ENDS
PUBLIC	?Free@MemID@@QAEXXZ				; MemID::Free
PUBLIC	?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z ; MemID::Get
PUBLIC	?Load@MemID@@QAEHW4MemType@@PADIW4ReservedHandle@@@Z ; MemID::Load
EXTRN	?FileLength@@YAKH@Z:NEAR			; FileLength
EXTRN	?Open@@YAHPBDI@Z:NEAR				; Open
EXTRN	?Close@@YAHH@Z:NEAR				; Close
_TEXT	SEGMENT
_type$ = 8
_fileName$ = 12
_attrs$ = 16
_h$ = 20
_this$ = -16
_fd$ = -12
_size$ = -4
_rc$ = -8
?Load@MemID@@QAEHW4MemType@@PADIW4ReservedHandle@@@Z PROC NEAR ; MemID::Load

; 89   : {

  001d4	55		 push	 ebp
  001d5	8b ec		 mov	 ebp, esp
  001d7	83 ec 10	 sub	 esp, 16			; 00000010H
  001da	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 	int fd;
; 91   : 
; 92   : 	if ((fd = Open(fileName, O_RDONLY | O_BINARY)) == -1)

  001dd	68 00 80 00 00	 push	 32768			; 00008000H
  001e2	8b 45 0c	 mov	 eax, DWORD PTR _fileName$[ebp]
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 ?Open@@YAHPBDI@Z	; Open
  001eb	83 c4 08	 add	 esp, 8
  001ee	89 45 f4	 mov	 DWORD PTR _fd$[ebp], eax
  001f1	83 7d f4 ff	 cmp	 DWORD PTR _fd$[ebp], -1
  001f5	75 04		 jne	 SHORT $L54585

; 93   : 		return 0;

  001f7	33 c0		 xor	 eax, eax
  001f9	eb 5c		 jmp	 SHORT $L54583
$L54585:

; 94   : 
; 95   : 	int size = FileLength(fd);

  001fb	8b 4d f4	 mov	 ecx, DWORD PTR _fd$[ebp]
  001fe	51		 push	 ecx
  001ff	e8 00 00 00 00	 call	 ?FileLength@@YAKH@Z	; FileLength
  00204	83 c4 04	 add	 esp, 4
  00207	89 45 fc	 mov	 DWORD PTR _size$[ebp], eax

; 96   : 	Get(type, size, h, attrs);

  0020a	8b 55 10	 mov	 edx, DWORD PTR _attrs$[ebp]
  0020d	52		 push	 edx
  0020e	8b 45 14	 mov	 eax, DWORD PTR _h$[ebp]
  00211	50		 push	 eax
  00212	8b 4d fc	 mov	 ecx, DWORD PTR _size$[ebp]
  00215	51		 push	 ecx
  00216	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  00219	52		 push	 edx
  0021a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0021d	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z ; MemID::Get

; 97   : 
; 98   : 	int rc = Read(fd);

  00222	8b 45 f4	 mov	 eax, DWORD PTR _fd$[ebp]
  00225	50		 push	 eax
  00226	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00229	e8 00 00 00 00	 call	 ?Read@MemID@@QBEHH@Z	; MemID::Read
  0022e	89 45 f8	 mov	 DWORD PTR _rc$[ebp], eax

; 99   : 	if (rc != size) {

  00231	8b 4d f8	 mov	 ecx, DWORD PTR _rc$[ebp]
  00234	3b 4d fc	 cmp	 ecx, DWORD PTR _size$[ebp]
  00237	74 0f		 je	 SHORT $L54588

; 100  : 		Free();

  00239	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0023c	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 101  : 		rc = 0;

  00241	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0
$L54588:

; 103  : 	
; 104  : 	Close(fd);

  00248	8b 55 f4	 mov	 edx, DWORD PTR _fd$[ebp]
  0024b	52		 push	 edx
  0024c	e8 00 00 00 00	 call	 ?Close@@YAHH@Z		; Close
  00251	83 c4 04	 add	 esp, 4

; 105  : 	
; 106  : 	return rc;

  00254	8b 45 f8	 mov	 eax, DWORD PTR _rc$[ebp]
$L54583:

; 107  : }

  00257	8b e5		 mov	 esp, ebp
  00259	5d		 pop	 ebp
  0025a	c2 10 00	 ret	 16			; 00000010H
?Load@MemID@@QAEHW4MemType@@PADIW4ReservedHandle@@@Z ENDP ; MemID::Load
_this$ = -4
?Size@MemID@@QBEIXZ PROC NEAR				; MemID::Size

; 111  : {

  0025d	55		 push	 ebp
  0025e	8b ec		 mov	 ebp, esp
  00260	83 ec 08	 sub	 esp, 8
  00263	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 	return handle ? (size_t) memMgr->GetSize(*this) : 0;

  00266	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00269	33 c9		 xor	 ecx, ecx
  0026b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0026e	85 c9		 test	 ecx, ecx
  00270	74 19		 je	 SHORT $L54634
  00272	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00275	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0027a	50		 push	 eax
  0027b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00281	e8 00 00 00 00	 call	 ?GetSize@MemoryMgr@@QAEIG@Z ; MemoryMgr::GetSize
  00286	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00289	eb 07		 jmp	 SHORT $L54635
$L54634:
  0028b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L54635:
  00292	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 113  : }

  00295	8b e5		 mov	 esp, ebp
  00297	5d		 pop	 ebp
  00298	c3		 ret	 0
?Size@MemID@@QBEIXZ ENDP				; MemID::Size
_TEXT	ENDS
;	COMDAT ?Critical@MemoryMgr@@QAEXGH@Z
_TEXT	SEGMENT
_theID$ = 8
_critical$ = 12
_this$ = -4
?Critical@MemoryMgr@@QAEXGH@Z PROC NEAR			; MemoryMgr::Critical, COMDAT

; 338  : 	void Critical(SOL_Handle theID,Bool critical = True) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 339  : 		desc[theID].memInfo.bits.critical = critical;

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	c1 e0 04	 shl	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _critical$[ebp]
  0001b	83 e1 01	 and	 ecx, 1
  0001e	c1 e1 08	 shl	 ecx, 8
  00021	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  00024	80 e6 fe	 and	 dh, -2			; fffffffeH
  00027	0b d1		 or	 edx, ecx
  00029	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0002c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00031	c1 e0 04	 shl	 eax, 4
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0003a	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 340  : 	}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?Critical@MemoryMgr@@QAEXGH@Z ENDP			; MemoryMgr::Critical
_TEXT	ENDS
PUBLIC	?CheckValid@MemoryMgr@@QAEXG@Z			; MemoryMgr::CheckValid
;	COMDAT ?SetDiscardable@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?SetDiscardable@MemoryMgr@@QAEXG@Z PROC NEAR		; MemoryMgr::SetDiscardable, COMDAT

; 343  : 	void SetDiscardable(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  : 		CheckValid(theID);

  00007	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?CheckValid@MemoryMgr@@QAEXG@Z ; MemoryMgr::CheckValid

; 345  : 		desc[theID].memInfo.attributes &= (~TRANSITORY);

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _theID$[ebp]
  00017	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001d	c1 e1 04	 shl	 ecx, 4
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00029	81 e1 ff ff ef
	ff		 and	 ecx, -1048577		; ffefffffH
  0002f	8b 55 08	 mov	 edx, DWORD PTR _theID$[ebp]
  00032	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00038	c1 e2 04	 shl	 edx, 4
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00041	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 346  : 		desc[theID].memInfo.attributes |= DISCARDABLE;

  00044	8b 4d 08	 mov	 ecx, DWORD PTR _theID$[ebp]
  00047	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0004d	c1 e1 04	 shl	 ecx, 4
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00056	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00059	80 cd 04	 or	 ch, 4
  0005c	8b 55 08	 mov	 edx, DWORD PTR _theID$[ebp]
  0005f	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00065	c1 e2 04	 shl	 edx, 4
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006e	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 347  : 	}

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?SetDiscardable@MemoryMgr@@QAEXG@Z ENDP			; MemoryMgr::SetDiscardable
_TEXT	ENDS
;	COMDAT ?SetNotDiscardable@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?SetNotDiscardable@MemoryMgr@@QAEXG@Z PROC NEAR		; MemoryMgr::SetNotDiscardable, COMDAT

; 350  : 	void SetNotDiscardable(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 351  : 		CheckValid(theID);

  00007	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?CheckValid@MemoryMgr@@QAEXG@Z ; MemoryMgr::CheckValid

; 352  : 		desc[theID].memInfo.attributes &= (~DISCARDABLE);

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _theID$[ebp]
  00017	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001d	c1 e1 04	 shl	 ecx, 4
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00029	80 e5 fb	 and	 ch, -5			; fffffffbH
  0002c	8b 55 08	 mov	 edx, DWORD PTR _theID$[ebp]
  0002f	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00035	c1 e2 04	 shl	 edx, 4
  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003e	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 353  : 		desc[theID].memInfo.attributes |= TRANSITORY;

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _theID$[ebp]
  00044	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0004a	c1 e1 04	 shl	 ecx, 4
  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00053	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00056	81 c9 00 00 10
	00		 or	 ecx, 1048576		; 00100000H
  0005c	8b 55 08	 mov	 edx, DWORD PTR _theID$[ebp]
  0005f	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00065	c1 e2 04	 shl	 edx, 4
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006e	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 354  : 	}

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?SetNotDiscardable@MemoryMgr@@QAEXG@Z ENDP		; MemoryMgr::SetNotDiscardable
_TEXT	ENDS
;	COMDAT ?GetSize@MemoryMgr@@QAEIG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetSize@MemoryMgr@@QAEIG@Z PROC NEAR			; MemoryMgr::GetSize, COMDAT

; 357  : 	size_t GetSize(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 358  : //		CheckValid(theID);
; 359  : 		return desc[theID].size;

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	c1 e0 04	 shl	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00018	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]

; 360  : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?GetSize@MemoryMgr@@QAEIG@Z ENDP			; MemoryMgr::GetSize
_TEXT	ENDS
;	COMDAT ?GetMemType@MemoryMgr@@QAE?AW4MemType@@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
?GetMemType@MemoryMgr@@QAE?AW4MemType@@G@Z PROC NEAR	; MemoryMgr::GetMemType, COMDAT

; 363  : 	MemType GetMemType(SOL_Handle h) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : //		CheckValid(h);
; 365  : 		return (MemType) desc[h].memInfo.type;

  00007	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	c1 e0 04	 shl	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00018	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]

; 366  : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?GetMemType@MemoryMgr@@QAE?AW4MemType@@G@Z ENDP		; MemoryMgr::GetMemType
_TEXT	ENDS
;	COMDAT ?GetMemAttrs@MemoryMgr@@QAEIG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetMemAttrs@MemoryMgr@@QAEIG@Z PROC NEAR		; MemoryMgr::GetMemAttrs, COMDAT

; 369  : 	MemAttrs GetMemAttrs(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 		return (desc[theID].memInfo.attributes);

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	c1 e0 04	 shl	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00018	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]

; 371  : 	}

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetMemAttrs@MemoryMgr@@QAEIG@Z ENDP			; MemoryMgr::GetMemAttrs
_TEXT	ENDS
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
EXTRN	?NotValid@MemoryMgr@@QAEXG@Z:NEAR		; MemoryMgr::NotValid
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?CheckValid@MemoryMgr@@QAEXG@Z PROC NEAR		; MemoryMgr::CheckValid, COMDAT

; 468  : 	inline void MemoryMgr::CheckValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 469  : 		if (!IsValid(theID)) {

  00007	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid
  00014	85 c0		 test	 eax, eax
  00016	75 0d		 jne	 SHORT $L54404

; 470  : 			NotValid(theID);

  00018	66 8b 4d 08	 mov	 cx, WORD PTR _theID$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?NotValid@MemoryMgr@@QAEXG@Z ; MemoryMgr::NotValid
$L54404:

; 472  : 	}

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?CheckValid@MemoryMgr@@QAEXG@Z ENDP			; MemoryMgr::CheckValid
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L54644
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L54644
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L54644
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L54644
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L54645
$L54644:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L54645:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
EXTRN	?Free@MemoryMgr@@QAEXG@Z:NEAR			; MemoryMgr::Free
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Free@MemID@@QAEXXZ PROC NEAR				; MemID::Free, COMDAT

; 32   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 		if (handle) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 1a		 je	 SHORT $L54497

; 34   : 			memMgr->Free(handle);

  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	66 8b 02	 mov	 ax, WORD PTR [edx]
  00019	50		 push	 eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00020	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 35   : 			handle = 0;

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
$L54497:

; 37   : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?Free@MemID@@QAEXXZ ENDP				; MemID::Free
_TEXT	ENDS
PUBLIC	?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_h$ = 16
_a$ = 20
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z PROC NEAR ; MemID::Get, COMDAT

; 47   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 		Get(type, size, a | PERSIST, 0, 0, 0, h);

  00007	8b 45 10	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	8b 4d 14	 mov	 ecx, DWORD PTR _a$[ebp]
  00014	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  0001a	51		 push	 ecx
  0001b	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 49   : 	}

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 10 00	 ret	 16			; 00000010H
?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z ENDP	; MemID::Get
_TEXT	ENDS
EXTRN	?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z:NEAR ; MemoryMgr::Alloc
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_a$ = 16
_num$ = 20
_client$ = 24
_initChar$ = 28
_h$ = 32
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; MemID::Get, COMDAT

; 42   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		handle = memMgr->Alloc(type | a, size, num, client, initChar, h);

  00007	8b 45 20	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 1c	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0001e	0b 55 10	 or	 edx, DWORD PTR _a$[ebp]
  00021	52		 push	 edx
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00028	e8 00 00 00 00	 call	 ?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemoryMgr::Alloc
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	66 89 01	 mov	 WORD PTR [ecx], ax

; 44   : 	}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 1c 00	 ret	 28			; 0000001cH
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; MemID::Get
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT
_s$ = 8
_this$ = -4
??AMemID@@QBEAADI@Z PROC NEAR				; MemID::operator[], COMDAT

; 103  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 104  : 		return *((char*) memMgr->GetAddr(handle) + s);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00019	03 45 08	 add	 eax, DWORD PTR _s$[ebp]

; 105  : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??AMemID@@QBEAADI@Z ENDP				; MemID::operator[]
_TEXT	ENDS
END

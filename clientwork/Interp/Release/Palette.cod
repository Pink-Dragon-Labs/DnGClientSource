	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Palette.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24F@@QAE@EEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24F@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0HunkPalette@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Count@HunkPalette@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PalAddr@HunkPalette@@QBEPAUCompPal@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqr@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
PUBLIC	??0Rgb24F@@QAE@XZ				; Rgb24F::Rgb24F
PUBLIC	??0SOLPalette@@QAE@ABVHunkPalette@@@Z		; SOLPalette::SOLPalette
PUBLIC	??4SOLPalette@@QAEAAV0@ABVHunkPalette@@@Z	; SOLPalette::operator=
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??0SOLPalette@@QAE@ABVHunkPalette@@@Z PROC NEAR		; SOLPalette::SOLPalette

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 00 00 00 00	 push	 OFFSET FLAT:??0Rgb24F@@QAE@XZ ; Rgb24F::Rgb24F
  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	6a 04		 push	 4
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EX0@Z@Z	; `vector constructor iterator'

; 24   : 	SOLPalette::operator=(src);

  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??4SOLPalette@@QAEAAV0@ABVHunkPalette@@@Z ; SOLPalette::operator=

; 25   : }

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??0SOLPalette@@QAE@ABVHunkPalette@@@Z ENDP		; SOLPalette::SOLPalette
_TEXT	ENDS
PUBLIC	??0Rgb24@@QAE@XZ				; Rgb24::Rgb24
;	COMDAT ??0Rgb24F@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Rgb24F@@QAE@XZ PROC NEAR				; Rgb24F::Rgb24F, COMDAT

; 27   : 	Rgb24F() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0Rgb24@@QAE@XZ	; Rgb24::Rgb24
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0Rgb24F@@QAE@XZ ENDP					; Rgb24F::Rgb24F
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Rgb24@@QAE@XZ PROC NEAR				; Rgb24::Rgb24, COMDAT

; 8    : 	Rgb24() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0Rgb24@@QAE@XZ ENDP					; Rgb24::Rgb24
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L54625:
  00003	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00006	83 e8 01	 sub	 eax, 1
  00009	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  0000c	83 7d 10 00	 cmp	 DWORD PTR ___n$[ebp], 0
  00010	7c 11		 jl	 SHORT $L54626
  00012	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00015	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001b	03 4d 0c	 add	 ecx, DWORD PTR ___s$[ebp]
  0001e	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
  00021	eb e0		 jmp	 SHORT $L54625
$L54626:
  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0SOLPalette@@QAE@ABV0@@Z			; SOLPalette::SOLPalette
_TEXT	SEGMENT
_src$ = 8
_this$ = -8
_i$ = -4
??0SOLPalette@@QAE@ABV0@@Z PROC NEAR			; SOLPalette::SOLPalette

; 37   : {

  00031	55		 push	 ebp
  00032	8b ec		 mov	 ebp, esp
  00034	83 ec 08	 sub	 esp, 8
  00037	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??0Rgb24F@@QAE@XZ ; Rgb24F::Rgb24F
  0003f	68 00 01 00 00	 push	 256			; 00000100H
  00044	6a 04		 push	 4
  00046	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EX0@Z@Z	; `vector constructor iterator'

; 38   : 	for (int i = 0; i < MaxColors; i++)

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00056	eb 09		 jmp	 SHORT $L54634
$L54635:
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005b	83 c1 01	 add	 ecx, 1
  0005e	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L54634:
  00061	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00068	7d 14		 jge	 SHORT $L54636

; 39   : 		colors[i] = src.colors[i];

  0006a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0006d	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00070	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00073	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00076	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00079	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  0007c	eb da		 jmp	 SHORT $L54635
$L54636:

; 40   : }

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
??0SOLPalette@@QAE@ABV0@@Z ENDP				; SOLPalette::SOLPalette
_TEXT	ENDS
PUBLIC	??0Rgb24F@@QAE@EEEE@Z				; Rgb24F::Rgb24F
PUBLIC	??0SOLPalette@@QAE@XZ				; SOLPalette::SOLPalette
_TEXT	SEGMENT
_this$ = -12
_unusedBlack$ = -8
_i$ = -4
??0SOLPalette@@QAE@XZ PROC NEAR				; SOLPalette::SOLPalette

; 53   : {

  00087	55		 push	 ebp
  00088	8b ec		 mov	 ebp, esp
  0008a	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0008d	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??0Rgb24F@@QAE@XZ ; Rgb24F::Rgb24F
  00095	68 00 01 00 00	 push	 256			; 00000100H
  0009a	6a 04		 push	 4
  0009c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EX0@Z@Z	; `vector constructor iterator'

; 54   : 	Rgb24F unusedBlack(0, 0, 0, 0);

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	8d 4d f8	 lea	 ecx, DWORD PTR _unusedBlack$[ebp]
  000b0	e8 00 00 00 00	 call	 ??0Rgb24F@@QAE@EEEE@Z	; Rgb24F::Rgb24F

; 55   : 
; 56   : 	for (int i = 0; i < MaxColors; i++)

  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000bc	eb 09		 jmp	 SHORT $L54643
$L54644:
  000be	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000c1	83 c1 01	 add	 ecx, 1
  000c4	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L54643:
  000c7	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  000ce	7d 0e		 jge	 SHORT $L54645

; 57   : 		colors[i] = unusedBlack;

  000d0	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000d3	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000d6	8b 4d f8	 mov	 ecx, DWORD PTR _unusedBlack$[ebp]
  000d9	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  000dc	eb e0		 jmp	 SHORT $L54644
$L54645:

; 58   : }

  000de	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
??0SOLPalette@@QAE@XZ ENDP				; SOLPalette::SOLPalette
_TEXT	ENDS
PUBLIC	??0Rgb24@@QAE@EEE@Z				; Rgb24::Rgb24
;	COMDAT ??0Rgb24F@@QAE@EEEE@Z
_TEXT	SEGMENT
_r$ = 8
_g$ = 12
_b$ = 16
_f$ = 20
_this$ = -4
??0Rgb24F@@QAE@EEEE@Z PROC NEAR				; Rgb24F::Rgb24F, COMDAT

; 26   : 	Rgb24F(uchar r, uchar g, uchar b, uchar f) : Rgb24(r, g, b), flag(f) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 10	 mov	 al, BYTE PTR _b$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 0c	 mov	 cl, BYTE PTR _g$[ebp]
  0000e	51		 push	 ecx
  0000f	8a 55 08	 mov	 dl, BYTE PTR _r$[ebp]
  00012	52		 push	 edx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??0Rgb24@@QAE@EEE@Z	; Rgb24::Rgb24
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8a 4d 14	 mov	 cl, BYTE PTR _f$[ebp]
  00021	88 48 03	 mov	 BYTE PTR [eax+3], cl
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 10 00	 ret	 16			; 00000010H
??0Rgb24F@@QAE@EEEE@Z ENDP				; Rgb24F::Rgb24F
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT
_r$ = 8
_g$ = 12
_b$ = 16
_this$ = -4
??0Rgb24@@QAE@EEE@Z PROC NEAR				; Rgb24::Rgb24, COMDAT

; 7    : 	Rgb24(uchar r, uchar g, uchar b) : red(r), green(g), blue(b) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 4d 08	 mov	 cl, BYTE PTR _r$[ebp]
  0000d	88 08		 mov	 BYTE PTR [eax], cl
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8a 45 0c	 mov	 al, BYTE PTR _g$[ebp]
  00015	88 42 01	 mov	 BYTE PTR [edx+1], al
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8a 55 10	 mov	 dl, BYTE PTR _b$[ebp]
  0001e	88 51 02	 mov	 BYTE PTR [ecx+2], dl
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??0Rgb24@@QAE@EEE@Z ENDP				; Rgb24::Rgb24
_TEXT	ENDS
PUBLIC	?Count@HunkPalette@@QBEHXZ			; HunkPalette::Count
PUBLIC	?PalAddr@HunkPalette@@QBEPAUCompPal@1@XZ	; HunkPalette::PalAddr
_TEXT	SEGMENT
_src$ = 8
_this$ = -40
_unusedBlack$ = -8
_i$ = -4
_rgb$54656 = -16
_pal$54657 = -20
_ptr$54658 = -12
_end$54662 = -24
_i$54663 = -28
_end$54668 = -32
_i$54669 = -36
??4SOLPalette@@QAEAAV0@ABVHunkPalette@@@Z PROC NEAR	; SOLPalette::operator=

; 73   : {

  000e5	55		 push	 ebp
  000e6	8b ec		 mov	 ebp, esp
  000e8	83 ec 28	 sub	 esp, 40			; 00000028H
  000eb	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	Rgb24F unusedBlack(0, 0, 0, 0);

  000ee	6a 00		 push	 0
  000f0	6a 00		 push	 0
  000f2	6a 00		 push	 0
  000f4	6a 00		 push	 0
  000f6	8d 4d f8	 lea	 ecx, DWORD PTR _unusedBlack$[ebp]
  000f9	e8 00 00 00 00	 call	 ??0Rgb24F@@QAE@EEEE@Z	; Rgb24F::Rgb24F

; 75   : 
; 76   : 	for (int i = 0; i < MaxColors; i++)

  000fe	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00105	eb 09		 jmp	 SHORT $L54652
$L54653:
  00107	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0010a	83 c0 01	 add	 eax, 1
  0010d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L54652:
  00110	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00117	7d 0e		 jge	 SHORT $L54654

; 77   : 		colors[i] = unusedBlack;

  00119	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0011c	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	8b 45 f8	 mov	 eax, DWORD PTR _unusedBlack$[ebp]
  00122	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  00125	eb e0		 jmp	 SHORT $L54653
$L54654:

; 78   : 
; 79   : 	if (src.Count())  {

  00127	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0012a	e8 00 00 00 00	 call	 ?Count@HunkPalette@@QBEHXZ ; HunkPalette::Count
  0012f	85 c0		 test	 eax, eax
  00131	0f 84 32 01 00
	00		 je	 $L54672

; 80   : 		Rgb24F rgb;

  00137	8d 4d f0	 lea	 ecx, DWORD PTR _rgb$54656[ebp]
  0013a	e8 00 00 00 00	 call	 ??0Rgb24F@@QAE@XZ	; Rgb24F::Rgb24F

; 81   : 		HunkPalette::CompPal* pal = src.PalAddr();

  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  00142	e8 00 00 00 00	 call	 ?PalAddr@HunkPalette@@QBEPAUCompPal@1@XZ ; HunkPalette::PalAddr
  00147	89 45 ec	 mov	 DWORD PTR _pal$54657[ebp], eax

; 82   : 		uchar* ptr = ((uchar*) pal) + sizeof(HunkPalette::CompPal);

  0014a	8b 4d ec	 mov	 ecx, DWORD PTR _pal$54657[ebp]
  0014d	83 c1 16	 add	 ecx, 22			; 00000016H
  00150	89 4d f4	 mov	 DWORD PTR _ptr$54658[ebp], ecx

; 83   : 
; 84   : 		if (!pal->type)  {

  00153	8b 55 ec	 mov	 edx, DWORD PTR _pal$54657[ebp]
  00156	33 c0		 xor	 eax, eax
  00158	8a 42 11	 mov	 al, BYTE PTR [edx+17]
  0015b	85 c0		 test	 eax, eax
  0015d	0f 85 88 00 00
	00		 jne	 $L54661

; 85   : 			int end = pal->startOffset + pal->nColors;

  00163	8b 4d ec	 mov	 ecx, DWORD PTR _pal$54657[ebp]
  00166	33 d2		 xor	 edx, edx
  00168	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  0016b	8b 45 ec	 mov	 eax, DWORD PTR _pal$54657[ebp]
  0016e	33 c9		 xor	 ecx, ecx
  00170	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  00174	03 d1		 add	 edx, ecx
  00176	89 55 e8	 mov	 DWORD PTR _end$54662[ebp], edx

; 86   : 			for (int i = pal->startOffset; i < end; i++)  {

  00179	8b 55 ec	 mov	 edx, DWORD PTR _pal$54657[ebp]
  0017c	33 c0		 xor	 eax, eax
  0017e	8a 42 0a	 mov	 al, BYTE PTR [edx+10]
  00181	89 45 e4	 mov	 DWORD PTR _i$54663[ebp], eax
  00184	eb 09		 jmp	 SHORT $L54664
$L54665:
  00186	8b 4d e4	 mov	 ecx, DWORD PTR _i$54663[ebp]
  00189	83 c1 01	 add	 ecx, 1
  0018c	89 4d e4	 mov	 DWORD PTR _i$54663[ebp], ecx
$L54664:
  0018f	8b 55 e4	 mov	 edx, DWORD PTR _i$54663[ebp]
  00192	3b 55 e8	 cmp	 edx, DWORD PTR _end$54662[ebp]
  00195	7d 52		 jge	 SHORT $L54666

; 87   : 				rgb.flag = *ptr++;

  00197	8b 45 f4	 mov	 eax, DWORD PTR _ptr$54658[ebp]
  0019a	8a 08		 mov	 cl, BYTE PTR [eax]
  0019c	88 4d f3	 mov	 BYTE PTR _rgb$54656[ebp+3], cl
  0019f	8b 55 f4	 mov	 edx, DWORD PTR _ptr$54658[ebp]
  001a2	83 c2 01	 add	 edx, 1
  001a5	89 55 f4	 mov	 DWORD PTR _ptr$54658[ebp], edx

; 88   : 				rgb.red = *ptr++;

  001a8	8b 45 f4	 mov	 eax, DWORD PTR _ptr$54658[ebp]
  001ab	8a 08		 mov	 cl, BYTE PTR [eax]
  001ad	88 4d f0	 mov	 BYTE PTR _rgb$54656[ebp], cl
  001b0	8b 55 f4	 mov	 edx, DWORD PTR _ptr$54658[ebp]
  001b3	83 c2 01	 add	 edx, 1
  001b6	89 55 f4	 mov	 DWORD PTR _ptr$54658[ebp], edx

; 89   : 				rgb.green = *ptr++;

  001b9	8b 45 f4	 mov	 eax, DWORD PTR _ptr$54658[ebp]
  001bc	8a 08		 mov	 cl, BYTE PTR [eax]
  001be	88 4d f1	 mov	 BYTE PTR _rgb$54656[ebp+1], cl
  001c1	8b 55 f4	 mov	 edx, DWORD PTR _ptr$54658[ebp]
  001c4	83 c2 01	 add	 edx, 1
  001c7	89 55 f4	 mov	 DWORD PTR _ptr$54658[ebp], edx

; 90   : 				rgb.blue = *ptr++;

  001ca	8b 45 f4	 mov	 eax, DWORD PTR _ptr$54658[ebp]
  001cd	8a 08		 mov	 cl, BYTE PTR [eax]
  001cf	88 4d f2	 mov	 BYTE PTR _rgb$54656[ebp+2], cl
  001d2	8b 55 f4	 mov	 edx, DWORD PTR _ptr$54658[ebp]
  001d5	83 c2 01	 add	 edx, 1
  001d8	89 55 f4	 mov	 DWORD PTR _ptr$54658[ebp], edx

; 91   : 				colors[i] = rgb;

  001db	8b 45 e4	 mov	 eax, DWORD PTR _i$54663[ebp]
  001de	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e1	8b 55 f0	 mov	 edx, DWORD PTR _rgb$54656[ebp]
  001e4	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 92   : 			}

  001e7	eb 9d		 jmp	 SHORT $L54665
$L54666:

; 94   : 		else  {

  001e9	eb 7e		 jmp	 SHORT $L54672
$L54661:

; 95   : 			rgb.flag = pal->def;

  001eb	8b 45 ec	 mov	 eax, DWORD PTR _pal$54657[ebp]
  001ee	8a 48 10	 mov	 cl, BYTE PTR [eax+16]
  001f1	88 4d f3	 mov	 BYTE PTR _rgb$54656[ebp+3], cl

; 96   : 			int end = pal->startOffset + pal->nColors;

  001f4	8b 55 ec	 mov	 edx, DWORD PTR _pal$54657[ebp]
  001f7	33 c0		 xor	 eax, eax
  001f9	8a 42 0a	 mov	 al, BYTE PTR [edx+10]
  001fc	8b 4d ec	 mov	 ecx, DWORD PTR _pal$54657[ebp]
  001ff	33 d2		 xor	 edx, edx
  00201	66 8b 51 0e	 mov	 dx, WORD PTR [ecx+14]
  00205	03 c2		 add	 eax, edx
  00207	89 45 e0	 mov	 DWORD PTR _end$54668[ebp], eax

; 97   : 			for (int i = pal->startOffset; i < end; i++)  {

  0020a	8b 45 ec	 mov	 eax, DWORD PTR _pal$54657[ebp]
  0020d	33 c9		 xor	 ecx, ecx
  0020f	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  00212	89 4d dc	 mov	 DWORD PTR _i$54669[ebp], ecx
  00215	eb 09		 jmp	 SHORT $L54670
$L54671:
  00217	8b 55 dc	 mov	 edx, DWORD PTR _i$54669[ebp]
  0021a	83 c2 01	 add	 edx, 1
  0021d	89 55 dc	 mov	 DWORD PTR _i$54669[ebp], edx
$L54670:
  00220	8b 45 dc	 mov	 eax, DWORD PTR _i$54669[ebp]
  00223	3b 45 e0	 cmp	 eax, DWORD PTR _end$54668[ebp]
  00226	7d 41		 jge	 SHORT $L54672

; 98   : 				rgb.red = *ptr++;

  00228	8b 4d f4	 mov	 ecx, DWORD PTR _ptr$54658[ebp]
  0022b	8a 11		 mov	 dl, BYTE PTR [ecx]
  0022d	88 55 f0	 mov	 BYTE PTR _rgb$54656[ebp], dl
  00230	8b 45 f4	 mov	 eax, DWORD PTR _ptr$54658[ebp]
  00233	83 c0 01	 add	 eax, 1
  00236	89 45 f4	 mov	 DWORD PTR _ptr$54658[ebp], eax

; 99   : 				rgb.green = *ptr++;

  00239	8b 4d f4	 mov	 ecx, DWORD PTR _ptr$54658[ebp]
  0023c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0023e	88 55 f1	 mov	 BYTE PTR _rgb$54656[ebp+1], dl
  00241	8b 45 f4	 mov	 eax, DWORD PTR _ptr$54658[ebp]
  00244	83 c0 01	 add	 eax, 1
  00247	89 45 f4	 mov	 DWORD PTR _ptr$54658[ebp], eax

; 100  : 				rgb.blue = *ptr++;

  0024a	8b 4d f4	 mov	 ecx, DWORD PTR _ptr$54658[ebp]
  0024d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0024f	88 55 f2	 mov	 BYTE PTR _rgb$54656[ebp+2], dl
  00252	8b 45 f4	 mov	 eax, DWORD PTR _ptr$54658[ebp]
  00255	83 c0 01	 add	 eax, 1
  00258	89 45 f4	 mov	 DWORD PTR _ptr$54658[ebp], eax

; 101  : 				colors[i] = rgb;

  0025b	8b 4d dc	 mov	 ecx, DWORD PTR _i$54669[ebp]
  0025e	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00261	8b 45 f0	 mov	 eax, DWORD PTR _rgb$54656[ebp]
  00264	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 102  : 			}

  00267	eb ae		 jmp	 SHORT $L54671
$L54672:

; 105  : 	return *this;

  00269	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]

; 106  : }

  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c2 04 00	 ret	 4
??4SOLPalette@@QAEAAV0@ABVHunkPalette@@@Z ENDP		; SOLPalette::operator=
_TEXT	ENDS
;	COMDAT ?Count@HunkPalette@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Count@HunkPalette@@QBEHXZ PROC NEAR			; HunkPalette::Count, COMDAT

; 59   : 	int		Count() const						{return count;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Count@HunkPalette@@QBEHXZ ENDP				; HunkPalette::Count
_TEXT	ENDS
;	COMDAT ?PalAddr@HunkPalette@@QBEPAUCompPal@1@XZ
_TEXT	SEGMENT
_this$ = -4
?PalAddr@HunkPalette@@QBEPAUCompPal@1@XZ PROC NEAR	; HunkPalette::PalAddr, COMDAT

; 101  : 	CompPal*	PalAddr() const					{return (CompPal*) ((uchar*) palInHunk + (sizeof(PalHeader) + (2 * count)));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00010	8b 02		 mov	 eax, DWORD PTR [edx]
  00012	8d 44 48 0d	 lea	 eax, DWORD PTR [eax+ecx*2+13]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?PalAddr@HunkPalette@@QBEPAUCompPal@1@XZ ENDP		; HunkPalette::PalAddr
_TEXT	ENDS
PUBLIC	??4SOLPalette@@QAEAAV0@ABV0@@Z			; SOLPalette::operator=
_TEXT	SEGMENT
_src$ = 8
_this$ = -8
_i$ = -4
??4SOLPalette@@QAEAAV0@ABV0@@Z PROC NEAR		; SOLPalette::operator=

; 120  : {

  00272	55		 push	 ebp
  00273	8b ec		 mov	 ebp, esp
  00275	83 ec 08	 sub	 esp, 8
  00278	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 	for (int i = 0; i < MaxColors; i++)

  0027b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00282	eb 09		 jmp	 SHORT $L54678
$L54679:
  00284	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00287	83 c0 01	 add	 eax, 1
  0028a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L54678:
  0028d	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00294	7d 14		 jge	 SHORT $L54680

; 122  : 		colors[i] = src.colors[i];

  00296	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00299	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  0029c	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0029f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002a2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002a5	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  002a8	eb da		 jmp	 SHORT $L54679
$L54680:

; 123  : 	return *this;

  002aa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 124  : }

  002ad	8b e5		 mov	 esp, ebp
  002af	5d		 pop	 ebp
  002b0	c2 04 00	 ret	 4
??4SOLPalette@@QAEAAV0@ABV0@@Z ENDP			; SOLPalette::operator=
_TEXT	ENDS
PUBLIC	??9Rgb24F@@QBEHABV0@@Z				; Rgb24F::operator!=
PUBLIC	??8SOLPalette@@QBEHABV0@@Z			; SOLPalette::operator==
_TEXT	SEGMENT
_src$ = 8
_this$ = -8
_i$ = -4
??8SOLPalette@@QBEHABV0@@Z PROC NEAR			; SOLPalette::operator==

; 137  : {

  002b3	55		 push	 ebp
  002b4	8b ec		 mov	 ebp, esp
  002b6	83 ec 08	 sub	 esp, 8
  002b9	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 138  : 	int i;
; 139  : 	for (i = 0; i < MaxColors; i++)

  002bc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002c3	eb 09		 jmp	 SHORT $L54686
$L54687:
  002c5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002c8	83 c0 01	 add	 eax, 1
  002cb	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L54686:
  002ce	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  002d5	7d 20		 jge	 SHORT $L54688

; 140  : 		if (colors[i] != src.colors[i])

  002d7	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002da	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  002dd	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  002e0	50		 push	 eax
  002e1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002e4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002e7	8d 0c 8a	 lea	 ecx, DWORD PTR [edx+ecx*4]
  002ea	e8 00 00 00 00	 call	 ??9Rgb24F@@QBEHABV0@@Z	; Rgb24F::operator!=
  002ef	85 c0		 test	 eax, eax
  002f1	74 02		 je	 SHORT $L54689

; 141  : 			break;

  002f3	eb 02		 jmp	 SHORT $L54688
$L54689:

; 142  : 
; 143  : 	if (i == MaxColors)

  002f5	eb ce		 jmp	 SHORT $L54687
$L54688:
  002f7	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  002fe	75 07		 jne	 SHORT $L54690

; 144  : 		return True;

  00300	b8 01 00 00 00	 mov	 eax, 1
  00305	eb 02		 jmp	 SHORT $L54684
$L54690:

; 145  : 	return False;

  00307	33 c0		 xor	 eax, eax
$L54684:

; 146  : }

  00309	8b e5		 mov	 esp, ebp
  0030b	5d		 pop	 ebp
  0030c	c2 04 00	 ret	 4
??8SOLPalette@@QBEHABV0@@Z ENDP				; SOLPalette::operator==
_TEXT	ENDS
PUBLIC	??8Rgb24F@@QBEHABV0@@Z				; Rgb24F::operator==
;	COMDAT ??9Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??9Rgb24F@@QBEHABV0@@Z PROC NEAR			; Rgb24F::operator!=, COMDAT

; 30   : 	int	operator!=(const Rgb24F& src) const		{return !operator==(src);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??8Rgb24F@@QBEHABV0@@Z	; Rgb24F::operator==
  00013	f7 d8		 neg	 eax
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??9Rgb24F@@QBEHABV0@@Z ENDP				; Rgb24F::operator!=
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??8Rgb24F@@QBEHABV0@@Z PROC NEAR			; Rgb24F::operator==, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	if (flag != src.flag)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00012	33 c0		 xor	 eax, eax
  00014	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00017	3b c8		 cmp	 ecx, eax
  00019	74 04		 je	 SHORT $L54075

; 43   : 		return False;

  0001b	33 c0		 xor	 eax, eax
  0001d	eb 43		 jmp	 SHORT $L54074
$L54075:

; 44   : 	if (red == src.red  &&  green == src.green  &&  blue == src.blue)

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	33 d2		 xor	 edx, edx
  00024	8a 11		 mov	 dl, BYTE PTR [ecx]
  00026	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00029	33 c9		 xor	 ecx, ecx
  0002b	8a 08		 mov	 cl, BYTE PTR [eax]
  0002d	3b d1		 cmp	 edx, ecx
  0002f	75 2f		 jne	 SHORT $L54076
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	33 c0		 xor	 eax, eax
  00036	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0003c	33 d2		 xor	 edx, edx
  0003e	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00041	3b c2		 cmp	 eax, edx
  00043	75 1b		 jne	 SHORT $L54076
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	33 c9		 xor	 ecx, ecx
  0004a	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00050	33 c0		 xor	 eax, eax
  00052	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00055	3b c8		 cmp	 ecx, eax
  00057	75 07		 jne	 SHORT $L54076

; 45   : 		return True;

  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	eb 02		 jmp	 SHORT $L54074
$L54076:

; 46   : 	return False;

  00060	33 c0		 xor	 eax, eax
$L54074:

; 47   : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
??8Rgb24F@@QBEHABV0@@Z ENDP				; Rgb24F::operator==
_TEXT	ENDS
PUBLIC	?sqr@@YAHH@Z					; sqr
PUBLIC	?Match@SOLPalette@@QBEHABVRgb24@@@Z		; SOLPalette::Match
_TEXT	SEGMENT
_rgb$ = 8
_this$ = -32
_diff$ = -4
_index$ = -28
_current$ = -8
_red$ = -12
_green$ = -20
_blue$ = -24
_i$ = -16
?Match@SOLPalette@@QBEHABVRgb24@@@Z PROC NEAR		; SOLPalette::Match

; 151  : {

  0030f	55		 push	 ebp
  00310	8b ec		 mov	 ebp, esp
  00312	83 ec 20	 sub	 esp, 32			; 00000020H
  00315	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 152  : 	int diff = 0xfffff;

  00318	c7 45 fc ff ff
	0f 00		 mov	 DWORD PTR _diff$[ebp], 1048575 ; 000fffffH

; 153  : 	int index = 0;

  0031f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0

; 154  : 	int current;
; 155  : 	int red = rgb.red;

  00326	8b 45 08	 mov	 eax, DWORD PTR _rgb$[ebp]
  00329	33 c9		 xor	 ecx, ecx
  0032b	8a 08		 mov	 cl, BYTE PTR [eax]
  0032d	89 4d f4	 mov	 DWORD PTR _red$[ebp], ecx

; 156  : 	int green = rgb.green;

  00330	8b 55 08	 mov	 edx, DWORD PTR _rgb$[ebp]
  00333	33 c0		 xor	 eax, eax
  00335	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00338	89 45 ec	 mov	 DWORD PTR _green$[ebp], eax

; 157  : 	int blue = rgb.blue;

  0033b	8b 4d 08	 mov	 ecx, DWORD PTR _rgb$[ebp]
  0033e	33 d2		 xor	 edx, edx
  00340	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00343	89 55 e8	 mov	 DWORD PTR _blue$[ebp], edx

; 158  : 
; 159  : 	//  Doesn't match to cycling colors
; 160  : 	for (int i = 0; i < 236; i++) {

  00346	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0034d	eb 09		 jmp	 SHORT $L54702
$L54703:
  0034f	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00352	83 c0 01	 add	 eax, 1
  00355	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L54702:
  00358	81 7d f0 ec 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 236	; 000000ecH
  0035f	0f 8d 83 00 00
	00		 jge	 $L54704

; 161  : 		current = sqr((int)(colors[i].red) - red);

  00365	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00368	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0036b	33 c0		 xor	 eax, eax
  0036d	8a 04 8a	 mov	 al, BYTE PTR [edx+ecx*4]
  00370	2b 45 f4	 sub	 eax, DWORD PTR _red$[ebp]
  00373	50		 push	 eax
  00374	e8 00 00 00 00	 call	 ?sqr@@YAHH@Z		; sqr
  00379	83 c4 04	 add	 esp, 4
  0037c	89 45 f8	 mov	 DWORD PTR _current$[ebp], eax

; 162  : 		if (diff > current) {

  0037f	8b 4d fc	 mov	 ecx, DWORD PTR _diff$[ebp]
  00382	3b 4d f8	 cmp	 ecx, DWORD PTR _current$[ebp]
  00385	7e 5c		 jle	 SHORT $L54710

; 163  : 			current += sqr((int)(colors[i].green) - green);

  00387	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0038a	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0038d	33 c9		 xor	 ecx, ecx
  0038f	8a 4c 90 01	 mov	 cl, BYTE PTR [eax+edx*4+1]
  00393	2b 4d ec	 sub	 ecx, DWORD PTR _green$[ebp]
  00396	51		 push	 ecx
  00397	e8 00 00 00 00	 call	 ?sqr@@YAHH@Z		; sqr
  0039c	83 c4 04	 add	 esp, 4
  0039f	8b 55 f8	 mov	 edx, DWORD PTR _current$[ebp]
  003a2	03 d0		 add	 edx, eax
  003a4	89 55 f8	 mov	 DWORD PTR _current$[ebp], edx

; 164  : 			if (diff > current) {

  003a7	8b 45 fc	 mov	 eax, DWORD PTR _diff$[ebp]
  003aa	3b 45 f8	 cmp	 eax, DWORD PTR _current$[ebp]
  003ad	7e 34		 jle	 SHORT $L54710

; 165  : 				current += sqr((int)(colors[i].blue) - blue);

  003af	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  003b2	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  003b5	33 c0		 xor	 eax, eax
  003b7	8a 44 8a 02	 mov	 al, BYTE PTR [edx+ecx*4+2]
  003bb	2b 45 e8	 sub	 eax, DWORD PTR _blue$[ebp]
  003be	50		 push	 eax
  003bf	e8 00 00 00 00	 call	 ?sqr@@YAHH@Z		; sqr
  003c4	83 c4 04	 add	 esp, 4
  003c7	8b 4d f8	 mov	 ecx, DWORD PTR _current$[ebp]
  003ca	03 c8		 add	 ecx, eax
  003cc	89 4d f8	 mov	 DWORD PTR _current$[ebp], ecx

; 166  : 				if (diff > current) {

  003cf	8b 55 fc	 mov	 edx, DWORD PTR _diff$[ebp]
  003d2	3b 55 f8	 cmp	 edx, DWORD PTR _current$[ebp]
  003d5	7e 0c		 jle	 SHORT $L54710

; 167  : 					diff = current;

  003d7	8b 45 f8	 mov	 eax, DWORD PTR _current$[ebp]
  003da	89 45 fc	 mov	 DWORD PTR _diff$[ebp], eax

; 168  : 					index = i;

  003dd	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  003e0	89 4d e4	 mov	 DWORD PTR _index$[ebp], ecx
$L54710:

; 172  : 	}

  003e3	e9 67 ff ff ff	 jmp	 $L54703
$L54704:

; 173  : 	return index;

  003e8	8b 45 e4	 mov	 eax, DWORD PTR _index$[ebp]

; 174  : }

  003eb	8b e5		 mov	 esp, ebp
  003ed	5d		 pop	 ebp
  003ee	c2 04 00	 ret	 4
?Match@SOLPalette@@QBEHABVRgb24@@@Z ENDP		; SOLPalette::Match
_TEXT	ENDS
;	COMDAT ?sqr@@YAHH@Z
_TEXT	SEGMENT
_i$ = 8
?sqr@@YAHH@Z PROC NEAR					; sqr, COMDAT

; 13   : inline int sqr(int i) {return i * i;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00006	0f af 45 08	 imul	 eax, DWORD PTR _i$[ebp]
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
?sqr@@YAHH@Z ENDP					; sqr
_TEXT	ENDS
PUBLIC	?Match@SOLPalette@@QBEHABVRgb24@@HPAHPBE@Z	; SOLPalette::Match
_TEXT	SEGMENT
_rgb$ = 8
_mindist$ = 12
_finalDist$ = 16
_forbidden$ = 20
_this$ = -32
_diff$ = -4
_index$ = -28
_current$ = -8
_red$ = -12
_green$ = -20
_blue$ = -24
_i$ = -16
?Match@SOLPalette@@QBEHABVRgb24@@HPAHPBE@Z PROC NEAR	; SOLPalette::Match

; 178  : {

  003f1	55		 push	 ebp
  003f2	8b ec		 mov	 ebp, esp
  003f4	83 ec 20	 sub	 esp, 32			; 00000020H
  003f7	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 179  : 	int diff = 0xfffff;

  003fa	c7 45 fc ff ff
	0f 00		 mov	 DWORD PTR _diff$[ebp], 1048575 ; 000fffffH

; 180  : 	int index = -1;

  00401	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _index$[ebp], -1

; 181  : 	int current = mindist;

  00408	8b 45 0c	 mov	 eax, DWORD PTR _mindist$[ebp]
  0040b	89 45 f8	 mov	 DWORD PTR _current$[ebp], eax

; 182  : 	int red = rgb.red;

  0040e	8b 4d 08	 mov	 ecx, DWORD PTR _rgb$[ebp]
  00411	33 d2		 xor	 edx, edx
  00413	8a 11		 mov	 dl, BYTE PTR [ecx]
  00415	89 55 f4	 mov	 DWORD PTR _red$[ebp], edx

; 183  : 	int green = rgb.green;

  00418	8b 45 08	 mov	 eax, DWORD PTR _rgb$[ebp]
  0041b	33 c9		 xor	 ecx, ecx
  0041d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00420	89 4d ec	 mov	 DWORD PTR _green$[ebp], ecx

; 184  : 	int blue = rgb.blue;

  00423	8b 55 08	 mov	 edx, DWORD PTR _rgb$[ebp]
  00426	33 c0		 xor	 eax, eax
  00428	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  0042b	89 45 e8	 mov	 DWORD PTR _blue$[ebp], eax

; 185  : 
; 186  : 	for (int i = 0; i < 236; i++) {

  0042e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00435	eb 09		 jmp	 SHORT $L54725
$L54726:
  00437	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  0043a	83 c1 01	 add	 ecx, 1
  0043d	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$L54725:
  00440	81 7d f0 ec 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 236	; 000000ecH
  00447	0f 8d 91 00 00
	00		 jge	 $L54727

; 187  : 		if (!forbidden[i])  {   

  0044d	8b 55 14	 mov	 edx, DWORD PTR _forbidden$[ebp]
  00450	03 55 f0	 add	 edx, DWORD PTR _i$[ebp]
  00453	33 c0		 xor	 eax, eax
  00455	8a 02		 mov	 al, BYTE PTR [edx]
  00457	85 c0		 test	 eax, eax
  00459	75 7e		 jne	 SHORT $L54734

; 188  : 			current = sqr((int)(colors[i].red) - red);

  0045b	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  0045e	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00461	33 c0		 xor	 eax, eax
  00463	8a 04 8a	 mov	 al, BYTE PTR [edx+ecx*4]
  00466	2b 45 f4	 sub	 eax, DWORD PTR _red$[ebp]
  00469	50		 push	 eax
  0046a	e8 00 00 00 00	 call	 ?sqr@@YAHH@Z		; sqr
  0046f	83 c4 04	 add	 esp, 4
  00472	89 45 f8	 mov	 DWORD PTR _current$[ebp], eax

; 189  : 			if (diff > current)  {

  00475	8b 4d fc	 mov	 ecx, DWORD PTR _diff$[ebp]
  00478	3b 4d f8	 cmp	 ecx, DWORD PTR _current$[ebp]
  0047b	7e 5c		 jle	 SHORT $L54734

; 190  : 				current += sqr((int)(colors[i].green) - green);

  0047d	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00480	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00483	33 c9		 xor	 ecx, ecx
  00485	8a 4c 90 01	 mov	 cl, BYTE PTR [eax+edx*4+1]
  00489	2b 4d ec	 sub	 ecx, DWORD PTR _green$[ebp]
  0048c	51		 push	 ecx
  0048d	e8 00 00 00 00	 call	 ?sqr@@YAHH@Z		; sqr
  00492	83 c4 04	 add	 esp, 4
  00495	8b 55 f8	 mov	 edx, DWORD PTR _current$[ebp]
  00498	03 d0		 add	 edx, eax
  0049a	89 55 f8	 mov	 DWORD PTR _current$[ebp], edx

; 191  : 				if (diff > current)  {

  0049d	8b 45 fc	 mov	 eax, DWORD PTR _diff$[ebp]
  004a0	3b 45 f8	 cmp	 eax, DWORD PTR _current$[ebp]
  004a3	7e 34		 jle	 SHORT $L54734

; 192  : 					current += sqr((int)(colors[i].blue) - blue);

  004a5	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  004a8	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  004ab	33 c0		 xor	 eax, eax
  004ad	8a 44 8a 02	 mov	 al, BYTE PTR [edx+ecx*4+2]
  004b1	2b 45 e8	 sub	 eax, DWORD PTR _blue$[ebp]
  004b4	50		 push	 eax
  004b5	e8 00 00 00 00	 call	 ?sqr@@YAHH@Z		; sqr
  004ba	83 c4 04	 add	 esp, 4
  004bd	8b 4d f8	 mov	 ecx, DWORD PTR _current$[ebp]
  004c0	03 c8		 add	 ecx, eax
  004c2	89 4d f8	 mov	 DWORD PTR _current$[ebp], ecx

; 193  : 					if (diff > current)  {

  004c5	8b 55 fc	 mov	 edx, DWORD PTR _diff$[ebp]
  004c8	3b 55 f8	 cmp	 edx, DWORD PTR _current$[ebp]
  004cb	7e 0c		 jle	 SHORT $L54734

; 194  : 						diff = current;

  004cd	8b 45 f8	 mov	 eax, DWORD PTR _current$[ebp]
  004d0	89 45 fc	 mov	 DWORD PTR _diff$[ebp], eax

; 195  : 						index = i;

  004d3	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  004d6	89 4d e4	 mov	 DWORD PTR _index$[ebp], ecx
$L54734:

; 200  : 	}

  004d9	e9 59 ff ff ff	 jmp	 $L54726
$L54727:

; 201  : 
; 202  : 	*finalDist = current;

  004de	8b 55 10	 mov	 edx, DWORD PTR _finalDist$[ebp]
  004e1	8b 45 f8	 mov	 eax, DWORD PTR _current$[ebp]
  004e4	89 02		 mov	 DWORD PTR [edx], eax

; 203  : 	return index;

  004e6	8b 45 e4	 mov	 eax, DWORD PTR _index$[ebp]

; 204  : }

  004e9	8b e5		 mov	 esp, ebp
  004eb	5d		 pop	 ebp
  004ec	c2 10 00	 ret	 16			; 00000010H
?Match@SOLPalette@@QBEHABVRgb24@@HPAHPBE@Z ENDP		; SOLPalette::Match
_TEXT	ENDS
PUBLIC	?Compare@SOLPalette@@QBEHABV1@PAE@Z		; SOLPalette::Compare
_TEXT	SEGMENT
_src$ = 8
_diff$ = 12
_this$ = -12
_retVal$ = -8
_i$ = -4
?Compare@SOLPalette@@QBEHABV1@PAE@Z PROC NEAR		; SOLPalette::Compare

; 209  : {

  004ef	55		 push	 ebp
  004f0	8b ec		 mov	 ebp, esp
  004f2	83 ec 0c	 sub	 esp, 12			; 0000000cH
  004f5	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 210  : 	int retVal = True;

  004f8	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 1

; 211  : 
; 212  : 	for (int i = 0; i < MaxColors; i++) {

  004ff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00506	eb 09		 jmp	 SHORT $L54742
$L54743:
  00508	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0050b	83 c0 01	 add	 eax, 1
  0050e	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L54742:
  00511	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00518	7d 45		 jge	 SHORT $L54744

; 213  : 		if (colors[i] != src.colors[i]) {

  0051a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0051d	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00520	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00523	50		 push	 eax
  00524	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00527	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0052a	8d 0c 8a	 lea	 ecx, DWORD PTR [edx+ecx*4]
  0052d	e8 00 00 00 00	 call	 ??9Rgb24F@@QBEHABV0@@Z	; Rgb24F::operator!=
  00532	85 c0		 test	 eax, eax
  00534	74 18		 je	 SHORT $L54745

; 214  : 			*diff++ = 1;

  00536	8b 45 0c	 mov	 eax, DWORD PTR _diff$[ebp]
  00539	c6 00 01	 mov	 BYTE PTR [eax], 1
  0053c	8b 4d 0c	 mov	 ecx, DWORD PTR _diff$[ebp]
  0053f	83 c1 01	 add	 ecx, 1
  00542	89 4d 0c	 mov	 DWORD PTR _diff$[ebp], ecx

; 215  :          retVal = False;

  00545	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 0

; 216  : 		} else

  0054c	eb 0f		 jmp	 SHORT $L54746
$L54745:

; 217  :       	*diff++ = 0;

  0054e	8b 55 0c	 mov	 edx, DWORD PTR _diff$[ebp]
  00551	c6 02 00	 mov	 BYTE PTR [edx], 0
  00554	8b 45 0c	 mov	 eax, DWORD PTR _diff$[ebp]
  00557	83 c0 01	 add	 eax, 1
  0055a	89 45 0c	 mov	 DWORD PTR _diff$[ebp], eax
$L54746:

; 218  :    }

  0055d	eb a9		 jmp	 SHORT $L54743
$L54744:

; 219  : 
; 220  : 	return retVal;

  0055f	8b 45 f8	 mov	 eax, DWORD PTR _retVal$[ebp]

; 221  : }

  00562	8b e5		 mov	 esp, ebp
  00564	5d		 pop	 ebp
  00565	c2 08 00	 ret	 8
?Compare@SOLPalette@@QBEHABV1@PAE@Z ENDP		; SOLPalette::Compare
_TEXT	ENDS
PUBLIC	?Merge@SOLPalette@@QAEXABV1@@Z			; SOLPalette::Merge
_TEXT	SEGMENT
_src$ = 8
_this$ = -8
_i$ = -4
?Merge@SOLPalette@@QAEXABV1@@Z PROC NEAR		; SOLPalette::Merge

; 234  : {

  00568	55		 push	 ebp
  00569	8b ec		 mov	 ebp, esp
  0056b	83 ec 08	 sub	 esp, 8
  0056e	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 	for (int i = 0; i < MaxColors; i++)

  00571	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00578	eb 09		 jmp	 SHORT $L54752
$L54753:
  0057a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0057d	83 c0 01	 add	 eax, 1
  00580	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L54752:
  00583	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0058a	7d 24		 jge	 SHORT $L54754

; 236  : 		if (src.colors[i].flag)

  0058c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0058f	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00592	33 c0		 xor	 eax, eax
  00594	8a 44 8a 03	 mov	 al, BYTE PTR [edx+ecx*4+3]
  00598	85 c0		 test	 eax, eax
  0059a	74 12		 je	 SHORT $L54755

; 237  : 			colors[i] = src.colors[i];

  0059c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0059f	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  005a2	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  005a5	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  005a8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005ab	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
$L54755:

; 238  : }

  005ae	eb ca		 jmp	 SHORT $L54753
$L54754:
  005b0	8b e5		 mov	 esp, ebp
  005b2	5d		 pop	 ebp
  005b3	c2 04 00	 ret	 4
?Merge@SOLPalette@@QAEXABV1@@Z ENDP			; SOLPalette::Merge
_TEXT	ENDS
PUBLIC	?Init@HunkPalette@@QAEXPAX@Z			; HunkPalette::Init
_TEXT	SEGMENT
_src1$ = 8
_this$ = -8
_src$ = -4
?Init@HunkPalette@@QAEXPAX@Z PROC NEAR			; HunkPalette::Init

; 243  : {

  005b6	55		 push	 ebp
  005b7	8b ec		 mov	 ebp, esp
  005b9	83 ec 08	 sub	 esp, 8
  005bc	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 244  : 	PalHeader* src = (PalHeader*) src1;

  005bf	8b 45 08	 mov	 eax, DWORD PTR _src1$[ebp]
  005c2	89 45 fc	 mov	 DWORD PTR _src$[ebp], eax

; 245  : 	palInHunk = NULL;

  005c5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005c8	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 246  : 	version = 0;

  005ce	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005d1	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 247  : 	count = src->palCount;

  005d8	8b 45 fc	 mov	 eax, DWORD PTR _src$[ebp]
  005db	0f be 48 0a	 movsx	 ecx, BYTE PTR [eax+10]
  005df	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005e2	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 248  : 
; 249  : 	if (count)  {

  005e5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005e8	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  005ec	74 19		 je	 SHORT $L54762

; 250  : 		palInHunk = src;

  005ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005f1	8b 55 fc	 mov	 edx, DWORD PTR _src$[ebp]
  005f4	89 11		 mov	 DWORD PTR [ecx], edx

; 251  : 		version = PalAddr()->valid;

  005f6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005f9	e8 00 00 00 00	 call	 ?PalAddr@HunkPalette@@QBEPAUCompPal@1@XZ ; HunkPalette::PalAddr
  005fe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00601	8b 50 12	 mov	 edx, DWORD PTR [eax+18]
  00604	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$L54762:

; 253  : }

  00607	8b e5		 mov	 esp, ebp
  00609	5d		 pop	 ebp
  0060a	c2 04 00	 ret	 4
?Init@HunkPalette@@QAEXPAX@Z ENDP			; HunkPalette::Init
_TEXT	ENDS
PUBLIC	?SetVersion@HunkPalette@@QAEXH@Z		; HunkPalette::SetVersion
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
$SG54768 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Pale'
	DB	'tte.cpp', 00H
$SG54772 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Pale'
	DB	'tte.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_ver$ = 8
_this$ = -8
_pal$54770 = -4
?SetVersion@HunkPalette@@QAEXH@Z PROC NEAR		; HunkPalette::SetVersion

; 257  : {

  0060d	55		 push	 ebp
  0060e	8b ec		 mov	 ebp, esp
  00610	83 ec 08	 sub	 esp, 8
  00613	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 258  : 	if (count != palInHunk->palCount)

  00616	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00619	8b 08		 mov	 ecx, DWORD PTR [eax]
  0061b	0f be 51 0a	 movsx	 edx, BYTE PTR [ecx+10]
  0061f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00622	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  00625	74 1d		 je	 SHORT $L54767

; 259  : 		msgMgr->Fatal(SrcLoc, Msg_PalMemMoved);

  00627	6a 3f		 push	 63			; 0000003fH
  00629	68 03 01 00 00	 push	 259			; 00000103H
  0062e	68 00 00 00 00	 push	 OFFSET FLAT:$SG54768
  00633	6a 61		 push	 97			; 00000061H
  00635	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0063b	51		 push	 ecx
  0063c	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  00641	83 c4 14	 add	 esp, 20			; 00000014H
$L54767:

; 260  : 
; 261  : 	if (count)  {

  00644	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00647	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0064b	74 47		 je	 SHORT $L54769

; 262  : 		CompPal* pal = PalAddr();

  0064d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00650	e8 00 00 00 00	 call	 ?PalAddr@HunkPalette@@QBEPAUCompPal@1@XZ ; HunkPalette::PalAddr
  00655	89 45 fc	 mov	 DWORD PTR _pal$54770[ebp], eax

; 263  : 		if (pal->valid != version)

  00658	8b 45 fc	 mov	 eax, DWORD PTR _pal$54770[ebp]
  0065b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0065e	8b 50 12	 mov	 edx, DWORD PTR [eax+18]
  00661	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00664	74 1c		 je	 SHORT $L54771

; 264  : 			msgMgr->Fatal(SrcLoc, Msg_PalMemMoved);

  00666	6a 3f		 push	 63			; 0000003fH
  00668	68 08 01 00 00	 push	 264			; 00000108H
  0066d	68 00 00 00 00	 push	 OFFSET FLAT:$SG54772
  00672	6a 61		 push	 97			; 00000061H
  00674	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00679	50		 push	 eax
  0067a	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  0067f	83 c4 14	 add	 esp, 20			; 00000014H
$L54771:

; 265  : 
; 266  : 		pal->valid = ver;

  00682	8b 4d fc	 mov	 ecx, DWORD PTR _pal$54770[ebp]
  00685	8b 55 08	 mov	 edx, DWORD PTR _ver$[ebp]
  00688	89 51 12	 mov	 DWORD PTR [ecx+18], edx

; 267  : 		version = ver;

  0068b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0068e	8b 4d 08	 mov	 ecx, DWORD PTR _ver$[ebp]
  00691	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L54769:

; 274  : }

  00694	8b e5		 mov	 esp, ebp
  00696	5d		 pop	 ebp
  00697	c2 04 00	 ret	 4
?SetVersion@HunkPalette@@QAEXH@Z ENDP			; HunkPalette::SetVersion
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
PUBLIC	?KPalVary@@YAXPAF@Z				; KPalVary
PUBLIC	??0HunkPalette@@QAE@XZ				; HunkPalette::HunkPalette
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
EXTRN	__chkstk:NEAR
EXTRN	?resMgr@@3PAVResourceMgr@@A:DWORD		; resMgr
_TEXT	SEGMENT
_args$ = 8
_palID$ = -4
_hpal$62539 = -16
_pal$62540 = -1040
_hpal$62557 = -1052
_pal$62558 = -2076
_hpal$62564 = -2088
_pal$62565 = -3112
_hpal$62568 = -3124
_pal$62569 = -4148
_hpal$62572 = -4160
_pal$62573 = -5184
$T62892 = -5188
$T62893 = -5192
$T62894 = -5196
$T62895 = -5200
$T62896 = -5204
?KPalVary@@YAXPAF@Z PROC NEAR				; KPalVary

; 288  : {

  0069a	55		 push	 ebp
  0069b	8b ec		 mov	 ebp, esp
  0069d	b8 a8 14 00 00	 mov	 eax, 5288		; 000014a8H
  006a2	e8 00 00 00 00	 call	 __chkstk

; 289  : 	enum {   
; 290  : 		PALVARYSTART = 0,
; 291  : 		PALVARYREVERSE ,
; 292  : 		PALVARYINFO,
; 293  : 		PALVARYKILL,
; 294  : 		PALVARYTARGET,
; 295  : 		PALVARYNEWTIME,
; 296  : 		PALVARYPAUSE,
; 297  :       PALVARYNEWTARGET,
; 298  :       PALVARYNEWSOURCE,
; 299  :       PALVARYMERGESOURCE
; 300  :    };
; 301  : 	
; 302  : 	MemID palID;

  006a7	8d 4d fc	 lea	 ecx, DWORD PTR _palID$[ebp]
  006aa	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 303  : 	switch (arg(1)) {

  006af	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  006b2	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  006b6	89 8d a8 eb ff
	ff		 mov	 DWORD PTR -5208+[ebp], ecx
  006bc	83 bd a8 eb ff
	ff 09		 cmp	 DWORD PTR -5208+[ebp], 9
  006c3	0f 87 42 06 00
	00		 ja	 $L62534
  006c9	8b 95 a8 eb ff
	ff		 mov	 edx, DWORD PTR -5208+[ebp]
  006cf	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L62898[edx*4]
$L62537:

; 318  : 				palID = resMgr->Get(MemResPalette, arg(2));

  006d6	6a 00		 push	 0
  006d8	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  006db	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  006df	51		 push	 ecx
  006e0	6a 0b		 push	 11			; 0000000bH
  006e2	8d 95 bc eb ff
	ff		 lea	 edx, DWORD PTR $T62892[ebp]
  006e8	52		 push	 edx
  006e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  006ee	8b 10		 mov	 edx, DWORD PTR [eax]
  006f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  006f6	ff 52 20	 call	 DWORD PTR [edx+32]
  006f9	66 8b 00	 mov	 ax, WORD PTR [eax]
  006fc	66 89 45 fc	 mov	 WORD PTR _palID$[ebp], ax

; 319  : 				HunkPalette hpal;

  00700	8d 4d f0	 lea	 ecx, DWORD PTR _hpal$62539[ebp]
  00703	e8 00 00 00 00	 call	 ??0HunkPalette@@QAE@XZ	; HunkPalette::HunkPalette

; 320  : 				hpal.Init(*palID);

  00708	8d 4d fc	 lea	 ecx, DWORD PTR _palID$[ebp]
  0070b	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00710	50		 push	 eax
  00711	8d 4d f0	 lea	 ecx, DWORD PTR _hpal$62539[ebp]
  00714	e8 00 00 00 00	 call	 ?Init@HunkPalette@@QAEXPAX@Z ; HunkPalette::Init

; 321  : 				SOLPalette pal(hpal);

  00719	8d 4d f0	 lea	 ecx, DWORD PTR _hpal$62539[ebp]
  0071c	51		 push	 ecx
  0071d	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _pal$62540[ebp]
  00723	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABVHunkPalette@@@Z ; SOLPalette::SOLPalette

; 322  : 				if (argCount < 3)

  00728	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0072b	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0072e	83 f8 03	 cmp	 eax, 3
  00731	7d 3c		 jge	 SHORT $L62541

; 323  : 					graphMgr->GPalette().SetVary(pal, 100);

  00733	6a ff		 push	 -1
  00735	6a ff		 push	 -1
  00737	6a 00		 push	 0
  00739	6a 64		 push	 100			; 00000064H
  0073b	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _pal$62540[ebp]
  00741	51		 push	 ecx
  00742	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00748	8b 02		 mov	 eax, DWORD PTR [edx]
  0074a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00750	ff 50 1c	 call	 DWORD PTR [eax+28]
  00753	89 85 a4 eb ff
	ff		 mov	 DWORD PTR -5212+[ebp], eax
  00759	8b 8d a4 eb ff
	ff		 mov	 ecx, DWORD PTR -5212+[ebp]
  0075f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00761	8b 8d a4 eb ff
	ff		 mov	 ecx, DWORD PTR -5212+[ebp]
  00767	ff 52 54	 call	 DWORD PTR [edx+84]

; 324  : 				else if (argCount < 4)

  0076a	e9 f4 00 00 00	 jmp	 $L62546
$L62541:
  0076f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00772	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00775	83 f9 04	 cmp	 ecx, 4
  00778	7d 45		 jge	 SHORT $L62543

; 325  : 					graphMgr->GPalette().SetVary(pal, 100, arg(3) * 60);

  0077a	6a ff		 push	 -1
  0077c	6a ff		 push	 -1
  0077e	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00781	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  00785	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00788	50		 push	 eax
  00789	6a 64		 push	 100			; 00000064H
  0078b	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _pal$62540[ebp]
  00791	51		 push	 ecx
  00792	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00798	8b 02		 mov	 eax, DWORD PTR [edx]
  0079a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  007a0	ff 50 1c	 call	 DWORD PTR [eax+28]
  007a3	89 85 a0 eb ff
	ff		 mov	 DWORD PTR -5216+[ebp], eax
  007a9	8b 8d a0 eb ff
	ff		 mov	 ecx, DWORD PTR -5216+[ebp]
  007af	8b 11		 mov	 edx, DWORD PTR [ecx]
  007b1	8b 8d a0 eb ff
	ff		 mov	 ecx, DWORD PTR -5216+[ebp]
  007b7	ff 52 54	 call	 DWORD PTR [edx+84]

; 326  : 				else if (argCount < 5)            

  007ba	e9 a4 00 00 00	 jmp	 $L62546
$L62543:
  007bf	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  007c2	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  007c5	83 f9 05	 cmp	 ecx, 5
  007c8	7d 48		 jge	 SHORT $L62545

; 327  : 					graphMgr->GPalette().SetVary(pal, arg(4), arg(3) * 60);

  007ca	6a ff		 push	 -1
  007cc	6a ff		 push	 -1
  007ce	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  007d1	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  007d5	6b c0 3c	 imul	 eax, 60			; 0000003cH
  007d8	50		 push	 eax
  007d9	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  007dc	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  007e0	52		 push	 edx
  007e1	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _pal$62540[ebp]
  007e7	50		 push	 eax
  007e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  007ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  007f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  007f6	ff 52 1c	 call	 DWORD PTR [edx+28]
  007f9	89 85 9c eb ff
	ff		 mov	 DWORD PTR -5220+[ebp], eax
  007ff	8b 85 9c eb ff
	ff		 mov	 eax, DWORD PTR -5220+[ebp]
  00805	8b 10		 mov	 edx, DWORD PTR [eax]
  00807	8b 8d 9c eb ff
	ff		 mov	 ecx, DWORD PTR -5220+[ebp]
  0080d	ff 52 54	 call	 DWORD PTR [edx+84]

; 328  : 				else 

  00810	eb 51		 jmp	 SHORT $L62546
$L62545:

; 329  : 					graphMgr->GPalette().SetVary(pal, arg(4), arg(3) * 60, arg(5), arg(6));

  00812	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00815	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  00819	51		 push	 ecx
  0081a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0081d	0f bf 42 0a	 movsx	 eax, WORD PTR [edx+10]
  00821	50		 push	 eax
  00822	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00825	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00829	6b d2 3c	 imul	 edx, 60			; 0000003cH
  0082c	52		 push	 edx
  0082d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00830	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00834	51		 push	 ecx
  00835	8d 95 f0 fb ff
	ff		 lea	 edx, DWORD PTR _pal$62540[ebp]
  0083b	52		 push	 edx
  0083c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00841	8b 10		 mov	 edx, DWORD PTR [eax]
  00843	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00849	ff 52 1c	 call	 DWORD PTR [edx+28]
  0084c	89 85 98 eb ff
	ff		 mov	 DWORD PTR -5224+[ebp], eax
  00852	8b 85 98 eb ff
	ff		 mov	 eax, DWORD PTR -5224+[ebp]
  00858	8b 10		 mov	 edx, DWORD PTR [eax]
  0085a	8b 8d 98 eb ff
	ff		 mov	 ecx, DWORD PTR -5224+[ebp]
  00860	ff 52 54	 call	 DWORD PTR [edx+84]
$L62546:

; 331  : 			break;

  00863	e9 a3 04 00 00	 jmp	 $L62534
$L62547:

; 332  : 
; 333  : 		case PALVARYREVERSE:
; 334  : 
; 335  :          /* input:
; 336  :                target palette will be orginal start palette and start palette
; 337  :                will be orignal target palette
; 338  : 					 
; 339  :                arg2 = time to shift palette in seconds (not required unless arg3 wanted)
; 340  : 							 if time = zero then palette changed immediately
; 341  :                arg3 = target percent for shift (not required unless arg4 wanted)
; 342  : 							 If not present 0 assumed to be target percent
; 343  : 							 to destination percent
; 344  : 			*/
; 345  : 			if (argCount < 2)

  00868	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0086b	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0086e	83 f9 02	 cmp	 ecx, 2
  00871	7d 35		 jge	 SHORT $L62548

; 346  : 				graphMgr->GPalette().SetVaryPercent(0); 			 

  00873	6a ff		 push	 -1
  00875	6a ff		 push	 -1
  00877	6a 00		 push	 0
  00879	6a 00		 push	 0
  0087b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00881	8b 02		 mov	 eax, DWORD PTR [edx]
  00883	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00889	ff 50 1c	 call	 DWORD PTR [eax+28]
  0088c	89 85 94 eb ff
	ff		 mov	 DWORD PTR -5228+[ebp], eax
  00892	8b 8d 94 eb ff
	ff		 mov	 ecx, DWORD PTR -5228+[ebp]
  00898	8b 11		 mov	 edx, DWORD PTR [ecx]
  0089a	8b 8d 94 eb ff
	ff		 mov	 ecx, DWORD PTR -5228+[ebp]
  008a0	ff 52 58	 call	 DWORD PTR [edx+88]

; 347  : 			else if (argCount < 3)

  008a3	e9 85 00 00 00	 jmp	 $L62551
$L62548:
  008a8	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  008ab	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  008ae	83 f9 03	 cmp	 ecx, 3
  008b1	7d 3b		 jge	 SHORT $L62550

; 348  : 				graphMgr->GPalette().SetVaryPercent(0, arg(2) * 60);

  008b3	6a ff		 push	 -1
  008b5	6a ff		 push	 -1
  008b7	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  008ba	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  008be	6b c0 3c	 imul	 eax, 60			; 0000003cH
  008c1	50		 push	 eax
  008c2	6a 00		 push	 0
  008c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  008ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  008cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  008d2	ff 52 1c	 call	 DWORD PTR [edx+28]
  008d5	89 85 90 eb ff
	ff		 mov	 DWORD PTR -5232+[ebp], eax
  008db	8b 85 90 eb ff
	ff		 mov	 eax, DWORD PTR -5232+[ebp]
  008e1	8b 10		 mov	 edx, DWORD PTR [eax]
  008e3	8b 8d 90 eb ff
	ff		 mov	 ecx, DWORD PTR -5232+[ebp]
  008e9	ff 52 58	 call	 DWORD PTR [edx+88]

; 349  : 			else             

  008ec	eb 3f		 jmp	 SHORT $L62551
$L62550:

; 350  : 				graphMgr->GPalette().SetVaryPercent(arg(3), arg(2) * 60);

  008ee	6a ff		 push	 -1
  008f0	6a ff		 push	 -1
  008f2	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  008f5	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  008f9	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  008fc	51		 push	 ecx
  008fd	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00900	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  00904	50		 push	 eax
  00905	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0090b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0090d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00913	ff 52 1c	 call	 DWORD PTR [edx+28]
  00916	89 85 8c eb ff
	ff		 mov	 DWORD PTR -5236+[ebp], eax
  0091c	8b 85 8c eb ff
	ff		 mov	 eax, DWORD PTR -5236+[ebp]
  00922	8b 10		 mov	 edx, DWORD PTR [eax]
  00924	8b 8d 8c eb ff
	ff		 mov	 ecx, DWORD PTR -5236+[ebp]
  0092a	ff 52 58	 call	 DWORD PTR [edx+88]
$L62551:

; 351  :          break;

  0092d	e9 d9 03 00 00	 jmp	 $L62534
$L62552:

; 352  : 
; 353  : 		case PALVARYINFO:
; 354  : 
; 355  : 			/* return percent of palette change */
; 356  : 			pm.acc = graphMgr->GPalette().VaryPercent();

  00932	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00937	8b 10		 mov	 edx, DWORD PTR [eax]
  00939	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0093f	ff 52 1c	 call	 DWORD PTR [edx+28]
  00942	89 85 88 eb ff
	ff		 mov	 DWORD PTR -5240+[ebp], eax
  00948	8b 85 88 eb ff
	ff		 mov	 eax, DWORD PTR -5240+[ebp]
  0094e	8b 10		 mov	 edx, DWORD PTR [eax]
  00950	8b 8d 88 eb ff
	ff		 mov	 ecx, DWORD PTR -5240+[ebp]
  00956	ff 52 60	 call	 DWORD PTR [edx+96]
  00959	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 357  : 			break;

  0095e	e9 a8 03 00 00	 jmp	 $L62534
$L62553:

; 358  : 
; 359  : 
; 360  : 		case PALVARYNEWTIME:			// Change the time for reaching target
; 361  : 
; 362  :          /* input:
; 363  :                arg2 = time to finish (required)
; 364  : 			*/
; 365  : 			graphMgr->GPalette().SetVaryTime(arg(2)*60);

  00963	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00966	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0096a	6b c9 3c	 imul	 ecx, 60			; 0000003cH
  0096d	51		 push	 ecx
  0096e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00974	8b 02		 mov	 eax, DWORD PTR [edx]
  00976	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0097c	ff 50 1c	 call	 DWORD PTR [eax+28]
  0097f	89 85 84 eb ff
	ff		 mov	 DWORD PTR -5244+[ebp], eax
  00985	8b 8d 84 eb ff
	ff		 mov	 ecx, DWORD PTR -5244+[ebp]
  0098b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0098d	8b 8d 84 eb ff
	ff		 mov	 ecx, DWORD PTR -5244+[ebp]
  00993	ff 52 5c	 call	 DWORD PTR [edx+92]

; 366  : 			break;

  00996	e9 70 03 00 00	 jmp	 $L62534
$L62554:

; 367  : 
; 368  : 		case PALVARYKILL:
; 369  : 
; 370  :          /* stop palette change */
; 371  : 			graphMgr->GPalette().VaryOff();

  0099b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  009a0	8b 10		 mov	 edx, DWORD PTR [eax]
  009a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  009a8	ff 52 1c	 call	 DWORD PTR [edx+28]
  009ab	89 85 80 eb ff
	ff		 mov	 DWORD PTR -5248+[ebp], eax
  009b1	8b 85 80 eb ff
	ff		 mov	 eax, DWORD PTR -5248+[ebp]
  009b7	8b 10		 mov	 edx, DWORD PTR [eax]
  009b9	8b 8d 80 eb ff
	ff		 mov	 ecx, DWORD PTR -5248+[ebp]
  009bf	ff 52 64	 call	 DWORD PTR [edx+100]

; 372  : 			break;

  009c2	e9 44 03 00 00	 jmp	 $L62534
$L62555:

; 383  : 				palID = resMgr->Get(MemResPalette, arg(2));

  009c7	6a 00		 push	 0
  009c9	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  009cc	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  009d0	51		 push	 ecx
  009d1	6a 0b		 push	 11			; 0000000bH
  009d3	8d 95 b8 eb ff
	ff		 lea	 edx, DWORD PTR $T62893[ebp]
  009d9	52		 push	 edx
  009da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  009df	8b 10		 mov	 edx, DWORD PTR [eax]
  009e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  009e7	ff 52 20	 call	 DWORD PTR [edx+32]
  009ea	66 8b 00	 mov	 ax, WORD PTR [eax]
  009ed	66 89 45 fc	 mov	 WORD PTR _palID$[ebp], ax

; 384  : 				HunkPalette hpal;

  009f1	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _hpal$62557[ebp]
  009f7	e8 00 00 00 00	 call	 ??0HunkPalette@@QAE@XZ	; HunkPalette::HunkPalette

; 385  : 				hpal.Init(*palID);

  009fc	8d 4d fc	 lea	 ecx, DWORD PTR _palID$[ebp]
  009ff	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00a04	50		 push	 eax
  00a05	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _hpal$62557[ebp]
  00a0b	e8 00 00 00 00	 call	 ?Init@HunkPalette@@QAEXPAX@Z ; HunkPalette::Init

; 386  : 				SOLPalette pal(hpal);

  00a10	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _hpal$62557[ebp]
  00a16	51		 push	 ecx
  00a17	8d 8d e4 f7 ff
	ff		 lea	 ecx, DWORD PTR _pal$62558[ebp]
  00a1d	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABVHunkPalette@@@Z ; SOLPalette::SOLPalette

; 387  : 				graphMgr->GPalette().MergeTarget(pal);

  00a22	8d 95 e4 f7 ff
	ff		 lea	 edx, DWORD PTR _pal$62558[ebp]
  00a28	52		 push	 edx
  00a29	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00a2e	8b 10		 mov	 edx, DWORD PTR [eax]
  00a30	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00a36	ff 52 1c	 call	 DWORD PTR [edx+28]
  00a39	89 85 7c eb ff
	ff		 mov	 DWORD PTR -5252+[ebp], eax
  00a3f	8b 85 7c eb ff
	ff		 mov	 eax, DWORD PTR -5252+[ebp]
  00a45	8b 10		 mov	 edx, DWORD PTR [eax]
  00a47	8b 8d 7c eb ff
	ff		 mov	 ecx, DWORD PTR -5252+[ebp]
  00a4d	ff 52 48	 call	 DWORD PTR [edx+72]

; 388  : 				pm.acc = graphMgr->GPalette().VaryPercent();

  00a50	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00a55	8b 10		 mov	 edx, DWORD PTR [eax]
  00a57	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00a5d	ff 52 1c	 call	 DWORD PTR [edx+28]
  00a60	89 85 78 eb ff
	ff		 mov	 DWORD PTR -5256+[ebp], eax
  00a66	8b 85 78 eb ff
	ff		 mov	 eax, DWORD PTR -5256+[ebp]
  00a6c	8b 10		 mov	 edx, DWORD PTR [eax]
  00a6e	8b 8d 78 eb ff
	ff		 mov	 ecx, DWORD PTR -5256+[ebp]
  00a74	ff 52 60	 call	 DWORD PTR [edx+96]
  00a77	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 390  : 			break;

  00a7c	e9 8a 02 00 00	 jmp	 $L62534
$L62559:

; 391  : 
; 392  : 		case PALVARYPAUSE:
; 393  : 
; 394  :          /* input:
; 395  :                arg2 = TRUE or FALSE (required)
; 396  :                TRUE:  Pause the palette change.
; 397  :                FALSE  Restart the palette change.
; 398  :          */
; 399  :          /* Note:
; 400  :                If PalVary is paused n times with TRUE it will require
; 401  :                n calls to PalVary pause with FALSE to restart the palette
; 402  :                changing.
; 403  : 		  */
; 404  :         	if (arg(2)) 

  00a81	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00a84	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00a88	85 c9		 test	 ecx, ecx
  00a8a	74 2a		 je	 SHORT $L62560

; 405  : 				graphMgr->GPalette().VaryPause();

  00a8c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00a92	8b 02		 mov	 eax, DWORD PTR [edx]
  00a94	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00a9a	ff 50 1c	 call	 DWORD PTR [eax+28]
  00a9d	89 85 74 eb ff
	ff		 mov	 DWORD PTR -5260+[ebp], eax
  00aa3	8b 8d 74 eb ff
	ff		 mov	 ecx, DWORD PTR -5260+[ebp]
  00aa9	8b 11		 mov	 edx, DWORD PTR [ecx]
  00aab	8b 8d 74 eb ff
	ff		 mov	 ecx, DWORD PTR -5260+[ebp]
  00ab1	ff 52 6c	 call	 DWORD PTR [edx+108]

; 406  : 			else

  00ab4	eb 27		 jmp	 SHORT $L62561
$L62560:

; 407  : 				graphMgr->GPalette().VaryOn();

  00ab6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00abb	8b 10		 mov	 edx, DWORD PTR [eax]
  00abd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00ac3	ff 52 1c	 call	 DWORD PTR [edx+28]
  00ac6	89 85 70 eb ff
	ff		 mov	 DWORD PTR -5264+[ebp], eax
  00acc	8b 85 70 eb ff
	ff		 mov	 eax, DWORD PTR -5264+[ebp]
  00ad2	8b 10		 mov	 edx, DWORD PTR [eax]
  00ad4	8b 8d 70 eb ff
	ff		 mov	 ecx, DWORD PTR -5264+[ebp]
  00ada	ff 52 68	 call	 DWORD PTR [edx+104]
$L62561:

; 408  : 
; 409  : 			break;

  00add	e9 29 02 00 00	 jmp	 $L62534
$L62562:

; 413  : 				palID = resMgr->Get(MemResPalette, arg(2));

  00ae2	6a 00		 push	 0
  00ae4	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00ae7	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00aeb	51		 push	 ecx
  00aec	6a 0b		 push	 11			; 0000000bH
  00aee	8d 95 b4 eb ff
	ff		 lea	 edx, DWORD PTR $T62894[ebp]
  00af4	52		 push	 edx
  00af5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00afa	8b 10		 mov	 edx, DWORD PTR [eax]
  00afc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00b02	ff 52 20	 call	 DWORD PTR [edx+32]
  00b05	66 8b 00	 mov	 ax, WORD PTR [eax]
  00b08	66 89 45 fc	 mov	 WORD PTR _palID$[ebp], ax

; 414  : 				HunkPalette hpal;

  00b0c	8d 8d d8 f7 ff
	ff		 lea	 ecx, DWORD PTR _hpal$62564[ebp]
  00b12	e8 00 00 00 00	 call	 ??0HunkPalette@@QAE@XZ	; HunkPalette::HunkPalette

; 415  : 				hpal.Init(*palID);

  00b17	8d 4d fc	 lea	 ecx, DWORD PTR _palID$[ebp]
  00b1a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00b1f	50		 push	 eax
  00b20	8d 8d d8 f7 ff
	ff		 lea	 ecx, DWORD PTR _hpal$62564[ebp]
  00b26	e8 00 00 00 00	 call	 ?Init@HunkPalette@@QAEXPAX@Z ; HunkPalette::Init

; 416  : 				SOLPalette pal(hpal);

  00b2b	8d 8d d8 f7 ff
	ff		 lea	 ecx, DWORD PTR _hpal$62564[ebp]
  00b31	51		 push	 ecx
  00b32	8d 8d d8 f3 ff
	ff		 lea	 ecx, DWORD PTR _pal$62565[ebp]
  00b38	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABVHunkPalette@@@Z ; SOLPalette::SOLPalette

; 417  : 				graphMgr->GPalette().SetTarget(pal);

  00b3d	8d 95 d8 f3 ff
	ff		 lea	 edx, DWORD PTR _pal$62565[ebp]
  00b43	52		 push	 edx
  00b44	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00b49	8b 10		 mov	 edx, DWORD PTR [eax]
  00b4b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00b51	ff 52 1c	 call	 DWORD PTR [edx+28]
  00b54	89 85 6c eb ff
	ff		 mov	 DWORD PTR -5268+[ebp], eax
  00b5a	8b 85 6c eb ff
	ff		 mov	 eax, DWORD PTR -5268+[ebp]
  00b60	8b 10		 mov	 edx, DWORD PTR [eax]
  00b62	8b 8d 6c eb ff
	ff		 mov	 ecx, DWORD PTR -5268+[ebp]
  00b68	ff 52 44	 call	 DWORD PTR [edx+68]

; 418  : 				pm.acc = graphMgr->GPalette().VaryPercent();

  00b6b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00b70	8b 10		 mov	 edx, DWORD PTR [eax]
  00b72	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00b78	ff 52 1c	 call	 DWORD PTR [edx+28]
  00b7b	89 85 68 eb ff
	ff		 mov	 DWORD PTR -5272+[ebp], eax
  00b81	8b 85 68 eb ff
	ff		 mov	 eax, DWORD PTR -5272+[ebp]
  00b87	8b 10		 mov	 edx, DWORD PTR [eax]
  00b89	8b 8d 68 eb ff
	ff		 mov	 ecx, DWORD PTR -5272+[ebp]
  00b8f	ff 52 60	 call	 DWORD PTR [edx+96]
  00b92	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 420  : 			break;

  00b97	e9 6f 01 00 00	 jmp	 $L62534
$L62566:

; 424  : 				palID = resMgr->Get(MemResPalette, arg(2));

  00b9c	6a 00		 push	 0
  00b9e	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00ba1	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00ba5	51		 push	 ecx
  00ba6	6a 0b		 push	 11			; 0000000bH
  00ba8	8d 95 b0 eb ff
	ff		 lea	 edx, DWORD PTR $T62895[ebp]
  00bae	52		 push	 edx
  00baf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00bb4	8b 10		 mov	 edx, DWORD PTR [eax]
  00bb6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00bbc	ff 52 20	 call	 DWORD PTR [edx+32]
  00bbf	66 8b 00	 mov	 ax, WORD PTR [eax]
  00bc2	66 89 45 fc	 mov	 WORD PTR _palID$[ebp], ax

; 425  : 				HunkPalette hpal;

  00bc6	8d 8d cc f3 ff
	ff		 lea	 ecx, DWORD PTR _hpal$62568[ebp]
  00bcc	e8 00 00 00 00	 call	 ??0HunkPalette@@QAE@XZ	; HunkPalette::HunkPalette

; 426  : 				hpal.Init(*palID);

  00bd1	8d 4d fc	 lea	 ecx, DWORD PTR _palID$[ebp]
  00bd4	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00bd9	50		 push	 eax
  00bda	8d 8d cc f3 ff
	ff		 lea	 ecx, DWORD PTR _hpal$62568[ebp]
  00be0	e8 00 00 00 00	 call	 ?Init@HunkPalette@@QAEXPAX@Z ; HunkPalette::Init

; 427  : 				SOLPalette pal(hpal);

  00be5	8d 8d cc f3 ff
	ff		 lea	 ecx, DWORD PTR _hpal$62568[ebp]
  00beb	51		 push	 ecx
  00bec	8d 8d cc ef ff
	ff		 lea	 ecx, DWORD PTR _pal$62569[ebp]
  00bf2	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABVHunkPalette@@@Z ; SOLPalette::SOLPalette

; 428  : 				graphMgr->GPalette().SetStart(pal);

  00bf7	8d 95 cc ef ff
	ff		 lea	 edx, DWORD PTR _pal$62569[ebp]
  00bfd	52		 push	 edx
  00bfe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00c03	8b 10		 mov	 edx, DWORD PTR [eax]
  00c05	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00c0b	ff 52 1c	 call	 DWORD PTR [edx+28]
  00c0e	89 85 64 eb ff
	ff		 mov	 DWORD PTR -5276+[ebp], eax
  00c14	8b 85 64 eb ff
	ff		 mov	 eax, DWORD PTR -5276+[ebp]
  00c1a	8b 10		 mov	 edx, DWORD PTR [eax]
  00c1c	8b 8d 64 eb ff
	ff		 mov	 ecx, DWORD PTR -5276+[ebp]
  00c22	ff 52 4c	 call	 DWORD PTR [edx+76]

; 429  : 				pm.acc = graphMgr->GPalette().VaryPercent();

  00c25	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00c2a	8b 10		 mov	 edx, DWORD PTR [eax]
  00c2c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00c32	ff 52 1c	 call	 DWORD PTR [edx+28]
  00c35	89 85 60 eb ff
	ff		 mov	 DWORD PTR -5280+[ebp], eax
  00c3b	8b 85 60 eb ff
	ff		 mov	 eax, DWORD PTR -5280+[ebp]
  00c41	8b 10		 mov	 edx, DWORD PTR [eax]
  00c43	8b 8d 60 eb ff
	ff		 mov	 ecx, DWORD PTR -5280+[ebp]
  00c49	ff 52 60	 call	 DWORD PTR [edx+96]
  00c4c	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 431  : 			break;

  00c51	e9 b5 00 00 00	 jmp	 $L62534
$L62570:

; 435  : 				palID = resMgr->Get(MemResPalette, arg(2));

  00c56	6a 00		 push	 0
  00c58	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00c5b	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00c5f	51		 push	 ecx
  00c60	6a 0b		 push	 11			; 0000000bH
  00c62	8d 95 ac eb ff
	ff		 lea	 edx, DWORD PTR $T62896[ebp]
  00c68	52		 push	 edx
  00c69	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00c6e	8b 10		 mov	 edx, DWORD PTR [eax]
  00c70	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00c76	ff 52 20	 call	 DWORD PTR [edx+32]
  00c79	66 8b 00	 mov	 ax, WORD PTR [eax]
  00c7c	66 89 45 fc	 mov	 WORD PTR _palID$[ebp], ax

; 436  : 				HunkPalette hpal;

  00c80	8d 8d c0 ef ff
	ff		 lea	 ecx, DWORD PTR _hpal$62572[ebp]
  00c86	e8 00 00 00 00	 call	 ??0HunkPalette@@QAE@XZ	; HunkPalette::HunkPalette

; 437  : 				hpal.Init(*palID);

  00c8b	8d 4d fc	 lea	 ecx, DWORD PTR _palID$[ebp]
  00c8e	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00c93	50		 push	 eax
  00c94	8d 8d c0 ef ff
	ff		 lea	 ecx, DWORD PTR _hpal$62572[ebp]
  00c9a	e8 00 00 00 00	 call	 ?Init@HunkPalette@@QAEXPAX@Z ; HunkPalette::Init

; 438  : 				SOLPalette pal(hpal);

  00c9f	8d 8d c0 ef ff
	ff		 lea	 ecx, DWORD PTR _hpal$62572[ebp]
  00ca5	51		 push	 ecx
  00ca6	8d 8d c0 eb ff
	ff		 lea	 ecx, DWORD PTR _pal$62573[ebp]
  00cac	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABVHunkPalette@@@Z ; SOLPalette::SOLPalette

; 439  : 				graphMgr->GPalette().MergeStart(pal);

  00cb1	8d 95 c0 eb ff
	ff		 lea	 edx, DWORD PTR _pal$62573[ebp]
  00cb7	52		 push	 edx
  00cb8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00cbd	8b 10		 mov	 edx, DWORD PTR [eax]
  00cbf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00cc5	ff 52 1c	 call	 DWORD PTR [edx+28]
  00cc8	89 85 5c eb ff
	ff		 mov	 DWORD PTR -5284+[ebp], eax
  00cce	8b 85 5c eb ff
	ff		 mov	 eax, DWORD PTR -5284+[ebp]
  00cd4	8b 10		 mov	 edx, DWORD PTR [eax]
  00cd6	8b 8d 5c eb ff
	ff		 mov	 ecx, DWORD PTR -5284+[ebp]
  00cdc	ff 52 50	 call	 DWORD PTR [edx+80]

; 440  : 				pm.acc = graphMgr->GPalette().VaryPercent();

  00cdf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00ce4	8b 10		 mov	 edx, DWORD PTR [eax]
  00ce6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00cec	ff 52 1c	 call	 DWORD PTR [edx+28]
  00cef	89 85 58 eb ff
	ff		 mov	 DWORD PTR -5288+[ebp], eax
  00cf5	8b 85 58 eb ff
	ff		 mov	 eax, DWORD PTR -5288+[ebp]
  00cfb	8b 10		 mov	 edx, DWORD PTR [eax]
  00cfd	8b 8d 58 eb ff
	ff		 mov	 ecx, DWORD PTR -5288+[ebp]
  00d03	ff 52 60	 call	 DWORD PTR [edx+96]
  00d06	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax
$L62534:

; 445  : 
; 446  : }

  00d0b	8b e5		 mov	 esp, ebp
  00d0d	5d		 pop	 ebp
  00d0e	c3		 ret	 0
$L62898:
  00d0f	00 00 00 00	 DD	 $L62537
  00d13	00 00 00 00	 DD	 $L62547
  00d17	00 00 00 00	 DD	 $L62552
  00d1b	00 00 00 00	 DD	 $L62554
  00d1f	00 00 00 00	 DD	 $L62555
  00d23	00 00 00 00	 DD	 $L62553
  00d27	00 00 00 00	 DD	 $L62559
  00d2b	00 00 00 00	 DD	 $L62562
  00d2f	00 00 00 00	 DD	 $L62566
  00d33	00 00 00 00	 DD	 $L62570
?KPalVary@@YAXPAF@Z ENDP				; KPalVary
_TEXT	ENDS
;	COMDAT ??0HunkPalette@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0HunkPalette@@QAE@XZ PROC NEAR			; HunkPalette::HunkPalette, COMDAT

; 56   : 	HunkPalette()									{palInHunk = NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0HunkPalette@@QAE@XZ ENDP				; HunkPalette::HunkPalette
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
EXTRN	_memMgr:DWORD
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
PUBLIC	?KPalette@@YAXPAF@Z				; KPalette
_TEXT	SEGMENT
_args$ = 8
_palID$62591 = -16
_hpal$62594 = -12
_aGun$62607 = -20
_val$62612 = -24
$T62904 = -28
?KPalette@@YAXPAF@Z PROC NEAR				; KPalette

; 450  : {     

  00d37	55		 push	 ebp
  00d38	8b ec		 mov	 ebp, esp
  00d3a	83 ec 34	 sub	 esp, 52			; 00000034H

; 457  : 	{

  00d3d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00d40	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00d44	89 4d e0	 mov	 DWORD PTR -32+[ebp], ecx
  00d47	8b 55 e0	 mov	 edx, DWORD PTR -32+[ebp]
  00d4a	83 ea 01	 sub	 edx, 1
  00d4d	89 55 e0	 mov	 DWORD PTR -32+[ebp], edx
  00d50	83 7d e0 03	 cmp	 DWORD PTR -32+[ebp], 3
  00d54	0f 87 55 01 00
	00		 ja	 $L62615
  00d5a	8b 45 e0	 mov	 eax, DWORD PTR -32+[ebp]
  00d5d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L62905[eax*4]
$L62587:

; 460  : 			assert(argCount == 2);
; 461  : 			assert(graphMgr != NULL);
; 462  : 			assert(resMgr != NULL);
; 463  : 
; 464  : 			MemID palID = resMgr->Get(MemResPalette, arg(2));

  00d64	6a 00		 push	 0
  00d66	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00d69	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  00d6d	52		 push	 edx
  00d6e	6a 0b		 push	 11			; 0000000bH
  00d70	8d 45 e4	 lea	 eax, DWORD PTR $T62904[ebp]
  00d73	50		 push	 eax
  00d74	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00d7a	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d7c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00d82	ff 52 20	 call	 DWORD PTR [edx+32]
  00d85	50		 push	 eax
  00d86	8d 4d f0	 lea	 ecx, DWORD PTR _palID$62591[ebp]
  00d89	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 465  : 			assert(palID.IsValid());
; 466  : 
; 467  : 			HunkPalette hpal;

  00d8e	8d 4d f4	 lea	 ecx, DWORD PTR _hpal$62594[ebp]
  00d91	e8 00 00 00 00	 call	 ??0HunkPalette@@QAE@XZ	; HunkPalette::HunkPalette

; 468  : 			hpal.Init(*palID);

  00d96	8d 4d f0	 lea	 ecx, DWORD PTR _palID$62591[ebp]
  00d99	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00d9e	50		 push	 eax
  00d9f	8d 4d f4	 lea	 ecx, DWORD PTR _hpal$62594[ebp]
  00da2	e8 00 00 00 00	 call	 ?Init@HunkPalette@@QAEXPAX@Z ; HunkPalette::Init

; 469  : 			graphMgr->GPalette().Submit(hpal);

  00da7	8d 45 f4	 lea	 eax, DWORD PTR _hpal$62594[ebp]
  00daa	50		 push	 eax
  00dab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00db1	8b 11		 mov	 edx, DWORD PTR [ecx]
  00db3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00db9	ff 52 1c	 call	 DWORD PTR [edx+28]
  00dbc	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  00dbf	8b 45 dc	 mov	 eax, DWORD PTR -36+[ebp]
  00dc2	8b 10		 mov	 edx, DWORD PTR [eax]
  00dc4	8b 4d dc	 mov	 ecx, DWORD PTR -36+[ebp]
  00dc7	ff 52 08	 call	 DWORD PTR [edx+8]

; 470  : 			break;

  00dca	e9 e0 00 00 00	 jmp	 $L62584
$L62595:

; 475  : 			assert(argCount == 4);
; 476  : 			assert(graphMgr != NULL);
; 477  : 
; 478  : 			graphMgr->GPalette().SetFade(arg(4), arg(2), arg(3));

  00dcf	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00dd2	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00dd6	51		 push	 ecx
  00dd7	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00dda	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00dde	50		 push	 eax
  00ddf	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00de2	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  00de6	52		 push	 edx
  00de7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00dec	8b 10		 mov	 edx, DWORD PTR [eax]
  00dee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00df4	ff 52 1c	 call	 DWORD PTR [edx+28]
  00df7	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
  00dfa	8b 45 d8	 mov	 eax, DWORD PTR -40+[ebp]
  00dfd	8b 10		 mov	 edx, DWORD PTR [eax]
  00dff	8b 4d d8	 mov	 ecx, DWORD PTR -40+[ebp]
  00e02	ff 52 70	 call	 DWORD PTR [edx+112]

; 479  : 			break;

  00e05	e9 a5 00 00 00	 jmp	 $L62584
$L62598:

; 484  : 			assert(argCount == 4);
; 485  : 			assert(graphMgr != NULL);
; 486  : 			assert(arg(2) >= 0  &&  arg(2) < 256);
; 487  : 			assert(arg(3) >= 0  &&  arg(3) < 256);
; 488  : 			assert(arg(4) >= 0  &&  arg(4) < 256);
; 489  : 
; 490  : 			Rgb24 aGun((uchar) arg(2), (uchar) arg(3), (uchar) arg(4));

  00e0a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00e0d	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  00e10	51		 push	 ecx
  00e11	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00e14	8a 42 06	 mov	 al, BYTE PTR [edx+6]
  00e17	50		 push	 eax
  00e18	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00e1b	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00e1e	52		 push	 edx
  00e1f	8d 4d ec	 lea	 ecx, DWORD PTR _aGun$62607[ebp]
  00e22	e8 00 00 00 00	 call	 ??0Rgb24@@QAE@EEE@Z	; Rgb24::Rgb24

; 491  : 			pm.acc = graphMgr->GPalette().Current().Match(aGun);

  00e27	8d 45 ec	 lea	 eax, DWORD PTR _aGun$62607[ebp]
  00e2a	50		 push	 eax
  00e2b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e31	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e33	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e39	ff 52 1c	 call	 DWORD PTR [edx+28]
  00e3c	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  00e3f	8b 45 d4	 mov	 eax, DWORD PTR -44+[ebp]
  00e42	8b 10		 mov	 edx, DWORD PTR [eax]
  00e44	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  00e47	ff 52 0c	 call	 DWORD PTR [edx+12]
  00e4a	8b c8		 mov	 ecx, eax
  00e4c	e8 00 00 00 00	 call	 ?Match@SOLPalette@@QBEHABVRgb24@@@Z ; SOLPalette::Match
  00e51	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 492  : 			break;

  00e56	eb 57		 jmp	 SHORT $L62584
$L62608:

; 497  : 			assert(argCount == 2);
; 498  : 			assert(graphMgr != NULL);
; 499  : 			assert(arg(2) >= 0  &&  arg(2) < 5);
; 500  : 
; 501  : 			int val = arg(2) - 1;

  00e58	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00e5b	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00e5f	83 e9 01	 sub	 ecx, 1
  00e62	89 4d e8	 mov	 DWORD PTR _val$62612[ebp], ecx

; 502  : 			if (val == -1)

  00e65	83 7d e8 ff	 cmp	 DWORD PTR _val$62612[ebp], -1
  00e69	75 21		 jne	 SHORT $L62613

; 503  : 				graphMgr->GPalette().GammaOff();

  00e6b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e71	8b 02		 mov	 eax, DWORD PTR [edx]
  00e73	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e79	ff 50 1c	 call	 DWORD PTR [eax+28]
  00e7c	89 45 d0	 mov	 DWORD PTR -48+[ebp], eax
  00e7f	8b 4d d0	 mov	 ecx, DWORD PTR -48+[ebp]
  00e82	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e84	8b 4d d0	 mov	 ecx, DWORD PTR -48+[ebp]
  00e87	ff 52 78	 call	 DWORD PTR [edx+120]

; 504  : 			else

  00e8a	eb 23		 jmp	 SHORT $L62614
$L62613:

; 505  : 				graphMgr->GPalette().SetGamma(val);

  00e8c	8b 45 e8	 mov	 eax, DWORD PTR _val$62612[ebp]
  00e8f	50		 push	 eax
  00e90	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e96	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e98	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e9e	ff 52 1c	 call	 DWORD PTR [edx+28]
  00ea1	89 45 cc	 mov	 DWORD PTR -52+[ebp], eax
  00ea4	8b 45 cc	 mov	 eax, DWORD PTR -52+[ebp]
  00ea7	8b 10		 mov	 edx, DWORD PTR [eax]
  00ea9	8b 4d cc	 mov	 ecx, DWORD PTR -52+[ebp]
  00eac	ff 52 74	 call	 DWORD PTR [edx+116]
$L62614:
$L62615:
$L62584:

; 512  : }  

  00eaf	8b e5		 mov	 esp, ebp
  00eb1	5d		 pop	 ebp
  00eb2	c3		 ret	 0
$L62905:
  00eb3	00 00 00 00	 DD	 $L62587
  00eb7	00 00 00 00	 DD	 $L62595
  00ebb	00 00 00 00	 DD	 $L62598
  00ebf	00 00 00 00	 DD	 $L62608
?KPalette@@YAXPAF@Z ENDP				; KPalette
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
PUBLIC	?KPalCycle@@YAXPAF@Z				; KPalCycle
_TEXT	SEGMENT
_args$ = 8
?KPalCycle@@YAXPAF@Z PROC NEAR				; KPalCycle

; 516  : {                               

  00ec3	55		 push	 ebp
  00ec4	8b ec		 mov	 ebp, esp
  00ec6	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 517  : 	enum cycleFunc {
; 518  : 		CycleStart, DoCycle, CyclePause, CycleGo, CycleOff
; 519  : 	};
; 520  : 	switch (arg(1)) {

  00ec9	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00ecc	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00ed0	89 4d fc	 mov	 DWORD PTR -4+[ebp], ecx
  00ed3	83 7d fc 04	 cmp	 DWORD PTR -4+[ebp], 4
  00ed7	0f 87 fe 01 00
	00		 ja	 $L62627
  00edd	8b 55 fc	 mov	 edx, DWORD PTR -4+[ebp]
  00ee0	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L62908[edx*4]
$L62630:

; 521  : 
; 522  : 		case CycleStart:
; 523  : 			//Cycle the palette
; 524  : 			// arg(2) start
; 525  : 			// arg(3) end
; 526  :          // arg(4) direction
; 527  :          // arg(5) optional ticks
; 528  : 			if (argCount < 5)

  00ee7	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00eea	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00eed	83 f9 05	 cmp	 ecx, 5
  00ef0	7d 3b		 jge	 SHORT $L62631

; 529  : 				graphMgr->GPalette().SetCycle(arg(2), arg(3), arg(4));

  00ef2	6a 00		 push	 0
  00ef4	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00ef7	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  00efb	50		 push	 eax
  00efc	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00eff	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00f03	52		 push	 edx
  00f04	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00f07	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00f0b	51		 push	 ecx
  00f0c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00f12	8b 02		 mov	 eax, DWORD PTR [edx]
  00f14	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00f1a	ff 50 1c	 call	 DWORD PTR [eax+28]
  00f1d	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00f20	8b 4d f8	 mov	 ecx, DWORD PTR -8+[ebp]
  00f23	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f25	8b 4d f8	 mov	 ecx, DWORD PTR -8+[ebp]
  00f28	ff 52 24	 call	 DWORD PTR [edx+36]

; 530  : 			else

  00f2b	eb 3f		 jmp	 SHORT $L62632
$L62631:

; 531  : 				graphMgr->GPalette().SetCycle(arg(2), arg(3), arg(4), arg(5));

  00f2d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00f30	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00f34	51		 push	 ecx
  00f35	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00f38	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  00f3c	50		 push	 eax
  00f3d	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00f40	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00f44	52		 push	 edx
  00f45	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00f48	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00f4c	51		 push	 ecx
  00f4d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00f53	8b 02		 mov	 eax, DWORD PTR [edx]
  00f55	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00f5b	ff 50 1c	 call	 DWORD PTR [eax+28]
  00f5e	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  00f61	8b 4d f4	 mov	 ecx, DWORD PTR -12+[ebp]
  00f64	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f66	8b 4d f4	 mov	 ecx, DWORD PTR -12+[ebp]
  00f69	ff 52 24	 call	 DWORD PTR [edx+36]
$L62632:

; 532  : 			break;

  00f6c	e9 6a 01 00 00	 jmp	 $L62627
$L62633:

; 533  : 
; 534  : 		case DoCycle:
; 535  : 			//Cycle
; 536  : 			// arg(2) what is the start of the Cycle to cycle
; 537  : 			// arg(3) how many steps to cycle optional (default 1) 
; 538  : 			if (argCount < 3)

  00f71	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00f74	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00f77	83 f9 03	 cmp	 ecx, 3
  00f7a	7d 2b		 jge	 SHORT $L62634

; 539  : 				graphMgr->GPalette().DoCycle(arg(2));

  00f7c	6a 01		 push	 1
  00f7e	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00f81	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00f85	50		 push	 eax
  00f86	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00f8c	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f8e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00f94	ff 52 1c	 call	 DWORD PTR [edx+28]
  00f97	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
  00f9a	8b 45 f0	 mov	 eax, DWORD PTR -16+[ebp]
  00f9d	8b 10		 mov	 edx, DWORD PTR [eax]
  00f9f	8b 4d f0	 mov	 ecx, DWORD PTR -16+[ebp]
  00fa2	ff 52 28	 call	 DWORD PTR [edx+40]

; 540  : 			else

  00fa5	eb 2f		 jmp	 SHORT $L62635
$L62634:

; 541  : 				graphMgr->GPalette().DoCycle(arg(2), arg(3));

  00fa7	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00faa	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00fae	51		 push	 ecx
  00faf	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00fb2	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00fb6	50		 push	 eax
  00fb7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00fbd	8b 11		 mov	 edx, DWORD PTR [ecx]
  00fbf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00fc5	ff 52 1c	 call	 DWORD PTR [edx+28]
  00fc8	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00fcb	8b 45 ec	 mov	 eax, DWORD PTR -20+[ebp]
  00fce	8b 10		 mov	 edx, DWORD PTR [eax]
  00fd0	8b 4d ec	 mov	 ecx, DWORD PTR -20+[ebp]
  00fd3	ff 52 28	 call	 DWORD PTR [edx+40]
$L62635:

; 542  : 			break;

  00fd6	e9 00 01 00 00	 jmp	 $L62627
$L62636:

; 543  : 
; 544  : 		case CyclePause:
; 545  : 			if (argCount < 2)

  00fdb	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00fde	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00fe1	83 f9 02	 cmp	 ecx, 2
  00fe4	7d 21		 jge	 SHORT $L62637

; 546  : 			graphMgr->GPalette().CycleAllPause();

  00fe6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00fec	8b 02		 mov	 eax, DWORD PTR [edx]
  00fee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00ff4	ff 50 1c	 call	 DWORD PTR [eax+28]
  00ff7	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00ffa	8b 4d e8	 mov	 ecx, DWORD PTR -24+[ebp]
  00ffd	8b 11		 mov	 edx, DWORD PTR [ecx]
  00fff	8b 4d e8	 mov	 ecx, DWORD PTR -24+[ebp]
  01002	ff 52 38	 call	 DWORD PTR [edx+56]

; 547  : 			else

  01005	eb 27		 jmp	 SHORT $L62638
$L62637:

; 548  : 			graphMgr->GPalette().CyclePause(arg(2)); 

  01007	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0100a	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0100e	51		 push	 ecx
  0100f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01015	8b 02		 mov	 eax, DWORD PTR [edx]
  01017	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0101d	ff 50 1c	 call	 DWORD PTR [eax+28]
  01020	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  01023	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  01026	8b 11		 mov	 edx, DWORD PTR [ecx]
  01028	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  0102b	ff 52 30	 call	 DWORD PTR [edx+48]
$L62638:

; 549  : 			break;

  0102e	e9 a8 00 00 00	 jmp	 $L62627
$L62639:

; 550  : 
; 551  : 		case CycleGo:
; 552  : 			if (argCount < 2)

  01033	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01036	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  01039	83 f9 02	 cmp	 ecx, 2
  0103c	7d 21		 jge	 SHORT $L62640

; 553  : 			graphMgr->GPalette().CycleAllOn();

  0103e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01044	8b 02		 mov	 eax, DWORD PTR [edx]
  01046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0104c	ff 50 1c	 call	 DWORD PTR [eax+28]
  0104f	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  01052	8b 4d e0	 mov	 ecx, DWORD PTR -32+[ebp]
  01055	8b 11		 mov	 edx, DWORD PTR [ecx]
  01057	8b 4d e0	 mov	 ecx, DWORD PTR -32+[ebp]
  0105a	ff 52 34	 call	 DWORD PTR [edx+52]

; 554  : 			else

  0105d	eb 27		 jmp	 SHORT $L62641
$L62640:

; 555  : 			graphMgr->GPalette().CycleOn(arg(2)); 

  0105f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01062	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  01066	51		 push	 ecx
  01067	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0106d	8b 02		 mov	 eax, DWORD PTR [edx]
  0106f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01075	ff 50 1c	 call	 DWORD PTR [eax+28]
  01078	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  0107b	8b 4d dc	 mov	 ecx, DWORD PTR -36+[ebp]
  0107e	8b 11		 mov	 edx, DWORD PTR [ecx]
  01080	8b 4d dc	 mov	 ecx, DWORD PTR -36+[ebp]
  01083	ff 52 2c	 call	 DWORD PTR [edx+44]
$L62641:

; 556  : 			break;

  01086	eb 53		 jmp	 SHORT $L62627
$L62642:

; 557  : 
; 558  : 		case CycleOff: 
; 559  : 			if (argCount < 2)

  01088	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0108b	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0108e	83 f9 02	 cmp	 ecx, 2
  01091	7d 21		 jge	 SHORT $L62643

; 560  : 				graphMgr->GPalette().CycleAllOff();

  01093	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01099	8b 02		 mov	 eax, DWORD PTR [edx]
  0109b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  010a1	ff 50 1c	 call	 DWORD PTR [eax+28]
  010a4	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
  010a7	8b 4d d8	 mov	 ecx, DWORD PTR -40+[ebp]
  010aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  010ac	8b 4d d8	 mov	 ecx, DWORD PTR -40+[ebp]
  010af	ff 52 40	 call	 DWORD PTR [edx+64]

; 561  : 			else

  010b2	eb 27		 jmp	 SHORT $L62644
$L62643:

; 562  : 				graphMgr->GPalette().CycleOff(arg(2));

  010b4	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  010b7	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  010bb	51		 push	 ecx
  010bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  010c2	8b 02		 mov	 eax, DWORD PTR [edx]
  010c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  010ca	ff 50 1c	 call	 DWORD PTR [eax+28]
  010cd	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  010d0	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  010d3	8b 11		 mov	 edx, DWORD PTR [ecx]
  010d5	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  010d8	ff 52 3c	 call	 DWORD PTR [edx+60]
$L62644:
$L62627:

; 566  : }

  010db	8b e5		 mov	 esp, ebp
  010dd	5d		 pop	 ebp
  010de	c3		 ret	 0
$L62908:
  010df	00 00 00 00	 DD	 $L62630
  010e3	00 00 00 00	 DD	 $L62633
  010e7	00 00 00 00	 DD	 $L62636
  010eb	00 00 00 00	 DD	 $L62639
  010ef	00 00 00 00	 DD	 $L62642
?KPalCycle@@YAXPAF@Z ENDP				; KPalCycle
_TEXT	ENDS
END

	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Timew.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TimeMgr@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7TimeMgrWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgrWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?timeToCheck@@3PAHA				; timeToCheck
_BSS	SEGMENT
_disableTime DD	01H DUP (?)
_timerEnabled DD 01H DUP (?)
?timeToCheck@@3PAHA DD 01H DUP (?)			; timeToCheck
_BSS	ENDS
PUBLIC	??_7TimeMgrWin@@6B@				; TimeMgrWin::`vftable'
PUBLIC	??_GTimeMgrWin@@UAEPAXI@Z			; TimeMgrWin::`scalar deleting destructor'
PUBLIC	??_ETimeMgrWin@@UAEPAXI@Z			; TimeMgrWin::`vector deleting destructor'
PUBLIC	?Reset@TimeMgr@@UAEXXZ				; TimeMgr::Reset
PUBLIC	??0TimeMgr@@QAE@XZ				; TimeMgr::TimeMgr
PUBLIC	??0TimeMgrWin@@QAE@XZ				; TimeMgrWin::TimeMgrWin
PUBLIC	?GetTickCount@TimeMgrWin@@UAEKXZ		; TimeMgrWin::GetTickCount
PUBLIC	?SetTickCount@TimeMgrWin@@UAEXK@Z		; TimeMgrWin::SetTickCount
PUBLIC	?GetMilliSec@TimeMgrWin@@UAEKXZ			; TimeMgrWin::GetMilliSec
EXTRN	__imp__timeGetTime@0:NEAR
_BSS	SEGMENT
_startTime DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_7TimeMgrWin@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Timew.cpp
CONST	SEGMENT
??_7TimeMgrWin@@6B@ DD FLAT:??_ETimeMgrWin@@UAEPAXI@Z	; TimeMgrWin::`vftable'
	DD	FLAT:?GetTickCount@TimeMgrWin@@UAEKXZ
	DD	FLAT:?GetMilliSec@TimeMgrWin@@UAEKXZ
	DD	FLAT:?SetTickCount@TimeMgrWin@@UAEXK@Z
	DD	FLAT:?Reset@TimeMgr@@UAEXXZ
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4
??0TimeMgrWin@@QAE@XZ PROC NEAR				; TimeMgrWin::TimeMgrWin

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0TimeMgr@@QAE@XZ	; TimeMgr::TimeMgr
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7TimeMgrWin@@6B@ ; TimeMgrWin::`vftable'

; 19   : 	startTime = timeGetTime();

  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  0001e	a3 00 00 00 00	 mov	 DWORD PTR _startTime, eax

; 23   : }

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0TimeMgrWin@@QAE@XZ ENDP				; TimeMgrWin::TimeMgrWin
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Reset@TimeMgr@@UAEXXZ PROC NEAR			; TimeMgr::Reset, COMDAT

; 17   : 	virtual void	Reset(){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?Reset@TimeMgr@@UAEXXZ ENDP				; TimeMgr::Reset
_TEXT	ENDS
PUBLIC	??1TimeMgrWin@@UAE@XZ				; TimeMgrWin::~TimeMgrWin
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ??_GTimeMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GTimeMgrWin@@UAEPAXI@Z PROC NEAR			; TimeMgrWin::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1TimeMgrWin@@UAE@XZ	; TimeMgrWin::~TimeMgrWin
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L52617
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L52617:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GTimeMgrWin@@UAEPAXI@Z ENDP				; TimeMgrWin::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7TimeMgr@@6B@				; TimeMgr::`vftable'
PUBLIC	??_GTimeMgr@@UAEPAXI@Z				; TimeMgr::`scalar deleting destructor'
PUBLIC	??_ETimeMgr@@UAEPAXI@Z				; TimeMgr::`vector deleting destructor'
EXTRN	__purecall:NEAR
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT
??_7TimeMgr@@6B@ DD FLAT:??_ETimeMgr@@UAEPAXI@Z		; TimeMgr::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Reset@TimeMgr@@UAEXXZ
CONST	ENDS
;	COMDAT ??0TimeMgr@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0TimeMgr@@QAE@XZ PROC NEAR				; TimeMgr::TimeMgr, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7TimeMgr@@6B@ ; TimeMgr::`vftable'
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0TimeMgr@@QAE@XZ ENDP					; TimeMgr::TimeMgr
_TEXT	ENDS
PUBLIC	??1TimeMgr@@UAE@XZ				; TimeMgr::~TimeMgr
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GTimeMgr@@UAEPAXI@Z PROC NEAR			; TimeMgr::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1TimeMgr@@UAE@XZ	; TimeMgr::~TimeMgr
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L52212
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L52212:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GTimeMgr@@UAEPAXI@Z ENDP				; TimeMgr::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1TimeMgr@@UAE@XZ PROC NEAR				; TimeMgr::~TimeMgr, COMDAT

; 12   : 	virtual			~TimeMgr() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7TimeMgr@@6B@ ; TimeMgr::`vftable'
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1TimeMgr@@UAE@XZ ENDP					; TimeMgr::~TimeMgr
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4
??1TimeMgrWin@@UAE@XZ PROC NEAR				; TimeMgrWin::~TimeMgrWin

; 26   : {

  0002a	55		 push	 ebp
  0002b	8b ec		 mov	 ebp, esp
  0002d	51		 push	 ecx
  0002e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7TimeMgrWin@@6B@ ; TimeMgrWin::`vftable'

; 29   : }

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ??1TimeMgr@@UAE@XZ	; TimeMgr::~TimeMgr
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1TimeMgrWin@@UAE@XZ ENDP				; TimeMgrWin::~TimeMgrWin
_this$ = -4
?GetTickCount@TimeMgrWin@@UAEKXZ PROC NEAR		; TimeMgrWin::GetTickCount

; 33   : {

  00046	55		 push	 ebp
  00047	8b ec		 mov	 ebp, esp
  00049	51		 push	 ecx
  0004a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 34   : 	return ((timeGetTime() - startTime) * 3) / 50;

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00053	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _startTime
  00059	6b c0 03	 imul	 eax, 3
  0005c	33 d2		 xor	 edx, edx
  0005e	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00063	f7 f1		 div	 ecx

; 35   : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?GetTickCount@TimeMgrWin@@UAEKXZ ENDP			; TimeMgrWin::GetTickCount
_ticks$ = 8
_this$ = -4
?SetTickCount@TimeMgrWin@@UAEXK@Z PROC NEAR		; TimeMgrWin::SetTickCount

; 39   : {

  00069	55		 push	 ebp
  0006a	8b ec		 mov	 ebp, esp
  0006c	51		 push	 ecx
  0006d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 	startTime = (ticks * 50) / 3;

  00070	8b 45 08	 mov	 eax, DWORD PTR _ticks$[ebp]
  00073	6b c0 32	 imul	 eax, 50			; 00000032H
  00076	33 d2		 xor	 edx, edx
  00078	b9 03 00 00 00	 mov	 ecx, 3
  0007d	f7 f1		 div	 ecx
  0007f	a3 00 00 00 00	 mov	 DWORD PTR _startTime, eax

; 41   : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?SetTickCount@TimeMgrWin@@UAEXK@Z ENDP			; TimeMgrWin::SetTickCount
_this$ = -4
?GetMilliSec@TimeMgrWin@@UAEKXZ PROC NEAR		; TimeMgrWin::GetMilliSec

; 45   : {

  0008a	55		 push	 ebp
  0008b	8b ec		 mov	 ebp, esp
  0008d	51		 push	 ecx
  0008e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   : 	return timeGetTime();

  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 47   : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
?GetMilliSec@TimeMgrWin@@UAEKXZ ENDP			; TimeMgrWin::GetMilliSec
_TEXT	ENDS
PUBLIC	?EnableTimer@TimeMgrWin@@QAEXXZ			; TimeMgrWin::EnableTimer
EXTRN	__imp__timeSetEvent@20:NEAR
EXTRN	?enableMidi@@3HA:DWORD				; enableMidi
_TEXT	SEGMENT
_this$ = -4
?EnableTimer@TimeMgrWin@@QAEXXZ PROC NEAR		; TimeMgrWin::EnableTimer

; 51   : {

  0009b	55		 push	 ebp
  0009c	8b ec		 mov	 ebp, esp
  0009e	51		 push	 ecx
  0009f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 	startTime += timeGetTime() - disableTime;

  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  000a8	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _disableTime
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _startTime
  000b4	03 c8		 add	 ecx, eax
  000b6	89 0d 00 00 00
	00		 mov	 DWORD PTR _startTime, ecx

; 53   : 
; 54   : 	if (!enableMidi)

  000bc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?enableMidi@@3HA, 0 ; enableMidi
  000c3	75 02		 jne	 SHORT $L52637

; 55   : 		return;

  000c5	eb 2e		 jmp	 SHORT $L52636
$L52637:

; 56   : 
; 57   : 	if (!timerEnabled) {

  000c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timerEnabled, 0
  000ce	75 25		 jne	 SHORT $L52638

; 58   : 		timerId = timeSetEvent (16, 1, (LPTIMECALLBACK)lpTimerCallback,
; 59   : 										(DWORD)0, TIME_PERIODIC);

  000d0	6a 01		 push	 1
  000d2	6a 00		 push	 0
  000d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000da	50		 push	 eax
  000db	6a 01		 push	 1
  000dd	6a 10		 push	 16			; 00000010H
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeSetEvent@20
  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 60   : 		timerEnabled = True;

  000eb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _timerEnabled, 1
$L52638:
$L52636:

; 62   : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
?EnableTimer@TimeMgrWin@@QAEXXZ ENDP			; TimeMgrWin::EnableTimer
_TEXT	ENDS
PUBLIC	?DisableTimer@TimeMgrWin@@QAEXXZ		; TimeMgrWin::DisableTimer
EXTRN	__imp__timeKillEvent@4:NEAR
_TEXT	SEGMENT
_this$ = -4
?DisableTimer@TimeMgrWin@@QAEXXZ PROC NEAR		; TimeMgrWin::DisableTimer

; 66   : {

  000f9	55		 push	 ebp
  000fa	8b ec		 mov	 ebp, esp
  000fc	51		 push	 ecx
  000fd	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 	disableTime = timeGetTime();

  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00106	a3 00 00 00 00	 mov	 DWORD PTR _disableTime, eax

; 68   : 
; 69   : 	if (!enableMidi)

  0010b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?enableMidi@@3HA, 0 ; enableMidi
  00112	75 02		 jne	 SHORT $L52644

; 70   : 		return;

  00114	eb 20		 jmp	 SHORT $L52643
$L52644:

; 71   : 
; 72   : 	if (timerEnabled) {

  00116	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timerEnabled, 0
  0011d	74 17		 je	 SHORT $L52645

; 73   : 		timeKillEvent (timerId);

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00122	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00125	51		 push	 ecx
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeKillEvent@4

; 74   : 		timerEnabled = False;

  0012c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timerEnabled, 0
$L52645:
$L52643:

; 76   : }

  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?DisableTimer@TimeMgrWin@@QAEXXZ ENDP			; TimeMgrWin::DisableTimer
_TEXT	ENDS
PUBLIC	?SetCheckTime@TimeMgrWin@@QAEXHPAH@Z		; TimeMgrWin::SetCheckTime
_TEXT	SEGMENT
_this$ = -4
?SetCheckTime@TimeMgrWin@@QAEXHPAH@Z PROC NEAR		; TimeMgrWin::SetCheckTime

; 81   : {

  0013a	55		 push	 ebp
  0013b	8b ec		 mov	 ebp, esp
  0013d	51		 push	 ecx
  0013e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 84   : }

  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 08 00	 ret	 8
?SetCheckTime@TimeMgrWin@@QAEXHPAH@Z ENDP		; TimeMgrWin::SetCheckTime
_TEXT	ENDS
END

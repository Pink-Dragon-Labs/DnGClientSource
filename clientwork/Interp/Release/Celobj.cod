	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celobj.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@NAAD@Magellan?5MSWHEEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FPAF@MouseZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CLBL@MSWHEEL_ROLLMSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DLPD@MSH_WHEELSUPPORT_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODOJ@MSH_SCROLL_LINES_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EDBF@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FGFK@CLSID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DMDD@?5?9?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOFL@Interface?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FNJL@?$CICLSID?$DP?$DP?$DP?$CJ?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DLIL@?5?9?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@NKPL@Unknown?5Error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@HOAP@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@BJHN@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MDHG@?4tlb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLHD@oleaut32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FJNM@UnRegisterTypeLib?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CDEE@DllGetVersion?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FDEG@comctl32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKNA@shell32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@ILEN@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@JLLA@?3Jan?3January?3Feb?3February?3Mar?3Ma@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCCD@true?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELCB@no?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LGKI@yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKHJ@C?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPIO@IDispatch?5error?5?$CD?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NADL@Unknown?5error?50x?$CF0lX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MHAC@?$CFp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CFAI@0123456789abcdefABCDEF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KFAL@E?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KMAE@?0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MMAA@missing?5locale?5facet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __tcscmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcscoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextWindow@@YAPAUHWND__@@PAU1@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawState@@YGHPAUHDC__@@PAUHBRUSH__@@P6GH0JIHH@ZJIHHHHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextPtr@CSimpleList@@QBEPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CByteArray@@QBEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CByteArray@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CWordArray@@QBEGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CWordArray@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CDWordArray@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CDWordArray@@QAEAAKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CUIntArray@@QBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CUIntArray@@QAEAAIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ACPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CObArray@@QBEPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CObArray@@QAEAAPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CStringArray@@QBE?AVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CStringArray@@QAEAAVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSimpleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSimpleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMemoryException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemoryException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNotSupportedException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNotSupportedException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCArchiveException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFileException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFileException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFilePath@CFile@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CString@@IBEPAUCStringData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CString@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@CString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDays@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalHours@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalMinutes@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalSeconds@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwapLeftRight@CRect@@SAXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCResourceException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CResourceException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCUserException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CUserException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPen@@SGPAV1@PAUHPEN__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBrush@@SGPAV1@PAUHBRUSH__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPalette@@SGPAV1@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHmenu@CMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CListBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCheckListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCheckListBox@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComboBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemData@CComboBox@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CComboBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEdit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCommonDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCommonDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintSelection@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintRange@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorders@CStatusBar@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRectTracker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmapButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmapButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualGUID@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCOleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1COleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleCurrency@@QAEXW4CurrencyStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4COleDateTime@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTime@@QAEXW4DateTimeStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0COleDateTimeSpan@@QAE@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTimeSpan@@QAEXW4DateTimeSpanStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@COleSafeArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDateTimeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonthCalCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDragListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatusBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListCtrl@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHotKeyCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpinButtonCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSliderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAnimateCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRichEditCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCReBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CReBarCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBoxEx@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIPAddressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2BSTR@@YAPAGPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlTrace2@ATL@@YAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualGUID@ATL@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YAHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReplaceSingleQuote@CComModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@CComBSTR@ATL@@QAE_NPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalClear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlAdvise@ATL@@YGJPAUIUnknown@@0ABU_GUID@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_NextObjectMapEntry@ATL@@YAPAU_ATL_OBJMAP_ENTRY@1@PAU_ATL_MODULE@1@PAU21@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleInit@ATL@@YGJPAU_ATL_MODULE@1@PAU_ATL_OBJMAP_ENTRY@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterClassObjects@ATL@@YGJPAU_ATL_MODULE@1@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRevokeClassObjects@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleGetClassObject@ATL@@YGJPAU_ATL_MODULE@1@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleTerm@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddTermFunc@ATL@@YGJPAU_ATL_MODULE@1@P6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterServer@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServerEx@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServer@ATL@@YGJPAU_ATL_MODULE@1@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUpdateRegistryFromResourceD@ATL@@YGJPAU_ATL_MODULE@1@PBGHPAU_ATL_REGMAP_ENTRY@1@PAUIRegistrar@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleLoadTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBGPAPAGPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddCreateWndData@ATL@@YGXPAU_ATL_MODULE@1@PAU_AtlCreateWndData@1@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleExtractCreateWndData@ATL@@YGPAXPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBDPAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@invalid_argument@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0invalid_argument@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YAGDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@failure@ios_base@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7_bstr_t@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Compare@_bstr_t@@ABEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@Data_t@_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Assign@Data_t@_bstr_t@@QAEXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@Data_t@_bstr_t@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8_variant_t@@QBE_NPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@_variant_t@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonikerFile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDocument@COleServerItem@@QBEPAVCOleServerDoc@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ASOLPalette@@QAEAAVRgb24F@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0HunkPalette@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsOne@Ratio@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPic@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?View@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Loop@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cel@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Pic@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Color@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Handle@Bitmap@@QBE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetCel@Bitmap@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLoop@Bitmap@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObj@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObj@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObj@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObj@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjPic@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Bitmap@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Scale@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?X1@ScreenItem@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Y1@ScreenItem@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4Screen@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?XDim@Buffer@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CycleMap@PaletteMgrIndex@@UBEPBEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPercent@PaletteMgrIndex@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPause@PaletteMgrIndex@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PaletteMgrTrue@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrTrue@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrTrue@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrIWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateHardware@PaletteMgrIWin@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrIWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrTWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateHardware@PaletteMgrTWin@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrTWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Cursor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Cursor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjArray@CelObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjArray@CelObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CelObjView@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CelObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjPic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CelObjPic@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjPic@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPointContainer@@@ATL@@QAEPAPAUIConnectionPointContainer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPointContainer@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPointContainer@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPoint@@@ATL@@QAEPAPAUIConnectionPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPoint@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPoint@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIRegistrar@@@ATL@@QAEPAPAUIRegistrar@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIRegistrar@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIRegistrar@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIRegistrar@@@ATL@@QAEPAUIRegistrar@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInterfacePtr@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QBEPAUIMoniker@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QBEPAUIBinding@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@G@std@@QAEPAGIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@G@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YADDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@GU?$char_traits@G@std@@@1@0IPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?isdigit@std@@YA_NDABVlocale@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@G@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@D@std@@@std@@SAPAV?$ctype@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@G@std@@@std@@SAPAV?$ctype@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAPAV?$numpunct@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAPAV?$numpunct@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPADPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPAGPBDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_eab22ac1_30c1_11cf_a7eb_0000c05bae0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d66d6f98_cdaa_11d0_b822_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9860_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000117_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000113_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d8_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1f8352c0_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMonthCalCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f220_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f208_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc9_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa5_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000192_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000128_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000140_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7PaletteMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000002f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CEdit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000122_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_920ff31f_ca25_451a_9738_3444fc206bcc
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b283_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CScrollBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bcc7_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTabCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b3e7c340_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d49_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_85cb6900_4d95_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4f7ae600_0142_11d3_9dcf_89be4efb591e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBoxEx@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f203_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1ac3d9f0_175c_11d1_95be_00609797ea4f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_012dd920_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHotKeyCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020403_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f311_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1008c4a0_7613_11cf_9af1_0020af6e72f4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020410_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020404_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVoverflow_error@std@@@8??0overflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f23b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b15b8dc1_c7e1_11d0_8680_00aa00bdcb71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f52e2b61_18a1_11d1_b105_00805f49916b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3d7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2aa_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1de_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9d5_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000025_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000019_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2a4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d8_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_948c5ad3_c58d_11d0_9c0b_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020406_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_bc40bec1_c493_11d0_831b_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd21_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ee11629b_36df_11d3_9dd0_89d6dbbba800
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9bfbbc02_eff1_101a_84ed_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f03340_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_63cdbcb0_c1b1_11d0_9336_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_bb1a2ae1_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0c733a30_2a1c_11ce_ade5_00aa0044773d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65ce_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cb5bdc81_93c1_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f218_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f230_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ef_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSimpleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f377_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0e6d4d92_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ca478da0_3920_11d3_9dd0_8067e4a06603
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eae1ba61_a4ed_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9eb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55882_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVrange_error@std@@@8??0range_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f35f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3fd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd23_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a3ccedf3_2de2_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d10f6761_83e9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0002e011_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28d_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1ff_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f240_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1da_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCommonDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000129_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88a05c00_f000_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ee_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d5f56b60_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToolBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_08ec3e00_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af280b6_cb3f_11d0_891e_00c04fb6bfc4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9e7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020d03_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_85bd8e82_0fba_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CNotSupportedException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3fc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d40_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_359f3441_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f28b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_afa0dc11_c313_11d0_831a_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000023_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e0e270c1_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVbad_typeid@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c9_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1c2056cc_5ef4_101b_8bc8_00aa003e3b29
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2c2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fbf23b80_e3f0_101b_8488_00aa003e56f8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d9_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f1_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7SOL_Cursor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_b722bcc5_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSliderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_618736e0_3c3d_11cf_810c_00aa00389b71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000190_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDragListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3af24292_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020d00_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000191_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_f77459a0_bf9a_11cf_ba4e_00c04fd70816
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7PaletteMgrTrue@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f322_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f266_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a41_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4425_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$ctype@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@D@std@@@std@@0PAV?$numpunct@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@G@std@@@std@@0PAV?$numpunct@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@D@std@@@std@@0PAV?$ctype@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@G@std@@@std@@0PAV?$ctype@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f29c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_359f3443_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc8_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e003_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f206_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f212_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020402_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ed_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f490eb00_1240_11d1_9888_006097deacf9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_typeid@std@@@8??0bad_typeid@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CBitmapButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1dd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f373_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214ea_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d7_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ed_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000112_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3f7f31ac_e15f_11d0_9c25_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000118_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f25f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fac32c80_cbe4_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7bf80980_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eb0fe172_1a3a_11d0_89b3_00a0c90a90ac
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_729fe2f8_1ea8_11d1_8f85_00c04fc2fbe1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f202_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ac60f6a0_0fd9_11d0_99cb_00c04fd64497
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bccb_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f216_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_04598fc6_866c_11cf_ab7c_00aa00c08fcf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7COleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_332c4426_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28c_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ee_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e013_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_594f31d0_7f19_11d0_b194_00a0c90dc8bf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_6d5140c1_7436_11ce_8034_00aa006009fa
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f313_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88e39e80_3578_11cf_ae69_08002b2e1262
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_742b0e01_14e6_101b_914e_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgrIWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAnimateCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f37e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVunderflow_error@std@@@8??0underflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9c7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e7a1af80_4d96_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpinButtonCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ca04b7e6_0d21_11d1_8cc5_00c04fc2b085
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b288_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000126_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_163bb1e0_6e00_11cf_837a_48dc04c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_2a342fc2_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d8f015c0_c278_11ce_a49e_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd3f23c0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_df0b3d60_548f_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a7aba9c1_8983_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_744129e0_cbe5_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_68284faa_6a48_11d0_8c78_00c04fd918b4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000010_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CStatusBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3d5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_626fc520_a41e_11cf_a731_00a0c9082637
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_91a565c1_e38f_11d0_94bf_00a0c9055cbf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2ad_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d31_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56a34_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000012a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af24290_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1e0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f35c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a9d758a0_4617_11cf_95fc_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b8da6310_e19b_11d0_933c_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_db01a1e3_a42b_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_65725580_9b5d_11d0_9bfe_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_539698a0_cdca_11cf_a5eb_00aa0047a063
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d30c1661_cdaf_11d0_8a3e_00c04fc9e26e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3dc39d1d_c030_11d0_b81b_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d46_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_37deb787_2d9b_11d3_9dd0_c423e6542e10
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_922eada0_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_69d14c80_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFileException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CReBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000011c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_9c2cad80_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_70bdde00_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f3cf_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CArchiveException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000121_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CResourceException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_d9f1e15a_ccdb_11d0_9c0c_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa2_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002df05_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRectTracker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f209_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000020_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f319_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f375_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f369_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cf51ed10_62fe_11cf_bf86_00a0c9034836
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_894ad3b0_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_baa342a0_2ded_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f29f6bc0_5021_11ce_aa15_00006901293f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e8_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f315_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f265_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMemoryException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cd_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d001f200_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e002_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_085fb2c0_0df8_11d1_8f4b_00a0c905413f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9e4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55dd814e_a1b7_4808_9625_4f75a3fad8a7
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f569d0_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ec_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214ee_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fa_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b285_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f361_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214eb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0c6c4200_c589_11d0_999a_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000139_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55881_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4ef6100a_af88_11d0_9846_00c04fc29993
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000002_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000138_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f7_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f372_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f5be2ee1_bfd7_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7PaletteMgrTWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020411_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020405_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRichEditCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDateTimeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f376_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f401_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d9e89500_30fa_11d0_b724_00aa006c1a01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_376bd3aa_3845_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f357_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f360_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a1_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c01387a_6ac2_4ef1_bda2_ec5d26e3b065
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_37d84f60_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_322982e0_0855_11d3_9dcf_ddfb3ab09e18
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cabb0da0_da57_11cf_9974_0020afd79762
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_c04d65d2_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7d688a70_c613_11d0_999b_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f378_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f383_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1cff0050_6fdd_11d0_9328_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bb1a2ae2_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_01e44665_24ac_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_6cfc9ba1_fe87_11d2_9dcf_ed29fafe371d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9ba05970_f6a8_11cf_a442_00a0c90a8f39
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcca_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_83c2d7a0_0de6_11d3_9dcf_9423f1b2561c
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonikerFile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_275c23e3_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVdomain_error@std@@@8??0domain_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28f_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000104_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000110_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f207_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d4c_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_25b15600_0115_11d0_bf0d_00aa00b8dfd2
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000127_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000022_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000016_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c6_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCheckListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000026_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55272a00_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28b_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4427_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_aa5b6a80_b834_11d0_932f_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_e0e270c0_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e6_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000101_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000029_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3127ca40_446e_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_55980ba0_35aa_11cf_b671_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a1faf330_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a4c65425_0f82_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CIPAddressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CUserException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a6ef9861_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9862_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000018_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000193_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000024_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f200_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_dce47f78_8a6c_4c6d_a6f7_8be4427127c4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f204_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ea_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd1ae5e0_a6ae_11ce_bd37_504200c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000102_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f0_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a42_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f24f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000001d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000194_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHeaderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_99caf010_415e_11cf_8814_00aa00b569f5
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_47d2657a_7b27_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ec_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f211_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f205_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0e6d4d90_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00021500_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc6_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_89bcb740_6119_101a_bcb7_00dd010655af
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bcfce0a0_ec17_11d0_8d10_00a0c90f2719
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d6_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000119_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000111_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000105_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000125_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7bf80981_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b289_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65d0_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_972de6c1_8b09_11d2_b652_a1fd6cc34260
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f244_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56afc_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000103_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000013e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e1_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000003_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f1db8392_7331_11d0_8c99_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_c4d244b0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2eb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?GUID_ATLVer30@ATL@@3U_GUID@@A			; ATL::GUID_ATLVer30
PUBLIC	?m_libid@CComModule@ATL@@2U_GUID@@A		; ATL::CComModule::m_libid
PUBLIC	_LIBID_ATLLib
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	?timeStamp@CelObj@@2JA				; CelObj::timeStamp
PUBLIC	?array@CelObj@@2UCelObjArray@1@A		; CelObj::array
PUBLIC	?scaleX1@CelObj@@2PAHA				; CelObj::scaleX1
PUBLIC	?scaleY1@CelObj@@2PAHA				; CelObj::scaleY1
PUBLIC	?line@CelObj@@2PAEA				; CelObj::line
PUBLIC	?scaleX@CelObj@@2PAHA				; CelObj::scaleX
PUBLIC	?scaleY@CelObj@@2PAHA				; CelObj::scaleY
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_LIBID_ACTIVESKINLib
PUBLIC	_IID_ISkinForm
PUBLIC	_IID_ISkinObjectDisp
PUBLIC	_IID_ISkinSource
PUBLIC	_DIID__ISkinFormEvents
PUBLIC	_IID_ISkinFormEvents_Sink
PUBLIC	_CLSID_SkinForm
PUBLIC	_DIID__ISkinObjectDispEvents
PUBLIC	_IID_ICOMScript
PUBLIC	_IID_IComMorph
PUBLIC	_IID_IComMoveSize
PUBLIC	_IID_ISkinButton
PUBLIC	_CLSID_SkinObject
PUBLIC	_CLSID_COMScript
PUBLIC	_CLSID_ComMorph
PUBLIC	_CLSID_ComMoveSize
PUBLIC	_DIID__ISkinButtonEvents
PUBLIC	_CLSID_SkinButton
PUBLIC	_IID_ISkinPanel
PUBLIC	_DIID__ISkinPanelEvents
PUBLIC	_IID_ISkinLabel
PUBLIC	_CLSID_SkinPanel
PUBLIC	_DIID__ISkinLabelEvents
PUBLIC	_IID_ISkinScrollBar
PUBLIC	_CLSID_SkinLabel
PUBLIC	_DIID__ISkinScrollBarEvents
PUBLIC	_CLSID_SkinScrollBar
PUBLIC	_DIID__ISkinSourceEvents
PUBLIC	_IID_ISkinStorage
PUBLIC	_IID_ISkinPopup
PUBLIC	_IID_IComTransitions
PUBLIC	_IID_ISkinEvent
PUBLIC	_IID_IComProcTextures
PUBLIC	_IID_IComFilters
PUBLIC	_CLSID_SkinSource
PUBLIC	_CLSID_SkinStorage
PUBLIC	_CLSID_SkinPopup
PUBLIC	_CLSID_ComTransitions
PUBLIC	_CLSID_SkinEvent
PUBLIC	_CLSID_ComProcTextures
PUBLIC	_CLSID_ComFilters
PUBLIC	?gLoadedView@@3HA				; gLoadedView
PUBLIC	_IID_IInternalConnection
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CComModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CComModule::m_libid
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
_BSS	SEGMENT
?array@CelObj@@2UCelObjArray@1@A DB 0320H DUP (?)	; CelObj::array
?scaleX1@CelObj@@2PAHA DD 01000H DUP (?)		; CelObj::scaleX1
?scaleY1@CelObj@@2PAHA DD 01008H DUP (?)		; CelObj::scaleY1
?line@CelObj@@2PAEA DB 01000H DUP (?)			; CelObj::line
?scaleX@CelObj@@2PAHA DD 01H DUP (?)			; CelObj::scaleX
?scaleY@CelObj@@2PAHA DD 01H DUP (?)			; CelObj::scaleY
?gLoadedView@@3HA DD 01H DUP (?)			; gLoadedView
_BSS	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT
?GUID_ATLVer30@ATL@@3U_GUID@@A DD 0b62f5910H		; ATL::GUID_ATLVer30
	DW	06528H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT
_LIBID_ACTIVESKINLib DD 0972de6b5H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT
_IID_ISkinForm DD 0972de6c1H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT
_IID_ISkinObjectDisp DD 06cfc9ba1H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT
_IID_ISkinSource DD 037deb787H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT
_DIID__ISkinFormEvents DD 0972de6c3H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT
_IID_ISkinFormEvents_Sink DD 053fa8d31H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT
_CLSID_SkinForm DD 0972de6c2H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT
_DIID__ISkinObjectDispEvents DD 06cfc9ba3H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT
_IID_ICOMScript DD 04f7ae600H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT
_IID_IComMorph DD 0322982e0H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT
_IID_IComMoveSize DD 083c2d7a0H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT
_IID_ISkinButton DD 053fa8d40H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT
_CLSID_SkinObject DD 06cfc9ba2H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT
_CLSID_COMScript DD 04f7ae601H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT
_CLSID_ComMorph DD 0322982e1H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT
_CLSID_ComMoveSize DD 083c2d7a1H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT
_DIID__ISkinButtonEvents DD 053fa8d42H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT
_CLSID_SkinButton DD 053fa8d41H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT
_IID_ISkinPanel DD 053fa8d46H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT
_DIID__ISkinPanelEvents DD 053fa8d48H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT
_IID_ISkinLabel DD 053fa8d49H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT
_CLSID_SkinPanel DD 053fa8d47H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT
_DIID__ISkinLabelEvents DD 053fa8d4bH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT
_IID_ISkinScrollBar DD 053fa8d4cH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT
_CLSID_SkinLabel DD 053fa8d4aH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT
_DIID__ISkinScrollBarEvents DD 053fa8d4eH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT
_CLSID_SkinScrollBar DD 053fa8d4dH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT
_DIID__ISkinSourceEvents DD 037deb788H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT
_IID_ISkinStorage DD 0ee11629bH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT
_IID_ISkinPopup DD 0ca478da0H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT
_IID_IComTransitions DD 03c01387aH
	DW	06ac2H
	DW	04ef1H
	DB	0bdH
	DB	0a2H
	DB	0ecH
	DB	05dH
	DB	026H
	DB	0e3H
	DB	0b0H
	DB	065H
CONST	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT
_IID_ISkinEvent DD 055dd814eH
	DW	0a1b7H
	DW	04808H
	DB	096H
	DB	025H
	DB	04fH
	DB	075H
	DB	0a3H
	DB	0faH
	DB	0d8H
	DB	0a7H
CONST	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT
_IID_IComProcTextures DD 0dce47f78H
	DW	08a6cH
	DW	04c6dH
	DB	0a6H
	DB	0f7H
	DB	08bH
	DB	0e4H
	DB	042H
	DB	071H
	DB	027H
	DB	0c4H
CONST	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT
_IID_IComFilters DD 0920ff31fH
	DW	0ca25H
	DW	0451aH
	DB	097H
	DB	038H
	DB	034H
	DB	044H
	DB	0fcH
	DB	020H
	DB	06bH
	DB	0ccH
CONST	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT
_CLSID_SkinSource DD 053fa8d44H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT
_CLSID_SkinStorage DD 0ee11629cH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT
_CLSID_SkinPopup DD 0ca478da1H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT
_CLSID_ComTransitions DD 03c6d21d6H
	DW	07470H
	DW	04555H
	DB	0a8H
	DB	0fbH
	DB	06cH
	DB	022H
	DB	092H
	DB	0b3H
	DB	09cH
	DB	046H
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT
_CLSID_SkinEvent DD 08f59c2a4H
	DW	04c01H
	DW	04451H
	DB	0beH
	DB	05bH
	DB	09H
	DB	078H
	DB	07bH
	DB	012H
	DB	03aH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT
_CLSID_ComProcTextures DD 0bf1b5d50H
	DW	03c5cH
	DW	048ceH
	DB	0b9H
	DB	091H
	DB	0eH
	DB	086H
	DB	0d2H
	DB	06fH
	DB	06fH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT
_CLSID_ComFilters DD 0c4d7e3c7H
	DW	03c26H
	DW	04052H
	DB	0a9H
	DB	093H
	DB	071H
	DB	0e5H
	DB	00H
	DB	0eaH
	DB	08cH
	DB	05H
CONST	ENDS
_DATA	SEGMENT
?timeStamp@CelObj@@2JA DD 01H				; CelObj::timeStamp
_DATA	ENDS
CRT$XCU	SEGMENT
_$S312	DD	FLAT:_$E311
CRT$XCU	ENDS
_DATA	SEGMENT
_?lastused@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4HA DD 0ffffffffH
_DATA	ENDS
_TEXT	SEGMENT
_$E311	PROC NEAR
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 _$E307
  00008	e8 00 00 00 00	 call	 _$E310
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E311	ENDP
_TEXT	ENDS
PUBLIC	??0CelObjArray@CelObj@@QAE@XZ			; CelObj::CelObjArray::CelObjArray
_TEXT	SEGMENT
_$E307	PROC NEAR

; 38   : CelObj::CelObjArray CelObj::array;

  0000f	55		 push	 ebp
  00010	8b ec		 mov	 ebp, esp
  00012	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  00017	e8 00 00 00 00	 call	 ??0CelObjArray@CelObj@@QAE@XZ ; CelObj::CelObjArray::CelObjArray
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_$E307	ENDP
_TEXT	ENDS
EXTRN	_atexit:NEAR
_TEXT	SEGMENT
_$E310	PROC NEAR
  0001e	55		 push	 ebp
  0001f	8b ec		 mov	 ebp, esp
  00021	68 00 00 00 00	 push	 OFFSET FLAT:_$E308
  00026	e8 00 00 00 00	 call	 _atexit
  0002b	83 c4 04	 add	 esp, 4
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_$E310	ENDP
_TEXT	ENDS
PUBLIC	??1CelObjArray@CelObj@@QAE@XZ			; CelObj::CelObjArray::~CelObjArray
_BSS	SEGMENT
_$S309	DB	01H DUP (?)
_BSS	ENDS
_TEXT	SEGMENT
_$E308	PROC NEAR
  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	33 c0		 xor	 eax, eax
  00035	a0 00 00 00 00	 mov	 al, BYTE PTR _$S309
  0003a	83 e0 01	 and	 eax, 1
  0003d	85 c0		 test	 eax, eax
  0003f	75 19		 jne	 SHORT $L118684
  00041	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _$S309
  00047	80 c9 01	 or	 cl, 1
  0004a	88 0d 00 00 00
	00		 mov	 BYTE PTR _$S309, cl
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  00055	e8 00 00 00 00	 call	 ??1CelObjArray@CelObj@@QAE@XZ ; CelObj::CelObjArray::~CelObjArray
$L118684:
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_$E308	ENDP
_TEXT	ENDS
PUBLIC	??1CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ	; CelObj::CelObjArray::CelObjArrayItem::~CelObjArrayItem
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
;	COMDAT ??1CelObjArray@CelObj@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObjArray@CelObj@@QAE@XZ PROC NEAR			; CelObj::CelObjArray::~CelObjArray, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 00 00 00 00	 push	 OFFSET FLAT:??1CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ ; CelObj::CelObjArray::CelObjArrayItem::~CelObjArrayItem
  0000c	6a 64		 push	 100			; 00000064H
  0000e	6a 08		 push	 8
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z	; `eh vector destructor iterator'
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??1CelObjArray@CelObj@@QAE@XZ ENDP			; CelObj::CelObjArray::~CelObjArray
_TEXT	ENDS
;	COMDAT ??1CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12
$T124765 = -4
$T124766 = -8
??1CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ PROC NEAR	; CelObj::CelObjArray::CelObjArrayItem::~CelObjArrayItem, COMDAT

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	delete cel;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d f8	 mov	 DWORD PTR $T124766[ebp], ecx
  00012	8b 55 f8	 mov	 edx, DWORD PTR $T124766[ebp]
  00015	89 55 fc	 mov	 DWORD PTR $T124765[ebp], edx
  00018	83 7d fc 00	 cmp	 DWORD PTR $T124765[ebp], 0
  0001c	74 11		 je	 SHORT $L124767
  0001e	6a 01		 push	 1
  00020	8b 45 fc	 mov	 eax, DWORD PTR $T124765[ebp]
  00023	8b 10		 mov	 edx, DWORD PTR [eax]
  00025	8b 4d fc	 mov	 ecx, DWORD PTR $T124765[ebp]
  00028	ff 12		 call	 DWORD PTR [edx]
  0002a	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
  0002d	eb 07		 jmp	 SHORT $L124768
$L124767:
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR -16+[ebp], 0
$L124768:

; 362  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??1CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ ENDP	; CelObj::CelObjArray::CelObjArrayItem::~CelObjArrayItem
_TEXT	ENDS
PUBLIC	??0CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ	; CelObj::CelObjArray::CelObjArrayItem::CelObjArrayItem
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:NEAR			; `eh vector constructor iterator'
;	COMDAT ??0CelObjArray@CelObj@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CelObjArray@CelObj@@QAE@XZ PROC NEAR			; CelObj::CelObjArray::CelObjArray, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 00 00 00 00	 push	 OFFSET FLAT:??1CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ ; CelObj::CelObjArray::CelObjArrayItem::~CelObjArrayItem
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??0CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ ; CelObj::CelObjArray::CelObjArrayItem::CelObjArrayItem
  00011	6a 64		 push	 100			; 00000064H
  00013	6a 08		 push	 8
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z	; `eh vector constructor iterator'
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0CelObjArray@CelObj@@QAE@XZ ENDP			; CelObj::CelObjArray::CelObjArray
_TEXT	ENDS
;	COMDAT ??0CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ PROC NEAR	; CelObj::CelObjArray::CelObjArrayItem::CelObjArrayItem, COMDAT

; 267  : 			CelObjArrayItem() : cel(NULL), timeStamp(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CelObjArrayItem@CelObjArray@CelObj@@QAE@XZ ENDP	; CelObj::CelObjArray::CelObjArrayItem::CelObjArrayItem
_TEXT	ENDS
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
PUBLIC	?ValidateControlTable@@YAXVMemID@@HHHPADH@Z	; ValidateControlTable
EXTRN	?Size@MemID@@QBEIXZ:NEAR			; MemID::Size
EXTRN	?Fatal@MsgMgr@@QAAXPADZZ:NEAR			; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
$SG118747 DB	'loaded', 00H
	ORG $+1
$SG118748 DB	'cached', 00H
	ORG $+1
$SG118749 DB	'Control data is invalid for %s view %d, %d, %d (%d, 0x%x'
	DB	') at %s(%d).', 00H
	ORG $+3
$SG118752 DB	'loaded', 00H
	ORG $+1
$SG118753 DB	'cached', 00H
	ORG $+1
$SG118754 DB	'Color data is invalid for %s view %d, %d, %d (%d, 0x%x) '
	DB	'at %s(%d).', 00H
_DATA	ENDS
_TEXT	SEGMENT
_viewID$ = 8
_v$ = 12
_l$ = 16
_c$ = 20
_file$ = 24
_line$ = 28
_viewPtr$ = -40
_loopPtr$ = -36
_celOffset$ = -4
_resBuffer$ = -48
_resBufferEnd$ = -44
_celPtr$ = -20
_controlData$ = -12
_colorData$ = -32
_controlTable$ = -28
_colorTable$ = -16
_vRun$ = -8
_i$ = -24
_controlPtr$118743 = -52
_colorPtr$118744 = -56
?ValidateControlTable@@YAXVMemID@@HHHPADH@Z PROC NEAR	; ValidateControlTable

; 47   : {

  0005c	55		 push	 ebp
  0005d	8b ec		 mov	 ebp, esp
  0005f	83 ec 40	 sub	 esp, 64			; 00000040H

; 48   : 	ViewHeader *viewPtr = (ViewHeader*) *viewID;

  00062	8d 4d 08	 lea	 ecx, DWORD PTR _viewID$[ebp]
  00065	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0006a	89 45 d8	 mov	 DWORD PTR _viewPtr$[ebp], eax

; 49   : 
; 50   : 	if ( viewPtr->loopCount <= l )

  0006d	8b 45 d8	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  00070	33 c9		 xor	 ecx, ecx
  00072	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00075	3b 4d 10	 cmp	 ecx, DWORD PTR _l$[ebp]
  00078	7f 0e		 jg	 SHORT $L118722

; 51   : 		l = viewPtr->loopCount - 1;

  0007a	8b 55 d8	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  0007d	33 c0		 xor	 eax, eax
  0007f	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00082	83 e8 01	 sub	 eax, 1
  00085	89 45 10	 mov	 DWORD PTR _l$[ebp], eax
$L118722:

; 52   : 
; 53   : 	LoopHeader* loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize * l + viewPtr->viewHeaderSize + 2);

  00088	8b 4d d8	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  0008b	33 d2		 xor	 edx, edx
  0008d	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  00090	0f af 55 10	 imul	 edx, DWORD PTR _l$[ebp]
  00094	8b 45 d8	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  00097	03 c2		 add	 eax, edx
  00099	8b 4d d8	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  0009c	33 d2		 xor	 edx, edx
  0009e	66 8b 11	 mov	 dx, WORD PTR [ecx]
  000a1	8d 44 10 02	 lea	 eax, DWORD PTR [eax+edx+2]
  000a5	89 45 dc	 mov	 DWORD PTR _loopPtr$[ebp], eax

; 54   : 
; 55   : 	if ( loopPtr->numCels <= c )

  000a8	8b 4d dc	 mov	 ecx, DWORD PTR _loopPtr$[ebp]
  000ab	33 d2		 xor	 edx, edx
  000ad	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  000b0	3b 55 14	 cmp	 edx, DWORD PTR _c$[ebp]
  000b3	7f 0e		 jg	 SHORT $L118726

; 56   : 		c = loopPtr->numCels - 1;

  000b5	8b 45 dc	 mov	 eax, DWORD PTR _loopPtr$[ebp]
  000b8	33 c9		 xor	 ecx, ecx
  000ba	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  000bd	83 e9 01	 sub	 ecx, 1
  000c0	89 4d 14	 mov	 DWORD PTR _c$[ebp], ecx
$L118726:

; 57   : 
; 58   : 	long celOffset = loopPtr->celOffset + c * viewPtr->celHeaderSize;

  000c3	8b 55 d8	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  000c6	33 c0		 xor	 eax, eax
  000c8	8a 42 0d	 mov	 al, BYTE PTR [edx+13]
  000cb	8b 4d 14	 mov	 ecx, DWORD PTR _c$[ebp]
  000ce	0f af c8	 imul	 ecx, eax
  000d1	8b 55 dc	 mov	 edx, DWORD PTR _loopPtr$[ebp]
  000d4	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000d7	03 c1		 add	 eax, ecx
  000d9	89 45 fc	 mov	 DWORD PTR _celOffset$[ebp], eax

; 59   : 
; 60   : 	uchar *resBuffer = (uchar *)*viewID;

  000dc	8d 4d 08	 lea	 ecx, DWORD PTR _viewID$[ebp]
  000df	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  000e4	89 45 d0	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 61   : 	uchar *resBufferEnd = resBuffer + viewID.Size();

  000e7	8d 4d 08	 lea	 ecx, DWORD PTR _viewID$[ebp]
  000ea	e8 00 00 00 00	 call	 ?Size@MemID@@QBEIXZ	; MemID::Size
  000ef	8b 4d d0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  000f2	03 c8		 add	 ecx, eax
  000f4	89 4d d4	 mov	 DWORD PTR _resBufferEnd$[ebp], ecx

; 62   : 
; 63   : 	CelHeader* celPtr = (CelHeader*) (resBuffer + celOffset);

  000f7	8b 55 d0	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  000fa	03 55 fc	 add	 edx, DWORD PTR _celOffset$[ebp]
  000fd	89 55 ec	 mov	 DWORD PTR _celPtr$[ebp], edx

; 64   : 	uchar* controlData = resBuffer + celPtr->controlOffset;

  00100	8b 45 ec	 mov	 eax, DWORD PTR _celPtr$[ebp]
  00103	8b 4d d0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  00106	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  00109	89 4d f4	 mov	 DWORD PTR _controlData$[ebp], ecx

; 65   : 	uchar* colorData = resBuffer + celPtr->colorOffset;

  0010c	8b 55 ec	 mov	 edx, DWORD PTR _celPtr$[ebp]
  0010f	8b 45 d0	 mov	 eax, DWORD PTR _resBuffer$[ebp]
  00112	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  00115	89 45 e0	 mov	 DWORD PTR _colorData$[ebp], eax

; 66   : 
; 67   : 	long* controlTable = (long *) (resBuffer + celPtr->rowTableOffset);

  00118	8b 4d ec	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  0011b	8b 55 d0	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  0011e	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  00121	89 55 e4	 mov	 DWORD PTR _controlTable$[ebp], edx

; 68   : 	long* colorTable = controlTable + celPtr->yDim;

  00124	8b 45 ec	 mov	 eax, DWORD PTR _celPtr$[ebp]
  00127	33 c9		 xor	 ecx, ecx
  00129	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  0012d	8b 55 e4	 mov	 edx, DWORD PTR _controlTable$[ebp]
  00130	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00133	89 45 f0	 mov	 DWORD PTR _colorTable$[ebp], eax

; 69   : 	int vRun = celPtr->yDim;

  00136	8b 4d ec	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  00139	33 d2		 xor	 edx, edx
  0013b	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  0013f	89 55 f8	 mov	 DWORD PTR _vRun$[ebp], edx

; 70   : 
; 71   : //	msgMgr->Mono ( "size = %d, %d (%d, %d, %d)\n", celPtr->xDim, celPtr->yDim, v, l, c );
; 72   : 
; 73   : 	for (int i = 0;i<vRun; i++) {

  00142	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00149	eb 09		 jmp	 SHORT $L118740
$L118741:
  0014b	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  0014e	83 c0 01	 add	 eax, 1
  00151	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$L118740:
  00154	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  00157	3b 4d f8	 cmp	 ecx, DWORD PTR _vRun$[ebp]
  0015a	0f 8d e8 00 00
	00		 jge	 $L118742

; 74   : 		// Find the row data
; 75   : 		uchar* controlPtr = controlData + controlTable[i];

  00160	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  00163	8b 45 e4	 mov	 eax, DWORD PTR _controlTable$[ebp]
  00166	8b 4d f4	 mov	 ecx, DWORD PTR _controlData$[ebp]
  00169	03 0c 90	 add	 ecx, DWORD PTR [eax+edx*4]
  0016c	89 4d cc	 mov	 DWORD PTR _controlPtr$118743[ebp], ecx

; 76   : 		uchar* colorPtr = colorData + colorTable[i];

  0016f	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  00172	8b 45 f0	 mov	 eax, DWORD PTR _colorTable$[ebp]
  00175	8b 4d e0	 mov	 ecx, DWORD PTR _colorData$[ebp]
  00178	03 0c 90	 add	 ecx, DWORD PTR [eax+edx*4]
  0017b	89 4d c8	 mov	 DWORD PTR _colorPtr$118744[ebp], ecx

; 77   : 
; 78   : 		if ( controlPtr < resBuffer || controlPtr > resBufferEnd ) {

  0017e	8b 55 cc	 mov	 edx, DWORD PTR _controlPtr$118743[ebp]
  00181	3b 55 d0	 cmp	 edx, DWORD PTR _resBuffer$[ebp]
  00184	72 08		 jb	 SHORT $L118746
  00186	8b 45 cc	 mov	 eax, DWORD PTR _controlPtr$118743[ebp]
  00189	3b 45 d4	 cmp	 eax, DWORD PTR _resBufferEnd$[ebp]
  0018c	76 53		 jbe	 SHORT $L118745
$L118746:

; 79   : 			msgMgr->Fatal ( "Control data is invalid for %s view %d, %d, %d (%d, 0x%x) at %s(%d).", gLoadedView? "loaded" : "cached", v, l, c, i, controlTable[i], file, line );

  0018e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLoadedView@@3HA, 0 ; gLoadedView
  00195	74 09		 je	 SHORT $L124773
  00197	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR -60+[ebp], OFFSET FLAT:$SG118747
  0019e	eb 07		 jmp	 SHORT $L124774
$L124773:
  001a0	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR -60+[ebp], OFFSET FLAT:$SG118748
$L124774:
  001a7	8b 4d 1c	 mov	 ecx, DWORD PTR _line$[ebp]
  001aa	51		 push	 ecx
  001ab	8b 55 18	 mov	 edx, DWORD PTR _file$[ebp]
  001ae	52		 push	 edx
  001af	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  001b2	8b 4d e4	 mov	 ecx, DWORD PTR _controlTable$[ebp]
  001b5	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  001b8	52		 push	 edx
  001b9	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  001bc	50		 push	 eax
  001bd	8b 4d 14	 mov	 ecx, DWORD PTR _c$[ebp]
  001c0	51		 push	 ecx
  001c1	8b 55 10	 mov	 edx, DWORD PTR _l$[ebp]
  001c4	52		 push	 edx
  001c5	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  001c8	50		 push	 eax
  001c9	8b 4d c4	 mov	 ecx, DWORD PTR -60+[ebp]
  001cc	51		 push	 ecx
  001cd	68 00 00 00 00	 push	 OFFSET FLAT:$SG118749
  001d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  001d8	52		 push	 edx
  001d9	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  001de	83 c4 28	 add	 esp, 40			; 00000028H
$L118745:

; 81   : 
; 82   : 		if ( colorPtr < resBuffer || colorPtr > resBufferEnd ) {

  001e1	8b 45 c8	 mov	 eax, DWORD PTR _colorPtr$118744[ebp]
  001e4	3b 45 d0	 cmp	 eax, DWORD PTR _resBuffer$[ebp]
  001e7	72 08		 jb	 SHORT $L118751
  001e9	8b 4d c8	 mov	 ecx, DWORD PTR _colorPtr$118744[ebp]
  001ec	3b 4d d4	 cmp	 ecx, DWORD PTR _resBufferEnd$[ebp]
  001ef	76 52		 jbe	 SHORT $L118750
$L118751:

; 83   : 			msgMgr->Fatal ( "Color data is invalid for %s view %d, %d, %d (%d, 0x%x) at %s(%d).", gLoadedView? "loaded" : "cached", v, l, c, i, colorTable[i], file, line );

  001f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLoadedView@@3HA, 0 ; gLoadedView
  001f8	74 09		 je	 SHORT $L124775
  001fa	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR -64+[ebp], OFFSET FLAT:$SG118752
  00201	eb 07		 jmp	 SHORT $L124776
$L124775:
  00203	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR -64+[ebp], OFFSET FLAT:$SG118753
$L124776:
  0020a	8b 55 1c	 mov	 edx, DWORD PTR _line$[ebp]
  0020d	52		 push	 edx
  0020e	8b 45 18	 mov	 eax, DWORD PTR _file$[ebp]
  00211	50		 push	 eax
  00212	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  00215	8b 55 f0	 mov	 edx, DWORD PTR _colorTable$[ebp]
  00218	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0021b	50		 push	 eax
  0021c	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0021f	51		 push	 ecx
  00220	8b 55 14	 mov	 edx, DWORD PTR _c$[ebp]
  00223	52		 push	 edx
  00224	8b 45 10	 mov	 eax, DWORD PTR _l$[ebp]
  00227	50		 push	 eax
  00228	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0022b	51		 push	 ecx
  0022c	8b 55 c0	 mov	 edx, DWORD PTR -64+[ebp]
  0022f	52		 push	 edx
  00230	68 00 00 00 00	 push	 OFFSET FLAT:$SG118754
  00235	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00240	83 c4 28	 add	 esp, 40			; 00000028H
$L118750:

; 85   : }

  00243	e9 03 ff ff ff	 jmp	 $L118741
$L118742:

; 86   : }

  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c3		 ret	 0
?ValidateControlTable@@YAXVMemID@@HHHPADH@Z ENDP	; ValidateControlTable
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
EXTRN	_memMgr:DWORD
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
PUBLIC	?ValidateControlTable@@YAXHHHPADH@Z		; ValidateControlTable
EXTRN	?resMgr@@3PAVResourceMgr@@A:DWORD		; resMgr
_TEXT	SEGMENT
$T124780 = -8
_v$ = 8
_l$ = 12
_c$ = 16
_file$ = 20
_line$ = 24
_viewID$ = -4
?ValidateControlTable@@YAXHHHPADH@Z PROC NEAR		; ValidateControlTable

; 89   : {

  0024c	55		 push	 ebp
  0024d	8b ec		 mov	 ebp, esp
  0024f	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 90   : 	MemID viewID = resMgr->Get(MemResView, v);

  00252	6a 00		 push	 0
  00254	66 8b 45 08	 mov	 ax, WORD PTR _v$[ebp]
  00258	50		 push	 eax
  00259	6a 00		 push	 0
  0025b	8d 4d f8	 lea	 ecx, DWORD PTR $T124780[ebp]
  0025e	51		 push	 ecx
  0025f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00265	8b 02		 mov	 eax, DWORD PTR [edx]
  00267	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  0026d	ff 50 20	 call	 DWORD PTR [eax+32]
  00270	50		 push	 eax
  00271	8d 4d fc	 lea	 ecx, DWORD PTR _viewID$[ebp]
  00274	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 91   : 	ValidateControlTable ( viewID, v, l, c, file, line );

  00279	8b 4d 18	 mov	 ecx, DWORD PTR _line$[ebp]
  0027c	51		 push	 ecx
  0027d	8b 55 14	 mov	 edx, DWORD PTR _file$[ebp]
  00280	52		 push	 edx
  00281	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  00284	50		 push	 eax
  00285	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00288	51		 push	 ecx
  00289	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0028c	52		 push	 edx
  0028d	51		 push	 ecx
  0028e	8b cc		 mov	 ecx, esp
  00290	8d 45 fc	 lea	 eax, DWORD PTR _viewID$[ebp]
  00293	50		 push	 eax
  00294	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00299	e8 00 00 00 00	 call	 ?ValidateControlTable@@YAXVMemID@@HHHPADH@Z ; ValidateControlTable
  0029e	83 c4 18	 add	 esp, 24			; 00000018H

; 92   : }

  002a1	8b e5		 mov	 esp, ebp
  002a3	5d		 pop	 ebp
  002a4	c3		 ret	 0
?ValidateControlTable@@YAXHHHPADH@Z ENDP		; ValidateControlTable
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
PUBLIC	?CheckBuffer@@YAHPAJ0PAEH@Z			; CheckBuffer
_TEXT	SEGMENT
?CheckBuffer@@YAHPAJ0PAEH@Z PROC NEAR			; CheckBuffer

; 95   : int CheckBuffer(long *ptr, long *ptrA, unsigned char *end, int count) {

  002a5	55		 push	 ebp
  002a6	8b ec		 mov	 ebp, esp

; 96   : 	return 1;

  002a8	b8 01 00 00 00	 mov	 eax, 1

; 97   : }

  002ad	5d		 pop	 ebp
  002ae	c3		 ret	 0
?CheckBuffer@@YAHPAJ0PAEH@Z ENDP			; CheckBuffer
_TEXT	ENDS
PUBLIC	?ValidateView@@YAXVMemID@@HPADH@Z		; ValidateView
_DATA	SEGMENT
	ORG $+1
$SG118803 DB	'View data is invalid -- memory has been stomped. (%s, %d'
	DB	')', 00H
_DATA	ENDS
_TEXT	SEGMENT
_loopPtr$118787 = -24
_c$118790 = -20
_celOffset$118794 = -28
_celPtr$118795 = -40
_controlData$118797 = -32
_colorData$118798 = -48
_controlTable$118799 = -44
_colorTable$118801 = -36
_viewID$ = 8
_file$ = 16
_line$ = 20
_viewPtr$ = -8
_resBuffer$ = -16
_resBufferEnd$ = -12
_l$ = -4
?ValidateView@@YAXVMemID@@HPADH@Z PROC NEAR		; ValidateView

; 117  : {

  002af	55		 push	 ebp
  002b0	8b ec		 mov	 ebp, esp
  002b2	83 ec 30	 sub	 esp, 48			; 00000030H

; 118  : 	ViewHeader *viewPtr = (ViewHeader*) *viewID;

  002b5	8d 4d 08	 lea	 ecx, DWORD PTR _viewID$[ebp]
  002b8	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  002bd	89 45 f8	 mov	 DWORD PTR _viewPtr$[ebp], eax

; 119  : 	uchar *resBuffer = (uchar *)viewPtr;

  002c0	8b 45 f8	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  002c3	89 45 f0	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 120  : 	uchar *resBufferEnd = resBuffer + viewID.Size();

  002c6	8d 4d 08	 lea	 ecx, DWORD PTR _viewID$[ebp]
  002c9	e8 00 00 00 00	 call	 ?Size@MemID@@QBEIXZ	; MemID::Size
  002ce	8b 4d f0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  002d1	03 c8		 add	 ecx, eax
  002d3	89 4d f4	 mov	 DWORD PTR _resBufferEnd$[ebp], ecx

; 121  : 
; 122  : 	for ( int l=0; l<viewPtr->loopCount; l++ ) {

  002d6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  002dd	eb 09		 jmp	 SHORT $L118784
$L118785:
  002df	8b 55 fc	 mov	 edx, DWORD PTR _l$[ebp]
  002e2	83 c2 01	 add	 edx, 1
  002e5	89 55 fc	 mov	 DWORD PTR _l$[ebp], edx
$L118784:
  002e8	8b 45 f8	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  002eb	33 c9		 xor	 ecx, ecx
  002ed	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  002f0	39 4d fc	 cmp	 DWORD PTR _l$[ebp], ecx
  002f3	0f 8d e3 00 00
	00		 jge	 $L118786

; 123  : 		LoopHeader* loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize * l + viewPtr->viewHeaderSize + 2);

  002f9	8b 55 f8	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  002fc	33 c0		 xor	 eax, eax
  002fe	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  00301	0f af 45 fc	 imul	 eax, DWORD PTR _l$[ebp]
  00305	8b 4d f8	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  00308	03 c8		 add	 ecx, eax
  0030a	8b 55 f8	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  0030d	33 c0		 xor	 eax, eax
  0030f	66 8b 02	 mov	 ax, WORD PTR [edx]
  00312	8d 4c 01 02	 lea	 ecx, DWORD PTR [ecx+eax+2]
  00316	89 4d e8	 mov	 DWORD PTR _loopPtr$118787[ebp], ecx

; 124  : 
; 125  : 		for ( int c=0; c<loopPtr->numCels; c++ ) {

  00319	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _c$118790[ebp], 0
  00320	eb 09		 jmp	 SHORT $L118791
$L118792:
  00322	8b 55 ec	 mov	 edx, DWORD PTR _c$118790[ebp]
  00325	83 c2 01	 add	 edx, 1
  00328	89 55 ec	 mov	 DWORD PTR _c$118790[ebp], edx
$L118791:
  0032b	8b 45 e8	 mov	 eax, DWORD PTR _loopPtr$118787[ebp]
  0032e	33 c9		 xor	 ecx, ecx
  00330	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00333	39 4d ec	 cmp	 DWORD PTR _c$118790[ebp], ecx
  00336	0f 8d 9b 00 00
	00		 jge	 $L118793

; 126  : 			long celOffset = loopPtr->celOffset + c * viewPtr->celHeaderSize;

  0033c	8b 55 f8	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  0033f	33 c0		 xor	 eax, eax
  00341	8a 42 0d	 mov	 al, BYTE PTR [edx+13]
  00344	8b 4d ec	 mov	 ecx, DWORD PTR _c$118790[ebp]
  00347	0f af c8	 imul	 ecx, eax
  0034a	8b 55 e8	 mov	 edx, DWORD PTR _loopPtr$118787[ebp]
  0034d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00350	03 c1		 add	 eax, ecx
  00352	89 45 e4	 mov	 DWORD PTR _celOffset$118794[ebp], eax

; 127  : 
; 128  : 			CelHeader* celPtr = (CelHeader*) (resBuffer + celOffset);

  00355	8b 4d f0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  00358	03 4d e4	 add	 ecx, DWORD PTR _celOffset$118794[ebp]
  0035b	89 4d d8	 mov	 DWORD PTR _celPtr$118795[ebp], ecx

; 129  : 			uchar* controlData = resBuffer + celPtr->controlOffset;

  0035e	8b 55 d8	 mov	 edx, DWORD PTR _celPtr$118795[ebp]
  00361	8b 45 f0	 mov	 eax, DWORD PTR _resBuffer$[ebp]
  00364	03 42 18	 add	 eax, DWORD PTR [edx+24]
  00367	89 45 e0	 mov	 DWORD PTR _controlData$118797[ebp], eax

; 130  : 			uchar* colorData = resBuffer + celPtr->colorOffset;

  0036a	8b 4d d8	 mov	 ecx, DWORD PTR _celPtr$118795[ebp]
  0036d	8b 55 f0	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  00370	03 51 1c	 add	 edx, DWORD PTR [ecx+28]
  00373	89 55 d0	 mov	 DWORD PTR _colorData$118798[ebp], edx

; 131  : 
; 132  : 			long* controlTable = (long *) (resBuffer + celPtr->rowTableOffset);

  00376	8b 45 d8	 mov	 eax, DWORD PTR _celPtr$118795[ebp]
  00379	8b 4d f0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  0037c	03 48 20	 add	 ecx, DWORD PTR [eax+32]
  0037f	89 4d d4	 mov	 DWORD PTR _controlTable$118799[ebp], ecx

; 133  : 			long* colorTable = controlTable + celPtr->yDim;

  00382	8b 55 d8	 mov	 edx, DWORD PTR _celPtr$118795[ebp]
  00385	33 c0		 xor	 eax, eax
  00387	66 8b 42 02	 mov	 ax, WORD PTR [edx+2]
  0038b	8b 4d d4	 mov	 ecx, DWORD PTR _controlTable$118799[ebp]
  0038e	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00391	89 55 dc	 mov	 DWORD PTR _colorTable$118801[ebp], edx

; 134  : 
; 135  : 			if ( !CheckBuffer ( controlTable, colorTable, resBufferEnd, celPtr->yDim ) ) {

  00394	8b 45 d8	 mov	 eax, DWORD PTR _celPtr$118795[ebp]
  00397	33 c9		 xor	 ecx, ecx
  00399	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  0039d	51		 push	 ecx
  0039e	8b 55 f4	 mov	 edx, DWORD PTR _resBufferEnd$[ebp]
  003a1	52		 push	 edx
  003a2	8b 45 dc	 mov	 eax, DWORD PTR _colorTable$118801[ebp]
  003a5	50		 push	 eax
  003a6	8b 4d d4	 mov	 ecx, DWORD PTR _controlTable$118799[ebp]
  003a9	51		 push	 ecx
  003aa	e8 00 00 00 00	 call	 ?CheckBuffer@@YAHPAJ0PAEH@Z ; CheckBuffer
  003af	83 c4 10	 add	 esp, 16			; 00000010H
  003b2	85 c0		 test	 eax, eax
  003b4	75 1c		 jne	 SHORT $L118802

; 136  : #if 0
; 137  : 				char filename[1024];
; 138  : 				sprintf ( filename, "%d.v56", v );
; 139  : 
; 140  : 				FILE *file = fopen ( filename, "wb" );
; 141  : 				fwrite ( resBuffer, viewID.Size(), 1, file );
; 142  : 				fclose ( file );
; 143  : #endif
; 144  : 
; 145  : 				msgMgr->Fatal ( "View data is invalid -- memory has been stomped. (%s, %d)", file, line );

  003b6	8b 55 14	 mov	 edx, DWORD PTR _line$[ebp]
  003b9	52		 push	 edx
  003ba	8b 45 10	 mov	 eax, DWORD PTR _file$[ebp]
  003bd	50		 push	 eax
  003be	68 00 00 00 00	 push	 OFFSET FLAT:$SG118803
  003c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  003c9	51		 push	 ecx
  003ca	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  003cf	83 c4 10	 add	 esp, 16			; 00000010H
$L118802:

; 147  : 		}

  003d2	e9 4b ff ff ff	 jmp	 $L118792
$L118793:

; 148  : 	}

  003d7	e9 03 ff ff ff	 jmp	 $L118785
$L118786:

; 149  : }

  003dc	8b e5		 mov	 esp, ebp
  003de	5d		 pop	 ebp
  003df	c3		 ret	 0
?ValidateView@@YAXVMemID@@HPADH@Z ENDP			; ValidateView
_TEXT	ENDS
PUBLIC	?CheckView@@YAHVMemID@@@Z			; CheckView
_TEXT	SEGMENT
_viewID$ = 8
_viewPtr$ = -8
_resBuffer$ = -16
_resBufferEnd$ = -12
_l$ = -4
_loopPtr$118816 = -24
_c$118819 = -20
_celOffset$118823 = -28
_celPtr$118824 = -44
_controlData$118826 = -36
_colorData$118827 = -56
_controlTable$118828 = -52
_colorTable$118830 = -40
_vRun$118831 = -32
_i$118832 = -48
_controlPtr$118836 = -60
_colorPtr$118837 = -64
?CheckView@@YAHVMemID@@@Z PROC NEAR			; CheckView

; 152  : {

  003e0	55		 push	 ebp
  003e1	8b ec		 mov	 ebp, esp
  003e3	83 ec 40	 sub	 esp, 64			; 00000040H

; 153  : 	ViewHeader *viewPtr = (ViewHeader*) *viewID;

  003e6	8d 4d 08	 lea	 ecx, DWORD PTR _viewID$[ebp]
  003e9	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  003ee	89 45 f8	 mov	 DWORD PTR _viewPtr$[ebp], eax

; 154  : 	uchar *resBuffer = (uchar *)viewPtr;

  003f1	8b 45 f8	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  003f4	89 45 f0	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 155  : 	uchar *resBufferEnd = resBuffer + viewID.Size();

  003f7	8d 4d 08	 lea	 ecx, DWORD PTR _viewID$[ebp]
  003fa	e8 00 00 00 00	 call	 ?Size@MemID@@QBEIXZ	; MemID::Size
  003ff	8b 4d f0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  00402	03 c8		 add	 ecx, eax
  00404	89 4d f4	 mov	 DWORD PTR _resBufferEnd$[ebp], ecx

; 156  : 
; 157  : 	for ( int l=0; l<viewPtr->loopCount; l++ ) {

  00407	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  0040e	eb 09		 jmp	 SHORT $L118813
$L118814:
  00410	8b 55 fc	 mov	 edx, DWORD PTR _l$[ebp]
  00413	83 c2 01	 add	 edx, 1
  00416	89 55 fc	 mov	 DWORD PTR _l$[ebp], edx
$L118813:
  00419	8b 45 f8	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  0041c	33 c9		 xor	 ecx, ecx
  0041e	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00421	39 4d fc	 cmp	 DWORD PTR _l$[ebp], ecx
  00424	0f 8d 13 01 00
	00		 jge	 $L118815

; 158  : 		LoopHeader* loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize * l + viewPtr->viewHeaderSize + 2);

  0042a	8b 55 f8	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  0042d	33 c0		 xor	 eax, eax
  0042f	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  00432	0f af 45 fc	 imul	 eax, DWORD PTR _l$[ebp]
  00436	8b 4d f8	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  00439	03 c8		 add	 ecx, eax
  0043b	8b 55 f8	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  0043e	33 c0		 xor	 eax, eax
  00440	66 8b 02	 mov	 ax, WORD PTR [edx]
  00443	8d 4c 01 02	 lea	 ecx, DWORD PTR [ecx+eax+2]
  00447	89 4d e8	 mov	 DWORD PTR _loopPtr$118816[ebp], ecx

; 159  : 
; 160  : 		for ( int c=0; c<loopPtr->numCels; c++ ) {

  0044a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _c$118819[ebp], 0
  00451	eb 09		 jmp	 SHORT $L118820
$L118821:
  00453	8b 55 ec	 mov	 edx, DWORD PTR _c$118819[ebp]
  00456	83 c2 01	 add	 edx, 1
  00459	89 55 ec	 mov	 DWORD PTR _c$118819[ebp], edx
$L118820:
  0045c	8b 45 e8	 mov	 eax, DWORD PTR _loopPtr$118816[ebp]
  0045f	33 c9		 xor	 ecx, ecx
  00461	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00464	39 4d ec	 cmp	 DWORD PTR _c$118819[ebp], ecx
  00467	0f 8d cb 00 00
	00		 jge	 $L118822

; 161  : 			long celOffset = loopPtr->celOffset + c * viewPtr->celHeaderSize;

  0046d	8b 55 f8	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  00470	33 c0		 xor	 eax, eax
  00472	8a 42 0d	 mov	 al, BYTE PTR [edx+13]
  00475	8b 4d ec	 mov	 ecx, DWORD PTR _c$118819[ebp]
  00478	0f af c8	 imul	 ecx, eax
  0047b	8b 55 e8	 mov	 edx, DWORD PTR _loopPtr$118816[ebp]
  0047e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00481	03 c1		 add	 eax, ecx
  00483	89 45 e4	 mov	 DWORD PTR _celOffset$118823[ebp], eax

; 162  : 
; 163  : 			CelHeader* celPtr = (CelHeader*) (resBuffer + celOffset);

  00486	8b 4d f0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  00489	03 4d e4	 add	 ecx, DWORD PTR _celOffset$118823[ebp]
  0048c	89 4d d4	 mov	 DWORD PTR _celPtr$118824[ebp], ecx

; 164  : 			uchar* controlData = resBuffer + celPtr->controlOffset;

  0048f	8b 55 d4	 mov	 edx, DWORD PTR _celPtr$118824[ebp]
  00492	8b 45 f0	 mov	 eax, DWORD PTR _resBuffer$[ebp]
  00495	03 42 18	 add	 eax, DWORD PTR [edx+24]
  00498	89 45 dc	 mov	 DWORD PTR _controlData$118826[ebp], eax

; 165  : 			uchar* colorData = resBuffer + celPtr->colorOffset;

  0049b	8b 4d d4	 mov	 ecx, DWORD PTR _celPtr$118824[ebp]
  0049e	8b 55 f0	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  004a1	03 51 1c	 add	 edx, DWORD PTR [ecx+28]
  004a4	89 55 c8	 mov	 DWORD PTR _colorData$118827[ebp], edx

; 166  : 
; 167  : 			long* controlTable = (long *) (resBuffer + celPtr->rowTableOffset);

  004a7	8b 45 d4	 mov	 eax, DWORD PTR _celPtr$118824[ebp]
  004aa	8b 4d f0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  004ad	03 48 20	 add	 ecx, DWORD PTR [eax+32]
  004b0	89 4d cc	 mov	 DWORD PTR _controlTable$118828[ebp], ecx

; 168  : 			long* colorTable = controlTable + celPtr->yDim;

  004b3	8b 55 d4	 mov	 edx, DWORD PTR _celPtr$118824[ebp]
  004b6	33 c0		 xor	 eax, eax
  004b8	66 8b 42 02	 mov	 ax, WORD PTR [edx+2]
  004bc	8b 4d cc	 mov	 ecx, DWORD PTR _controlTable$118828[ebp]
  004bf	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  004c2	89 55 d8	 mov	 DWORD PTR _colorTable$118830[ebp], edx

; 169  : 
; 170  : 			int vRun = celPtr->yDim;

  004c5	8b 45 d4	 mov	 eax, DWORD PTR _celPtr$118824[ebp]
  004c8	33 c9		 xor	 ecx, ecx
  004ca	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  004ce	89 4d e0	 mov	 DWORD PTR _vRun$118831[ebp], ecx

; 171  : 
; 172  : 			for (int i = 0;i<vRun; i++) {

  004d1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$118832[ebp], 0
  004d8	eb 09		 jmp	 SHORT $L118833
$L118834:
  004da	8b 55 d0	 mov	 edx, DWORD PTR _i$118832[ebp]
  004dd	83 c2 01	 add	 edx, 1
  004e0	89 55 d0	 mov	 DWORD PTR _i$118832[ebp], edx
$L118833:
  004e3	8b 45 d0	 mov	 eax, DWORD PTR _i$118832[ebp]
  004e6	3b 45 e0	 cmp	 eax, DWORD PTR _vRun$118831[ebp]
  004e9	7d 48		 jge	 SHORT $L118835

; 173  : 				// Find the row data
; 174  : 				uchar* controlPtr = controlData + controlTable[i];

  004eb	8b 4d d0	 mov	 ecx, DWORD PTR _i$118832[ebp]
  004ee	8b 55 cc	 mov	 edx, DWORD PTR _controlTable$118828[ebp]
  004f1	8b 45 dc	 mov	 eax, DWORD PTR _controlData$118826[ebp]
  004f4	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  004f7	89 45 c4	 mov	 DWORD PTR _controlPtr$118836[ebp], eax

; 175  : 				uchar* colorPtr = colorData + colorTable[i];

  004fa	8b 4d d0	 mov	 ecx, DWORD PTR _i$118832[ebp]
  004fd	8b 55 d8	 mov	 edx, DWORD PTR _colorTable$118830[ebp]
  00500	8b 45 c8	 mov	 eax, DWORD PTR _colorData$118827[ebp]
  00503	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  00506	89 45 c0	 mov	 DWORD PTR _colorPtr$118837[ebp], eax

; 176  : 
; 177  : 				if ( controlPtr < resBuffer || controlPtr > resBufferEnd ) {

  00509	8b 4d c4	 mov	 ecx, DWORD PTR _controlPtr$118836[ebp]
  0050c	3b 4d f0	 cmp	 ecx, DWORD PTR _resBuffer$[ebp]
  0050f	72 08		 jb	 SHORT $L118839
  00511	8b 55 c4	 mov	 edx, DWORD PTR _controlPtr$118836[ebp]
  00514	3b 55 f4	 cmp	 edx, DWORD PTR _resBufferEnd$[ebp]
  00517	76 04		 jbe	 SHORT $L118838
$L118839:

; 178  : 					return 0;

  00519	33 c0		 xor	 eax, eax
  0051b	eb 25		 jmp	 SHORT $L118806
$L118838:

; 180  : 
; 181  : 				if ( colorPtr < resBuffer || colorPtr > resBufferEnd ) {

  0051d	8b 45 c0	 mov	 eax, DWORD PTR _colorPtr$118837[ebp]
  00520	3b 45 f0	 cmp	 eax, DWORD PTR _resBuffer$[ebp]
  00523	72 08		 jb	 SHORT $L118841
  00525	8b 4d c0	 mov	 ecx, DWORD PTR _colorPtr$118837[ebp]
  00528	3b 4d f4	 cmp	 ecx, DWORD PTR _resBufferEnd$[ebp]
  0052b	76 04		 jbe	 SHORT $L118840
$L118841:

; 182  : 					return 0;

  0052d	33 c0		 xor	 eax, eax
  0052f	eb 11		 jmp	 SHORT $L118806
$L118840:

; 184  : 			}

  00531	eb a7		 jmp	 SHORT $L118834
$L118835:

; 185  : 		}

  00533	e9 1b ff ff ff	 jmp	 $L118821
$L118822:

; 186  : 	}

  00538	e9 d3 fe ff ff	 jmp	 $L118814
$L118815:

; 187  : 
; 188  : 	return 1;

  0053d	b8 01 00 00 00	 mov	 eax, 1
$L118806:

; 189  : }

  00542	8b e5		 mov	 esp, ebp
  00544	5d		 pop	 ebp
  00545	c3		 ret	 0
?CheckView@@YAHVMemID@@@Z ENDP				; CheckView
_TEXT	ENDS
PUBLIC	?ValidateViews@@YAXPADH@Z			; ValidateViews
PUBLIC	?size@SOL_List@@QAEAAHXZ			; SOL_List::size
EXTRN	?calcAddress@Array@@QAEPAXH@Z:NEAR		; Array::calcAddress
EXTRN	?gViewList@@3VSOL_List@@A:QWORD			; gViewList
_TEXT	SEGMENT
_file$ = 8
_line$ = 12
_size$ = -4
_array$118848 = -12
_i$118850 = -8
?ValidateViews@@YAXPADH@Z PROC NEAR			; ValidateViews

; 192  : {

  00546	55		 push	 ebp
  00547	8b ec		 mov	 ebp, esp
  00549	83 ec 10	 sub	 esp, 16			; 00000010H

; 193  : 	int size = gViewList.size();

  0054c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?gViewList@@3VSOL_List@@A
  00551	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  00556	8b 00		 mov	 eax, DWORD PTR [eax]
  00558	89 45 fc	 mov	 DWORD PTR _size$[ebp], eax

; 194  : 
; 195  : 	if ( size ) {

  0055b	83 7d fc 00	 cmp	 DWORD PTR _size$[ebp], 0
  0055f	74 55		 je	 SHORT $L118853

; 196  : 		MemID *array = (MemID *)gViewList.elements.calcAddress ( 0 );

  00561	6a 00		 push	 0
  00563	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?gViewList@@3VSOL_List@@A
  00568	e8 00 00 00 00	 call	 ?calcAddress@Array@@QAEPAXH@Z ; Array::calcAddress
  0056d	89 45 f4	 mov	 DWORD PTR _array$118848[ebp], eax

; 197  : 
; 198  : 		for ( int i=0; i<size; i++ ) {

  00570	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$118850[ebp], 0
  00577	eb 09		 jmp	 SHORT $L118851
$L118852:
  00579	8b 4d f8	 mov	 ecx, DWORD PTR _i$118850[ebp]
  0057c	83 c1 01	 add	 ecx, 1
  0057f	89 4d f8	 mov	 DWORD PTR _i$118850[ebp], ecx
$L118851:
  00582	8b 55 f8	 mov	 edx, DWORD PTR _i$118850[ebp]
  00585	3b 55 fc	 cmp	 edx, DWORD PTR _size$[ebp]
  00588	7d 2c		 jge	 SHORT $L118853

; 199  : 			ValidateView ( *array, 666, file, line );

  0058a	8b 45 0c	 mov	 eax, DWORD PTR _line$[ebp]
  0058d	50		 push	 eax
  0058e	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00591	51		 push	 ecx
  00592	68 9a 02 00 00	 push	 666			; 0000029aH
  00597	51		 push	 ecx
  00598	8b cc		 mov	 ecx, esp
  0059a	8b 55 f4	 mov	 edx, DWORD PTR _array$118848[ebp]
  0059d	52		 push	 edx
  0059e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  005a3	e8 00 00 00 00	 call	 ?ValidateView@@YAXVMemID@@HPADH@Z ; ValidateView
  005a8	83 c4 10	 add	 esp, 16			; 00000010H

; 200  : 			array++;

  005ab	8b 45 f4	 mov	 eax, DWORD PTR _array$118848[ebp]
  005ae	83 c0 02	 add	 eax, 2
  005b1	89 45 f4	 mov	 DWORD PTR _array$118848[ebp], eax

; 201  : 		}

  005b4	eb c3		 jmp	 SHORT $L118852
$L118853:

; 203  : }

  005b6	8b e5		 mov	 esp, ebp
  005b8	5d		 pop	 ebp
  005b9	c3		 ret	 0
?ValidateViews@@YAXPADH@Z ENDP				; ValidateViews
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT
_this$ = -4
?size@SOL_List@@QAEAAHXZ PROC NEAR			; SOL_List::size, COMDAT

; 24   : 	inline int &size ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return _size;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4

; 26   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?size@SOL_List@@QAEAAHXZ ENDP				; SOL_List::size
_TEXT	ENDS
PUBLIC	??0Bitmap@@QAE@XZ				; Bitmap::Bitmap
PUBLIC	??0CelObj@@QAE@ABV0@@Z				; CelObj::CelObj
PUBLIC	?ReadPix@CelObj@@UAEEHHH@Z			; CelObj::ReadPix
PUBLIC	??_7CelObj@@6B@					; CelObj::`vftable'
PUBLIC	??_GCelObj@@UAEPAXI@Z				; CelObj::`scalar deleting destructor'
PUBLIC	??_ECelObj@@UAEPAXI@Z				; CelObj::`vector deleting destructor'
EXTRN	__purecall:NEAR
;	COMDAT ??_7CelObj@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celobj.cpp
CONST	SEGMENT
??_7CelObj@@6B@ DD FLAT:??_ECelObj@@UAEPAXI@Z		; CelObj::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?ReadPix@CelObj@@UAEEHHH@Z
	DD	FLAT:__purecall
CONST	ENDS
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??0CelObj@@QAE@ABV0@@Z PROC NEAR			; CelObj::CelObj

; 210  : {

  005ba	55		 push	 ebp
  005bb	8b ec		 mov	 ebp, esp
  005bd	51		 push	 ecx
  005be	56		 push	 esi
  005bf	57		 push	 edi
  005c0	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  005c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c6	83 c1 04	 add	 ecx, 4
  005c9	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@XZ	; Bitmap::Bitmap
  005ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005d1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CelObj@@6B@ ; CelObj::`vftable'

; 211  : 	width = src.width;

  005d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005da	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  005dd	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  005e0	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 212  : 	height = src.height;

  005e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005e6	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  005e9	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  005ec	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 213  : 	xorg = src.xorg;

  005ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005f2	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  005f5	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  005f8	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 214  : 	yorg = src.yorg;

  005fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005fe	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00601	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00604	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 215  : 	resx = src.resx;

  00607	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0060a	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  0060d	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00610	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 216  : 	resy = src.resy;

  00613	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00616	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00619	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0061c	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 217  : 	skip = src.skip;

  0061f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00622	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00625	8a 42 38	 mov	 al, BYTE PTR [edx+56]
  00628	88 41 38	 mov	 BYTE PTR [ecx+56], al

; 218  : 	hasSkip = src.hasSkip;

  0062b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0062e	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00631	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00634	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 219  : 	mirrored = src.mirrored;

  00637	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0063a	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  0063d	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00640	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 220  : 	remapState = src.remapState;

  00643	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00646	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00649	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0064c	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 221  : 	celOffset =	src.celOffset;

  0064f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00652	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00655	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00658	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 222  : 	paletteOffset = src.paletteOffset;

  0065b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0065e	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00661	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00664	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 223  : 	compressType = src.compressType;

  00667	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0066a	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  0066d	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00670	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 224  : 	bitmap = src.bitmap;

  00673	8b 75 08	 mov	 esi, DWORD PTR _src$[ebp]
  00676	83 c6 04	 add	 esi, 4
  00679	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  0067c	83 c7 04	 add	 edi, 4
  0067f	b9 05 00 00 00	 mov	 ecx, 5
  00684	f3 a5		 rep movsd

; 225  : 	horzFlip = src.horzFlip;

  00686	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00689	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  0068c	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  0068f	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 226  : }

  00692	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00695	5f		 pop	 edi
  00696	5e		 pop	 esi
  00697	8b e5		 mov	 esp, ebp
  00699	5d		 pop	 ebp
  0069a	c2 04 00	 ret	 4
??0CelObj@@QAE@ABV0@@Z ENDP				; CelObj::CelObj
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
;	COMDAT ??0Bitmap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Bitmap@@QAE@XZ PROC NEAR				; Bitmap::Bitmap, COMDAT

; 130  : 	Bitmap() 													{view = loop = cel = 0; type = tMem;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0Bitmap@@QAE@XZ ENDP					; Bitmap::Bitmap
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
PUBLIC	??1CelObj@@UAE@XZ				; CelObj::~CelObj
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCelObj@@UAEPAXI@Z PROC NEAR				; CelObj::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L115115
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L115115:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCelObj@@UAEPAXI@Z ENDP				; CelObj::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObj@@UAE@XZ PROC NEAR				; CelObj::~CelObj, COMDAT

; 173  : 	virtual	~CelObj()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CelObj@@6B@ ; CelObj::`vftable'
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1CelObj@@UAE@XZ ENDP					; CelObj::~CelObj
_TEXT	ENDS
PUBLIC	??8Bitmap@@QBEHABV0@@Z				; Bitmap::operator==
PUBLIC	??8CelObj@@QBEHABV0@@Z				; CelObj::operator==
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??8CelObj@@QBEHABV0@@Z PROC NEAR			; CelObj::operator==

; 231  : {

  0069d	55		 push	 ebp
  0069e	8b ec		 mov	 ebp, esp
  006a0	83 ec 08	 sub	 esp, 8
  006a3	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 232  : 	return (bitmap == src.bitmap  &&
; 233  : 		 celOffset == src.celOffset  &&
; 234  : 		 paletteOffset == src.paletteOffset  &&
; 235  : 		 width == src.width  &&
; 236  : 		 height == src.height  &&
; 237  : 		 xorg == src.xorg  &&
; 238  : 		 yorg == src.yorg  &&
; 239  : 		 skip == src.skip  &&
; 240  : 		 mirrored == src.mirrored  &&
; 241  : 		 compressType == src.compressType);

  006a6	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  006a9	83 c0 04	 add	 eax, 4
  006ac	50		 push	 eax
  006ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006b0	83 c1 04	 add	 ecx, 4
  006b3	e8 00 00 00 00	 call	 ??8Bitmap@@QBEHABV0@@Z	; Bitmap::operator==
  006b8	85 c0		 test	 eax, eax
  006ba	0f 84 8d 00 00
	00		 je	 $L124795
  006c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006c3	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  006c6	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  006c9	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  006cc	75 7f		 jne	 SHORT $L124795
  006ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006d1	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  006d4	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  006d7	3b 42 1c	 cmp	 eax, DWORD PTR [edx+28]
  006da	75 71		 jne	 SHORT $L124795
  006dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006df	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  006e2	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  006e5	3b 42 20	 cmp	 eax, DWORD PTR [edx+32]
  006e8	75 63		 jne	 SHORT $L124795
  006ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ed	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  006f0	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  006f3	3b 42 24	 cmp	 eax, DWORD PTR [edx+36]
  006f6	75 55		 jne	 SHORT $L124795
  006f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006fb	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  006fe	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00701	3b 42 28	 cmp	 eax, DWORD PTR [edx+40]
  00704	75 47		 jne	 SHORT $L124795
  00706	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00709	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  0070c	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0070f	3b 42 2c	 cmp	 eax, DWORD PTR [edx+44]
  00712	75 39		 jne	 SHORT $L124795
  00714	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00717	33 d2		 xor	 edx, edx
  00719	8a 51 38	 mov	 dl, BYTE PTR [ecx+56]
  0071c	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0071f	33 c9		 xor	 ecx, ecx
  00721	8a 48 38	 mov	 cl, BYTE PTR [eax+56]
  00724	3b d1		 cmp	 edx, ecx
  00726	75 25		 jne	 SHORT $L124795
  00728	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0072b	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0072e	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  00731	3b 48 48	 cmp	 ecx, DWORD PTR [eax+72]
  00734	75 17		 jne	 SHORT $L124795
  00736	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00739	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0073c	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  0073f	3b 48 40	 cmp	 ecx, DWORD PTR [eax+64]
  00742	75 09		 jne	 SHORT $L124795
  00744	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  0074b	eb 07		 jmp	 SHORT $L124796
$L124795:
  0074d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L124796:
  00754	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 242  : }

  00757	8b e5		 mov	 esp, ebp
  00759	5d		 pop	 ebp
  0075a	c2 04 00	 ret	 4
??8CelObj@@QBEHABV0@@Z ENDP				; CelObj::operator==
_TEXT	ENDS
PUBLIC	??8MemID@@QBEHABV0@@Z				; MemID::operator==
;	COMDAT ??8Bitmap@@QBEHABV0@@Z
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??8Bitmap@@QBEHABV0@@Z PROC NEAR			; Bitmap::operator==, COMDAT

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 368  : 	return  (view == src.view  &&  loop == src.loop  &&  cel == src.cel  &&
; 369  : 				type == src.type  &&  memid == src.memid);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0000f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00012	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00015	75 47		 jne	 SHORT $L124798
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0001d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00020	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00023	75 39		 jne	 SHORT $L124798
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0002b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002e	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00031	75 2b		 jne	 SHORT $L124798
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003d	75 1f		 jne	 SHORT $L124798
  0003f	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00042	83 c0 10	 add	 eax, 16			; 00000010H
  00045	50		 push	 eax
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 10	 add	 ecx, 16			; 00000010H
  0004c	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  00051	85 c0		 test	 eax, eax
  00053	74 09		 je	 SHORT $L124798
  00055	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  0005c	eb 07		 jmp	 SHORT $L124799
$L124798:
  0005e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L124799:
  00065	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 370  : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
??8Bitmap@@QBEHABV0@@Z ENDP				; Bitmap::operator==
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??8MemID@@QBEHABV0@@Z PROC NEAR				; MemID::operator==, COMDAT

; 108  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 		return handle == id.handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _id$[ebp]
  00012	33 c0		 xor	 eax, eax
  00014	66 8b 02	 mov	 ax, WORD PTR [edx]
  00017	33 d2		 xor	 edx, edx
  00019	3b c8		 cmp	 ecx, eax
  0001b	0f 94 c2	 sete	 dl
  0001e	8b c2		 mov	 eax, edx

; 110  : 	}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??8MemID@@QBEHABV0@@Z ENDP				; MemID::operator==
_TEXT	ENDS
PUBLIC	?SearchCache@CelObj@@QBEHVBitmap@@PAH@Z		; CelObj::SearchCache
PUBLIC	??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
_TEXT	SEGMENT
_bitmap$ = 8
_bitmapIndex$ = 28
_this$ = -8
_i$ = -4
?SearchCache@CelObj@@QBEHVBitmap@@PAH@Z PROC NEAR	; CelObj::SearchCache

; 247  : {

  0075d	55		 push	 ebp
  0075e	8b ec		 mov	 ebp, esp
  00760	83 ec 08	 sub	 esp, 8
  00763	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 	for (int i = 0; i < maxCOV; i++)

  00766	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0076d	eb 09		 jmp	 SHORT $L118869
$L118870:
  0076f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00772	83 c0 01	 add	 eax, 1
  00775	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L118869:
  00778	83 7d fc 64	 cmp	 DWORD PTR _i$[ebp], 100	; 00000064H
  0077c	7d 6b		 jge	 SHORT $L118871

; 250  : 		if (array[i].cel != NULL  &&  array[i].cel->bitmap == bitmap)

  0077e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00781	51		 push	 ecx
  00782	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  00787	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  0078c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00790	74 55		 je	 SHORT $L118872
  00792	8d 55 08	 lea	 edx, DWORD PTR _bitmap$[ebp]
  00795	52		 push	 edx
  00796	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00799	50		 push	 eax
  0079a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  0079f	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  007a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  007a7	83 c1 04	 add	 ecx, 4
  007aa	e8 00 00 00 00	 call	 ??8Bitmap@@QBEHABV0@@Z	; Bitmap::operator==
  007af	85 c0		 test	 eax, eax
  007b1	74 34		 je	 SHORT $L118872

; 252  : 			array[i].timeStamp = ++timeStamp;

  007b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeStamp@CelObj@@2JA ; CelObj::timeStamp
  007b9	83 c1 01	 add	 ecx, 1
  007bc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?timeStamp@CelObj@@2JA, ecx ; CelObj::timeStamp
  007c2	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  007c5	52		 push	 edx
  007c6	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  007cb	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  007d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeStamp@CelObj@@2JA ; CelObj::timeStamp
  007d6	89 08		 mov	 DWORD PTR [eax], ecx

; 253  : 			*bitmapIndex = i;

  007d8	8b 55 1c	 mov	 edx, DWORD PTR _bitmapIndex$[ebp]
  007db	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  007de	89 02		 mov	 DWORD PTR [edx], eax

; 254  : 			return True;

  007e0	b8 01 00 00 00	 mov	 eax, 1
  007e5	eb 04		 jmp	 SHORT $L118867
$L118872:

; 256  : 	}

  007e7	eb 86		 jmp	 SHORT $L118870
$L118871:

; 257  : 
; 258  : 	return False;

  007e9	33 c0		 xor	 eax, eax
$L118867:

; 259  : }

  007eb	8b e5		 mov	 esp, ebp
  007ed	5d		 pop	 ebp
  007ee	c2 18 00	 ret	 24			; 00000018H
?SearchCache@CelObj@@QBEHVBitmap@@PAH@Z ENDP		; CelObj::SearchCache
_TEXT	ENDS
;	COMDAT ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z
_TEXT	SEGMENT
_i$ = 8
_this$ = -4
??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z PROC NEAR ; CelObj::CelObjArray::operator[], COMDAT

; 273  : 		CelObjArrayItem&	operator[](int i)		{return list[i];}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ENDP ; CelObj::CelObjArray::operator[]
_TEXT	ENDS
PUBLIC	?FindReplacementEntryInCache@CelObj@@QBEHXZ	; CelObj::FindReplacementEntryInCache
_TEXT	SEGMENT
_this$ = -16
_loTime$ = -4
_loIndex$ = -12
_i$ = -8
?FindReplacementEntryInCache@CelObj@@QBEHXZ PROC NEAR	; CelObj::FindReplacementEntryInCache

; 264  : {

  007f1	55		 push	 ebp
  007f2	8b ec		 mov	 ebp, esp
  007f4	83 ec 10	 sub	 esp, 16			; 00000010H
  007f7	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 265  : 	long loTime = timeStamp + 1;

  007fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeStamp@CelObj@@2JA ; CelObj::timeStamp
  007ff	83 c0 01	 add	 eax, 1
  00802	89 45 fc	 mov	 DWORD PTR _loTime$[ebp], eax

; 266  : 	int loIndex = -1;

  00805	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _loIndex$[ebp], -1

; 267  : 
; 268  : 	for (int i = 0; i < maxCOV; i++)

  0080c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00813	eb 09		 jmp	 SHORT $L118879
$L118880:
  00815	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00818	83 c1 01	 add	 ecx, 1
  0081b	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L118879:
  0081e	83 7d f8 64	 cmp	 DWORD PTR _i$[ebp], 100	; 00000064H
  00822	7d 49		 jge	 SHORT $L118881

; 270  : 		if (!array[i].cel)

  00824	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00827	52		 push	 edx
  00828	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  0082d	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  00832	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00836	75 05		 jne	 SHORT $L118882

; 271  : 			return i;

  00838	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0083b	eb 33		 jmp	 SHORT $L118875
$L118882:

; 272  : 
; 273  : 		if (array[i].timeStamp < loTime)

  0083d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00840	50		 push	 eax
  00841	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  00846	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  0084b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0084d	3b 4d fc	 cmp	 ecx, DWORD PTR _loTime$[ebp]
  00850	7d 19		 jge	 SHORT $L118883

; 275  : 			loTime = array[i].timeStamp;

  00852	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00855	52		 push	 edx
  00856	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  0085b	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  00860	8b 00		 mov	 eax, DWORD PTR [eax]
  00862	89 45 fc	 mov	 DWORD PTR _loTime$[ebp], eax

; 276  : 			loIndex = i;

  00865	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00868	89 4d f4	 mov	 DWORD PTR _loIndex$[ebp], ecx
$L118883:

; 278  : 	}

  0086b	eb a8		 jmp	 SHORT $L118880
$L118881:

; 279  : 
; 280  : 	assert(loIndex >= 0  &&  loIndex < maxCOV);
; 281  : 	return loIndex;

  0086d	8b 45 f4	 mov	 eax, DWORD PTR _loIndex$[ebp]
$L118875:

; 282  : }

  00870	8b e5		 mov	 esp, ebp
  00872	5d		 pop	 ebp
  00873	c3		 ret	 0
?FindReplacementEntryInCache@CelObj@@QBEHXZ ENDP	; CelObj::FindReplacementEntryInCache
_TEXT	ENDS
PUBLIC	?PutCopyInCache@CelObj@@QAEXXZ			; CelObj::PutCopyInCache
_TEXT	SEGMENT
_this$ = -16
_loIndex$ = -4
$T124805 = -8
$T124806 = -12
?PutCopyInCache@CelObj@@QAEXXZ PROC NEAR		; CelObj::PutCopyInCache

; 287  : {

  00874	55		 push	 ebp
  00875	8b ec		 mov	 ebp, esp
  00877	83 ec 14	 sub	 esp, 20			; 00000014H
  0087a	56		 push	 esi
  0087b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	int loIndex = FindReplacementEntryInCache();

  0087e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00881	e8 00 00 00 00	 call	 ?FindReplacementEntryInCache@CelObj@@QBEHXZ ; CelObj::FindReplacementEntryInCache
  00886	89 45 fc	 mov	 DWORD PTR _loIndex$[ebp], eax

; 289  : 
; 290  : 	delete array[loIndex].cel;

  00889	8b 45 fc	 mov	 eax, DWORD PTR _loIndex$[ebp]
  0088c	50		 push	 eax
  0088d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  00892	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  00897	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0089a	89 4d f4	 mov	 DWORD PTR $T124806[ebp], ecx
  0089d	8b 55 f4	 mov	 edx, DWORD PTR $T124806[ebp]
  008a0	89 55 f8	 mov	 DWORD PTR $T124805[ebp], edx
  008a3	83 7d f8 00	 cmp	 DWORD PTR $T124805[ebp], 0
  008a7	74 11		 je	 SHORT $L124807
  008a9	6a 01		 push	 1
  008ab	8b 45 f8	 mov	 eax, DWORD PTR $T124805[ebp]
  008ae	8b 10		 mov	 edx, DWORD PTR [eax]
  008b0	8b 4d f8	 mov	 ecx, DWORD PTR $T124805[ebp]
  008b3	ff 12		 call	 DWORD PTR [edx]
  008b5	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  008b8	eb 07		 jmp	 SHORT $L124808
$L124807:
  008ba	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L124808:

; 291  : 	array[loIndex].cel = Duplicate();

  008c1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  008c4	8b 10		 mov	 edx, DWORD PTR [eax]
  008c6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  008c9	ff 52 04	 call	 DWORD PTR [edx+4]
  008cc	8b f0		 mov	 esi, eax
  008ce	8b 45 fc	 mov	 eax, DWORD PTR _loIndex$[ebp]
  008d1	50		 push	 eax
  008d2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  008d7	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  008dc	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 292  : 	array[loIndex].timeStamp = ++timeStamp;

  008df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeStamp@CelObj@@2JA ; CelObj::timeStamp
  008e5	83 c1 01	 add	 ecx, 1
  008e8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?timeStamp@CelObj@@2JA, ecx ; CelObj::timeStamp
  008ee	8b 55 fc	 mov	 edx, DWORD PTR _loIndex$[ebp]
  008f1	52		 push	 edx
  008f2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  008f7	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  008fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeStamp@CelObj@@2JA ; CelObj::timeStamp
  00902	89 08		 mov	 DWORD PTR [eax], ecx

; 293  : }

  00904	5e		 pop	 esi
  00905	8b e5		 mov	 esp, ebp
  00907	5d		 pop	 ebp
  00908	c3		 ret	 0
?PutCopyInCache@CelObj@@QAEXXZ ENDP			; CelObj::PutCopyInCache
_TEXT	ENDS
PUBLIC	?IsPic@Bitmap@@QBEHXZ				; Bitmap::IsPic
PUBLIC	?SubmitPalette@CelObj@@QAEXXZ			; CelObj::SubmitPalette
PUBLIC	??0HunkPalette@@QAE@XZ				; HunkPalette::HunkPalette
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
EXTRN	?Init@HunkPalette@@QAEXPAX@Z:NEAR		; HunkPalette::Init
_TEXT	SEGMENT
_this$ = -16
_hp$118895 = -12
?SubmitPalette@CelObj@@QAEXXZ PROC NEAR			; CelObj::SubmitPalette

; 297  : {

  00909	55		 push	 ebp
  0090a	8b ec		 mov	 ebp, esp
  0090c	83 ec 14	 sub	 esp, 20			; 00000014H
  0090f	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 298  : 	if (paletteOffset && bitmap.IsPic())  {

  00912	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00915	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00919	74 53		 je	 SHORT $L118894
  0091b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0091e	83 c1 04	 add	 ecx, 4
  00921	e8 00 00 00 00	 call	 ?IsPic@Bitmap@@QBEHXZ	; Bitmap::IsPic
  00926	85 c0		 test	 eax, eax
  00928	74 44		 je	 SHORT $L118894

; 299  : 		HunkPalette hp;

  0092a	8d 4d f4	 lea	 ecx, DWORD PTR _hp$118895[ebp]
  0092d	e8 00 00 00 00	 call	 ??0HunkPalette@@QAE@XZ	; HunkPalette::HunkPalette

; 300  : 		hp.Init(ResPointer() + paletteOffset);

  00932	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00935	8b 11		 mov	 edx, DWORD PTR [ecx]
  00937	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0093a	ff 52 14	 call	 DWORD PTR [edx+20]
  0093d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00940	03 41 1c	 add	 eax, DWORD PTR [ecx+28]
  00943	50		 push	 eax
  00944	8d 4d f4	 lea	 ecx, DWORD PTR _hp$118895[ebp]
  00947	e8 00 00 00 00	 call	 ?Init@HunkPalette@@QAEXPAX@Z ; HunkPalette::Init

; 301  : 		graphMgr->GPalette().Submit(hp); // if picture pal then full remap is done

  0094c	8d 55 f4	 lea	 edx, DWORD PTR _hp$118895[ebp]
  0094f	52		 push	 edx
  00950	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00955	8b 10		 mov	 edx, DWORD PTR [eax]
  00957	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0095d	ff 52 1c	 call	 DWORD PTR [edx+28]
  00960	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00963	8b 45 ec	 mov	 eax, DWORD PTR -20+[ebp]
  00966	8b 10		 mov	 edx, DWORD PTR [eax]
  00968	8b 4d ec	 mov	 ecx, DWORD PTR -20+[ebp]
  0096b	ff 52 08	 call	 DWORD PTR [edx+8]
$L118894:

; 303  : }

  0096e	8b e5		 mov	 esp, ebp
  00970	5d		 pop	 ebp
  00971	c3		 ret	 0
?SubmitPalette@CelObj@@QAEXXZ ENDP			; CelObj::SubmitPalette
_TEXT	ENDS
;	COMDAT ??0HunkPalette@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0HunkPalette@@QAE@XZ PROC NEAR			; HunkPalette::HunkPalette, COMDAT

; 56   : 	HunkPalette()									{palInHunk = NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0HunkPalette@@QAE@XZ ENDP				; HunkPalette::HunkPalette
_TEXT	ENDS
;	COMDAT ?IsPic@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsPic@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::IsPic, COMDAT

; 134  : 	Bool	IsPic() const			{return type == tPic;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 38 01	 cmp	 DWORD PTR [eax], 1
  0000f	0f 94 c1	 sete	 cl
  00012	8b c1		 mov	 eax, ecx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsPic@Bitmap@@QBEHXZ ENDP				; Bitmap::IsPic
_TEXT	ENDS
PUBLIC	?ScaleX@ScreenItem@@QBE?AVRatio@@XZ		; ScreenItem::ScaleX
PUBLIC	?ScaleY@ScreenItem@@QBE?AVRatio@@XZ		; ScreenItem::ScaleY
PUBLIC	?X1@ScreenItem@@QBEHXZ				; ScreenItem::X1
PUBLIC	?Y1@ScreenItem@@QBEHXZ				; ScreenItem::Y1
PUBLIC	?Draw@CelObj@@QAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@@Z ; CelObj::Draw
PUBLIC	??0SOL_Point@@QAE@HH@Z				; SOL_Point::SOL_Point
PUBLIC	??0SOL_Point@@QAE@ABV0@@Z			; SOL_Point::SOL_Point
PUBLIC	?IsOne@Ratio@@QBEHXZ				; Ratio::IsOne
EXTRN	?DrawHzFlip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawHzFlip
EXTRN	?DrawNoFlip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawNoFlip
EXTRN	?DrawUncompNoFlip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawUncompNoFlip
EXTRN	?DrawUncompHzFlip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawUncompHzFlip
EXTRN	?ScaleDraw@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z:NEAR ; CelObj::ScaleDraw
EXTRN	?ScaleDrawUncomp@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z:NEAR ; CelObj::ScaleDrawUncomp
EXTRN	?DrawHzFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawHzFlipMap
EXTRN	?DrawNoFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawNoFlipMap
EXTRN	?DrawUncompNoFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawUncompNoFlipMap
EXTRN	?DrawUncompHzFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawUncompHzFlipMap
EXTRN	?ScaleDrawMap@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z:NEAR ; CelObj::ScaleDrawMap
EXTRN	?ScaleDrawUncompMap@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z:NEAR ; CelObj::ScaleDrawUncompMap
EXTRN	?DrawHzFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawHzFlipNoMD
EXTRN	?DrawNoFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawNoFlipNoMD
EXTRN	?DrawUncompNoFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawUncompNoFlipNoMD
EXTRN	?DrawUncompHzFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawUncompHzFlipNoMD
EXTRN	?ScaleDrawNoMD@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z:NEAR ; CelObj::ScaleDrawNoMD
EXTRN	?ScaleDrawUncompNoMD@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z:NEAR ; CelObj::ScaleDrawUncompNoMD
EXTRN	?DrawUncompNoFlipNoMDNoSkip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawUncompNoFlipNoMDNoSkip
EXTRN	?DrawUncompHzFlipNoMDNoSkip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z:NEAR ; CelObj::DrawUncompHzFlipNoMDNoSkip
EXTRN	?remapCount@Remap@@2IA:DWORD			; Remap::remapCount
_TEXT	SEGMENT
_dest$ = 8
_si$ = 12
_drawRect$ = 16
_this$ = -368
_pmap$ = -4
$T124813 = -12
$T124814 = -20
$T124815 = -28
$T124816 = -36
$T124817 = -44
$T124818 = -52
$T124819 = -60
$T124820 = -68
$T124822 = -80
$T124824 = -92
$T124826 = -104
$T124828 = -116
$T124830 = -128
$T124832 = -140
$T124833 = -148
$T124834 = -156
$T124835 = -164
$T124836 = -172
$T124837 = -180
$T124838 = -188
$T124839 = -196
$T124840 = -204
$T124842 = -216
$T124844 = -228
$T124846 = -240
$T124848 = -252
$T124849 = -260
$T124850 = -268
$T124851 = -276
$T124852 = -284
$T124853 = -292
$T124854 = -300
$T124855 = -308
$T124856 = -316
$T124858 = -328
$T124860 = -340
$T124862 = -352
$T124864 = -364
?Draw@CelObj@@QAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@@Z PROC NEAR ; CelObj::Draw

; 309  : {

  00972	55		 push	 ebp
  00973	8b ec		 mov	 ebp, esp
  00975	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  0097b	89 8d 90 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 310  : 	//
; 311  : 	//  If cel has no remap data, do it easy
; 312  : 	//
; 313  : 
; 314  : 	Buffer& pmap = graphMgr->PriMap();

  00981	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00986	8b 10		 mov	 edx, DWORD PTR [eax]
  00988	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0098e	ff 52 28	 call	 DWORD PTR [edx+40]
  00991	89 45 fc	 mov	 DWORD PTR _pmap$[ebp], eax

; 315  : 	if (remapState == NoRemapInCel)

  00994	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0099a	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0099e	0f 85 81 02 00
	00		 jne	 $L118903

; 317  : 		//
; 318  : 		//  No remap, no priority map
; 319  : 		//
; 320  : 
; 321  : 		if (!si.ScaleX().IsOne() || !si.ScaleY().IsOne())

  009a4	8d 4d f4	 lea	 ecx, DWORD PTR $T124813[ebp]
  009a7	51		 push	 ecx
  009a8	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  009ab	e8 00 00 00 00	 call	 ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleX
  009b0	8b c8		 mov	 ecx, eax
  009b2	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  009b7	85 c0		 test	 eax, eax
  009b9	74 1b		 je	 SHORT $L118907
  009bb	8d 55 ec	 lea	 edx, DWORD PTR $T124814[ebp]
  009be	52		 push	 edx
  009bf	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  009c2	e8 00 00 00 00	 call	 ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleY
  009c7	8b c8		 mov	 ecx, eax
  009c9	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  009ce	85 c0		 test	 eax, eax
  009d0	0f 85 a3 00 00
	00		 jne	 $L118906
$L118907:

; 323  : 			if (compressType)

  009d6	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  009dc	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  009e0	74 4a		 je	 SHORT $L118908

; 324  : 				ScaleDrawNoMD(dest, si.ScaleX(), si.ScaleY(), drawRect, SOL_Point(si.X1(),si.Y1()));

  009e2	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  009e5	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  009ea	50		 push	 eax
  009eb	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  009ee	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  009f3	50		 push	 eax
  009f4	8d 4d e4	 lea	 ecx, DWORD PTR $T124815[ebp]
  009f7	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  009fc	50		 push	 eax
  009fd	8b 4d 10	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  00a00	51		 push	 ecx
  00a01	8d 55 dc	 lea	 edx, DWORD PTR $T124816[ebp]
  00a04	52		 push	 edx
  00a05	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00a08	e8 00 00 00 00	 call	 ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleY
  00a0d	50		 push	 eax
  00a0e	8d 45 d4	 lea	 eax, DWORD PTR $T124817[ebp]
  00a11	50		 push	 eax
  00a12	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00a15	e8 00 00 00 00	 call	 ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleX
  00a1a	50		 push	 eax
  00a1b	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00a1e	51		 push	 ecx
  00a1f	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00a25	e8 00 00 00 00	 call	 ?ScaleDrawNoMD@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDrawNoMD

; 325  : 			else

  00a2a	eb 48		 jmp	 SHORT $L118912
$L118908:

; 326  : 				ScaleDrawUncompNoMD(dest, si.ScaleX(), si.ScaleY(), drawRect, SOL_Point(si.X1(),si.Y1()));

  00a2c	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00a2f	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00a34	50		 push	 eax
  00a35	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00a38	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00a3d	50		 push	 eax
  00a3e	8d 4d cc	 lea	 ecx, DWORD PTR $T124818[ebp]
  00a41	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00a46	50		 push	 eax
  00a47	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  00a4a	52		 push	 edx
  00a4b	8d 45 c4	 lea	 eax, DWORD PTR $T124819[ebp]
  00a4e	50		 push	 eax
  00a4f	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00a52	e8 00 00 00 00	 call	 ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleY
  00a57	50		 push	 eax
  00a58	8d 4d bc	 lea	 ecx, DWORD PTR $T124820[ebp]
  00a5b	51		 push	 ecx
  00a5c	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00a5f	e8 00 00 00 00	 call	 ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleX
  00a64	50		 push	 eax
  00a65	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00a68	52		 push	 edx
  00a69	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00a6f	e8 00 00 00 00	 call	 ?ScaleDrawUncompNoMD@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDrawUncompNoMD
$L118912:

; 328  : 		else

  00a74	e9 a7 01 00 00	 jmp	 $L118936
$L118906:

; 330  : 			if (compressType)

  00a79	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00a7f	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00a83	0f 84 83 00 00
	00		 je	 $L118917

; 332  : 				if (horzFlip)

  00a89	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00a8f	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  00a93	74 3a		 je	 SHORT $L118918

; 333  : 					DrawHzFlipNoMD(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00a95	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00a98	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00a9d	50		 push	 eax
  00a9e	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00aa1	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00aa6	50		 push	 eax
  00aa7	8d 4d b0	 lea	 ecx, DWORD PTR $T124822[ebp]
  00aaa	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00aaf	83 ec 08	 sub	 esp, 8
  00ab2	8b cc		 mov	 ecx, esp
  00ab4	50		 push	 eax
  00ab5	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00aba	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  00abd	52		 push	 edx
  00abe	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00ac1	50		 push	 eax
  00ac2	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00ac8	e8 00 00 00 00	 call	 ?DrawHzFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawHzFlipNoMD

; 334  : 				else

  00acd	eb 38		 jmp	 SHORT $L118921
$L118918:

; 335  : 					DrawNoFlipNoMD(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00acf	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00ad2	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00ad7	50		 push	 eax
  00ad8	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00adb	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00ae0	50		 push	 eax
  00ae1	8d 4d a4	 lea	 ecx, DWORD PTR $T124824[ebp]
  00ae4	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00ae9	83 ec 08	 sub	 esp, 8
  00aec	8b cc		 mov	 ecx, esp
  00aee	50		 push	 eax
  00aef	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00af4	8b 4d 10	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  00af7	51		 push	 ecx
  00af8	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00afb	52		 push	 edx
  00afc	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00b02	e8 00 00 00 00	 call	 ?DrawNoFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawNoFlipNoMD
$L118921:

; 337  : 			else

  00b07	e9 14 01 00 00	 jmp	 $L118936
$L118917:

; 339  : 				if (!hasSkip)

  00b0c	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00b12	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00b16	0f 85 83 00 00
	00		 jne	 $L118925

; 341  : 					if (horzFlip)

  00b1c	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00b22	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  00b26	74 3a		 je	 SHORT $L118926

; 342  : 						DrawUncompHzFlipNoMDNoSkip(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00b28	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00b2b	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00b30	50		 push	 eax
  00b31	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00b34	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00b39	50		 push	 eax
  00b3a	8d 4d 98	 lea	 ecx, DWORD PTR $T124826[ebp]
  00b3d	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00b42	83 ec 08	 sub	 esp, 8
  00b45	8b cc		 mov	 ecx, esp
  00b47	50		 push	 eax
  00b48	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00b4d	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  00b50	52		 push	 edx
  00b51	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00b54	50		 push	 eax
  00b55	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00b5b	e8 00 00 00 00	 call	 ?DrawUncompHzFlipNoMDNoSkip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompHzFlipNoMDNoSkip

; 343  : 					else

  00b60	eb 38		 jmp	 SHORT $L118929
$L118926:

; 344  : 						DrawUncompNoFlipNoMDNoSkip(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00b62	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00b65	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00b6a	50		 push	 eax
  00b6b	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00b6e	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00b73	50		 push	 eax
  00b74	8d 4d 8c	 lea	 ecx, DWORD PTR $T124828[ebp]
  00b77	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00b7c	83 ec 08	 sub	 esp, 8
  00b7f	8b cc		 mov	 ecx, esp
  00b81	50		 push	 eax
  00b82	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00b87	8b 4d 10	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  00b8a	51		 push	 ecx
  00b8b	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00b8e	52		 push	 edx
  00b8f	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00b95	e8 00 00 00 00	 call	 ?DrawUncompNoFlipNoMDNoSkip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompNoFlipNoMDNoSkip
$L118929:

; 346  : 				else

  00b9a	e9 81 00 00 00	 jmp	 $L118936
$L118925:

; 348  : 					if (horzFlip)

  00b9f	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00ba5	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00ba9	74 3a		 je	 SHORT $L118933

; 349  : 						DrawUncompHzFlipNoMD(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00bab	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00bae	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00bb3	50		 push	 eax
  00bb4	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00bb7	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00bbc	50		 push	 eax
  00bbd	8d 4d 80	 lea	 ecx, DWORD PTR $T124830[ebp]
  00bc0	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00bc5	83 ec 08	 sub	 esp, 8
  00bc8	8b cc		 mov	 ecx, esp
  00bca	50		 push	 eax
  00bcb	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00bd0	8b 4d 10	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  00bd3	51		 push	 ecx
  00bd4	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00bd7	52		 push	 edx
  00bd8	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00bde	e8 00 00 00 00	 call	 ?DrawUncompHzFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompHzFlipNoMD

; 350  : 					else

  00be3	eb 3b		 jmp	 SHORT $L118936
$L118933:

; 351  : 						DrawUncompNoFlipNoMD(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00be5	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00be8	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00bed	50		 push	 eax
  00bee	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00bf1	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00bf6	50		 push	 eax
  00bf7	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T124832[ebp]
  00bfd	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00c02	83 ec 08	 sub	 esp, 8
  00c05	8b cc		 mov	 ecx, esp
  00c07	50		 push	 eax
  00c08	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00c0d	8b 45 10	 mov	 eax, DWORD PTR _drawRect$[ebp]
  00c10	50		 push	 eax
  00c11	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00c14	51		 push	 ecx
  00c15	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00c1b	e8 00 00 00 00	 call	 ?DrawUncompNoFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompNoFlipNoMD
$L118936:

; 355  : 		return;

  00c20	e9 36 04 00 00	 jmp	 $L118901
$L118903:

; 357  : 		
; 358  : 
; 359  : 	//
; 360  : 	//  If we are remapping, use this set of draw routines
; 361  : 	//
; 362  : 
; 363  : 	if (Remap::remapCount  &&  remapState == RemapInCel)

  00c25	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?remapCount@Remap@@2IA, 0 ; Remap::remapCount
  00c2c	0f 84 1f 02 00
	00		 je	 $L118939
  00c32	8b 95 90 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00c38	83 7a 44 01	 cmp	 DWORD PTR [edx+68], 1
  00c3c	0f 85 0f 02 00
	00		 jne	 $L118939

; 365  : 		if (!si.ScaleX().IsOne() || !si.ScaleY().IsOne())

  00c42	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T124833[ebp]
  00c48	50		 push	 eax
  00c49	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00c4c	e8 00 00 00 00	 call	 ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleX
  00c51	8b c8		 mov	 ecx, eax
  00c53	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  00c58	85 c0		 test	 eax, eax
  00c5a	74 1e		 je	 SHORT $L118943
  00c5c	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T124834[ebp]
  00c62	51		 push	 ecx
  00c63	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00c66	e8 00 00 00 00	 call	 ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleY
  00c6b	8b c8		 mov	 ecx, eax
  00c6d	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  00c72	85 c0		 test	 eax, eax
  00c74	0f 85 b5 00 00
	00		 jne	 $L118942
$L118943:

; 367  : 			if (compressType)

  00c7a	8b 95 90 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00c80	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  00c84	74 53		 je	 SHORT $L118944

; 368  : 				ScaleDrawMap(dest, si.ScaleX(), si.ScaleY(), drawRect, SOL_Point(si.X1(),si.Y1()));

  00c86	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00c89	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00c8e	50		 push	 eax
  00c8f	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00c92	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00c97	50		 push	 eax
  00c98	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T124835[ebp]
  00c9e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00ca3	50		 push	 eax
  00ca4	8b 45 10	 mov	 eax, DWORD PTR _drawRect$[ebp]
  00ca7	50		 push	 eax
  00ca8	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T124836[ebp]
  00cae	51		 push	 ecx
  00caf	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00cb2	e8 00 00 00 00	 call	 ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleY
  00cb7	50		 push	 eax
  00cb8	8d 95 4c ff ff
	ff		 lea	 edx, DWORD PTR $T124837[ebp]
  00cbe	52		 push	 edx
  00cbf	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00cc2	e8 00 00 00 00	 call	 ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleX
  00cc7	50		 push	 eax
  00cc8	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00ccb	50		 push	 eax
  00ccc	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00cd2	e8 00 00 00 00	 call	 ?ScaleDrawMap@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDrawMap

; 369  : 			else

  00cd7	eb 51		 jmp	 SHORT $L118948
$L118944:

; 370  : 				ScaleDrawUncompMap(dest, si.ScaleX(), si.ScaleY(), drawRect, SOL_Point(si.X1(),si.Y1()));

  00cd9	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00cdc	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00ce1	50		 push	 eax
  00ce2	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00ce5	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00cea	50		 push	 eax
  00ceb	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T124838[ebp]
  00cf1	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00cf6	50		 push	 eax
  00cf7	8b 4d 10	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  00cfa	51		 push	 ecx
  00cfb	8d 95 3c ff ff
	ff		 lea	 edx, DWORD PTR $T124839[ebp]
  00d01	52		 push	 edx
  00d02	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00d05	e8 00 00 00 00	 call	 ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleY
  00d0a	50		 push	 eax
  00d0b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR $T124840[ebp]
  00d11	50		 push	 eax
  00d12	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00d15	e8 00 00 00 00	 call	 ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleX
  00d1a	50		 push	 eax
  00d1b	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00d1e	51		 push	 ecx
  00d1f	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00d25	e8 00 00 00 00	 call	 ?ScaleDrawUncompMap@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDrawUncompMap
$L118948:

; 372  : 		else

  00d2a	e9 1d 01 00 00	 jmp	 $L118964
$L118942:

; 374  : 			if (compressType)

  00d2f	8b 95 90 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00d35	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  00d39	0f 84 89 00 00
	00		 je	 $L118953

; 376  : 				if (horzFlip)

  00d3f	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00d45	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00d49	74 3d		 je	 SHORT $L118954

; 377  : 					DrawHzFlipMap(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00d4b	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00d4e	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00d53	50		 push	 eax
  00d54	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00d57	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00d5c	50		 push	 eax
  00d5d	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T124842[ebp]
  00d63	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00d68	83 ec 08	 sub	 esp, 8
  00d6b	8b cc		 mov	 ecx, esp
  00d6d	50		 push	 eax
  00d6e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00d73	8b 4d 10	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  00d76	51		 push	 ecx
  00d77	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00d7a	52		 push	 edx
  00d7b	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00d81	e8 00 00 00 00	 call	 ?DrawHzFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawHzFlipMap

; 378  : 				else

  00d86	eb 3b		 jmp	 SHORT $L118957
$L118954:

; 379  : 					DrawNoFlipMap(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00d88	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00d8b	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00d90	50		 push	 eax
  00d91	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00d94	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00d99	50		 push	 eax
  00d9a	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T124844[ebp]
  00da0	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00da5	83 ec 08	 sub	 esp, 8
  00da8	8b cc		 mov	 ecx, esp
  00daa	50		 push	 eax
  00dab	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00db0	8b 45 10	 mov	 eax, DWORD PTR _drawRect$[ebp]
  00db3	50		 push	 eax
  00db4	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00db7	51		 push	 ecx
  00db8	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00dbe	e8 00 00 00 00	 call	 ?DrawNoFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawNoFlipMap
$L118957:

; 381  : 			else

  00dc3	e9 84 00 00 00	 jmp	 $L118964
$L118953:

; 383  : 				if (horzFlip)

  00dc8	8b 95 90 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00dce	83 7a 4c 00	 cmp	 DWORD PTR [edx+76], 0
  00dd2	74 3d		 je	 SHORT $L118961

; 384  : 					DrawUncompHzFlipMap(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00dd4	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00dd7	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00ddc	50		 push	 eax
  00ddd	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00de0	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00de5	50		 push	 eax
  00de6	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T124846[ebp]
  00dec	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00df1	83 ec 08	 sub	 esp, 8
  00df4	8b cc		 mov	 ecx, esp
  00df6	50		 push	 eax
  00df7	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00dfc	8b 45 10	 mov	 eax, DWORD PTR _drawRect$[ebp]
  00dff	50		 push	 eax
  00e00	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00e03	51		 push	 ecx
  00e04	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00e0a	e8 00 00 00 00	 call	 ?DrawUncompHzFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompHzFlipMap

; 385  : 				else

  00e0f	eb 3b		 jmp	 SHORT $L118964
$L118961:

; 386  : 					DrawUncompNoFlipMap(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00e11	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00e14	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00e19	50		 push	 eax
  00e1a	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00e1d	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00e22	50		 push	 eax
  00e23	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T124848[ebp]
  00e29	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00e2e	83 ec 08	 sub	 esp, 8
  00e31	8b cc		 mov	 ecx, esp
  00e33	50		 push	 eax
  00e34	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00e39	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  00e3c	52		 push	 edx
  00e3d	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00e40	50		 push	 eax
  00e41	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00e47	e8 00 00 00 00	 call	 ?DrawUncompNoFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompNoFlipMap
$L118964:

; 390  : 	else

  00e4c	e9 0a 02 00 00	 jmp	 $L118992
$L118939:

; 392  : 		if (!si.ScaleX().IsOne() || !si.ScaleY().IsOne())

  00e51	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T124849[ebp]
  00e57	51		 push	 ecx
  00e58	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00e5b	e8 00 00 00 00	 call	 ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleX
  00e60	8b c8		 mov	 ecx, eax
  00e62	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  00e67	85 c0		 test	 eax, eax
  00e69	74 1e		 je	 SHORT $L118971
  00e6b	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR $T124850[ebp]
  00e71	52		 push	 edx
  00e72	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00e75	e8 00 00 00 00	 call	 ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleY
  00e7a	8b c8		 mov	 ecx, eax
  00e7c	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  00e81	85 c0		 test	 eax, eax
  00e83	0f 85 b5 00 00
	00		 jne	 $L118970
$L118971:

; 394  : 			if (compressType)

  00e89	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00e8f	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00e93	74 53		 je	 SHORT $L118972

; 395  : 				ScaleDraw(dest, si.ScaleX(), si.ScaleY(), drawRect, SOL_Point(si.X1(),si.Y1()));

  00e95	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00e98	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00e9d	50		 push	 eax
  00e9e	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00ea1	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00ea6	50		 push	 eax
  00ea7	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T124851[ebp]
  00ead	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00eb2	50		 push	 eax
  00eb3	8b 4d 10	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  00eb6	51		 push	 ecx
  00eb7	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR $T124852[ebp]
  00ebd	52		 push	 edx
  00ebe	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00ec1	e8 00 00 00 00	 call	 ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleY
  00ec6	50		 push	 eax
  00ec7	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T124853[ebp]
  00ecd	50		 push	 eax
  00ece	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00ed1	e8 00 00 00 00	 call	 ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleX
  00ed6	50		 push	 eax
  00ed7	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00eda	51		 push	 ecx
  00edb	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00ee1	e8 00 00 00 00	 call	 ?ScaleDraw@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDraw

; 396  : 			else

  00ee6	eb 51		 jmp	 SHORT $L118976
$L118972:

; 397  : 				ScaleDrawUncomp(dest, si.ScaleX(), si.ScaleY(), drawRect, SOL_Point(si.X1(),si.Y1()));

  00ee8	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00eeb	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00ef0	50		 push	 eax
  00ef1	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00ef4	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00ef9	50		 push	 eax
  00efa	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T124854[ebp]
  00f00	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00f05	50		 push	 eax
  00f06	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  00f09	52		 push	 edx
  00f0a	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T124855[ebp]
  00f10	50		 push	 eax
  00f11	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00f14	e8 00 00 00 00	 call	 ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleY
  00f19	50		 push	 eax
  00f1a	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T124856[ebp]
  00f20	51		 push	 ecx
  00f21	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00f24	e8 00 00 00 00	 call	 ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ; ScreenItem::ScaleX
  00f29	50		 push	 eax
  00f2a	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00f2d	52		 push	 edx
  00f2e	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f34	e8 00 00 00 00	 call	 ?ScaleDrawUncomp@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDrawUncomp
$L118976:

; 399  : 		else

  00f39	e9 1d 01 00 00	 jmp	 $L118992
$L118970:

; 401  : 			if (compressType)

  00f3e	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00f44	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00f48	0f 84 89 00 00
	00		 je	 $L118981

; 403  : 				if (horzFlip)

  00f4e	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f54	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  00f58	74 3d		 je	 SHORT $L118982

; 404  : 					DrawHzFlip(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00f5a	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00f5d	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00f62	50		 push	 eax
  00f63	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00f66	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00f6b	50		 push	 eax
  00f6c	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T124858[ebp]
  00f72	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00f77	83 ec 08	 sub	 esp, 8
  00f7a	8b cc		 mov	 ecx, esp
  00f7c	50		 push	 eax
  00f7d	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00f82	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  00f85	52		 push	 edx
  00f86	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00f89	50		 push	 eax
  00f8a	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f90	e8 00 00 00 00	 call	 ?DrawHzFlip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawHzFlip

; 405  : 				else

  00f95	eb 3b		 jmp	 SHORT $L118985
$L118982:

; 406  : 					DrawNoFlip(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00f97	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00f9a	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00f9f	50		 push	 eax
  00fa0	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00fa3	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00fa8	50		 push	 eax
  00fa9	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T124860[ebp]
  00faf	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  00fb4	83 ec 08	 sub	 esp, 8
  00fb7	8b cc		 mov	 ecx, esp
  00fb9	50		 push	 eax
  00fba	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00fbf	8b 4d 10	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  00fc2	51		 push	 ecx
  00fc3	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00fc6	52		 push	 edx
  00fc7	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00fcd	e8 00 00 00 00	 call	 ?DrawNoFlip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawNoFlip
$L118985:

; 408  : 			else

  00fd2	e9 84 00 00 00	 jmp	 $L118992
$L118981:

; 410  : 				if (horzFlip)

  00fd7	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00fdd	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00fe1	74 3d		 je	 SHORT $L118989

; 411  : 					DrawUncompHzFlip(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  00fe3	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00fe6	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  00feb	50		 push	 eax
  00fec	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  00fef	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  00ff4	50		 push	 eax
  00ff5	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T124862[ebp]
  00ffb	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  01000	83 ec 08	 sub	 esp, 8
  01003	8b cc		 mov	 ecx, esp
  01005	50		 push	 eax
  01006	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  0100b	8b 4d 10	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  0100e	51		 push	 ecx
  0100f	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  01012	52		 push	 edx
  01013	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01019	e8 00 00 00 00	 call	 ?DrawUncompHzFlip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompHzFlip

; 412  : 				else

  0101e	eb 3b		 jmp	 SHORT $L118992
$L118989:

; 413  : 					DrawUncompNoFlip(dest, drawRect, SOL_Point(si.X1(), si.Y1()));

  01020	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  01023	e8 00 00 00 00	 call	 ?Y1@ScreenItem@@QBEHXZ	; ScreenItem::Y1
  01028	50		 push	 eax
  01029	8b 4d 0c	 mov	 ecx, DWORD PTR _si$[ebp]
  0102c	e8 00 00 00 00	 call	 ?X1@ScreenItem@@QBEHXZ	; ScreenItem::X1
  01031	50		 push	 eax
  01032	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR $T124864[ebp]
  01038	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  0103d	83 ec 08	 sub	 esp, 8
  01040	8b cc		 mov	 ecx, esp
  01042	50		 push	 eax
  01043	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01048	8b 45 10	 mov	 eax, DWORD PTR _drawRect$[ebp]
  0104b	50		 push	 eax
  0104c	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  0104f	51		 push	 ecx
  01050	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01056	e8 00 00 00 00	 call	 ?DrawUncompNoFlip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompNoFlip
$L118992:
$L118901:

; 417  : }

  0105b	8b e5		 mov	 esp, ebp
  0105d	5d		 pop	 ebp
  0105e	c2 0c 00	 ret	 12			; 0000000cH
?Draw@CelObj@@QAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@@Z ENDP ; CelObj::Draw
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_this$ = -4
??0SOL_Point@@QAE@HH@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 21   : 	SOL_Point(Coord x, Coord y) : x(x), y(y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0SOL_Point@@QAE@HH@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??0SOL_Point@@QAE@ABV0@@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 22   : 	SOL_Point(const SOL_Point& p) : x(p.x), y(p.y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0SOL_Point@@QAE@ABV0@@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ?IsOne@Ratio@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsOne@Ratio@@QBEHXZ PROC NEAR				; Ratio::IsOne, COMDAT

; 12   : 	Bool	IsOne() const				{return numer == denom;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	33 c0		 xor	 eax, eax
  00011	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00014	0f 94 c0	 sete	 al
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?IsOne@Ratio@@QBEHXZ ENDP				; Ratio::IsOne
_TEXT	ENDS
EXTRN	??0Ratio@@QAE@ABV0@@Z:NEAR			; Ratio::Ratio
;	COMDAT ?ScaleX@ScreenItem@@QBE?AVRatio@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?ScaleX@ScreenItem@@QBE?AVRatio@@XZ PROC NEAR		; ScreenItem::ScaleX, COMDAT

; 65   : 	Ratio			ScaleX() const				{return finalScaleX;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 78	 add	 eax, 120		; 00000078H
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00011	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?ScaleX@ScreenItem@@QBE?AVRatio@@XZ ENDP		; ScreenItem::ScaleX
_TEXT	ENDS
;	COMDAT ?ScaleY@ScreenItem@@QBE?AVRatio@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?ScaleY@ScreenItem@@QBE?AVRatio@@XZ PROC NEAR		; ScreenItem::ScaleY, COMDAT

; 66   : 	Ratio			ScaleY() const				{return finalScaleY;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  00018	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?ScaleY@ScreenItem@@QBE?AVRatio@@XZ ENDP		; ScreenItem::ScaleY
_TEXT	ENDS
;	COMDAT ?X1@ScreenItem@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?X1@ScreenItem@@QBEHXZ PROC NEAR			; ScreenItem::X1, COMDAT

; 68   : 	int			X1() const					{return x1;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?X1@ScreenItem@@QBEHXZ ENDP				; ScreenItem::X1
_TEXT	ENDS
;	COMDAT ?Y1@ScreenItem@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Y1@ScreenItem@@QBEHXZ PROC NEAR			; ScreenItem::Y1, COMDAT

; 69   : 	int			Y1() const					{return y1;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Y1@ScreenItem@@QBEHXZ ENDP				; ScreenItem::Y1
_TEXT	ENDS
PUBLIC	?DrawTo@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@VRatio@@3@Z ; CelObj::DrawTo
_TEXT	SEGMENT
_dest$ = 8
_drawRect$ = 12
_p$ = 16
_ratioX$ = 24
_ratioY$ = 32
_this$ = -44
?DrawTo@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@VRatio@@3@Z PROC NEAR ; CelObj::DrawTo

; 422  : {   

  01061	55		 push	 ebp
  01062	8b ec		 mov	 ebp, esp
  01064	83 ec 2c	 sub	 esp, 44			; 0000002cH
  01067	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 423  : 
; 424  : 	if (remapState == RemapInCel)

  0106a	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0106d	83 78 44 01	 cmp	 DWORD PTR [eax+68], 1
  01071	0f 85 fe 00 00
	00		 jne	 $L119003

; 426  : 		if (!ratioX.IsOne() || !ratioY.IsOne())

  01077	8d 4d 18	 lea	 ecx, DWORD PTR _ratioX$[ebp]
  0107a	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  0107f	85 c0		 test	 eax, eax
  01081	74 0c		 je	 SHORT $L119005
  01083	8d 4d 20	 lea	 ecx, DWORD PTR _ratioY$[ebp]
  01086	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  0108b	85 c0		 test	 eax, eax
  0108d	75 48		 jne	 SHORT $L119004
$L119005:

; 428  : 			if (compressType)

  0108f	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  01092	83 79 40 00	 cmp	 DWORD PTR [ecx+64], 0
  01096	74 1e		 je	 SHORT $L119006

; 429  : 				ScaleDrawMap(dest, ratioX, ratioY, drawRect, p);

  01098	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  0109b	52		 push	 edx
  0109c	8b 45 0c	 mov	 eax, DWORD PTR _drawRect$[ebp]
  0109f	50		 push	 eax
  010a0	8d 4d 20	 lea	 ecx, DWORD PTR _ratioY$[ebp]
  010a3	51		 push	 ecx
  010a4	8d 55 18	 lea	 edx, DWORD PTR _ratioX$[ebp]
  010a7	52		 push	 edx
  010a8	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  010ab	50		 push	 eax
  010ac	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  010af	e8 00 00 00 00	 call	 ?ScaleDrawMap@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDrawMap

; 430  : 			else

  010b4	eb 1c		 jmp	 SHORT $L119007
$L119006:

; 431  : 				ScaleDrawUncompMap(dest, ratioX, ratioY, drawRect, p);

  010b6	8d 4d 10	 lea	 ecx, DWORD PTR _p$[ebp]
  010b9	51		 push	 ecx
  010ba	8b 55 0c	 mov	 edx, DWORD PTR _drawRect$[ebp]
  010bd	52		 push	 edx
  010be	8d 45 20	 lea	 eax, DWORD PTR _ratioY$[ebp]
  010c1	50		 push	 eax
  010c2	8d 4d 18	 lea	 ecx, DWORD PTR _ratioX$[ebp]
  010c5	51		 push	 ecx
  010c6	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  010c9	52		 push	 edx
  010ca	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  010cd	e8 00 00 00 00	 call	 ?ScaleDrawUncompMap@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDrawUncompMap
$L119007:

; 433  : 		else

  010d2	e9 99 00 00 00	 jmp	 $L119017
$L119004:

; 435  : 			if (compressType)

  010d7	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  010da	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  010de	74 49		 je	 SHORT $L119009

; 437  : 				if (horzFlip)

  010e0	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  010e3	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  010e7	74 20		 je	 SHORT $L119010

; 438  : 					DrawHzFlipMap(dest, drawRect, p);

  010e9	83 ec 08	 sub	 esp, 8
  010ec	8b cc		 mov	 ecx, esp
  010ee	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  010f1	52		 push	 edx
  010f2	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  010f7	8b 45 0c	 mov	 eax, DWORD PTR _drawRect$[ebp]
  010fa	50		 push	 eax
  010fb	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  010fe	51		 push	 ecx
  010ff	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  01102	e8 00 00 00 00	 call	 ?DrawHzFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawHzFlipMap

; 439  : 				else

  01107	eb 1e		 jmp	 SHORT $L119012
$L119010:

; 440  : 					DrawNoFlipMap(dest, drawRect, p);

  01109	83 ec 08	 sub	 esp, 8
  0110c	8b cc		 mov	 ecx, esp
  0110e	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  01111	52		 push	 edx
  01112	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01117	8b 45 0c	 mov	 eax, DWORD PTR _drawRect$[ebp]
  0111a	50		 push	 eax
  0111b	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  0111e	51		 push	 ecx
  0111f	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  01122	e8 00 00 00 00	 call	 ?DrawNoFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawNoFlipMap
$L119012:

; 442  : 			else

  01127	eb 47		 jmp	 SHORT $L119017
$L119009:

; 444  : 				if (horzFlip)

  01129	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0112c	83 7a 4c 00	 cmp	 DWORD PTR [edx+76], 0
  01130	74 20		 je	 SHORT $L119015

; 445  : 					DrawUncompHzFlipMap(dest, drawRect, p);

  01132	83 ec 08	 sub	 esp, 8
  01135	8b cc		 mov	 ecx, esp
  01137	8d 45 10	 lea	 eax, DWORD PTR _p$[ebp]
  0113a	50		 push	 eax
  0113b	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01140	8b 4d 0c	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  01143	51		 push	 ecx
  01144	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  01147	52		 push	 edx
  01148	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0114b	e8 00 00 00 00	 call	 ?DrawUncompHzFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompHzFlipMap

; 446  : 				else

  01150	eb 1e		 jmp	 SHORT $L119017
$L119015:

; 447  : 					DrawUncompNoFlipMap(dest, drawRect, p);

  01152	83 ec 08	 sub	 esp, 8
  01155	8b cc		 mov	 ecx, esp
  01157	8d 45 10	 lea	 eax, DWORD PTR _p$[ebp]
  0115a	50		 push	 eax
  0115b	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01160	8b 4d 0c	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  01163	51		 push	 ecx
  01164	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  01167	52		 push	 edx
  01168	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0116b	e8 00 00 00 00	 call	 ?DrawUncompNoFlipMap@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompNoFlipMap
$L119017:

; 451  : 	else

  01170	e9 4e 01 00 00	 jmp	 $L119039
$L119003:

; 453  : 		if (!ratioX.IsOne() || !ratioY.IsOne())

  01175	8d 4d 18	 lea	 ecx, DWORD PTR _ratioX$[ebp]
  01178	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  0117d	85 c0		 test	 eax, eax
  0117f	74 0c		 je	 SHORT $L119021
  01181	8d 4d 20	 lea	 ecx, DWORD PTR _ratioY$[ebp]
  01184	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  01189	85 c0		 test	 eax, eax
  0118b	75 48		 jne	 SHORT $L119020
$L119021:

; 455  : 			if (compressType)

  0118d	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  01190	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  01194	74 1e		 je	 SHORT $L119022

; 456  : 				ScaleDrawNoMD(dest, ratioX, ratioY, drawRect, p);

  01196	8d 4d 10	 lea	 ecx, DWORD PTR _p$[ebp]
  01199	51		 push	 ecx
  0119a	8b 55 0c	 mov	 edx, DWORD PTR _drawRect$[ebp]
  0119d	52		 push	 edx
  0119e	8d 45 20	 lea	 eax, DWORD PTR _ratioY$[ebp]
  011a1	50		 push	 eax
  011a2	8d 4d 18	 lea	 ecx, DWORD PTR _ratioX$[ebp]
  011a5	51		 push	 ecx
  011a6	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  011a9	52		 push	 edx
  011aa	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  011ad	e8 00 00 00 00	 call	 ?ScaleDrawNoMD@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDrawNoMD

; 457  : 			else

  011b2	eb 1c		 jmp	 SHORT $L119023
$L119022:

; 458  : 				ScaleDrawUncompNoMD(dest, ratioX, ratioY, drawRect, p);

  011b4	8d 45 10	 lea	 eax, DWORD PTR _p$[ebp]
  011b7	50		 push	 eax
  011b8	8b 4d 0c	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  011bb	51		 push	 ecx
  011bc	8d 55 20	 lea	 edx, DWORD PTR _ratioY$[ebp]
  011bf	52		 push	 edx
  011c0	8d 45 18	 lea	 eax, DWORD PTR _ratioX$[ebp]
  011c3	50		 push	 eax
  011c4	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  011c7	51		 push	 ecx
  011c8	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  011cb	e8 00 00 00 00	 call	 ?ScaleDrawUncompNoMD@CelObj@@QAEXABVBuffer@@ABVRatio@@1ABVSOL_Rect@@ABVSOL_Point@@@Z ; CelObj::ScaleDrawUncompNoMD
$L119023:

; 460  : 		else

  011d0	e9 ee 00 00 00	 jmp	 $L119039
$L119020:

; 462  : 			if (compressType)

  011d5	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  011d8	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  011dc	74 4c		 je	 SHORT $L119025

; 464  : 				if (horzFlip)

  011de	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  011e1	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  011e5	74 20		 je	 SHORT $L119026

; 465  : 					DrawHzFlipNoMD(dest, drawRect, p);

  011e7	83 ec 08	 sub	 esp, 8
  011ea	8b cc		 mov	 ecx, esp
  011ec	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  011ef	52		 push	 edx
  011f0	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  011f5	8b 45 0c	 mov	 eax, DWORD PTR _drawRect$[ebp]
  011f8	50		 push	 eax
  011f9	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  011fc	51		 push	 ecx
  011fd	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  01200	e8 00 00 00 00	 call	 ?DrawHzFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawHzFlipNoMD

; 466  : 				else

  01205	eb 1e		 jmp	 SHORT $L119028
$L119026:

; 467  : 					DrawNoFlipNoMD(dest, drawRect, p);

  01207	83 ec 08	 sub	 esp, 8
  0120a	8b cc		 mov	 ecx, esp
  0120c	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  0120f	52		 push	 edx
  01210	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01215	8b 45 0c	 mov	 eax, DWORD PTR _drawRect$[ebp]
  01218	50		 push	 eax
  01219	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  0121c	51		 push	 ecx
  0121d	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  01220	e8 00 00 00 00	 call	 ?DrawNoFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawNoFlipNoMD
$L119028:

; 469  : 			else

  01225	e9 99 00 00 00	 jmp	 $L119039
$L119025:

; 471  : 				if (!hasSkip)

  0122a	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0122d	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  01231	75 49		 jne	 SHORT $L119031

; 473  : 					if (horzFlip)

  01233	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  01236	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0123a	74 20		 je	 SHORT $L119032

; 474  : 						DrawUncompHzFlipNoMDNoSkip(dest, drawRect, p);

  0123c	83 ec 08	 sub	 esp, 8
  0123f	8b cc		 mov	 ecx, esp
  01241	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  01244	52		 push	 edx
  01245	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  0124a	8b 45 0c	 mov	 eax, DWORD PTR _drawRect$[ebp]
  0124d	50		 push	 eax
  0124e	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  01251	51		 push	 ecx
  01252	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  01255	e8 00 00 00 00	 call	 ?DrawUncompHzFlipNoMDNoSkip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompHzFlipNoMDNoSkip

; 475  : 					else

  0125a	eb 1e		 jmp	 SHORT $L119034
$L119032:

; 476  : 						DrawUncompNoFlipNoMDNoSkip(dest, drawRect, p);

  0125c	83 ec 08	 sub	 esp, 8
  0125f	8b cc		 mov	 ecx, esp
  01261	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  01264	52		 push	 edx
  01265	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  0126a	8b 45 0c	 mov	 eax, DWORD PTR _drawRect$[ebp]
  0126d	50		 push	 eax
  0126e	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  01271	51		 push	 ecx
  01272	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  01275	e8 00 00 00 00	 call	 ?DrawUncompNoFlipNoMDNoSkip@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompNoFlipNoMDNoSkip
$L119034:

; 478  : 				else

  0127a	eb 47		 jmp	 SHORT $L119039
$L119031:

; 480  : 					if (horzFlip)

  0127c	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0127f	83 7a 4c 00	 cmp	 DWORD PTR [edx+76], 0
  01283	74 20		 je	 SHORT $L119037

; 481  : 						DrawUncompHzFlipNoMD(dest, drawRect, p);

  01285	83 ec 08	 sub	 esp, 8
  01288	8b cc		 mov	 ecx, esp
  0128a	8d 45 10	 lea	 eax, DWORD PTR _p$[ebp]
  0128d	50		 push	 eax
  0128e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01293	8b 4d 0c	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  01296	51		 push	 ecx
  01297	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  0129a	52		 push	 edx
  0129b	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0129e	e8 00 00 00 00	 call	 ?DrawUncompHzFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompHzFlipNoMD

; 482  : 					else

  012a3	eb 1e		 jmp	 SHORT $L119039
$L119037:

; 483  : 						DrawUncompNoFlipNoMD(dest, drawRect, p);

  012a5	83 ec 08	 sub	 esp, 8
  012a8	8b cc		 mov	 ecx, esp
  012aa	8d 45 10	 lea	 eax, DWORD PTR _p$[ebp]
  012ad	50		 push	 eax
  012ae	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  012b3	8b 4d 0c	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  012b6	51		 push	 ecx
  012b7	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  012ba	52		 push	 edx
  012bb	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  012be	e8 00 00 00 00	 call	 ?DrawUncompNoFlipNoMD@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@@Z ; CelObj::DrawUncompNoFlipNoMD
$L119039:

; 488  : }

  012c3	8b e5		 mov	 esp, ebp
  012c5	5d		 pop	 ebp
  012c6	c2 20 00	 ret	 32			; 00000020H
?DrawTo@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@VRatio@@3@Z ENDP ; CelObj::DrawTo
_TEXT	ENDS
PUBLIC	?View@Bitmap@@QBEHXZ				; Bitmap::View
PUBLIC	?AnalyzeForRemap@CelObjView@@QAEHXZ		; CelObjView::AnalyzeForRemap
EXTRN	?REMAP_START_COLOR@@3HA:DWORD			; REMAP_START_COLOR
EXTRN	?REMAP_END_COLOR@@3HA:DWORD			; REMAP_END_COLOR
_TEXT	SEGMENT
_this$ = -80
_hRun$ = -12
_vRun$ = -4
_viewID$ = -44
_resBuffer$ = -40
_resBufferEnd$ = -36
_celPtr$ = -20
_controlData$ = -8
_colorData$ = -32
_controlTable$ = -28
_colorTable$ = -16
_i$ = -24
_controlPtr$119062 = -52
_colorPtr$119063 = -56
_j$119064 = -48
_control$119068 = -60
_k$119070 = -64
_color$119074 = -68
_color$119079 = -72
$T124884 = -76
?AnalyzeForRemap@CelObjView@@QAEHXZ PROC NEAR		; CelObjView::AnalyzeForRemap

; 495  : {

  012c9	55		 push	 ebp
  012ca	8b ec		 mov	 ebp, esp
  012cc	83 ec 50	 sub	 esp, 80			; 00000050H
  012cf	89 4d b0	 mov	 DWORD PTR _this$[ebp], ecx

; 496  : 	// ***********************************************************************
; 497  : 	// Non scaled drawing.
; 498  : 	// ***********************************************************************
; 499  : 	// Get a pointer to the drawing area(a static buffer).
; 500  : 
; 501  : 	int hRun = width;

  012d2	8b 45 b0	 mov	 eax, DWORD PTR _this$[ebp]
  012d5	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  012d8	89 4d f4	 mov	 DWORD PTR _hRun$[ebp], ecx

; 502  : 	int vRun = height;

  012db	8b 55 b0	 mov	 edx, DWORD PTR _this$[ebp]
  012de	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  012e1	89 45 fc	 mov	 DWORD PTR _vRun$[ebp], eax

; 503  : //	uchar* resBuffer = ResPointer();
; 504  : 
; 505  : 	MemID viewID;

  012e4	8d 4d d4	 lea	 ecx, DWORD PTR _viewID$[ebp]
  012e7	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 506  : 	viewID = resMgr->Get(MemResView, bitmap.View());

  012ec	6a 00		 push	 0
  012ee	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  012f1	83 c1 04	 add	 ecx, 4
  012f4	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  012f9	50		 push	 eax
  012fa	6a 00		 push	 0
  012fc	8d 4d b4	 lea	 ecx, DWORD PTR $T124884[ebp]
  012ff	51		 push	 ecx
  01300	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  01306	8b 02		 mov	 eax, DWORD PTR [edx]
  01308	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  0130e	ff 50 20	 call	 DWORD PTR [eax+32]
  01311	66 8b 08	 mov	 cx, WORD PTR [eax]
  01314	66 89 4d d4	 mov	 WORD PTR _viewID$[ebp], cx

; 507  : 
; 508  : 	uchar *resBuffer = (uchar *)*viewID;

  01318	8d 4d d4	 lea	 ecx, DWORD PTR _viewID$[ebp]
  0131b	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01320	89 45 d8	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 509  : 	uchar *resBufferEnd = resBuffer + viewID.Size();

  01323	8d 4d d4	 lea	 ecx, DWORD PTR _viewID$[ebp]
  01326	e8 00 00 00 00	 call	 ?Size@MemID@@QBEIXZ	; MemID::Size
  0132b	8b 55 d8	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  0132e	03 d0		 add	 edx, eax
  01330	89 55 dc	 mov	 DWORD PTR _resBufferEnd$[ebp], edx

; 510  : 
; 511  : 	CelHeader* celPtr = (CelHeader*) (resBuffer + celOffset);

  01333	8b 45 b0	 mov	 eax, DWORD PTR _this$[ebp]
  01336	8b 4d d8	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  01339	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  0133c	89 4d ec	 mov	 DWORD PTR _celPtr$[ebp], ecx

; 512  : 	uchar* controlData = resBuffer + celPtr->controlOffset;

  0133f	8b 55 ec	 mov	 edx, DWORD PTR _celPtr$[ebp]
  01342	8b 45 d8	 mov	 eax, DWORD PTR _resBuffer$[ebp]
  01345	03 42 18	 add	 eax, DWORD PTR [edx+24]
  01348	89 45 f8	 mov	 DWORD PTR _controlData$[ebp], eax

; 513  : 	uchar* colorData = resBuffer + celPtr->colorOffset;

  0134b	8b 4d ec	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  0134e	8b 55 d8	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  01351	03 51 1c	 add	 edx, DWORD PTR [ecx+28]
  01354	89 55 e0	 mov	 DWORD PTR _colorData$[ebp], edx

; 514  : 
; 515  : 	long* controlTable = (long *) (resBuffer + celPtr->rowTableOffset);

  01357	8b 45 ec	 mov	 eax, DWORD PTR _celPtr$[ebp]
  0135a	8b 4d d8	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  0135d	03 48 20	 add	 ecx, DWORD PTR [eax+32]
  01360	89 4d e4	 mov	 DWORD PTR _controlTable$[ebp], ecx

; 516  : 	long* colorTable = controlTable + height;

  01363	8b 55 b0	 mov	 edx, DWORD PTR _this$[ebp]
  01366	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01369	8b 4d e4	 mov	 ecx, DWORD PTR _controlTable$[ebp]
  0136c	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0136f	89 55 f0	 mov	 DWORD PTR _colorTable$[ebp], edx

; 517  : 
; 518  : 	// Draw the inset rectangle
; 519  : 	for (int i = 0;i < vRun; i++) {

  01372	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01379	eb 09		 jmp	 SHORT $L119059
$L119060:
  0137b	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  0137e	83 c0 01	 add	 eax, 1
  01381	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$L119059:
  01384	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  01387	3b 4d fc	 cmp	 ecx, DWORD PTR _vRun$[ebp]
  0138a	0f 8d 65 01 00
	00		 jge	 $L119061

; 520  : 		// Find the row data
; 521  : 		uchar* controlPtr = controlData + controlTable[i];

  01390	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  01393	8b 45 e4	 mov	 eax, DWORD PTR _controlTable$[ebp]
  01396	8b 4d f8	 mov	 ecx, DWORD PTR _controlData$[ebp]
  01399	03 0c 90	 add	 ecx, DWORD PTR [eax+edx*4]
  0139c	89 4d cc	 mov	 DWORD PTR _controlPtr$119062[ebp], ecx

; 522  : 		uchar* colorPtr = colorData + colorTable[i];

  0139f	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  013a2	8b 45 f0	 mov	 eax, DWORD PTR _colorTable$[ebp]
  013a5	8b 4d e0	 mov	 ecx, DWORD PTR _colorData$[ebp]
  013a8	03 0c 90	 add	 ecx, DWORD PTR [eax+edx*4]
  013ab	89 4d c8	 mov	 DWORD PTR _colorPtr$119063[ebp], ecx

; 523  : 
; 524  : //		if ( controlPtr < resBuffer || controlPtr > resBufferEnd )
; 525  : //			msgMgr->Fatal ( "controlTable[%d] (%s) (0x%x) points outside of valid view data. (%d, %d, %d) (0x%x, 0x%x, 0x%x)", i, gLoadedView? "loaded" : "cached", controlTable[i], bitmap.View(), bitmap.Loop(), bitmap.Cel(), controlPtr, resBuffer, resBufferEnd );
; 526  : 
; 527  : //		if ( colorPtr < resBuffer || colorPtr > resBufferEnd )
; 528  : //			msgMgr->Fatal ( "colorTable[%d] (%s) (0x%x) points outside of valid view data. (%d, %d, %d) (0x%x, 0x%x, 0x%x)", i, gLoadedView? "loaded" : "cached", colorTable[i], bitmap.View(), bitmap.Loop(), bitmap.Cel(), colorPtr, resBuffer, resBufferEnd );
; 529  : 
; 530  : 		// Draw a line
; 531  : 		for (int j = 0;j < hRun;) {

  013ae	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _j$119064[ebp], 0
$L119066:
  013b5	8b 55 d0	 mov	 edx, DWORD PTR _j$119064[ebp]
  013b8	3b 55 f4	 cmp	 edx, DWORD PTR _hRun$[ebp]
  013bb	0f 8d 2f 01 00
	00		 jge	 $L119067

; 532  : 			// Get the control character
; 533  : 			uchar control = *controlPtr++;

  013c1	8b 45 cc	 mov	 eax, DWORD PTR _controlPtr$119062[ebp]
  013c4	8a 08		 mov	 cl, BYTE PTR [eax]
  013c6	88 4d c4	 mov	 BYTE PTR _control$119068[ebp], cl
  013c9	8b 55 cc	 mov	 edx, DWORD PTR _controlPtr$119062[ebp]
  013cc	83 c2 01	 add	 edx, 1
  013cf	89 55 cc	 mov	 DWORD PTR _controlPtr$119062[ebp], edx

; 534  : 
; 535  : 			if (!(control & REPEATC)) {

  013d2	8b 45 c4	 mov	 eax, DWORD PTR _control$119068[ebp]
  013d5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  013da	25 80 00 00 00	 and	 eax, 128		; 00000080H
  013df	85 c0		 test	 eax, eax
  013e1	0f 85 86 00 00
	00		 jne	 $L119069

; 536  : 				for (int k = 0; k < control; ++k) {

  013e7	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _k$119070[ebp], 0
  013ee	eb 09		 jmp	 SHORT $L119071
$L119072:
  013f0	8b 4d c0	 mov	 ecx, DWORD PTR _k$119070[ebp]
  013f3	83 c1 01	 add	 ecx, 1
  013f6	89 4d c0	 mov	 DWORD PTR _k$119070[ebp], ecx
$L119071:
  013f9	8b 55 c4	 mov	 edx, DWORD PTR _control$119068[ebp]
  013fc	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01402	39 55 c0	 cmp	 DWORD PTR _k$119070[ebp], edx
  01405	7d 53		 jge	 SHORT $L119073

; 537  : 					uchar color = *colorPtr++;

  01407	8b 45 c8	 mov	 eax, DWORD PTR _colorPtr$119063[ebp]
  0140a	8a 08		 mov	 cl, BYTE PTR [eax]
  0140c	88 4d bc	 mov	 BYTE PTR _color$119074[ebp], cl
  0140f	8b 55 c8	 mov	 edx, DWORD PTR _colorPtr$119063[ebp]
  01412	83 c2 01	 add	 edx, 1
  01415	89 55 c8	 mov	 DWORD PTR _colorPtr$119063[ebp], edx

; 538  : 					if (color >= REMAP_START_COLOR  &&  color != skip  &&  color <= REMAP_END_COLOR)  {

  01418	8b 45 bc	 mov	 eax, DWORD PTR _color$119074[ebp]
  0141b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01420	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?REMAP_START_COLOR@@3HA ; REMAP_START_COLOR
  01426	7c 30		 jl	 SHORT $L119075
  01428	8b 4d bc	 mov	 ecx, DWORD PTR _color$119074[ebp]
  0142b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01431	8b 55 b0	 mov	 edx, DWORD PTR _this$[ebp]
  01434	33 c0		 xor	 eax, eax
  01436	8a 42 38	 mov	 al, BYTE PTR [edx+56]
  01439	3b c8		 cmp	 ecx, eax
  0143b	74 1b		 je	 SHORT $L119075
  0143d	8b 4d bc	 mov	 ecx, DWORD PTR _color$119074[ebp]
  01440	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01446	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?REMAP_END_COLOR@@3HA ; REMAP_END_COLOR
  0144c	7f 0a		 jg	 SHORT $L119075

; 539  : 						return True;

  0144e	b8 01 00 00 00	 mov	 eax, 1
  01453	e9 9f 00 00 00	 jmp	 $L119043
$L119075:

; 541  : 				}

  01458	eb 96		 jmp	 SHORT $L119072
$L119073:

; 542  : 				j += control;

  0145a	8b 55 c4	 mov	 edx, DWORD PTR _control$119068[ebp]
  0145d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01463	8b 45 d0	 mov	 eax, DWORD PTR _j$119064[ebp]
  01466	03 c2		 add	 eax, edx
  01468	89 45 d0	 mov	 DWORD PTR _j$119064[ebp], eax

; 544  : 			else {

  0146b	eb 7e		 jmp	 SHORT $L119078
$L119069:

; 545  : 				if (control & REPSKIP) {

  0146d	8b 4d c4	 mov	 ecx, DWORD PTR _control$119068[ebp]
  01470	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01476	83 e1 40	 and	 ecx, 64			; 00000040H
  01479	85 c9		 test	 ecx, ecx
  0147b	74 1b		 je	 SHORT $L119077

; 546  : 					// Do a run of repeated skip
; 547  : 					control &= 0x3f;

  0147d	8a 55 c4	 mov	 dl, BYTE PTR _control$119068[ebp]
  01480	80 e2 3f	 and	 dl, 63			; 0000003fH
  01483	88 55 c4	 mov	 BYTE PTR _control$119068[ebp], dl

; 548  : 					j += control;

  01486	8b 45 c4	 mov	 eax, DWORD PTR _control$119068[ebp]
  01489	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0148e	8b 4d d0	 mov	 ecx, DWORD PTR _j$119064[ebp]
  01491	03 c8		 add	 ecx, eax
  01493	89 4d d0	 mov	 DWORD PTR _j$119064[ebp], ecx

; 550  : 				else {

  01496	eb 53		 jmp	 SHORT $L119078
$L119077:

; 551  : 					// Do a run of repeated color
; 552  : 					uchar color = *colorPtr++;

  01498	8b 55 c8	 mov	 edx, DWORD PTR _colorPtr$119063[ebp]
  0149b	8a 02		 mov	 al, BYTE PTR [edx]
  0149d	88 45 b8	 mov	 BYTE PTR _color$119079[ebp], al
  014a0	8b 4d c8	 mov	 ecx, DWORD PTR _colorPtr$119063[ebp]
  014a3	83 c1 01	 add	 ecx, 1
  014a6	89 4d c8	 mov	 DWORD PTR _colorPtr$119063[ebp], ecx

; 553  : 					if (color >= REMAP_START_COLOR && color <= REMAP_END_COLOR)

  014a9	8b 55 b8	 mov	 edx, DWORD PTR _color$119079[ebp]
  014ac	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  014b2	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?REMAP_START_COLOR@@3HA ; REMAP_START_COLOR
  014b8	7c 17		 jl	 SHORT $L119080
  014ba	8b 45 b8	 mov	 eax, DWORD PTR _color$119079[ebp]
  014bd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  014c2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?REMAP_END_COLOR@@3HA ; REMAP_END_COLOR
  014c8	7f 07		 jg	 SHORT $L119080

; 554  : 						return True;

  014ca	b8 01 00 00 00	 mov	 eax, 1
  014cf	eb 26		 jmp	 SHORT $L119043
$L119080:

; 555  : 					control &= 0x3f;

  014d1	8a 4d c4	 mov	 cl, BYTE PTR _control$119068[ebp]
  014d4	80 e1 3f	 and	 cl, 63			; 0000003fH
  014d7	88 4d c4	 mov	 BYTE PTR _control$119068[ebp], cl

; 556  : 					j += control;

  014da	8b 55 c4	 mov	 edx, DWORD PTR _control$119068[ebp]
  014dd	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  014e3	8b 45 d0	 mov	 eax, DWORD PTR _j$119064[ebp]
  014e6	03 c2		 add	 eax, edx
  014e8	89 45 d0	 mov	 DWORD PTR _j$119064[ebp], eax
$L119078:

; 559  : 		}

  014eb	e9 c5 fe ff ff	 jmp	 $L119066
$L119067:

; 560  : 	}

  014f0	e9 86 fe ff ff	 jmp	 $L119060
$L119061:

; 561  : 	return False;

  014f5	33 c0		 xor	 eax, eax
$L119043:

; 562  : }

  014f7	8b e5		 mov	 esp, ebp
  014f9	5d		 pop	 ebp
  014fa	c3		 ret	 0
?AnalyzeForRemap@CelObjView@@QAEHXZ ENDP		; CelObjView::AnalyzeForRemap
_TEXT	ENDS
;	COMDAT ?View@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?View@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::View, COMDAT

; 137  : 	int	View() const			{return view;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?View@Bitmap@@QBEHXZ ENDP				; Bitmap::View
_TEXT	ENDS
PUBLIC	?AnalyzeUncompForRemap@CelObjView@@QAEHXZ	; CelObjView::AnalyzeUncompForRemap
_TEXT	SEGMENT
_this$ = -40
_resBuffer$ = -24
_celPtr$ = -12
_hRun$ = -8
_vRun$ = -4
_colorData$ = -20
_y$ = -16
_src$119094 = -32
_x$119095 = -28
_color$119099 = -36
?AnalyzeUncompForRemap@CelObjView@@QAEHXZ PROC NEAR	; CelObjView::AnalyzeUncompForRemap

; 568  : {

  014fb	55		 push	 ebp
  014fc	8b ec		 mov	 ebp, esp
  014fe	83 ec 28	 sub	 esp, 40			; 00000028H
  01501	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 569  : 	uchar* resBuffer = ResPointer();

  01504	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01507	8b 10		 mov	 edx, DWORD PTR [eax]
  01509	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0150c	ff 52 14	 call	 DWORD PTR [edx+20]
  0150f	89 45 e8	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 570  : 	CelHeader* celPtr = (CelHeader*) (resBuffer + celOffset);

  01512	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01515	8b 4d e8	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  01518	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  0151b	89 4d f4	 mov	 DWORD PTR _celPtr$[ebp], ecx

; 571  : 	int hRun = width;

  0151e	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01521	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  01524	89 45 f8	 mov	 DWORD PTR _hRun$[ebp], eax

; 572  : 	int vRun = height;

  01527	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0152a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0152d	89 55 fc	 mov	 DWORD PTR _vRun$[ebp], edx

; 573  : 
; 574  : 	uchar* colorData = resBuffer + celPtr->controlOffset;	//  Correct !

  01530	8b 45 f4	 mov	 eax, DWORD PTR _celPtr$[ebp]
  01533	8b 4d e8	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  01536	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  01539	89 4d ec	 mov	 DWORD PTR _colorData$[ebp], ecx

; 575  : 	for (int y = 0; y < vRun; y++)

  0153c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  01543	eb 09		 jmp	 SHORT $L119091
$L119092:
  01545	8b 55 f0	 mov	 edx, DWORD PTR _y$[ebp]
  01548	83 c2 01	 add	 edx, 1
  0154b	89 55 f0	 mov	 DWORD PTR _y$[ebp], edx
$L119091:
  0154e	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  01551	3b 45 fc	 cmp	 eax, DWORD PTR _vRun$[ebp]
  01554	0f 8d 82 00 00
	00		 jge	 $L119093

; 577  : 		uchar* src = colorData;

  0155a	8b 4d ec	 mov	 ecx, DWORD PTR _colorData$[ebp]
  0155d	89 4d e0	 mov	 DWORD PTR _src$119094[ebp], ecx

; 578  : 		for (int x = 0; x < hRun; x++)

  01560	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _x$119095[ebp], 0
  01567	eb 09		 jmp	 SHORT $L119096
$L119097:
  01569	8b 55 e4	 mov	 edx, DWORD PTR _x$119095[ebp]
  0156c	83 c2 01	 add	 edx, 1
  0156f	89 55 e4	 mov	 DWORD PTR _x$119095[ebp], edx
$L119096:
  01572	8b 45 e4	 mov	 eax, DWORD PTR _x$119095[ebp]
  01575	3b 45 f8	 cmp	 eax, DWORD PTR _hRun$[ebp]
  01578	7d 51		 jge	 SHORT $L119098

; 580  : 			uchar color = *src++;

  0157a	8b 4d e0	 mov	 ecx, DWORD PTR _src$119094[ebp]
  0157d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0157f	88 55 dc	 mov	 BYTE PTR _color$119099[ebp], dl
  01582	8b 45 e0	 mov	 eax, DWORD PTR _src$119094[ebp]
  01585	83 c0 01	 add	 eax, 1
  01588	89 45 e0	 mov	 DWORD PTR _src$119094[ebp], eax

; 581  : 			if (color >= REMAP_START_COLOR  &&  color != skip  &&  color <= REMAP_END_COLOR)

  0158b	8b 4d dc	 mov	 ecx, DWORD PTR _color$119099[ebp]
  0158e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01594	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?REMAP_START_COLOR@@3HA ; REMAP_START_COLOR
  0159a	7c 2d		 jl	 SHORT $L119100
  0159c	8b 55 dc	 mov	 edx, DWORD PTR _color$119099[ebp]
  0159f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  015a5	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  015a8	33 c9		 xor	 ecx, ecx
  015aa	8a 48 38	 mov	 cl, BYTE PTR [eax+56]
  015ad	3b d1		 cmp	 edx, ecx
  015af	74 18		 je	 SHORT $L119100
  015b1	8b 55 dc	 mov	 edx, DWORD PTR _color$119099[ebp]
  015b4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  015ba	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?REMAP_END_COLOR@@3HA ; REMAP_END_COLOR
  015c0	7f 07		 jg	 SHORT $L119100

; 582  : 				return True;

  015c2	b8 01 00 00 00	 mov	 eax, 1
  015c7	eb 15		 jmp	 SHORT $L119083
$L119100:

; 583  : 		}

  015c9	eb 9e		 jmp	 SHORT $L119097
$L119098:

; 584  : 		colorData += width;

  015cb	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  015ce	8b 4d ec	 mov	 ecx, DWORD PTR _colorData$[ebp]
  015d1	03 48 20	 add	 ecx, DWORD PTR [eax+32]
  015d4	89 4d ec	 mov	 DWORD PTR _colorData$[ebp], ecx

; 585  : 	}

  015d7	e9 69 ff ff ff	 jmp	 $L119092
$L119093:

; 586  : 	return False;

  015dc	33 c0		 xor	 eax, eax
$L119083:

; 587  : }

  015de	8b e5		 mov	 esp, ebp
  015e0	5d		 pop	 ebp
  015e1	c3		 ret	 0
?AnalyzeUncompForRemap@CelObjView@@QAEHXZ ENDP		; CelObjView::AnalyzeUncompForRemap
_TEXT	ENDS
PUBLIC	?AnalyzeForSkip@CelObjPic@@IAEHXZ		; CelObjPic::AnalyzeForSkip
_TEXT	SEGMENT
_this$ = -52
_resBuffer$ = -28
_celPtr$ = -12
_controlData$ = -4
_colorData$ = -24
_controlTable$ = -20
_colorTable$ = -8
_i$ = -16
_controlPtr$119116 = -36
_colorPtr$119117 = -40
_j$119118 = -32
_control$119122 = -44
_k$119124 = -48
?AnalyzeForSkip@CelObjPic@@IAEHXZ PROC NEAR		; CelObjPic::AnalyzeForSkip

; 594  : {

  015e2	55		 push	 ebp
  015e3	8b ec		 mov	 ebp, esp
  015e5	83 ec 34	 sub	 esp, 52			; 00000034H
  015e8	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 595  : 	uchar* resBuffer = ResPointer();

  015eb	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  015ee	8b 10		 mov	 edx, DWORD PTR [eax]
  015f0	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  015f3	ff 52 14	 call	 DWORD PTR [edx+20]
  015f6	89 45 e4	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 596  : 
; 597  : 	CelHeader* celPtr = (CelHeader*) (resBuffer + celOffset);

  015f9	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  015fc	8b 4d e4	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  015ff	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  01602	89 4d f4	 mov	 DWORD PTR _celPtr$[ebp], ecx

; 598  : 	uchar* controlData = resBuffer + celPtr->controlOffset;

  01605	8b 55 f4	 mov	 edx, DWORD PTR _celPtr$[ebp]
  01608	8b 45 e4	 mov	 eax, DWORD PTR _resBuffer$[ebp]
  0160b	03 42 18	 add	 eax, DWORD PTR [edx+24]
  0160e	89 45 fc	 mov	 DWORD PTR _controlData$[ebp], eax

; 599  : 	uchar* colorData = resBuffer + celPtr->colorOffset;

  01611	8b 4d f4	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  01614	8b 55 e4	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  01617	03 51 1c	 add	 edx, DWORD PTR [ecx+28]
  0161a	89 55 e8	 mov	 DWORD PTR _colorData$[ebp], edx

; 600  : 
; 601  : 	long* controlTable = (long *) (resBuffer + celPtr->rowTableOffset);

  0161d	8b 45 f4	 mov	 eax, DWORD PTR _celPtr$[ebp]
  01620	8b 4d e4	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  01623	03 48 20	 add	 ecx, DWORD PTR [eax+32]
  01626	89 4d ec	 mov	 DWORD PTR _controlTable$[ebp], ecx

; 602  : 	long* colorTable = controlTable + height;

  01629	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0162c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0162f	8b 4d ec	 mov	 ecx, DWORD PTR _controlTable$[ebp]
  01632	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  01635	89 55 f8	 mov	 DWORD PTR _colorTable$[ebp], edx

; 603  : 
; 604  : 	for (int i = 0; i < height; i++) {

  01638	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0163f	eb 09		 jmp	 SHORT $L119113
$L119114:
  01641	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  01644	83 c0 01	 add	 eax, 1
  01647	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L119113:
  0164a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0164d	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  01650	3b 51 24	 cmp	 edx, DWORD PTR [ecx+36]
  01653	0f 8d f3 00 00
	00		 jge	 $L119115

; 605  : 		// Find the row data
; 606  : 		uchar* controlPtr = controlData + controlTable[i];

  01659	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0165c	8b 4d ec	 mov	 ecx, DWORD PTR _controlTable$[ebp]
  0165f	8b 55 fc	 mov	 edx, DWORD PTR _controlData$[ebp]
  01662	03 14 81	 add	 edx, DWORD PTR [ecx+eax*4]
  01665	89 55 dc	 mov	 DWORD PTR _controlPtr$119116[ebp], edx

; 607  : 		uchar* colorPtr = colorData + colorTable[i];

  01668	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0166b	8b 4d f8	 mov	 ecx, DWORD PTR _colorTable$[ebp]
  0166e	8b 55 e8	 mov	 edx, DWORD PTR _colorData$[ebp]
  01671	03 14 81	 add	 edx, DWORD PTR [ecx+eax*4]
  01674	89 55 d8	 mov	 DWORD PTR _colorPtr$119117[ebp], edx

; 608  : 
; 609  : 		// Draw a line
; 610  : 		for (int j = 0; j < width;) {

  01677	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _j$119118[ebp], 0
$L119120:
  0167e	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  01681	8b 4d e0	 mov	 ecx, DWORD PTR _j$119118[ebp]
  01684	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  01687	0f 8d ba 00 00
	00		 jge	 $L119121

; 611  : 			// Get the control character
; 612  : 			uchar control = *controlPtr++;

  0168d	8b 55 dc	 mov	 edx, DWORD PTR _controlPtr$119116[ebp]
  01690	8a 02		 mov	 al, BYTE PTR [edx]
  01692	88 45 d4	 mov	 BYTE PTR _control$119122[ebp], al
  01695	8b 4d dc	 mov	 ecx, DWORD PTR _controlPtr$119116[ebp]
  01698	83 c1 01	 add	 ecx, 1
  0169b	89 4d dc	 mov	 DWORD PTR _controlPtr$119116[ebp], ecx

; 613  : 			if (!(control & REPEATC)) {

  0169e	8b 55 d4	 mov	 edx, DWORD PTR _control$119122[ebp]
  016a1	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  016a7	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  016ad	85 d2		 test	 edx, edx
  016af	75 58		 jne	 SHORT $L119123

; 614  : 				for (int k = 0; k < control; ++k) {

  016b1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _k$119124[ebp], 0
  016b8	eb 09		 jmp	 SHORT $L119125
$L119126:
  016ba	8b 45 d0	 mov	 eax, DWORD PTR _k$119124[ebp]
  016bd	83 c0 01	 add	 eax, 1
  016c0	89 45 d0	 mov	 DWORD PTR _k$119124[ebp], eax
$L119125:
  016c3	8b 4d d4	 mov	 ecx, DWORD PTR _control$119122[ebp]
  016c6	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  016cc	39 4d d0	 cmp	 DWORD PTR _k$119124[ebp], ecx
  016cf	7d 25		 jge	 SHORT $L119127

; 615  : 					if (*colorPtr++ == skip)

  016d1	8b 55 d8	 mov	 edx, DWORD PTR _colorPtr$119117[ebp]
  016d4	33 c0		 xor	 eax, eax
  016d6	8a 02		 mov	 al, BYTE PTR [edx]
  016d8	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  016db	33 d2		 xor	 edx, edx
  016dd	8a 51 38	 mov	 dl, BYTE PTR [ecx+56]
  016e0	8b 4d d8	 mov	 ecx, DWORD PTR _colorPtr$119117[ebp]
  016e3	83 c1 01	 add	 ecx, 1
  016e6	89 4d d8	 mov	 DWORD PTR _colorPtr$119117[ebp], ecx
  016e9	3b c2		 cmp	 eax, edx
  016eb	75 07		 jne	 SHORT $L119128

; 616  : 						return True;

  016ed	b8 01 00 00 00	 mov	 eax, 1
  016f2	eb 5a		 jmp	 SHORT $L119103
$L119128:

; 617  : 				}

  016f4	eb c4		 jmp	 SHORT $L119126
$L119127:

; 618  : 				j += control;

  016f6	8b 55 d4	 mov	 edx, DWORD PTR _control$119122[ebp]
  016f9	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  016ff	8b 45 e0	 mov	 eax, DWORD PTR _j$119118[ebp]
  01702	03 c2		 add	 eax, edx
  01704	89 45 e0	 mov	 DWORD PTR _j$119118[ebp], eax

; 620  : 			else {

  01707	eb 39		 jmp	 SHORT $L119131
$L119123:

; 621  : 				if (control & REPSKIP) {

  01709	8b 4d d4	 mov	 ecx, DWORD PTR _control$119122[ebp]
  0170c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01712	83 e1 40	 and	 ecx, 64			; 00000040H
  01715	85 c9		 test	 ecx, ecx
  01717	74 07		 je	 SHORT $L119130

; 622  : 					// Do a run of repeated skip
; 623  : 					return True;

  01719	b8 01 00 00 00	 mov	 eax, 1
  0171e	eb 2e		 jmp	 SHORT $L119103
$L119130:

; 626  : 					// Do a run of repeated color
; 627  : 					colorPtr++;

  01720	8b 55 d8	 mov	 edx, DWORD PTR _colorPtr$119117[ebp]
  01723	83 c2 01	 add	 edx, 1
  01726	89 55 d8	 mov	 DWORD PTR _colorPtr$119117[ebp], edx

; 628  : 					control &= 0x3f;

  01729	8a 45 d4	 mov	 al, BYTE PTR _control$119122[ebp]
  0172c	24 3f		 and	 al, 63			; 0000003fH
  0172e	88 45 d4	 mov	 BYTE PTR _control$119122[ebp], al

; 629  : 					j += control;

  01731	8b 4d d4	 mov	 ecx, DWORD PTR _control$119122[ebp]
  01734	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0173a	8b 55 e0	 mov	 edx, DWORD PTR _j$119118[ebp]
  0173d	03 d1		 add	 edx, ecx
  0173f	89 55 e0	 mov	 DWORD PTR _j$119118[ebp], edx
$L119131:

; 632  : 		}

  01742	e9 37 ff ff ff	 jmp	 $L119120
$L119121:

; 633  : 	}

  01747	e9 f5 fe ff ff	 jmp	 $L119114
$L119115:

; 634  : 	return False;

  0174c	33 c0		 xor	 eax, eax
$L119103:

; 635  : }

  0174e	8b e5		 mov	 esp, ebp
  01750	5d		 pop	 ebp
  01751	c3		 ret	 0
?AnalyzeForSkip@CelObjPic@@IAEHXZ ENDP			; CelObjPic::AnalyzeForSkip
_TEXT	ENDS
PUBLIC	?AnalyzeUncompForSkip@CelObjPic@@IAEHXZ		; CelObjPic::AnalyzeUncompForSkip
_TEXT	SEGMENT
_this$ = -28
_resBuffer$ = -16
_celPtr$ = -4
_colorData$ = -12
_y$ = -8
_src$119143 = -24
_x$119144 = -20
?AnalyzeUncompForSkip@CelObjPic@@IAEHXZ PROC NEAR	; CelObjPic::AnalyzeUncompForSkip

; 641  : {

  01752	55		 push	 ebp
  01753	8b ec		 mov	 ebp, esp
  01755	83 ec 1c	 sub	 esp, 28			; 0000001cH
  01758	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 642  : 	uchar* resBuffer = ResPointer();

  0175b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0175e	8b 10		 mov	 edx, DWORD PTR [eax]
  01760	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01763	ff 52 14	 call	 DWORD PTR [edx+20]
  01766	89 45 f0	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 643  : 	CelHeader* celPtr = (CelHeader*) (resBuffer + celOffset);

  01769	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0176c	8b 4d f0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  0176f	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  01772	89 4d fc	 mov	 DWORD PTR _celPtr$[ebp], ecx

; 644  : 
; 645  : 	uchar* colorData = resBuffer + celPtr->controlOffset;	//  Correct !

  01775	8b 55 fc	 mov	 edx, DWORD PTR _celPtr$[ebp]
  01778	8b 45 f0	 mov	 eax, DWORD PTR _resBuffer$[ebp]
  0177b	03 42 18	 add	 eax, DWORD PTR [edx+24]
  0177e	89 45 f4	 mov	 DWORD PTR _colorData$[ebp], eax

; 646  : 	for (int y = 0; y < height; y++)

  01781	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  01788	eb 09		 jmp	 SHORT $L119140
$L119141:
  0178a	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  0178d	83 c1 01	 add	 ecx, 1
  01790	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx
$L119140:
  01793	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  01796	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  01799	3b 42 24	 cmp	 eax, DWORD PTR [edx+36]
  0179c	7d 56		 jge	 SHORT $L119142

; 648  : 		uchar* src = colorData;

  0179e	8b 4d f4	 mov	 ecx, DWORD PTR _colorData$[ebp]
  017a1	89 4d e8	 mov	 DWORD PTR _src$119143[ebp], ecx

; 649  : 		for (int x = 0; x < width; x++)

  017a4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _x$119144[ebp], 0
  017ab	eb 09		 jmp	 SHORT $L119145
$L119146:
  017ad	8b 55 ec	 mov	 edx, DWORD PTR _x$119144[ebp]
  017b0	83 c2 01	 add	 edx, 1
  017b3	89 55 ec	 mov	 DWORD PTR _x$119144[ebp], edx
$L119145:
  017b6	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  017b9	8b 4d ec	 mov	 ecx, DWORD PTR _x$119144[ebp]
  017bc	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  017bf	7d 25		 jge	 SHORT $L119147

; 650  : 			if (*src++ == skip)

  017c1	8b 55 e8	 mov	 edx, DWORD PTR _src$119143[ebp]
  017c4	33 c0		 xor	 eax, eax
  017c6	8a 02		 mov	 al, BYTE PTR [edx]
  017c8	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  017cb	33 d2		 xor	 edx, edx
  017cd	8a 51 38	 mov	 dl, BYTE PTR [ecx+56]
  017d0	8b 4d e8	 mov	 ecx, DWORD PTR _src$119143[ebp]
  017d3	83 c1 01	 add	 ecx, 1
  017d6	89 4d e8	 mov	 DWORD PTR _src$119143[ebp], ecx
  017d9	3b c2		 cmp	 eax, edx
  017db	75 07		 jne	 SHORT $L119148

; 651  : 				return True;

  017dd	b8 01 00 00 00	 mov	 eax, 1
  017e2	eb 12		 jmp	 SHORT $L119134
$L119148:

; 652  : 		colorData += width;

  017e4	eb c7		 jmp	 SHORT $L119146
$L119147:
  017e6	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  017e9	8b 45 f4	 mov	 eax, DWORD PTR _colorData$[ebp]
  017ec	03 42 20	 add	 eax, DWORD PTR [edx+32]
  017ef	89 45 f4	 mov	 DWORD PTR _colorData$[ebp], eax

; 653  : 	}

  017f2	eb 96		 jmp	 SHORT $L119141
$L119142:

; 654  : 	return False;

  017f4	33 c0		 xor	 eax, eax
$L119134:

; 655  : }

  017f6	8b e5		 mov	 esp, ebp
  017f8	5d		 pop	 ebp
  017f9	c3		 ret	 0
?AnalyzeUncompForSkip@CelObjPic@@IAEHXZ ENDP		; CelObjPic::AnalyzeUncompForSkip
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
PUBLIC	?ScaleTables@CelObj@@QAEXABVRatio@@0@Z		; CelObj::ScaleTables
PUBLIC	?DoTable@CelObj@@QAEXPAHABVRatio@@@Z		; CelObj::DoTable
PUBLIC	??0Ratio@@QAE@XZ				; Ratio::Ratio
EXTRN	??8Ratio@@QBEHABV0@@Z:NEAR			; Ratio::operator==
EXTRN	??9Ratio@@QBEHABV0@@Z:NEAR			; Ratio::operator!=
_BSS	SEGMENT
	ALIGN	8

_?lastScaleX@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A DQ 02H DUP (?)
_?$S313@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4EA DB 01H DUP (?)
	ALIGN	8

_?lastScaleY@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A DQ 02H DUP (?)
_?scaleXa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA DD 02008H DUP (?)
_?scaleYa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA DD 02000H DUP (?)
_BSS	ENDS
_TEXT	SEGMENT
_ratioX$ = 8
_ratioY$ = 12
_this$ = -12
_i$ = -4
_i$119178 = -8
?ScaleTables@CelObj@@QAEXABVRatio@@0@Z PROC NEAR	; CelObj::ScaleTables

; 660  : {

  017fa	55		 push	 ebp
  017fb	8b ec		 mov	 ebp, esp
  017fd	83 ec 0c	 sub	 esp, 12			; 0000000cH
  01800	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 661  : 	static int lastused = -1;
; 662  : 	static Ratio lastScaleX[2], lastScaleY[2];

  01803	33 c0		 xor	 eax, eax
  01805	a0 00 00 00 00	 mov	 al, BYTE PTR _?$S313@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4EA
  0180a	83 e0 01	 and	 eax, 1
  0180d	85 c0		 test	 eax, eax
  0180f	75 2f		 jne	 SHORT $L119160
  01811	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _?$S313@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4EA
  01817	80 c9 01	 or	 cl, 1
  0181a	88 0d 00 00 00
	00		 mov	 BYTE PTR _?$S313@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4EA, cl
  01820	68 00 00 00 00	 push	 OFFSET FLAT:??0Ratio@@QAE@XZ ; Ratio::Ratio
  01825	6a 02		 push	 2
  01827	6a 08		 push	 8
  01829	68 00 00 00 00	 push	 OFFSET FLAT:_?lastScaleX@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A
  0182e	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EX0@Z@Z	; `vector constructor iterator'
  01833	68 00 00 00 00	 push	 OFFSET FLAT:_$E314
  01838	e8 00 00 00 00	 call	 _atexit
  0183d	83 c4 04	 add	 esp, 4
$L119160:
  01840	33 d2		 xor	 edx, edx
  01842	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR _?$S313@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4EA
  01848	83 e2 02	 and	 edx, 2
  0184b	85 d2		 test	 edx, edx
  0184d	75 2c		 jne	 SHORT $L119165
  0184f	a0 00 00 00 00	 mov	 al, BYTE PTR _?$S313@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4EA
  01854	0c 02		 or	 al, 2
  01856	a2 00 00 00 00	 mov	 BYTE PTR _?$S313@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4EA, al
  0185b	68 00 00 00 00	 push	 OFFSET FLAT:??0Ratio@@QAE@XZ ; Ratio::Ratio
  01860	6a 02		 push	 2
  01862	6a 08		 push	 8
  01864	68 00 00 00 00	 push	 OFFSET FLAT:_?lastScaleY@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A
  01869	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EX0@Z@Z	; `vector constructor iterator'
  0186e	68 00 00 00 00	 push	 OFFSET FLAT:_$E315
  01873	e8 00 00 00 00	 call	 _atexit
  01878	83 c4 04	 add	 esp, 4
$L119165:

; 663  : 	static int scaleXa[2][maxScaledLine];
; 664  : 	static int scaleYa[2][maxScaledLine];
; 665  : 	int i;
; 666  : 	assert(ratioX.numer > 0);
; 667  : 	assert(ratioX.denom >= 0);
; 668  : 	assert(ratioY.numer > 0);
; 669  : 	assert(ratioY.denom >= 0);
; 670  : 
; 671  : 	//  If uninitialized, init all arrays to no scaling
; 672  : 	if (lastused == -1)

  0187b	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _?lastused@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4HA, -1
  01882	75 5b		 jne	 SHORT $L119181

; 674  : 		lastused = 0;

  01884	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _?lastused@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4HA, 0

; 675  : 		for (int i = 0; i < maxScaledLine; i++)

  0188e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$119178[ebp], 0
  01895	eb 09		 jmp	 SHORT $L119179
$L119180:
  01897	8b 4d f8	 mov	 ecx, DWORD PTR _i$119178[ebp]
  0189a	83 c1 01	 add	 ecx, 1
  0189d	89 4d f8	 mov	 DWORD PTR _i$119178[ebp], ecx
$L119179:
  018a0	81 7d f8 00 10
	00 00		 cmp	 DWORD PTR _i$119178[ebp], 4096 ; 00001000H
  018a7	7d 36		 jge	 SHORT $L119181

; 677  : 			scaleXa[0][i] = i;

  018a9	8b 55 f8	 mov	 edx, DWORD PTR _i$119178[ebp]
  018ac	8b 45 f8	 mov	 eax, DWORD PTR _i$119178[ebp]
  018af	89 04 95 00 00
	00 00		 mov	 DWORD PTR _?scaleXa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA[edx*4], eax

; 678  : 			scaleXa[1][i] = i;

  018b6	8b 4d f8	 mov	 ecx, DWORD PTR _i$119178[ebp]
  018b9	8b 55 f8	 mov	 edx, DWORD PTR _i$119178[ebp]
  018bc	89 14 8d 00 40
	00 00		 mov	 DWORD PTR _?scaleXa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA[ecx*4+16384], edx

; 679  : 			scaleYa[0][i] = i;

  018c3	8b 45 f8	 mov	 eax, DWORD PTR _i$119178[ebp]
  018c6	8b 4d f8	 mov	 ecx, DWORD PTR _i$119178[ebp]
  018c9	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _?scaleYa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA[eax*4], ecx

; 680  : 			scaleYa[1][i] = i;

  018d0	8b 55 f8	 mov	 edx, DWORD PTR _i$119178[ebp]
  018d3	8b 45 f8	 mov	 eax, DWORD PTR _i$119178[ebp]
  018d6	89 04 95 00 40
	00 00		 mov	 DWORD PTR _?scaleYa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA[edx*4+16384], eax

; 681  : 		}

  018dd	eb b8		 jmp	 SHORT $L119180
$L119181:

; 685  : 	assert(lastused < 2);
; 686  : 
; 687  : 	//  If we already have scaling cached, point to correct array
; 688  : 	for (i = 0; i < 2; i++)

  018df	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  018e6	eb 09		 jmp	 SHORT $L119184
$L119185:
  018e8	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  018eb	83 c1 01	 add	 ecx, 1
  018ee	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L119184:
  018f1	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  018f5	7d 61		 jge	 SHORT $L119186

; 690  : 		if (lastScaleX[i] == ratioX  &&  lastScaleY[i] == ratioY)

  018f7	8b 55 08	 mov	 edx, DWORD PTR _ratioX$[ebp]
  018fa	52		 push	 edx
  018fb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  018fe	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR _?lastScaleX@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A[eax*8]
  01905	e8 00 00 00 00	 call	 ??8Ratio@@QBEHABV0@@Z	; Ratio::operator==
  0190a	85 c0		 test	 eax, eax
  0190c	74 48		 je	 SHORT $L119187
  0190e	8b 4d 0c	 mov	 ecx, DWORD PTR _ratioY$[ebp]
  01911	51		 push	 ecx
  01912	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  01915	8d 0c d5 00 00
	00 00		 lea	 ecx, DWORD PTR _?lastScaleY@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A[edx*8]
  0191c	e8 00 00 00 00	 call	 ??8Ratio@@QBEHABV0@@Z	; Ratio::operator==
  01921	85 c0		 test	 eax, eax
  01923	74 31		 je	 SHORT $L119187

; 692  : 			lastused = i;

  01925	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01928	a3 00 00 00 00	 mov	 DWORD PTR _?lastused@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4HA, eax

; 693  : 			scaleX = scaleXa[i];

  0192d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  01930	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  01933	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:_?scaleXa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA
  01939	89 0d 00 00 00
	00		 mov	 DWORD PTR ?scaleX@CelObj@@2PAHA, ecx ; CelObj::scaleX

; 694  : 			scaleY = scaleYa[i];

  0193f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  01942	c1 e2 0e	 shl	 edx, 14			; 0000000eH
  01945	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:_?scaleYa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA
  0194b	89 15 00 00 00
	00		 mov	 DWORD PTR ?scaleY@CelObj@@2PAHA, edx ; CelObj::scaleY

; 695  : 			return;

  01951	e9 cc 00 00 00	 jmp	 $L119153
$L119187:

; 697  : 	}

  01956	eb 90		 jmp	 SHORT $L119185
$L119186:

; 698  : 
; 699  : 	//  Need to calculate scaling array.  Use the least recently used array
; 700  : 	i = 1 - lastused;

  01958	b8 01 00 00 00	 mov	 eax, 1
  0195d	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _?lastused@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4HA
  01963	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 701  : 
; 702  : 	//  If X ratio scaling is different, recalculate table
; 703  : 	if (lastScaleX[i] != ratioX)

  01966	8b 4d 08	 mov	 ecx, DWORD PTR _ratioX$[ebp]
  01969	51		 push	 ecx
  0196a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0196d	8d 0c d5 00 00
	00 00		 lea	 ecx, DWORD PTR _?lastScaleX@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A[edx*8]
  01974	e8 00 00 00 00	 call	 ??9Ratio@@QBEHABV0@@Z	; Ratio::operator!=
  01979	85 c0		 test	 eax, eax
  0197b	74 32		 je	 SHORT $L119188

; 705  : 		DoTable(scaleXa[i], ratioX);

  0197d	8b 45 08	 mov	 eax, DWORD PTR _ratioX$[ebp]
  01980	50		 push	 eax
  01981	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  01984	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  01987	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:_?scaleXa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA
  0198d	51		 push	 ecx
  0198e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01991	e8 00 00 00 00	 call	 ?DoTable@CelObj@@QAEXPAHABVRatio@@@Z ; CelObj::DoTable

; 706  : 		lastScaleX[i] = ratioX;

  01996	8b 55 08	 mov	 edx, DWORD PTR _ratioX$[ebp]
  01999	8b 02		 mov	 eax, DWORD PTR [edx]
  0199b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0199e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  019a1	89 04 d5 00 00
	00 00		 mov	 DWORD PTR _?lastScaleX@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A[edx*8], eax
  019a8	89 0c d5 04 00
	00 00		 mov	 DWORD PTR _?lastScaleX@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A[edx*8+4], ecx
$L119188:

; 708  : 
; 709  : 	//  If Y ratio scaling is different, recalculate table
; 710  : 	if (lastScaleY[i] != ratioY)

  019af	8b 45 0c	 mov	 eax, DWORD PTR _ratioY$[ebp]
  019b2	50		 push	 eax
  019b3	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  019b6	8d 0c cd 00 00
	00 00		 lea	 ecx, DWORD PTR _?lastScaleY@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A[ecx*8]
  019bd	e8 00 00 00 00	 call	 ??9Ratio@@QBEHABV0@@Z	; Ratio::operator!=
  019c2	85 c0		 test	 eax, eax
  019c4	74 31		 je	 SHORT $L119189

; 712  : 		DoTable(scaleYa[i], ratioY);

  019c6	8b 55 0c	 mov	 edx, DWORD PTR _ratioY$[ebp]
  019c9	52		 push	 edx
  019ca	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  019cd	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  019d0	05 00 00 00 00	 add	 eax, OFFSET FLAT:_?scaleYa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA
  019d5	50		 push	 eax
  019d6	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  019d9	e8 00 00 00 00	 call	 ?DoTable@CelObj@@QAEXPAHABVRatio@@@Z ; CelObj::DoTable

; 713  : 		lastScaleY[i] = ratioY;

  019de	8b 4d 0c	 mov	 ecx, DWORD PTR _ratioY$[ebp]
  019e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  019e3	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  019e6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  019e9	89 14 cd 00 00
	00 00		 mov	 DWORD PTR _?lastScaleY@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A[ecx*8], edx
  019f0	89 04 cd 04 00
	00 00		 mov	 DWORD PTR _?lastScaleY@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAV3@A[ecx*8+4], eax
$L119189:

; 715  : 
; 716  : 	//  Set pointers to proper table, init lastused
; 717  : 	scaleX = scaleXa[i];

  019f7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  019fa	c1 e2 0e	 shl	 edx, 14			; 0000000eH
  019fd	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:_?scaleXa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA
  01a03	89 15 00 00 00
	00		 mov	 DWORD PTR ?scaleX@CelObj@@2PAHA, edx ; CelObj::scaleX

; 718  : 	scaleY = scaleYa[i];

  01a09	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01a0c	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  01a0f	05 00 00 00 00	 add	 eax, OFFSET FLAT:_?scaleYa@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4PAY0BAAA@HA
  01a14	a3 00 00 00 00	 mov	 DWORD PTR ?scaleY@CelObj@@2PAHA, eax ; CelObj::scaleY

; 719  : 	lastused = i;

  01a19	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  01a1c	89 0d 00 00 00
	00		 mov	 DWORD PTR _?lastused@?1??ScaleTables@CelObj@@QAEXABVRatio@@0@Z@4HA, ecx
$L119153:

; 720  : }

  01a22	8b e5		 mov	 esp, ebp
  01a24	5d		 pop	 ebp
  01a25	c2 08 00	 ret	 8
?ScaleTables@CelObj@@QAEXABVRatio@@0@Z ENDP		; CelObj::ScaleTables
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Ratio@@QAE@XZ PROC NEAR				; Ratio::Ratio, COMDAT

; 7    : 	Ratio()							:	numer(1), denom(1) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0Ratio@@QAE@XZ ENDP					; Ratio::Ratio
_TEXT	ENDS
_TEXT	SEGMENT
_$E315	PROC NEAR
  01a28	55		 push	 ebp
  01a29	8b ec		 mov	 ebp, esp
  01a2b	5d		 pop	 ebp
  01a2c	c3		 ret	 0
_$E315	ENDP
_$E314	PROC NEAR
  01a2d	55		 push	 ebp
  01a2e	8b ec		 mov	 ebp, esp
  01a30	5d		 pop	 ebp
  01a31	c3		 ret	 0
_$E314	ENDP
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L119200:
  00003	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00006	83 e8 01	 sub	 eax, 1
  00009	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  0000c	83 7d 10 00	 cmp	 DWORD PTR ___n$[ebp], 0
  00010	7c 11		 jl	 SHORT $L119201
  00012	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00015	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001b	03 4d 0c	 add	 ecx, DWORD PTR ___s$[ebp]
  0001e	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
  00021	eb e0		 jmp	 SHORT $L119200
$L119201:
  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
_TEXT	SEGMENT
_table$ = 8
_scale$ = 12
_this$ = -24
_value$ = -8
_numer$ = -4
_denom$ = -12
_increment$ = -20
_i$ = -16
?DoTable@CelObj@@QAEXPAHABVRatio@@@Z PROC NEAR		; CelObj::DoTable

; 737  : {

  01a32	55		 push	 ebp
  01a33	8b ec		 mov	 ebp, esp
  01a35	83 ec 18	 sub	 esp, 24			; 00000018H
  01a38	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 738  : 	assert(table);
; 739  : 	assert(scale.numer > 0);
; 740  : 	assert(scale.denom >= 0);
; 741  : 
; 742  :    int value = 0;

  01a3b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _value$[ebp], 0

; 743  : 	int numer = scale.numer;

  01a42	8b 45 0c	 mov	 eax, DWORD PTR _scale$[ebp]
  01a45	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a47	89 4d fc	 mov	 DWORD PTR _numer$[ebp], ecx

; 744  : 	int denom = scale.denom;

  01a4a	8b 55 0c	 mov	 edx, DWORD PTR _scale$[ebp]
  01a4d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01a50	89 45 f4	 mov	 DWORD PTR _denom$[ebp], eax

; 745  : 
; 746  : 	int increment = (255 * (denom * 100) / numer) / 100;

  01a53	8b 45 f4	 mov	 eax, DWORD PTR _denom$[ebp]
  01a56	6b c0 64	 imul	 eax, 100		; 00000064H
  01a59	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  01a5f	99		 cdq
  01a60	f7 7d fc	 idiv	 DWORD PTR _numer$[ebp]
  01a63	99		 cdq
  01a64	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01a69	f7 f9		 idiv	 ecx
  01a6b	89 45 ec	 mov	 DWORD PTR _increment$[ebp], eax

; 747  : 
; 748  : 	for (int i = 0; i < 1024; i++)

  01a6e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01a75	eb 09		 jmp	 SHORT $L119216
$L119217:
  01a77	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  01a7a	83 c2 01	 add	 edx, 1
  01a7d	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$L119216:
  01a80	81 7d f0 00 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1024 ; 00000400H
  01a87	7d 1f		 jge	 SHORT $L119218

; 750  : 		*table = (value >> 8);

  01a89	8b 45 f8	 mov	 eax, DWORD PTR _value$[ebp]
  01a8c	c1 f8 08	 sar	 eax, 8
  01a8f	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  01a92	89 01		 mov	 DWORD PTR [ecx], eax

; 751  : 		table += 1;

  01a94	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  01a97	83 c2 04	 add	 edx, 4
  01a9a	89 55 08	 mov	 DWORD PTR _table$[ebp], edx

; 752  : 		value += increment;

  01a9d	8b 45 f8	 mov	 eax, DWORD PTR _value$[ebp]
  01aa0	03 45 ec	 add	 eax, DWORD PTR _increment$[ebp]
  01aa3	89 45 f8	 mov	 DWORD PTR _value$[ebp], eax

; 753  : 	}

  01aa6	eb cf		 jmp	 SHORT $L119217
$L119218:

; 754  : 
; 755  : //	calcTable ( table, increment, 1024 );
; 756  : }

  01aa8	8b e5		 mov	 esp, ebp
  01aaa	5d		 pop	 ebp
  01aab	c2 08 00	 ret	 8
?DoTable@CelObj@@QAEXPAHABVRatio@@@Z ENDP		; CelObj::DoTable
_TEXT	ENDS
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_mirrFlag$ = 16
_this$ = -60
_maxx$119226 = -16
_hBuild$ = -4
_resBuffer$ = -12
_celPtr$ = -8
_controlData$119232 = -20
_colorData$119233 = -36
_controlTable$119234 = -32
_colorTable$119236 = -24
_controlPtr$119237 = -40
_colorPtr$119238 = -44
_j$119239 = -28
_control$119243 = -48
_color$119248 = -52
_colorData$119250 = -56
?ReadPix@CelObj@@UAEEHHH@Z PROC NEAR			; CelObj::ReadPix

; 761  : {

  01aae	55		 push	 ebp
  01aaf	8b ec		 mov	 ebp, esp
  01ab1	83 ec 3c	 sub	 esp, 60			; 0000003cH
  01ab4	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 762  : 	if (mirrFlag)  {

  01ab7	83 7d 10 00	 cmp	 DWORD PTR _mirrFlag$[ebp], 0
  01abb	74 15		 je	 SHORT $L119225

; 763  : 		int maxx = (width - 1);

  01abd	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01ac0	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  01ac3	83 e9 01	 sub	 ecx, 1
  01ac6	89 4d f0	 mov	 DWORD PTR _maxx$119226[ebp], ecx

; 764  : 		x = maxx - x;

  01ac9	8b 55 f0	 mov	 edx, DWORD PTR _maxx$119226[ebp]
  01acc	2b 55 08	 sub	 edx, DWORD PTR _x$[ebp]
  01acf	89 55 08	 mov	 DWORD PTR _x$[ebp], edx
$L119225:

; 766  : 
; 767  : 	int hBuild = x + 1;

  01ad2	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01ad5	83 c0 01	 add	 eax, 1
  01ad8	89 45 fc	 mov	 DWORD PTR _hBuild$[ebp], eax

; 768  : 	uchar* resBuffer = ResPointer();

  01adb	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01ade	8b 11		 mov	 edx, DWORD PTR [ecx]
  01ae0	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01ae3	ff 52 14	 call	 DWORD PTR [edx+20]
  01ae6	89 45 f4	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 769  : 	CelHeader* celPtr = (CelHeader*) (resBuffer + celOffset);

  01ae9	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01aec	8b 4d f4	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  01aef	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  01af2	89 4d f8	 mov	 DWORD PTR _celPtr$[ebp], ecx

; 770  : 
; 771  : 	if (compressType)

  01af5	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  01af8	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  01afc	0f 84 7b 01 00
	00		 je	 $L119231

; 773  : 		// Find the row data
; 774  : 		uchar* controlData = resBuffer + celPtr->controlOffset;

  01b02	8b 45 f8	 mov	 eax, DWORD PTR _celPtr$[ebp]
  01b05	8b 4d f4	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  01b08	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  01b0b	89 4d ec	 mov	 DWORD PTR _controlData$119232[ebp], ecx

; 775  : 		uchar* colorData = resBuffer + celPtr->colorOffset;

  01b0e	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  01b11	8b 45 f4	 mov	 eax, DWORD PTR _resBuffer$[ebp]
  01b14	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  01b17	89 45 dc	 mov	 DWORD PTR _colorData$119233[ebp], eax

; 776  : 		long* controlTable = (long *) (resBuffer + celPtr->rowTableOffset);

  01b1a	8b 4d f8	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  01b1d	8b 55 f4	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  01b20	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  01b23	89 55 e0	 mov	 DWORD PTR _controlTable$119234[ebp], edx

; 777  : 		long* colorTable = controlTable + height;

  01b26	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01b29	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  01b2c	8b 55 e0	 mov	 edx, DWORD PTR _controlTable$119234[ebp]
  01b2f	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  01b32	89 45 e8	 mov	 DWORD PTR _colorTable$119236[ebp], eax

; 778  : 		uchar* controlPtr = controlData + controlTable[y];

  01b35	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  01b38	8b 55 e0	 mov	 edx, DWORD PTR _controlTable$119234[ebp]
  01b3b	8b 45 ec	 mov	 eax, DWORD PTR _controlData$119232[ebp]
  01b3e	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  01b41	89 45 d8	 mov	 DWORD PTR _controlPtr$119237[ebp], eax

; 779  : 		uchar* colorPtr = colorData + colorTable[y];

  01b44	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  01b47	8b 55 e8	 mov	 edx, DWORD PTR _colorTable$119236[ebp]
  01b4a	8b 45 dc	 mov	 eax, DWORD PTR _colorData$119233[ebp]
  01b4d	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  01b50	89 45 d4	 mov	 DWORD PTR _colorPtr$119238[ebp], eax

; 780  : 
; 781  : 		// Build a line
; 782  : 		for (int j = 0; j < hBuild; ) {

  01b53	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _j$119239[ebp], 0
$L119241:
  01b5a	8b 4d e4	 mov	 ecx, DWORD PTR _j$119239[ebp]
  01b5d	3b 4d fc	 cmp	 ecx, DWORD PTR _hBuild$[ebp]
  01b60	0f 8d 0c 01 00
	00		 jge	 $L119242

; 783  : 			// Get the control character
; 784  : 			uchar control = *controlPtr++;

  01b66	8b 55 d8	 mov	 edx, DWORD PTR _controlPtr$119237[ebp]
  01b69	8a 02		 mov	 al, BYTE PTR [edx]
  01b6b	88 45 d0	 mov	 BYTE PTR _control$119243[ebp], al
  01b6e	8b 4d d8	 mov	 ecx, DWORD PTR _controlPtr$119237[ebp]
  01b71	83 c1 01	 add	 ecx, 1
  01b74	89 4d d8	 mov	 DWORD PTR _controlPtr$119237[ebp], ecx

; 785  : 			if (!(control & REPEATC)) {

  01b77	8b 55 d0	 mov	 edx, DWORD PTR _control$119243[ebp]
  01b7a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01b80	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  01b86	85 d2		 test	 edx, edx
  01b88	75 45		 jne	 SHORT $L119244

; 786  : 				// Do a run of unique bytes
; 787  : 				memcpy(&line[j], colorPtr, control);

  01b8a	8b 45 d0	 mov	 eax, DWORD PTR _control$119243[ebp]
  01b8d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01b92	50		 push	 eax
  01b93	8b 4d d4	 mov	 ecx, DWORD PTR _colorPtr$119238[ebp]
  01b96	51		 push	 ecx
  01b97	8b 55 e4	 mov	 edx, DWORD PTR _j$119239[ebp]
  01b9a	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:?line@CelObj@@2PAEA ; CelObj::line
  01ba0	52		 push	 edx
  01ba1	e8 00 00 00 00	 call	 _memcpy
  01ba6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 788  : 				colorPtr += control;

  01ba9	8b 45 d0	 mov	 eax, DWORD PTR _control$119243[ebp]
  01bac	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01bb1	8b 4d d4	 mov	 ecx, DWORD PTR _colorPtr$119238[ebp]
  01bb4	03 c8		 add	 ecx, eax
  01bb6	89 4d d4	 mov	 DWORD PTR _colorPtr$119238[ebp], ecx

; 789  : 				j += control;

  01bb9	8b 55 d0	 mov	 edx, DWORD PTR _control$119243[ebp]
  01bbc	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01bc2	8b 45 e4	 mov	 eax, DWORD PTR _j$119239[ebp]
  01bc5	03 c2		 add	 eax, edx
  01bc7	89 45 e4	 mov	 DWORD PTR _j$119239[ebp], eax

; 791  : 			else {

  01bca	e9 9e 00 00 00	 jmp	 $L119247
$L119244:

; 792  : 				if (control & REPSKIP) {

  01bcf	8b 4d d0	 mov	 ecx, DWORD PTR _control$119243[ebp]
  01bd2	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01bd8	83 e1 40	 and	 ecx, 64			; 00000040H
  01bdb	85 c9		 test	 ecx, ecx
  01bdd	74 3f		 je	 SHORT $L119246

; 793  : 					// Do a run of repeated skip
; 794  : 					control &= 0x3f;

  01bdf	8a 55 d0	 mov	 dl, BYTE PTR _control$119243[ebp]
  01be2	80 e2 3f	 and	 dl, 63			; 0000003fH
  01be5	88 55 d0	 mov	 BYTE PTR _control$119243[ebp], dl

; 795  : 					memset(&line[j],skip,control);

  01be8	8b 45 d0	 mov	 eax, DWORD PTR _control$119243[ebp]
  01beb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01bf0	50		 push	 eax
  01bf1	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01bf4	33 d2		 xor	 edx, edx
  01bf6	8a 51 38	 mov	 dl, BYTE PTR [ecx+56]
  01bf9	52		 push	 edx
  01bfa	8b 45 e4	 mov	 eax, DWORD PTR _j$119239[ebp]
  01bfd	05 00 00 00 00	 add	 eax, OFFSET FLAT:?line@CelObj@@2PAEA ; CelObj::line
  01c02	50		 push	 eax
  01c03	e8 00 00 00 00	 call	 _memset
  01c08	83 c4 0c	 add	 esp, 12			; 0000000cH

; 796  : 					j += control;

  01c0b	8b 4d d0	 mov	 ecx, DWORD PTR _control$119243[ebp]
  01c0e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01c14	8b 55 e4	 mov	 edx, DWORD PTR _j$119239[ebp]
  01c17	03 d1		 add	 edx, ecx
  01c19	89 55 e4	 mov	 DWORD PTR _j$119239[ebp], edx

; 798  : 				else {

  01c1c	eb 4f		 jmp	 SHORT $L119247
$L119246:

; 799  : 					// Do a run of repeated color
; 800  : 					control &= 0x3f;

  01c1e	8a 45 d0	 mov	 al, BYTE PTR _control$119243[ebp]
  01c21	24 3f		 and	 al, 63			; 0000003fH
  01c23	88 45 d0	 mov	 BYTE PTR _control$119243[ebp], al

; 801  : 					uchar color = *colorPtr++;

  01c26	8b 4d d4	 mov	 ecx, DWORD PTR _colorPtr$119238[ebp]
  01c29	8a 11		 mov	 dl, BYTE PTR [ecx]
  01c2b	88 55 cc	 mov	 BYTE PTR _color$119248[ebp], dl
  01c2e	8b 45 d4	 mov	 eax, DWORD PTR _colorPtr$119238[ebp]
  01c31	83 c0 01	 add	 eax, 1
  01c34	89 45 d4	 mov	 DWORD PTR _colorPtr$119238[ebp], eax

; 802  : 					memset(&line[j],color,control);

  01c37	8b 4d d0	 mov	 ecx, DWORD PTR _control$119243[ebp]
  01c3a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01c40	51		 push	 ecx
  01c41	8b 55 cc	 mov	 edx, DWORD PTR _color$119248[ebp]
  01c44	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01c4a	52		 push	 edx
  01c4b	8b 45 e4	 mov	 eax, DWORD PTR _j$119239[ebp]
  01c4e	05 00 00 00 00	 add	 eax, OFFSET FLAT:?line@CelObj@@2PAEA ; CelObj::line
  01c53	50		 push	 eax
  01c54	e8 00 00 00 00	 call	 _memset
  01c59	83 c4 0c	 add	 esp, 12			; 0000000cH

; 803  : 					j += control;

  01c5c	8b 4d d0	 mov	 ecx, DWORD PTR _control$119243[ebp]
  01c5f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01c65	8b 55 e4	 mov	 edx, DWORD PTR _j$119239[ebp]
  01c68	03 d1		 add	 edx, ecx
  01c6a	89 55 e4	 mov	 DWORD PTR _j$119239[ebp], edx
$L119247:

; 806  : 		}

  01c6d	e9 e8 fe ff ff	 jmp	 $L119241
$L119242:

; 807  : 		return line[x];

  01c72	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01c75	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?line@CelObj@@2PAEA[eax]
  01c7b	eb 26		 jmp	 SHORT $L119249
$L119231:

; 810  : 		uchar* colorData = resBuffer + celPtr->controlOffset;	//  Correct !

  01c7d	8b 4d f8	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  01c80	8b 55 f4	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  01c83	03 51 18	 add	 edx, DWORD PTR [ecx+24]
  01c86	89 55 c8	 mov	 DWORD PTR _colorData$119250[ebp], edx

; 811  : 		colorData += (y * width) + x;

  01c89	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01c8c	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  01c8f	0f af 48 20	 imul	 ecx, DWORD PTR [eax+32]
  01c93	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  01c96	8b 55 c8	 mov	 edx, DWORD PTR _colorData$119250[ebp]
  01c99	03 d1		 add	 edx, ecx
  01c9b	89 55 c8	 mov	 DWORD PTR _colorData$119250[ebp], edx

; 812  : 		return *colorData;

  01c9e	8b 45 c8	 mov	 eax, DWORD PTR _colorData$119250[ebp]
  01ca1	8a 00		 mov	 al, BYTE PTR [eax]
$L119249:

; 814  : }

  01ca3	8b e5		 mov	 esp, ebp
  01ca5	5d		 pop	 ebp
  01ca6	c2 0c 00	 ret	 12			; 0000000cH
?ReadPix@CelObj@@UAEEHHH@Z ENDP				; CelObj::ReadPix
_TEXT	ENDS
PUBLIC	?Skip@CelObj@@QBEEXZ				; CelObj::Skip
PUBLIC	?ReadLineSpan@CelObj@@QAE?AVSOL_Rect@@H@Z	; CelObj::ReadLineSpan
PUBLIC	??0SOL_Rect@@QAE@XZ				; SOL_Rect::SOL_Rect
PUBLIC	??0SOL_Rect@@QAE@ABV0@@Z			; SOL_Rect::SOL_Rect
_TEXT	SEGMENT
_y$ = 12
___$ReturnUdt$ = 8
_this$ = -72
_pts$ = -16
_resBuffer$ = -24
_celPtr$ = -20
_controlData$119261 = -28
_colorData$119262 = -44
_controlTable$119263 = -40
_colorTable$119265 = -32
_controlPtr$119266 = -48
_colorPtr$119267 = -52
_j$119268 = -36
_control$119272 = -56
_color$119279 = -60
_colorData$119281 = -68
_j$119282 = -64
?ReadLineSpan@CelObj@@QAE?AVSOL_Rect@@H@Z PROC NEAR	; CelObj::ReadLineSpan

; 818  : {

  01ca9	55		 push	 ebp
  01caa	8b ec		 mov	 ebp, esp
  01cac	83 ec 48	 sub	 esp, 72			; 00000048H
  01caf	56		 push	 esi
  01cb0	89 4d b8	 mov	 DWORD PTR _this$[ebp], ecx

; 819  : 
; 820  : // This routine finds the leftmost and rightmost nonskip pixels in a line
; 821  : 
; 822  :    SOL_Rect   pts;

  01cb3	8d 4d f0	 lea	 ecx, DWORD PTR _pts$[ebp]
  01cb6	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 823  : 
; 824  :    uchar* resBuffer = ResPointer();

  01cbb	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  01cbe	8b 10		 mov	 edx, DWORD PTR [eax]
  01cc0	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  01cc3	ff 52 14	 call	 DWORD PTR [edx+20]
  01cc6	89 45 e8	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 825  :    CelHeader* celPtr = (CelHeader*) (resBuffer + celOffset);

  01cc9	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  01ccc	8b 4d e8	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  01ccf	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  01cd2	89 4d ec	 mov	 DWORD PTR _celPtr$[ebp], ecx

; 826  : 
; 827  :    pts.A.x = -1;

  01cd5	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _pts$[ebp], -1

; 828  :    if (compressType)

  01cdc	8b 55 b8	 mov	 edx, DWORD PTR _this$[ebp]
  01cdf	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  01ce3	0f 84 45 01 00
	00		 je	 $L119260

; 830  :       // Find the row data
; 831  :       uchar* controlData = resBuffer + celPtr->controlOffset;

  01ce9	8b 45 ec	 mov	 eax, DWORD PTR _celPtr$[ebp]
  01cec	8b 4d e8	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  01cef	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  01cf2	89 4d e4	 mov	 DWORD PTR _controlData$119261[ebp], ecx

; 832  :       uchar* colorData = resBuffer + celPtr->colorOffset;

  01cf5	8b 55 ec	 mov	 edx, DWORD PTR _celPtr$[ebp]
  01cf8	8b 45 e8	 mov	 eax, DWORD PTR _resBuffer$[ebp]
  01cfb	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  01cfe	89 45 d4	 mov	 DWORD PTR _colorData$119262[ebp], eax

; 833  :       long* controlTable = (long *) (resBuffer + celPtr->rowTableOffset);

  01d01	8b 4d ec	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  01d04	8b 55 e8	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  01d07	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  01d0a	89 55 d8	 mov	 DWORD PTR _controlTable$119263[ebp], edx

; 834  :       long* colorTable = controlTable + height;

  01d0d	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  01d10	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  01d13	8b 55 d8	 mov	 edx, DWORD PTR _controlTable$119263[ebp]
  01d16	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  01d19	89 45 e0	 mov	 DWORD PTR _colorTable$119265[ebp], eax

; 835  :       uchar* controlPtr = controlData + controlTable[y];

  01d1c	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  01d1f	8b 55 d8	 mov	 edx, DWORD PTR _controlTable$119263[ebp]
  01d22	8b 45 e4	 mov	 eax, DWORD PTR _controlData$119261[ebp]
  01d25	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  01d28	89 45 d0	 mov	 DWORD PTR _controlPtr$119266[ebp], eax

; 836  :       uchar* colorPtr = colorData + colorTable[y];

  01d2b	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  01d2e	8b 55 e0	 mov	 edx, DWORD PTR _colorTable$119265[ebp]
  01d31	8b 45 d4	 mov	 eax, DWORD PTR _colorData$119262[ebp]
  01d34	03 04 8a	 add	 eax, DWORD PTR [edx+ecx*4]
  01d37	89 45 cc	 mov	 DWORD PTR _colorPtr$119267[ebp], eax

; 837  : 
; 838  :       // Build a line
; 839  :       for (int j = 0; j < width; ) {

  01d3a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _j$119268[ebp], 0
$L119270:
  01d41	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  01d44	8b 55 dc	 mov	 edx, DWORD PTR _j$119268[ebp]
  01d47	3b 51 20	 cmp	 edx, DWORD PTR [ecx+32]
  01d4a	0f 8d ca 00 00
	00		 jge	 $L119271

; 840  :          // Get the control character
; 841  :          uchar control = *controlPtr++;

  01d50	8b 45 d0	 mov	 eax, DWORD PTR _controlPtr$119266[ebp]
  01d53	8a 08		 mov	 cl, BYTE PTR [eax]
  01d55	88 4d c8	 mov	 BYTE PTR _control$119272[ebp], cl
  01d58	8b 55 d0	 mov	 edx, DWORD PTR _controlPtr$119266[ebp]
  01d5b	83 c2 01	 add	 edx, 1
  01d5e	89 55 d0	 mov	 DWORD PTR _controlPtr$119266[ebp], edx

; 842  :          if (!(control & REPEATC)) {

  01d61	8b 45 c8	 mov	 eax, DWORD PTR _control$119272[ebp]
  01d64	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01d69	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01d6e	85 c0		 test	 eax, eax
  01d70	75 39		 jne	 SHORT $L119273

; 843  :             // Do a run of unique bytes
; 844  :             if (pts.A.x == -1)

  01d72	83 7d f0 ff	 cmp	 DWORD PTR _pts$[ebp], -1
  01d76	75 06		 jne	 SHORT $L119274

; 845  :             pts.A.x   = j;

  01d78	8b 4d dc	 mov	 ecx, DWORD PTR _j$119268[ebp]
  01d7b	89 4d f0	 mov	 DWORD PTR _pts$[ebp], ecx
$L119274:

; 846  :             colorPtr += control;

  01d7e	8b 55 c8	 mov	 edx, DWORD PTR _control$119272[ebp]
  01d81	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01d87	8b 45 cc	 mov	 eax, DWORD PTR _colorPtr$119267[ebp]
  01d8a	03 c2		 add	 eax, edx
  01d8c	89 45 cc	 mov	 DWORD PTR _colorPtr$119267[ebp], eax

; 847  :             j += control;

  01d8f	8b 4d c8	 mov	 ecx, DWORD PTR _control$119272[ebp]
  01d92	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01d98	8b 55 dc	 mov	 edx, DWORD PTR _j$119268[ebp]
  01d9b	03 d1		 add	 edx, ecx
  01d9d	89 55 dc	 mov	 DWORD PTR _j$119268[ebp], edx

; 848  :             pts.B.x  = j -1;

  01da0	8b 45 dc	 mov	 eax, DWORD PTR _j$119268[ebp]
  01da3	83 e8 01	 sub	 eax, 1
  01da6	89 45 f8	 mov	 DWORD PTR _pts$[ebp+8], eax

; 850  :          else {

  01da9	eb 6a		 jmp	 SHORT $L119277
$L119273:

; 851  :             if (control & REPSKIP) {

  01dab	8b 4d c8	 mov	 ecx, DWORD PTR _control$119272[ebp]
  01dae	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01db4	83 e1 40	 and	 ecx, 64			; 00000040H
  01db7	85 c9		 test	 ecx, ecx
  01db9	74 1b		 je	 SHORT $L119276

; 852  :                // Do a run of repeated skip
; 853  :                control &= 0x3f;

  01dbb	8a 55 c8	 mov	 dl, BYTE PTR _control$119272[ebp]
  01dbe	80 e2 3f	 and	 dl, 63			; 0000003fH
  01dc1	88 55 c8	 mov	 BYTE PTR _control$119272[ebp], dl

; 854  :                j += control;

  01dc4	8b 45 c8	 mov	 eax, DWORD PTR _control$119272[ebp]
  01dc7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01dcc	8b 4d dc	 mov	 ecx, DWORD PTR _j$119268[ebp]
  01dcf	03 c8		 add	 ecx, eax
  01dd1	89 4d dc	 mov	 DWORD PTR _j$119268[ebp], ecx

; 856  :             else {

  01dd4	eb 3f		 jmp	 SHORT $L119277
$L119276:

; 857  :                // Do a run of repeated color
; 858  :                if (pts.A.x == -1)

  01dd6	83 7d f0 ff	 cmp	 DWORD PTR _pts$[ebp], -1
  01dda	75 06		 jne	 SHORT $L119278

; 859  :                pts.A.x = j;

  01ddc	8b 55 dc	 mov	 edx, DWORD PTR _j$119268[ebp]
  01ddf	89 55 f0	 mov	 DWORD PTR _pts$[ebp], edx
$L119278:

; 860  :                control &= 0x3f;

  01de2	8a 45 c8	 mov	 al, BYTE PTR _control$119272[ebp]
  01de5	24 3f		 and	 al, 63			; 0000003fH
  01de7	88 45 c8	 mov	 BYTE PTR _control$119272[ebp], al

; 861  :                uchar color = *colorPtr++;

  01dea	8b 4d cc	 mov	 ecx, DWORD PTR _colorPtr$119267[ebp]
  01ded	8a 11		 mov	 dl, BYTE PTR [ecx]
  01def	88 55 c4	 mov	 BYTE PTR _color$119279[ebp], dl
  01df2	8b 45 cc	 mov	 eax, DWORD PTR _colorPtr$119267[ebp]
  01df5	83 c0 01	 add	 eax, 1
  01df8	89 45 cc	 mov	 DWORD PTR _colorPtr$119267[ebp], eax

; 862  :                j += control;

  01dfb	8b 4d c8	 mov	 ecx, DWORD PTR _control$119272[ebp]
  01dfe	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01e04	8b 55 dc	 mov	 edx, DWORD PTR _j$119268[ebp]
  01e07	03 d1		 add	 edx, ecx
  01e09	89 55 dc	 mov	 DWORD PTR _j$119268[ebp], edx

; 863  :                pts.B.x = j-1;

  01e0c	8b 45 dc	 mov	 eax, DWORD PTR _j$119268[ebp]
  01e0f	83 e8 01	 sub	 eax, 1
  01e12	89 45 f8	 mov	 DWORD PTR _pts$[ebp+8], eax
$L119277:

; 866  :       }

  01e15	e9 27 ff ff ff	 jmp	 $L119270
$L119271:

; 867  : 
; 868  :       return pts;

  01e1a	8d 4d f0	 lea	 ecx, DWORD PTR _pts$[ebp]
  01e1d	51		 push	 ecx
  01e1e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01e21	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  01e26	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  01e29	e9 81 00 00 00	 jmp	 $L119280
$L119260:

; 871  :       uchar* colorData = resBuffer + celPtr->controlOffset;   //  Correct !

  01e2e	8b 55 ec	 mov	 edx, DWORD PTR _celPtr$[ebp]
  01e31	8b 45 e8	 mov	 eax, DWORD PTR _resBuffer$[ebp]
  01e34	03 42 18	 add	 eax, DWORD PTR [edx+24]
  01e37	89 45 bc	 mov	 DWORD PTR _colorData$119281[ebp], eax

; 872  : 
; 873  :       colorData += (y * width) ;

  01e3a	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e3d	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  01e40	0f af 51 20	 imul	 edx, DWORD PTR [ecx+32]
  01e44	8b 45 bc	 mov	 eax, DWORD PTR _colorData$119281[ebp]
  01e47	03 c2		 add	 eax, edx
  01e49	89 45 bc	 mov	 DWORD PTR _colorData$119281[ebp], eax

; 874  : 
; 875  :       for(int j=0;j<width;j++)   {

  01e4c	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _j$119282[ebp], 0
  01e53	eb 09		 jmp	 SHORT $L119283
$L119284:
  01e55	8b 4d c0	 mov	 ecx, DWORD PTR _j$119282[ebp]
  01e58	83 c1 01	 add	 ecx, 1
  01e5b	89 4d c0	 mov	 DWORD PTR _j$119282[ebp], ecx
$L119283:
  01e5e	8b 55 b8	 mov	 edx, DWORD PTR _this$[ebp]
  01e61	8b 45 c0	 mov	 eax, DWORD PTR _j$119282[ebp]
  01e64	3b 42 20	 cmp	 eax, DWORD PTR [edx+32]
  01e67	7d 37		 jge	 SHORT $L119285

; 876  :          if((*colorData) != Skip()) {

  01e69	8b 4d bc	 mov	 ecx, DWORD PTR _colorData$119281[ebp]
  01e6c	33 d2		 xor	 edx, edx
  01e6e	8a 11		 mov	 dl, BYTE PTR [ecx]
  01e70	8b f2		 mov	 esi, edx
  01e72	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e75	e8 00 00 00 00	 call	 ?Skip@CelObj@@QBEEXZ	; CelObj::Skip
  01e7a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01e7f	3b f0		 cmp	 esi, eax
  01e81	74 12		 je	 SHORT $L119286

; 877  :             if (pts.A.x == -1)

  01e83	83 7d f0 ff	 cmp	 DWORD PTR _pts$[ebp], -1
  01e87	75 06		 jne	 SHORT $L119287

; 878  :                pts.A.x = j;

  01e89	8b 45 c0	 mov	 eax, DWORD PTR _j$119282[ebp]
  01e8c	89 45 f0	 mov	 DWORD PTR _pts$[ebp], eax
$L119287:

; 879  : 
; 880  :             pts.B.x = j;

  01e8f	8b 4d c0	 mov	 ecx, DWORD PTR _j$119282[ebp]
  01e92	89 4d f8	 mov	 DWORD PTR _pts$[ebp+8], ecx
$L119286:

; 883  :          colorData++;

  01e95	8b 55 bc	 mov	 edx, DWORD PTR _colorData$119281[ebp]
  01e98	83 c2 01	 add	 edx, 1
  01e9b	89 55 bc	 mov	 DWORD PTR _colorData$119281[ebp], edx

; 884  :       }

  01e9e	eb b5		 jmp	 SHORT $L119284
$L119285:

; 885  : 
; 886  :       return pts;

  01ea0	8d 45 f0	 lea	 eax, DWORD PTR _pts$[ebp]
  01ea3	50		 push	 eax
  01ea4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01ea7	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  01eac	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$L119280:

; 888  : }

  01eaf	5e		 pop	 esi
  01eb0	8b e5		 mov	 esp, ebp
  01eb2	5d		 pop	 ebp
  01eb3	c2 08 00	 ret	 8
?ReadLineSpan@CelObj@@QAE?AVSOL_Rect@@H@Z ENDP		; CelObj::ReadLineSpan
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4
?Skip@CelObj@@QBEEXZ PROC NEAR				; CelObj::Skip, COMDAT

; 184  : 	uchar	Skip() const			{return skip;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 40 38	 mov	 al, BYTE PTR [eax+56]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Skip@CelObj@@QBEEXZ ENDP				; CelObj::Skip
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@XZ				; SOL_Point::SOL_Point
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Rect@@QAE@XZ PROC NEAR				; SOL_Rect::SOL_Rect, COMDAT

; 13   : 	SOL_Rect()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Rect@@QAE@XZ ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Point@@QAE@XZ PROC NEAR				; SOL_Point::SOL_Point, COMDAT

; 20   : 	SOL_Point() : x(DefaultCoord), y(DefaultCoord) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 ef cd ab
	89		 mov	 DWORD PTR [eax], -1985229329 ; 89abcdefH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 ef cd
	ab 89		 mov	 DWORD PTR [ecx+4], -1985229329 ; 89abcdefH
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Point@@QAE@XZ ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_Rect@@QAE@ABV0@@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0SOL_Rect@@QAE@ABV0@@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
PUBLIC	?CompareLinkArray@@YAHPBX0@Z			; CompareLinkArray
_TEXT	SEGMENT
_ptr1$ = 8
_ptr2$ = 12
_p1$ = -4
_p2$ = -8
?CompareLinkArray@@YAHPBX0@Z PROC NEAR			; CompareLinkArray

; 892  : {

  01eb6	55		 push	 ebp
  01eb7	8b ec		 mov	 ebp, esp
  01eb9	83 ec 08	 sub	 esp, 8

; 893  : 	LinkPoint * p1 = (LinkPoint *) ptr1;

  01ebc	8b 45 08	 mov	 eax, DWORD PTR _ptr1$[ebp]
  01ebf	89 45 fc	 mov	 DWORD PTR _p1$[ebp], eax

; 894  : 	LinkPoint * p2 = (LinkPoint *) ptr2;

  01ec2	8b 4d 0c	 mov	 ecx, DWORD PTR _ptr2$[ebp]
  01ec5	89 4d f8	 mov	 DWORD PTR _p2$[ebp], ecx

; 895  : 
; 896  : 	if((*p1).priority < (*p2).priority)

  01ec8	8b 55 fc	 mov	 edx, DWORD PTR _p1$[ebp]
  01ecb	0f be 42 05	 movsx	 eax, BYTE PTR [edx+5]
  01ecf	8b 4d f8	 mov	 ecx, DWORD PTR _p2$[ebp]
  01ed2	0f be 51 05	 movsx	 edx, BYTE PTR [ecx+5]
  01ed6	3b c2		 cmp	 eax, edx
  01ed8	7d 05		 jge	 SHORT $L119296

; 897  : 		return -1;

  01eda	83 c8 ff	 or	 eax, -1
  01edd	eb 1b		 jmp	 SHORT $L119291
$L119296:

; 898  : 	else if((*p1).priority > (*p2).priority)

  01edf	8b 45 fc	 mov	 eax, DWORD PTR _p1$[ebp]
  01ee2	0f be 48 05	 movsx	 ecx, BYTE PTR [eax+5]
  01ee6	8b 55 f8	 mov	 edx, DWORD PTR _p2$[ebp]
  01ee9	0f be 42 05	 movsx	 eax, BYTE PTR [edx+5]
  01eed	3b c8		 cmp	 ecx, eax
  01eef	7e 07		 jle	 SHORT $L119298

; 899  : 		return 1;

  01ef1	b8 01 00 00 00	 mov	 eax, 1
  01ef6	eb 02		 jmp	 SHORT $L119291
$L119298:

; 900  : 
; 901  : 	return 0;

  01ef8	33 c0		 xor	 eax, eax
$L119291:

; 902  : 
; 903  : }

  01efa	8b e5		 mov	 esp, ebp
  01efc	5d		 pop	 ebp
  01efd	c3		 ret	 0
?CompareLinkArray@@YAHPBX0@Z ENDP			; CompareLinkArray
_TEXT	ENDS
PUBLIC	?GetFirstLink@CelObj@@QAEFXZ			; CelObj::GetFirstLink
EXTRN	__imp__qsort:NEAR
EXTRN	?Fatal@MsgMgr@@QAAXDPADH0ZZ:NEAR		; MsgMgr::Fatal
_DATA	SEGMENT
	ORG $+2
$SG119307 DB	'Unsupported version for Links', 00H
	ORG $+2
$SG119308 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celo'
	DB	'bj.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -92
_viewID$ = -84
_viewPtr$ = -16
_resBuffer$ = -80
_celPtr$ = -8
_linkArray$ = -76
_linkPoint$ = -4
_i$ = -12
$T124903 = -88
?GetFirstLink@CelObj@@QAEFXZ PROC NEAR			; CelObj::GetFirstLink

; 907  : {

  01efe	55		 push	 ebp
  01eff	8b ec		 mov	 ebp, esp
  01f01	83 ec 5c	 sub	 esp, 92			; 0000005cH
  01f04	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx

; 908  : 	MemID viewID = resMgr->Get(MemResView, bitmap.View());

  01f07	6a 00		 push	 0
  01f09	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  01f0c	83 c1 04	 add	 ecx, 4
  01f0f	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  01f14	50		 push	 eax
  01f15	6a 00		 push	 0
  01f17	8d 45 a8	 lea	 eax, DWORD PTR $T124903[ebp]
  01f1a	50		 push	 eax
  01f1b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  01f21	8b 11		 mov	 edx, DWORD PTR [ecx]
  01f23	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  01f29	ff 52 20	 call	 DWORD PTR [edx+32]
  01f2c	50		 push	 eax
  01f2d	8d 4d ac	 lea	 ecx, DWORD PTR _viewID$[ebp]
  01f30	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 909  : 	ViewHeader* viewPtr = (ViewHeader*) *viewID;

  01f35	8d 4d ac	 lea	 ecx, DWORD PTR _viewID$[ebp]
  01f38	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01f3d	89 45 f0	 mov	 DWORD PTR _viewPtr$[ebp], eax

; 910  : 
; 911  : 	if (viewPtr->version < 0x84)

  01f40	8b 45 f0	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  01f43	33 c9		 xor	 ecx, ecx
  01f45	8a 48 12	 mov	 cl, BYTE PTR [eax+18]
  01f48	81 f9 84 00 00
	00		 cmp	 ecx, 132		; 00000084H
  01f4e	7d 20		 jge	 SHORT $L119306

; 912  : 			msgMgr->Fatal(SrcLoc, "Unsupported version for Links");

  01f50	68 00 00 00 00	 push	 OFFSET FLAT:$SG119307
  01f55	68 90 03 00 00	 push	 912			; 00000390H
  01f5a	68 00 00 00 00	 push	 OFFSET FLAT:$SG119308
  01f5f	6a 61		 push	 97			; 00000061H
  01f61	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01f67	52		 push	 edx
  01f68	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  01f6d	83 c4 14	 add	 esp, 20			; 00000014H
$L119306:

; 913  : 
; 914  : 	
; 915  : 	uchar* resBuffer = ResPointer();

  01f70	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  01f73	8b 10		 mov	 edx, DWORD PTR [eax]
  01f75	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  01f78	ff 52 14	 call	 DWORD PTR [edx+20]
  01f7b	89 45 b0	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 916  : 	CelHeaderView* celPtr = (CelHeaderView*) (resBuffer + celOffset);

  01f7e	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  01f81	8b 4d b0	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  01f84	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  01f87	89 4d f8	 mov	 DWORD PTR _celPtr$[ebp], ecx

; 917  : 
; 918  : 	if (celPtr->linkTableCount == 0)

  01f8a	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  01f8d	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  01f91	85 c0		 test	 eax, eax
  01f93	75 06		 jne	 SHORT $L119312

; 919  : 	return(-1);

  01f95	66 0d ff ff	 or	 ax, -1
  01f99	eb 6f		 jmp	 SHORT $L119301
$L119312:

; 922  : 	struct LinkPoint *linkPoint = (LinkPoint*)(resBuffer 
; 923  :                                      + celPtr->linkTableOffset);

  01f9b	8b 4d f8	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  01f9e	8b 55 b0	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  01fa1	03 51 24	 add	 edx, DWORD PTR [ecx+36]
  01fa4	89 55 fc	 mov	 DWORD PTR _linkPoint$[ebp], edx

; 924  : 
; 925  : 	for(int i=0;i<celPtr->linkTableCount;i++,linkPoint++)

  01fa7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01fae	eb 12		 jmp	 SHORT $L119317
$L119318:
  01fb0	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01fb3	83 c0 01	 add	 eax, 1
  01fb6	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  01fb9	8b 4d fc	 mov	 ecx, DWORD PTR _linkPoint$[ebp]
  01fbc	83 c1 06	 add	 ecx, 6
  01fbf	89 4d fc	 mov	 DWORD PTR _linkPoint$[ebp], ecx
$L119317:
  01fc2	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  01fc5	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  01fc9	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  01fcc	7d 1b		 jge	 SHORT $L119319

; 926  : 		linkArray[i] = *linkPoint;

  01fce	8b 4d fc	 mov	 ecx, DWORD PTR _linkPoint$[ebp]
  01fd1	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01fd4	6b d2 06	 imul	 edx, 6
  01fd7	8d 44 15 b4	 lea	 eax, DWORD PTR _linkArray$[ebp+edx]
  01fdb	8b 11		 mov	 edx, DWORD PTR [ecx]
  01fdd	89 10		 mov	 DWORD PTR [eax], edx
  01fdf	66 8b 49 04	 mov	 cx, WORD PTR [ecx+4]
  01fe3	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  01fe7	eb c7		 jmp	 SHORT $L119318
$L119319:

; 927  : 	
; 928  : 
; 929  : 	qsort(linkArray,celPtr->linkTableCount,sizeof(LinkPoint),CompareLinkArray);

  01fe9	68 00 00 00 00	 push	 OFFSET FLAT:?CompareLinkArray@@YAHPBX0@Z ; CompareLinkArray
  01fee	6a 06		 push	 6
  01ff0	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  01ff3	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  01ff7	50		 push	 eax
  01ff8	8d 4d b4	 lea	 ecx, DWORD PTR _linkArray$[ebp]
  01ffb	51		 push	 ecx
  01ffc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qsort
  02002	83 c4 10	 add	 esp, 16			; 00000010H

; 930  : 
; 931  : 	return (linkArray[0].positionType);

  02005	66 0f b6 45 b8	 movzx	 ax, BYTE PTR _linkArray$[ebp+4]
$L119301:

; 932  : }

  0200a	8b e5		 mov	 esp, ebp
  0200c	5d		 pop	 ebp
  0200d	c3		 ret	 0
?GetFirstLink@CelObj@@QAEFXZ ENDP			; CelObj::GetFirstLink
_TEXT	ENDS
PUBLIC	?GetNextLink@CelObj@@QAEFH@Z			; CelObj::GetNextLink
_DATA	SEGMENT
	ORG $+1
$SG119332 DB	'Unsupported version for Links', 00H
	ORG $+2
$SG119333 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celo'
	DB	'bj.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_type$ = 8
_this$ = -96
_i$ = -12
_j$ = -16
_viewID$ = -88
_viewPtr$ = -20
_resBuffer$ = -84
_celPtr$ = -8
_linkArray$ = -80
_linkPoint$ = -4
$T124905 = -92
?GetNextLink@CelObj@@QAEFH@Z PROC NEAR			; CelObj::GetNextLink

; 936  : {

  0200e	55		 push	 ebp
  0200f	8b ec		 mov	 ebp, esp
  02011	83 ec 60	 sub	 esp, 96			; 00000060H
  02014	89 4d a0	 mov	 DWORD PTR _this$[ebp], ecx

; 937  : 	int i, j;
; 938  : 	MemID viewID = resMgr->Get(MemResView, bitmap.View());

  02017	6a 00		 push	 0
  02019	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  0201c	83 c1 04	 add	 ecx, 4
  0201f	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  02024	50		 push	 eax
  02025	6a 00		 push	 0
  02027	8d 45 a4	 lea	 eax, DWORD PTR $T124905[ebp]
  0202a	50		 push	 eax
  0202b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  02031	8b 11		 mov	 edx, DWORD PTR [ecx]
  02033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  02039	ff 52 20	 call	 DWORD PTR [edx+32]
  0203c	50		 push	 eax
  0203d	8d 4d a8	 lea	 ecx, DWORD PTR _viewID$[ebp]
  02040	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 939  : 	ViewHeader* viewPtr = (ViewHeader*) *viewID;

  02045	8d 4d a8	 lea	 ecx, DWORD PTR _viewID$[ebp]
  02048	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0204d	89 45 ec	 mov	 DWORD PTR _viewPtr$[ebp], eax

; 940  : 
; 941  : 	if (viewPtr->version < 0x84)

  02050	8b 45 ec	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  02053	33 c9		 xor	 ecx, ecx
  02055	8a 48 12	 mov	 cl, BYTE PTR [eax+18]
  02058	81 f9 84 00 00
	00		 cmp	 ecx, 132		; 00000084H
  0205e	7d 20		 jge	 SHORT $L119331

; 942  : 			msgMgr->Fatal(SrcLoc, "Unsupported version for Links");

  02060	68 00 00 00 00	 push	 OFFSET FLAT:$SG119332
  02065	68 ae 03 00 00	 push	 942			; 000003aeH
  0206a	68 00 00 00 00	 push	 OFFSET FLAT:$SG119333
  0206f	6a 61		 push	 97			; 00000061H
  02071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  02077	52		 push	 edx
  02078	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  0207d	83 c4 14	 add	 esp, 20			; 00000014H
$L119331:

; 943  : 
; 944  : 	uchar* resBuffer = ResPointer();

  02080	8b 45 a0	 mov	 eax, DWORD PTR _this$[ebp]
  02083	8b 10		 mov	 edx, DWORD PTR [eax]
  02085	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  02088	ff 52 14	 call	 DWORD PTR [edx+20]
  0208b	89 45 ac	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 945  : 	CelHeaderView* celPtr = (CelHeaderView*) (resBuffer + celOffset);

  0208e	8b 45 a0	 mov	 eax, DWORD PTR _this$[ebp]
  02091	8b 4d ac	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  02094	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  02097	89 4d f8	 mov	 DWORD PTR _celPtr$[ebp], ecx

; 946  : 
; 947  : 	if (celPtr->linkTableCount == 0)

  0209a	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  0209d	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  020a1	85 c0		 test	 eax, eax
  020a3	75 09		 jne	 SHORT $L119337

; 948  : 	return(-1);

  020a5	66 0d ff ff	 or	 ax, -1
  020a9	e9 c1 00 00 00	 jmp	 $L119324
$L119337:

; 951  : 	struct LinkPoint *linkPoint = (LinkPoint*)(resBuffer 
; 952  :                                      + celPtr->linkTableOffset);

  020ae	8b 4d f8	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  020b1	8b 55 ac	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  020b4	03 51 24	 add	 edx, DWORD PTR [ecx+36]
  020b7	89 55 fc	 mov	 DWORD PTR _linkPoint$[ebp], edx

; 953  : 
; 954  : 	for(i=0;i<celPtr->linkTableCount;i++,linkPoint++)

  020ba	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  020c1	eb 12		 jmp	 SHORT $L119341
$L119342:
  020c3	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  020c6	83 c0 01	 add	 eax, 1
  020c9	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  020cc	8b 4d fc	 mov	 ecx, DWORD PTR _linkPoint$[ebp]
  020cf	83 c1 06	 add	 ecx, 6
  020d2	89 4d fc	 mov	 DWORD PTR _linkPoint$[ebp], ecx
$L119341:
  020d5	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  020d8	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  020dc	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  020df	7d 1b		 jge	 SHORT $L119343

; 955  : 		linkArray[i] = *linkPoint;

  020e1	8b 4d fc	 mov	 ecx, DWORD PTR _linkPoint$[ebp]
  020e4	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  020e7	6b d2 06	 imul	 edx, 6
  020ea	8d 44 15 b0	 lea	 eax, DWORD PTR _linkArray$[ebp+edx]
  020ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  020f0	89 10		 mov	 DWORD PTR [eax], edx
  020f2	66 8b 49 04	 mov	 cx, WORD PTR [ecx+4]
  020f6	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  020fa	eb c7		 jmp	 SHORT $L119342
$L119343:

; 956  : 
; 957  : 	qsort(linkArray,celPtr->linkTableCount,sizeof(LinkPoint),CompareLinkArray);

  020fc	68 00 00 00 00	 push	 OFFSET FLAT:?CompareLinkArray@@YAHPBX0@Z ; CompareLinkArray
  02101	6a 06		 push	 6
  02103	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  02106	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  0210a	50		 push	 eax
  0210b	8d 4d b0	 lea	 ecx, DWORD PTR _linkArray$[ebp]
  0210e	51		 push	 ecx
  0210f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qsort
  02115	83 c4 10	 add	 esp, 16			; 00000010H

; 958  : 
; 959  : 	for(j=0;j<celPtr->linkTableCount;j++) {

  02118	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0211f	eb 09		 jmp	 SHORT $L119345
$L119346:
  02121	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  02124	83 c2 01	 add	 edx, 1
  02127	89 55 f0	 mov	 DWORD PTR _j$[ebp], edx
$L119345:
  0212a	8b 45 f8	 mov	 eax, DWORD PTR _celPtr$[ebp]
  0212d	0f bf 48 28	 movsx	 ecx, WORD PTR [eax+40]
  02131	39 4d f0	 cmp	 DWORD PTR _j$[ebp], ecx
  02134	7d 15		 jge	 SHORT $L119347

; 960  : 	 	if (linkArray[j].positionType == type)

  02136	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  02139	6b d2 06	 imul	 edx, 6
  0213c	33 c0		 xor	 eax, eax
  0213e	8a 44 15 b4	 mov	 al, BYTE PTR _linkArray$[ebp+edx+4]
  02142	3b 45 08	 cmp	 eax, DWORD PTR _type$[ebp]
  02145	75 02		 jne	 SHORT $L119348

; 961  : 			break;

  02147	eb 02		 jmp	 SHORT $L119347
$L119348:

; 962  : 	}

  02149	eb d6		 jmp	 SHORT $L119346
$L119347:

; 963  : 
; 964  : 	if (j>=(celPtr->linkTableCount-1))

  0214b	8b 4d f8	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  0214e	0f bf 51 28	 movsx	 edx, WORD PTR [ecx+40]
  02152	83 ea 01	 sub	 edx, 1
  02155	39 55 f0	 cmp	 DWORD PTR _j$[ebp], edx
  02158	7c 06		 jl	 SHORT $L119349

; 965  : 		return(-1);		

  0215a	66 0d ff ff	 or	 ax, -1
  0215e	eb 0f		 jmp	 SHORT $L119324
$L119349:

; 966  : 
; 967  : 	return (linkArray[j+1].positionType);

  02160	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  02163	83 c0 01	 add	 eax, 1
  02166	6b c0 06	 imul	 eax, 6
  02169	66 0f b6 44 05
	b4		 movzx	 ax, BYTE PTR _linkArray$[ebp+eax+4]
$L119324:

; 968  : }

  0216f	8b e5		 mov	 esp, ebp
  02171	5d		 pop	 ebp
  02172	c2 04 00	 ret	 4
?GetNextLink@CelObj@@QAEFH@Z ENDP			; CelObj::GetNextLink
_TEXT	ENDS
PUBLIC	?GetLinkPoint@CelObj@@QAEFHH@Z			; CelObj::GetLinkPoint
_DATA	SEGMENT
	ORG $+1
$SG119360 DB	'Unsupported version for Links', 00H
	ORG $+2
$SG119361 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celo'
	DB	'bj.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_type$ = 8
_which$ = 12
_this$ = -96
_viewID$ = -88
_viewPtr$ = -20
_resBuffer$ = -84
_celPtr$ = -8
_linkArray$ = -80
_linkPoint$ = -4
_i$ = -12
_j$ = -16
$T124907 = -92
?GetLinkPoint@CelObj@@QAEFHH@Z PROC NEAR		; CelObj::GetLinkPoint

; 972  : {

  02175	55		 push	 ebp
  02176	8b ec		 mov	 ebp, esp
  02178	83 ec 60	 sub	 esp, 96			; 00000060H
  0217b	89 4d a0	 mov	 DWORD PTR _this$[ebp], ecx

; 973  : 	MemID viewID = resMgr->Get(MemResView, bitmap.View());

  0217e	6a 00		 push	 0
  02180	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  02183	83 c1 04	 add	 ecx, 4
  02186	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  0218b	50		 push	 eax
  0218c	6a 00		 push	 0
  0218e	8d 45 a4	 lea	 eax, DWORD PTR $T124907[ebp]
  02191	50		 push	 eax
  02192	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  02198	8b 11		 mov	 edx, DWORD PTR [ecx]
  0219a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  021a0	ff 52 20	 call	 DWORD PTR [edx+32]
  021a3	50		 push	 eax
  021a4	8d 4d a8	 lea	 ecx, DWORD PTR _viewID$[ebp]
  021a7	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 974  : 	ViewHeader* viewPtr = (ViewHeader*) *viewID;

  021ac	8d 4d a8	 lea	 ecx, DWORD PTR _viewID$[ebp]
  021af	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  021b4	89 45 ec	 mov	 DWORD PTR _viewPtr$[ebp], eax

; 975  : 
; 976  : 	if (viewPtr->version < 0x84)

  021b7	8b 45 ec	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  021ba	33 c9		 xor	 ecx, ecx
  021bc	8a 48 12	 mov	 cl, BYTE PTR [eax+18]
  021bf	81 f9 84 00 00
	00		 cmp	 ecx, 132		; 00000084H
  021c5	7d 20		 jge	 SHORT $L119359

; 977  : 			msgMgr->Fatal(SrcLoc, "Unsupported version for Links");

  021c7	68 00 00 00 00	 push	 OFFSET FLAT:$SG119360
  021cc	68 d1 03 00 00	 push	 977			; 000003d1H
  021d1	68 00 00 00 00	 push	 OFFSET FLAT:$SG119361
  021d6	6a 61		 push	 97			; 00000061H
  021d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  021de	52		 push	 edx
  021df	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  021e4	83 c4 14	 add	 esp, 20			; 00000014H
$L119359:

; 978  : 
; 979  : 	uchar* resBuffer = ResPointer();

  021e7	8b 45 a0	 mov	 eax, DWORD PTR _this$[ebp]
  021ea	8b 10		 mov	 edx, DWORD PTR [eax]
  021ec	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  021ef	ff 52 14	 call	 DWORD PTR [edx+20]
  021f2	89 45 ac	 mov	 DWORD PTR _resBuffer$[ebp], eax

; 980  : 	CelHeaderView* celPtr = (CelHeaderView*) (resBuffer + celOffset);

  021f5	8b 45 a0	 mov	 eax, DWORD PTR _this$[ebp]
  021f8	8b 4d ac	 mov	 ecx, DWORD PTR _resBuffer$[ebp]
  021fb	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  021fe	89 4d f8	 mov	 DWORD PTR _celPtr$[ebp], ecx

; 981  : 
; 982  : 	if (celPtr->linkTableCount == 0)

  02201	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  02204	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  02208	85 c0		 test	 eax, eax
  0220a	75 09		 jne	 SHORT $L119365

; 983  : 	return(-1);

  0220c	66 0d ff ff	 or	 ax, -1
  02210	e9 c3 00 00 00	 jmp	 $L119354
$L119365:

; 986  : 	struct LinkPoint *linkPoint = (LinkPoint*)(resBuffer 
; 987  :                                      + celPtr->linkTableOffset);

  02215	8b 4d f8	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  02218	8b 55 ac	 mov	 edx, DWORD PTR _resBuffer$[ebp]
  0221b	03 51 24	 add	 edx, DWORD PTR [ecx+36]
  0221e	89 55 fc	 mov	 DWORD PTR _linkPoint$[ebp], edx

; 988  : 
; 989  : 	for(int i=0;i<celPtr->linkTableCount;i++,linkPoint++)

  02221	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  02228	eb 12		 jmp	 SHORT $L119370
$L119371:
  0222a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0222d	83 c0 01	 add	 eax, 1
  02230	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  02233	8b 4d fc	 mov	 ecx, DWORD PTR _linkPoint$[ebp]
  02236	83 c1 06	 add	 ecx, 6
  02239	89 4d fc	 mov	 DWORD PTR _linkPoint$[ebp], ecx
$L119370:
  0223c	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  0223f	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  02243	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  02246	7d 1b		 jge	 SHORT $L119372

; 990  : 		linkArray[i] = *linkPoint;

  02248	8b 4d fc	 mov	 ecx, DWORD PTR _linkPoint$[ebp]
  0224b	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0224e	6b d2 06	 imul	 edx, 6
  02251	8d 44 15 b0	 lea	 eax, DWORD PTR _linkArray$[ebp+edx]
  02255	8b 11		 mov	 edx, DWORD PTR [ecx]
  02257	89 10		 mov	 DWORD PTR [eax], edx
  02259	66 8b 49 04	 mov	 cx, WORD PTR [ecx+4]
  0225d	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  02261	eb c7		 jmp	 SHORT $L119371
$L119372:

; 991  : 		
; 992  : 	for(int j=0;j<celPtr->linkTableCount;j++)

  02263	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0226a	eb 09		 jmp	 SHORT $L119374
$L119375:
  0226c	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  0226f	83 c2 01	 add	 edx, 1
  02272	89 55 f0	 mov	 DWORD PTR _j$[ebp], edx
$L119374:
  02275	8b 45 f8	 mov	 eax, DWORD PTR _celPtr$[ebp]
  02278	0f bf 48 28	 movsx	 ecx, WORD PTR [eax+40]
  0227c	39 4d f0	 cmp	 DWORD PTR _j$[ebp], ecx
  0227f	7d 53		 jge	 SHORT $L119376

; 993  : 		if (linkArray[j].positionType == type)	{

  02281	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  02284	6b d2 06	 imul	 edx, 6
  02287	33 c0		 xor	 eax, eax
  02289	8a 44 15 b4	 mov	 al, BYTE PTR _linkArray$[ebp+edx+4]
  0228d	3b 45 08	 cmp	 eax, DWORD PTR _type$[ebp]
  02290	75 40		 jne	 SHORT $L119381

; 994  : 			if (which == 1)

  02292	83 7d 0c 01	 cmp	 DWORD PTR _which$[ebp], 1
  02296	75 2d		 jne	 SHORT $L119378

; 995  : 				if (mirrored)

  02298	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  0229b	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  0229f	74 17		 je	 SHORT $L119379

; 996  : 					return(celPtr->xDim - linkArray[j].x);

  022a1	8b 55 f8	 mov	 edx, DWORD PTR _celPtr$[ebp]
  022a4	33 c0		 xor	 eax, eax
  022a6	66 8b 02	 mov	 ax, WORD PTR [edx]
  022a9	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  022ac	6b c9 06	 imul	 ecx, 6
  022af	0f bf 54 0d b0	 movsx	 edx, WORD PTR _linkArray$[ebp+ecx]
  022b4	2b c2		 sub	 eax, edx
  022b6	eb 20		 jmp	 SHORT $L119354
$L119379:

; 998  : 					return(linkArray[j].x);

  022b8	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  022bb	6b c0 06	 imul	 eax, 6
  022be	66 8b 44 05 b0	 mov	 ax, WORD PTR _linkArray$[ebp+eax]
  022c3	eb 13		 jmp	 SHORT $L119354
$L119378:

; 1000 : 				return(linkArray[j].y);

  022c5	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  022c8	6b c9 06	 imul	 ecx, 6
  022cb	66 8b 44 0d b2	 mov	 ax, WORD PTR _linkArray$[ebp+ecx+2]
  022d0	eb 06		 jmp	 SHORT $L119354
$L119381:

; 1002 : 			
; 1003 : 	return(-1);

  022d2	eb 98		 jmp	 SHORT $L119375
$L119376:
  022d4	66 0d ff ff	 or	 ax, -1
$L119354:

; 1004 : }

  022d8	8b e5		 mov	 esp, ebp
  022da	5d		 pop	 ebp
  022db	c2 08 00	 ret	 8
?GetLinkPoint@CelObj@@QAEFHH@Z ENDP			; CelObj::GetLinkPoint
_TEXT	ENDS
PUBLIC	?ResPointer@CelObjView@@UAEPAEXZ		; CelObjView::ResPointer
_TEXT	SEGMENT
_this$ = -12
_viewID$ = -4
$T124909 = -8
?ResPointer@CelObjView@@UAEPAEXZ PROC NEAR		; CelObjView::ResPointer

; 1009 : {

  022de	55		 push	 ebp
  022df	8b ec		 mov	 ebp, esp
  022e1	83 ec 0c	 sub	 esp, 12			; 0000000cH
  022e4	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1010 : 	MemID viewID;

  022e7	8d 4d fc	 lea	 ecx, DWORD PTR _viewID$[ebp]
  022ea	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 1011 : 	viewID = resMgr->Get(MemResView, bitmap.View());

  022ef	6a 00		 push	 0
  022f1	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  022f4	83 c1 04	 add	 ecx, 4
  022f7	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  022fc	50		 push	 eax
  022fd	6a 00		 push	 0
  022ff	8d 45 f8	 lea	 eax, DWORD PTR $T124909[ebp]
  02302	50		 push	 eax
  02303	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  02309	8b 11		 mov	 edx, DWORD PTR [ecx]
  0230b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  02311	ff 52 20	 call	 DWORD PTR [edx+32]
  02314	66 8b 00	 mov	 ax, WORD PTR [eax]
  02317	66 89 45 fc	 mov	 WORD PTR _viewID$[ebp], ax

; 1012 : 	return (uchar*) *viewID;

  0231b	8d 4d fc	 lea	 ecx, DWORD PTR _viewID$[ebp]
  0231e	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*

; 1013 : }

  02323	8b e5		 mov	 esp, ebp
  02325	5d		 pop	 ebp
  02326	c3		 ret	 0
?ResPointer@CelObjView@@UAEPAEXZ ENDP			; CelObjView::ResPointer
_TEXT	ENDS
PUBLIC	?Draw@CelObjView@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z ; CelObjView::Draw
_TEXT	SEGMENT
_dest$ = 8
_si$ = 12
_drawRect$ = 16
_hflip$ = 20
_this$ = -4
?Draw@CelObjView@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z PROC NEAR ; CelObjView::Draw

; 1019 : {

  02327	55		 push	 ebp
  02328	8b ec		 mov	 ebp, esp
  0232a	51		 push	 ecx
  0232b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1020 : #ifdef DEBUG
; 1021 : 	memMgr->CheckVolatile ( True );
; 1022 : #endif
; 1023 : 	horzFlip = hflip;

  0232e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02331	8b 4d 14	 mov	 ecx, DWORD PTR _hflip$[ebp]
  02334	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 1024 : 	CelObj::Draw(dest,si,drawRect);

  02337	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  0233a	52		 push	 edx
  0233b	8b 45 0c	 mov	 eax, DWORD PTR _si$[ebp]
  0233e	50		 push	 eax
  0233f	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  02342	51		 push	 ecx
  02343	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02346	e8 00 00 00 00	 call	 ?Draw@CelObj@@QAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@@Z ; CelObj::Draw

; 1025 : #ifdef DEBUG
; 1026 : 	memMgr->CheckVolatile ( False );
; 1027 : #endif
; 1028 : }

  0234b	8b e5		 mov	 esp, ebp
  0234d	5d		 pop	 ebp
  0234e	c2 10 00	 ret	 16			; 00000010H
?Draw@CelObjView@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z ENDP ; CelObjView::Draw
_TEXT	ENDS
PUBLIC	?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjView::Draw
PUBLIC	??0Ratio@@QAE@H@Z				; Ratio::Ratio
_TEXT	SEGMENT
_dest$ = 8
_toBuffer$ = 12
_p$ = 16
_hflip$ = 24
_this$ = -32
$T124913 = -12
$T124915 = -24
?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z PROC NEAR ; CelObjView::Draw

; 1032 : {

  02351	55		 push	 ebp
  02352	8b ec		 mov	 ebp, esp
  02354	83 ec 20	 sub	 esp, 32			; 00000020H
  02357	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1033 : #ifdef DEBUG
; 1034 : 	memMgr->CheckVolatile ( True );
; 1035 : #endif
; 1036 : 	horzFlip = hflip;

  0235a	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0235d	8b 4d 18	 mov	 ecx, DWORD PTR _hflip$[ebp]
  02360	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 1037 : 	CelObj::DrawTo(dest, toBuffer, p);

  02363	6a 01		 push	 1
  02365	8d 4d f4	 lea	 ecx, DWORD PTR $T124913[ebp]
  02368	e8 00 00 00 00	 call	 ??0Ratio@@QAE@H@Z	; Ratio::Ratio
  0236d	83 ec 08	 sub	 esp, 8
  02370	8b cc		 mov	 ecx, esp
  02372	50		 push	 eax
  02373	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  02378	6a 01		 push	 1
  0237a	8d 4d e8	 lea	 ecx, DWORD PTR $T124915[ebp]
  0237d	e8 00 00 00 00	 call	 ??0Ratio@@QAE@H@Z	; Ratio::Ratio
  02382	83 ec 08	 sub	 esp, 8
  02385	8b cc		 mov	 ecx, esp
  02387	50		 push	 eax
  02388	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  0238d	83 ec 08	 sub	 esp, 8
  02390	8b cc		 mov	 ecx, esp
  02392	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  02395	52		 push	 edx
  02396	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  0239b	8b 45 0c	 mov	 eax, DWORD PTR _toBuffer$[ebp]
  0239e	50		 push	 eax
  0239f	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  023a2	51		 push	 ecx
  023a3	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  023a6	e8 00 00 00 00	 call	 ?DrawTo@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@VRatio@@3@Z ; CelObj::DrawTo

; 1038 : #ifdef DEBUG
; 1039 : 	memMgr->CheckVolatile ( False );
; 1040 : #endif
; 1041 : }

  023ab	8b e5		 mov	 esp, ebp
  023ad	5d		 pop	 ebp
  023ae	c2 14 00	 ret	 20			; 00000014H
?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ENDP ; CelObjView::Draw
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@H@Z
_TEXT	SEGMENT
_num$ = 8
_this$ = -4
??0Ratio@@QAE@H@Z PROC NEAR				; Ratio::Ratio, COMDAT

; 8    : 	Ratio(int num)					:  numer(num), denom(1) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _num$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	c7 42 04 01 00
	00 00		 mov	 DWORD PTR [edx+4], 1
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0Ratio@@QAE@H@Z ENDP					; Ratio::Ratio
_TEXT	ENDS
PUBLIC	?Draw@CelObjView@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@HVRatio@@3@Z ; CelObjView::Draw
_TEXT	SEGMENT
_dest$ = 8
_toBuffer$ = 12
_p$ = 16
_hflip$ = 24
_ratioX$ = 28
_ratioY$ = 36
_this$ = -16
?Draw@CelObjView@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@HVRatio@@3@Z PROC NEAR ; CelObjView::Draw

; 1046 : {

  023b1	55		 push	 ebp
  023b2	8b ec		 mov	 ebp, esp
  023b4	83 ec 10	 sub	 esp, 16			; 00000010H
  023b7	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1047 : #ifdef DEBUG
; 1048 : 	memMgr->CheckVolatile ( True );
; 1049 : #endif
; 1050 : 	horzFlip = hflip;

  023ba	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  023bd	8b 4d 18	 mov	 ecx, DWORD PTR _hflip$[ebp]
  023c0	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 1051 : 	CelObj::DrawTo(dest, toBuffer, p, ratioX, ratioY);

  023c3	83 ec 08	 sub	 esp, 8
  023c6	8b cc		 mov	 ecx, esp
  023c8	8d 55 24	 lea	 edx, DWORD PTR _ratioY$[ebp]
  023cb	52		 push	 edx
  023cc	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  023d1	83 ec 08	 sub	 esp, 8
  023d4	8b cc		 mov	 ecx, esp
  023d6	8d 45 1c	 lea	 eax, DWORD PTR _ratioX$[ebp]
  023d9	50		 push	 eax
  023da	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  023df	83 ec 08	 sub	 esp, 8
  023e2	8b cc		 mov	 ecx, esp
  023e4	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  023e7	52		 push	 edx
  023e8	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  023ed	8b 45 0c	 mov	 eax, DWORD PTR _toBuffer$[ebp]
  023f0	50		 push	 eax
  023f1	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  023f4	51		 push	 ecx
  023f5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  023f8	e8 00 00 00 00	 call	 ?DrawTo@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@VRatio@@3@Z ; CelObj::DrawTo

; 1052 : #ifdef DEBUG
; 1053 : 	memMgr->CheckVolatile ( False );
; 1054 : #endif
; 1055 : }

  023fd	8b e5		 mov	 esp, ebp
  023ff	5d		 pop	 ebp
  02400	c2 24 00	 ret	 36			; 00000024H
?Draw@CelObjView@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@HVRatio@@3@Z ENDP ; CelObjView::Draw
_TEXT	ENDS
PUBLIC	?Loop@Bitmap@@QBEHXZ				; Bitmap::Loop
PUBLIC	?Cel@Bitmap@@QBEHXZ				; Bitmap::Cel
PUBLIC	?SetCel@Bitmap@@QAEXH@Z				; Bitmap::SetCel
PUBLIC	?SetLoop@Bitmap@@QAEXH@Z			; Bitmap::SetLoop
PUBLIC	??0Bitmap@@QAE@ABV0@@Z				; Bitmap::Bitmap
PUBLIC	?IsValid@MemID@@QBEHXZ				; MemID::IsValid
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
PUBLIC	??0CelObj@@QAE@HHH@Z				; CelObj::CelObj
PUBLIC	??0CelObjView@@QAE@HHH@Z			; CelObjView::CelObjView
PUBLIC	?Duplicate@CelObjView@@UBEPAVCelObj@@XZ		; CelObjView::Duplicate
PUBLIC	??4CelObjView@@QAEAAV0@ABV0@@Z			; CelObjView::operator=
PUBLIC	??_7CelObjView@@6B@				; CelObjView::`vftable'
PUBLIC	??_GCelObjView@@UAEPAXI@Z			; CelObjView::`scalar deleting destructor'
PUBLIC	??_ECelObjView@@UAEPAXI@Z			; CelObjView::`vector deleting destructor'
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?GetMemType@MemID@@QBE?AW4MemType@@XZ:NEAR	; MemID::GetMemType
;	COMDAT ??_7CelObjView@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celobj.cpp
CONST	SEGMENT
??_7CelObjView@@6B@ DD FLAT:??_ECelObjView@@UAEPAXI@Z	; CelObjView::`vftable'
	DD	FLAT:?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
	DD	FLAT:?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z
	DD	FLAT:?Draw@CelObjView@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z
	DD	FLAT:?ReadPix@CelObj@@UAEEHHH@Z
	DD	FLAT:?ResPointer@CelObjView@@UAEPAEXZ
CONST	ENDS
_DATA	SEGMENT
	ORG $+1
$SG119436 DB	'Resource manager returns invalid handle on CelObjView co'
	DB	'nstructor. (%d, %d, %d)', 00H
$SG119450 DB	'Loop is less than 0!', 00H
	ORG $+3
$SG119451 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celo'
	DB	'bj.cpp', 00H
	ORG $+1
$SG119465 DB	'Compression type not supported - V: %d  L: %d  C: %d', 0aH
	DB	00H
	ORG $+2
$SG119466 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celo'
	DB	'bj.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T124930 DD	019930520H
	DD	01H
	DD	FLAT:$T124933
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T124933 DD	0ffffffffH
	DD	FLAT:$L124926
xdata$x	ENDS
_TEXT	SEGMENT
_v$ = 8
_l$ = 12
_c$ = 16
_this$ = -48
_index$ = -20
_viewID$ = -24
_viewPtr$ = -16
_loopPtr$119452 = -32
_celPtr$119460 = -28
$T124923 = -36
$T124924 = -40
$T124925 = -44
__$EHRec$ = -12
??0CelObjView@@QAE@HHH@Z PROC NEAR			; CelObjView::CelObjView

; 1059 : {

  02403	55		 push	 ebp
  02404	8b ec		 mov	 ebp, esp
  02406	6a ff		 push	 -1
  02408	68 00 00 00 00	 push	 $L124931
  0240d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02413	50		 push	 eax
  02414	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0241b	83 ec 28	 sub	 esp, 40			; 00000028H
  0241e	56		 push	 esi
  0241f	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  02422	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  02425	50		 push	 eax
  02426	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  02429	51		 push	 ecx
  0242a	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0242d	52		 push	 edx
  0242e	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  02431	e8 00 00 00 00	 call	 ??0CelObj@@QAE@HHH@Z	; CelObj::CelObj
  02436	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0243d	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  02440	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CelObjView@@6B@ ; CelObjView::`vftable'

; 1060 : 	int index;
; 1061 : 
; 1062 : 	if (SearchCache(bitmap, &index))

  02446	8d 4d ec	 lea	 ecx, DWORD PTR _index$[ebp]
  02449	51		 push	 ecx
  0244a	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0244d	83 c2 04	 add	 edx, 4
  02450	83 ec 14	 sub	 esp, 20			; 00000014H
  02453	8b cc		 mov	 ecx, esp
  02455	89 65 dc	 mov	 DWORD PTR $T124923[ebp], esp
  02458	52		 push	 edx
  02459	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@ABV0@@Z	; Bitmap::Bitmap
  0245e	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  02461	e8 00 00 00 00	 call	 ?SearchCache@CelObj@@QBEHVBitmap@@PAH@Z ; CelObj::SearchCache
  02466	85 c0		 test	 eax, eax
  02468	74 1f		 je	 SHORT $L119427

; 1064 : 		*this = *(CelObjView*) array[index].cel;

  0246a	8b 45 ec	 mov	 eax, DWORD PTR _index$[ebp]
  0246d	50		 push	 eax
  0246e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  02473	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  02478	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0247b	51		 push	 ecx
  0247c	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0247f	e8 00 00 00 00	 call	 ??4CelObjView@@QAEAAV0@ABV0@@Z ; CelObjView::operator=

; 1065 : 		return;

  02484	e9 0a 04 00 00	 jmp	 $L119424
$L119427:

; 1067 : 
; 1068 : 	if ( resMgr->Find ( MemResView, bitmap.View() ) ) {

  02489	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0248c	83 c1 04	 add	 ecx, 4
  0248f	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  02494	50		 push	 eax
  02495	6a 00		 push	 0
  02497	8d 55 d8	 lea	 edx, DWORD PTR $T124924[ebp]
  0249a	52		 push	 edx
  0249b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  024a0	8b 10		 mov	 edx, DWORD PTR [eax]
  024a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  024a8	ff 52 18	 call	 DWORD PTR [edx+24]
  024ab	8b c8		 mov	 ecx, eax
  024ad	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  024b2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  024b7	85 c0		 test	 eax, eax
  024b9	74 0c		 je	 SHORT $L119430

; 1069 : 		gLoadedView = 0;

  024bb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?gLoadedView@@3HA, 0 ; gLoadedView

; 1070 : 	} else {

  024c5	eb 0a		 jmp	 SHORT $L119431
$L119430:

; 1071 : 		gLoadedView = 1;

  024c7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?gLoadedView@@3HA, 1 ; gLoadedView
$L119431:

; 1073 : 
; 1074 : 	// Load the view into memory
; 1075 : 	MemID viewID = resMgr->Get(MemResView, bitmap.View());

  024d1	6a 00		 push	 0
  024d3	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  024d6	83 c1 04	 add	 ecx, 4
  024d9	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  024de	50		 push	 eax
  024df	6a 00		 push	 0
  024e1	8d 45 d4	 lea	 eax, DWORD PTR $T124925[ebp]
  024e4	50		 push	 eax
  024e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  024eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  024ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  024f3	ff 52 20	 call	 DWORD PTR [edx+32]
  024f6	50		 push	 eax
  024f7	8d 4d e8	 lea	 ecx, DWORD PTR _viewID$[ebp]
  024fa	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 1076 : 
; 1077 : 	if ( !viewID.IsValid() || viewID.GetMemType() != MemResView ) 

  024ff	8d 4d e8	 lea	 ecx, DWORD PTR _viewID$[ebp]
  02502	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  02507	85 c0		 test	 eax, eax
  02509	74 0c		 je	 SHORT $L119435
  0250b	8d 4d e8	 lea	 ecx, DWORD PTR _viewID$[ebp]
  0250e	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  02513	85 c0		 test	 eax, eax
  02515	74 1f		 je	 SHORT $L119434
$L119435:

; 1078 : 		msgMgr->Fatal ( "Resource manager returns invalid handle on CelObjView constructor. (%d, %d, %d)", v, l, c );

  02517	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  0251a	50		 push	 eax
  0251b	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  0251e	51		 push	 ecx
  0251f	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  02522	52		 push	 edx
  02523	68 00 00 00 00	 push	 OFFSET FLAT:$SG119436
  02528	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0252d	50		 push	 eax
  0252e	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  02533	83 c4 14	 add	 esp, 20			; 00000014H
$L119434:

; 1079 : 
; 1080 : 	ViewHeader* viewPtr = (ViewHeader*) *viewID;

  02536	8d 4d e8	 lea	 ecx, DWORD PTR _viewID$[ebp]
  02539	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0253e	89 45 f0	 mov	 DWORD PTR _viewPtr$[ebp], eax

; 1081 : 
; 1082 : 	// Find the pointer to the cel if it exists
; 1083 : 	if (viewPtr) {

  02541	83 7d f0 00	 cmp	 DWORD PTR _viewPtr$[ebp], 0
  02545	0f 84 48 03 00
	00		 je	 $L119439

; 1084 : 		resx = viewPtr->resX;

  0254b	8b 4d f0	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  0254e	33 d2		 xor	 edx, edx
  02550	66 8b 51 0e	 mov	 dx, WORD PTR [ecx+14]
  02554	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  02557	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 1085 : 		resy = viewPtr->resY;

  0255a	8b 4d f0	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  0255d	33 d2		 xor	 edx, edx
  0255f	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  02563	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  02566	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 1086 : 
; 1087 : 		if (!resx  &&  !resy) {

  02569	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0256c	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  02570	75 66		 jne	 SHORT $L119442
  02572	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  02575	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  02579	75 5d		 jne	 SHORT $L119442

; 1088 : 			switch (viewPtr->resolution) {

  0257b	8b 45 f0	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  0257e	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  02581	88 4d cc	 mov	 BYTE PTR -52+[ebp], cl
  02584	80 7d cc 00	 cmp	 BYTE PTR -52+[ebp], 0
  02588	74 0e		 je	 SHORT $L119445
  0258a	80 7d cc 01	 cmp	 BYTE PTR -52+[ebp], 1
  0258e	74 1e		 je	 SHORT $L119446
  02590	80 7d cc 02	 cmp	 BYTE PTR -52+[ebp], 2
  02594	74 2e		 je	 SHORT $L119447
  02596	eb 40		 jmp	 SHORT $L119442
$L119445:

; 1089 : 				case 0:
; 1090 : 					resx = LOWRESX;

  02598	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0259b	c7 42 30 40 01
	00 00		 mov	 DWORD PTR [edx+48], 320	; 00000140H

; 1091 : 					resy = LOWRESY;

  025a2	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  025a5	c7 40 34 c8 00
	00 00		 mov	 DWORD PTR [eax+52], 200	; 000000c8H

; 1092 : 					break;

  025ac	eb 2a		 jmp	 SHORT $L119442
$L119446:

; 1093 : 
; 1094 : 				case 1:
; 1095 : 					resx = 640;

  025ae	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  025b1	c7 41 30 80 02
	00 00		 mov	 DWORD PTR [ecx+48], 640	; 00000280H

; 1096 : 					resy = 480;

  025b8	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  025bb	c7 42 34 e0 01
	00 00		 mov	 DWORD PTR [edx+52], 480	; 000001e0H

; 1097 : 					break;

  025c2	eb 14		 jmp	 SHORT $L119442
$L119447:

; 1098 : 
; 1099 : 				case 2:
; 1100 : 					resx = 640;

  025c4	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  025c7	c7 40 30 80 02
	00 00		 mov	 DWORD PTR [eax+48], 640	; 00000280H

; 1101 : 					resy = 400;

  025ce	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  025d1	c7 41 34 90 01
	00 00		 mov	 DWORD PTR [ecx+52], 400	; 00000190H
$L119442:

; 1105 : 
; 1106 : 		if (viewPtr->loopCount <= bitmap.Loop())

  025d8	8b 55 f0	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  025db	33 c0		 xor	 eax, eax
  025dd	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  025e0	8b f0		 mov	 esi, eax
  025e2	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  025e5	83 c1 04	 add	 ecx, 4
  025e8	e8 00 00 00 00	 call	 ?Loop@Bitmap@@QBEHXZ	; Bitmap::Loop
  025ed	3b f0		 cmp	 esi, eax
  025ef	7f 17		 jg	 SHORT $L119448

; 1107 : 			bitmap.SetLoop(viewPtr->loopCount - 1);

  025f1	8b 4d f0	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  025f4	33 d2		 xor	 edx, edx
  025f6	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  025f9	83 ea 01	 sub	 edx, 1
  025fc	52		 push	 edx
  025fd	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  02600	83 c1 04	 add	 ecx, 4
  02603	e8 00 00 00 00	 call	 ?SetLoop@Bitmap@@QAEXH@Z ; Bitmap::SetLoop
$L119448:

; 1108 : 
; 1109 : 		if (l < 0)

  02608	83 7d 0c 00	 cmp	 DWORD PTR _l$[ebp], 0
  0260c	7d 1f		 jge	 SHORT $L119449

; 1110 : 			msgMgr->Fatal(SrcLoc, "Loop is less than 0!");

  0260e	68 00 00 00 00	 push	 OFFSET FLAT:$SG119450
  02613	68 56 04 00 00	 push	 1110			; 00000456H
  02618	68 00 00 00 00	 push	 OFFSET FLAT:$SG119451
  0261d	6a 61		 push	 97			; 00000061H
  0261f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  02624	50		 push	 eax
  02625	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  0262a	83 c4 14	 add	 esp, 20			; 00000014H
$L119449:

; 1111 : 
; 1112 : 		LoopHeader* loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize * bitmap.Loop() + viewPtr->viewHeaderSize + 2);

  0262d	8b 4d f0	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  02630	33 d2		 xor	 edx, edx
  02632	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  02635	8b f2		 mov	 esi, edx
  02637	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0263a	83 c1 04	 add	 ecx, 4
  0263d	e8 00 00 00 00	 call	 ?Loop@Bitmap@@QBEHXZ	; Bitmap::Loop
  02642	0f af f0	 imul	 esi, eax
  02645	8b 45 f0	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  02648	03 c6		 add	 eax, esi
  0264a	8b 4d f0	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  0264d	33 d2		 xor	 edx, edx
  0264f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  02652	8d 44 10 02	 lea	 eax, DWORD PTR [eax+edx+2]
  02656	89 45 e0	 mov	 DWORD PTR _loopPtr$119452[ebp], eax

; 1113 : 
; 1114 : 		if (loopPtr->altLoop != -1) {

  02659	8b 4d e0	 mov	 ecx, DWORD PTR _loopPtr$119452[ebp]
  0265c	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0265f	83 fa ff	 cmp	 edx, -1
  02662	74 3c		 je	 SHORT $L119455

; 1115 : 			if (loopPtr->flags == 1) 

  02664	8b 45 e0	 mov	 eax, DWORD PTR _loopPtr$119452[ebp]
  02667	33 c9		 xor	 ecx, ecx
  02669	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0266c	83 f9 01	 cmp	 ecx, 1
  0266f	75 0a		 jne	 SHORT $L119456

; 1116 : 				mirrored = True;

  02671	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  02674	c7 42 48 01 00
	00 00		 mov	 DWORD PTR [edx+72], 1
$L119456:

; 1117 : 
; 1118 : 			loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize*loopPtr->altLoop + viewPtr->viewHeaderSize + 2);

  0267b	8b 45 f0	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  0267e	33 c9		 xor	 ecx, ecx
  02680	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  02683	8b 55 e0	 mov	 edx, DWORD PTR _loopPtr$119452[ebp]
  02686	0f be 02	 movsx	 eax, BYTE PTR [edx]
  02689	0f af c8	 imul	 ecx, eax
  0268c	8b 55 f0	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  0268f	03 d1		 add	 edx, ecx
  02691	8b 45 f0	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  02694	33 c9		 xor	 ecx, ecx
  02696	66 8b 08	 mov	 cx, WORD PTR [eax]
  02699	8d 54 0a 02	 lea	 edx, DWORD PTR [edx+ecx+2]
  0269d	89 55 e0	 mov	 DWORD PTR _loopPtr$119452[ebp], edx
$L119455:

; 1120 : 
; 1121 : 		if (loopPtr->numCels <= bitmap.Cel())

  026a0	8b 45 e0	 mov	 eax, DWORD PTR _loopPtr$119452[ebp]
  026a3	33 c9		 xor	 ecx, ecx
  026a5	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  026a8	8b f1		 mov	 esi, ecx
  026aa	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  026ad	83 c1 04	 add	 ecx, 4
  026b0	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  026b5	3b f0		 cmp	 esi, eax
  026b7	7f 17		 jg	 SHORT $L119459

; 1122 : 			bitmap.SetCel(loopPtr->numCels - 1);

  026b9	8b 55 e0	 mov	 edx, DWORD PTR _loopPtr$119452[ebp]
  026bc	33 c0		 xor	 eax, eax
  026be	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  026c1	83 e8 01	 sub	 eax, 1
  026c4	50		 push	 eax
  026c5	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  026c8	83 c1 04	 add	 ecx, 4
  026cb	e8 00 00 00 00	 call	 ?SetCel@Bitmap@@QAEXH@Z	; Bitmap::SetCel
$L119459:

; 1123 : 
; 1124 : 		paletteOffset = viewPtr->paletteOffset;

  026d0	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  026d3	8b 55 f0	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  026d6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  026d9	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1125 : 
; 1126 : 		celOffset = loopPtr->celOffset + bitmap.Cel() * viewPtr->celHeaderSize;

  026dc	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  026df	83 c1 04	 add	 ecx, 4
  026e2	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  026e7	8b 4d f0	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  026ea	33 d2		 xor	 edx, edx
  026ec	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  026ef	0f af c2	 imul	 eax, edx
  026f2	8b 4d e0	 mov	 ecx, DWORD PTR _loopPtr$119452[ebp]
  026f5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  026f8	03 d0		 add	 edx, eax
  026fa	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  026fd	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1127 : 
; 1128 : 		CelHeaderView* celPtr = (CelHeaderView *) ((char *) viewPtr + celOffset);

  02700	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  02703	8b 55 f0	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  02706	03 51 18	 add	 edx, DWORD PTR [ecx+24]
  02709	89 55 e4	 mov	 DWORD PTR _celPtr$119460[ebp], edx

; 1129 : 		width = celPtr->xDim;

  0270c	8b 45 e4	 mov	 eax, DWORD PTR _celPtr$119460[ebp]
  0270f	33 c9		 xor	 ecx, ecx
  02711	66 8b 08	 mov	 cx, WORD PTR [eax]
  02714	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  02717	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 1130 : 		height = celPtr->yDim;

  0271a	8b 45 e4	 mov	 eax, DWORD PTR _celPtr$119460[ebp]
  0271d	33 c9		 xor	 ecx, ecx
  0271f	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  02723	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  02726	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 1131 : 		xorg = (celPtr->xDim >> 1) - celPtr->xHot;

  02729	8b 45 e4	 mov	 eax, DWORD PTR _celPtr$119460[ebp]
  0272c	33 c9		 xor	 ecx, ecx
  0272e	66 8b 08	 mov	 cx, WORD PTR [eax]
  02731	d1 f9		 sar	 ecx, 1
  02733	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119460[ebp]
  02736	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  0273a	2b c8		 sub	 ecx, eax
  0273c	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0273f	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 1132 : 
; 1133 : 		if (mirrored)

  02742	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  02745	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  02749	74 17		 je	 SHORT $L119463

; 1134 : 			xorg = celPtr->xDim - xorg - 1;

  0274b	8b 4d e4	 mov	 ecx, DWORD PTR _celPtr$119460[ebp]
  0274e	33 d2		 xor	 edx, edx
  02750	66 8b 11	 mov	 dx, WORD PTR [ecx]
  02753	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  02756	2b 50 28	 sub	 edx, DWORD PTR [eax+40]
  02759	83 ea 01	 sub	 edx, 1
  0275c	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0275f	89 51 28	 mov	 DWORD PTR [ecx+40], edx
$L119463:

; 1135 : 
; 1136 : 		yorg = celPtr->yDim - celPtr->yHot - 1;

  02762	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119460[ebp]
  02765	33 c0		 xor	 eax, eax
  02767	66 8b 42 02	 mov	 ax, WORD PTR [edx+2]
  0276b	8b 4d e4	 mov	 ecx, DWORD PTR _celPtr$119460[ebp]
  0276e	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  02772	2b c2		 sub	 eax, edx
  02774	83 e8 01	 sub	 eax, 1
  02777	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0277a	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 1137 : 		skip = celPtr->skip;

  0277d	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  02780	8b 45 e4	 mov	 eax, DWORD PTR _celPtr$119460[ebp]
  02783	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  02786	88 4a 38	 mov	 BYTE PTR [edx+56], cl

; 1138 : 		compressType = celPtr->compressType;

  02789	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119460[ebp]
  0278c	33 c0		 xor	 eax, eax
  0278e	8a 42 09	 mov	 al, BYTE PTR [edx+9]
  02791	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  02794	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 1139 : 
; 1140 : 		if (compressType  &&  compressType != 0x8A)

  02797	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0279a	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  0279e	74 50		 je	 SHORT $L119464
  027a0	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  027a3	81 78 40 8a 00
	00 00		 cmp	 DWORD PTR [eax+64], 138	; 0000008aH
  027aa	74 44		 je	 SHORT $L119464

; 1141 : 			msgMgr->Fatal(SrcLoc, "Compression type not supported - V: %d  L: %d  C: %d\n", bitmap.View(), bitmap.Loop(), bitmap.Cel());

  027ac	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  027af	83 c1 04	 add	 ecx, 4
  027b2	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  027b7	50		 push	 eax
  027b8	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  027bb	83 c1 04	 add	 ecx, 4
  027be	e8 00 00 00 00	 call	 ?Loop@Bitmap@@QBEHXZ	; Bitmap::Loop
  027c3	50		 push	 eax
  027c4	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  027c7	83 c1 04	 add	 ecx, 4
  027ca	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  027cf	50		 push	 eax
  027d0	68 00 00 00 00	 push	 OFFSET FLAT:$SG119465
  027d5	68 75 04 00 00	 push	 1141			; 00000475H
  027da	68 00 00 00 00	 push	 OFFSET FLAT:$SG119466
  027df	6a 61		 push	 97			; 00000061H
  027e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  027e7	51		 push	 ecx
  027e8	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  027ed	83 c4 20	 add	 esp, 32			; 00000020H
$L119464:

; 1142 : 
; 1143 : 		if (celPtr->dataFlags & 0x80) {

  027f0	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119460[ebp]
  027f3	33 c0		 xor	 eax, eax
  027f5	66 8b 42 0a	 mov	 ax, WORD PTR [edx+10]
  027f9	25 80 00 00 00	 and	 eax, 128		; 00000080H
  027fe	85 c0		 test	 eax, eax
  02800	74 3a		 je	 SHORT $L119467

; 1144 : 			hasSkip = celPtr->dataFlags & SKIP_PRESENT;

  02802	8b 4d e4	 mov	 ecx, DWORD PTR _celPtr$119460[ebp]
  02805	33 d2		 xor	 edx, edx
  02807	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  0280b	83 e2 01	 and	 edx, 1
  0280e	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  02811	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 1145 : 
; 1146 : 			if (celPtr->dataFlags & REMAP_PRESENT)

  02814	8b 4d e4	 mov	 ecx, DWORD PTR _celPtr$119460[ebp]
  02817	33 d2		 xor	 edx, edx
  02819	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  0281d	83 e2 02	 and	 edx, 2
  02820	85 d2		 test	 edx, edx
  02822	74 0c		 je	 SHORT $L119468

; 1147 : 				remapState = RemapInCel;

  02824	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  02827	c7 40 44 01 00
	00 00		 mov	 DWORD PTR [eax+68], 1

; 1148 : 			else

  0282e	eb 0a		 jmp	 SHORT $L119469
$L119468:

; 1149 : 				remapState = NoRemapInCel;

  02830	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  02833	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
$L119469:

; 1150 : 		} else {

  0283a	eb 4f		 jmp	 SHORT $L119476
$L119467:

; 1151 : 			if (compressType)  {

  0283c	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0283f	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  02843	74 24		 je	 SHORT $L119471

; 1152 : 				if (AnalyzeForRemap())

  02845	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  02848	e8 00 00 00 00	 call	 ?AnalyzeForRemap@CelObjView@@QAEHXZ ; CelObjView::AnalyzeForRemap
  0284d	85 c0		 test	 eax, eax
  0284f	74 0c		 je	 SHORT $L119472

; 1153 : 					remapState = RemapInCel;

  02851	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  02854	c7 40 44 01 00
	00 00		 mov	 DWORD PTR [eax+68], 1

; 1154 : 				else

  0285b	eb 0a		 jmp	 SHORT $L119473
$L119472:

; 1155 : 					remapState = NoRemapInCel;

  0285d	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  02860	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
$L119473:

; 1156 : 			} else  {

  02867	eb 22		 jmp	 SHORT $L119476
$L119471:

; 1157 : 				if (AnalyzeUncompForRemap())

  02869	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0286c	e8 00 00 00 00	 call	 ?AnalyzeUncompForRemap@CelObjView@@QAEHXZ ; CelObjView::AnalyzeUncompForRemap
  02871	85 c0		 test	 eax, eax
  02873	74 0c		 je	 SHORT $L119475

; 1158 : 					remapState = RemapInCel;

  02875	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  02878	c7 42 44 01 00
	00 00		 mov	 DWORD PTR [edx+68], 1

; 1159 : 				else

  0287f	eb 0a		 jmp	 SHORT $L119476
$L119475:

; 1160 : 					remapState = NoRemapInCel;

  02881	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  02884	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0
$L119476:

; 1163 : 
; 1164 : 		PutCopyInCache();

  0288b	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0288e	e8 00 00 00 00	 call	 ?PutCopyInCache@CelObj@@QAEXXZ ; CelObj::PutCopyInCache
$L119439:
$L119424:

; 1166 : }

  02893	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0289a	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0289d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  028a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  028a7	5e		 pop	 esi
  028a8	8b e5		 mov	 esp, ebp
  028aa	5d		 pop	 ebp
  028ab	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L124926:
  00000	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  00008	c3		 ret	 0
$L124931:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T124930
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CelObjView@@QAE@HHH@Z ENDP				; CelObjView::CelObjView
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@MemID@@QBEHXZ PROC NEAR			; MemID::IsValid, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return memMgr->IsValid(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid

; 64   : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IsValid@MemID@@QBEHXZ ENDP				; MemID::IsValid
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L124937
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L124937
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L124937
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L124937
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L124938
$L124937:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L124938:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
;	COMDAT ?Loop@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Loop@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Loop, COMDAT

; 138  : 	int	Loop() const			{return loop;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Loop@Bitmap@@QBEHXZ ENDP				; Bitmap::Loop
_TEXT	ENDS
;	COMDAT ?Cel@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Cel@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Cel, COMDAT

; 139  : 	int	Cel() const				{return cel;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Cel@Bitmap@@QBEHXZ ENDP				; Bitmap::Cel
_TEXT	ENDS
;	COMDAT ?SetCel@Bitmap@@QAEXH@Z
_TEXT	SEGMENT
_c$ = 8
_this$ = -4
?SetCel@Bitmap@@QAEXH@Z PROC NEAR			; Bitmap::SetCel, COMDAT

; 146  : 	void	SetCel(int c)			{cel = c;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _c$[ebp]
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetCel@Bitmap@@QAEXH@Z ENDP				; Bitmap::SetCel
_TEXT	ENDS
;	COMDAT ?SetLoop@Bitmap@@QAEXH@Z
_TEXT	SEGMENT
_l$ = 8
_this$ = -4
?SetLoop@Bitmap@@QAEXH@Z PROC NEAR			; Bitmap::SetLoop, COMDAT

; 147  : 	void	SetLoop(int l)			{loop = l;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _l$[ebp]
  0000d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetLoop@Bitmap@@QAEXH@Z ENDP				; Bitmap::SetLoop
_TEXT	ENDS
PUBLIC	??0Bitmap@@QAE@HHH@Z				; Bitmap::Bitmap
;	COMDAT ??0CelObj@@QAE@HHH@Z
_TEXT	SEGMENT
_v$ = 8
_l$ = 12
_c$ = 16
_this$ = -4
??0CelObj@@QAE@HHH@Z PROC NEAR				; CelObj::CelObj, COMDAT

; 201  : 	CelObj(int v, int l, int c) : bitmap(v,l,c) {mirrored = False; compressType = 1000; hasSkip = True; horzFlip = False; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00012	52		 push	 edx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 04	 add	 ecx, 4
  00019	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@HHH@Z	; Bitmap::Bitmap
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CelObj@@6B@ ; CelObj::`vftable'
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	c7 42 40 e8 03
	00 00		 mov	 DWORD PTR [edx+64], 1000 ; 000003e8H
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	c7 40 3c 01 00
	00 00		 mov	 DWORD PTR [eax+60], 1
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
??0CelObj@@QAE@HHH@Z ENDP				; CelObj::CelObj
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT
_v$ = 8
_l$ = 12
_c$ = 16
_this$ = -4
??0Bitmap@@QAE@HHH@Z PROC NEAR				; Bitmap::Bitmap, COMDAT

; 126  : 	Bitmap(const int v, const int l, const int c)	{view = v; loop = l; cel = c; type = tView;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00018	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _l$[ebp]
  00021	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	8b 55 10	 mov	 edx, DWORD PTR _c$[ebp]
  0002a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
??0Bitmap@@QAE@HHH@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
PUBLIC	??0CelObjView@@QAE@ABV0@@Z			; CelObjView::CelObjView
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
;	COMDAT xdata$x
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\celobj.hpp
xdata$x	SEGMENT
$T124953 DD	019930520H
	DD	01H
	DD	FLAT:$T124955
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T124955 DD	0ffffffffH
	DD	FLAT:$L124951
xdata$x	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT
$T124947 = -16
$T124948 = -20
__$EHRec$ = -12
_this$ = -24
?Duplicate@CelObjView@@UBEPAVCelObj@@XZ PROC NEAR	; CelObjView::Duplicate, COMDAT

; 294  : 	CelObj*	Duplicate() const			{return New CelObjView(*this);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L124954
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	6a 50		 push	 80			; 00000050H
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	83 c4 04	 add	 esp, 4
  00028	89 45 ec	 mov	 DWORD PTR $T124948[ebp], eax
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	83 7d ec 00	 cmp	 DWORD PTR $T124948[ebp], 0
  00036	74 11		 je	 SHORT $L124949
  00038	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d ec	 mov	 ecx, DWORD PTR $T124948[ebp]
  0003f	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@ABV0@@Z ; CelObjView::CelObjView
  00044	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00047	eb 07		 jmp	 SHORT $L124950
$L124949:
  00049	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L124950:
  00050	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  00053	89 4d f0	 mov	 DWORD PTR $T124947[ebp], ecx
  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	8b 45 f0	 mov	 eax, DWORD PTR $T124947[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L124951:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T124948[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L124954:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T124953
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Duplicate@CelObjView@@UBEPAVCelObj@@XZ ENDP		; CelObjView::Duplicate
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??0CelObjView@@QAE@ABV0@@Z PROC NEAR			; CelObjView::CelObjView, COMDAT

; 293  : 	CelObjView(const CelObjView& src) : CelObj(src) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CelObj@@QAE@ABV0@@Z	; CelObj::CelObj
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CelObjView@@6B@ ; CelObjView::`vftable'
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0CelObjView@@QAE@ABV0@@Z ENDP				; CelObjView::CelObjView
_TEXT	ENDS
PUBLIC	??1CelObjView@@UAE@XZ				; CelObjView::~CelObjView
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCelObjView@@UAEPAXI@Z PROC NEAR			; CelObjView::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L115167
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L115167:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCelObjView@@UAEPAXI@Z ENDP				; CelObjView::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObjView@@UAE@XZ PROC NEAR				; CelObjView::~CelObjView, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CelObjView@@UAE@XZ ENDP				; CelObjView::~CelObjView
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0Bitmap@@QAE@ABV0@@Z PROC NEAR			; Bitmap::Bitmap, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00023	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00026	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0002f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00032	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00035	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00038	83 c0 10	 add	 eax, 16			; 00000010H
  0003b	50		 push	 eax
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 10	 add	 ecx, 16			; 00000010H
  00042	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  0004d	8a 42 12	 mov	 al, BYTE PTR [edx+18]
  00050	88 41 12	 mov	 BYTE PTR [ecx+18], al
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
??0Bitmap@@QAE@ABV0@@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
PUBLIC	??4CelObj@@QAEAAV0@ABV0@@Z			; CelObj::operator=
;	COMDAT ??4CelObjView@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4CelObjView@@QAEAAV0@ABV0@@Z PROC NEAR		; CelObjView::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??4CelObj@@QAEAAV0@ABV0@@Z ; CelObj::operator=
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??4CelObjView@@QAEAAV0@ABV0@@Z ENDP			; CelObjView::operator=
_TEXT	ENDS
;	COMDAT ??4CelObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4CelObj@@QAEAAV0@ABV0@@Z PROC NEAR			; CelObj::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0000c	83 c6 04	 add	 esi, 4
  0000f	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00012	83 c7 04	 add	 edi, 4
  00015	b9 05 00 00 00	 mov	 ecx, 5
  0001a	f3 a5		 rep movsd
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00022	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00025	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0002e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00031	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0003a	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0003d	89 50 20	 mov	 DWORD PTR [eax+32], edx
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00046	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00049	89 50 24	 mov	 DWORD PTR [eax+36], edx
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00052	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00055	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0005e	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00061	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0006a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0006d	89 50 30	 mov	 DWORD PTR [eax+48], edx
  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00076	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00079	89 50 34	 mov	 DWORD PTR [eax+52], edx
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00082	8a 51 38	 mov	 dl, BYTE PTR [ecx+56]
  00085	88 50 38	 mov	 BYTE PTR [eax+56], dl
  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0008e	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00091	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0009a	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0009d	89 50 40	 mov	 DWORD PTR [eax+64], edx
  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000a6	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000a9	89 50 44	 mov	 DWORD PTR [eax+68], edx
  000ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000af	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000b2	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  000b5	89 50 48	 mov	 DWORD PTR [eax+72], edx
  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  000be	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000c1	89 50 4c	 mov	 DWORD PTR [eax+76], edx
  000c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 04 00	 ret	 4
??4CelObj@@QAEAAV0@ABV0@@Z ENDP				; CelObj::operator=
_TEXT	ENDS
PUBLIC	?CheckValid@MemoryMgr@@QAEXG@Z			; MemoryMgr::CheckValid
PUBLIC	??0CelObj@@QAE@VMemID@@@Z			; CelObj::CelObj
PUBLIC	??0CelObjMem@@QAE@VMemID@@@Z			; CelObjMem::CelObjMem
PUBLIC	?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ		; CelObjMem::Duplicate
PUBLIC	?Draw@CelObjMem@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z ; CelObjMem::Draw
PUBLIC	?Draw@CelObjMem@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjMem::Draw
PUBLIC	?ResPointer@CelObjMem@@UAEPAEXZ			; CelObjMem::ResPointer
PUBLIC	??_7CelObjMem@@6B@				; CelObjMem::`vftable'
PUBLIC	??_GCelObjMem@@UAEPAXI@Z			; CelObjMem::`scalar deleting destructor'
PUBLIC	??_ECelObjMem@@UAEPAXI@Z			; CelObjMem::`vector deleting destructor'
;	COMDAT ??_7CelObjMem@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celobj.cpp
CONST	SEGMENT
??_7CelObjMem@@6B@ DD FLAT:??_ECelObjMem@@UAEPAXI@Z	; CelObjMem::`vftable'
	DD	FLAT:?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
	DD	FLAT:?Draw@CelObjMem@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z
	DD	FLAT:?Draw@CelObjMem@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z
	DD	FLAT:?ReadPix@CelObj@@UAEEHHH@Z
	DD	FLAT:?ResPointer@CelObjMem@@UAEPAEXZ
CONST	ENDS
_DATA	SEGMENT
	ORG $+1
$SG119496 DB	'CelObjMem::CelObjMem ( 0x%x ): celPtr colorOffset != CEL'
	DB	'HEADERSIZE', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T124970 DD	019930520H
	DD	01H
	DD	FLAT:$T124972
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T124972 DD	0ffffffffH
	DD	FLAT:$L124968
xdata$x	ENDS
_TEXT	SEGMENT
$T124967 = -20
__$EHRec$ = -12
_handle$ = 8
_this$ = -24
_celPtr$ = -16
??0CelObjMem@@QAE@VMemID@@@Z PROC NEAR			; CelObjMem::CelObjMem

; 1170 : {

  028ae	55		 push	 ebp
  028af	8b ec		 mov	 ebp, esp
  028b1	6a ff		 push	 -1
  028b3	68 00 00 00 00	 push	 $L124971
  028b8	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  028be	50		 push	 eax
  028bf	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  028c6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  028c9	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  028cc	51		 push	 ecx
  028cd	8b cc		 mov	 ecx, esp
  028cf	89 65 ec	 mov	 DWORD PTR $T124967[ebp], esp
  028d2	8d 45 08	 lea	 eax, DWORD PTR _handle$[ebp]
  028d5	50		 push	 eax
  028d6	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  028db	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  028de	e8 00 00 00 00	 call	 ??0CelObj@@QAE@VMemID@@@Z ; CelObj::CelObj
  028e3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  028ea	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  028ed	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CelObjMem@@6B@ ; CelObjMem::`vftable'

; 1171 : 	// Check for valid handle
; 1172 : 	memMgr->CheckValid ( (SOL_Handle)handle );

  028f3	8d 4d 08	 lea	 ecx, DWORD PTR _handle$[ebp]
  028f6	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  028fb	50		 push	 eax
  028fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  02902	e8 00 00 00 00	 call	 ?CheckValid@MemoryMgr@@QAEXG@Z ; MemoryMgr::CheckValid

; 1173 : 
; 1174 : 	CelHeader* celPtr = (CelHeader*) *handle;

  02907	8d 4d 08	 lea	 ecx, DWORD PTR _handle$[ebp]
  0290a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0290f	89 45 f0	 mov	 DWORD PTR _celPtr$[ebp], eax

; 1175 : 
; 1176 : 	if (celPtr->colorOffset != CELHEADERSIZE)	{

  02912	8b 55 f0	 mov	 edx, DWORD PTR _celPtr$[ebp]
  02915	83 7a 1c 2e	 cmp	 DWORD PTR [edx+28], 46	; 0000002eH
  02919	74 21		 je	 SHORT $L119494

; 1177 : 		msgMgr->Fatal ( "CelObjMem::CelObjMem ( 0x%x ): celPtr colorOffset != CELHEADERSIZE", (SCIUWord)handle );

  0291b	8d 4d 08	 lea	 ecx, DWORD PTR _handle$[ebp]
  0291e	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02923	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  02928	50		 push	 eax
  02929	68 00 00 00 00	 push	 OFFSET FLAT:$SG119496
  0292e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  02933	50		 push	 eax
  02934	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  02939	83 c4 0c	 add	 esp, 12			; 0000000cH
$L119494:

; 1179 : 
; 1180 : 	width = celPtr->xDim;

  0293c	8b 4d f0	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  0293f	33 d2		 xor	 edx, edx
  02941	66 8b 11	 mov	 dx, WORD PTR [ecx]
  02944	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  02947	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 1181 : 	height = celPtr->yDim;

  0294a	8b 4d f0	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  0294d	33 d2		 xor	 edx, edx
  0294f	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  02953	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  02956	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 1182 : 	xorg = celPtr->xHot;

  02959	8b 4d f0	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  0295c	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  02960	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  02963	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 1183 : 	yorg = celPtr->yHot;

  02966	8b 4d f0	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  02969	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  0296d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  02970	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 1184 : 	skip = celPtr->skip;

  02973	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  02976	8b 55 f0	 mov	 edx, DWORD PTR _celPtr$[ebp]
  02979	8a 42 08	 mov	 al, BYTE PTR [edx+8]
  0297c	88 41 38	 mov	 BYTE PTR [ecx+56], al

; 1185 : 	resx = celPtr->xRes;

  0297f	8b 4d f0	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  02982	33 d2		 xor	 edx, edx
  02984	66 8b 51 24	 mov	 dx, WORD PTR [ecx+36]
  02988	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0298b	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 1186 : 	resy = celPtr->yRes;

  0298e	8b 4d f0	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  02991	33 d2		 xor	 edx, edx
  02993	66 8b 51 26	 mov	 dx, WORD PTR [ecx+38]
  02997	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0299a	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 1187 : 	paletteOffset = celPtr->paletteOffset;

  0299d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  029a0	8b 55 f0	 mov	 edx, DWORD PTR _celPtr$[ebp]
  029a3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  029a6	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1188 : 	celOffset = 0;

  029a9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  029ac	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 1189 : 	compressType = 0;

  029b3	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  029b6	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 1190 : 	mirrored = False;

  029bd	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  029c0	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 1191 : 	remapState = (celPtr->dataFlags & REMAP_PRESENT) ? RemapInCel : NoRemapInCel;

  029c7	8b 4d f0	 mov	 ecx, DWORD PTR _celPtr$[ebp]
  029ca	33 d2		 xor	 edx, edx
  029cc	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  029d0	83 e2 02	 and	 edx, 2
  029d3	f7 da		 neg	 edx
  029d5	1b d2		 sbb	 edx, edx
  029d7	f7 da		 neg	 edx
  029d9	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  029dc	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 1192 : }

  029df	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  029e6	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  029e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  029ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  029f3	8b e5		 mov	 esp, ebp
  029f5	5d		 pop	 ebp
  029f6	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L124968:
  00013	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0001b	c3		 ret	 0
$L124971:
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T124970
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CelObjMem@@QAE@VMemID@@@Z ENDP			; CelObjMem::CelObjMem
EXTRN	?NotValid@MemoryMgr@@QAEXG@Z:NEAR		; MemoryMgr::NotValid
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?CheckValid@MemoryMgr@@QAEXG@Z PROC NEAR		; MemoryMgr::CheckValid, COMDAT

; 468  : 	inline void MemoryMgr::CheckValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 469  : 		if (!IsValid(theID)) {

  00007	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid
  00014	85 c0		 test	 eax, eax
  00016	75 0d		 jne	 SHORT $L113758

; 470  : 			NotValid(theID);

  00018	66 8b 4d 08	 mov	 cx, WORD PTR _theID$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?NotValid@MemoryMgr@@QAEXG@Z ; MemoryMgr::NotValid
$L113758:

; 472  : 	}

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?CheckValid@MemoryMgr@@QAEXG@Z ENDP			; MemoryMgr::CheckValid
_TEXT	ENDS
PUBLIC	??0Bitmap@@QAE@VMemID@@@Z			; Bitmap::Bitmap
;	COMDAT ??0CelObj@@QAE@VMemID@@@Z
_TEXT	SEGMENT
_m$ = 8
_this$ = -8
??0CelObj@@QAE@VMemID@@@Z PROC NEAR			; CelObj::CelObj, COMDAT

; 203  : 	CelObj(MemID m) : bitmap(m)					  {mirrored = False; compressType = 0; hasSkip = True; horzFlip = False; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	51		 push	 ecx
  0000a	8b cc		 mov	 ecx, esp
  0000c	8d 45 08	 lea	 eax, DWORD PTR _m$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00015	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 04	 add	 ecx, 4
  0001b	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@VMemID@@@Z ; Bitmap::Bitmap
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CelObj@@6B@ ; CelObj::`vftable'
  00029	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	c7 41 3c 01 00
	00 00		 mov	 DWORD PTR [ecx+60], 1
  00047	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	c7 42 4c 00 00
	00 00		 mov	 DWORD PTR [edx+76], 0
  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??0CelObj@@QAE@VMemID@@@Z ENDP				; CelObj::CelObj
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0Bitmap@@QAE@VMemID@@@Z PROC NEAR			; Bitmap::Bitmap, COMDAT

; 128  : 	Bitmap(const MemID id)									{view = loop = cel = 0; type = tMem; memid = id;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	66 8b 55 08	 mov	 dx, WORD PTR _id$[ebp]
  00040	66 89 51 10	 mov	 WORD PTR [ecx+16], dx
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
??0Bitmap@@QAE@VMemID@@@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
PUBLIC	??0CelObjMem@@QAE@ABV0@@Z			; CelObjMem::CelObjMem
;	COMDAT xdata$x
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\celobj.hpp
xdata$x	SEGMENT
$T124984 DD	019930520H
	DD	01H
	DD	FLAT:$T124986
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T124986 DD	0ffffffffH
	DD	FLAT:$L124982
xdata$x	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT
$T124978 = -16
$T124979 = -20
__$EHRec$ = -12
_this$ = -24
?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ PROC NEAR	; CelObjMem::Duplicate, COMDAT

; 312  : 	CelObj*	Duplicate() const			{return New CelObjMem(*this);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L124985
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	6a 50		 push	 80			; 00000050H
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	83 c4 04	 add	 esp, 4
  00028	89 45 ec	 mov	 DWORD PTR $T124979[ebp], eax
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	83 7d ec 00	 cmp	 DWORD PTR $T124979[ebp], 0
  00036	74 11		 je	 SHORT $L124980
  00038	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d ec	 mov	 ecx, DWORD PTR $T124979[ebp]
  0003f	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@ABV0@@Z ; CelObjMem::CelObjMem
  00044	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00047	eb 07		 jmp	 SHORT $L124981
$L124980:
  00049	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L124981:
  00050	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  00053	89 4d f0	 mov	 DWORD PTR $T124978[ebp], ecx
  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	8b 45 f0	 mov	 eax, DWORD PTR $T124978[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L124982:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T124979[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L124985:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T124984
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ ENDP		; CelObjMem::Duplicate
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??0CelObjMem@@QAE@ABV0@@Z PROC NEAR			; CelObjMem::CelObjMem, COMDAT

; 311  : 	CelObjMem(const CelObjMem& src) : CelObj(src) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CelObj@@QAE@ABV0@@Z	; CelObj::CelObj
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CelObjMem@@6B@ ; CelObjMem::`vftable'
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0CelObjMem@@QAE@ABV0@@Z ENDP				; CelObjMem::CelObjMem
_TEXT	ENDS
PUBLIC	??1CelObjMem@@UAE@XZ				; CelObjMem::~CelObjMem
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCelObjMem@@UAEPAXI@Z PROC NEAR			; CelObjMem::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L115217
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L115217:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCelObjMem@@UAEPAXI@Z ENDP				; CelObjMem::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObjMem@@UAE@XZ PROC NEAR				; CelObjMem::~CelObjMem, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CelObjMem@@UAE@XZ ENDP				; CelObjMem::~CelObjMem
_TEXT	ENDS
PUBLIC	?Handle@Bitmap@@QBE?AVMemID@@XZ			; Bitmap::Handle
_DATA	SEGMENT
	ORG $+1
$SG119503 DB	'Invalid bitmap in CelObjMem (0x%x, 0x%x, %d, %d)', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T124995 = -8
_this$ = -12
_handle$ = -4
?ResPointer@CelObjMem@@UAEPAEXZ PROC NEAR		; CelObjMem::ResPointer

; 1198 : {

  029f9	55		 push	 ebp
  029fa	8b ec		 mov	 ebp, esp
  029fc	83 ec 0c	 sub	 esp, 12			; 0000000cH
  029ff	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1199 : 	MemID handle = bitmap.Handle();

  02a02	8d 45 f8	 lea	 eax, DWORD PTR $T124995[ebp]
  02a05	50		 push	 eax
  02a06	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02a09	83 c1 04	 add	 ecx, 4
  02a0c	e8 00 00 00 00	 call	 ?Handle@Bitmap@@QBE?AVMemID@@XZ ; Bitmap::Handle
  02a11	50		 push	 eax
  02a12	8d 4d fc	 lea	 ecx, DWORD PTR _handle$[ebp]
  02a15	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 1200 : 
; 1201 : 	if ( !handle.IsValid() ) 

  02a1a	8d 4d fc	 lea	 ecx, DWORD PTR _handle$[ebp]
  02a1d	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  02a22	85 c0		 test	 eax, eax
  02a24	75 69		 jne	 SHORT $L119502

; 1202 : 		msgMgr->Fatal ( "Invalid bitmap in CelObjMem (0x%x, 0x%x, %d, %d)", handle, memMgr->maxDescriptors, memMgr->desc[handle].memInfo.bits.freeDescriptor, memMgr->desc[handle].memInfo.bits.freeMemory );

  02a26	8d 4d fc	 lea	 ecx, DWORD PTR _handle$[ebp]
  02a29	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02a2e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  02a33	c1 e0 04	 shl	 eax, 4
  02a36	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  02a3c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  02a3f	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  02a42	c1 e0 14	 shl	 eax, 20			; 00000014H
  02a45	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  02a48	50		 push	 eax
  02a49	8d 4d fc	 lea	 ecx, DWORD PTR _handle$[ebp]
  02a4c	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02a51	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  02a56	c1 e0 04	 shl	 eax, 4
  02a59	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  02a5f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  02a62	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  02a65	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  02a68	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  02a6b	50		 push	 eax
  02a6c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  02a72	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02a75	52		 push	 edx
  02a76	66 8b 45 fc	 mov	 ax, WORD PTR _handle$[ebp]
  02a7a	50		 push	 eax
  02a7b	68 00 00 00 00	 push	 OFFSET FLAT:$SG119503
  02a80	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  02a86	51		 push	 ecx
  02a87	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  02a8c	83 c4 18	 add	 esp, 24			; 00000018H
$L119502:

; 1203 : 
; 1204 : 	return (uchar*) *handle;

  02a8f	8d 4d fc	 lea	 ecx, DWORD PTR _handle$[ebp]
  02a92	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*

; 1205 : }

  02a97	8b e5		 mov	 esp, ebp
  02a99	5d		 pop	 ebp
  02a9a	c3		 ret	 0
?ResPointer@CelObjMem@@UAEPAEXZ ENDP			; CelObjMem::ResPointer
_TEXT	ENDS
;	COMDAT ?Handle@Bitmap@@QBE?AVMemID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?Handle@Bitmap@@QBE?AVMemID@@XZ PROC NEAR		; Bitmap::Handle, COMDAT

; 142  : 	MemID	Handle() const			{return memid;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 10	 add	 eax, 16			; 00000010H
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00011	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?Handle@Bitmap@@QBE?AVMemID@@XZ ENDP			; Bitmap::Handle
_TEXT	ENDS
_TEXT	SEGMENT
_dest$ = 8
_si$ = 12
_drawRect$ = 16
_hflip$ = 20
_this$ = -4
?Draw@CelObjMem@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z PROC NEAR ; CelObjMem::Draw

; 1210 : {

  02a9b	55		 push	 ebp
  02a9c	8b ec		 mov	 ebp, esp
  02a9e	51		 push	 ecx
  02a9f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1211 : 	horzFlip = hflip;

  02aa2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02aa5	8b 4d 14	 mov	 ecx, DWORD PTR _hflip$[ebp]
  02aa8	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 1212 : 	CelObj::Draw(dest,si,drawRect);

  02aab	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  02aae	52		 push	 edx
  02aaf	8b 45 0c	 mov	 eax, DWORD PTR _si$[ebp]
  02ab2	50		 push	 eax
  02ab3	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  02ab6	51		 push	 ecx
  02ab7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02aba	e8 00 00 00 00	 call	 ?Draw@CelObj@@QAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@@Z ; CelObj::Draw

; 1213 : }

  02abf	8b e5		 mov	 esp, ebp
  02ac1	5d		 pop	 ebp
  02ac2	c2 10 00	 ret	 16			; 00000010H
?Draw@CelObjMem@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z ENDP ; CelObjMem::Draw
_TEXT	ENDS
PUBLIC	?Draw@CelObjMem@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@HVRatio@@3@Z ; CelObjMem::Draw
_TEXT	SEGMENT
_dest$ = 8
_toBuffer$ = 12
_p$ = 16
_hflip$ = 24
_ratioX$ = 28
_ratioY$ = 36
_this$ = -16
?Draw@CelObjMem@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@HVRatio@@3@Z PROC NEAR ; CelObjMem::Draw

; 1218 : {

  02ac5	55		 push	 ebp
  02ac6	8b ec		 mov	 ebp, esp
  02ac8	83 ec 10	 sub	 esp, 16			; 00000010H
  02acb	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1219 : 	horzFlip = hflip;

  02ace	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  02ad1	8b 4d 18	 mov	 ecx, DWORD PTR _hflip$[ebp]
  02ad4	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 1220 : 	CelObj::DrawTo(dest, toBuffer, p, ratioX, ratioY);

  02ad7	83 ec 08	 sub	 esp, 8
  02ada	8b cc		 mov	 ecx, esp
  02adc	8d 55 24	 lea	 edx, DWORD PTR _ratioY$[ebp]
  02adf	52		 push	 edx
  02ae0	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  02ae5	83 ec 08	 sub	 esp, 8
  02ae8	8b cc		 mov	 ecx, esp
  02aea	8d 45 1c	 lea	 eax, DWORD PTR _ratioX$[ebp]
  02aed	50		 push	 eax
  02aee	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  02af3	83 ec 08	 sub	 esp, 8
  02af6	8b cc		 mov	 ecx, esp
  02af8	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  02afb	52		 push	 edx
  02afc	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  02b01	8b 45 0c	 mov	 eax, DWORD PTR _toBuffer$[ebp]
  02b04	50		 push	 eax
  02b05	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  02b08	51		 push	 ecx
  02b09	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b0c	e8 00 00 00 00	 call	 ?DrawTo@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@VRatio@@3@Z ; CelObj::DrawTo

; 1221 : }

  02b11	8b e5		 mov	 esp, ebp
  02b13	5d		 pop	 ebp
  02b14	c2 24 00	 ret	 36			; 00000024H
?Draw@CelObjMem@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@HVRatio@@3@Z ENDP ; CelObjMem::Draw
$T125004 = -12
$T125006 = -24
_dest$ = 8
_toBuffer$ = 12
_p$ = 16
_hflip$ = 24
_this$ = -32
?Draw@CelObjMem@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z PROC NEAR ; CelObjMem::Draw

; 1225 : {

  02b17	55		 push	 ebp
  02b18	8b ec		 mov	 ebp, esp
  02b1a	83 ec 20	 sub	 esp, 32			; 00000020H
  02b1d	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1226 : 	horzFlip = hflip;

  02b20	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  02b23	8b 4d 18	 mov	 ecx, DWORD PTR _hflip$[ebp]
  02b26	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 1227 : 	CelObj::DrawTo(dest, toBuffer, p);

  02b29	6a 01		 push	 1
  02b2b	8d 4d f4	 lea	 ecx, DWORD PTR $T125004[ebp]
  02b2e	e8 00 00 00 00	 call	 ??0Ratio@@QAE@H@Z	; Ratio::Ratio
  02b33	83 ec 08	 sub	 esp, 8
  02b36	8b cc		 mov	 ecx, esp
  02b38	50		 push	 eax
  02b39	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  02b3e	6a 01		 push	 1
  02b40	8d 4d e8	 lea	 ecx, DWORD PTR $T125006[ebp]
  02b43	e8 00 00 00 00	 call	 ??0Ratio@@QAE@H@Z	; Ratio::Ratio
  02b48	83 ec 08	 sub	 esp, 8
  02b4b	8b cc		 mov	 ecx, esp
  02b4d	50		 push	 eax
  02b4e	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  02b53	83 ec 08	 sub	 esp, 8
  02b56	8b cc		 mov	 ecx, esp
  02b58	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  02b5b	52		 push	 edx
  02b5c	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  02b61	8b 45 0c	 mov	 eax, DWORD PTR _toBuffer$[ebp]
  02b64	50		 push	 eax
  02b65	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  02b68	51		 push	 ecx
  02b69	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  02b6c	e8 00 00 00 00	 call	 ?DrawTo@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@VRatio@@3@Z ; CelObj::DrawTo

; 1228 : }

  02b71	8b e5		 mov	 esp, ebp
  02b73	5d		 pop	 ebp
  02b74	c2 14 00	 ret	 20			; 00000014H
?Draw@CelObjMem@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ENDP ; CelObjMem::Draw
_TEXT	ENDS
PUBLIC	?CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NPAK@Z	; CelObj::CreateHBitmap
PUBLIC	?CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z ; CelObj::CreateHBitmap
PUBLIC	??0Ratio@@QAE@HH@Z				; Ratio::Ratio
EXTRN	__fltused:NEAR
_TEXT	SEGMENT
_shading$ = 8
_pSkipColor$ = 16
_this$ = -20
_scaleX$ = -16
_scaleY$ = -8
?CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NPAK@Z PROC NEAR ; CelObj::CreateHBitmap

; 1232 : {

  02b77	55		 push	 ebp
  02b78	8b ec		 mov	 ebp, esp
  02b7a	83 ec 14	 sub	 esp, 20			; 00000014H
  02b7d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1233 : 	Ratio scaleX ( 1, 1 ), scaleY ( 1, 1 );

  02b80	6a 01		 push	 1
  02b82	6a 01		 push	 1
  02b84	8d 4d f0	 lea	 ecx, DWORD PTR _scaleX$[ebp]
  02b87	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  02b8c	6a 01		 push	 1
  02b8e	6a 01		 push	 1
  02b90	8d 4d f8	 lea	 ecx, DWORD PTR _scaleY$[ebp]
  02b93	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio

; 1234 : 	return CreateHBitmap ( shading, scaleX, scaleY, pSkipColor );

  02b98	8b 45 10	 mov	 eax, DWORD PTR _pSkipColor$[ebp]
  02b9b	50		 push	 eax
  02b9c	8d 4d f8	 lea	 ecx, DWORD PTR _scaleY$[ebp]
  02b9f	51		 push	 ecx
  02ba0	8d 55 f0	 lea	 edx, DWORD PTR _scaleX$[ebp]
  02ba3	52		 push	 edx
  02ba4	8b 45 0c	 mov	 eax, DWORD PTR _shading$[ebp+4]
  02ba7	50		 push	 eax
  02ba8	8b 4d 08	 mov	 ecx, DWORD PTR _shading$[ebp]
  02bab	51		 push	 ecx
  02bac	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02baf	e8 00 00 00 00	 call	 ?CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z ; CelObj::CreateHBitmap

; 1235 : }

  02bb4	8b e5		 mov	 esp, ebp
  02bb6	5d		 pop	 ebp
  02bb7	c2 0c 00	 ret	 12			; 0000000cH
?CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NPAK@Z ENDP	; CelObj::CreateHBitmap
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT
_num$ = 8
_denom$ = 12
_this$ = -4
??0Ratio@@QAE@HH@Z PROC NEAR				; Ratio::Ratio, COMDAT

; 9    : 	Ratio(int num, int denom)	:	numer(num), denom(denom) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _num$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _denom$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0Ratio@@QAE@HH@Z ENDP					; Ratio::Ratio
_TEXT	ENDS
PUBLIC	__real@8@4006ff00000000000000
PUBLIC	??ASOLPalette@@QAEAAVRgb24F@@H@Z		; SOLPalette::operator[]
PUBLIC	??0SOL_Rect@@QAE@HHHH@Z				; SOL_Rect::SOL_Rect
PUBLIC	?Xlen@SOL_Rect@@QBEHXZ				; SOL_Rect::Xlen
PUBLIC	?Ylen@SOL_Rect@@QBEHXZ				; SOL_Rect::Ylen
PUBLIC	?Scale@SOL_Rect@@QAEXHHHH@Z			; SOL_Rect::Scale
EXTRN	__ftol:NEAR
EXTRN	__imp__exit:NEAR
EXTRN	??0BufferWin@@QAE@HHPAE@Z:NEAR			; BufferWin::BufferWin
EXTRN	??0SOLPalette@@QAE@XZ:NEAR			; SOLPalette::SOLPalette
EXTRN	?hMyDC@@3PAUHDC__@@A:DWORD			; hMyDC
EXTRN	??4SOLPalette@@QAEAAV0@ABVHunkPalette@@@Z:NEAR	; SOLPalette::operator=
EXTRN	??4SOLPalette@@QAEAAV0@ABV0@@Z:NEAR		; SOLPalette::operator=
EXTRN	__imp__GetFocus@0:NEAR
EXTRN	__imp__MessageBoxA@16:NEAR
EXTRN	__imp__CreateDIBSection@24:NEAR
_BSS	SEGMENT
_?thePal@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4VSOLPalette@@A DB 0400H DUP (?)
_?$S316@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4EA DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
	ORG $+3
$SG119589 DB	'GDI Resources Exhausted', 00H
$SG119590 DB	'Windows has run out of GDI bitmap resources.  The Realm '
	DB	'Online will be forced to close now.  Please close any other r'
	DB	'unning programs to free up GDI resources and try again.', 00H
_DATA	ENDS
;	COMDAT __real@8@4006ff00000000000000
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celobj.cpp
CONST	SEGMENT
__real@8@4006ff00000000000000 DQ 0406fe00000000000r ; 255
CONST	ENDS
_TEXT	SEGMENT
$T125027 = -1160
_shading$ = 8
_scaleX$ = 16
_scaleY$ = 20
_pSkipColor$ = 24
_this$ = -1164
_hp$119557 = -1108
_palMgr$119559 = -1112
_destRect$ = -24
_bi$ = -1088
_skipPal$ = -1096
_c$ = -8
_clr$119574 = -1116
_pBitmapBits$ = -4
_hBitmap$ = -1092
_ptr$119579 = -1120
_mod$119581 = -1124
_buffer$119583 = -1140
?CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z PROC NEAR ; CelObj::CreateHBitmap

; 1239 : {

  02bba	55		 push	 ebp
  02bbb	8b ec		 mov	 ebp, esp
  02bbd	81 ec ec 04 00
	00		 sub	 esp, 1260		; 000004ecH
  02bc3	53		 push	 ebx
  02bc4	56		 push	 esi
  02bc5	89 8d 74 fb ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1240 : 	static SOLPalette thePal;

  02bcb	33 c0		 xor	 eax, eax
  02bcd	a0 00 00 00 00	 mov	 al, BYTE PTR _?$S316@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4EA
  02bd2	83 e0 01	 and	 eax, 1
  02bd5	85 c0		 test	 eax, eax
  02bd7	75 26		 jne	 SHORT $L119554
  02bd9	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _?$S316@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4EA
  02bdf	80 c9 01	 or	 cl, 1
  02be2	88 0d 00 00 00
	00		 mov	 BYTE PTR _?$S316@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4EA, cl
  02be8	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_?thePal@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4VSOLPalette@@A
  02bed	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@XZ	; SOLPalette::SOLPalette
  02bf2	68 00 00 00 00	 push	 OFFSET FLAT:_$E317
  02bf7	e8 00 00 00 00	 call	 _atexit
  02bfc	83 c4 04	 add	 esp, 4
$L119554:

; 1241 : 
; 1242 : 	if ( paletteOffset ) {

  02bff	8b 95 74 fb ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  02c05	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  02c09	74 44		 je	 SHORT $L119556

; 1243 : 		HunkPalette hp;

  02c0b	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR _hp$119557[ebp]
  02c11	e8 00 00 00 00	 call	 ??0HunkPalette@@QAE@XZ	; HunkPalette::HunkPalette

; 1244 : 		hp.Init(ResPointer() + paletteOffset);

  02c16	8b 85 74 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02c1c	8b 10		 mov	 edx, DWORD PTR [eax]
  02c1e	8b 8d 74 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02c24	ff 52 14	 call	 DWORD PTR [edx+20]
  02c27	8b 8d 74 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  02c2d	03 41 1c	 add	 eax, DWORD PTR [ecx+28]
  02c30	50		 push	 eax
  02c31	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR _hp$119557[ebp]
  02c37	e8 00 00 00 00	 call	 ?Init@HunkPalette@@QAEXPAX@Z ; HunkPalette::Init

; 1245 : 		thePal = hp;

  02c3c	8d 95 ac fb ff
	ff		 lea	 edx, DWORD PTR _hp$119557[ebp]
  02c42	52		 push	 edx
  02c43	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_?thePal@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4VSOLPalette@@A
  02c48	e8 00 00 00 00	 call	 ??4SOLPalette@@QAEAAV0@ABVHunkPalette@@@Z ; SOLPalette::operator=

; 1246 : 	} else {

  02c4d	eb 32		 jmp	 SHORT $L119558
$L119556:

; 1247 : 		// get the palette manager
; 1248 : 		PaletteMgr *palMgr = &graphMgr->GPalette();

  02c4f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02c54	8b 10		 mov	 edx, DWORD PTR [eax]
  02c56	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02c5c	ff 52 1c	 call	 DWORD PTR [edx+28]
  02c5f	89 85 a8 fb ff
	ff		 mov	 DWORD PTR _palMgr$119559[ebp], eax

; 1249 : 		thePal = palMgr->Current();

  02c65	8b 85 a8 fb ff
	ff		 mov	 eax, DWORD PTR _palMgr$119559[ebp]
  02c6b	8b 10		 mov	 edx, DWORD PTR [eax]
  02c6d	8b 8d a8 fb ff
	ff		 mov	 ecx, DWORD PTR _palMgr$119559[ebp]
  02c73	ff 52 0c	 call	 DWORD PTR [edx+12]
  02c76	50		 push	 eax
  02c77	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_?thePal@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4VSOLPalette@@A
  02c7c	e8 00 00 00 00	 call	 ??4SOLPalette@@QAEAAV0@ABV0@@Z ; SOLPalette::operator=
$L119558:

; 1251 : 
; 1252 : 	// set up the destination rectangle
; 1253 : 	// -1 so that the width and height of the RECTANGLE equals the width & height.
; 1254 : 	SOL_Rect destRect ( 0, 0, (width - 1), (height - 1) );

  02c81	8b 85 74 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02c87	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  02c8a	83 e9 01	 sub	 ecx, 1
  02c8d	51		 push	 ecx
  02c8e	8b 95 74 fb ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  02c94	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  02c97	83 e8 01	 sub	 eax, 1
  02c9a	50		 push	 eax
  02c9b	6a 00		 push	 0
  02c9d	6a 00		 push	 0
  02c9f	8d 4d e8	 lea	 ecx, DWORD PTR _destRect$[ebp]
  02ca2	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 1255 : 	destRect.Scale ( scaleX.numer, scaleX.denom, scaleY.numer, scaleY.denom );

  02ca7	8b 4d 14	 mov	 ecx, DWORD PTR _scaleY$[ebp]
  02caa	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  02cad	52		 push	 edx
  02cae	8b 45 14	 mov	 eax, DWORD PTR _scaleY$[ebp]
  02cb1	8b 08		 mov	 ecx, DWORD PTR [eax]
  02cb3	51		 push	 ecx
  02cb4	8b 55 10	 mov	 edx, DWORD PTR _scaleX$[ebp]
  02cb7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  02cba	50		 push	 eax
  02cbb	8b 4d 10	 mov	 ecx, DWORD PTR _scaleX$[ebp]
  02cbe	8b 11		 mov	 edx, DWORD PTR [ecx]
  02cc0	52		 push	 edx
  02cc1	8d 4d e8	 lea	 ecx, DWORD PTR _destRect$[ebp]
  02cc4	e8 00 00 00 00	 call	 ?Scale@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Scale

; 1256 : 	
; 1257 : 	// create a BITMAPINFOHEADER for this image...
; 1258 : 	BMI bi;
; 1259 : 	bi.bmih.biSize = sizeof ( BITMAPINFOHEADER );

  02cc9	c7 85 c0 fb ff
	ff 28 00 00 00	 mov	 DWORD PTR _bi$[ebp], 40	; 00000028H

; 1260 : 	bi.bmih.biWidth = destRect.Xlen();

  02cd3	8d 4d e8	 lea	 ecx, DWORD PTR _destRect$[ebp]
  02cd6	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  02cdb	89 85 c4 fb ff
	ff		 mov	 DWORD PTR _bi$[ebp+4], eax

; 1261 : 	bi.bmih.biHeight = destRect.Ylen();

  02ce1	8d 4d e8	 lea	 ecx, DWORD PTR _destRect$[ebp]
  02ce4	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  02ce9	89 85 c8 fb ff
	ff		 mov	 DWORD PTR _bi$[ebp+8], eax

; 1262 : 	bi.bmih.biPlanes = 1;

  02cef	66 c7 85 cc fb
	ff ff 01 00	 mov	 WORD PTR _bi$[ebp+12], 1

; 1263 : 	bi.bmih.biBitCount = 8;

  02cf8	66 c7 85 ce fb
	ff ff 08 00	 mov	 WORD PTR _bi$[ebp+14], 8

; 1264 : 	bi.bmih.biCompression = BI_RGB;

  02d01	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _bi$[ebp+16], 0

; 1265 : 	bi.bmih.biSizeImage = 0;

  02d0b	c7 85 d4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _bi$[ebp+20], 0

; 1266 : 	bi.bmih.biXPelsPerMeter =	0;

  02d15	c7 85 d8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _bi$[ebp+24], 0

; 1267 : 	bi.bmih.biYPelsPerMeter =	0;

  02d1f	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _bi$[ebp+28], 0

; 1268 : 	bi.bmih.biClrUsed = 256;

  02d29	c7 85 e0 fb ff
	ff 00 01 00 00	 mov	 DWORD PTR _bi$[ebp+32], 256 ; 00000100H

; 1269 : 	bi.bmih.biClrImportant = 256;

  02d33	c7 85 e4 fb ff
	ff 00 01 00 00	 mov	 DWORD PTR _bi$[ebp+36], 256 ; 00000100H

; 1270 : 	
; 1271 : 	// create the shaded palette for the bitmap...
; 1272 : 	Rgb24F skipPal = thePal[skip];

  02d3d	8b 85 74 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  02d43	33 c9		 xor	 ecx, ecx
  02d45	8a 48 38	 mov	 cl, BYTE PTR [eax+56]
  02d48	51		 push	 ecx
  02d49	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_?thePal@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4VSOLPalette@@A
  02d4e	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  02d53	8b 10		 mov	 edx, DWORD PTR [eax]
  02d55	89 95 b8 fb ff
	ff		 mov	 DWORD PTR _skipPal$[ebp], edx

; 1273 : 	*pSkipColor = RGB ( min ( 255, skipPal.red * shading ), min ( 255, skipPal.green * shading ), min ( 255, skipPal.blue * shading ) );

  02d5b	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR _skipPal$[ebp]
  02d61	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02d66	89 85 70 fb ff
	ff		 mov	 DWORD PTR -1168+[ebp], eax
  02d6c	db 85 70 fb ff
	ff		 fild	 DWORD PTR -1168+[ebp]
  02d72	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02d75	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@8@4006ff00000000000000
  02d7b	df e0		 fnstsw	 ax
  02d7d	f6 c4 41	 test	 ah, 65			; 00000041H
  02d80	75 16		 jne	 SHORT $L125012
  02d82	c7 85 68 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR -1176+[ebp], 0
  02d8c	c7 85 6c fb ff
	ff 00 e0 6f 40	 mov	 DWORD PTR -1176+[ebp+4], 1081073664 ; 406fe000H
  02d96	eb 21		 jmp	 SHORT $L125013
$L125012:
  02d98	8b 8d b8 fb ff
	ff		 mov	 ecx, DWORD PTR _skipPal$[ebp]
  02d9e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  02da4	89 8d 64 fb ff
	ff		 mov	 DWORD PTR -1180+[ebp], ecx
  02daa	db 85 64 fb ff
	ff		 fild	 DWORD PTR -1180+[ebp]
  02db0	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02db3	dd 9d 68 fb ff
	ff		 fstp	 QWORD PTR -1176+[ebp]
$L125013:
  02db9	8b 95 b9 fb ff
	ff		 mov	 edx, DWORD PTR _skipPal$[ebp+1]
  02dbf	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  02dc5	89 95 60 fb ff
	ff		 mov	 DWORD PTR -1184+[ebp], edx
  02dcb	db 85 60 fb ff
	ff		 fild	 DWORD PTR -1184+[ebp]
  02dd1	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02dd4	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@8@4006ff00000000000000
  02dda	df e0		 fnstsw	 ax
  02ddc	f6 c4 41	 test	 ah, 65			; 00000041H
  02ddf	75 16		 jne	 SHORT $L125014
  02de1	c7 85 58 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR -1192+[ebp], 0
  02deb	c7 85 5c fb ff
	ff 00 e0 6f 40	 mov	 DWORD PTR -1192+[ebp+4], 1081073664 ; 406fe000H
  02df5	eb 20		 jmp	 SHORT $L125015
$L125014:
  02df7	8b 85 b9 fb ff
	ff		 mov	 eax, DWORD PTR _skipPal$[ebp+1]
  02dfd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02e02	89 85 54 fb ff
	ff		 mov	 DWORD PTR -1196+[ebp], eax
  02e08	db 85 54 fb ff
	ff		 fild	 DWORD PTR -1196+[ebp]
  02e0e	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02e11	dd 9d 58 fb ff
	ff		 fstp	 QWORD PTR -1192+[ebp]
$L125015:
  02e17	8b 8d ba fb ff
	ff		 mov	 ecx, DWORD PTR _skipPal$[ebp+2]
  02e1d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  02e23	89 8d 50 fb ff
	ff		 mov	 DWORD PTR -1200+[ebp], ecx
  02e29	db 85 50 fb ff
	ff		 fild	 DWORD PTR -1200+[ebp]
  02e2f	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02e32	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@8@4006ff00000000000000
  02e38	df e0		 fnstsw	 ax
  02e3a	f6 c4 41	 test	 ah, 65			; 00000041H
  02e3d	75 16		 jne	 SHORT $L125016
  02e3f	c7 85 48 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR -1208+[ebp], 0
  02e49	c7 85 4c fb ff
	ff 00 e0 6f 40	 mov	 DWORD PTR -1208+[ebp+4], 1081073664 ; 406fe000H
  02e53	eb 21		 jmp	 SHORT $L125017
$L125016:
  02e55	8b 95 ba fb ff
	ff		 mov	 edx, DWORD PTR _skipPal$[ebp+2]
  02e5b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  02e61	89 95 44 fb ff
	ff		 mov	 DWORD PTR -1212+[ebp], edx
  02e67	db 85 44 fb ff
	ff		 fild	 DWORD PTR -1212+[ebp]
  02e6d	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02e70	dd 9d 48 fb ff
	ff		 fstp	 QWORD PTR -1208+[ebp]
$L125017:
  02e76	dd 85 68 fb ff
	ff		 fld	 QWORD PTR -1176+[ebp]
  02e7c	e8 00 00 00 00	 call	 __ftol
  02e81	8a d8		 mov	 bl, al
  02e83	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  02e89	dd 85 58 fb ff
	ff		 fld	 QWORD PTR -1192+[ebp]
  02e8f	e8 00 00 00 00	 call	 __ftol
  02e94	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02e99	c1 e0 08	 shl	 eax, 8
  02e9c	0b d8		 or	 ebx, eax
  02e9e	dd 85 48 fb ff
	ff		 fld	 QWORD PTR -1208+[ebp]
  02ea4	e8 00 00 00 00	 call	 __ftol
  02ea9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02eae	c1 e0 10	 shl	 eax, 16			; 00000010H
  02eb1	0b d8		 or	 ebx, eax
  02eb3	8b 45 18	 mov	 eax, DWORD PTR _pSkipColor$[ebp]
  02eb6	89 18		 mov	 DWORD PTR [eax], ebx

; 1274 : 	
; 1275 : 	for ( int c=0; c<256; c++ ) {

  02eb8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0
  02ebf	eb 09		 jmp	 SHORT $L119571
$L119572:
  02ec1	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  02ec4	83 c1 01	 add	 ecx, 1
  02ec7	89 4d f8	 mov	 DWORD PTR _c$[ebp], ecx
$L119571:
  02eca	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _c$[ebp], 256	; 00000100H
  02ed1	0f 8d 80 01 00
	00		 jge	 $L119573

; 1276 : 		Rgb24F clr = thePal[c];

  02ed7	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  02eda	52		 push	 edx
  02edb	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_?thePal@?1??CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z@4VSOLPalette@@A
  02ee0	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  02ee5	8b 00		 mov	 eax, DWORD PTR [eax]
  02ee7	89 85 a4 fb ff
	ff		 mov	 DWORD PTR _clr$119574[ebp], eax

; 1277 : 		bi.rgbq[c].rgbRed = min ( 255, clr.red * shading );

  02eed	8b 8d a4 fb ff
	ff		 mov	 ecx, DWORD PTR _clr$119574[ebp]
  02ef3	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  02ef9	89 8d 40 fb ff
	ff		 mov	 DWORD PTR -1216+[ebp], ecx
  02eff	db 85 40 fb ff
	ff		 fild	 DWORD PTR -1216+[ebp]
  02f05	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02f08	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@8@4006ff00000000000000
  02f0e	df e0		 fnstsw	 ax
  02f10	f6 c4 41	 test	 ah, 65			; 00000041H
  02f13	75 16		 jne	 SHORT $L125018
  02f15	c7 85 38 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR -1224+[ebp], 0
  02f1f	c7 85 3c fb ff
	ff 00 e0 6f 40	 mov	 DWORD PTR -1224+[ebp+4], 1081073664 ; 406fe000H
  02f29	eb 21		 jmp	 SHORT $L125019
$L125018:
  02f2b	8b 95 a4 fb ff
	ff		 mov	 edx, DWORD PTR _clr$119574[ebp]
  02f31	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  02f37	89 95 34 fb ff
	ff		 mov	 DWORD PTR -1228+[ebp], edx
  02f3d	db 85 34 fb ff
	ff		 fild	 DWORD PTR -1228+[ebp]
  02f43	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02f46	dd 9d 38 fb ff
	ff		 fstp	 QWORD PTR -1224+[ebp]
$L125019:
  02f4c	dd 85 38 fb ff
	ff		 fld	 QWORD PTR -1224+[ebp]
  02f52	e8 00 00 00 00	 call	 __ftol
  02f57	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  02f5a	88 84 8d ea fb
	ff ff		 mov	 BYTE PTR _bi$[ebp+ecx*4+42], al

; 1278 : 		bi.rgbq[c].rgbGreen = min ( 255, clr.green * shading );

  02f61	8b 95 a5 fb ff
	ff		 mov	 edx, DWORD PTR _clr$119574[ebp+1]
  02f67	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  02f6d	89 95 30 fb ff
	ff		 mov	 DWORD PTR -1232+[ebp], edx
  02f73	db 85 30 fb ff
	ff		 fild	 DWORD PTR -1232+[ebp]
  02f79	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02f7c	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@8@4006ff00000000000000
  02f82	df e0		 fnstsw	 ax
  02f84	f6 c4 41	 test	 ah, 65			; 00000041H
  02f87	75 16		 jne	 SHORT $L125020
  02f89	c7 85 28 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR -1240+[ebp], 0
  02f93	c7 85 2c fb ff
	ff 00 e0 6f 40	 mov	 DWORD PTR -1240+[ebp+4], 1081073664 ; 406fe000H
  02f9d	eb 20		 jmp	 SHORT $L125021
$L125020:
  02f9f	8b 85 a5 fb ff
	ff		 mov	 eax, DWORD PTR _clr$119574[ebp+1]
  02fa5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02faa	89 85 24 fb ff
	ff		 mov	 DWORD PTR -1244+[ebp], eax
  02fb0	db 85 24 fb ff
	ff		 fild	 DWORD PTR -1244+[ebp]
  02fb6	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02fb9	dd 9d 28 fb ff
	ff		 fstp	 QWORD PTR -1240+[ebp]
$L125021:
  02fbf	dd 85 28 fb ff
	ff		 fld	 QWORD PTR -1240+[ebp]
  02fc5	e8 00 00 00 00	 call	 __ftol
  02fca	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  02fcd	88 84 8d e9 fb
	ff ff		 mov	 BYTE PTR _bi$[ebp+ecx*4+41], al

; 1279 : 		bi.rgbq[c].rgbBlue = min ( 255, clr.blue * shading );

  02fd4	8b 95 a6 fb ff
	ff		 mov	 edx, DWORD PTR _clr$119574[ebp+2]
  02fda	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  02fe0	89 95 20 fb ff
	ff		 mov	 DWORD PTR -1248+[ebp], edx
  02fe6	db 85 20 fb ff
	ff		 fild	 DWORD PTR -1248+[ebp]
  02fec	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  02fef	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@8@4006ff00000000000000
  02ff5	df e0		 fnstsw	 ax
  02ff7	f6 c4 41	 test	 ah, 65			; 00000041H
  02ffa	75 16		 jne	 SHORT $L125022
  02ffc	c7 85 18 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR -1256+[ebp], 0
  03006	c7 85 1c fb ff
	ff 00 e0 6f 40	 mov	 DWORD PTR -1256+[ebp+4], 1081073664 ; 406fe000H
  03010	eb 20		 jmp	 SHORT $L125023
$L125022:
  03012	8b 85 a6 fb ff
	ff		 mov	 eax, DWORD PTR _clr$119574[ebp+2]
  03018	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0301d	89 85 14 fb ff
	ff		 mov	 DWORD PTR -1260+[ebp], eax
  03023	db 85 14 fb ff
	ff		 fild	 DWORD PTR -1260+[ebp]
  03029	dc 4d 08	 fmul	 QWORD PTR _shading$[ebp]
  0302c	dd 9d 18 fb ff
	ff		 fstp	 QWORD PTR -1256+[ebp]
$L125023:
  03032	dd 85 18 fb ff
	ff		 fld	 QWORD PTR -1256+[ebp]
  03038	e8 00 00 00 00	 call	 __ftol
  0303d	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  03040	88 84 8d e8 fb
	ff ff		 mov	 BYTE PTR _bi$[ebp+ecx*4+40], al

; 1280 : 		bi.rgbq[c].rgbReserved = 0;

  03047	8b 55 f8	 mov	 edx, DWORD PTR _c$[ebp]
  0304a	c6 84 95 eb fb
	ff ff 00	 mov	 BYTE PTR _bi$[ebp+edx*4+43], 0

; 1281 : 	}

  03052	e9 6a fe ff ff	 jmp	 $L119572
$L119573:

; 1282 : 	
; 1283 : 	// create the DIB...
; 1284 : 	void *pBitmapBits = NULL;

  03057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBitmapBits$[ebp], 0

; 1285 : 	HBITMAP hBitmap = CreateDIBSection ( hMyDC, (BITMAPINFO *)&bi, DIB_RGB_COLORS, &pBitmapBits, NULL, 0 );

  0305e	6a 00		 push	 0
  03060	6a 00		 push	 0
  03062	8d 45 fc	 lea	 eax, DWORD PTR _pBitmapBits$[ebp]
  03065	50		 push	 eax
  03066	6a 00		 push	 0
  03068	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _bi$[ebp]
  0306e	51		 push	 ecx
  0306f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hMyDC@@3PAUHDC__@@A ; hMyDC
  03075	52		 push	 edx
  03076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDIBSection@24
  0307c	89 85 bc fb ff
	ff		 mov	 DWORD PTR _hBitmap$[ebp], eax

; 1286 : 	
; 1287 : 	if ( hBitmap && pBitmapBits ) {

  03082	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _hBitmap$[ebp], 0
  03089	0f 84 f6 00 00
	00		 je	 $L119578
  0308f	83 7d fc 00	 cmp	 DWORD PTR _pBitmapBits$[ebp], 0
  03093	0f 84 ec 00 00
	00		 je	 $L119578

; 1288 : 		// alias the bitmap bits
; 1289 : 		uchar *ptr = (uchar *)pBitmapBits;

  03099	8b 45 fc	 mov	 eax, DWORD PTR _pBitmapBits$[ebp]
  0309c	89 85 a0 fb ff
	ff		 mov	 DWORD PTR _ptr$119579[ebp], eax

; 1290 : 
; 1291 : 		// calculate the leftover bytes per line, DIBs are multiples of 4 pixels wide
; 1292 : 		int mod = destRect.Xlen() % 4;

  030a2	8d 4d e8	 lea	 ecx, DWORD PTR _destRect$[ebp]
  030a5	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  030aa	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  030af	79 05		 jns	 SHORT $L125031
  030b1	48		 dec	 eax
  030b2	83 c8 fc	 or	 eax, -4			; fffffffcH
  030b5	40		 inc	 eax
$L125031:
  030b6	89 85 9c fb ff
	ff		 mov	 DWORD PTR _mod$119581[ebp], eax

; 1293 : 		
; 1294 : 		if ( mod ) {

  030bc	83 bd 9c fb ff
	ff 00		 cmp	 DWORD PTR _mod$119581[ebp], 0
  030c3	74 11		 je	 SHORT $L119582

; 1295 : 			mod = 4 - mod;

  030c5	b9 04 00 00 00	 mov	 ecx, 4
  030ca	2b 8d 9c fb ff
	ff		 sub	 ecx, DWORD PTR _mod$119581[ebp]
  030d0	89 8d 9c fb ff
	ff		 mov	 DWORD PTR _mod$119581[ebp], ecx
$L119582:

; 1297 : 		
; 1298 : 		// fill the DIB with skip
; 1299 : 		memset ( ptr, skip, (destRect.Xlen() + mod) * destRect.Ylen() );

  030d6	8d 4d e8	 lea	 ecx, DWORD PTR _destRect$[ebp]
  030d9	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  030de	8b f0		 mov	 esi, eax
  030e0	03 b5 9c fb ff
	ff		 add	 esi, DWORD PTR _mod$119581[ebp]
  030e6	8d 4d e8	 lea	 ecx, DWORD PTR _destRect$[ebp]
  030e9	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  030ee	0f af f0	 imul	 esi, eax
  030f1	56		 push	 esi
  030f2	8b 95 74 fb ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  030f8	33 c0		 xor	 eax, eax
  030fa	8a 42 38	 mov	 al, BYTE PTR [edx+56]
  030fd	50		 push	 eax
  030fe	8b 8d a0 fb ff
	ff		 mov	 ecx, DWORD PTR _ptr$119579[ebp]
  03104	51		 push	 ecx
  03105	e8 00 00 00 00	 call	 _memset
  0310a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1300 : 
; 1301 : 		// setup a destination buffer...
; 1302 : 		BufferWin buffer ( destRect.Xlen() + mod, destRect.Ylen(), ptr );

  0310d	8b 95 a0 fb ff
	ff		 mov	 edx, DWORD PTR _ptr$119579[ebp]
  03113	52		 push	 edx
  03114	8d 4d e8	 lea	 ecx, DWORD PTR _destRect$[ebp]
  03117	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  0311c	50		 push	 eax
  0311d	8d 4d e8	 lea	 ecx, DWORD PTR _destRect$[ebp]
  03120	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  03125	03 85 9c fb ff
	ff		 add	 eax, DWORD PTR _mod$119581[ebp]
  0312b	50		 push	 eax
  0312c	8d 8d 8c fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$119583[ebp]
  03132	e8 00 00 00 00	 call	 ??0BufferWin@@QAE@HHPAE@Z ; BufferWin::BufferWin

; 1303 : 
; 1304 : 		DrawTo( buffer, destRect, SOL_Point( 0, 0 ), scaleX, scaleY );

  03137	83 ec 08	 sub	 esp, 8
  0313a	8b cc		 mov	 ecx, esp
  0313c	8b 45 14	 mov	 eax, DWORD PTR _scaleY$[ebp]
  0313f	50		 push	 eax
  03140	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  03145	83 ec 08	 sub	 esp, 8
  03148	8b cc		 mov	 ecx, esp
  0314a	8b 55 10	 mov	 edx, DWORD PTR _scaleX$[ebp]
  0314d	52		 push	 edx
  0314e	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  03153	6a 00		 push	 0
  03155	6a 00		 push	 0
  03157	8d 8d 78 fb ff
	ff		 lea	 ecx, DWORD PTR $T125027[ebp]
  0315d	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  03162	83 ec 08	 sub	 esp, 8
  03165	8b cc		 mov	 ecx, esp
  03167	50		 push	 eax
  03168	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  0316d	8d 45 e8	 lea	 eax, DWORD PTR _destRect$[ebp]
  03170	50		 push	 eax
  03171	8d 8d 8c fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$119583[ebp]
  03177	51		 push	 ecx
  03178	8b 8d 74 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0317e	e8 00 00 00 00	 call	 ?DrawTo@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@VRatio@@3@Z ; CelObj::DrawTo

; 1305 : 	} else {

  03183	eb 24		 jmp	 SHORT $L119588
$L119578:

; 1306 : 		::MessageBox ( GetFocus(), "Windows has run out of GDI bitmap resources.  The Realm Online will be forced to close now.  Please close any other running programs to free up GDI resources and try again.", "GDI Resources Exhausted", MB_TASKMODAL );

  03185	68 00 20 00 00	 push	 8192			; 00002000H
  0318a	68 00 00 00 00	 push	 OFFSET FLAT:$SG119589
  0318f	68 00 00 00 00	 push	 OFFSET FLAT:$SG119590
  03194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFocus@0
  0319a	50		 push	 eax
  0319b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 1307 : 		exit ( 0 );

  031a1	6a 00		 push	 0
  031a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
$L119588:

; 1309 : 
; 1310 : 	return hBitmap;

  031a9	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR _hBitmap$[ebp]
$L119549:

; 1311 : }

  031af	5e		 pop	 esi
  031b0	5b		 pop	 ebx
  031b1	8b e5		 mov	 esp, ebp
  031b3	5d		 pop	 ebp
  031b4	c2 14 00	 ret	 20			; 00000014H
?CreateHBitmap@CelObj@@QAEPAUHBITMAP__@@NAAVRatio@@0PAK@Z ENDP ; CelObj::CreateHBitmap
_TEXT	ENDS
;	COMDAT ??ASOLPalette@@QAEAAVRgb24F@@H@Z
_TEXT	SEGMENT
_i$ = 8
_this$ = -4
??ASOLPalette@@QAEAAVRgb24F@@H@Z PROC NEAR		; SOLPalette::operator[], COMDAT

; 42   : 	Rgb24F&	operator[](int i)					{return colors[i];}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??ASOLPalette@@QAEAAVRgb24F@@H@Z ENDP			; SOLPalette::operator[]
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
??0SOL_Rect@@QAE@HHHH@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 56   : 	A.x = xa;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 	A.y = ya;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00028	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 	B.x = xb;

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  00031	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 59   : 	B.y = yb;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  0003a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 60   : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
??0SOL_Rect@@QAE@HHHH@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Xlen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Xlen, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	return B.x - A.x + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	83 c0 01	 add	 eax, 1

; 155  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?Xlen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Xlen
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Ylen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Ylen, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 	return B.y - A.y + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	83 c0 01	 add	 eax, 1

; 163  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Ylen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Ylen
_TEXT	ENDS
;	COMDAT ?Scale@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT
_nx$ = 8
_dx$ = 12
_ny$ = 16
_dy$ = 20
_this$ = -4
?Scale@SOL_Rect@@QAEXHHHH@Z PROC NEAR			; SOL_Rect::Scale, COMDAT

; 339  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 340  : 	A.x = A.x * nx / dx;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	0f af 45 08	 imul	 eax, DWORD PTR _nx$[ebp]
  00010	99		 cdq
  00011	f7 7d 0c	 idiv	 DWORD PTR _dx$[ebp]
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 341  : 	B.x = B.x * nx / dx;

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	0f af 45 08	 imul	 eax, DWORD PTR _nx$[ebp]
  00023	99		 cdq
  00024	f7 7d 0c	 idiv	 DWORD PTR _dx$[ebp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 342  : 	A.y = A.y * ny / dy;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00033	0f af 45 10	 imul	 eax, DWORD PTR _ny$[ebp]
  00037	99		 cdq
  00038	f7 7d 14	 idiv	 DWORD PTR _dy$[ebp]
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 343  : 	B.y = B.y * ny / dy;

  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00047	0f af 45 10	 imul	 eax, DWORD PTR _ny$[ebp]
  0004b	99		 cdq
  0004c	f7 7d 14	 idiv	 DWORD PTR _dy$[ebp]
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 344  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 10 00	 ret	 16			; 00000010H
?Scale@SOL_Rect@@QAEXHHHH@Z ENDP			; SOL_Rect::Scale
_TEXT	ENDS
_TEXT	SEGMENT
_$E317	PROC NEAR
  031b7	55		 push	 ebp
  031b8	8b ec		 mov	 ebp, esp
  031ba	5d		 pop	 ebp
  031bb	c3		 ret	 0
_$E317	ENDP
_TEXT	ENDS
PUBLIC	??0CelObj@@QAE@E@Z				; CelObj::CelObj
PUBLIC	??0CelObjColor@@QAE@EHH@Z			; CelObjColor::CelObjColor
PUBLIC	?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ	; CelObjColor::Duplicate
PUBLIC	?Draw@CelObjColor@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z ; CelObjColor::Draw
PUBLIC	?Draw@CelObjColor@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjColor::Draw
PUBLIC	?ResPointer@CelObjColor@@MAEPAEXZ		; CelObjColor::ResPointer
PUBLIC	??_7CelObjColor@@6B@				; CelObjColor::`vftable'
PUBLIC	??_GCelObjColor@@UAEPAXI@Z			; CelObjColor::`scalar deleting destructor'
PUBLIC	??_ECelObjColor@@UAEPAXI@Z			; CelObjColor::`vector deleting destructor'
;	COMDAT ??_7CelObjColor@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celobj.cpp
CONST	SEGMENT
??_7CelObjColor@@6B@ DD FLAT:??_ECelObjColor@@UAEPAXI@Z	; CelObjColor::`vftable'
	DD	FLAT:?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
	DD	FLAT:?Draw@CelObjColor@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z
	DD	FLAT:?Draw@CelObjColor@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z
	DD	FLAT:?ReadPix@CelObj@@UAEEHHH@Z
	DD	FLAT:?ResPointer@CelObjColor@@MAEPAEXZ
CONST	ENDS
_TEXT	SEGMENT
_theColor$ = 8
_theWidth$ = 12
_theHeight$ = 16
_this$ = -4
??0CelObjColor@@QAE@EHH@Z PROC NEAR			; CelObjColor::CelObjColor

; 1314 : {

  031bc	55		 push	 ebp
  031bd	8b ec		 mov	 ebp, esp
  031bf	51		 push	 ecx
  031c0	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  031c3	8a 45 08	 mov	 al, BYTE PTR _theColor$[ebp]
  031c6	50		 push	 eax
  031c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  031ca	e8 00 00 00 00	 call	 ??0CelObj@@QAE@E@Z	; CelObj::CelObj
  031cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  031d2	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CelObjColor@@6B@ ; CelObjColor::`vftable'

; 1315 : 	width = theWidth;

  031d8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  031db	8b 45 0c	 mov	 eax, DWORD PTR _theWidth$[ebp]
  031de	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 1316 : 	height = theHeight;

  031e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  031e4	8b 55 10	 mov	 edx, DWORD PTR _theHeight$[ebp]
  031e7	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 1317 : 	xorg = 0;

  031ea	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  031ed	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 1318 : 	yorg = 0;

  031f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  031f7	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 1319 : 	resx = SCIRESX;

  031fe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  03201	c7 42 30 80 02
	00 00		 mov	 DWORD PTR [edx+48], 640	; 00000280H

; 1320 : 	resy = SCIRESY;

  03208	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0320b	c7 40 34 e0 01
	00 00		 mov	 DWORD PTR [eax+52], 480	; 000001e0H

; 1321 : 	paletteOffset = 0;

  03212	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03215	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 1322 : 	mirrored = False;

  0321c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0321f	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 1323 : 	remapState = NoRemapInCel;

  03226	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03229	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 1324 : }

  03230	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03233	8b e5		 mov	 esp, ebp
  03235	5d		 pop	 ebp
  03236	c2 0c 00	 ret	 12			; 0000000cH
??0CelObjColor@@QAE@EHH@Z ENDP				; CelObjColor::CelObjColor
_TEXT	ENDS
PUBLIC	??0Bitmap@@QAE@E@Z				; Bitmap::Bitmap
;	COMDAT ??0CelObj@@QAE@E@Z
_TEXT	SEGMENT
_c$ = 8
_this$ = -4
??0CelObj@@QAE@E@Z PROC NEAR				; CelObj::CelObj, COMDAT

; 204  : 	CelObj(uchar c) : bitmap(c)					  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 04	 add	 ecx, 4
  00011	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@E@Z	; Bitmap::Bitmap
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CelObj@@6B@ ; CelObj::`vftable'
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??0CelObj@@QAE@E@Z ENDP					; CelObj::CelObj
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT
_c$ = 8
_this$ = -4
??0Bitmap@@QAE@E@Z PROC NEAR				; Bitmap::Bitmap, COMDAT

; 129  : 	Bitmap(const uchar c)									{view = loop = cel = 0; type = tColor; color = c;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8a 55 08	 mov	 dl, BYTE PTR _c$[ebp]
  0003f	88 51 12	 mov	 BYTE PTR [ecx+18], dl
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
??0Bitmap@@QAE@E@Z ENDP					; Bitmap::Bitmap
_TEXT	ENDS
PUBLIC	??0CelObjColor@@QAE@ABV0@@Z			; CelObjColor::CelObjColor
;	COMDAT xdata$x
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\celobj.hpp
xdata$x	SEGMENT
$T125049 DD	019930520H
	DD	01H
	DD	FLAT:$T125051
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T125051 DD	0ffffffffH
	DD	FLAT:$L125047
xdata$x	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT
$T125043 = -16
$T125044 = -20
__$EHRec$ = -12
_this$ = -24
?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ PROC NEAR	; CelObjColor::Duplicate, COMDAT

; 349  : 	CelObj*	Duplicate() const			{return New CelObjColor(*this);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L125050
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	6a 50		 push	 80			; 00000050H
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	83 c4 04	 add	 esp, 4
  00028	89 45 ec	 mov	 DWORD PTR $T125044[ebp], eax
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	83 7d ec 00	 cmp	 DWORD PTR $T125044[ebp], 0
  00036	74 11		 je	 SHORT $L125045
  00038	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d ec	 mov	 ecx, DWORD PTR $T125044[ebp]
  0003f	e8 00 00 00 00	 call	 ??0CelObjColor@@QAE@ABV0@@Z ; CelObjColor::CelObjColor
  00044	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00047	eb 07		 jmp	 SHORT $L125046
$L125045:
  00049	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L125046:
  00050	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  00053	89 4d f0	 mov	 DWORD PTR $T125043[ebp], ecx
  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	8b 45 f0	 mov	 eax, DWORD PTR $T125043[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L125047:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T125044[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L125050:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T125049
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ ENDP		; CelObjColor::Duplicate
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CelObjColor@@QAE@ABV0@@Z PROC NEAR			; CelObjColor::CelObjColor, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CelObj@@QAE@ABV0@@Z	; CelObj::CelObj
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CelObjColor@@6B@ ; CelObjColor::`vftable'
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0CelObjColor@@QAE@ABV0@@Z ENDP			; CelObjColor::CelObjColor
_TEXT	ENDS
PUBLIC	??1CelObjColor@@UAE@XZ				; CelObjColor::~CelObjColor
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCelObjColor@@UAEPAXI@Z PROC NEAR			; CelObjColor::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObjColor@@UAE@XZ	; CelObjColor::~CelObjColor
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L115316
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L115316:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCelObjColor@@UAEPAXI@Z ENDP				; CelObjColor::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObjColor@@UAE@XZ PROC NEAR			; CelObjColor::~CelObjColor, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CelObjColor@@UAE@XZ ENDP				; CelObjColor::~CelObjColor
_TEXT	ENDS
PUBLIC	?Draw@CelObjColor@@QAEXABVBuffer@@ABVSOL_Rect@@@Z ; CelObjColor::Draw
_TEXT	SEGMENT
_dest$ = 8
_drawRect$ = 16
_hflip$ = 20
_this$ = -4
?Draw@CelObjColor@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z PROC NEAR ; CelObjColor::Draw

; 1328 : {

  03239	55		 push	 ebp
  0323a	8b ec		 mov	 ebp, esp
  0323c	51		 push	 ecx
  0323d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1329 : 	horzFlip = hflip;

  03240	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03243	8b 4d 14	 mov	 ecx, DWORD PTR _hflip$[ebp]
  03246	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 1330 : 	Draw(dest,drawRect);

  03249	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  0324c	52		 push	 edx
  0324d	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  03250	50		 push	 eax
  03251	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  03254	e8 00 00 00 00	 call	 ?Draw@CelObjColor@@QAEXABVBuffer@@ABVSOL_Rect@@@Z ; CelObjColor::Draw

; 1331 : }

  03259	8b e5		 mov	 esp, ebp
  0325b	5d		 pop	 ebp
  0325c	c2 10 00	 ret	 16			; 00000010H
?Draw@CelObjColor@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z ENDP ; CelObjColor::Draw
_TEXT	ENDS
PUBLIC	?XDim@Buffer@@QBEHXZ				; Buffer::XDim
PUBLIC	?Color@Bitmap@@QBEHXZ				; Bitmap::Color
_TEXT	SEGMENT
_dest$ = 8
_drawRect$ = 12
_this$ = -24
_drawPtr$ = -20
_vRun$ = -4
_hRun$ = -8
_bump$ = -16
_i$ = -12
?Draw@CelObjColor@@QAEXABVBuffer@@ABVSOL_Rect@@@Z PROC NEAR ; CelObjColor::Draw

; 1335 : {

  0325f	55		 push	 ebp
  03260	8b ec		 mov	 ebp, esp
  03262	83 ec 18	 sub	 esp, 24			; 00000018H
  03265	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1336 : 	// Start draw pointer
; 1337 : 	uchar* drawPtr = dest.Addr(drawRect.A.x,drawRect.A.y);

  03268	8b 45 0c	 mov	 eax, DWORD PTR _drawRect$[ebp]
  0326b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0326e	51		 push	 ecx
  0326f	8b 55 0c	 mov	 edx, DWORD PTR _drawRect$[ebp]
  03272	8b 02		 mov	 eax, DWORD PTR [edx]
  03274	50		 push	 eax
  03275	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  03278	8b 11		 mov	 edx, DWORD PTR [ecx]
  0327a	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  0327d	ff 12		 call	 DWORD PTR [edx]
  0327f	89 45 ec	 mov	 DWORD PTR _drawPtr$[ebp], eax

; 1338 : 	uint vRun = drawRect.Ylen();

  03282	8b 4d 0c	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  03285	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  0328a	89 45 fc	 mov	 DWORD PTR _vRun$[ebp], eax

; 1339 : 	uint hRun = drawRect.Xlen();

  0328d	8b 4d 0c	 mov	 ecx, DWORD PTR _drawRect$[ebp]
  03290	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  03295	89 45 f8	 mov	 DWORD PTR _hRun$[ebp], eax

; 1340 : 	uint bump = dest.XDim();

  03298	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  0329b	e8 00 00 00 00	 call	 ?XDim@Buffer@@QBEHXZ	; Buffer::XDim
  032a0	89 45 f0	 mov	 DWORD PTR _bump$[ebp], eax

; 1341 : 	for (UINT i = 0;i < vRun;++i) {

  032a3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  032aa	eb 09		 jmp	 SHORT $L119615
$L119616:
  032ac	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  032af	83 c0 01	 add	 eax, 1
  032b2	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L119615:
  032b5	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  032b8	3b 4d fc	 cmp	 ecx, DWORD PTR _vRun$[ebp]
  032bb	73 27		 jae	 SHORT $L119617

; 1342 : 		memset(drawPtr,bitmap.Color(),hRun);

  032bd	8b 55 f8	 mov	 edx, DWORD PTR _hRun$[ebp]
  032c0	52		 push	 edx
  032c1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  032c4	83 c1 04	 add	 ecx, 4
  032c7	e8 00 00 00 00	 call	 ?Color@Bitmap@@QBEHXZ	; Bitmap::Color
  032cc	50		 push	 eax
  032cd	8b 45 ec	 mov	 eax, DWORD PTR _drawPtr$[ebp]
  032d0	50		 push	 eax
  032d1	e8 00 00 00 00	 call	 _memset
  032d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1343 : 		drawPtr+= bump;

  032d9	8b 4d ec	 mov	 ecx, DWORD PTR _drawPtr$[ebp]
  032dc	03 4d f0	 add	 ecx, DWORD PTR _bump$[ebp]
  032df	89 4d ec	 mov	 DWORD PTR _drawPtr$[ebp], ecx

; 1344 : 	}

  032e2	eb c8		 jmp	 SHORT $L119616
$L119617:

; 1345 : }

  032e4	8b e5		 mov	 esp, ebp
  032e6	5d		 pop	 ebp
  032e7	c2 08 00	 ret	 8
?Draw@CelObjColor@@QAEXABVBuffer@@ABVSOL_Rect@@@Z ENDP	; CelObjColor::Draw
_TEXT	ENDS
;	COMDAT ?Color@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Color@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Color, COMDAT

; 141  : 	int	Color() const			{return color;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	8a 48 12	 mov	 cl, BYTE PTR [eax+18]
  0000f	8b c1		 mov	 eax, ecx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?Color@Bitmap@@QBEHXZ ENDP				; Bitmap::Color
_TEXT	ENDS
;	COMDAT ?XDim@Buffer@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?XDim@Buffer@@QBEHXZ PROC NEAR				; Buffer::XDim, COMDAT

; 12   : 	int		XDim() const							{return xDim;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?XDim@Buffer@@QBEHXZ ENDP				; Buffer::XDim
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+3
$SG119625 DB	'Unsupported method', 00H
	ORG $+1
$SG119626 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celo'
	DB	'bj.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4
?Draw@CelObjColor@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z PROC NEAR ; CelObjColor::Draw

; 1349 : {

  032ea	55		 push	 ebp
  032eb	8b ec		 mov	 ebp, esp
  032ed	51		 push	 ecx
  032ee	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1350 : 	msgMgr->Fatal(SrcLoc,"Unsupported method");

  032f1	68 00 00 00 00	 push	 OFFSET FLAT:$SG119625
  032f6	68 46 05 00 00	 push	 1350			; 00000546H
  032fb	68 00 00 00 00	 push	 OFFSET FLAT:$SG119626
  03300	6a 61		 push	 97			; 00000061H
  03302	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03307	50		 push	 eax
  03308	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  0330d	83 c4 14	 add	 esp, 20			; 00000014H

; 1351 : }

  03310	8b e5		 mov	 esp, ebp
  03312	5d		 pop	 ebp
  03313	c2 14 00	 ret	 20			; 00000014H
?Draw@CelObjColor@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ENDP ; CelObjColor::Draw
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+1
$SG119630 DB	'Unsupported method', 00H
	ORG $+1
$SG119631 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celo'
	DB	'bj.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4
?ResPointer@CelObjColor@@MAEPAEXZ PROC NEAR		; CelObjColor::ResPointer

; 1355 : {

  03316	55		 push	 ebp
  03317	8b ec		 mov	 ebp, esp
  03319	51		 push	 ecx
  0331a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1356 : 	msgMgr->Fatal(SrcLoc,"Unsupported method");

  0331d	68 00 00 00 00	 push	 OFFSET FLAT:$SG119630
  03322	68 4c 05 00 00	 push	 1356			; 0000054cH
  03327	68 00 00 00 00	 push	 OFFSET FLAT:$SG119631
  0332c	6a 61		 push	 97			; 00000061H
  0332e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03333	50		 push	 eax
  03334	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  03339	83 c4 14	 add	 esp, 20			; 00000014H

; 1357 : 	return NULL;

  0333c	33 c0		 xor	 eax, eax

; 1358 : }

  0333e	8b e5		 mov	 esp, ebp
  03340	5d		 pop	 ebp
  03341	c3		 ret	 0
?ResPointer@CelObjColor@@MAEPAEXZ ENDP			; CelObjColor::ResPointer
_TEXT	ENDS
PUBLIC	?Pic@Bitmap@@QBEHXZ				; Bitmap::Pic
PUBLIC	??0CelObj@@QAE@HH@Z				; CelObj::CelObj
PUBLIC	??4SOL_Point@@QAEAAV0@ABV0@@Z			; SOL_Point::operator=
PUBLIC	??0CelObjPic@@QAE@HH@Z				; CelObjPic::CelObjPic
PUBLIC	?Duplicate@CelObjPic@@UBEPAVCelObj@@XZ		; CelObjPic::Duplicate
PUBLIC	?Draw@CelObjPic@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z ; CelObjPic::Draw
PUBLIC	?Draw@CelObjPic@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjPic::Draw
PUBLIC	?ResPointer@CelObjPic@@MAEPAEXZ			; CelObjPic::ResPointer
PUBLIC	??4CelObjPic@@QAEAAV0@ABV0@@Z			; CelObjPic::operator=
PUBLIC	??_7CelObjPic@@6B@				; CelObjPic::`vftable'
PUBLIC	??_GCelObjPic@@UAEPAXI@Z			; CelObjPic::`scalar deleting destructor'
PUBLIC	??_ECelObjPic@@UAEPAXI@Z			; CelObjPic::`vector deleting destructor'
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
;	COMDAT ??_7CelObjPic@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celobj.cpp
CONST	SEGMENT
??_7CelObjPic@@6B@ DD FLAT:??_ECelObjPic@@UAEPAXI@Z	; CelObjPic::`vftable'
	DD	FLAT:?Duplicate@CelObjPic@@UBEPAVCelObj@@XZ
	DD	FLAT:?Draw@CelObjPic@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z
	DD	FLAT:?Draw@CelObjPic@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z
	DD	FLAT:?ReadPix@CelObj@@UAEEHHH@Z
	DD	FLAT:?ResPointer@CelObjPic@@MAEPAEXZ
CONST	ENDS
_DATA	SEGMENT
	ORG $+1
$SG119647 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celo'
	DB	'bj.cpp', 00H
	ORG $+1
$SG119669 DB	'Compression type not supported - P: %d  C: %d', 0aH, 00H
	ORG $+1
$SG119670 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Celo'
	DB	'bj.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T125071 DD	019930520H
	DD	01H
	DD	FLAT:$T125073
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T125073 DD	0ffffffffH
	DD	FLAT:$L125069
xdata$x	ENDS
_TEXT	SEGMENT
$T125066 = -32
$T125067 = -36
$T125068 = -44
__$EHRec$ = -12
_p$ = 8
_c$ = 12
_this$ = -48
_index$ = -24
_picID$ = -16
_picBuffer$ = -20
_celPtr$119649 = -28
??0CelObjPic@@QAE@HH@Z PROC NEAR			; CelObjPic::CelObjPic

; 1361 : {

  03342	55		 push	 ebp
  03343	8b ec		 mov	 ebp, esp
  03345	6a ff		 push	 -1
  03347	68 00 00 00 00	 push	 $L125072
  0334c	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  03352	50		 push	 eax
  03353	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0335a	83 ec 28	 sub	 esp, 40			; 00000028H
  0335d	56		 push	 esi
  0335e	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  03361	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  03364	50		 push	 eax
  03365	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  03368	51		 push	 ecx
  03369	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0336c	e8 00 00 00 00	 call	 ??0CelObj@@QAE@HH@Z	; CelObj::CelObj
  03371	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  03378	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0337b	83 c1 54	 add	 ecx, 84			; 00000054H
  0337e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  03383	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  03386	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CelObjPic@@6B@ ; CelObjPic::`vftable'

; 1362 : 	int index;
; 1363 : 	if (SearchCache(bitmap, &index))

  0338c	8d 45 e8	 lea	 eax, DWORD PTR _index$[ebp]
  0338f	50		 push	 eax
  03390	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  03393	83 c1 04	 add	 ecx, 4
  03396	83 ec 14	 sub	 esp, 20			; 00000014H
  03399	8b d4		 mov	 edx, esp
  0339b	89 65 e0	 mov	 DWORD PTR $T125066[ebp], esp
  0339e	51		 push	 ecx
  0339f	8b ca		 mov	 ecx, edx
  033a1	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@ABV0@@Z	; Bitmap::Bitmap
  033a6	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  033a9	e8 00 00 00 00	 call	 ?SearchCache@CelObj@@QBEHVBitmap@@PAH@Z ; CelObj::SearchCache
  033ae	85 c0		 test	 eax, eax
  033b0	74 1f		 je	 SHORT $L119639

; 1365 : 		*this = * (CelObjPic*) array[index].cel;

  033b2	8b 45 e8	 mov	 eax, DWORD PTR _index$[ebp]
  033b5	50		 push	 eax
  033b6	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?array@CelObj@@2UCelObjArray@1@A
  033bb	e8 00 00 00 00	 call	 ??ACelObjArray@CelObj@@QAEAAUCelObjArrayItem@01@H@Z ; CelObj::CelObjArray::operator[]
  033c0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  033c3	51		 push	 ecx
  033c4	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  033c7	e8 00 00 00 00	 call	 ??4CelObjPic@@QAEAAV0@ABV0@@Z ; CelObjPic::operator=

; 1366 : 		return;

  033cc	e9 a9 02 00 00	 jmp	 $L119636
$L119639:

; 1368 : 
; 1369 : 	MemID picID = resMgr->Get(MemResPic, bitmap.Pic());

  033d1	6a 00		 push	 0
  033d3	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  033d6	83 c1 04	 add	 ecx, 4
  033d9	e8 00 00 00 00	 call	 ?Pic@Bitmap@@QBEHXZ	; Bitmap::Pic
  033de	50		 push	 eax
  033df	6a 01		 push	 1
  033e1	8d 55 dc	 lea	 edx, DWORD PTR $T125067[ebp]
  033e4	52		 push	 edx
  033e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  033ea	8b 10		 mov	 edx, DWORD PTR [eax]
  033ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  033f2	ff 52 20	 call	 DWORD PTR [edx+32]
  033f5	50		 push	 eax
  033f6	8d 4d f0	 lea	 ecx, DWORD PTR _picID$[ebp]
  033f9	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 1370 : 	PicHeader * picBuffer = (PicHeader *) *picID;

  033fe	8d 4d f0	 lea	 ecx, DWORD PTR _picID$[ebp]
  03401	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  03406	89 45 ec	 mov	 DWORD PTR _picBuffer$[ebp], eax

; 1371 : 
; 1372 : 	if (picBuffer)

  03409	83 7d ec 00	 cmp	 DWORD PTR _picBuffer$[ebp], 0
  0340d	0f 84 67 02 00
	00		 je	 $L119645

; 1374 : 		if (picBuffer->celCount <= bitmap.Cel())

  03413	8b 45 ec	 mov	 eax, DWORD PTR _picBuffer$[ebp]
  03416	33 c9		 xor	 ecx, ecx
  03418	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  0341b	8b f1		 mov	 esi, ecx
  0341d	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  03420	83 c1 04	 add	 ecx, 4
  03423	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  03428	3b f0		 cmp	 esi, eax
  0342a	7f 22		 jg	 SHORT $L119646

; 1375 : 			msgMgr->Fatal(SrcLoc, Msg_CelTooLargeForPic);

  0342c	6a 3c		 push	 60			; 0000003cH
  0342e	68 5f 05 00 00	 push	 1375			; 0000055fH
  03433	68 00 00 00 00	 push	 OFFSET FLAT:$SG119647
  03438	6a 61		 push	 97			; 00000061H
  0343a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03440	52		 push	 edx
  03441	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  03446	83 c4 14	 add	 esp, 20			; 00000014H

; 1376 : 
; 1377 : 		else

  03449	e9 24 02 00 00	 jmp	 $L119668
$L119646:

; 1379 : 			paletteOffset = picBuffer->paletteOffset;

  0344e	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  03451	8b 4d ec	 mov	 ecx, DWORD PTR _picBuffer$[ebp]
  03454	8b 51 06	 mov	 edx, DWORD PTR [ecx+6]
  03457	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 1380 : 			celOffset = picBuffer->picHeaderSize + bitmap.Cel() * picBuffer->celHeaderSize;

  0345a	8b 45 ec	 mov	 eax, DWORD PTR _picBuffer$[ebp]
  0345d	33 c9		 xor	 ecx, ecx
  0345f	66 8b 08	 mov	 cx, WORD PTR [eax]
  03462	8b f1		 mov	 esi, ecx
  03464	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  03467	83 c1 04	 add	 ecx, 4
  0346a	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  0346f	8b 55 ec	 mov	 edx, DWORD PTR _picBuffer$[ebp]
  03472	33 c9		 xor	 ecx, ecx
  03474	66 8b 4a 04	 mov	 cx, WORD PTR [edx+4]
  03478	0f af c1	 imul	 eax, ecx
  0347b	03 f0		 add	 esi, eax
  0347d	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  03480	89 72 18	 mov	 DWORD PTR [edx+24], esi

; 1381 : 			CelHeaderPic* celPtr = (CelHeaderPic *) ((char *) picBuffer + celOffset);

  03483	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  03486	8b 4d ec	 mov	 ecx, DWORD PTR _picBuffer$[ebp]
  03489	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  0348c	89 4d e4	 mov	 DWORD PTR _celPtr$119649[ebp], ecx

; 1382 : 			width = celPtr->xDim;

  0348f	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119649[ebp]
  03492	33 c0		 xor	 eax, eax
  03494	66 8b 02	 mov	 ax, WORD PTR [edx]
  03497	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0349a	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 1383 : 			height = celPtr->yDim;

  0349d	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119649[ebp]
  034a0	33 c0		 xor	 eax, eax
  034a2	66 8b 42 02	 mov	 ax, WORD PTR [edx+2]
  034a6	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  034a9	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 1384 : 			xorg = celPtr->xHot;

  034ac	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119649[ebp]
  034af	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  034b3	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  034b6	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 1385 : 			yorg = celPtr->yHot;

  034b9	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119649[ebp]
  034bc	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  034c0	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  034c3	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 1386 : 			skip = celPtr->skip;

  034c6	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  034c9	8b 45 e4	 mov	 eax, DWORD PTR _celPtr$119649[ebp]
  034cc	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  034cf	88 4a 38	 mov	 BYTE PTR [edx+56], cl

; 1387 : 			pos = SOL_Point(celPtr->xpos, celPtr->ypos);

  034d2	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119649[ebp]
  034d5	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  034d9	50		 push	 eax
  034da	8b 4d e4	 mov	 ecx, DWORD PTR _celPtr$119649[ebp]
  034dd	0f bf 51 26	 movsx	 edx, WORD PTR [ecx+38]
  034e1	52		 push	 edx
  034e2	8d 4d d4	 lea	 ecx, DWORD PTR $T125068[ebp]
  034e5	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  034ea	50		 push	 eax
  034eb	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  034ee	83 c1 54	 add	 ecx, 84			; 00000054H
  034f1	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 1388 : 			priority = celPtr->priority;

  034f6	8b 45 e4	 mov	 eax, DWORD PTR _celPtr$119649[ebp]
  034f9	0f bf 48 24	 movsx	 ecx, WORD PTR [eax+36]
  034fd	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  03500	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 1389 : 			celCount = picBuffer->celCount;

  03503	8b 45 ec	 mov	 eax, DWORD PTR _picBuffer$[ebp]
  03506	33 c9		 xor	 ecx, ecx
  03508	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  0350b	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0350e	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 1390 : 			compressType = celPtr->compressType;

  03511	8b 45 e4	 mov	 eax, DWORD PTR _celPtr$119649[ebp]
  03514	33 c9		 xor	 ecx, ecx
  03516	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  03519	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0351c	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 1391 : 			remapState = NoRemapInCel;

  0351f	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  03522	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 1392 : 			if (picBuffer->resY == 0)

  03529	8b 4d ec	 mov	 ecx, DWORD PTR _picBuffer$[ebp]
  0352c	33 d2		 xor	 edx, edx
  0352e	66 8b 51 0c	 mov	 dx, WORD PTR [ecx+12]
  03532	85 d2		 test	 edx, edx
  03534	75 62		 jne	 SHORT $L119653

; 1395 : 				{

  03536	8b 45 ec	 mov	 eax, DWORD PTR _picBuffer$[ebp]
  03539	33 c9		 xor	 ecx, ecx
  0353b	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0353f	89 4d cc	 mov	 DWORD PTR -52+[ebp], ecx
  03542	83 7d cc 00	 cmp	 DWORD PTR -52+[ebp], 0
  03546	74 0e		 je	 SHORT $L119658
  03548	83 7d cc 01	 cmp	 DWORD PTR -52+[ebp], 1
  0354c	74 1e		 je	 SHORT $L119659
  0354e	83 7d cc 02	 cmp	 DWORD PTR -52+[ebp], 2
  03552	74 2e		 je	 SHORT $L119660
  03554	eb 40		 jmp	 SHORT $L119655
$L119658:

; 1396 : 					case 0:
; 1397 : 						resx = LOWRESX;

  03556	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  03559	c7 42 30 40 01
	00 00		 mov	 DWORD PTR [edx+48], 320	; 00000140H

; 1398 : 						resy = LOWRESY;

  03560	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  03563	c7 40 34 c8 00
	00 00		 mov	 DWORD PTR [eax+52], 200	; 000000c8H

; 1399 : 						break;

  0356a	eb 2a		 jmp	 SHORT $L119655
$L119659:

; 1400 : 
; 1401 : 					case 1:
; 1402 : 						resx = 640;

  0356c	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0356f	c7 41 30 80 02
	00 00		 mov	 DWORD PTR [ecx+48], 640	; 00000280H

; 1403 : 						resy = 480;

  03576	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  03579	c7 42 34 e0 01
	00 00		 mov	 DWORD PTR [edx+52], 480	; 000001e0H

; 1404 : 						break;

  03580	eb 14		 jmp	 SHORT $L119655
$L119660:

; 1405 : 
; 1406 : 					case 2:
; 1407 : 						resx = 640;

  03582	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  03585	c7 40 30 80 02
	00 00		 mov	 DWORD PTR [eax+48], 640	; 00000280H

; 1408 : 						resy = 400;

  0358c	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0358f	c7 41 34 90 01
	00 00		 mov	 DWORD PTR [ecx+52], 400	; 00000190H
$L119655:

; 1413 : 			else

  03596	eb 1e		 jmp	 SHORT $L119661
$L119653:

; 1415 : 				resx = picBuffer->resX;

  03598	8b 55 ec	 mov	 edx, DWORD PTR _picBuffer$[ebp]
  0359b	33 c0		 xor	 eax, eax
  0359d	66 8b 42 0a	 mov	 ax, WORD PTR [edx+10]
  035a1	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  035a4	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 1416 : 				resy = picBuffer->resY;

  035a7	8b 55 ec	 mov	 edx, DWORD PTR _picBuffer$[ebp]
  035aa	33 c0		 xor	 eax, eax
  035ac	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  035b0	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  035b3	89 41 34	 mov	 DWORD PTR [ecx+52], eax
$L119661:

; 1418 : 
; 1419 : 			if (celPtr->dataFlags & 0x80)

  035b6	8b 55 e4	 mov	 edx, DWORD PTR _celPtr$119649[ebp]
  035b9	33 c0		 xor	 eax, eax
  035bb	66 8b 42 0a	 mov	 ax, WORD PTR [edx+10]
  035bf	25 80 00 00 00	 and	 eax, 128		; 00000080H
  035c4	85 c0		 test	 eax, eax
  035c6	74 3a		 je	 SHORT $L119662

; 1421 : 				hasSkip = celPtr->dataFlags & SKIP_PRESENT;

  035c8	8b 4d e4	 mov	 ecx, DWORD PTR _celPtr$119649[ebp]
  035cb	33 d2		 xor	 edx, edx
  035cd	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  035d1	83 e2 01	 and	 edx, 1
  035d4	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  035d7	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 1422 : 				if (celPtr->dataFlags & REMAP_PRESENT)

  035da	8b 4d e4	 mov	 ecx, DWORD PTR _celPtr$119649[ebp]
  035dd	33 d2		 xor	 edx, edx
  035df	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  035e3	83 e2 02	 and	 edx, 2
  035e6	85 d2		 test	 edx, edx
  035e8	74 0c		 je	 SHORT $L119663

; 1423 : 					remapState = RemapInCel;

  035ea	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  035ed	c7 40 44 01 00
	00 00		 mov	 DWORD PTR [eax+68], 1

; 1424 : 				else

  035f4	eb 0a		 jmp	 SHORT $L119664
$L119663:

; 1425 : 					remapState = NoRemapInCel;

  035f6	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  035f9	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
$L119664:

; 1427 : 			else

  03600	eb 70		 jmp	 SHORT $L119668
$L119662:

; 1429 : 				if (!compressType)

  03602	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  03605	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  03609	75 10		 jne	 SHORT $L119666

; 1430 : 					hasSkip = AnalyzeUncompForSkip();

  0360b	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0360e	e8 00 00 00 00	 call	 ?AnalyzeUncompForSkip@CelObjPic@@IAEHXZ ; CelObjPic::AnalyzeUncompForSkip
  03613	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  03616	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 1431 : 				else

  03619	eb 0a		 jmp	 SHORT $L119667
$L119666:

; 1432 : 					hasSkip = True;

  0361b	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0361e	c7 42 3c 01 00
	00 00		 mov	 DWORD PTR [edx+60], 1
$L119667:

; 1433 : 
; 1434 : 				if (compressType  &&  compressType != 0x8A)

  03625	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  03628	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  0362c	74 44		 je	 SHORT $L119668
  0362e	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  03631	81 79 40 8a 00
	00 00		 cmp	 DWORD PTR [ecx+64], 138	; 0000008aH
  03638	74 38		 je	 SHORT $L119668

; 1436 : 						bitmap.Pic(), bitmap.Cel());

  0363a	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0363d	83 c1 04	 add	 ecx, 4
  03640	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  03645	50		 push	 eax
  03646	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  03649	83 c1 04	 add	 ecx, 4
  0364c	e8 00 00 00 00	 call	 ?Pic@Bitmap@@QBEHXZ	; Bitmap::Pic
  03651	50		 push	 eax
  03652	68 00 00 00 00	 push	 OFFSET FLAT:$SG119669
  03657	68 9b 05 00 00	 push	 1435			; 0000059bH
  0365c	68 00 00 00 00	 push	 OFFSET FLAT:$SG119670
  03661	6a 61		 push	 97			; 00000061H
  03663	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03669	52		 push	 edx
  0366a	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  0366f	83 c4 1c	 add	 esp, 28			; 0000001cH
$L119668:

; 1439 : 		PutCopyInCache();

  03672	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  03675	e8 00 00 00 00	 call	 ?PutCopyInCache@CelObj@@QAEXXZ ; CelObj::PutCopyInCache
$L119645:
$L119636:

; 1441 : }

  0367a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03681	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  03684	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  03687	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0368e	5e		 pop	 esi
  0368f	8b e5		 mov	 esp, ebp
  03691	5d		 pop	 ebp
  03692	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L125069:
  00026	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0002e	c3		 ret	 0
$L125072:
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T125071
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CelObjPic@@QAE@HH@Z ENDP				; CelObjPic::CelObjPic
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??4SOL_Point@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Point::operator=, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	x = p.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 119  : 	y = p.y;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 120  : 	return *this;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 121  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4SOL_Point@@QAEAAV0@ABV0@@Z ENDP			; SOL_Point::operator=
_TEXT	ENDS
;	COMDAT ?Pic@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Pic@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Pic, COMDAT

; 140  : 	int	Pic() const				{return view;}		//  Not an error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Pic@Bitmap@@QBEHXZ ENDP				; Bitmap::Pic
_TEXT	ENDS
PUBLIC	??0Bitmap@@QAE@HH@Z				; Bitmap::Bitmap
;	COMDAT ??0CelObj@@QAE@HH@Z
_TEXT	SEGMENT
_p$ = 8
_c$ = 12
_this$ = -4
??0CelObj@@QAE@HH@Z PROC NEAR				; CelObj::CelObj, COMDAT

; 202  : 	CelObj(int p, int c) : bitmap(p, c)			  {mirrored = False; compressType = 1000; hasSkip = True; horzFlip = False; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@HH@Z	; Bitmap::Bitmap
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CelObj@@6B@ ; CelObj::`vftable'
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	c7 41 40 e8 03
	00 00		 mov	 DWORD PTR [ecx+64], 1000 ; 000003e8H
  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	c7 42 3c 01 00
	00 00		 mov	 DWORD PTR [edx+60], 1
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
??0CelObj@@QAE@HH@Z ENDP				; CelObj::CelObj
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT
_p$ = 8
_c$ = 12
_this$ = -4
??0Bitmap@@QAE@HH@Z PROC NEAR				; Bitmap::Bitmap, COMDAT

; 127  : 	Bitmap(const int p, const int c)						{view = p; loop = 0; cel = c; type = tPic;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00018	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _c$[ebp]
  0002b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00031	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??0Bitmap@@QAE@HH@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
PUBLIC	??0CelObjPic@@QAE@ABV0@@Z			; CelObjPic::CelObjPic
;	COMDAT xdata$x
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\celobj.hpp
xdata$x	SEGMENT
$T125085 DD	019930520H
	DD	01H
	DD	FLAT:$T125087
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T125087 DD	0ffffffffH
	DD	FLAT:$L125083
xdata$x	ENDS
;	COMDAT ?Duplicate@CelObjPic@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT
$T125079 = -16
$T125080 = -20
__$EHRec$ = -12
_this$ = -24
?Duplicate@CelObjPic@@UBEPAVCelObj@@XZ PROC NEAR	; CelObjPic::Duplicate, COMDAT

; 327  : 	CelObj*		Duplicate() const			{return New CelObjPic(*this);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L125086
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	6a 60		 push	 96			; 00000060H
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	83 c4 04	 add	 esp, 4
  00028	89 45 ec	 mov	 DWORD PTR $T125080[ebp], eax
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	83 7d ec 00	 cmp	 DWORD PTR $T125080[ebp], 0
  00036	74 11		 je	 SHORT $L125081
  00038	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d ec	 mov	 ecx, DWORD PTR $T125080[ebp]
  0003f	e8 00 00 00 00	 call	 ??0CelObjPic@@QAE@ABV0@@Z ; CelObjPic::CelObjPic
  00044	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00047	eb 07		 jmp	 SHORT $L125082
$L125081:
  00049	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L125082:
  00050	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  00053	89 4d f0	 mov	 DWORD PTR $T125079[ebp], ecx
  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	8b 45 f0	 mov	 eax, DWORD PTR $T125079[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L125083:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T125080[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L125086:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T125085
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Duplicate@CelObjPic@@UBEPAVCelObj@@XZ ENDP		; CelObjPic::Duplicate
PUBLIC	??1CelObjPic@@UAE@XZ				; CelObjPic::~CelObjPic
;	COMDAT ??_GCelObjPic@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCelObjPic@@UAEPAXI@Z PROC NEAR			; CelObjPic::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObjPic@@UAE@XZ	; CelObjPic::~CelObjPic
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L119675
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L119675:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCelObjPic@@UAEPAXI@Z ENDP				; CelObjPic::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??4CelObjPic@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4CelObjPic@@QAEAAV0@ABV0@@Z PROC NEAR			; CelObjPic::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??4CelObj@@QAEAAV0@ABV0@@Z ; CelObj::operator=
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00019	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0001c	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00022	83 c1 54	 add	 ecx, 84			; 00000054H
  00025	51		 push	 ecx
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 c1 54	 add	 ecx, 84			; 00000054H
  0002c	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00037	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0003a	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
??4CelObjPic@@QAEAAV0@ABV0@@Z ENDP			; CelObjPic::operator=
_TEXT	ENDS
;	COMDAT ??1CelObjPic@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObjPic@@UAE@XZ PROC NEAR				; CelObjPic::~CelObjPic, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CelObjPic@@UAE@XZ ENDP				; CelObjPic::~CelObjPic
_TEXT	ENDS
xdata$x	SEGMENT
$T125097 DD	019930520H
	DD	01H
	DD	FLAT:$T125099
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T125099 DD	0ffffffffH
	DD	FLAT:$L125095
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_src$ = 8
_this$ = -16
??0CelObjPic@@QAE@ABV0@@Z PROC NEAR			; CelObjPic::CelObjPic

; 1446 : {

  03695	55		 push	 ebp
  03696	8b ec		 mov	 ebp, esp
  03698	6a ff		 push	 -1
  0369a	68 00 00 00 00	 push	 $L125098
  0369f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  036a5	50		 push	 eax
  036a6	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  036ad	51		 push	 ecx
  036ae	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  036b1	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  036b4	50		 push	 eax
  036b5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  036b8	e8 00 00 00 00	 call	 ??0CelObj@@QAE@ABV0@@Z	; CelObj::CelObj
  036bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  036c4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  036c7	83 c1 54	 add	 ecx, 84			; 00000054H
  036ca	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  036cf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  036d2	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CelObjPic@@6B@ ; CelObjPic::`vftable'

; 1447 : 	pos = src.pos;

  036d8	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  036db	83 c2 54	 add	 edx, 84			; 00000054H
  036de	52		 push	 edx
  036df	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  036e2	83 c1 54	 add	 ecx, 84			; 00000054H
  036e5	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 1448 : 	priority = src.priority;

  036ea	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  036ed	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  036f0	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  036f3	89 50 5c	 mov	 DWORD PTR [eax+92], edx

; 1449 : 	celCount = src.celCount;

  036f6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  036f9	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  036fc	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  036ff	89 50 50	 mov	 DWORD PTR [eax+80], edx

; 1450 : }

  03702	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03709	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0370c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0370f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  03716	8b e5		 mov	 esp, ebp
  03718	5d		 pop	 ebp
  03719	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L125095:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  00041	c3		 ret	 0
$L125098:
  00042	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T125097
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CelObjPic@@QAE@ABV0@@Z ENDP				; CelObjPic::CelObjPic
_TEXT	SEGMENT
_dest$ = 8
_si$ = 12
_drawRect$ = 16
_hflip$ = 20
_this$ = -4
?Draw@CelObjPic@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z PROC NEAR ; CelObjPic::Draw

; 1456 : {

  0371c	55		 push	 ebp
  0371d	8b ec		 mov	 ebp, esp
  0371f	51		 push	 ecx
  03720	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1457 : 	horzFlip = hflip;

  03723	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  03726	8b 4d 14	 mov	 ecx, DWORD PTR _hflip$[ebp]
  03729	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 1458 : 	CelObj::Draw(dest,si,drawRect);

  0372c	8b 55 10	 mov	 edx, DWORD PTR _drawRect$[ebp]
  0372f	52		 push	 edx
  03730	8b 45 0c	 mov	 eax, DWORD PTR _si$[ebp]
  03733	50		 push	 eax
  03734	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  03737	51		 push	 ecx
  03738	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0373b	e8 00 00 00 00	 call	 ?Draw@CelObj@@QAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@@Z ; CelObj::Draw

; 1459 : }

  03740	8b e5		 mov	 esp, ebp
  03742	5d		 pop	 ebp
  03743	c2 10 00	 ret	 16			; 00000010H
?Draw@CelObjPic@@UAEXABVBuffer@@ABVScreenItem@@ABVSOL_Rect@@H@Z ENDP ; CelObjPic::Draw
$T125103 = -12
$T125105 = -24
_dest$ = 8
_toBuffer$ = 12
_p$ = 16
_hflip$ = 24
_this$ = -32
?Draw@CelObjPic@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z PROC NEAR ; CelObjPic::Draw

; 1463 : {

  03746	55		 push	 ebp
  03747	8b ec		 mov	 ebp, esp
  03749	83 ec 20	 sub	 esp, 32			; 00000020H
  0374c	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1464 : 	horzFlip = hflip;

  0374f	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  03752	8b 4d 18	 mov	 ecx, DWORD PTR _hflip$[ebp]
  03755	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 1465 : 	CelObj::DrawTo(dest, toBuffer, p);

  03758	6a 01		 push	 1
  0375a	8d 4d f4	 lea	 ecx, DWORD PTR $T125103[ebp]
  0375d	e8 00 00 00 00	 call	 ??0Ratio@@QAE@H@Z	; Ratio::Ratio
  03762	83 ec 08	 sub	 esp, 8
  03765	8b cc		 mov	 ecx, esp
  03767	50		 push	 eax
  03768	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  0376d	6a 01		 push	 1
  0376f	8d 4d e8	 lea	 ecx, DWORD PTR $T125105[ebp]
  03772	e8 00 00 00 00	 call	 ??0Ratio@@QAE@H@Z	; Ratio::Ratio
  03777	83 ec 08	 sub	 esp, 8
  0377a	8b cc		 mov	 ecx, esp
  0377c	50		 push	 eax
  0377d	e8 00 00 00 00	 call	 ??0Ratio@@QAE@ABV0@@Z	; Ratio::Ratio
  03782	83 ec 08	 sub	 esp, 8
  03785	8b cc		 mov	 ecx, esp
  03787	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  0378a	52		 push	 edx
  0378b	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  03790	8b 45 0c	 mov	 eax, DWORD PTR _toBuffer$[ebp]
  03793	50		 push	 eax
  03794	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  03797	51		 push	 ecx
  03798	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0379b	e8 00 00 00 00	 call	 ?DrawTo@CelObj@@QAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@VRatio@@3@Z ; CelObj::DrawTo

; 1466 : }

  037a0	8b e5		 mov	 esp, ebp
  037a2	5d		 pop	 ebp
  037a3	c2 14 00	 ret	 20			; 00000014H
?Draw@CelObjPic@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ENDP ; CelObjPic::Draw
$T125108 = -8
_this$ = -12
_picID$ = -4
?ResPointer@CelObjPic@@MAEPAEXZ PROC NEAR		; CelObjPic::ResPointer

; 1471 : {

  037a6	55		 push	 ebp
  037a7	8b ec		 mov	 ebp, esp
  037a9	83 ec 0c	 sub	 esp, 12			; 0000000cH
  037ac	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1472 : 	MemID picID = resMgr->Get(MemResPic, bitmap.Pic());

  037af	6a 00		 push	 0
  037b1	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  037b4	83 c1 04	 add	 ecx, 4
  037b7	e8 00 00 00 00	 call	 ?Pic@Bitmap@@QBEHXZ	; Bitmap::Pic
  037bc	50		 push	 eax
  037bd	6a 01		 push	 1
  037bf	8d 45 f8	 lea	 eax, DWORD PTR $T125108[ebp]
  037c2	50		 push	 eax
  037c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  037c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  037cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  037d1	ff 52 20	 call	 DWORD PTR [edx+32]
  037d4	50		 push	 eax
  037d5	8d 4d fc	 lea	 ecx, DWORD PTR _picID$[ebp]
  037d8	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 1473 : 	return (uchar*) *picID;

  037dd	8d 4d fc	 lea	 ecx, DWORD PTR _picID$[ebp]
  037e0	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*

; 1474 : }

  037e5	8b e5		 mov	 esp, ebp
  037e7	5d		 pop	 ebp
  037e8	c3		 ret	 0
?ResPointer@CelObjPic@@MAEPAEXZ ENDP			; CelObjPic::ResPointer
_TEXT	ENDS
END

	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Graph.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@NAAD@Magellan?5MSWHEEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FPAF@MouseZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CLBL@MSWHEEL_ROLLMSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DLPD@MSH_WHEELSUPPORT_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODOJ@MSH_SCROLL_LINES_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EDBF@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FGFK@CLSID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DMDD@?5?9?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOFL@Interface?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FNJL@?$CICLSID?$DP?$DP?$DP?$CJ?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DLIL@?5?9?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@NKPL@Unknown?5Error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@HOAP@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@BJHN@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MDHG@?4tlb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLHD@oleaut32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FJNM@UnRegisterTypeLib?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CDEE@DllGetVersion?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FDEG@comctl32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKNA@shell32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@ILEN@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@JLLA@?3Jan?3January?3Feb?3February?3Mar?3Ma@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCCD@true?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELCB@no?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LGKI@yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKHJ@C?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPIO@IDispatch?5error?5?$CD?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NADL@Unknown?5error?50x?$CF0lX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MHAC@?$CFp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CFAI@0123456789abcdefABCDEF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KFAL@E?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KMAE@?0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MMAA@missing?5locale?5facet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __tcscmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcscoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextWindow@@YAPAUHWND__@@PAU1@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawState@@YGHPAUHDC__@@PAUHBRUSH__@@P6GH0JIHH@ZJIHHHHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextPtr@CSimpleList@@QBEPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CByteArray@@QBEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CByteArray@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CWordArray@@QBEGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CWordArray@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CDWordArray@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CDWordArray@@QAEAAKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CUIntArray@@QBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CUIntArray@@QAEAAIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ACPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CObArray@@QBEPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CObArray@@QAEAAPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CStringArray@@QBE?AVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CStringArray@@QAEAAVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSimpleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSimpleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMemoryException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemoryException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNotSupportedException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNotSupportedException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCArchiveException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFileException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFileException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFilePath@CFile@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CString@@IBEPAUCStringData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CString@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@CString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDays@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalHours@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalMinutes@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalSeconds@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwapLeftRight@CRect@@SAXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCResourceException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CResourceException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCUserException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CUserException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPen@@SGPAV1@PAUHPEN__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBrush@@SGPAV1@PAUHBRUSH__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPalette@@SGPAV1@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHmenu@CMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CListBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCheckListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCheckListBox@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComboBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemData@CComboBox@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CComboBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEdit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCommonDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCommonDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintSelection@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintRange@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorders@CStatusBar@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRectTracker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmapButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmapButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualGUID@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCOleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1COleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleCurrency@@QAEXW4CurrencyStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4COleDateTime@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTime@@QAEXW4DateTimeStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0COleDateTimeSpan@@QAE@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTimeSpan@@QAEXW4DateTimeSpanStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@COleSafeArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDateTimeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonthCalCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDragListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatusBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListCtrl@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHotKeyCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpinButtonCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSliderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAnimateCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRichEditCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCReBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CReBarCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBoxEx@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIPAddressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2BSTR@@YAPAGPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlTrace2@ATL@@YAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualGUID@ATL@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YAHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReplaceSingleQuote@CComModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@CComBSTR@ATL@@QAE_NPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalClear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlAdvise@ATL@@YGJPAUIUnknown@@0ABU_GUID@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_NextObjectMapEntry@ATL@@YAPAU_ATL_OBJMAP_ENTRY@1@PAU_ATL_MODULE@1@PAU21@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleInit@ATL@@YGJPAU_ATL_MODULE@1@PAU_ATL_OBJMAP_ENTRY@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterClassObjects@ATL@@YGJPAU_ATL_MODULE@1@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRevokeClassObjects@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleGetClassObject@ATL@@YGJPAU_ATL_MODULE@1@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleTerm@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddTermFunc@ATL@@YGJPAU_ATL_MODULE@1@P6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterServer@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServerEx@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServer@ATL@@YGJPAU_ATL_MODULE@1@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUpdateRegistryFromResourceD@ATL@@YGJPAU_ATL_MODULE@1@PBGHPAU_ATL_REGMAP_ENTRY@1@PAUIRegistrar@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleLoadTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBGPAPAGPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddCreateWndData@ATL@@YGXPAU_ATL_MODULE@1@PAU_AtlCreateWndData@1@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleExtractCreateWndData@ATL@@YGPAXPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBDPAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@invalid_argument@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0invalid_argument@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YAGDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@failure@ios_base@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7_bstr_t@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Compare@_bstr_t@@ABEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@Data_t@_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Assign@Data_t@_bstr_t@@QAEXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@Data_t@_bstr_t@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8_variant_t@@QBE_NPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@_variant_t@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonikerFile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDocument@COleServerItem@@QBEPAVCOleServerDoc@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@AAVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Data@ArrayID@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetInSIList@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearInSIList@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@ObjectID@@QBEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RespondsTo@ObjectID@@QBEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@ObjectID@@QBEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BHead@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pRace@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pSex@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pHeadView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pHairView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pBrowView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pEyeView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pNoseView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pEarView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pMouthView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pFaceHairView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDLo@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDHi@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GroupMember@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmpty@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Area@SOL_Rect@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clip@SOL_Rect@@QAEXABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveTo@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D@YAHHABVRatio@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ViewHeaderID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CViewHeaderID@@QBEPAUViewHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?View@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Loop@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cel@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Handle@Bitmap@@QBE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetHandle@Bitmap@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetType@Bitmap@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?XOrg@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?YOrg@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResX@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResY@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Id@ScreenItem@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Priority@ScreenItem@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPriority@ScreenItem@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@ScreenItemList@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AScreenItemList@@QAEAAVScreenItem@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Id@SOL_Plane@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@PlaneList@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??APlaneList@@QAEAAVSOL_Plane@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Planes@Screen@@QAEAAVPlaneList@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopScreenItem@GraphicsMgr@@QBEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Line@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetXRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetYRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_ListID@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMagnifyView@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPointContainer@@@ATL@@QAEPAPAUIConnectionPointContainer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPointContainer@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPointContainer@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPoint@@@ATL@@QAEPAPAUIConnectionPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPoint@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPoint@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIRegistrar@@@ATL@@QAEPAPAUIRegistrar@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIRegistrar@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIRegistrar@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIRegistrar@@@ATL@@QAEPAUIRegistrar@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInterfacePtr@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QBEPAUIMoniker@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QBEPAUIBinding@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@G@std@@QAEPAGIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@G@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Max@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YADDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@GU?$char_traits@G@std@@@1@0IPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?isdigit@std@@YA_NDABVlocale@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@G@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@D@std@@@std@@SAPAV?$ctype@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@G@std@@@std@@SAPAV?$ctype@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAPAV?$numpunct@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAPAV?$numpunct@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPADPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPAGPBDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_eab22ac1_30c1_11cf_a7eb_0000c05bae0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d66d6f98_cdaa_11d0_b822_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9860_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000117_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000113_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d8_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1f8352c0_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMonthCalCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f220_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f208_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc9_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa5_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000192_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000128_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000140_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7PaletteMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000002f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CEdit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000122_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_920ff31f_ca25_451a_9738_3444fc206bcc
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b283_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CScrollBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bcc7_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTabCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b3e7c340_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d49_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_85cb6900_4d95_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4f7ae600_0142_11d3_9dcf_89be4efb591e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBoxEx@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f203_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1ac3d9f0_175c_11d1_95be_00609797ea4f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_012dd920_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHotKeyCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020403_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f311_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1008c4a0_7613_11cf_9af1_0020af6e72f4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020410_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020404_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVoverflow_error@std@@@8??0overflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f23b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b15b8dc1_c7e1_11d0_8680_00aa00bdcb71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f52e2b61_18a1_11d1_b105_00805f49916b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3d7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2aa_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1de_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9d5_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000025_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000019_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2a4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d8_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_948c5ad3_c58d_11d0_9c0b_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020406_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_bc40bec1_c493_11d0_831b_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd21_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ee11629b_36df_11d3_9dd0_89d6dbbba800
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9bfbbc02_eff1_101a_84ed_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f03340_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_63cdbcb0_c1b1_11d0_9336_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_bb1a2ae1_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0c733a30_2a1c_11ce_ade5_00aa0044773d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65ce_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cb5bdc81_93c1_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f218_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f230_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ef_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSimpleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f377_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0e6d4d92_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ca478da0_3920_11d3_9dd0_8067e4a06603
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eae1ba61_a4ed_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9eb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55882_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVrange_error@std@@@8??0range_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f35f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3fd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd23_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a3ccedf3_2de2_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d10f6761_83e9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0002e011_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28d_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1ff_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f240_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1da_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCommonDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000129_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88a05c00_f000_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ee_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d5f56b60_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToolBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_08ec3e00_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af280b6_cb3f_11d0_891e_00c04fb6bfc4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9e7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020d03_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_85bd8e82_0fba_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CNotSupportedException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3fc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d40_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_359f3441_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f28b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_afa0dc11_c313_11d0_831a_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000023_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e0e270c1_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVbad_typeid@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c9_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1c2056cc_5ef4_101b_8bc8_00aa003e3b29
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2c2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fbf23b80_e3f0_101b_8488_00aa003e56f8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d9_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f1_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_b722bcc5_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSliderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_618736e0_3c3d_11cf_810c_00aa00389b71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000190_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDragListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3af24292_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020d00_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000191_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_f77459a0_bf9a_11cf_ba4e_00c04fd70816
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f322_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f266_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a41_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4425_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$ctype@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@D@std@@@std@@0PAV?$numpunct@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@G@std@@@std@@0PAV?$numpunct@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@D@std@@@std@@0PAV?$ctype@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@G@std@@@std@@0PAV?$ctype@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f29c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_359f3443_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc8_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e003_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f206_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f212_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020402_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ed_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f490eb00_1240_11d1_9888_006097deacf9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_typeid@std@@@8??0bad_typeid@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CBitmapButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1dd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f373_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214ea_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d7_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ed_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000112_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3f7f31ac_e15f_11d0_9c25_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000118_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f25f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fac32c80_cbe4_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7bf80980_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eb0fe172_1a3a_11d0_89b3_00a0c90a90ac
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_729fe2f8_1ea8_11d1_8f85_00c04fc2fbe1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f202_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ac60f6a0_0fd9_11d0_99cb_00c04fd64497
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bccb_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f216_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_04598fc6_866c_11cf_ab7c_00aa00c08fcf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7COleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_332c4426_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28c_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ee_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e013_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_594f31d0_7f19_11d0_b194_00a0c90dc8bf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_6d5140c1_7436_11ce_8034_00aa006009fa
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f313_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88e39e80_3578_11cf_ae69_08002b2e1262
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_742b0e01_14e6_101b_914e_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAnimateCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f37e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVunderflow_error@std@@@8??0underflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9c7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e7a1af80_4d96_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpinButtonCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ca04b7e6_0d21_11d1_8cc5_00c04fc2b085
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b288_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000126_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_163bb1e0_6e00_11cf_837a_48dc04c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_2a342fc2_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d8f015c0_c278_11ce_a49e_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd3f23c0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_df0b3d60_548f_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a7aba9c1_8983_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_744129e0_cbe5_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_68284faa_6a48_11d0_8c78_00c04fd918b4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000010_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CStatusBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3d5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_626fc520_a41e_11cf_a731_00a0c9082637
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_91a565c1_e38f_11d0_94bf_00a0c9055cbf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2ad_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d31_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56a34_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000012a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af24290_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1e0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f35c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a9d758a0_4617_11cf_95fc_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b8da6310_e19b_11d0_933c_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_db01a1e3_a42b_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_65725580_9b5d_11d0_9bfe_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_539698a0_cdca_11cf_a5eb_00aa0047a063
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d30c1661_cdaf_11d0_8a3e_00c04fc9e26e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3dc39d1d_c030_11d0_b81b_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d46_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_37deb787_2d9b_11d3_9dd0_c423e6542e10
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_922eada0_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_69d14c80_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFileException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CReBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000011c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_9c2cad80_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_70bdde00_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f3cf_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CArchiveException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000121_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CResourceException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_d9f1e15a_ccdb_11d0_9c0c_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa2_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002df05_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRectTracker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f209_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000020_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f319_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f375_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f369_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cf51ed10_62fe_11cf_bf86_00a0c9034836
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_894ad3b0_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_baa342a0_2ded_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f29f6bc0_5021_11ce_aa15_00006901293f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e8_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f315_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f265_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMemoryException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cd_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d001f200_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e002_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_085fb2c0_0df8_11d1_8f4b_00a0c905413f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9e4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55dd814e_a1b7_4808_9625_4f75a3fad8a7
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f569d0_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ec_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214ee_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fa_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b285_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f361_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214eb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0c6c4200_c589_11d0_999a_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000139_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55881_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4ef6100a_af88_11d0_9846_00c04fc29993
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000002_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000138_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f7_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f372_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f5be2ee1_bfd7_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020411_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020405_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRichEditCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDateTimeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f376_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f401_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d9e89500_30fa_11d0_b724_00aa006c1a01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_376bd3aa_3845_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f357_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f360_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a1_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c01387a_6ac2_4ef1_bda2_ec5d26e3b065
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_37d84f60_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_322982e0_0855_11d3_9dcf_ddfb3ab09e18
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cabb0da0_da57_11cf_9974_0020afd79762
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_c04d65d2_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7d688a70_c613_11d0_999b_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f378_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f383_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1cff0050_6fdd_11d0_9328_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bb1a2ae2_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_01e44665_24ac_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_6cfc9ba1_fe87_11d2_9dcf_ed29fafe371d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9ba05970_f6a8_11cf_a442_00a0c90a8f39
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcca_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_83c2d7a0_0de6_11d3_9dcf_9423f1b2561c
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonikerFile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_275c23e3_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVdomain_error@std@@@8??0domain_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28f_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000104_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000110_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f207_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d4c_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_25b15600_0115_11d0_bf0d_00aa00b8dfd2
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000127_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000022_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000016_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c6_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCheckListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000026_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55272a00_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28b_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4427_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_aa5b6a80_b834_11d0_932f_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_e0e270c0_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e6_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000101_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000029_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3127ca40_446e_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_55980ba0_35aa_11cf_b671_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a1faf330_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a4c65425_0f82_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CIPAddressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CUserException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a6ef9861_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9862_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000018_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000193_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000024_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f200_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_dce47f78_8a6c_4c6d_a6f7_8be4427127c4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f204_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ea_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd1ae5e0_a6ae_11ce_bd37_504200c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000102_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f0_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a42_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f24f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000001d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000194_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHeaderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_99caf010_415e_11cf_8814_00aa00b569f5
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_47d2657a_7b27_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ec_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f211_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f205_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0e6d4d90_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00021500_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc6_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_89bcb740_6119_101a_bcb7_00dd010655af
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bcfce0a0_ec17_11d0_8d10_00a0c90f2719
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d6_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000119_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000111_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000105_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000125_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7bf80981_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b289_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65d0_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_972de6c1_8b09_11d2_b652_a1fd6cc34260
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f244_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56afc_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000103_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000013e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e1_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000003_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f1db8392_7331_11d0_8c99_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_c4d244b0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2eb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?GUID_ATLVer30@ATL@@3U_GUID@@A			; ATL::GUID_ATLVer30
PUBLIC	?m_libid@CComModule@ATL@@2U_GUID@@A		; ATL::CComModule::m_libid
PUBLIC	_LIBID_ATLLib
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_LIBID_ACTIVESKINLib
PUBLIC	_IID_ISkinForm
PUBLIC	_IID_ISkinObjectDisp
PUBLIC	_IID_ISkinSource
PUBLIC	_DIID__ISkinFormEvents
PUBLIC	_IID_ISkinFormEvents_Sink
PUBLIC	_CLSID_SkinForm
PUBLIC	_DIID__ISkinObjectDispEvents
PUBLIC	_IID_ICOMScript
PUBLIC	_IID_IComMorph
PUBLIC	_IID_IComMoveSize
PUBLIC	_IID_ISkinButton
PUBLIC	_CLSID_SkinObject
PUBLIC	_CLSID_COMScript
PUBLIC	_CLSID_ComMorph
PUBLIC	_CLSID_ComMoveSize
PUBLIC	_DIID__ISkinButtonEvents
PUBLIC	_CLSID_SkinButton
PUBLIC	_IID_ISkinPanel
PUBLIC	_DIID__ISkinPanelEvents
PUBLIC	_IID_ISkinLabel
PUBLIC	_CLSID_SkinPanel
PUBLIC	_DIID__ISkinLabelEvents
PUBLIC	_IID_ISkinScrollBar
PUBLIC	_CLSID_SkinLabel
PUBLIC	_DIID__ISkinScrollBarEvents
PUBLIC	_CLSID_SkinScrollBar
PUBLIC	_DIID__ISkinSourceEvents
PUBLIC	_IID_ISkinStorage
PUBLIC	_IID_ISkinPopup
PUBLIC	_IID_IComTransitions
PUBLIC	_IID_ISkinEvent
PUBLIC	_IID_IComProcTextures
PUBLIC	_IID_IComFilters
PUBLIC	_CLSID_SkinSource
PUBLIC	_CLSID_SkinStorage
PUBLIC	_CLSID_SkinPopup
PUBLIC	_CLSID_ComTransitions
PUBLIC	_CLSID_SkinEvent
PUBLIC	_CLSID_ComProcTextures
PUBLIC	_CLSID_ComFilters
PUBLIC	_IID_IInternalConnection
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CComModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CComModule::m_libid
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT
?GUID_ATLVer30@ATL@@3U_GUID@@A DD 0b62f5910H		; ATL::GUID_ATLVer30
	DW	06528H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT
_LIBID_ACTIVESKINLib DD 0972de6b5H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT
_IID_ISkinForm DD 0972de6c1H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT
_IID_ISkinObjectDisp DD 06cfc9ba1H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT
_IID_ISkinSource DD 037deb787H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT
_DIID__ISkinFormEvents DD 0972de6c3H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT
_IID_ISkinFormEvents_Sink DD 053fa8d31H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT
_CLSID_SkinForm DD 0972de6c2H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT
_DIID__ISkinObjectDispEvents DD 06cfc9ba3H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT
_IID_ICOMScript DD 04f7ae600H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT
_IID_IComMorph DD 0322982e0H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT
_IID_IComMoveSize DD 083c2d7a0H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT
_IID_ISkinButton DD 053fa8d40H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT
_CLSID_SkinObject DD 06cfc9ba2H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT
_CLSID_COMScript DD 04f7ae601H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT
_CLSID_ComMorph DD 0322982e1H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT
_CLSID_ComMoveSize DD 083c2d7a1H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT
_DIID__ISkinButtonEvents DD 053fa8d42H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT
_CLSID_SkinButton DD 053fa8d41H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT
_IID_ISkinPanel DD 053fa8d46H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT
_DIID__ISkinPanelEvents DD 053fa8d48H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT
_IID_ISkinLabel DD 053fa8d49H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT
_CLSID_SkinPanel DD 053fa8d47H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT
_DIID__ISkinLabelEvents DD 053fa8d4bH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT
_IID_ISkinScrollBar DD 053fa8d4cH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT
_CLSID_SkinLabel DD 053fa8d4aH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT
_DIID__ISkinScrollBarEvents DD 053fa8d4eH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT
_CLSID_SkinScrollBar DD 053fa8d4dH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT
_DIID__ISkinSourceEvents DD 037deb788H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT
_IID_ISkinStorage DD 0ee11629bH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT
_IID_ISkinPopup DD 0ca478da0H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT
_IID_IComTransitions DD 03c01387aH
	DW	06ac2H
	DW	04ef1H
	DB	0bdH
	DB	0a2H
	DB	0ecH
	DB	05dH
	DB	026H
	DB	0e3H
	DB	0b0H
	DB	065H
CONST	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT
_IID_ISkinEvent DD 055dd814eH
	DW	0a1b7H
	DW	04808H
	DB	096H
	DB	025H
	DB	04fH
	DB	075H
	DB	0a3H
	DB	0faH
	DB	0d8H
	DB	0a7H
CONST	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT
_IID_IComProcTextures DD 0dce47f78H
	DW	08a6cH
	DW	04c6dH
	DB	0a6H
	DB	0f7H
	DB	08bH
	DB	0e4H
	DB	042H
	DB	071H
	DB	027H
	DB	0c4H
CONST	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT
_IID_IComFilters DD 0920ff31fH
	DW	0ca25H
	DW	0451aH
	DB	097H
	DB	038H
	DB	034H
	DB	044H
	DB	0fcH
	DB	020H
	DB	06bH
	DB	0ccH
CONST	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT
_CLSID_SkinSource DD 053fa8d44H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT
_CLSID_SkinStorage DD 0ee11629cH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT
_CLSID_SkinPopup DD 0ca478da1H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT
_CLSID_ComTransitions DD 03c6d21d6H
	DW	07470H
	DW	04555H
	DB	0a8H
	DB	0fbH
	DB	06cH
	DB	022H
	DB	092H
	DB	0b3H
	DB	09cH
	DB	046H
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT
_CLSID_SkinEvent DD 08f59c2a4H
	DW	04c01H
	DW	04451H
	DB	0beH
	DB	05bH
	DB	09H
	DB	078H
	DB	07bH
	DB	012H
	DB	03aH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT
_CLSID_ComProcTextures DD 0bf1b5d50H
	DW	03c5cH
	DW	048ceH
	DB	0b9H
	DB	091H
	DB	0eH
	DB	086H
	DB	0d2H
	DB	06fH
	DB	06fH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT
_CLSID_ComFilters DD 0c4d7e3c7H
	DW	03c26H
	DW	04052H
	DB	0a9H
	DB	093H
	DB	071H
	DB	0e5H
	DB	00H
	DB	0eaH
	DB	08cH
	DB	05H
CONST	ENDS
PUBLIC	?ValidateBitmap@@YAXVMemID@@@Z			; ValidateBitmap
EXTRN	?Fatal@MsgMgr@@QAAXPADZZ:NEAR			; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
$SG143887 DB	'Bitmap integrity check failure! (width = %d, height = %d'
	DB	', x = %d, y = %d)', 00H
_DATA	ENDS
_TEXT	SEGMENT
__celHeader$ = -4
__celPtr$ = -8
__index$ = -12
?ValidateBitmap@@YAXVMemID@@@Z PROC NEAR		; ValidateBitmap

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 81   : 	return;

  00006	eb 62		 jmp	 SHORT $L143877
$L143884:

; 82   : 
; 83   : 	// validate the bitmap
; 84   : 	CelHeader *_celHeader = (CelHeader *)memMgr->GetAddr ( BM );
; 85   : 	uchar *_celPtr = ((uchar *)_celHeader) + CELHEADERSIZE + (_celHeader->xDim * _celHeader->yDim);
; 86   : 
; 87   : 	for ( int _index = 0; _index<_celHeader->xDim; _index++ )

  00008	8b 4d f4	 mov	 ecx, DWORD PTR __index$[ebp]
  0000b	83 c1 01	 add	 ecx, 1
  0000e	89 4d f4	 mov	 DWORD PTR __index$[ebp], ecx
  00011	8b 55 fc	 mov	 edx, DWORD PTR __celHeader$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	66 8b 02	 mov	 ax, WORD PTR [edx]
  00019	39 45 f4	 cmp	 DWORD PTR __index$[ebp], eax
  0001c	7d 4c		 jge	 SHORT $L143885

; 88   : 		if ( *_celPtr++ != 123 )

  0001e	8b 4d f8	 mov	 ecx, DWORD PTR __celPtr$[ebp]
  00021	33 d2		 xor	 edx, edx
  00023	8a 11		 mov	 dl, BYTE PTR [ecx]
  00025	8b 45 f8	 mov	 eax, DWORD PTR __celPtr$[ebp]
  00028	83 c0 01	 add	 eax, 1
  0002b	89 45 f8	 mov	 DWORD PTR __celPtr$[ebp], eax
  0002e	83 fa 7b	 cmp	 edx, 123		; 0000007bH
  00031	74 35		 je	 SHORT $L143886

; 89   : 			msgMgr->Fatal ( "Bitmap integrity check failure! (width = %d, height = %d, x = %d, y = %d)", _celHeader->xDim, _celHeader->yDim, _index, _celHeader->yDim );

  00033	8b 4d fc	 mov	 ecx, DWORD PTR __celHeader$[ebp]
  00036	33 d2		 xor	 edx, edx
  00038	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  0003c	52		 push	 edx
  0003d	8b 45 f4	 mov	 eax, DWORD PTR __index$[ebp]
  00040	50		 push	 eax
  00041	8b 4d fc	 mov	 ecx, DWORD PTR __celHeader$[ebp]
  00044	33 d2		 xor	 edx, edx
  00046	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  0004a	52		 push	 edx
  0004b	8b 45 fc	 mov	 eax, DWORD PTR __celHeader$[ebp]
  0004e	33 c9		 xor	 ecx, ecx
  00050	66 8b 08	 mov	 cx, WORD PTR [eax]
  00053	51		 push	 ecx
  00054	68 00 00 00 00	 push	 OFFSET FLAT:$SG143887
  00059	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00065	83 c4 18	 add	 esp, 24			; 00000018H
$L143886:

; 90   : }

  00068	eb 9e		 jmp	 SHORT $L143884
$L143885:
$L143877:
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?ValidateBitmap@@YAXVMemID@@@Z ENDP			; ValidateBitmap
_TEXT	ENDS
PUBLIC	?Width@CelObj@@QBEHXZ				; CelObj::Width
PUBLIC	?Height@CelObj@@QBEHXZ				; CelObj::Height
PUBLIC	?XOrg@CelObj@@QBEHXZ				; CelObj::XOrg
PUBLIC	?YOrg@CelObj@@QBEHXZ				; CelObj::YOrg
PUBLIC	?Mirrored@CelObj@@QBEHXZ			; CelObj::Mirrored
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
PUBLIC	??0SOL_Rect@@QAE@HHHH@Z				; SOL_Rect::SOL_Rect
PUBLIC	?Clip@SOL_Rect@@QAEXABV1@@Z			; SOL_Rect::Clip
PUBLIC	??1CelObjView@@UAE@XZ				; CelObjView::~CelObjView
PUBLIC	?DrawView@@YAXHHHVMemID@@HHHHH@Z		; DrawView
PUBLIC	??0SOL_Point@@QAE@HH@Z				; SOL_Point::SOL_Point
PUBLIC	??0SOL_Point@@QAE@ABV0@@Z			; SOL_Point::SOL_Point
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?resMgr@@3PAVResourceMgr@@A:DWORD		; resMgr
EXTRN	_memMgr:DWORD
EXTRN	??0CelObjView@@QAE@HHH@Z:NEAR			; CelObjView::CelObjView
EXTRN	?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z:NEAR ; CelObjView::Draw
EXTRN	??0BufferStd@@QAE@HHPAE@Z:NEAR			; BufferStd::BufferStd
xdata$x	SEGMENT
$T150527 DD	019930520H
	DD	01H
	DD	FLAT:$T150530
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150530 DD	0ffffffffH
	DD	FLAT:$L150523
xdata$x	ENDS
_TEXT	SEGMENT
_view$ = 8
_loop$ = 12
_cel$ = 16
_BM$ = 20
_BMWidth$ = 24
_BMHeight$ = 28
_originX$ = 32
_originY$ = 36
_withSkip$ = 40
_obj$143910 = -156
_width$143911 = -64
_height$143912 = -160
_buf$143915 = -60
_pt$143916 = -76
_rect$143917 = -44
_BMRect$143918 = -28
_hadSkip$143919 = -68
$T150521 = -164
$T150522 = -168
__$EHRec$ = -12
?DrawView@@YAXHHHVMemID@@HHHHH@Z PROC NEAR		; DrawView

; 95   : {

  0006e	55		 push	 ebp
  0006f	8b ec		 mov	 ebp, esp
  00071	6a ff		 push	 -1
  00073	68 00 00 00 00	 push	 $L150528
  00078	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0007e	50		 push	 eax
  0007f	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00086	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH

; 96   : 	if ( resMgr->Check(MemResView, view ) ) {

  0008c	66 8b 45 08	 mov	 ax, WORD PTR _view$[ebp]
  00090	50		 push	 eax
  00091	6a 00		 push	 0
  00093	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  000a1	ff 52 10	 call	 DWORD PTR [edx+16]
  000a4	85 c0		 test	 eax, eax
  000a6	0f 84 54 01 00
	00		 je	 $L143909

; 97   : 		CelObjView obj ( view, loop, cel );

  000ac	8b 45 10	 mov	 eax, DWORD PTR _cel$[ebp]
  000af	50		 push	 eax
  000b0	8b 4d 0c	 mov	 ecx, DWORD PTR _loop$[ebp]
  000b3	51		 push	 ecx
  000b4	8b 55 08	 mov	 edx, DWORD PTR _view$[ebp]
  000b7	52		 push	 edx
  000b8	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$143910[ebp]
  000be	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  000c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 98   : 		int width = obj.Width() - 1, height = obj.Height() - 1;

  000ca	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$143910[ebp]
  000d0	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  000d5	83 e8 01	 sub	 eax, 1
  000d8	89 45 c0	 mov	 DWORD PTR _width$143911[ebp], eax
  000db	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$143910[ebp]
  000e1	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  000e6	83 e8 01	 sub	 eax, 1
  000e9	89 85 60 ff ff
	ff		 mov	 DWORD PTR _height$143912[ebp], eax

; 99   : 
; 100  : 		resMgr->Get ( MemResView, view );

  000ef	6a 00		 push	 0
  000f1	66 8b 45 08	 mov	 ax, WORD PTR _view$[ebp]
  000f5	50		 push	 eax
  000f6	6a 00		 push	 0
  000f8	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T150521[ebp]
  000fe	51		 push	 ecx
  000ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00105	8b 02		 mov	 eax, DWORD PTR [edx]
  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  0010d	ff 50 20	 call	 DWORD PTR [eax+32]

; 101  : 		BufferStd buf ( BMWidth, BMHeight, (uchar *)memMgr->GetAddr ( BM ) + CELHEADERSIZE );

  00110	8d 4d 14	 lea	 ecx, DWORD PTR _BM$[ebp]
  00113	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00118	50		 push	 eax
  00119	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  0011f	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00124	83 c0 2e	 add	 eax, 46			; 0000002eH
  00127	50		 push	 eax
  00128	8b 4d 1c	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  0012b	51		 push	 ecx
  0012c	8b 55 18	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  0012f	52		 push	 edx
  00130	8d 4d c4	 lea	 ecx, DWORD PTR _buf$143915[ebp]
  00133	e8 00 00 00 00	 call	 ??0BufferStd@@QAE@HHPAE@Z ; BufferStd::BufferStd

; 102  : 
; 103  : 		SOL_Point pt ( originX - obj.XOrg(), originY - obj.YOrg() );

  00138	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$143910[ebp]
  0013e	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  00143	8b 4d 24	 mov	 ecx, DWORD PTR _originY$[ebp]
  00146	2b c8		 sub	 ecx, eax
  00148	51		 push	 ecx
  00149	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$143910[ebp]
  0014f	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  00154	8b 55 20	 mov	 edx, DWORD PTR _originX$[ebp]
  00157	2b d0		 sub	 edx, eax
  00159	52		 push	 edx
  0015a	8d 4d b4	 lea	 ecx, DWORD PTR _pt$143916[ebp]
  0015d	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 104  : 		SOL_Rect rect ( pt.x, pt.y, pt.x + width, pt.y + height );

  00162	8b 45 b8	 mov	 eax, DWORD PTR _pt$143916[ebp+4]
  00165	03 85 60 ff ff
	ff		 add	 eax, DWORD PTR _height$143912[ebp]
  0016b	50		 push	 eax
  0016c	8b 4d b4	 mov	 ecx, DWORD PTR _pt$143916[ebp]
  0016f	03 4d c0	 add	 ecx, DWORD PTR _width$143911[ebp]
  00172	51		 push	 ecx
  00173	8b 55 b8	 mov	 edx, DWORD PTR _pt$143916[ebp+4]
  00176	52		 push	 edx
  00177	8b 45 b4	 mov	 eax, DWORD PTR _pt$143916[ebp]
  0017a	50		 push	 eax
  0017b	8d 4d d4	 lea	 ecx, DWORD PTR _rect$143917[ebp]
  0017e	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 105  : 		SOL_Rect BMRect ( 0, 0, BMWidth - 1, BMHeight - 1 );

  00183	8b 4d 1c	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  00186	83 e9 01	 sub	 ecx, 1
  00189	51		 push	 ecx
  0018a	8b 55 18	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  0018d	83 ea 01	 sub	 edx, 1
  00190	52		 push	 edx
  00191	6a 00		 push	 0
  00193	6a 00		 push	 0
  00195	8d 4d e4	 lea	 ecx, DWORD PTR _BMRect$143918[ebp]
  00198	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 106  : 		rect.Clip ( BMRect );

  0019d	8d 45 e4	 lea	 eax, DWORD PTR _BMRect$143918[ebp]
  001a0	50		 push	 eax
  001a1	8d 4d d4	 lea	 ecx, DWORD PTR _rect$143917[ebp]
  001a4	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip

; 107  : 
; 108  : 		Bool hadSkip = obj.hasSkip;

  001a9	8b 4d a0	 mov	 ecx, DWORD PTR _obj$143910[ebp+60]
  001ac	89 4d bc	 mov	 DWORD PTR _hadSkip$143919[ebp], ecx

; 109  : 		obj.hasSkip = withSkip;

  001af	8b 55 28	 mov	 edx, DWORD PTR _withSkip$[ebp]
  001b2	89 55 a0	 mov	 DWORD PTR _obj$143910[ebp+60], edx

; 110  : 		obj.Draw ( buf, rect, pt, obj.Mirrored() );

  001b5	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$143910[ebp]
  001bb	e8 00 00 00 00	 call	 ?Mirrored@CelObj@@QBEHXZ ; CelObj::Mirrored
  001c0	50		 push	 eax
  001c1	83 ec 08	 sub	 esp, 8
  001c4	8b cc		 mov	 ecx, esp
  001c6	89 a5 58 ff ff
	ff		 mov	 DWORD PTR $T150522[ebp], esp
  001cc	8d 45 b4	 lea	 eax, DWORD PTR _pt$143916[ebp]
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  001d5	8d 4d d4	 lea	 ecx, DWORD PTR _rect$143917[ebp]
  001d8	51		 push	 ecx
  001d9	8d 55 c4	 lea	 edx, DWORD PTR _buf$143915[ebp]
  001dc	52		 push	 edx
  001dd	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$143910[ebp]
  001e3	e8 00 00 00 00	 call	 ?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjView::Draw

; 111  : 		obj.hasSkip = hadSkip;

  001e8	8b 45 bc	 mov	 eax, DWORD PTR _hadSkip$143919[ebp]
  001eb	89 45 a0	 mov	 DWORD PTR _obj$143910[ebp+60], eax

; 112  : 	}

  001ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001f5	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$143910[ebp]
  001fb	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
$L143909:

; 113  : }

  00200	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00203	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L150523:
  00000	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _obj$143910[ebp]
  00006	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0000b	c3		 ret	 0
$L150528:
  0000c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150527
  00011	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DrawView@@YAXHHHVMemID@@HHHHH@Z ENDP			; DrawView
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_this$ = -4
??0SOL_Point@@QAE@HH@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 21   : 	SOL_Point(Coord x, Coord y) : x(x), y(y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0SOL_Point@@QAE@HH@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??0SOL_Point@@QAE@ABV0@@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 22   : 	SOL_Point(const SOL_Point& p) : x(p.x), y(p.y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0SOL_Point@@QAE@ABV0@@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@XZ				; SOL_Point::SOL_Point
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
??0SOL_Rect@@QAE@HHHH@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 56   : 	A.x = xa;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 	A.y = ya;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00028	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 	B.x = xb;

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  00031	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 59   : 	B.y = yb;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  0003a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 60   : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
??0SOL_Rect@@QAE@HHHH@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Point@@QAE@XZ PROC NEAR				; SOL_Point::SOL_Point, COMDAT

; 20   : 	SOL_Point() : x(DefaultCoord), y(DefaultCoord) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 ef cd ab
	89		 mov	 DWORD PTR [eax], -1985229329 ; 89abcdefH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 ef cd
	ab 89		 mov	 DWORD PTR [ecx+4], -1985229329 ; 89abcdefH
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Point@@QAE@XZ ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
PUBLIC	?Intersect@SOL_Rect@@QBEHABV1@@Z		; SOL_Rect::Intersect
PUBLIC	?MakeEmpty@SOL_Rect@@QAEXXZ			; SOL_Rect::MakeEmpty
;	COMDAT ?Clip@SOL_Rect@@QAEXABV1@@Z
_TEXT	SEGMENT
_r$ = 8
_this$ = -4
?Clip@SOL_Rect@@QAEXABV1@@Z PROC NEAR			; SOL_Rect::Clip, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 225  : 	if (Intersect(r))  {

  00007	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Intersect@SOL_Rect@@QBEHABV1@@Z ; SOL_Rect::Intersect
  00013	85 c0		 test	 eax, eax
  00015	74 66		 je	 SHORT $L139606

; 226  : 		if (A.x < r.A.x)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  0001d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001f	3b 02		 cmp	 eax, DWORD PTR [edx]
  00021	7d 0a		 jge	 SHORT $L139607

; 227  : 			A.x = r.A.x;

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00029	8b 02		 mov	 eax, DWORD PTR [edx]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$L139607:

; 228  : 		if (A.y < r.A.y)

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00033	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00036	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00039	7d 0c		 jge	 SHORT $L139608

; 229  : 			A.y = r.A.y;

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$L139608:

; 230  : 		if (B.x > r.B.x)

  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  0004d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00050	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00053	7e 0c		 jle	 SHORT $L139609

; 231  : 			B.x = r.B.x;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  0005b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L139609:

; 232  : 		if (B.y > r.B.y)

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00067	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0006a	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  0006d	7e 0c		 jle	 SHORT $L139610

; 233  : 			B.y = r.B.y;

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00075	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00078	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L139610:

; 235  : 	else

  0007b	eb 08		 jmp	 SHORT $L139611
$L139606:

; 236  : 		MakeEmpty();

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?MakeEmpty@SOL_Rect@@QAEXXZ ; SOL_Rect::MakeEmpty
$L139611:

; 237  : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
?Clip@SOL_Rect@@QAEXABV1@@Z ENDP			; SOL_Rect::Clip
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?MakeEmpty@SOL_Rect@@QAEXXZ PROC NEAR			; SOL_Rect::MakeEmpty, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 	B.x = -1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 144  : 	B.y = -1;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 145  : 	A.x = 0;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 146  : 	A.y = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 147  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?MakeEmpty@SOL_Rect@@QAEXXZ ENDP			; SOL_Rect::MakeEmpty
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT
_r$ = 8
_this$ = -4
?Intersect@SOL_Rect@@QBEHABV1@@Z PROC NEAR		; SOL_Rect::Intersect, COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 190  : 	if (B.x < r.A.x)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0000d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00010	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00012	7d 04		 jge	 SHORT $L139589

; 191  : 		return False;

  00014	33 c0		 xor	 eax, eax
  00016	eb 3a		 jmp	 SHORT $L139588
$L139589:

; 192  : 	if (B.y < r.A.y)

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0001e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00021	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00024	7d 04		 jge	 SHORT $L139590

; 193  : 		return False;

  00026	33 c0		 xor	 eax, eax
  00028	eb 28		 jmp	 SHORT $L139588
$L139590:

; 194  : 	if (A.x > r.B.x)

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00030	8b 10		 mov	 edx, DWORD PTR [eax]
  00032	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00035	7e 04		 jle	 SHORT $L139591

; 195  : 		return False;

  00037	33 c0		 xor	 eax, eax
  00039	eb 17		 jmp	 SHORT $L139588
$L139591:

; 196  : 	if (A.y > r.B.y)

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00041	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00044	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00047	7e 04		 jle	 SHORT $L139592

; 197  : 		return False;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 05		 jmp	 SHORT $L139588
$L139592:

; 198  : 	return True;

  0004d	b8 01 00 00 00	 mov	 eax, 1
$L139588:

; 199  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Intersect@SOL_Rect@@QBEHABV1@@Z ENDP			; SOL_Rect::Intersect
_TEXT	ENDS
;	COMDAT ?Width@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Width@CelObj@@QBEHXZ PROC NEAR				; CelObj::Width, COMDAT

; 177  : 	int	Width() const			{return width;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Width@CelObj@@QBEHXZ ENDP				; CelObj::Width
_TEXT	ENDS
;	COMDAT ?Height@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Height@CelObj@@QBEHXZ PROC NEAR			; CelObj::Height, COMDAT

; 178  : 	int	Height() const			{return height;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Height@CelObj@@QBEHXZ ENDP				; CelObj::Height
_TEXT	ENDS
;	COMDAT ?XOrg@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?XOrg@CelObj@@QBEHXZ PROC NEAR				; CelObj::XOrg, COMDAT

; 179  : 	int	XOrg() const			{return xorg;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?XOrg@CelObj@@QBEHXZ ENDP				; CelObj::XOrg
_TEXT	ENDS
;	COMDAT ?YOrg@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?YOrg@CelObj@@QBEHXZ PROC NEAR				; CelObj::YOrg, COMDAT

; 180  : 	int	YOrg() const			{return yorg;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?YOrg@CelObj@@QBEHXZ ENDP				; CelObj::YOrg
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Mirrored@CelObj@@QBEHXZ PROC NEAR			; CelObj::Mirrored, COMDAT

; 187  : 	Bool	Mirrored() const		{return mirrored;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Mirrored@CelObj@@QBEHXZ ENDP				; CelObj::Mirrored
_TEXT	ENDS
PUBLIC	??1CelObj@@UAE@XZ				; CelObj::~CelObj
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObjView@@UAE@XZ PROC NEAR				; CelObjView::~CelObjView, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CelObjView@@UAE@XZ ENDP				; CelObjView::~CelObjView
_TEXT	ENDS
PUBLIC	??_7CelObj@@6B@					; CelObj::`vftable'
PUBLIC	??_GCelObj@@UAEPAXI@Z				; CelObj::`scalar deleting destructor'
PUBLIC	??_ECelObj@@UAEPAXI@Z				; CelObj::`vector deleting destructor'
EXTRN	?ReadPix@CelObj@@UAEEHHH@Z:NEAR			; CelObj::ReadPix
EXTRN	__purecall:NEAR
;	COMDAT ??_7CelObj@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\celobj.hpp
CONST	SEGMENT
??_7CelObj@@6B@ DD FLAT:??_ECelObj@@UAEPAXI@Z		; CelObj::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?ReadPix@CelObj@@UAEEHHH@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObj@@UAE@XZ PROC NEAR				; CelObj::~CelObj, COMDAT

; 173  : 	virtual	~CelObj()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CelObj@@6B@ ; CelObj::`vftable'
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1CelObj@@UAE@XZ ENDP					; CelObj::~CelObj
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCelObj@@UAEPAXI@Z PROC NEAR				; CelObj::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L140582
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L140582:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCelObj@@UAEPAXI@Z ENDP				; CelObj::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?KMorphOn@@YAXPAF@Z				; KMorphOn
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
_TEXT	SEGMENT
_args$ = 8
_i$ = -4
?KMorphOn@@YAXPAF@Z PROC NEAR				; KMorphOn

; 117  : {

  0020e	55		 push	 ebp
  0020f	8b ec		 mov	 ebp, esp
  00211	51		 push	 ecx

; 118  : 	int i = arg(1);

  00212	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00215	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00219	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx

; 119  : 	graphMgr->morphOn = 1;

  0021c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00222	c7 42 0c 01 00
	00 00		 mov	 DWORD PTR [edx+12], 1

; 120  : }

  00229	8b e5		 mov	 esp, ebp
  0022b	5d		 pop	 ebp
  0022c	c3		 ret	 0
?KMorphOn@@YAXPAF@Z ENDP				; KMorphOn
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@ABV0@@Z			; SOL_Rect::SOL_Rect
PUBLIC	?KFrameOut@@YAXPAF@Z				; KFrameOut
EXTRN	?ProcessScrolls@@YAXXZ:NEAR			; ProcessScrolls
EXTRN	?ProcessShowStyles@@YAXXZ:NEAR			; ProcessShowStyles
EXTRN	?planeScrolls@@3PAVPlaneScroll@@A:DWORD		; planeScrolls
EXTRN	?showStyles@@3PAVPlaneShowStyle@@A:DWORD	; showStyles
EXTRN	?palMorphArray@@3PADA:BYTE			; palMorphArray
_TEXT	SEGMENT
$T150553 = -20
$T150555 = -40
_args$ = 8
?KFrameOut@@YAXPAF@Z PROC NEAR				; KFrameOut

; 125  : {

  0022d	55		 push	 ebp
  0022e	8b ec		 mov	 ebp, esp
  00230	83 ec 28	 sub	 esp, 40			; 00000028H

; 126  : #ifdef NOT_SHIPPING_VERSION
; 127  : 	if (doThrashReport)
; 128  : 		memMgr->ThrashReport();
; 129  : #endif
; 130  : #ifdef DEBUG
; 131  : 	trackingFrameOut = True;
; 132  : #endif
; 133  : 
; 134  : 	if (showStyles)

  00233	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?showStyles@@3PAVPlaneShowStyle@@A, 0 ; showStyles
  0023a	74 0a		 je	 SHORT $L143928

; 135  : 		ProcessShowStyles();

  0023c	e8 00 00 00 00	 call	 ?ProcessShowStyles@@YAXXZ ; ProcessShowStyles

; 136  : 	else if (graphMgr->morphOn)	{

  00241	e9 ad 00 00 00	 jmp	 $L143936
$L143928:
  00246	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0024b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0024f	74 26		 je	 SHORT $L143930

; 137  : 		graphMgr->PalMorphFrameOut(palMorphArray);

  00251	6a 00		 push	 0
  00253	68 00 00 00 00	 push	 OFFSET FLAT:?palMorphArray@@3PADA ; palMorphArray
  00258	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0025e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00260	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00266	ff 52 24	 call	 DWORD PTR [edx+36]

; 138  : 		graphMgr->morphOn = 0;

  00269	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0026e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 140  : 	else {

  00275	eb 7c		 jmp	 SHORT $L143936
$L143930:

; 141  : 		if (planeScrolls)

  00277	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?planeScrolls@@3PAVPlaneScroll@@A, 0 ; planeScrolls
  0027e	74 05		 je	 SHORT $L143932

; 142  : 			ProcessScrolls();

  00280	e8 00 00 00 00	 call	 ?ProcessScrolls@@YAXXZ	; ProcessScrolls
$L143932:

; 143  : 		if ( argCount ) {

  00285	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00288	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0028b	85 d2		 test	 edx, edx
  0028d	74 36		 je	 SHORT $L143933

; 144  : 			graphMgr->FrameOut ( arg(1) );

  0028f	6a ff		 push	 -1
  00291	6a ff		 push	 -1
  00293	6a 00		 push	 0
  00295	6a 00		 push	 0
  00297	8d 4d ec	 lea	 ecx, DWORD PTR $T150553[ebp]
  0029a	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  0029f	83 ec 10	 sub	 esp, 16			; 00000010H
  002a2	8b cc		 mov	 ecx, esp
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  002aa	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  002ad	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  002b1	51		 push	 ecx
  002b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  002b8	8b 02		 mov	 eax, DWORD PTR [edx]
  002ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  002c0	ff 50 14	 call	 DWORD PTR [eax+20]

; 145  : 		} else {

  002c3	eb 2e		 jmp	 SHORT $L143936
$L143933:

; 146  : 			graphMgr->FrameOut();

  002c5	6a ff		 push	 -1
  002c7	6a ff		 push	 -1
  002c9	6a 00		 push	 0
  002cb	6a 00		 push	 0
  002cd	8d 4d d8	 lea	 ecx, DWORD PTR $T150555[ebp]
  002d0	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  002d5	83 ec 10	 sub	 esp, 16			; 00000010H
  002d8	8b cc		 mov	 ecx, esp
  002da	50		 push	 eax
  002db	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  002e0	6a 01		 push	 1
  002e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  002e8	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  002f0	ff 52 14	 call	 DWORD PTR [edx+20]
$L143936:

; 149  : }

  002f3	8b e5		 mov	 esp, ebp
  002f5	5d		 pop	 ebp
  002f6	c3		 ret	 0
?KFrameOut@@YAXPAF@Z ENDP				; KFrameOut
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_Rect@@QAE@ABV0@@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0SOL_Rect@@QAE@ABV0@@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
PUBLIC	??CFakeObjectID@@QBEPAUObject@@XZ		; FakeObjectID::operator->
PUBLIC	??0ObjectID@@QAE@ABV0@@Z			; ObjectID::ObjectID
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
PUBLIC	?GetIndexedProperty@ObjectID@@QBEFH@Z		; ObjectID::GetIndexedProperty
PUBLIC	?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::AddScreenItem
PUBLIC	?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ	; GraphicsMgr::NextScreen
PUBLIC	?KAddScreenItem@@YAXPAF@Z			; KAddScreenItem
PUBLIC	?SetInSIList@Object@@QAEXXZ			; Object::SetInSIList
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z:NEAR ; Screen::GetScreenItem
EXTRN	??0ScreenItem@@QAE@ABVObjectID@@@Z:NEAR		; ScreenItem::ScreenItem
EXTRN	??4ScreenItem@@QAEAAV0@ABVObjectID@@@Z:NEAR	; ScreenItem::operator=
xdata$x	SEGMENT
$T150565 DD	019930520H
	DD	01H
	DD	FLAT:$T150567
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150567 DD	0ffffffffH
	DD	FLAT:$L150563
xdata$x	ENDS
_TEXT	SEGMENT
$T150558 = -28
$T150559 = -32
$T150560 = -36
__$EHRec$ = -12
_args$ = 8
_id$ = -24
_planeId$ = -16
_si$ = -20
?KAddScreenItem@@YAXPAF@Z PROC NEAR			; KAddScreenItem

; 153  : {

  002f7	55		 push	 ebp
  002f8	8b ec		 mov	 ebp, esp
  002fa	6a ff		 push	 -1
  002fc	68 00 00 00 00	 push	 $L150566
  00301	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00307	50		 push	 eax
  00308	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0030f	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 154  : 	// Input
; 155  : 	//      arg1-----the SCI Object
; 156  : 
; 157  : 	ObjectID id = (ObjectID) arg(1);

  00312	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00315	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  00319	51		 push	 ecx
  0031a	8d 4d e4	 lea	 ecx, DWORD PTR $T150558[ebp]
  0031d	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00322	50		 push	 eax
  00323	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  00326	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID

; 158  : 
; 159  : 	extern char *gPlaneFatalStr;
; 160  : 
; 161  : 	int planeId = id.GetIndexedProperty(actPlaneID);

  0032b	6a 1a		 push	 26			; 0000001aH
  0032d	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  00330	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00335	0f bf d0	 movsx	 edx, ax
  00338	89 55 f0	 mov	 DWORD PTR _planeId$[ebp], edx

; 162  : 	id->SetInSIList();

  0033b	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  0033e	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  00343	8b c8		 mov	 ecx, eax
  00345	e8 00 00 00 00	 call	 ?SetInSIList@Object@@QAEXXZ ; Object::SetInSIList

; 163  : 
; 164  : #if 0
; 165  : 	PlaneList *planes = &graphMgr->NextScreen()->Planes();
; 166  : 	int size = planes->Length();
; 167  : 
; 168  : 	for ( int i=0; i<size; i++ ) {
; 169  : 		SOL_Plane *plane = &(*planes)[i];
; 170  : 
; 171  : 		if ( plane->Id() != planeId ) {
; 172  : 			ScreenItem *theSI = graphMgr->NextScreen()->GetScreenItem ( plane->Id(), id );
; 173  : 
; 174  : 			if ( theSI )
; 175  : 				graphMgr->DeleteScreenItem ( theSI, plane->Id() );
; 176  : //				msgMgr->Fatal ( "Object (0x%x) added into two planes! (supposed to be in 0x%x, found in 0x%x)", id, planeId, plane->Id() );
; 177  : 		}
; 178  : 	}
; 179  : #endif
; 180  : 
; 181  : 	ScreenItem* si = graphMgr->NextScreen()->GetScreenItem(planeId,id);

  0034a	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  0034d	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00352	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00357	50		 push	 eax
  00358	8b 45 f0	 mov	 eax, DWORD PTR _planeId$[ebp]
  0035b	50		 push	 eax
  0035c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00362	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  00367	8b c8		 mov	 ecx, eax
  00369	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  0036e	89 45 ec	 mov	 DWORD PTR _si$[ebp], eax

; 182  : 
; 183  : 	if (si == NULL) {

  00371	83 7d ec 00	 cmp	 DWORD PTR _si$[ebp], 0
  00375	75 59		 jne	 SHORT $L143948

; 184  : 		si = New ScreenItem(id);

  00377	68 98 00 00 00	 push	 152			; 00000098H
  0037c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00381	83 c4 04	 add	 esp, 4
  00384	89 45 dc	 mov	 DWORD PTR $T150560[ebp], eax
  00387	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0038e	83 7d dc 00	 cmp	 DWORD PTR $T150560[ebp], 0
  00392	74 11		 je	 SHORT $L150561
  00394	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  00397	51		 push	 ecx
  00398	8b 4d dc	 mov	 ecx, DWORD PTR $T150560[ebp]
  0039b	e8 00 00 00 00	 call	 ??0ScreenItem@@QAE@ABVObjectID@@@Z ; ScreenItem::ScreenItem
  003a0	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
  003a3	eb 07		 jmp	 SHORT $L150562
$L150561:
  003a5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR -40+[ebp], 0
$L150562:
  003ac	8b 55 d8	 mov	 edx, DWORD PTR -40+[ebp]
  003af	89 55 e0	 mov	 DWORD PTR $T150559[ebp], edx
  003b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003b9	8b 45 e0	 mov	 eax, DWORD PTR $T150559[ebp]
  003bc	89 45 ec	 mov	 DWORD PTR _si$[ebp], eax

; 185  : 
; 186  : 		// add the screen item
; 187  : 		graphMgr->AddScreenItem(si);

  003bf	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  003c2	51		 push	 ecx
  003c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  003c9	e8 00 00 00 00	 call	 ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::AddScreenItem

; 189  : 	else {

  003ce	eb 0c		 jmp	 SHORT $L143953
$L143948:

; 190  : 		// Change to update
; 191  : 		*si = id;

  003d0	8d 55 e8	 lea	 edx, DWORD PTR _id$[ebp]
  003d3	52		 push	 edx
  003d4	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp]
  003d7	e8 00 00 00 00	 call	 ??4ScreenItem@@QAEAAV0@ABVObjectID@@@Z ; ScreenItem::operator=
$L143953:

; 193  : }

  003dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  003e6	8b e5		 mov	 esp, ebp
  003e8	5d		 pop	 ebp
  003e9	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L150563:
  00016	8b 45 dc	 mov	 eax, DWORD PTR $T150560[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	c3		 ret	 0
$L150566:
  00021	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150565
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KAddScreenItem@@YAXPAF@Z ENDP				; KAddScreenItem
;	COMDAT ?SetInSIList@Object@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?SetInSIList@Object@@QAEXXZ PROC NEAR			; Object::SetInSIList, COMDAT

; 99   : 	void		SetInSIList()				{ info |= IN_SILIST; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  0000e	80 c9 10	 or	 cl, 16			; 00000010H
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?SetInSIList@Object@@QAEXXZ ENDP			; Object::SetInSIList
_TEXT	ENDS
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeObjectID@@QBEPAUObject@@XZ PROC NEAR		; FakeObjectID::operator->, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeObjectID@@QBEPAUObject@@XZ ENDP			; FakeObjectID::operator->
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@ABVMemID@@@Z		; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ObjectID@@QAE@ABV0@@Z PROC NEAR			; ObjectID::ObjectID, COMDAT

; 229  : 	ObjectID(const ObjectID& id) : FakeObjectID((MemID&) id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@ABVMemID@@@Z ; FakeObjectID::FakeObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ObjectID@@QAE@ABV0@@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0FakeObjectID@@QAE@ABVMemID@@@Z PROC NEAR		; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@ABVMemID@@@Z ENDP			; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
PUBLIC	?AssureValid@ObjectID@@QBEXXZ			; ObjectID::AssureValid
PUBLIC	?GetIndexedProperty@Object@@QAEFH@Z		; Object::GetIndexedProperty
;	COMDAT ?GetIndexedProperty@ObjectID@@QBEFH@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
?GetIndexedProperty@ObjectID@@QBEFH@Z PROC NEAR		; ObjectID::GetIndexedProperty, COMDAT

; 266  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 267  : 		//	get a property given an index in the property offsets table
; 268  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 269  : 		return (*this)->GetIndexedProperty(index);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001b	8b c8		 mov	 ecx, eax
  0001d	e8 00 00 00 00	 call	 ?GetIndexedProperty@Object@@QAEFH@Z ; Object::GetIndexedProperty

; 270  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetIndexedProperty@ObjectID@@QBEFH@Z ENDP		; ObjectID::GetIndexedProperty
_TEXT	ENDS
PUBLIC	?GetIndexedPropAddr@Object@@QAEPBFH@Z		; Object::GetIndexedPropAddr
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT
_this$ = -4
_index$ = 8
?GetIndexedProperty@Object@@QAEFH@Z PROC NEAR		; Object::GetIndexedProperty, COMDAT

; 146  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 147  : 		//	get a property given an index in the property offsets table
; 148  : 		return *GetIndexedPropAddr(index);

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetIndexedPropAddr@Object@@QAEPBFH@Z ; Object::GetIndexedPropAddr
  00013	66 8b 00	 mov	 ax, WORD PTR [eax]

; 149  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetIndexedProperty@Object@@QAEFH@Z ENDP		; Object::GetIndexedProperty
_TEXT	ENDS
PUBLIC	??AObject@@QAEAAFH@Z				; Object::operator[]
EXTRN	?indexedPropertyOffsets@@3PAIA:BYTE		; indexedPropertyOffsets
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT
_this$ = -4
_index$ = 8
?GetIndexedPropAddr@Object@@QAEPBFH@Z PROC NEAR		; Object::GetIndexedPropAddr, COMDAT

; 138  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 139  : 		//	get a property address given an index into the property offsets table
; 140  : 		extern size_t indexedPropertyOffsets[];
; 141  : 		return &(*this)[indexedPropertyOffsets[index]];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?indexedPropertyOffsets@@3PAIA[eax*4]
  00011	51		 push	 ecx
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??AObject@@QAEAAFH@Z	; Object::operator[]

; 142  : 	}

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetIndexedPropAddr@Object@@QAEPBFH@Z ENDP		; Object::GetIndexedPropAddr
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT
_this$ = -4
_index$ = 8
??AObject@@QAEAAFH@Z PROC NEAR				; Object::operator[], COMDAT

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		//	get a reference to a property given the number of the property
; 119  : 		return ((Property*) this)[index];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 120  : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??AObject@@QAEAAFH@Z ENDP				; Object::operator[]
_TEXT	ENDS
PUBLIC	?IsObject@ObjectID@@QBEHXZ			; ObjectID::IsObject
EXTRN	?Fatal@MsgMgr@@QAAXHZZ:NEAR			; MsgMgr::Fatal
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssureValid@ObjectID@@QBEXXZ PROC NEAR			; ObjectID::AssureValid, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 239  : 		if (!IsObject())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  0000f	85 c0		 test	 eax, eax
  00011	75 1e		 jne	 SHORT $L116924

; 240  : 			msgMgr->Fatal(Msg_NotObject, (int) *this);

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0001b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00020	50		 push	 eax
  00021	6a 2f		 push	 47			; 0000002fH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L116924:

; 241  : 	}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?AssureValid@ObjectID@@QBEXXZ ENDP			; ObjectID::AssureValid
_TEXT	ENDS
PUBLIC	?IsValid@MemID@@QBEHXZ				; MemID::IsValid
EXTRN	?GetMemType@MemID@@QBE?AW4MemType@@XZ:NEAR	; MemID::GetMemType
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsObject@ObjectID@@QBEHXZ PROC NEAR			; ObjectID::IsObject, COMDAT

; 247  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 		return IsValid() && GetMemType() == MemObject;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00011	85 c0		 test	 eax, eax
  00013	74 16		 je	 SHORT $L150583
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0001d	83 f8 34	 cmp	 eax, 52			; 00000034H
  00020	75 09		 jne	 SHORT $L150583
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  00029	eb 07		 jmp	 SHORT $L150584
$L150583:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L150584:
  00032	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 249  : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?IsObject@ObjectID@@QBEHXZ ENDP				; ObjectID::IsObject
_TEXT	ENDS
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@MemID@@QBEHXZ PROC NEAR			; MemID::IsValid, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return memMgr->IsValid(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid

; 64   : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IsValid@MemID@@QBEHXZ ENDP				; MemID::IsValid
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L150587
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L150587
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L150587
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L150587
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L150588
$L150587:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L150588:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
EXTRN	?AddScreenItem@Screen@@QAEXPAVScreenItem@@@Z:NEAR ; Screen::AddScreenItem
;	COMDAT ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z
_TEXT	SEGMENT
_si$ = 8
_this$ = -4
?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z PROC NEAR ; GraphicsMgr::AddScreenItem, COMDAT

; 60   : 	void		AddScreenItem(ScreenItem* si)		{next.AddScreenItem(si);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e8 00 00 00 00	 call	 ?AddScreenItem@Screen@@QAEXPAVScreenItem@@@Z ; Screen::AddScreenItem
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ENDP	; GraphicsMgr::AddScreenItem
_TEXT	ENDS
;	COMDAT ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ
_TEXT	SEGMENT
_this$ = -4
?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ PROC NEAR	; GraphicsMgr::NextScreen, COMDAT

; 72   : 	Screen*	NextScreen() 							{return &next;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 14	 add	 eax, 20			; 00000014H
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ENDP		; GraphicsMgr::NextScreen
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@XZ				; SOL_Rect::SOL_Rect
PUBLIC	?Id@ScreenItem@@QBEJXZ				; ScreenItem::Id
PUBLIC	?SetPriority@ScreenItem@@QAEXH@Z		; ScreenItem::SetPriority
PUBLIC	?BuildLineBitmap@@YA?AVMemID@@HHHHEHHHAAVSOL_Rect@@@Z ; BuildLineBitmap
PUBLIC	??0Bitmap@@QAE@VMemID@@@Z			; Bitmap::Bitmap
PUBLIC	?KAddLine@@YAXPAF@Z				; KAddLine
EXTRN	??0ScreenItem@@QAE@JABVBitmap@@ABVSOL_Rect@@@Z:NEAR ; ScreenItem::ScreenItem
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
xdata$x	SEGMENT
$T150600 DD	019930520H
	DD	01H
	DD	FLAT:$T150602
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150602 DD	0ffffffffH
	DD	FLAT:$L150598
xdata$x	ENDS
_TEXT	SEGMENT
$T150592 = -80
$T150593 = -84
$T150594 = -88
$T150595 = -92
__$EHRec$ = -12
_args$ = 8
_z$ = -64
_color$ = -52
_style$ = -76
_pattern$ = -68
_thickness$ = -56
_rect$ = -28
_BM$ = -60
_bitmap$ = -48
_si$ = -72
?KAddLine@@YAXPAF@Z PROC NEAR				; KAddLine

; 197  : {

  003ea	55		 push	 ebp
  003eb	8b ec		 mov	 ebp, esp
  003ed	6a ff		 push	 -1
  003ef	68 00 00 00 00	 push	 $L150601
  003f4	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  003fa	50		 push	 eax
  003fb	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00402	83 ec 54	 sub	 esp, 84			; 00000054H

; 198  : 	// Input
; 199  : 	//      arg1-----SOL_Plane ID
; 200  : 	//      arg2-----Point A.x
; 201  : 	//      arg3-----Point A.y
; 202  : 	//      arg4-----Point B.x
; 203  : 	//      arg5-----Point B.y
; 204  : 	//		  The following arguments are optional (all or none)
; 205  : 	//      arg6-----z (priority)
; 206  : 	//      arg7-----color
; 207  : 	//      arg8-----style  Solid=0,Dashed=1,Pattern=2
; 208  : 	//      arg9-----pattern
; 209  : 	//      arg10----thickness = 2n+1 (1->1,2->1,3->3,4->3,5->5 etc.)
; 210  : 	// Output
; 211  : 	//		  pm.acc = id for line screen item
; 212  : 
; 213  : 	int	z = 1000;

  00405	c7 45 c0 e8 03
	00 00		 mov	 DWORD PTR _z$[ebp], 1000 ; 000003e8H

; 214  : 	uchar	color = SOL_WHITE;

  0040c	c6 45 cc ff	 mov	 BYTE PTR _color$[ebp], 255 ; 000000ffH

; 215  : 	int	style = SOL_Line::tSolid;

  00410	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _style$[ebp], 0

; 216  : 	int	pattern = 0;

  00417	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _pattern$[ebp], 0

; 217  : 	int	thickness = 1;

  0041e	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _thickness$[ebp], 1

; 218  : 
; 219  : 	SOL_Rect rect;

  00425	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00428	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 220  : 	if (argCount == 10) {

  0042d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00430	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00433	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00436	75 31		 jne	 SHORT $L143963

; 221  : 		// No default arguments
; 222  : 		z = arg(6);

  00438	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0043b	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  0043f	89 45 c0	 mov	 DWORD PTR _z$[ebp], eax

; 223  : 		color = arg(7);

  00442	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00445	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  00448	88 55 cc	 mov	 BYTE PTR _color$[ebp], dl

; 224  : 		style = arg(8);

  0044b	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0044e	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00452	89 4d b4	 mov	 DWORD PTR _style$[ebp], ecx

; 225  : 		pattern = arg(9);

  00455	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00458	0f bf 42 12	 movsx	 eax, WORD PTR [edx+18]
  0045c	89 45 bc	 mov	 DWORD PTR _pattern$[ebp], eax

; 226  : 		thickness = arg(10);

  0045f	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00462	0f bf 51 14	 movsx	 edx, WORD PTR [ecx+20]
  00466	89 55 c8	 mov	 DWORD PTR _thickness$[ebp], edx
$L143963:

; 228  : 		
; 229  : 	// Convert 16 bit pattern to 32 bit pattern
; 230  : 	pattern |= pattern << 16;

  00469	8b 45 bc	 mov	 eax, DWORD PTR _pattern$[ebp]
  0046c	c1 e0 10	 shl	 eax, 16			; 00000010H
  0046f	8b 4d bc	 mov	 ecx, DWORD PTR _pattern$[ebp]
  00472	0b c8		 or	 ecx, eax
  00474	89 4d bc	 mov	 DWORD PTR _pattern$[ebp], ecx

; 231  : 
; 232  : 	MemID BM = BuildLineBitmap(arg(2),
; 233  : 										arg(3),
; 234  : 										arg(4),
; 235  : 										arg(5),
; 236  : 										color,
; 237  : 										style,
; 238  : 										pattern,
; 239  : 										thickness,
; 240  : 										rect);

  00477	8d 55 e4	 lea	 edx, DWORD PTR _rect$[ebp]
  0047a	52		 push	 edx
  0047b	8b 45 c8	 mov	 eax, DWORD PTR _thickness$[ebp]
  0047e	50		 push	 eax
  0047f	8b 4d bc	 mov	 ecx, DWORD PTR _pattern$[ebp]
  00482	51		 push	 ecx
  00483	8b 55 b4	 mov	 edx, DWORD PTR _style$[ebp]
  00486	52		 push	 edx
  00487	8a 45 cc	 mov	 al, BYTE PTR _color$[ebp]
  0048a	50		 push	 eax
  0048b	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0048e	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  00492	52		 push	 edx
  00493	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00496	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0049a	51		 push	 ecx
  0049b	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0049e	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  004a2	50		 push	 eax
  004a3	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  004a6	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  004aa	52		 push	 edx
  004ab	8d 45 b0	 lea	 eax, DWORD PTR $T150592[ebp]
  004ae	50		 push	 eax
  004af	e8 00 00 00 00	 call	 ?BuildLineBitmap@@YA?AVMemID@@HHHHEHHHAAVSOL_Rect@@@Z ; BuildLineBitmap
  004b4	83 c4 28	 add	 esp, 40			; 00000028H
  004b7	50		 push	 eax
  004b8	8d 4d c4	 lea	 ecx, DWORD PTR _BM$[ebp]
  004bb	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 241  : 
; 242  : 	Bitmap bitmap(BM);

  004c0	51		 push	 ecx
  004c1	8b cc		 mov	 ecx, esp
  004c3	89 65 ac	 mov	 DWORD PTR $T150593[ebp], esp
  004c6	8d 55 c4	 lea	 edx, DWORD PTR _BM$[ebp]
  004c9	52		 push	 edx
  004ca	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  004cf	8d 4d d0	 lea	 ecx, DWORD PTR _bitmap$[ebp]
  004d2	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@VMemID@@@Z ; Bitmap::Bitmap

; 243  : 	ScreenItem* si = New ScreenItem(arg(1),bitmap,rect);

  004d7	68 98 00 00 00	 push	 152			; 00000098H
  004dc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  004e1	83 c4 04	 add	 esp, 4
  004e4	89 45 a4	 mov	 DWORD PTR $T150595[ebp], eax
  004e7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  004ee	83 7d a4 00	 cmp	 DWORD PTR $T150595[ebp], 0
  004f2	74 1d		 je	 SHORT $L150596
  004f4	8d 45 e4	 lea	 eax, DWORD PTR _rect$[ebp]
  004f7	50		 push	 eax
  004f8	8d 4d d0	 lea	 ecx, DWORD PTR _bitmap$[ebp]
  004fb	51		 push	 ecx
  004fc	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  004ff	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00503	50		 push	 eax
  00504	8b 4d a4	 mov	 ecx, DWORD PTR $T150595[ebp]
  00507	e8 00 00 00 00	 call	 ??0ScreenItem@@QAE@JABVBitmap@@ABVSOL_Rect@@@Z ; ScreenItem::ScreenItem
  0050c	89 45 a0	 mov	 DWORD PTR -96+[ebp], eax
  0050f	eb 07		 jmp	 SHORT $L150597
$L150596:
  00511	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR -96+[ebp], 0
$L150597:
  00518	8b 4d a0	 mov	 ecx, DWORD PTR -96+[ebp]
  0051b	89 4d a8	 mov	 DWORD PTR $T150594[ebp], ecx
  0051e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00525	8b 55 a8	 mov	 edx, DWORD PTR $T150594[ebp]
  00528	89 55 b8	 mov	 DWORD PTR _si$[ebp], edx

; 244  : 	si->SetPriority(z);

  0052b	8b 45 c0	 mov	 eax, DWORD PTR _z$[ebp]
  0052e	50		 push	 eax
  0052f	8b 4d b8	 mov	 ecx, DWORD PTR _si$[ebp]
  00532	e8 00 00 00 00	 call	 ?SetPriority@ScreenItem@@QAEXH@Z ; ScreenItem::SetPriority

; 245  : 	si->color = color;

  00537	8b 4d b8	 mov	 ecx, DWORD PTR _si$[ebp]
  0053a	8a 55 cc	 mov	 dl, BYTE PTR _color$[ebp]
  0053d	88 51 30	 mov	 BYTE PTR [ecx+48], dl

; 246  : 
; 247  : 	// add the screen item
; 248  : 	graphMgr->AddScreenItem(si);

  00540	8b 45 b8	 mov	 eax, DWORD PTR _si$[ebp]
  00543	50		 push	 eax
  00544	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0054a	e8 00 00 00 00	 call	 ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::AddScreenItem

; 249  : 
; 250  : 	pm.acc = si->Id();

  0054f	8b 4d b8	 mov	 ecx, DWORD PTR _si$[ebp]
  00552	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  00557	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 251  : }

  0055c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0055f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00566	8b e5		 mov	 esp, ebp
  00568	5d		 pop	 ebp
  00569	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L150598:
  0002b	8b 45 a4	 mov	 eax, DWORD PTR $T150595[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00034	59		 pop	 ecx
  00035	c3		 ret	 0
$L150601:
  00036	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150600
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KAddLine@@YAXPAF@Z ENDP				; KAddLine
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Rect@@QAE@XZ PROC NEAR				; SOL_Rect::SOL_Rect, COMDAT

; 13   : 	SOL_Rect()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Rect@@QAE@XZ ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0Bitmap@@QAE@VMemID@@@Z PROC NEAR			; Bitmap::Bitmap, COMDAT

; 128  : 	Bitmap(const MemID id)									{view = loop = cel = 0; type = tMem; memid = id;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	66 8b 55 08	 mov	 dx, WORD PTR _id$[ebp]
  00040	66 89 51 10	 mov	 WORD PTR [ecx+16], dx
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
??0Bitmap@@QAE@VMemID@@@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ?Id@ScreenItem@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Id@ScreenItem@@QBEJXZ PROC NEAR			; ScreenItem::Id, COMDAT

; 61   : 	long			Id() const					{return id;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Id@ScreenItem@@QBEJXZ ENDP				; ScreenItem::Id
_TEXT	ENDS
;	COMDAT ?SetPriority@ScreenItem@@QAEXH@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
?SetPriority@ScreenItem@@QAEXH@Z PROC NEAR		; ScreenItem::SetPriority, COMDAT

; 100  : 	void			SetPriority(int p)		{priority = p; fixedPriFlag = True;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	c7 42 44 01 00
	00 00		 mov	 DWORD PTR [edx+68], 1
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetPriority@ScreenItem@@QAEXH@Z ENDP			; ScreenItem::SetPriority
_TEXT	ENDS
PUBLIC	?GetProperty@ObjectID@@QBEFG@Z			; ObjectID::GetProperty
PUBLIC	??0SOL_ListID@@QAE@G@Z				; SOL_ListID::SOL_ListID
PUBLIC	??0SOL_ListID@@QAE@ABU0@@Z			; SOL_ListID::SOL_ListID
PUBLIC	?BuildPolygonBitmap@@YA?AVMemID@@USOL_ListID@@EHHHAAVSOL_Rect@@H@Z ; BuildPolygonBitmap
PUBLIC	?KAddPolygon@@YAXPAF@Z				; KAddPolygon
EXTRN	?Mono@MsgMgr@@QAAXPADZZ:NEAR			; MsgMgr::Mono
_DATA	SEGMENT
	ORG $+2
$SG143996 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG143997 DB	'%s(%d)', 0aH, 00H
$SG143998 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG143999 DB	'%s(%d)', 0aH, 00H
_DATA	ENDS
xdata$x	SEGMENT
$T150618 DD	019930520H
	DD	01H
	DD	FLAT:$T150620
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150620 DD	0ffffffffH
	DD	FLAT:$L150616
xdata$x	ENDS
_TEXT	SEGMENT
$T150609 = -92
$T150610 = -96
$T150611 = -100
$T150612 = -104
$T150613 = -108
__$EHRec$ = -12
_args$ = 8
_z$ = -68
_color$ = -56
_style$ = -88
_pattern$ = -72
_thickness$ = -60
_close$ = -52
_rect$ = -28
_id$ = -84
_theList$ = -80
_BM$ = -64
_bitmap$ = -48
_si$ = -76
?KAddPolygon@@YAXPAF@Z PROC NEAR			; KAddPolygon

; 255  : {

  0056a	55		 push	 ebp
  0056b	8b ec		 mov	 ebp, esp
  0056d	6a ff		 push	 -1
  0056f	68 00 00 00 00	 push	 $L150619
  00574	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0057a	50		 push	 eax
  0057b	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00582	83 ec 64	 sub	 esp, 100		; 00000064H

; 256  : 	// Input
; 257  : 	//      arg1-----SOL_Plane ID
; 258  : 	//      arg2-----Polygon list MemID
; 259  : 	//		  The following arguments are optional (all or none)
; 260  : 	//      arg3-----z (priority)
; 261  : 	//      arg4-----color
; 262  : 	//      arg5-----style  Solid=0,Dashed=1,Pattern=2
; 263  : 	//      arg6-----pattern
; 264  : 	//      arg7-----thickness = 2n+1 (1->1,2->1,3->3,4->3,5->5 etc.)
; 265  : 	//      arg8-----close (True close polygon, False leave open)
; 266  : 	// Output
; 267  : 	//		  pm.acc = id for polygon screen item
; 268  : 
; 269  : 	int	z = 1000;

  00585	c7 45 bc e8 03
	00 00		 mov	 DWORD PTR _z$[ebp], 1000 ; 000003e8H

; 270  : 	uchar	color = SOL_WHITE;

  0058c	c6 45 c8 ff	 mov	 BYTE PTR _color$[ebp], 255 ; 000000ffH

; 271  : 	int	style = SOL_Line::tSolid;

  00590	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _style$[ebp], 0

; 272  : 	int	pattern = 0;

  00597	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _pattern$[ebp], 0

; 273  : 	int	thickness = 1;

  0059e	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _thickness$[ebp], 1

; 274  : 	Bool	close = True;

  005a5	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _close$[ebp], 1

; 275  : 
; 276  : 	if (argCount == 8) {

  005ac	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  005af	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  005b2	83 f9 08	 cmp	 ecx, 8
  005b5	75 3b		 jne	 SHORT $L143982

; 277  : 		// No default arguments
; 278  : 		z = arg(3);

  005b7	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  005ba	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  005be	89 45 bc	 mov	 DWORD PTR _z$[ebp], eax

; 279  : 		color = arg(4);

  005c1	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  005c4	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  005c7	88 55 c8	 mov	 BYTE PTR _color$[ebp], dl

; 280  : 		style = arg(5);

  005ca	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  005cd	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  005d1	89 4d a8	 mov	 DWORD PTR _style$[ebp], ecx

; 281  : 		pattern = arg(6);

  005d4	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  005d7	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  005db	89 45 b8	 mov	 DWORD PTR _pattern$[ebp], eax

; 282  : 		thickness = arg(7);

  005de	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  005e1	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  005e5	89 55 c4	 mov	 DWORD PTR _thickness$[ebp], edx

; 283  : 		close = arg(8);

  005e8	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  005eb	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  005ef	89 4d cc	 mov	 DWORD PTR _close$[ebp], ecx
$L143982:

; 285  : 		
; 286  : 	// Convert 16 bit pattern to 32 bit pattern
; 287  : 	pattern |= pattern << 16;

  005f2	8b 55 b8	 mov	 edx, DWORD PTR _pattern$[ebp]
  005f5	c1 e2 10	 shl	 edx, 16			; 00000010H
  005f8	8b 45 b8	 mov	 eax, DWORD PTR _pattern$[ebp]
  005fb	0b c2		 or	 eax, edx
  005fd	89 45 b8	 mov	 DWORD PTR _pattern$[ebp], eax

; 288  : 
; 289  : 	SOL_Rect rect(100000,100000,-100000,-100000);

  00600	68 60 79 fe ff	 push	 -100000			; fffe7960H
  00605	68 60 79 fe ff	 push	 -100000			; fffe7960H
  0060a	68 a0 86 01 00	 push	 100000			; 000186a0H
  0060f	68 a0 86 01 00	 push	 100000			; 000186a0H
  00614	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00617	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 290  : 
; 291  :    ObjectID id = arg(2);

  0061c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0061f	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  00623	52		 push	 edx
  00624	8d 4d ac	 lea	 ecx, DWORD PTR _id$[ebp]
  00627	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 292  : 	SOL_ListID theList = id.GetProperty(s_elements);

  0062c	6a 24		 push	 36			; 00000024H
  0062e	8d 4d ac	 lea	 ecx, DWORD PTR _id$[ebp]
  00631	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00636	50		 push	 eax
  00637	8d 4d b0	 lea	 ecx, DWORD PTR _theList$[ebp]
  0063a	e8 00 00 00 00	 call	 ??0SOL_ListID@@QAE@G@Z	; SOL_ListID::SOL_ListID

; 293  : 
; 294  : 	MemID BM = BuildPolygonBitmap(theList,
; 295  : 										color,
; 296  : 										style,
; 297  : 										pattern,
; 298  : 										thickness,
; 299  : 										rect,
; 300  : 										close);

  0063f	8b 45 cc	 mov	 eax, DWORD PTR _close$[ebp]
  00642	50		 push	 eax
  00643	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  00646	51		 push	 ecx
  00647	8b 55 c4	 mov	 edx, DWORD PTR _thickness$[ebp]
  0064a	52		 push	 edx
  0064b	8b 45 b8	 mov	 eax, DWORD PTR _pattern$[ebp]
  0064e	50		 push	 eax
  0064f	8b 4d a8	 mov	 ecx, DWORD PTR _style$[ebp]
  00652	51		 push	 ecx
  00653	8a 55 c8	 mov	 dl, BYTE PTR _color$[ebp]
  00656	52		 push	 edx
  00657	51		 push	 ecx
  00658	8b cc		 mov	 ecx, esp
  0065a	89 65 a4	 mov	 DWORD PTR $T150609[ebp], esp
  0065d	8d 45 b0	 lea	 eax, DWORD PTR _theList$[ebp]
  00660	50		 push	 eax
  00661	e8 00 00 00 00	 call	 ??0SOL_ListID@@QAE@ABU0@@Z ; SOL_ListID::SOL_ListID
  00666	8d 4d a0	 lea	 ecx, DWORD PTR $T150610[ebp]
  00669	51		 push	 ecx
  0066a	e8 00 00 00 00	 call	 ?BuildPolygonBitmap@@YA?AVMemID@@USOL_ListID@@EHHHAAVSOL_Rect@@H@Z ; BuildPolygonBitmap
  0066f	83 c4 20	 add	 esp, 32			; 00000020H
  00672	50		 push	 eax
  00673	8d 4d c0	 lea	 ecx, DWORD PTR _BM$[ebp]
  00676	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 301  : 
; 302  : 	Bitmap bitmap(BM);

  0067b	51		 push	 ecx
  0067c	8b cc		 mov	 ecx, esp
  0067e	89 65 9c	 mov	 DWORD PTR $T150611[ebp], esp
  00681	8d 55 c0	 lea	 edx, DWORD PTR _BM$[ebp]
  00684	52		 push	 edx
  00685	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0068a	8d 4d d0	 lea	 ecx, DWORD PTR _bitmap$[ebp]
  0068d	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@VMemID@@@Z ; Bitmap::Bitmap

; 303  : 	ScreenItem* si = New ScreenItem(arg(1),bitmap,rect);

  00692	68 98 00 00 00	 push	 152			; 00000098H
  00697	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0069c	83 c4 04	 add	 esp, 4
  0069f	89 45 94	 mov	 DWORD PTR $T150613[ebp], eax
  006a2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  006a9	83 7d 94 00	 cmp	 DWORD PTR $T150613[ebp], 0
  006ad	74 1d		 je	 SHORT $L150614
  006af	8d 45 e4	 lea	 eax, DWORD PTR _rect$[ebp]
  006b2	50		 push	 eax
  006b3	8d 4d d0	 lea	 ecx, DWORD PTR _bitmap$[ebp]
  006b6	51		 push	 ecx
  006b7	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  006ba	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  006be	50		 push	 eax
  006bf	8b 4d 94	 mov	 ecx, DWORD PTR $T150613[ebp]
  006c2	e8 00 00 00 00	 call	 ??0ScreenItem@@QAE@JABVBitmap@@ABVSOL_Rect@@@Z ; ScreenItem::ScreenItem
  006c7	89 45 90	 mov	 DWORD PTR -112+[ebp], eax
  006ca	eb 07		 jmp	 SHORT $L150615
$L150614:
  006cc	c7 45 90 00 00
	00 00		 mov	 DWORD PTR -112+[ebp], 0
$L150615:
  006d3	8b 4d 90	 mov	 ecx, DWORD PTR -112+[ebp]
  006d6	89 4d 98	 mov	 DWORD PTR $T150612[ebp], ecx
  006d9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006e0	8b 55 98	 mov	 edx, DWORD PTR $T150612[ebp]
  006e3	89 55 b4	 mov	 DWORD PTR _si$[ebp], edx

; 304  : 	si->SetPriority(z);

  006e6	8b 45 bc	 mov	 eax, DWORD PTR _z$[ebp]
  006e9	50		 push	 eax
  006ea	8b 4d b4	 mov	 ecx, DWORD PTR _si$[ebp]
  006ed	e8 00 00 00 00	 call	 ?SetPriority@ScreenItem@@QAEXH@Z ; ScreenItem::SetPriority

; 305  : 	si->color = color;

  006f2	8b 4d b4	 mov	 ecx, DWORD PTR _si$[ebp]
  006f5	8a 55 c8	 mov	 dl, BYTE PTR _color$[ebp]
  006f8	88 51 30	 mov	 BYTE PTR [ecx+48], dl

; 306  : 
; 307  : 	// add the screen item
; 308  : 	graphMgr->AddScreenItem(si);

  006fb	8b 45 b4	 mov	 eax, DWORD PTR _si$[ebp]
  006fe	50		 push	 eax
  006ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00705	e8 00 00 00 00	 call	 ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::AddScreenItem

; 309  : 	msgMgr->Mono ( "%s(%d)\n", __FILE__, __LINE__ );

  0070a	68 35 01 00 00	 push	 309			; 00000135H
  0070f	68 00 00 00 00	 push	 OFFSET FLAT:$SG143996
  00714	68 00 00 00 00	 push	 OFFSET FLAT:$SG143997
  00719	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0071f	51		 push	 ecx
  00720	e8 00 00 00 00	 call	 ?Mono@MsgMgr@@QAAXPADZZ	; MsgMgr::Mono
  00725	83 c4 10	 add	 esp, 16			; 00000010H

; 310  : 	pm.acc = si->Id();

  00728	8b 4d b4	 mov	 ecx, DWORD PTR _si$[ebp]
  0072b	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  00730	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 311  : 	msgMgr->Mono ( "%s(%d)\n", __FILE__, __LINE__ );

  00735	68 37 01 00 00	 push	 311			; 00000137H
  0073a	68 00 00 00 00	 push	 OFFSET FLAT:$SG143998
  0073f	68 00 00 00 00	 push	 OFFSET FLAT:$SG143999
  00744	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0074a	52		 push	 edx
  0074b	e8 00 00 00 00	 call	 ?Mono@MsgMgr@@QAAXPADZZ	; MsgMgr::Mono
  00750	83 c4 10	 add	 esp, 16			; 00000010H

; 312  : }

  00753	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00756	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0075d	8b e5		 mov	 esp, ebp
  0075f	5d		 pop	 ebp
  00760	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L150616:
  00040	8b 45 94	 mov	 eax, DWORD PTR $T150613[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00049	59		 pop	 ecx
  0004a	c3		 ret	 0
$L150619:
  0004b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150618
  00050	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KAddPolygon@@YAXPAF@Z ENDP				; KAddPolygon
PUBLIC	??0FakeSOL_ListID@@QAE@G@Z			; FakeSOL_ListID::FakeSOL_ListID
;	COMDAT ??0SOL_ListID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0SOL_ListID@@QAE@G@Z PROC NEAR			; SOL_ListID::SOL_ListID, COMDAT

; 88   : 	SOL_ListID(SOL_Handle h) : FakeSOL_ListID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeSOL_ListID@@QAE@G@Z ; FakeSOL_ListID::FakeSOL_ListID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0SOL_ListID@@QAE@G@Z ENDP				; SOL_ListID::SOL_ListID
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeSOL_ListID@@QAE@G@Z PROC NEAR			; FakeSOL_ListID::FakeSOL_ListID, COMDAT

; 84   : FakeTemplateID(FakeSOL_ListID, SOL_List, MemList)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeSOL_ListID@@QAE@G@Z ENDP				; FakeSOL_ListID::FakeSOL_ListID
_TEXT	ENDS
PUBLIC	?GetProperty@Object@@QAEFG@Z			; Object::GetProperty
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@ObjectID@@QBEFG@Z PROC NEAR		; ObjectID::GetProperty, COMDAT

; 290  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 		//	get a property given a selector
; 292  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 293  : 		return (*this)->GetProperty(selector);

  0000f	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty

; 294  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetProperty@ObjectID@@QBEFG@Z ENDP			; ObjectID::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddrCheck@Object@@QAEPAFG@Z		; Object::GetPropAddrCheck
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT
_this$ = -4
_selector$ = 8
?GetProperty@Object@@QAEFG@Z PROC NEAR			; Object::GetProperty, COMDAT

; 170  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		//	get a property given a selector
; 172  : 		return *GetPropAddrCheck(selector);

  00007	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00014	66 8b 00	 mov	 ax, WORD PTR [eax]

; 173  : 	}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetProperty@Object@@QAEFG@Z ENDP			; Object::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddr@Object@@QAEPAFG@Z			; Object::GetPropAddr
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_this$ = -8
_property$ = -4
_selector$ = 8
?GetPropAddrCheck@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddrCheck, COMDAT

; 153  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 		//	get a property's address, checking for valid property
; 155  : 		Property* property = GetPropAddr(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddr@Object@@QAEPAFG@Z ; Object::GetPropAddr
  00016	89 45 fc	 mov	 DWORD PTR _property$[ebp], eax

; 156  : 		if (!property)

  00019	83 7d fc 00	 cmp	 DWORD PTR _property$[ebp], 0
  0001d	75 1b		 jne	 SHORT $L116765

; 157  : 			msgMgr->Fatal(Msg_InvalidProperty, selector);

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _selector$[ebp]
  00022	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00028	51		 push	 ecx
  00029	6a 29		 push	 41			; 00000029H
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
$L116765:

; 158  : 		return property;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _property$[ebp]

; 159  : 	}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetPropAddrCheck@Object@@QAEPAFG@Z ENDP		; Object::GetPropAddrCheck
_TEXT	ENDS
PUBLIC	?selectorDict@Object@@QAEPAVSelectorDict@@XZ	; Object::selectorDict
EXTRN	?get@SelectorDict@@QAEHG@Z:NEAR			; SelectorDict::get
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_this$ = -8
_index$ = -4
_selector$ = 8
?GetPropAddr@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddr, COMDAT

; 127  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 		int index = selectorDict()->get ( selector );

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?get@SelectorDict@@QAEHG@Z ; SelectorDict::get
  0001d	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 129  : 
; 130  : 		if ( index != -1 && !selectorDict()->script )

  00020	83 7d fc ff	 cmp	 DWORD PTR _index$[ebp], -1
  00024	74 2b		 je	 SHORT $L116756
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  0002e	33 c9		 xor	 ecx, ecx
  00030	66 8b 48 16	 mov	 cx, WORD PTR [eax+22]
  00034	85 c9		 test	 ecx, ecx
  00036	75 19		 jne	 SHORT $L116756

; 131  : 			return &(*this)[selectorDict()->offset]; 

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00040	33 d2		 xor	 edx, edx
  00042	66 8b 50 14	 mov	 dx, WORD PTR [eax+20]
  00046	52		 push	 edx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ??AObject@@QAEAAFH@Z	; Object::operator[]
  0004f	eb 02		 jmp	 SHORT $L116754
$L116756:

; 132  : 
; 133  : 		return 0;

  00051	33 c0		 xor	 eax, eax
$L116754:

; 134  : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?GetPropAddr@Object@@QAEPAFG@Z ENDP			; Object::GetPropAddr
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT
_this$ = -4
?selectorDict@Object@@QAEPAVSelectorDict@@XZ PROC NEAR	; Object::selectorDict, COMDAT

; 102  : 	SelectorDict *selectorDict ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 		return _selectorDict;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 104  : 	};

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?selectorDict@Object@@QAEPAVSelectorDict@@XZ ENDP	; Object::selectorDict
_TEXT	ENDS
PUBLIC	??0FakeSOL_ListID@@QAE@ABU0@@Z			; FakeSOL_ListID::FakeSOL_ListID
;	COMDAT ??0SOL_ListID@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_ListID@@QAE@ABU0@@Z PROC NEAR			; SOL_ListID::SOL_ListID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeSOL_ListID@@QAE@ABU0@@Z ; FakeSOL_ListID::FakeSOL_ListID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0SOL_ListID@@QAE@ABU0@@Z ENDP				; SOL_ListID::SOL_ListID
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0FakeSOL_ListID@@QAE@ABU0@@Z PROC NEAR		; FakeSOL_ListID::FakeSOL_ListID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeSOL_ListID@@QAE@ABU0@@Z ENDP			; FakeSOL_ListID::FakeSOL_ListID
_TEXT	ENDS
PUBLIC	?ResX@CelObj@@QBEHXZ				; CelObj::ResX
PUBLIC	?ResY@CelObj@@QBEHXZ				; CelObj::ResY
PUBLIC	?Skip@CelObj@@QBEEXZ				; CelObj::Skip
PUBLIC	??0CSCI_BHead@@QAE@G@Z				; CSCI_BHead::CSCI_BHead
PUBLIC	?get_pRace@CSCI_BHead@@QAEFXZ			; CSCI_BHead::get_pRace
PUBLIC	?get_pSex@CSCI_BHead@@QAEFXZ			; CSCI_BHead::get_pSex
PUBLIC	?get_pHeadView@CSCI_BHead@@QAEFXZ		; CSCI_BHead::get_pHeadView
PUBLIC	?get_pHairView@CSCI_BHead@@QAEFXZ		; CSCI_BHead::get_pHairView
PUBLIC	?get_pBrowView@CSCI_BHead@@QAEFXZ		; CSCI_BHead::get_pBrowView
PUBLIC	?get_pEyeView@CSCI_BHead@@QAEFXZ		; CSCI_BHead::get_pEyeView
PUBLIC	?get_pNoseView@CSCI_BHead@@QAEFXZ		; CSCI_BHead::get_pNoseView
PUBLIC	?get_pEarView@CSCI_BHead@@QAEFXZ		; CSCI_BHead::get_pEarView
PUBLIC	?get_pMouthView@CSCI_BHead@@QAEFXZ		; CSCI_BHead::get_pMouthView
PUBLIC	?get_pFaceHairView@CSCI_BHead@@QAEFXZ		; CSCI_BHead::get_pFaceHairView
PUBLIC	??0ObjectID@@QAE@XZ				; ObjectID::ObjectID
PUBLIC	?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get
PUBLIC	??0ObjectID@@QAE@ABVMemID@@@Z			; ObjectID::ObjectID
PUBLIC	??0SOL_Line@@QAE@HHHH@Z				; SOL_Line::SOL_Line
PUBLIC	?IsEmpty@SOL_Rect@@QBEHXZ			; SOL_Rect::IsEmpty
PUBLIC	?Xlen@SOL_Rect@@QBEHXZ				; SOL_Rect::Xlen
PUBLIC	?Ylen@SOL_Rect@@QBEHXZ				; SOL_Rect::Ylen
PUBLIC	?Set@SOL_Rect@@QAEXHHHH@Z			; SOL_Rect::Set
PUBLIC	?MoveTo@SOL_Rect@@QAEXHH@Z			; SOL_Rect::MoveTo
PUBLIC	??0Array@@QAE@XZ				; Array::Array
PUBLIC	??1Array@@QAE@XZ				; Array::~Array
PUBLIC	?GetXRes@FontMgr@@QBEHXZ			; FontMgr::GetXRes
PUBLIC	?GetYRes@FontMgr@@QBEHXZ			; FontMgr::GetYRes
PUBLIC	?dataID@Array@@QAEXVMemID@@@Z			; Array::dataID
PUBLIC	??1CelObjMem@@UAE@XZ				; CelObjMem::~CelObjMem
PUBLIC	?RemapBitmap@@YAXVMemID@@VObjectID@@@Z		; RemapBitmap
PUBLIC	?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z		; BuildHeader
PUBLIC	?GetNumLoops@@YAHVMemID@@@Z			; GetNumLoops
PUBLIC	?KBitmap@@YAXPAF@Z				; KBitmap
EXTRN	?GetLinkPoint@CelObj@@QAEFHH@Z:NEAR		; CelObj::GetLinkPoint
EXTRN	?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z:NEAR	; SOL_Line::DrawThin
EXTRN	?Size@MemID@@QBEIXZ:NEAR			; MemID::Size
EXTRN	?BuildFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHHHH@Z:NEAR ; FontMgr::BuildFBM
EXTRN	?InvertRect@FontMgr@@QAEXVMemID@@HVSOL_Rect@@DDH@Z:NEAR ; FontMgr::InvertRect
EXTRN	??0CelObjMem@@QAE@VMemID@@@Z:NEAR		; CelObjMem::CelObjMem
EXTRN	?Draw@CelObjMem@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z:NEAR ; CelObjMem::Draw
EXTRN	?size@Array@@QAEGXZ:NEAR			; Array::size
EXTRN	?at@Array@@QAEHH@Z:NEAR				; Array::at
EXTRN	?at@Array@@QAEXHH@Z:NEAR			; Array::at
EXTRN	?fontMgr@@3PAVFontMgr@@A:DWORD			; fontMgr
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
EXTRN	?AddPalShift@@YAHH@Z:NEAR			; AddPalShift
EXTRN	?Free@MemoryMgr@@QAEXG@Z:NEAR			; MemoryMgr::Free
_DATA	SEGMENT
$SG144040 DB	'bitmap being created with messed up dimensions (%d, %d)', 00H
$SG144068 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144069 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144082 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144083 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144097 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144098 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144126 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144127 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144149 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144150 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144157 DB	'Right coordinate is less than left coordinate in Bitmap '
	DB	'AddRect!', 00H
	ORG $+3
$SG144159 DB	'Bottom coordinate is less than top coordinate in Bitmap '
	DB	'AddRect!', 00H
	ORG $+3
$SG144186 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144187 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144213 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144214 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144225 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144226 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144234 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144235 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144244 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144245 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
	ORG $+1
$SG144311 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144312 DB	'%s(%d): head bitmap is invalid (bm = 0x%x, loop = %d, si'
	DB	'ze = %d, headBitmaps = 0x%x)', 00H
	ORG $+3
$SG144462 DB	'frozenClut handle is invalid on call to bGenerate', 00H
	ORG $+2
$SG144466 DB	'frozenClut object is invalid on call to bGenerate', 00H
	ORG $+2
$SG144472 DB	'invisibleClut handle is invalid on call to bGenerate', 00H
	ORG $+3
$SG144476 DB	'invisibleClut object is invalid on call to bGenerate', 00H
	ORG $+3
$SG144481 DB	'normalClut handle is invalid on call to bGenerate', 00H
	ORG $+2
$SG144485 DB	'normalClut object is invalid on call to bGenerate', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T150819 DD	019930520H
	DD	0cH
	DD	FLAT:$T150826
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150826 DD	0ffffffffH
	DD	FLAT:$L150806
	DD	0ffffffffH
	DD	FLAT:$L150807
	DD	0ffffffffH
	DD	FLAT:$L150808
	DD	0ffffffffH
	DD	FLAT:$L150809
	DD	0ffffffffH
	DD	FLAT:$L150810
	DD	04H
	DD	FLAT:$L150811
	DD	05H
	DD	FLAT:$L150812
	DD	06H
	DD	FLAT:$L150813
	DD	04H
	DD	FLAT:$L150814
	DD	0ffffffffH
	DD	FLAT:$L150815
	DD	09H
	DD	FLAT:$L150816
	DD	09H
	DD	FLAT:$L150817
xdata$x	ENDS
_TEXT	SEGMENT
_aWhatAction$144490 = -1168
_aLoop$144491 = -1196
_bShowFeatures$144492 = -1192
$T150637 = -1388
_pHelmetView$144493 = -1200
_head$144494 = -1172
_headOrigin$144495 = -1188
_tView$144498 = -1180
_headView$144499 = -1280
$T150644 = -1392
_originX$144500 = -1176
$T150645 = -1396
_originY$144501 = -1184
$T150646 = -1400
$T150647 = -1404
$T150648 = -1408
$T150649 = -1412
$T150650 = -1416
$T150655 = -1420
$T150656 = -1424
$T150657 = -1428
$T150658 = -1432
$T150667 = -1436
$T150668 = -1440
$T150669 = -1444
$T150670 = -1448
$T150671 = -1452
$T150672 = -1456
$T150673 = -1460
$T150674 = -1464
$T150675 = -1468
$T150676 = -1472
$T150677 = -1476
$T150678 = -1480
$T150679 = -1484
$T150684 = -1488
_helmetView$144540 = -1376
$T150685 = -1492
_pt$144541 = -1296
$T150686 = -1496
_cx$144542 = -1284
$T150687 = -1500
_cy$144543 = -1288
$T150688 = -1504
$T150689 = -1508
$T150690 = -1512
$T150691 = -1516
$T150692 = -1520
$T150693 = -1524
$T150694 = -1528
$T150695 = -1532
$T150696 = -1536
$T150697 = -1540
$T150702 = -1544
$T150703 = -1548
$T150704 = -1552
$T150705 = -1556
$T150706 = -1560
$T150707 = -1564
$T150708 = -1568
$T150709 = -1572
$T150710 = -1576
$T150711 = -1580
$T150712 = -1584
$T150713 = -1588
_origins$144569 = -1380
$T150715 = -1592
_index$144571 = -1384
$T150716 = -1596
$T150717 = -1600
$T150718 = -1604
$T150719 = -1608
$T150720 = -1612
$T150721 = -1616
$T150722 = -1620
$T150723 = -1624
$T150724 = -1628
$T150725 = -1632
$T150726 = -1636
$T150727 = -1640
$T150728 = -1644
$T150729 = -1648
$T150730 = -1652
$T150731 = -1656
$T150732 = -1660
$T150733 = -1664
$T150734 = -1668
$T150735 = -1672
$T150736 = -1676
$T150737 = -1680
$T150738 = -1684
$T150739 = -1688
$T150740 = -1692
$T150741 = -1696
$T150742 = -1700
$T150743 = -1704
$T150744 = -1708
$T150745 = -1712
$T150746 = -1716
$T150747 = -1720
$T150748 = -1724
$T150749 = -1728
$T150750 = -1732
$T150751 = -1736
$T150752 = -1740
$T150753 = -1744
$T150754 = -1748
$T150755 = -1752
$T150756 = -1756
$T150757 = -1760
$T150758 = -1764
$T150759 = -1768
$T150760 = -1772
$T150761 = -1776
$T150762 = -1780
$T150763 = -1784
$T150764 = -1788
$T150765 = -1792
$T150766 = -1796
$T150767 = -1800
$T150768 = -1804
$T150769 = -1808
$T150770 = -1812
$T150771 = -1816
$T150772 = -1820
$T150773 = -1824
$T150774 = -1828
$T150775 = -1832
$T150776 = -1836
$T150777 = -1840
$T150778 = -1844
$T150779 = -1848
$T150780 = -1852
$T150781 = -1856
$T150782 = -1860
$T150783 = -1864
$T150784 = -1868
$T150785 = -1872
$T150786 = -1876
$T150787 = -1880
$T150788 = -1884
$T150789 = -1888
$T150790 = -1892
$T150791 = -1896
$T150792 = -1900
$T150793 = -1904
$T150794 = -1908
$T150795 = -1912
$T150796 = -1916
$T150797 = -1920
$T150798 = -1924
$T150799 = -1928
$T150800 = -1932
$T150801 = -1936
$T150802 = -1940
$T150803 = -1944
$T150804 = -1948
$T150805 = -1952
__$EHRec$ = -12
_args$ = 8
_BM$ = -24
_BMWidth$ = -28
_BMHeight$ = -16
_celHeader$ = -32
_function$ = -20
_BMresX$144041 = -36
_BMresY$144042 = -40
_sz$144043 = -44
_celObj$144048 = -128
_theSkip$144049 = -48
_theBack$144050 = -172
_buffer$144056 = -168
_drawRect$144057 = -144
_pt$144058 = -152
_pattern$144075 = -192
_left$144076 = -200
_style$144077 = -196
_line$144085 = -188
_viewBM$144089 = -316
_theTextBox$144090 = -364
_BMRect$144091 = -296
_obj$144092 = -348
_celObj$144100 = -280
_objWidth$144101 = -300
_objHeight$144102 = -308
_posX$144103 = -304
_posY$144104 = -312
_matchX$144105 = -368
_matchY$144106 = -344
_pt$144108 = -340
_buffer$144117 = -332
_theTextBox$144129 = -524
_BMRect$144130 = -464
_pt$144131 = -508
_textBox$144132 = -484
_textBM$144133 = -468
_buffer$144137 = -500
_celObj$144138 = -448
_color$144151 = -536
_top$144152 = -544
_left$144153 = -556
_bottom$144154 = -552
_right$144155 = -540
_pixelAddr$144167 = -548
_hRun$144169 = -532
_vRun$144170 = -528
_mergeBM$144176 = -668
_mergeRect$144177 = -716
_BMRect$144178 = -652
_mergeBMHeight$144179 = -696
_mergeBMWidth$144180 = -664
_mergeCelHeader$144181 = -700
_posX$144191 = -656
_posY$144192 = -660
_buffer$144194 = -692
_pt$144195 = -676
_celObj$144200 = -636
_r$144216 = -732
_newBM$144246 = -736
_BMresX$144248 = -740
_BMresY$144249 = -744
_view$144255 = -868
_loop$144256 = -880
_cel$144257 = -884
_action$144258 = -876
_shirtView$144259 = -856
_pantsView$144260 = -852
_shoesView$144261 = -828
_beltView$144262 = -944
_wristView$144263 = -960
_baldricView$144264 = -940
_robeView$144265 = -956
_cowlView$144266 = -888
_skirtView$144267 = -928
_weaponView$144268 = -936
_shieldView$144269 = -864
_headOrigin$144270 = -924
_headBitmaps$144273 = -900
_frozenClut$144276 = -932
_invisibleClut$144279 = -848
_normalClut$144282 = -896
_actionOffset$144285 = -892
_celObj$144287 = -824
_originX$144288 = -860
_originY$144289 = -912
_headPoint$144290 = -908
_headRect$144291 = -844
_headBM$144292 = -952
_origins$144294 = -968
_bitmaps$144295 = -964
_index$144298 = -1068
_nOriginX$144299 = -1056
_nOriginY$144300 = -1064
_nLinkX$144301 = -1060
_nLinkY$144302 = -1052
_head$144313 = -1048
_pt$144318 = -920
_combatAction$144319 = -872
_shieldAction$144320 = -948
_buf$144369 = -1164
_head$144370 = -1148
?KBitmap@@YAXPAF@Z PROC NEAR				; KBitmap

; 316  : {

  00761	55		 push	 ebp
  00762	8b ec		 mov	 ebp, esp
  00764	6a ff		 push	 -1
  00766	68 00 00 00 00	 push	 $L150820
  0076b	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00771	50		 push	 eax
  00772	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00779	81 ec dc 07 00
	00		 sub	 esp, 2012		; 000007dcH
  0077f	56		 push	 esi

; 317  : //	ValidateViews ( __FILE__, __LINE__ );
; 318  : 
; 319  : 	// Bitmap functions
; 320  : 	// Input
; 321  : 	//      arg1-----function code
; 322  : 	//					
; 323  : 	enum {
; 324  : 		bCreate,			// Create an empty bitmap
; 325  : 		bDispose,		// Dispose of a bitmap
; 326  : 		bAddLine,		// Add a line to a bitmap
; 327  : 		bAddCel,			// Add a cel to a bitmap
; 328  : 		bAddText,		// Add text to a bitmap
; 329  : 		bAddRect,		// Add a colored rectangle to a bitmap
; 330  : 		bAddBitmap,		// Add another bitmap to a bitmap
; 331  : 		bInvertRect, 	// Invert a bitmap
; 332  : 		bSetOrigin,	 	// set origin point of the bitmap
; 333  : 		bCreateWithCel, // create a new bitmap from cel data
; 334  : 		bRemap,			// remap an existing bitmap 
; 335  : 		bDuplicate,		// duplicate an existing bitmap 
; 336  : 		bGenerate,
; 337  : 		bGenerateHead,
; 338  : 	};
; 339  : 	// The arguments vary from function to function
; 340  : 	// The return value varys from function to function
; 341  : 
; 342  : 	MemID			BM;

  00780	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00783	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 343  : 	int 			BMWidth;
; 344  : 	int 			BMHeight;
; 345  : 	CelHeader* 	celHeader;
; 346  : 	int 			function = arg(1);

  00788	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0078b	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0078f	89 4d ec	 mov	 DWORD PTR _function$[ebp], ecx

; 347  : 
; 348  : 	switch (function) {

  00792	8b 55 ec	 mov	 edx, DWORD PTR _function$[ebp]
  00795	89 95 5c f8 ff
	ff		 mov	 DWORD PTR -1956+[ebp], edx
  0079b	83 bd 5c f8 ff
	ff 0d		 cmp	 DWORD PTR -1956+[ebp], 13 ; 0000000dH
  007a2	0f 87 33 43 00
	00		 ja	 $L144572
  007a8	8b 85 5c f8 ff
	ff		 mov	 eax, DWORD PTR -1956+[ebp]
  007ae	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L150821[eax*4]
$L144033:

; 350  : 			// Create bitmap
; 351  : 			//	--------------
; 352  : 			// Input
; 353  : 			//      arg2-----bitmap width
; 354  : 			//      arg3-----bitmap height
; 355  : 			//      arg4-----skip color
; 356  : 			//      arg5-----background color
; 357  : 			//					  If background color = skip the bitmap is transparent
; 358  : 			//      arg6-----x resolution
; 359  : 			//      arg7-----y resolution
; 360  : 			//		  arg8-----remap state
; 361  : 			// Output
; 362  : 			//		  pm.acc = id for bitmap
; 363  : 
; 364  : #ifdef WIN32S
; 365  : 	arg(4) = (SCIWord)AddPalShift((int)arg(4));

  007b5	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  007b8	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  007bc	52		 push	 edx
  007bd	e8 00 00 00 00	 call	 ?AddPalShift@@YAHH@Z	; AddPalShift
  007c2	83 c4 04	 add	 esp, 4
  007c5	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  007c8	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 366  : 	arg(5) = (SCIWord)AddPalShift((int)arg(5));

  007cc	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  007cf	0f bf 42 0a	 movsx	 eax, WORD PTR [edx+10]
  007d3	50		 push	 eax
  007d4	e8 00 00 00 00	 call	 ?AddPalShift@@YAHH@Z	; AddPalShift
  007d9	83 c4 04	 add	 esp, 4
  007dc	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  007df	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 367  : #endif
; 368  : 
; 369  : 			BMWidth  = arg(2);

  007e3	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  007e6	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  007ea	89 45 e4	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 370  : 			BMHeight = arg(3);

  007ed	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  007f0	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  007f4	89 55 f0	 mov	 DWORD PTR _BMHeight$[ebp], edx

; 371  : 
; 372  : 			if ( BMWidth < 1 || BMHeight < 1 )

  007f7	83 7d e4 01	 cmp	 DWORD PTR _BMWidth$[ebp], 1
  007fb	7c 06		 jl	 SHORT $L144039
  007fd	83 7d f0 01	 cmp	 DWORD PTR _BMHeight$[ebp], 1
  00801	7d 1c		 jge	 SHORT $L144038
$L144039:

; 373  : 				msgMgr->Fatal ( "bitmap being created with messed up dimensions (%d, %d)", BMWidth, BMHeight );

  00803	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  00806	50		 push	 eax
  00807	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  0080a	51		 push	 ecx
  0080b	68 00 00 00 00	 push	 OFFSET FLAT:$SG144040
  00810	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00816	52		 push	 edx
  00817	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  0081c	83 c4 10	 add	 esp, 16			; 00000010H
$L144038:

; 374  : 
; 375  : 			int BMresX = (argCount > 5) ? arg(6) : fontMgr->GetXRes();

  0081f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00822	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00825	83 f9 05	 cmp	 ecx, 5
  00828	7e 0f		 jle	 SHORT $L150631
  0082a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0082d	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  00831	89 85 58 f8 ff
	ff		 mov	 DWORD PTR -1960+[ebp], eax
  00837	eb 11		 jmp	 SHORT $L150632
$L150631:
  00839	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fontMgr@@3PAVFontMgr@@A ; fontMgr
  0083f	e8 00 00 00 00	 call	 ?GetXRes@FontMgr@@QBEHXZ ; FontMgr::GetXRes
  00844	89 85 58 f8 ff
	ff		 mov	 DWORD PTR -1960+[ebp], eax
$L150632:
  0084a	8b 8d 58 f8 ff
	ff		 mov	 ecx, DWORD PTR -1960+[ebp]
  00850	89 4d dc	 mov	 DWORD PTR _BMresX$144041[ebp], ecx

; 376  : 			int BMresY = (argCount > 6) ? arg(7) : fontMgr->GetYRes();

  00853	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00856	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00859	83 f8 06	 cmp	 eax, 6
  0085c	7e 0f		 jle	 SHORT $L150633
  0085e	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00861	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  00865	89 95 54 f8 ff
	ff		 mov	 DWORD PTR -1964+[ebp], edx
  0086b	eb 11		 jmp	 SHORT $L150634
$L150633:
  0086d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fontMgr@@3PAVFontMgr@@A ; fontMgr
  00873	e8 00 00 00 00	 call	 ?GetYRes@FontMgr@@QBEHXZ ; FontMgr::GetYRes
  00878	89 85 54 f8 ff
	ff		 mov	 DWORD PTR -1964+[ebp], eax
$L150634:
  0087e	8b 85 54 f8 ff
	ff		 mov	 eax, DWORD PTR -1964+[ebp]
  00884	89 45 d8	 mov	 DWORD PTR _BMresY$144042[ebp], eax

; 377  : 
; 378  : 			BM.Get ( MemBitmap, BMWidth * (BMHeight + 1) + CELHEADERSIZE );

  00887	6a 00		 push	 0
  00889	6a 00		 push	 0
  0088b	6a 00		 push	 0
  0088d	6a 00		 push	 0
  0088f	68 00 02 00 00	 push	 512			; 00000200H
  00894	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  00897	83 c1 01	 add	 ecx, 1
  0089a	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  0089d	0f af d1	 imul	 edx, ecx
  008a0	83 c2 2e	 add	 edx, 46			; 0000002eH
  008a3	52		 push	 edx
  008a4	6a 4b		 push	 75			; 0000004bH
  008a6	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  008a9	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 379  : 
; 380  : 		   size_t sz = BM.Size();

  008ae	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  008b1	e8 00 00 00 00	 call	 ?Size@MemID@@QBEIXZ	; MemID::Size
  008b6	89 45 d4	 mov	 DWORD PTR _sz$144043[ebp], eax

; 381  : 
; 382  : 			// Fill the bitmap with background color
; 383  : 			memset ( (uchar*)memMgr->GetAddr(BM) + CELHEADERSIZE, arg(5), BMWidth * BMHeight );

  008b9	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  008bc	0f af 45 f0	 imul	 eax, DWORD PTR _BMHeight$[ebp]
  008c0	50		 push	 eax
  008c1	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  008c4	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  008c8	52		 push	 edx
  008c9	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  008cc	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  008d1	50		 push	 eax
  008d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  008d8	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  008dd	83 c0 2e	 add	 eax, 46			; 0000002eH
  008e0	50		 push	 eax
  008e1	e8 00 00 00 00	 call	 _memset
  008e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 
; 385  : 			// put extra signature shit
; 386  : 			memset ( (uchar *)memMgr->GetAddr(BM) + CELHEADERSIZE + (BMWidth * BMHeight), 123, BMWidth );

  008e9	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  008ec	50		 push	 eax
  008ed	6a 7b		 push	 123			; 0000007bH
  008ef	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  008f2	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  008f7	50		 push	 eax
  008f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  008fe	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00903	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  00906	0f af 4d f0	 imul	 ecx, DWORD PTR _BMHeight$[ebp]
  0090a	8d 54 08 2e	 lea	 edx, DWORD PTR [eax+ecx+46]
  0090e	52		 push	 edx
  0090f	e8 00 00 00 00	 call	 _memset
  00914	83 c4 0c	 add	 esp, 12			; 0000000cH

; 387  : 
; 388  : 			BuildHeader(BM,BMWidth,BMHeight,arg(4),
; 389  : 							0,
; 390  : 							0,
; 391  : 							BMresX,
; 392  : 							BMresY,
; 393  : 							0,
; 394  : 							argCount >= 8 ? arg(8) : False
; 395  : 						  );

  00917	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0091a	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0091d	83 f9 08	 cmp	 ecx, 8
  00920	7c 0f		 jl	 SHORT $L150635
  00922	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00925	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  00929	89 85 50 f8 ff
	ff		 mov	 DWORD PTR -1968+[ebp], eax
  0092f	eb 0a		 jmp	 SHORT $L150636
$L150635:
  00931	c7 85 50 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1968+[ebp], 0
$L150636:
  0093b	8b 8d 50 f8 ff
	ff		 mov	 ecx, DWORD PTR -1968+[ebp]
  00941	51		 push	 ecx
  00942	6a 00		 push	 0
  00944	8b 55 d8	 mov	 edx, DWORD PTR _BMresY$144042[ebp]
  00947	52		 push	 edx
  00948	8b 45 dc	 mov	 eax, DWORD PTR _BMresX$144041[ebp]
  0094b	50		 push	 eax
  0094c	6a 00		 push	 0
  0094e	6a 00		 push	 0
  00950	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00953	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  00957	52		 push	 edx
  00958	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  0095b	50		 push	 eax
  0095c	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  0095f	51		 push	 ecx
  00960	51		 push	 ecx
  00961	8b cc		 mov	 ecx, esp
  00963	89 a5 94 fa ff
	ff		 mov	 DWORD PTR $T150637[ebp], esp
  00969	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0096c	52		 push	 edx
  0096d	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00972	e8 00 00 00 00	 call	 ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ; BuildHeader
  00977	83 c4 28	 add	 esp, 40			; 00000028H

; 396  : 
; 397  : 			pm.acc = BM;

  0097a	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  0097d	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00982	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00987	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 398  : 			break;

  0098c	e9 4a 41 00 00	 jmp	 $L144030
$L144047:

; 402  : 			// Create bitmap with a cel
; 403  : 			//	------------------------
; 404  : 			// Input
; 405  : 			//      arg2-----view
; 406  : 			//      arg3-----loop
; 407  : 			//		  arg4-----cel
; 408  : 			//      arg5-----skip color
; 409  : 			//      arg6-----background color
; 410  : 			//					  If background color = skip the bitmap is transparent
; 411  : 			//      arg7-----remap state
; 412  : 			//      arg8-----clut data
; 413  : 			// Output
; 414  : 			//		  pm.acc = id for bitmap
; 415  : 
; 416  : 			CelObjView celObj(arg(2), arg(3), arg(4));

  00991	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00994	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00998	51		 push	 ecx
  00999	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0099c	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  009a0	50		 push	 eax
  009a1	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  009a4	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  009a8	52		 push	 edx
  009a9	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  009ac	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  009b1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 417  : 			BMWidth  = celObj.Width();

  009b8	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  009bb	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  009c0	89 45 e4	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 418  : 			BMHeight = celObj.Height();

  009c3	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  009c6	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  009cb	89 45 f0	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 419  : 
; 420  : 			BM.Get ( MemBitmap, BMWidth * (BMHeight + 1) + CELHEADERSIZE );

  009ce	6a 00		 push	 0
  009d0	6a 00		 push	 0
  009d2	6a 00		 push	 0
  009d4	6a 00		 push	 0
  009d6	68 00 02 00 00	 push	 512			; 00000200H
  009db	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  009de	83 c0 01	 add	 eax, 1
  009e1	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  009e4	0f af c8	 imul	 ecx, eax
  009e7	83 c1 2e	 add	 ecx, 46			; 0000002eH
  009ea	51		 push	 ecx
  009eb	6a 4b		 push	 75			; 0000004bH
  009ed	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  009f0	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 421  : 
; 422  : 			int theSkip = (argCount < 5 || arg(5) == -1) ? celObj.Skip() : arg(5);

  009f5	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  009f8	0f bf 02	 movsx	 eax, WORD PTR [edx]
  009fb	83 f8 05	 cmp	 eax, 5
  009fe	7c 1c		 jl	 SHORT $L150638
  00a00	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00a03	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  00a07	83 fa ff	 cmp	 edx, -1
  00a0a	74 10		 je	 SHORT $L150638
  00a0c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00a0f	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00a13	66 89 8d 4e f8
	ff ff		 mov	 WORD PTR -1970+[ebp], cx
  00a1a	eb 14		 jmp	 SHORT $L150639
$L150638:
  00a1c	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  00a1f	e8 00 00 00 00	 call	 ?Skip@CelObj@@QBEEXZ	; CelObj::Skip
  00a24	66 33 d2	 xor	 dx, dx
  00a27	8a d0		 mov	 dl, al
  00a29	66 89 95 4e f8
	ff ff		 mov	 WORD PTR -1970+[ebp], dx
$L150639:
  00a30	0f bf 85 4e f8
	ff ff		 movsx	 eax, WORD PTR -1970+[ebp]
  00a37	89 45 d0	 mov	 DWORD PTR _theSkip$144049[ebp], eax

; 423  : 			int theBack = (argCount < 6 || arg(6) == -1) ? celObj.Skip() : arg(6);

  00a3a	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00a3d	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00a40	83 fa 06	 cmp	 edx, 6
  00a43	7c 1c		 jl	 SHORT $L150640
  00a45	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00a48	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  00a4c	83 f9 ff	 cmp	 ecx, -1
  00a4f	74 10		 je	 SHORT $L150640
  00a51	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00a54	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  00a58	66 89 85 4c f8
	ff ff		 mov	 WORD PTR -1972+[ebp], ax
  00a5f	eb 14		 jmp	 SHORT $L150641
$L150640:
  00a61	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  00a64	e8 00 00 00 00	 call	 ?Skip@CelObj@@QBEEXZ	; CelObj::Skip
  00a69	66 33 c9	 xor	 cx, cx
  00a6c	8a c8		 mov	 cl, al
  00a6e	66 89 8d 4c f8
	ff ff		 mov	 WORD PTR -1972+[ebp], cx
$L150641:
  00a75	0f bf 95 4c f8
	ff ff		 movsx	 edx, WORD PTR -1972+[ebp]
  00a7c	89 95 54 ff ff
	ff		 mov	 DWORD PTR _theBack$144050[ebp], edx

; 424  : 
; 425  : 			// Fill the bitmap with background color
; 426  : 			memset ( (uchar*)memMgr->GetAddr(BM) + CELHEADERSIZE, theBack, BMWidth * BMHeight );

  00a82	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  00a85	0f af 45 f0	 imul	 eax, DWORD PTR _BMHeight$[ebp]
  00a89	50		 push	 eax
  00a8a	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _theBack$144050[ebp]
  00a90	51		 push	 ecx
  00a91	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00a94	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00a99	50		 push	 eax
  00a9a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00aa0	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00aa5	83 c0 2e	 add	 eax, 46			; 0000002eH
  00aa8	50		 push	 eax
  00aa9	e8 00 00 00 00	 call	 _memset
  00aae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 427  : 
; 428  : 			// put extra signature shit
; 429  : 			memset ( (uchar *)memMgr->GetAddr(BM) + CELHEADERSIZE + (BMWidth * BMHeight), 123, BMWidth );

  00ab1	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  00ab4	52		 push	 edx
  00ab5	6a 7b		 push	 123			; 0000007bH
  00ab7	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00aba	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00abf	50		 push	 eax
  00ac0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00ac6	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00acb	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  00ace	0f af 4d f0	 imul	 ecx, DWORD PTR _BMHeight$[ebp]
  00ad2	8d 54 08 2e	 lea	 edx, DWORD PTR [eax+ecx+46]
  00ad6	52		 push	 edx
  00ad7	e8 00 00 00 00	 call	 _memset
  00adc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 430  : 
; 431  : 			BuildHeader(BM,BMWidth,BMHeight,theSkip,
; 432  : 							0,
; 433  : 							0,
; 434  : 							celObj.ResX(),
; 435  : 							celObj.ResY(),
; 436  : 							0,
; 437  : 							argCount >= 7 ? arg(7) : False
; 438  : 						);

  00adf	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00ae2	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00ae5	83 f9 07	 cmp	 ecx, 7
  00ae8	7c 0f		 jl	 SHORT $L150642
  00aea	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00aed	0f bf 42 0e	 movsx	 eax, WORD PTR [edx+14]
  00af1	89 85 48 f8 ff
	ff		 mov	 DWORD PTR -1976+[ebp], eax
  00af7	eb 0a		 jmp	 SHORT $L150643
$L150642:
  00af9	c7 85 48 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1976+[ebp], 0
$L150643:
  00b03	8b 8d 48 f8 ff
	ff		 mov	 ecx, DWORD PTR -1976+[ebp]
  00b09	51		 push	 ecx
  00b0a	6a 00		 push	 0
  00b0c	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  00b0f	e8 00 00 00 00	 call	 ?ResY@CelObj@@QBEHXZ	; CelObj::ResY
  00b14	50		 push	 eax
  00b15	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  00b18	e8 00 00 00 00	 call	 ?ResX@CelObj@@QBEHXZ	; CelObj::ResX
  00b1d	50		 push	 eax
  00b1e	6a 00		 push	 0
  00b20	6a 00		 push	 0
  00b22	8b 55 d0	 mov	 edx, DWORD PTR _theSkip$144049[ebp]
  00b25	52		 push	 edx
  00b26	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  00b29	50		 push	 eax
  00b2a	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  00b2d	51		 push	 ecx
  00b2e	51		 push	 ecx
  00b2f	8b cc		 mov	 ecx, esp
  00b31	89 a5 90 fa ff
	ff		 mov	 DWORD PTR $T150644[ebp], esp
  00b37	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  00b3a	52		 push	 edx
  00b3b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00b40	e8 00 00 00 00	 call	 ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ; BuildHeader
  00b45	83 c4 28	 add	 esp, 40			; 00000028H

; 439  : 
; 440  : 			// make sure the view is not purged by BM.Get() allocation
; 441  : 			resMgr->Get(MemResView, arg(2));

  00b48	6a 00		 push	 0
  00b4a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00b4d	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00b51	51		 push	 ecx
  00b52	6a 00		 push	 0
  00b54	8d 95 8c fa ff
	ff		 lea	 edx, DWORD PTR $T150645[ebp]
  00b5a	52		 push	 edx
  00b5b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00b60	8b 10		 mov	 edx, DWORD PTR [eax]
  00b62	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00b68	ff 52 20	 call	 DWORD PTR [edx+32]

; 442  : 
; 443  : 			// Create a buffer that points to bitmap
; 444  : 			BufferStd buffer(BMWidth, BMHeight, (uchar*) memMgr->GetAddr(BM) + CELHEADERSIZE);

  00b6b	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00b6e	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00b73	50		 push	 eax
  00b74	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00b7a	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00b7f	83 c0 2e	 add	 eax, 46			; 0000002eH
  00b82	50		 push	 eax
  00b83	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  00b86	50		 push	 eax
  00b87	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  00b8a	51		 push	 ecx
  00b8b	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$144056[ebp]
  00b91	e8 00 00 00 00	 call	 ??0BufferStd@@QAE@HHPAE@Z ; BufferStd::BufferStd

; 445  : 
; 446  : 			// draw the cel object into the buffer
; 447  : 			// theTextBox: relative to upper left. textBox >= pt coords
; 448  : 			// pt: upper left of cel
; 449  : 			SOL_Rect drawRect(0,0,BMWidth-1,BMHeight-1);

  00b96	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  00b99	83 ea 01	 sub	 edx, 1
  00b9c	52		 push	 edx
  00b9d	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  00ba0	83 e8 01	 sub	 eax, 1
  00ba3	50		 push	 eax
  00ba4	6a 00		 push	 0
  00ba6	6a 00		 push	 0
  00ba8	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _drawRect$144057[ebp]
  00bae	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 450  : 			SOL_Point pt(0, 0);

  00bb3	6a 00		 push	 0
  00bb5	6a 00		 push	 0
  00bb7	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _pt$144058[ebp]
  00bbd	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 451  : 			celObj.Draw(buffer, drawRect, pt, celObj.Mirrored());

  00bc2	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  00bc5	e8 00 00 00 00	 call	 ?Mirrored@CelObj@@QBEHXZ ; CelObj::Mirrored
  00bca	50		 push	 eax
  00bcb	83 ec 08	 sub	 esp, 8
  00bce	8b cc		 mov	 ecx, esp
  00bd0	89 a5 88 fa ff
	ff		 mov	 DWORD PTR $T150646[ebp], esp
  00bd6	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _pt$144058[ebp]
  00bdc	52		 push	 edx
  00bdd	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00be2	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _drawRect$144057[ebp]
  00be8	50		 push	 eax
  00be9	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$144056[ebp]
  00bef	51		 push	 ecx
  00bf0	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  00bf3	e8 00 00 00 00	 call	 ?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjView::Draw

; 452  : 
; 453  : 			if (argCount >= 8 && arg(8))

  00bf8	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00bfb	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00bfe	83 f8 08	 cmp	 eax, 8
  00c01	7c 3b		 jl	 SHORT $L144060
  00c03	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00c06	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00c0a	85 d2		 test	 edx, edx
  00c0c	74 30		 je	 SHORT $L144060

; 454  : 				RemapBitmap(BM, arg(8));

  00c0e	51		 push	 ecx
  00c0f	8b cc		 mov	 ecx, esp
  00c11	89 a5 84 fa ff
	ff		 mov	 DWORD PTR $T150647[ebp], esp
  00c17	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00c1a	66 8b 50 10	 mov	 dx, WORD PTR [eax+16]
  00c1e	52		 push	 edx
  00c1f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00c24	51		 push	 ecx
  00c25	8b cc		 mov	 ecx, esp
  00c27	89 a5 80 fa ff
	ff		 mov	 DWORD PTR $T150648[ebp], esp
  00c2d	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  00c30	50		 push	 eax
  00c31	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00c36	e8 00 00 00 00	 call	 ?RemapBitmap@@YAXVMemID@@VObjectID@@@Z ; RemapBitmap
  00c3b	83 c4 08	 add	 esp, 8
$L144060:

; 455  : 
; 456  : 			pm.acc = BM;

  00c3e	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00c41	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00c46	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00c4b	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 457  : 			break;

  00c50	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00c57	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  00c5a	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  00c5f	e9 77 3e 00 00	 jmp	 $L144030
$L144063:

; 459  : 
; 460  : 		case bDispose:
; 461  : 			// Dispose bitmap
; 462  : 			//	--------------
; 463  : 			// Input
; 464  : 			// 	  arg2-----the MemID for the bitmap
; 465  : 			BM = arg(2);

  00c64	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00c67	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  00c6b	52		 push	 edx
  00c6c	8d 8d 7c fa ff
	ff		 lea	 ecx, DWORD PTR $T150649[ebp]
  00c72	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00c77	66 8b 85 7c fa
	ff ff		 mov	 ax, WORD PTR $T150649[ebp]
  00c7e	66 89 45 e8	 mov	 WORD PTR _BM$[ebp], ax

; 466  : 
; 467  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) 

  00c82	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00c85	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00c8a	85 c0		 test	 eax, eax
  00c8c	74 0d		 je	 SHORT $L144066
  00c8e	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00c91	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  00c96	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  00c99	74 27		 je	 SHORT $L144065
$L144066:

; 468  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  00c9b	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00c9e	33 d2		 xor	 edx, edx
  00ca0	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  00ca4	52		 push	 edx
  00ca5	68 d4 01 00 00	 push	 468			; 000001d4H
  00caa	68 00 00 00 00	 push	 OFFSET FLAT:$SG144068
  00caf	68 00 00 00 00	 push	 OFFSET FLAT:$SG144069
  00cb4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00cb9	50		 push	 eax
  00cba	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00cbf	83 c4 14	 add	 esp, 20			; 00000014H
$L144065:

; 469  : 
; 470  : 			ValidateBitmap ( BM );

  00cc2	51		 push	 ecx
  00cc3	8b cc		 mov	 ecx, esp
  00cc5	89 a5 78 fa ff
	ff		 mov	 DWORD PTR $T150650[ebp], esp
  00ccb	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  00cce	52		 push	 edx
  00ccf	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00cd4	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  00cd9	83 c4 04	 add	 esp, 4

; 471  : 
; 472  : 			memMgr->Free((SOL_Handle) arg(2));

  00cdc	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00cdf	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00ce3	51		 push	 ecx
  00ce4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00cea	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 473  : 
; 474  : 			break;

  00cef	e9 e7 3d 00 00	 jmp	 $L144030
$L144072:

; 477  : 			// Add line to bitmap
; 478  : 			//	--------------
; 479  : 			// Input
; 480  : 			//      arg2-----MemID for the bitmap
; 481  : 			//      arg3-----Point A.x
; 482  : 			//      arg4-----Point A.y
; 483  : 			//      arg5-----Point B.x
; 484  : 			//      arg6-----Point B.y
; 485  : 			//      arg7-----color
; 486  : 			//      arg8-----style  Solid=0,Dashed=1,Pattern=2
; 487  : 			//      arg9-----pattern
; 488  : 			// Output
; 489  : 			// 	  Line added to bitmap
; 490  : 			//		  Accumulator not modified
; 491  : 
; 492  : #ifdef WIN32S
; 493  : 	arg(7) = (SCIWord)AddPalShift((int)arg(7));

  00cf4	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00cf7	0f bf 42 0e	 movsx	 eax, WORD PTR [edx+14]
  00cfb	50		 push	 eax
  00cfc	e8 00 00 00 00	 call	 ?AddPalShift@@YAHH@Z	; AddPalShift
  00d01	83 c4 04	 add	 esp, 4
  00d04	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00d07	66 89 41 0e	 mov	 WORD PTR [ecx+14], ax

; 494  : #endif
; 495  : 
; 496  : 			// Convert 16 bit pattern to 32 bit pattern
; 497  : 			int pattern = (argCount > 8) ? arg(9) : 0;

  00d0b	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00d0e	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00d11	83 f8 08	 cmp	 eax, 8
  00d14	7e 0f		 jle	 SHORT $L150651
  00d16	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00d19	0f bf 51 12	 movsx	 edx, WORD PTR [ecx+18]
  00d1d	89 95 44 f8 ff
	ff		 mov	 DWORD PTR -1980+[ebp], edx
  00d23	eb 0a		 jmp	 SHORT $L150652
$L150651:
  00d25	c7 85 44 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1980+[ebp], 0
$L150652:
  00d2f	8b 85 44 f8 ff
	ff		 mov	 eax, DWORD PTR -1980+[ebp]
  00d35	89 85 40 ff ff
	ff		 mov	 DWORD PTR _pattern$144075[ebp], eax

; 498  : 			int left = pattern << 16;

  00d3b	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _pattern$144075[ebp]
  00d41	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00d44	89 8d 38 ff ff
	ff		 mov	 DWORD PTR _left$144076[ebp], ecx

; 499  : 			pattern |= left;

  00d4a	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _pattern$144075[ebp]
  00d50	0b 95 38 ff ff
	ff		 or	 edx, DWORD PTR _left$144076[ebp]
  00d56	89 95 40 ff ff
	ff		 mov	 DWORD PTR _pattern$144075[ebp], edx

; 500  : 			int style = (argCount > 7) ? arg(8) : SOL_Line::tSolid;

  00d5c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00d5f	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00d62	83 f9 07	 cmp	 ecx, 7
  00d65	7e 0f		 jle	 SHORT $L150653
  00d67	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00d6a	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  00d6e	89 85 40 f8 ff
	ff		 mov	 DWORD PTR -1984+[ebp], eax
  00d74	eb 0a		 jmp	 SHORT $L150654
$L150653:
  00d76	c7 85 40 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1984+[ebp], 0
$L150654:
  00d80	8b 8d 40 f8 ff
	ff		 mov	 ecx, DWORD PTR -1984+[ebp]
  00d86	89 8d 3c ff ff
	ff		 mov	 DWORD PTR _style$144077[ebp], ecx

; 501  : 
; 502  : 			BM = arg(2);

  00d8c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00d8f	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  00d93	50		 push	 eax
  00d94	8d 8d 74 fa ff
	ff		 lea	 ecx, DWORD PTR $T150655[ebp]
  00d9a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00d9f	66 8b 8d 74 fa
	ff ff		 mov	 cx, WORD PTR $T150655[ebp]
  00da6	66 89 4d e8	 mov	 WORD PTR _BM$[ebp], cx

; 503  : 
; 504  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) {

  00daa	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00dad	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00db2	85 c0		 test	 eax, eax
  00db4	74 0d		 je	 SHORT $L144080
  00db6	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00db9	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  00dbe	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  00dc1	74 28		 je	 SHORT $L144079
$L144080:

; 505  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  00dc3	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00dc6	33 c0		 xor	 eax, eax
  00dc8	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  00dcc	50		 push	 eax
  00dcd	68 f9 01 00 00	 push	 505			; 000001f9H
  00dd2	68 00 00 00 00	 push	 OFFSET FLAT:$SG144082
  00dd7	68 00 00 00 00	 push	 OFFSET FLAT:$SG144083
  00ddc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00de2	51		 push	 ecx
  00de3	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00de8	83 c4 14	 add	 esp, 20			; 00000014H
$L144079:

; 507  : 
; 508  : 			// Get the width of the bitmap
; 509  : 			celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  00deb	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00dee	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00df3	50		 push	 eax
  00df4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00dfa	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00dff	89 45 e0	 mov	 DWORD PTR _celHeader$[ebp], eax

; 510  : 			BMWidth = celHeader->xDim;

  00e02	8b 55 e0	 mov	 edx, DWORD PTR _celHeader$[ebp]
  00e05	33 c0		 xor	 eax, eax
  00e07	66 8b 02	 mov	 ax, WORD PTR [edx]
  00e0a	89 45 e4	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 511  : 
; 512  : 			SOL_Line 	line(arg(3),arg(4),arg(5),arg(6));

  00e0d	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00e10	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  00e14	52		 push	 edx
  00e15	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00e18	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  00e1c	51		 push	 ecx
  00e1d	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00e20	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  00e24	50		 push	 eax
  00e25	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00e28	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00e2c	52		 push	 edx
  00e2d	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _line$144085[ebp]
  00e33	e8 00 00 00 00	 call	 ??0SOL_Line@@QAE@HHHH@Z	; SOL_Line::SOL_Line

; 513  : 
; 514  : #ifdef DEBUG
; 515  : 			// Integrity checks
; 516  : 			BMHeight = celHeader->yDim;
; 517  : 			if ((line.A.x < 0)			||
; 518  : 				 (line.A.y < 0)			||
; 519  : 				 (line.B.y < 0)			||
; 520  : 				 (line.B.x > BMWidth)	||
; 521  : 				 (line.A.y > BMHeight)	||
; 522  : 				 (line.B.y > BMHeight))
; 523  : 
; 524  : 	 			msgMgr->Fatal(SrcLoc,"Invalid line for given bitmap");
; 525  : #endif
; 526  : 
; 527  : 			line.DrawThin(arg(7),style,pattern,BM,BMWidth);

  00e38	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  00e3b	50		 push	 eax
  00e3c	51		 push	 ecx
  00e3d	8b cc		 mov	 ecx, esp
  00e3f	89 a5 70 fa ff
	ff		 mov	 DWORD PTR $T150656[ebp], esp
  00e45	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  00e48	52		 push	 edx
  00e49	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00e4e	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _pattern$144075[ebp]
  00e54	50		 push	 eax
  00e55	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _style$144077[ebp]
  00e5b	51		 push	 ecx
  00e5c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00e5f	8a 42 0e	 mov	 al, BYTE PTR [edx+14]
  00e62	50		 push	 eax
  00e63	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _line$144085[ebp]
  00e69	e8 00 00 00 00	 call	 ?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z ; SOL_Line::DrawThin

; 528  : 			ValidateBitmap ( BM );

  00e6e	51		 push	 ecx
  00e6f	8b cc		 mov	 ecx, esp
  00e71	89 a5 6c fa ff
	ff		 mov	 DWORD PTR $T150657[ebp], esp
  00e77	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  00e7a	52		 push	 edx
  00e7b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00e80	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  00e85	83 c4 04	 add	 esp, 4

; 529  : 			break;

  00e88	e9 4e 3c 00 00	 jmp	 $L144030
$L144088:

; 532  : 			// Add cel to bitmap
; 533  : 			//	-----------------
; 534  : 			// Input
; 535  : 			//      arg2:  MemID for the bitmap
; 536  : 			//      arg3:  view
; 537  : 			//      arg4:  loop
; 538  : 			//      arg5:  cel
; 539  : 			//      arg6:  x of where to position cel [-1 = origin point]
; 540  : 			//      arg7:  y of where to position cel [-1 = origin point]
; 541  : 			//		  arg8:  dontClip [clip=0, union=1]
; 542  : 			//		  arg9:  x of cel to match with [-1 = origin point]
; 543  : 			//		  arg10: y of cel to match with [-1 = origin point]
; 544  : 
; 545  : 			MemID			viewBM;

  00e8d	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _viewBM$144089[ebp]
  00e93	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 546  : 			SOL_Rect    theTextBox, BMRect;

  00e98	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$144090[ebp]
  00e9e	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00ea3	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _BMRect$144091[ebp]
  00ea9	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 547  : 			ObjectID    obj;

  00eae	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _obj$144092[ebp]
  00eb4	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@XZ	; ObjectID::ObjectID

; 548  : 
; 549  : 			BM = arg(2);

  00eb9	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00ebc	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00ec0	51		 push	 ecx
  00ec1	8d 8d 68 fa ff
	ff		 lea	 ecx, DWORD PTR $T150658[ebp]
  00ec7	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00ecc	66 8b 95 68 fa
	ff ff		 mov	 dx, WORD PTR $T150658[ebp]
  00ed3	66 89 55 e8	 mov	 WORD PTR _BM$[ebp], dx

; 550  : 
; 551  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) {

  00ed7	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00eda	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00edf	85 c0		 test	 eax, eax
  00ee1	74 0d		 je	 SHORT $L144095
  00ee3	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00ee6	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  00eeb	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  00eee	74 28		 je	 SHORT $L144094
$L144095:

; 552  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  00ef0	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00ef3	33 c9		 xor	 ecx, ecx
  00ef5	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00ef9	51		 push	 ecx
  00efa	68 28 02 00 00	 push	 552			; 00000228H
  00eff	68 00 00 00 00	 push	 OFFSET FLAT:$SG144097
  00f04	68 00 00 00 00	 push	 OFFSET FLAT:$SG144098
  00f09	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00f0f	52		 push	 edx
  00f10	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00f15	83 c4 14	 add	 esp, 20			; 00000014H
$L144094:

; 554  : 
; 555  : 			celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  00f18	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  00f1b	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00f20	50		 push	 eax
  00f21	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00f27	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  00f2c	89 45 e0	 mov	 DWORD PTR _celHeader$[ebp], eax

; 556  : 			BMWidth  = celHeader->xDim;

  00f2f	8b 45 e0	 mov	 eax, DWORD PTR _celHeader$[ebp]
  00f32	33 c9		 xor	 ecx, ecx
  00f34	66 8b 08	 mov	 cx, WORD PTR [eax]
  00f37	89 4d e4	 mov	 DWORD PTR _BMWidth$[ebp], ecx

; 557  : 			BMHeight = celHeader->yDim;

  00f3a	8b 55 e0	 mov	 edx, DWORD PTR _celHeader$[ebp]
  00f3d	33 c0		 xor	 eax, eax
  00f3f	66 8b 42 02	 mov	 ax, WORD PTR [edx+2]
  00f43	89 45 f0	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 558  : 
; 559  : 			// Determine size of object were adding
; 560  : 		   CelObjView celObj(arg(3),arg(4),arg(5));

  00f46	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00f49	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  00f4d	52		 push	 edx
  00f4e	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00f51	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00f55	51		 push	 ecx
  00f56	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00f59	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  00f5d	50		 push	 eax
  00f5e	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144100[ebp]
  00f64	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  00f69	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 561  :    		int objWidth = celObj.Width();

  00f70	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144100[ebp]
  00f76	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  00f7b	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _objWidth$144101[ebp], eax

; 562  :    		int objHeight= celObj.Height();

  00f81	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144100[ebp]
  00f87	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  00f8c	89 85 cc fe ff
	ff		 mov	 DWORD PTR _objHeight$144102[ebp], eax

; 563  : 
; 564  : 			int posX = (argCount > 5) ? arg(6) : 0;

  00f92	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00f95	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00f98	83 fa 05	 cmp	 edx, 5
  00f9b	7e 0f		 jle	 SHORT $L150659
  00f9d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00fa0	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  00fa4	89 8d 3c f8 ff
	ff		 mov	 DWORD PTR -1988+[ebp], ecx
  00faa	eb 0a		 jmp	 SHORT $L150660
$L150659:
  00fac	c7 85 3c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1988+[ebp], 0
$L150660:
  00fb6	8b 95 3c f8 ff
	ff		 mov	 edx, DWORD PTR -1988+[ebp]
  00fbc	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _posX$144103[ebp], edx

; 565  : 			int posY = (argCount > 6) ? arg(7) : 0;

  00fc2	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00fc5	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00fc8	83 f9 06	 cmp	 ecx, 6
  00fcb	7e 0f		 jle	 SHORT $L150661
  00fcd	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00fd0	0f bf 42 0e	 movsx	 eax, WORD PTR [edx+14]
  00fd4	89 85 38 f8 ff
	ff		 mov	 DWORD PTR -1992+[ebp], eax
  00fda	eb 0a		 jmp	 SHORT $L150662
$L150661:
  00fdc	c7 85 38 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1992+[ebp], 0
$L150662:
  00fe6	8b 8d 38 f8 ff
	ff		 mov	 ecx, DWORD PTR -1992+[ebp]
  00fec	89 8d c8 fe ff
	ff		 mov	 DWORD PTR _posY$144104[ebp], ecx

; 566  : 			int matchX = (argCount > 8) ? arg(9) : -1;

  00ff2	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00ff5	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00ff8	83 f8 08	 cmp	 eax, 8
  00ffb	7e 0f		 jle	 SHORT $L150663
  00ffd	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01000	0f bf 51 12	 movsx	 edx, WORD PTR [ecx+18]
  01004	89 95 34 f8 ff
	ff		 mov	 DWORD PTR -1996+[ebp], edx
  0100a	eb 0a		 jmp	 SHORT $L150664
$L150663:
  0100c	c7 85 34 f8 ff
	ff ff ff ff ff	 mov	 DWORD PTR -1996+[ebp], -1
$L150664:
  01016	8b 85 34 f8 ff
	ff		 mov	 eax, DWORD PTR -1996+[ebp]
  0101c	89 85 90 fe ff
	ff		 mov	 DWORD PTR _matchX$144105[ebp], eax

; 567  : 			int matchY = (argCount > 9) ? arg(10) : -1;

  01022	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01025	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  01028	83 fa 09	 cmp	 edx, 9
  0102b	7e 0f		 jle	 SHORT $L150665
  0102d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01030	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  01034	89 8d 30 f8 ff
	ff		 mov	 DWORD PTR -2000+[ebp], ecx
  0103a	eb 0a		 jmp	 SHORT $L150666
$L150665:
  0103c	c7 85 30 f8 ff
	ff ff ff ff ff	 mov	 DWORD PTR -2000+[ebp], -1
$L150666:
  01046	8b 95 30 f8 ff
	ff		 mov	 edx, DWORD PTR -2000+[ebp]
  0104c	89 95 a8 fe ff
	ff		 mov	 DWORD PTR _matchY$144106[ebp], edx

; 568  : 
; 569  : 			celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  01052	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01055	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0105a	50		 push	 eax
  0105b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  01061	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  01066	89 45 e0	 mov	 DWORD PTR _celHeader$[ebp], eax

; 570  : 
; 571  : 			SOL_Point pt(posX, posY);

  01069	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _posY$144104[ebp]
  0106f	50		 push	 eax
  01070	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _posX$144103[ebp]
  01076	51		 push	 ecx
  01077	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _pt$144108[ebp]
  0107d	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 572  : 			if (posX == -1) 

  01082	83 bd d0 fe ff
	ff ff		 cmp	 DWORD PTR _posX$144103[ebp], -1
  01089	75 0d		 jne	 SHORT $L144109

; 573  : 				pt.x = celHeader->xHot;

  0108b	8b 55 e0	 mov	 edx, DWORD PTR _celHeader$[ebp]
  0108e	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  01092	89 85 ac fe ff
	ff		 mov	 DWORD PTR _pt$144108[ebp], eax
$L144109:

; 574  : 			if (posY == -1) 

  01098	83 bd c8 fe ff
	ff ff		 cmp	 DWORD PTR _posY$144104[ebp], -1
  0109f	75 0d		 jne	 SHORT $L144110

; 575  : 				pt.y = celHeader->yHot;

  010a1	8b 4d e0	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  010a4	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  010a8	89 95 b0 fe ff
	ff		 mov	 DWORD PTR _pt$144108[ebp+4], edx
$L144110:

; 576  : 
; 577  : 			if (matchX == -1)

  010ae	83 bd 90 fe ff
	ff ff		 cmp	 DWORD PTR _matchX$144105[ebp], -1
  010b5	75 1b		 jne	 SHORT $L144111

; 578  : 				pt.x -= celObj.XOrg();

  010b7	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144100[ebp]
  010bd	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  010c2	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _pt$144108[ebp]
  010c8	2b c8		 sub	 ecx, eax
  010ca	89 8d ac fe ff
	ff		 mov	 DWORD PTR _pt$144108[ebp], ecx

; 579  : 			else

  010d0	eb 12		 jmp	 SHORT $L144112
$L144111:

; 580  : 				pt.x -= matchX;

  010d2	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR _pt$144108[ebp]
  010d8	2b 95 90 fe ff
	ff		 sub	 edx, DWORD PTR _matchX$144105[ebp]
  010de	89 95 ac fe ff
	ff		 mov	 DWORD PTR _pt$144108[ebp], edx
$L144112:

; 581  : 
; 582  : 			if (matchY == -1)

  010e4	83 bd a8 fe ff
	ff ff		 cmp	 DWORD PTR _matchY$144106[ebp], -1
  010eb	75 1b		 jne	 SHORT $L144113

; 583  : 				pt.y -= celObj.YOrg();

  010ed	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144100[ebp]
  010f3	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  010f8	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _pt$144108[ebp+4]
  010fe	2b c8		 sub	 ecx, eax
  01100	89 8d b0 fe ff
	ff		 mov	 DWORD PTR _pt$144108[ebp+4], ecx

; 584  : 			else

  01106	eb 12		 jmp	 SHORT $L144114
$L144113:

; 585  : 				pt.y -= matchY;

  01108	8b 95 b0 fe ff
	ff		 mov	 edx, DWORD PTR _pt$144108[ebp+4]
  0110e	2b 95 a8 fe ff
	ff		 sub	 edx, DWORD PTR _matchY$144106[ebp]
  01114	89 95 b0 fe ff
	ff		 mov	 DWORD PTR _pt$144108[ebp+4], edx
$L144114:

; 586  : 
; 587  : 			// Figure out the actual draw region into the cel. Make sure it
; 588  : 			// does not get bigger than existing bitmap.
; 589  : 			theTextBox.Set(pt.x,pt.y,pt.x+objWidth-1,pt.y+objHeight-1); 

  0111a	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _objHeight$144102[ebp]
  01120	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _pt$144108[ebp+4]
  01126	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  0112a	52		 push	 edx
  0112b	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _objWidth$144101[ebp]
  01131	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _pt$144108[ebp]
  01137	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  0113b	52		 push	 edx
  0113c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _pt$144108[ebp+4]
  01142	50		 push	 eax
  01143	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _pt$144108[ebp]
  01149	51		 push	 ecx
  0114a	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$144090[ebp]
  01150	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 590  : 			BMRect.Set(0, 0, BMWidth-1, BMHeight-1);

  01155	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  01158	83 ea 01	 sub	 edx, 1
  0115b	52		 push	 edx
  0115c	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0115f	83 e8 01	 sub	 eax, 1
  01162	50		 push	 eax
  01163	6a 00		 push	 0
  01165	6a 00		 push	 0
  01167	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _BMRect$144091[ebp]
  0116d	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 591  : 			theTextBox.Clip(BMRect);

  01172	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _BMRect$144091[ebp]
  01178	51		 push	 ecx
  01179	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$144090[ebp]
  0117f	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip

; 592  : 
; 593  : 			// make sure the view is not purged by BM.Get() allocation
; 594  : 			resMgr->Get(MemResView, arg(3));

  01184	6a 00		 push	 0
  01186	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01189	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  0118d	50		 push	 eax
  0118e	6a 00		 push	 0
  01190	8d 8d 64 fa ff
	ff		 lea	 ecx, DWORD PTR $T150667[ebp]
  01196	51		 push	 ecx
  01197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  0119d	8b 02		 mov	 eax, DWORD PTR [edx]
  0119f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  011a5	ff 50 20	 call	 DWORD PTR [eax+32]

; 595  : 
; 596  : 			// Create a buffer that points to bitmap
; 597  : 			BufferStd buffer(BMWidth, BMHeight, (uchar*) memMgr->GetAddr(BM) + CELHEADERSIZE);

  011a8	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  011ab	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  011b0	50		 push	 eax
  011b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  011b7	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  011bc	83 c0 2e	 add	 eax, 46			; 0000002eH
  011bf	50		 push	 eax
  011c0	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  011c3	51		 push	 ecx
  011c4	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  011c7	52		 push	 edx
  011c8	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$144117[ebp]
  011ce	e8 00 00 00 00	 call	 ??0BufferStd@@QAE@HHPAE@Z ; BufferStd::BufferStd

; 598  : 
; 599  : 			// draw the cel object into the buffer
; 600  : 			// theTextBox: relative to upper left. textBox >= pt coords
; 601  : 			// pt: upper left of cel
; 602  : 			if (!theTextBox.IsEmpty())

  011d3	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$144090[ebp]
  011d9	e8 00 00 00 00	 call	 ?IsEmpty@SOL_Rect@@QBEHXZ ; SOL_Rect::IsEmpty
  011de	85 c0		 test	 eax, eax
  011e0	75 3c		 jne	 SHORT $L144118

; 603  : 				celObj.Draw(buffer, theTextBox, pt, celObj.Mirrored());

  011e2	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144100[ebp]
  011e8	e8 00 00 00 00	 call	 ?Mirrored@CelObj@@QBEHXZ ; CelObj::Mirrored
  011ed	50		 push	 eax
  011ee	83 ec 08	 sub	 esp, 8
  011f1	8b cc		 mov	 ecx, esp
  011f3	89 a5 60 fa ff
	ff		 mov	 DWORD PTR $T150668[ebp], esp
  011f9	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _pt$144108[ebp]
  011ff	50		 push	 eax
  01200	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01205	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$144090[ebp]
  0120b	51		 push	 ecx
  0120c	8d 95 b4 fe ff
	ff		 lea	 edx, DWORD PTR _buffer$144117[ebp]
  01212	52		 push	 edx
  01213	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144100[ebp]
  01219	e8 00 00 00 00	 call	 ?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjView::Draw
$L144118:

; 604  : 
; 605  : 			ValidateBitmap ( BM );

  0121e	51		 push	 ecx
  0121f	8b cc		 mov	 ecx, esp
  01221	89 a5 5c fa ff
	ff		 mov	 DWORD PTR $T150669[ebp], esp
  01227	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  0122a	50		 push	 eax
  0122b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01230	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  01235	83 c4 04	 add	 esp, 4

; 606  : 			break;

  01238	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0123f	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144100[ebp]
  01245	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0124a	e9 8c 38 00 00	 jmp	 $L144030
$L144121:

; 609  : 			// Add text to bitmap
; 610  : 			//	------------------
; 611  : 			// Input
; 612  : 			//      arg2:  MemID for the bitmap
; 613  : 			//      arg3:  text
; 614  : 
; 615  : 			//		  arg4:  textRect.A.x
; 616  : 			//		  arg5:  textRect.A.y
; 617  : 			//		  arg6:  textRect.B.x
; 618  : 			//		  arg7:  textRect.B.y
; 619  : 			//      arg8:  fore
; 620  : 			//      arg9:  back
; 621  : 			//      arg10:  skip
; 622  : 			//      arg11:  font
; 623  : 			//      arg12:  mode
; 624  : 			//      arg13: borderColor
; 625  : 			//      arg14: dimmed
; 626  : 
; 627  : 			BM = arg(2);

  0124f	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01252	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  01256	52		 push	 edx
  01257	8d 8d 58 fa ff
	ff		 lea	 ecx, DWORD PTR $T150670[ebp]
  0125d	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01262	66 8b 85 58 fa
	ff ff		 mov	 ax, WORD PTR $T150670[ebp]
  01269	66 89 45 e8	 mov	 WORD PTR _BM$[ebp], ax

; 628  : 
; 629  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) {

  0126d	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01270	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  01275	85 c0		 test	 eax, eax
  01277	74 0d		 je	 SHORT $L144124
  01279	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  0127c	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  01281	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  01284	74 27		 je	 SHORT $L144123
$L144124:

; 630  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  01286	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01289	33 d2		 xor	 edx, edx
  0128b	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  0128f	52		 push	 edx
  01290	68 76 02 00 00	 push	 630			; 00000276H
  01295	68 00 00 00 00	 push	 OFFSET FLAT:$SG144126
  0129a	68 00 00 00 00	 push	 OFFSET FLAT:$SG144127
  0129f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  012a4	50		 push	 eax
  012a5	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  012aa	83 c4 14	 add	 esp, 20			; 00000014H
$L144123:

; 632  : 
; 633  : 			celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  012ad	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  012b0	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  012b5	50		 push	 eax
  012b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  012bc	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  012c1	89 45 e0	 mov	 DWORD PTR _celHeader$[ebp], eax

; 634  : 			BMWidth = celHeader->xDim;

  012c4	8b 4d e0	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  012c7	33 d2		 xor	 edx, edx
  012c9	66 8b 11	 mov	 dx, WORD PTR [ecx]
  012cc	89 55 e4	 mov	 DWORD PTR _BMWidth$[ebp], edx

; 635  : 			BMHeight = celHeader->yDim;

  012cf	8b 45 e0	 mov	 eax, DWORD PTR _celHeader$[ebp]
  012d2	33 c9		 xor	 ecx, ecx
  012d4	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  012d8	89 4d f0	 mov	 DWORD PTR _BMHeight$[ebp], ecx

; 636  : 
; 637  : 			SOL_Rect theTextBox(arg(4),arg(5),arg(6),arg(7));

  012db	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  012de	0f bf 42 0e	 movsx	 eax, WORD PTR [edx+14]
  012e2	50		 push	 eax
  012e3	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  012e6	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  012ea	52		 push	 edx
  012eb	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  012ee	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  012f2	51		 push	 ecx
  012f3	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  012f6	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  012fa	50		 push	 eax
  012fb	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$144129[ebp]
  01301	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 638  : 			SOL_Rect BMRect(0, 0, BMWidth - 1, BMHeight - 1);

  01306	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  01309	83 e9 01	 sub	 ecx, 1
  0130c	51		 push	 ecx
  0130d	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  01310	83 ea 01	 sub	 edx, 1
  01313	52		 push	 edx
  01314	6a 00		 push	 0
  01316	6a 00		 push	 0
  01318	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR _BMRect$144130[ebp]
  0131e	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 639  : 
; 640  : 			theTextBox.Clip(BMRect);

  01323	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _BMRect$144130[ebp]
  01329	50		 push	 eax
  0132a	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$144129[ebp]
  01330	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip

; 641  : 			SOL_Point pt(theTextBox.A);

  01335	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$144129[ebp]
  0133b	51		 push	 ecx
  0133c	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR _pt$144131[ebp]
  01342	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point

; 642  : 
; 643  :          SOL_Rect textBox(theTextBox);

  01347	8d 95 f4 fd ff
	ff		 lea	 edx, DWORD PTR _theTextBox$144129[ebp]
  0134d	52		 push	 edx
  0134e	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR _textBox$144132[ebp]
  01354	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 644  : 			textBox.MoveTo(0,0);

  01359	6a 00		 push	 0
  0135b	6a 00		 push	 0
  0135d	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR _textBox$144132[ebp]
  01363	e8 00 00 00 00	 call	 ?MoveTo@SOL_Rect@@QAEXHH@Z ; SOL_Rect::MoveTo

; 645  : 
; 646  : 			// create a text bitmap
; 647  : 			MemID textBM =
; 648  : 				fontMgr->BuildFBM(
; 649  :                textBox.Xlen(),
; 650  :                textBox.Ylen(),
; 651  : 					textBox,
; 652  : 					arg(3),
; 653  : 					arg(8),	// fore
; 654  : 					arg(9),  // back
; 655  : 					arg(10),	// skip
; 656  : 					arg(11),	// font
; 657  : 					arg(12),	// mode
; 658  : 					arg(13),	// borderColor
; 659  : 					arg(14),	// dimit
; 660  :                False
; 661  : 				);

  01368	6a 00		 push	 0
  0136a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0136d	0f bf 48 1c	 movsx	 ecx, WORD PTR [eax+28]
  01371	51		 push	 ecx
  01372	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01375	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  01379	50		 push	 eax
  0137a	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0137d	0f bf 51 18	 movsx	 edx, WORD PTR [ecx+24]
  01381	52		 push	 edx
  01382	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01385	0f bf 48 16	 movsx	 ecx, WORD PTR [eax+22]
  01389	51		 push	 ecx
  0138a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0138d	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  01391	50		 push	 eax
  01392	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01395	0f bf 51 12	 movsx	 edx, WORD PTR [ecx+18]
  01399	52		 push	 edx
  0139a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0139d	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  013a1	51		 push	 ecx
  013a2	51		 push	 ecx
  013a3	8b cc		 mov	 ecx, esp
  013a5	89 a5 54 fa ff
	ff		 mov	 DWORD PTR $T150671[ebp], esp
  013ab	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  013ae	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  013b2	50		 push	 eax
  013b3	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  013b8	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR _textBox$144132[ebp]
  013be	51		 push	 ecx
  013bf	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR _textBox$144132[ebp]
  013c5	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  013ca	50		 push	 eax
  013cb	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR _textBox$144132[ebp]
  013d1	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  013d6	50		 push	 eax
  013d7	8d 95 50 fa ff
	ff		 lea	 edx, DWORD PTR $T150672[ebp]
  013dd	52		 push	 edx
  013de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fontMgr@@3PAVFontMgr@@A ; fontMgr
  013e4	e8 00 00 00 00	 call	 ?BuildFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHHHH@Z ; FontMgr::BuildFBM
  013e9	50		 push	 eax
  013ea	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR _textBM$144133[ebp]
  013f0	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 662  : 
; 663  : 			// merge the text bitmap with passed in bitmap
; 664  : 			BufferStd buffer(BMWidth,
; 665  :                           BMHeight,
; 666  :                           (uchar*) memMgr->GetAddr(BM) + CELHEADERSIZE);

  013f5	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  013f8	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  013fd	50		 push	 eax
  013fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  01404	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  01409	83 c0 2e	 add	 eax, 46			; 0000002eH
  0140c	50		 push	 eax
  0140d	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  01410	50		 push	 eax
  01411	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  01414	51		 push	 ecx
  01415	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$144137[ebp]
  0141b	e8 00 00 00 00	 call	 ??0BufferStd@@QAE@HHPAE@Z ; BufferStd::BufferStd

; 667  : 
; 668  : 			CelObjMem celObj(textBM);

  01420	51		 push	 ecx
  01421	8b cc		 mov	 ecx, esp
  01423	89 a5 4c fa ff
	ff		 mov	 DWORD PTR $T150673[ebp], esp
  01429	8d 95 2c fe ff
	ff		 lea	 edx, DWORD PTR _textBM$144133[ebp]
  0142f	52		 push	 edx
  01430	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01435	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144138[ebp]
  0143b	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  01440	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 669  : 			theTextBox.Clip ( BMRect );

  01447	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _BMRect$144130[ebp]
  0144d	50		 push	 eax
  0144e	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$144129[ebp]
  01454	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip

; 670  : 			celObj.Draw(buffer,theTextBox,pt,0);

  01459	6a 00		 push	 0
  0145b	83 ec 08	 sub	 esp, 8
  0145e	8b cc		 mov	 ecx, esp
  01460	89 a5 48 fa ff
	ff		 mov	 DWORD PTR $T150674[ebp], esp
  01466	8d 95 04 fe ff
	ff		 lea	 edx, DWORD PTR _pt$144131[ebp]
  0146c	52		 push	 edx
  0146d	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01472	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _theTextBox$144129[ebp]
  01478	50		 push	 eax
  01479	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$144137[ebp]
  0147f	51		 push	 ecx
  01480	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144138[ebp]
  01486	e8 00 00 00 00	 call	 ?Draw@CelObjMem@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjMem::Draw

; 671  : 
; 672  : 			ValidateBitmap ( BM );

  0148b	51		 push	 ecx
  0148c	8b cc		 mov	 ecx, esp
  0148e	89 a5 44 fa ff
	ff		 mov	 DWORD PTR $T150675[ebp], esp
  01494	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  01497	52		 push	 edx
  01498	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0149d	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  014a2	83 c4 04	 add	 esp, 4

; 673  : 
; 674  : 			// get rid of the text bitmap
; 675  : 			memMgr->Free(textBM);

  014a5	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR _textBM$144133[ebp]
  014ab	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  014b0	50		 push	 eax
  014b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  014b7	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 676  : 
; 677  : 			break;

  014bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  014c3	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144138[ebp]
  014c9	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  014ce	e9 08 36 00 00	 jmp	 $L144030
$L144142:

; 680  : 			// Add rectangle to bitmap
; 681  : 			//	-----------------------
; 682  : 			// Input
; 683  : 			//      arg2-----MemID for the bitmap
; 684  : 			//      arg3-----Point rect.x1	left
; 685  : 			//      arg4-----Point rect.y1	top
; 686  : 			//      arg5-----Point rect.x2	right
; 687  : 			//      arg6-----Point rect.y2	bottom
; 688  : 			//      arg7-----color
; 689  : 			// Output
; 690  : 			// 	  Rectangle added to bitmap
; 691  : 			//		  Accumulator not modified
; 692  : 
; 693  : #ifdef WIN32S
; 694  : 	arg(7) = (SCIWord)AddPalShift((int)arg(7));

  014d3	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  014d6	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  014da	51		 push	 ecx
  014db	e8 00 00 00 00	 call	 ?AddPalShift@@YAHH@Z	; AddPalShift
  014e0	83 c4 04	 add	 esp, 4
  014e3	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  014e6	66 89 42 0e	 mov	 WORD PTR [edx+14], ax

; 695  : #endif
; 696  : 
; 697  : 			BM = arg(2);

  014ea	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  014ed	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  014f1	51		 push	 ecx
  014f2	8d 8d 40 fa ff
	ff		 lea	 ecx, DWORD PTR $T150676[ebp]
  014f8	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  014fd	66 8b 95 40 fa
	ff ff		 mov	 dx, WORD PTR $T150676[ebp]
  01504	66 89 55 e8	 mov	 WORD PTR _BM$[ebp], dx

; 698  : 
; 699  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) {

  01508	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  0150b	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  01510	85 c0		 test	 eax, eax
  01512	74 0d		 je	 SHORT $L144147
  01514	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01517	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0151c	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  0151f	74 28		 je	 SHORT $L144146
$L144147:

; 700  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  01521	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01524	33 c9		 xor	 ecx, ecx
  01526	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  0152a	51		 push	 ecx
  0152b	68 bc 02 00 00	 push	 700			; 000002bcH
  01530	68 00 00 00 00	 push	 OFFSET FLAT:$SG144149
  01535	68 00 00 00 00	 push	 OFFSET FLAT:$SG144150
  0153a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01540	52		 push	 edx
  01541	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  01546	83 c4 14	 add	 esp, 20			; 00000014H
$L144146:

; 702  : 
; 703  : 			// The color
; 704  : 			uchar color = arg(7);

  01549	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0154c	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  0154f	88 8d e8 fd ff
	ff		 mov	 BYTE PTR _color$144151[ebp], cl

; 705  : 
; 706  : 			// verify this rectangle and clip if necessary
; 707  : 			int top = arg(4);

  01555	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01558	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  0155c	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _top$144152[ebp], eax

; 708  : 			int left = arg(3);

  01562	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01565	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  01569	89 95 d4 fd ff
	ff		 mov	 DWORD PTR _left$144153[ebp], edx

; 709  : 			int bottom = arg(6);

  0156f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01572	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  01576	89 8d d8 fd ff
	ff		 mov	 DWORD PTR _bottom$144154[ebp], ecx

; 710  : 			int right = arg(5);

  0157c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0157f	0f bf 42 0a	 movsx	 eax, WORD PTR [edx+10]
  01583	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _right$144155[ebp], eax

; 711  : 
; 712  : 			if ( right < left ) 

  01589	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR _right$144155[ebp]
  0158f	3b 8d d4 fd ff
	ff		 cmp	 ecx, DWORD PTR _left$144153[ebp]
  01595	7d 14		 jge	 SHORT $L144156

; 713  : 				msgMgr->Fatal ( "Right coordinate is less than left coordinate in Bitmap AddRect!" );

  01597	68 00 00 00 00	 push	 OFFSET FLAT:$SG144157
  0159c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  015a2	52		 push	 edx
  015a3	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  015a8	83 c4 08	 add	 esp, 8
$L144156:

; 714  : 
; 715  : 			if ( bottom < top ) 

  015ab	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _bottom$144154[ebp]
  015b1	3b 85 e0 fd ff
	ff		 cmp	 eax, DWORD PTR _top$144152[ebp]
  015b7	7d 14		 jge	 SHORT $L144158

; 716  : 				msgMgr->Fatal ( "Bottom coordinate is less than top coordinate in Bitmap AddRect!" );

  015b9	68 00 00 00 00	 push	 OFFSET FLAT:$SG144159
  015be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  015c4	51		 push	 ecx
  015c5	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  015ca	83 c4 08	 add	 esp, 8
$L144158:

; 717  : 
; 718  : 			// Get the width of the bitmap
; 719  : 			celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  015cd	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  015d0	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  015d5	50		 push	 eax
  015d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  015dc	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  015e1	89 45 e0	 mov	 DWORD PTR _celHeader$[ebp], eax

; 720  : 			BMWidth = celHeader->xDim;

  015e4	8b 55 e0	 mov	 edx, DWORD PTR _celHeader$[ebp]
  015e7	33 c0		 xor	 eax, eax
  015e9	66 8b 02	 mov	 ax, WORD PTR [edx]
  015ec	89 45 e4	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 721  : 			BMHeight = celHeader->yDim;

  015ef	8b 4d e0	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  015f2	33 d2		 xor	 edx, edx
  015f4	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  015f8	89 55 f0	 mov	 DWORD PTR _BMHeight$[ebp], edx

; 722  : 
; 723  : 			// make sure the upper-left corner of the rectangle is within
; 724  : 			// the bitmap bounds
; 725  : 			//
; 726  : 			if ( left >= BMWidth ) {

  015fb	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _left$144153[ebp]
  01601	3b 45 e4	 cmp	 eax, DWORD PTR _BMWidth$[ebp]
  01604	7c 0f		 jl	 SHORT $L144161

; 727  : 				pm.acc = 0;

  01606	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 728  : 				return;

  01610	e9 c6 34 00 00	 jmp	 $L144008
$L144161:

; 730  : 
; 731  : 			if ( top >= BMHeight ) {

  01615	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR _top$144152[ebp]
  0161b	3b 4d f0	 cmp	 ecx, DWORD PTR _BMHeight$[ebp]
  0161e	7c 0f		 jl	 SHORT $L144162

; 732  : 				pm.acc = 0;

  01620	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 733  : 				return;

  0162a	e9 ac 34 00 00	 jmp	 $L144008
$L144162:

; 735  : 
; 736  : 			// adjust the upper-left corner of the rectangle if it goes
; 737  : 			// too far to the left
; 738  : 			//
; 739  : 			if ( left < 0 ) {

  0162f	83 bd d4 fd ff
	ff 00		 cmp	 DWORD PTR _left$144153[ebp], 0
  01636	7d 0a		 jge	 SHORT $L144163

; 740  : #ifdef DEBUG
; 741  : 				msgMgr->Mono ( "clipped left edge of rectangle\n" );
; 742  : #endif
; 743  : 				left = 0;

  01638	c7 85 d4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _left$144153[ebp], 0
$L144163:

; 745  : 
; 746  : 			if ( top < 0 ) {

  01642	83 bd e0 fd ff
	ff 00		 cmp	 DWORD PTR _top$144152[ebp], 0
  01649	7d 0a		 jge	 SHORT $L144164

; 747  : #ifdef DEBUG
; 748  : 				msgMgr->Mono ( "clipped top edge of rectangle\n" );
; 749  : #endif
; 750  : 				top = 0;

  0164b	c7 85 e0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _top$144152[ebp], 0
$L144164:

; 752  : 
; 753  : 			// adjust the upper-right corner of the rectangle if it goes
; 754  : 			// too far to the right
; 755  : 			if ( right >= BMWidth ) {

  01655	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _right$144155[ebp]
  0165b	3b 55 e4	 cmp	 edx, DWORD PTR _BMWidth$[ebp]
  0165e	7c 0c		 jl	 SHORT $L144165

; 756  : #ifdef DEBUG
; 757  : 				msgMgr->Mono ( "clipped right edge of rectangle\n" );
; 758  : #endif
; 759  : 				right = BMWidth - 1;

  01660	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  01663	83 e8 01	 sub	 eax, 1
  01666	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _right$144155[ebp], eax
$L144165:

; 761  : 
; 762  : 			if ( bottom >= BMHeight ) {

  0166c	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _bottom$144154[ebp]
  01672	3b 4d f0	 cmp	 ecx, DWORD PTR _BMHeight$[ebp]
  01675	7c 0c		 jl	 SHORT $L144166

; 763  : #ifdef DEBUG
; 764  : 				msgMgr->Mono ( "clipped bottom edge of rectangle\n" );
; 765  : #endif
; 766  : 				bottom = BMHeight - 1;

  01677	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0167a	83 ea 01	 sub	 edx, 1
  0167d	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _bottom$144154[ebp], edx
$L144166:

; 768  : 
; 769  : 			uchar* pixelAddr = ((uchar*) celHeader) + CELHEADERSIZE;

  01683	8b 45 e0	 mov	 eax, DWORD PTR _celHeader$[ebp]
  01686	83 c0 2e	 add	 eax, 46			; 0000002eH
  01689	89 85 dc fd ff
	ff		 mov	 DWORD PTR _pixelAddr$144167[ebp], eax

; 770  : 			pixelAddr += BMWidth * top + left;

  0168f	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  01692	0f af 8d e0 fd
	ff ff		 imul	 ecx, DWORD PTR _top$144152[ebp]
  01699	03 8d d4 fd ff
	ff		 add	 ecx, DWORD PTR _left$144153[ebp]
  0169f	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _pixelAddr$144167[ebp]
  016a5	03 d1		 add	 edx, ecx
  016a7	89 95 dc fd ff
	ff		 mov	 DWORD PTR _pixelAddr$144167[ebp], edx

; 771  : 
; 772  : 			int hRun = right - left + 1;

  016ad	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _right$144155[ebp]
  016b3	2b 85 d4 fd ff
	ff		 sub	 eax, DWORD PTR _left$144153[ebp]
  016b9	83 c0 01	 add	 eax, 1
  016bc	89 85 ec fd ff
	ff		 mov	 DWORD PTR _hRun$144169[ebp], eax

; 773  : 			int vRun = bottom - top + 1;

  016c2	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _bottom$144154[ebp]
  016c8	2b 8d e0 fd ff
	ff		 sub	 ecx, DWORD PTR _top$144152[ebp]
  016ce	83 c1 01	 add	 ecx, 1
  016d1	89 8d f0 fd ff
	ff		 mov	 DWORD PTR _vRun$144170[ebp], ecx

; 774  : 
; 775  : 			for (;vRun > 0;--vRun) {

  016d7	eb 0f		 jmp	 SHORT $L144171
$L144172:
  016d9	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _vRun$144170[ebp]
  016df	83 ea 01	 sub	 edx, 1
  016e2	89 95 f0 fd ff
	ff		 mov	 DWORD PTR _vRun$144170[ebp], edx
$L144171:
  016e8	83 bd f0 fd ff
	ff 00		 cmp	 DWORD PTR _vRun$144170[ebp], 0
  016ef	7e 34		 jle	 SHORT $L144173

; 776  : 				memset(pixelAddr,color,hRun);

  016f1	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _hRun$144169[ebp]
  016f7	50		 push	 eax
  016f8	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _color$144151[ebp]
  016fe	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01704	51		 push	 ecx
  01705	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _pixelAddr$144167[ebp]
  0170b	52		 push	 edx
  0170c	e8 00 00 00 00	 call	 _memset
  01711	83 c4 0c	 add	 esp, 12			; 0000000cH

; 777  : 				pixelAddr += BMWidth;

  01714	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _pixelAddr$144167[ebp]
  0171a	03 45 e4	 add	 eax, DWORD PTR _BMWidth$[ebp]
  0171d	89 85 dc fd ff
	ff		 mov	 DWORD PTR _pixelAddr$144167[ebp], eax

; 778  : 			}

  01723	eb b4		 jmp	 SHORT $L144172
$L144173:

; 779  : 
; 780  : 			ValidateBitmap ( BM );

  01725	51		 push	 ecx
  01726	8b cc		 mov	 ecx, esp
  01728	89 a5 3c fa ff
	ff		 mov	 DWORD PTR $T150677[ebp], esp
  0172e	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  01731	52		 push	 edx
  01732	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01737	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  0173c	83 c4 04	 add	 esp, 4

; 781  : 
; 782  : 			break;

  0173f	e9 97 33 00 00	 jmp	 $L144030
$L144175:

; 785  : 			// Add bitmap to bitmap
; 786  : 			//	--------------------
; 787  : 			// Input
; 788  : 			//      arg2:  MemID for the bitmap
; 789  : 			//      arg3:  MemID for bitmap to merge
; 790  : 			//      arg4:  left X [==-1 match origin]
; 791  : 			//      arg5:  top Y	 [==-1 match origin]
; 792  : 			//		  arg6:  don't match origin points override
; 793  : 
; 794  : 			MemID			mergeBM;

  01744	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR _mergeBM$144176[ebp]
  0174a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 795  : 			SOL_Rect    mergeRect, BMRect;

  0174f	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR _mergeRect$144177[ebp]
  01755	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  0175a	8d 8d 74 fd ff
	ff		 lea	 ecx, DWORD PTR _BMRect$144178[ebp]
  01760	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 796  : 			int			mergeBMHeight, mergeBMWidth;
; 797  : 			CelHeader* 	mergeCelHeader;
; 798  : 
; 799  : 			BM = arg(2);

  01765	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01768	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  0176c	51		 push	 ecx
  0176d	8d 8d 38 fa ff
	ff		 lea	 ecx, DWORD PTR $T150678[ebp]
  01773	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01778	66 8b 95 38 fa
	ff ff		 mov	 dx, WORD PTR $T150678[ebp]
  0177f	66 89 55 e8	 mov	 WORD PTR _BM$[ebp], dx

; 800  : 
; 801  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) {

  01783	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01786	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  0178b	85 c0		 test	 eax, eax
  0178d	74 0d		 je	 SHORT $L144184
  0178f	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01792	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  01797	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  0179a	74 28		 je	 SHORT $L144183
$L144184:

; 802  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  0179c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0179f	33 c9		 xor	 ecx, ecx
  017a1	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  017a5	51		 push	 ecx
  017a6	68 22 03 00 00	 push	 802			; 00000322H
  017ab	68 00 00 00 00	 push	 OFFSET FLAT:$SG144186
  017b0	68 00 00 00 00	 push	 OFFSET FLAT:$SG144187
  017b5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  017bb	52		 push	 edx
  017bc	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  017c1	83 c4 14	 add	 esp, 20			; 00000014H
$L144183:

; 804  : 
; 805  : 			celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  017c4	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  017c7	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  017cc	50		 push	 eax
  017cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  017d3	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  017d8	89 45 e0	 mov	 DWORD PTR _celHeader$[ebp], eax

; 806  : 			BMWidth = celHeader->xDim;

  017db	8b 45 e0	 mov	 eax, DWORD PTR _celHeader$[ebp]
  017de	33 c9		 xor	 ecx, ecx
  017e0	66 8b 08	 mov	 cx, WORD PTR [eax]
  017e3	89 4d e4	 mov	 DWORD PTR _BMWidth$[ebp], ecx

; 807  : 			BMHeight = celHeader->yDim;

  017e6	8b 55 e0	 mov	 edx, DWORD PTR _celHeader$[ebp]
  017e9	33 c0		 xor	 eax, eax
  017eb	66 8b 42 02	 mov	 ax, WORD PTR [edx+2]
  017ef	89 45 f0	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 808  : 
; 809  : 			mergeBM = arg(3);

  017f2	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  017f5	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  017f9	52		 push	 edx
  017fa	8d 8d 34 fa ff
	ff		 lea	 ecx, DWORD PTR $T150679[ebp]
  01800	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01805	66 8b 85 34 fa
	ff ff		 mov	 ax, WORD PTR $T150679[ebp]
  0180c	66 89 85 64 fd
	ff ff		 mov	 WORD PTR _mergeBM$144176[ebp], ax

; 810  : 			mergeCelHeader = ((CelHeader*) memMgr->GetAddr(mergeBM));

  01813	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR _mergeBM$144176[ebp]
  01819	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0181e	50		 push	 eax
  0181f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  01825	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  0182a	89 85 44 fd ff
	ff		 mov	 DWORD PTR _mergeCelHeader$144181[ebp], eax

; 811  : 			mergeBMWidth  = mergeCelHeader->xDim;

  01830	8b 8d 44 fd ff
	ff		 mov	 ecx, DWORD PTR _mergeCelHeader$144181[ebp]
  01836	33 d2		 xor	 edx, edx
  01838	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0183b	89 95 68 fd ff
	ff		 mov	 DWORD PTR _mergeBMWidth$144180[ebp], edx

; 812  : 			mergeBMHeight = mergeCelHeader->yDim;

  01841	8b 85 44 fd ff
	ff		 mov	 eax, DWORD PTR _mergeCelHeader$144181[ebp]
  01847	33 c9		 xor	 ecx, ecx
  01849	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  0184d	89 8d 48 fd ff
	ff		 mov	 DWORD PTR _mergeBMHeight$144179[ebp], ecx

; 813  : 
; 814  : 			int posX = (argCount > 3) ? arg(4) : 0;

  01853	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01856	0f bf 02	 movsx	 eax, WORD PTR [edx]
  01859	83 f8 03	 cmp	 eax, 3
  0185c	7e 0f		 jle	 SHORT $L150680
  0185e	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01861	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  01865	89 95 2c f8 ff
	ff		 mov	 DWORD PTR -2004+[ebp], edx
  0186b	eb 0a		 jmp	 SHORT $L150681
$L150680:
  0186d	c7 85 2c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -2004+[ebp], 0
$L150681:
  01877	8b 85 2c f8 ff
	ff		 mov	 eax, DWORD PTR -2004+[ebp]
  0187d	89 85 70 fd ff
	ff		 mov	 DWORD PTR _posX$144191[ebp], eax

; 815  : 			int posY = (argCount > 4) ? arg(5) : 0;

  01883	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01886	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  01889	83 fa 04	 cmp	 edx, 4
  0188c	7e 0f		 jle	 SHORT $L150682
  0188e	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01891	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  01895	89 8d 28 f8 ff
	ff		 mov	 DWORD PTR -2008+[ebp], ecx
  0189b	eb 0a		 jmp	 SHORT $L150683
$L150682:
  0189d	c7 85 28 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -2008+[ebp], 0
$L150683:
  018a7	8b 95 28 f8 ff
	ff		 mov	 edx, DWORD PTR -2008+[ebp]
  018ad	89 95 6c fd ff
	ff		 mov	 DWORD PTR _posY$144192[ebp], edx

; 816  : 
; 817  : 			// merge the text bitmap with passed in bitmap
; 818  : 			BufferStd buffer(BMWidth,BMHeight,(uchar*) memMgr->GetAddr(BM) + CELHEADERSIZE);

  018b3	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  018b6	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  018bb	50		 push	 eax
  018bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  018c2	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  018c7	83 c0 2e	 add	 eax, 46			; 0000002eH
  018ca	50		 push	 eax
  018cb	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  018ce	50		 push	 eax
  018cf	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  018d2	51		 push	 ecx
  018d3	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _buffer$144194[ebp]
  018d9	e8 00 00 00 00	 call	 ??0BufferStd@@QAE@HHPAE@Z ; BufferStd::BufferStd

; 819  : 			SOL_Point pt(posX,posY);

  018de	8b 95 6c fd ff
	ff		 mov	 edx, DWORD PTR _posY$144192[ebp]
  018e4	52		 push	 edx
  018e5	8b 85 70 fd ff
	ff		 mov	 eax, DWORD PTR _posX$144191[ebp]
  018eb	50		 push	 eax
  018ec	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR _pt$144195[ebp]
  018f2	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 820  : 			if (argCount < 6 || !arg(6)) {

  018f7	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  018fa	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  018fd	83 fa 06	 cmp	 edx, 6
  01900	7c 0b		 jl	 SHORT $L144197
  01902	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01905	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  01909	85 c9		 test	 ecx, ecx
  0190b	75 44		 jne	 SHORT $L144199
$L144197:

; 821  : 				if (posX == -1) 

  0190d	83 bd 70 fd ff
	ff ff		 cmp	 DWORD PTR _posX$144191[ebp], -1
  01914	75 19		 jne	 SHORT $L144198

; 822  : 					pt.x = celHeader->xHot - mergeCelHeader->xHot;

  01916	8b 55 e0	 mov	 edx, DWORD PTR _celHeader$[ebp]
  01919	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  0191d	8b 8d 44 fd ff
	ff		 mov	 ecx, DWORD PTR _mergeCelHeader$144181[ebp]
  01923	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  01927	2b c2		 sub	 eax, edx
  01929	89 85 5c fd ff
	ff		 mov	 DWORD PTR _pt$144195[ebp], eax
$L144198:

; 823  : 				if (posY == -1) 

  0192f	83 bd 6c fd ff
	ff ff		 cmp	 DWORD PTR _posY$144192[ebp], -1
  01936	75 19		 jne	 SHORT $L144199

; 824  : 					pt.y = celHeader->yHot - mergeCelHeader->yHot;

  01938	8b 45 e0	 mov	 eax, DWORD PTR _celHeader$[ebp]
  0193b	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0193f	8b 95 44 fd ff
	ff		 mov	 edx, DWORD PTR _mergeCelHeader$144181[ebp]
  01945	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  01949	2b c8		 sub	 ecx, eax
  0194b	89 8d 60 fd ff
	ff		 mov	 DWORD PTR _pt$144195[ebp+4], ecx
$L144199:

; 826  : 
; 827  : 			mergeRect.Set(pt.x, pt.y, pt.x + mergeBMWidth - 1, pt.y + mergeBMHeight - 1);

  01951	8b 8d 48 fd ff
	ff		 mov	 ecx, DWORD PTR _mergeBMHeight$144179[ebp]
  01957	8b 95 60 fd ff
	ff		 mov	 edx, DWORD PTR _pt$144195[ebp+4]
  0195d	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  01961	50		 push	 eax
  01962	8b 8d 68 fd ff
	ff		 mov	 ecx, DWORD PTR _mergeBMWidth$144180[ebp]
  01968	8b 95 5c fd ff
	ff		 mov	 edx, DWORD PTR _pt$144195[ebp]
  0196e	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  01972	50		 push	 eax
  01973	8b 8d 60 fd ff
	ff		 mov	 ecx, DWORD PTR _pt$144195[ebp+4]
  01979	51		 push	 ecx
  0197a	8b 95 5c fd ff
	ff		 mov	 edx, DWORD PTR _pt$144195[ebp]
  01980	52		 push	 edx
  01981	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR _mergeRect$144177[ebp]
  01987	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 828  : 
; 829  : 			CelObjMem celObj(mergeBM);

  0198c	51		 push	 ecx
  0198d	8b cc		 mov	 ecx, esp
  0198f	89 a5 30 fa ff
	ff		 mov	 DWORD PTR $T150684[ebp], esp
  01995	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR _mergeBM$144176[ebp]
  0199b	50		 push	 eax
  0199c	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  019a1	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR _celObj$144200[ebp]
  019a7	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  019ac	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 830  : 			BMRect.Set(0, 0, BMWidth - 1, BMHeight - 1);

  019b3	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  019b6	83 e9 01	 sub	 ecx, 1
  019b9	51		 push	 ecx
  019ba	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  019bd	83 ea 01	 sub	 edx, 1
  019c0	52		 push	 edx
  019c1	6a 00		 push	 0
  019c3	6a 00		 push	 0
  019c5	8d 8d 74 fd ff
	ff		 lea	 ecx, DWORD PTR _BMRect$144178[ebp]
  019cb	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 831  : 			mergeRect.Clip(BMRect);

  019d0	8d 85 74 fd ff
	ff		 lea	 eax, DWORD PTR _BMRect$144178[ebp]
  019d6	50		 push	 eax
  019d7	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR _mergeRect$144177[ebp]
  019dd	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip

; 832  : 			celObj.Draw(buffer, mergeRect, pt, 0);

  019e2	6a 00		 push	 0
  019e4	83 ec 08	 sub	 esp, 8
  019e7	8b cc		 mov	 ecx, esp
  019e9	89 a5 2c fa ff
	ff		 mov	 DWORD PTR $T150685[ebp], esp
  019ef	8d 95 5c fd ff
	ff		 lea	 edx, DWORD PTR _pt$144195[ebp]
  019f5	52		 push	 edx
  019f6	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  019fb	8d 85 34 fd ff
	ff		 lea	 eax, DWORD PTR _mergeRect$144177[ebp]
  01a01	50		 push	 eax
  01a02	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _buffer$144194[ebp]
  01a08	51		 push	 ecx
  01a09	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR _celObj$144200[ebp]
  01a0f	e8 00 00 00 00	 call	 ?Draw@CelObjMem@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjMem::Draw

; 833  : 
; 834  : 			ValidateBitmap ( BM );

  01a14	51		 push	 ecx
  01a15	8b cc		 mov	 ecx, esp
  01a17	89 a5 28 fa ff
	ff		 mov	 DWORD PTR $T150686[ebp], esp
  01a1d	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  01a20	52		 push	 edx
  01a21	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01a26	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  01a2b	83 c4 04	 add	 esp, 4

; 835  : 
; 836  : 			break;

  01a2e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01a35	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR _celObj$144200[ebp]
  01a3b	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  01a40	e9 96 30 00 00	 jmp	 $L144030
$L144204:

; 839  : 			// Invert a bitmap
; 840  : 			//	--------------------
; 841  : 			// Input
; 842  : 			//      arg2:  MemID for the bitmap
; 843  : 			//      arg3:  rectangle x1
; 844  : 			//      arg4:  rectangle y1
; 845  : 			//      arg5:  rectangle x2
; 846  : 			//      arg6:  rectangle y2
; 847  : 			//      arg7:  foreground color
; 848  : 			//      arg8:  background color
; 849  : 			//
; 850  : 
; 851  : #ifdef WIN32S
; 852  : 	arg(7) = (SCIWord)AddPalShift((int)arg(7));

  01a45	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01a48	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  01a4c	51		 push	 ecx
  01a4d	e8 00 00 00 00	 call	 ?AddPalShift@@YAHH@Z	; AddPalShift
  01a52	83 c4 04	 add	 esp, 4
  01a55	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01a58	66 89 42 0e	 mov	 WORD PTR [edx+14], ax

; 853  : 	arg(8) = (SCIWord)AddPalShift((int)arg(8));

  01a5c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01a5f	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  01a63	51		 push	 ecx
  01a64	e8 00 00 00 00	 call	 ?AddPalShift@@YAHH@Z	; AddPalShift
  01a69	83 c4 04	 add	 esp, 4
  01a6c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01a6f	66 89 42 10	 mov	 WORD PTR [edx+16], ax

; 854  : #endif
; 855  : 
; 856  : 			BM = arg(2);

  01a73	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01a76	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  01a7a	51		 push	 ecx
  01a7b	8d 8d 24 fa ff
	ff		 lea	 ecx, DWORD PTR $T150687[ebp]
  01a81	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01a86	66 8b 95 24 fa
	ff ff		 mov	 dx, WORD PTR $T150687[ebp]
  01a8d	66 89 55 e8	 mov	 WORD PTR _BM$[ebp], dx

; 857  : 
; 858  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) {

  01a91	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01a94	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  01a99	85 c0		 test	 eax, eax
  01a9b	74 0d		 je	 SHORT $L144211
  01a9d	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01aa0	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  01aa5	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  01aa8	74 28		 je	 SHORT $L144210
$L144211:

; 859  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  01aaa	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01aad	33 c9		 xor	 ecx, ecx
  01aaf	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  01ab3	51		 push	 ecx
  01ab4	68 5b 03 00 00	 push	 859			; 0000035bH
  01ab9	68 00 00 00 00	 push	 OFFSET FLAT:$SG144213
  01abe	68 00 00 00 00	 push	 OFFSET FLAT:$SG144214
  01ac3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01ac9	52		 push	 edx
  01aca	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  01acf	83 c4 14	 add	 esp, 20			; 00000014H
$L144210:

; 861  : 
; 862  : 			celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  01ad2	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01ad5	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01ada	50		 push	 eax
  01adb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  01ae1	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  01ae6	89 45 e0	 mov	 DWORD PTR _celHeader$[ebp], eax

; 863  : 			BMWidth = celHeader->xDim;

  01ae9	8b 45 e0	 mov	 eax, DWORD PTR _celHeader$[ebp]
  01aec	33 c9		 xor	 ecx, ecx
  01aee	66 8b 08	 mov	 cx, WORD PTR [eax]
  01af1	89 4d e4	 mov	 DWORD PTR _BMWidth$[ebp], ecx

; 864  : 			BMHeight = celHeader->yDim;

  01af4	8b 55 e0	 mov	 edx, DWORD PTR _celHeader$[ebp]
  01af7	33 c0		 xor	 eax, eax
  01af9	66 8b 42 02	 mov	 ax, WORD PTR [edx+2]
  01afd	89 45 f0	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 865  : 
; 866  : 			SOL_Rect r(arg(3), arg(4), arg(5), arg(6));

  01b00	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01b03	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  01b07	52		 push	 edx
  01b08	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01b0b	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  01b0f	51		 push	 ecx
  01b10	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01b13	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  01b17	50		 push	 eax
  01b18	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01b1b	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  01b1f	52		 push	 edx
  01b20	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR _r$144216[ebp]
  01b26	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 867  : 
; 868  : 			fontMgr->InvertRect(BM,BMWidth,r,arg(7),arg(8),False);

  01b2b	6a 00		 push	 0
  01b2d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01b30	8a 48 10	 mov	 cl, BYTE PTR [eax+16]
  01b33	51		 push	 ecx
  01b34	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01b37	8a 42 0e	 mov	 al, BYTE PTR [edx+14]
  01b3a	50		 push	 eax
  01b3b	83 ec 10	 sub	 esp, 16			; 00000010H
  01b3e	8b cc		 mov	 ecx, esp
  01b40	89 a5 20 fa ff
	ff		 mov	 DWORD PTR $T150688[ebp], esp
  01b46	8d 95 24 fd ff
	ff		 lea	 edx, DWORD PTR _r$144216[ebp]
  01b4c	52		 push	 edx
  01b4d	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  01b52	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  01b55	50		 push	 eax
  01b56	51		 push	 ecx
  01b57	8b cc		 mov	 ecx, esp
  01b59	89 a5 1c fa ff
	ff		 mov	 DWORD PTR $T150689[ebp], esp
  01b5f	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  01b62	52		 push	 edx
  01b63	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01b68	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fontMgr@@3PAVFontMgr@@A ; fontMgr
  01b6e	e8 00 00 00 00	 call	 ?InvertRect@FontMgr@@QAEXVMemID@@HVSOL_Rect@@DDH@Z ; FontMgr::InvertRect

; 869  : 			ValidateBitmap ( BM );

  01b73	51		 push	 ecx
  01b74	8b cc		 mov	 ecx, esp
  01b76	89 a5 18 fa ff
	ff		 mov	 DWORD PTR $T150690[ebp], esp
  01b7c	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  01b7f	50		 push	 eax
  01b80	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01b85	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  01b8a	83 c4 04	 add	 esp, 4

; 870  : 
; 871  : 			break;

  01b8d	e9 49 2f 00 00	 jmp	 $L144030
$L144220:

; 874  : 			BM = arg(2);

  01b92	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01b95	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  01b99	52		 push	 edx
  01b9a	8d 8d 14 fa ff
	ff		 lea	 ecx, DWORD PTR $T150691[ebp]
  01ba0	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01ba5	66 8b 85 14 fa
	ff ff		 mov	 ax, WORD PTR $T150691[ebp]
  01bac	66 89 45 e8	 mov	 WORD PTR _BM$[ebp], ax

; 875  : 
; 876  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) {

  01bb0	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01bb3	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  01bb8	85 c0		 test	 eax, eax
  01bba	74 0d		 je	 SHORT $L144223
  01bbc	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01bbf	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  01bc4	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  01bc7	74 27		 je	 SHORT $L144222
$L144223:

; 877  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  01bc9	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01bcc	33 d2		 xor	 edx, edx
  01bce	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  01bd2	52		 push	 edx
  01bd3	68 6d 03 00 00	 push	 877			; 0000036dH
  01bd8	68 00 00 00 00	 push	 OFFSET FLAT:$SG144225
  01bdd	68 00 00 00 00	 push	 OFFSET FLAT:$SG144226
  01be2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01be7	50		 push	 eax
  01be8	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  01bed	83 c4 14	 add	 esp, 20			; 00000014H
$L144222:

; 879  : 
; 880  : 			celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  01bf0	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01bf3	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01bf8	50		 push	 eax
  01bf9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  01bff	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  01c04	89 45 e0	 mov	 DWORD PTR _celHeader$[ebp], eax

; 881  : 			celHeader->xHot = arg(3);

  01c07	8b 4d e0	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  01c0a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01c0d	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  01c11	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 882  : 			celHeader->yHot = arg(4);

  01c15	8b 4d e0	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  01c18	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01c1b	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  01c1f	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 883  : 			ValidateBitmap ( BM );

  01c23	51		 push	 ecx
  01c24	8b cc		 mov	 ecx, esp
  01c26	89 a5 10 fa ff
	ff		 mov	 DWORD PTR $T150692[ebp], esp
  01c2c	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  01c2f	52		 push	 edx
  01c30	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01c35	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  01c3a	83 c4 04	 add	 esp, 4

; 884  : 
; 885  : 			break;

  01c3d	e9 99 2e 00 00	 jmp	 $L144030
$L144229:

; 888  : 			// Create a bitmap with remapped colors from a bitmap and a CLUT
; 889  : 			//---------------------
; 890  : 			// Input
; 891  : 			//			arg2:	bitmapID
; 892  : 			//			arg3: ArrayID
; 893  : 			// Output
; 894  : 			//		  pm.acc = id for bitmap
; 895  : 
; 896  :  			BM = arg(2);

  01c42	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01c45	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  01c49	51		 push	 ecx
  01c4a	8d 8d 0c fa ff
	ff		 lea	 ecx, DWORD PTR $T150693[ebp]
  01c50	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01c55	66 8b 95 0c fa
	ff ff		 mov	 dx, WORD PTR $T150693[ebp]
  01c5c	66 89 55 e8	 mov	 WORD PTR _BM$[ebp], dx

; 897  : 
; 898  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) {

  01c60	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01c63	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  01c68	85 c0		 test	 eax, eax
  01c6a	74 0d		 je	 SHORT $L144232
  01c6c	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01c6f	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  01c74	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  01c77	74 28		 je	 SHORT $L144231
$L144232:

; 899  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  01c79	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01c7c	33 c9		 xor	 ecx, ecx
  01c7e	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  01c82	51		 push	 ecx
  01c83	68 83 03 00 00	 push	 899			; 00000383H
  01c88	68 00 00 00 00	 push	 OFFSET FLAT:$SG144234
  01c8d	68 00 00 00 00	 push	 OFFSET FLAT:$SG144235
  01c92	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01c98	52		 push	 edx
  01c99	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  01c9e	83 c4 14	 add	 esp, 20			; 00000014H
$L144231:

; 901  : 
; 902  : 			RemapBitmap(arg(2), arg(3));

  01ca1	51		 push	 ecx
  01ca2	8b cc		 mov	 ecx, esp
  01ca4	89 a5 08 fa ff
	ff		 mov	 DWORD PTR $T150694[ebp], esp
  01caa	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01cad	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  01cb1	52		 push	 edx
  01cb2	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  01cb7	51		 push	 ecx
  01cb8	8b cc		 mov	 ecx, esp
  01cba	89 a5 04 fa ff
	ff		 mov	 DWORD PTR $T150695[ebp], esp
  01cc0	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01cc3	66 8b 50 04	 mov	 dx, WORD PTR [eax+4]
  01cc7	52		 push	 edx
  01cc8	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01ccd	e8 00 00 00 00	 call	 ?RemapBitmap@@YAXVMemID@@VObjectID@@@Z ; RemapBitmap

; 903  : 			ValidateBitmap ( BM );

  01cd2	83 c4 04	 add	 esp, 4
  01cd5	8b cc		 mov	 ecx, esp
  01cd7	89 a5 00 fa ff
	ff		 mov	 DWORD PTR $T150696[ebp], esp
  01cdd	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  01ce0	50		 push	 eax
  01ce1	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01ce6	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  01ceb	83 c4 04	 add	 esp, 4

; 904  : 
; 905  : 			break;

  01cee	e9 e8 2d 00 00	 jmp	 $L144030
$L144239:

; 908  : 			// Duplicate an existing bitmap
; 909  : 			//	--------------
; 910  : 			// Input
; 911  : 			//      arg2-----bitmap to copy from
; 912  : 			// Output
; 913  : 			//		  pm.acc = id for bitmap
; 914  :  			BM = arg(2);

  01cf3	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01cf6	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  01cfa	52		 push	 edx
  01cfb	8d 8d fc f9 ff
	ff		 lea	 ecx, DWORD PTR $T150697[ebp]
  01d01	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01d06	66 8b 85 fc f9
	ff ff		 mov	 ax, WORD PTR $T150697[ebp]
  01d0d	66 89 45 e8	 mov	 WORD PTR _BM$[ebp], ax

; 915  : 
; 916  : 			if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) {

  01d11	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01d14	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  01d19	85 c0		 test	 eax, eax
  01d1b	74 0d		 je	 SHORT $L144242
  01d1d	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01d20	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  01d25	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  01d28	74 27		 je	 SHORT $L144241
$L144242:

; 917  : 				msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)arg(2) );

  01d2a	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01d2d	33 d2		 xor	 edx, edx
  01d2f	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  01d33	52		 push	 edx
  01d34	68 95 03 00 00	 push	 917			; 00000395H
  01d39	68 00 00 00 00	 push	 OFFSET FLAT:$SG144244
  01d3e	68 00 00 00 00	 push	 OFFSET FLAT:$SG144245
  01d43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01d48	50		 push	 eax
  01d49	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  01d4e	83 c4 14	 add	 esp, 20			; 00000014H
$L144241:

; 919  : 
; 920  : 			MemID newBM;

  01d51	8d 8d 20 fd ff
	ff		 lea	 ecx, DWORD PTR _newBM$144246[ebp]
  01d57	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 921  : 
; 922  : 			// Get the width of the bitmap
; 923  : 			celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  01d5c	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01d5f	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01d64	50		 push	 eax
  01d65	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  01d6b	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  01d70	89 45 e0	 mov	 DWORD PTR _celHeader$[ebp], eax

; 924  : 			BMWidth  = celHeader->xDim;

  01d73	8b 4d e0	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  01d76	33 d2		 xor	 edx, edx
  01d78	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01d7b	89 55 e4	 mov	 DWORD PTR _BMWidth$[ebp], edx

; 925  : 			BMHeight = celHeader->yDim;

  01d7e	8b 45 e0	 mov	 eax, DWORD PTR _celHeader$[ebp]
  01d81	33 c9		 xor	 ecx, ecx
  01d83	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  01d87	89 4d f0	 mov	 DWORD PTR _BMHeight$[ebp], ecx

; 926  : 
; 927  : 			int BMresX = (argCount > 5) ? arg(6) : fontMgr->GetXRes();

  01d8a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01d8d	0f bf 02	 movsx	 eax, WORD PTR [edx]
  01d90	83 f8 05	 cmp	 eax, 5
  01d93	7e 0f		 jle	 SHORT $L150698
  01d95	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01d98	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  01d9c	89 95 24 f8 ff
	ff		 mov	 DWORD PTR -2012+[ebp], edx
  01da2	eb 11		 jmp	 SHORT $L150699
$L150698:
  01da4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fontMgr@@3PAVFontMgr@@A ; fontMgr
  01daa	e8 00 00 00 00	 call	 ?GetXRes@FontMgr@@QBEHXZ ; FontMgr::GetXRes
  01daf	89 85 24 f8 ff
	ff		 mov	 DWORD PTR -2012+[ebp], eax
$L150699:
  01db5	8b 85 24 f8 ff
	ff		 mov	 eax, DWORD PTR -2012+[ebp]
  01dbb	89 85 1c fd ff
	ff		 mov	 DWORD PTR _BMresX$144248[ebp], eax

; 928  : 			int BMresY = (argCount > 6) ? arg(7) : fontMgr->GetYRes();

  01dc1	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01dc4	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  01dc7	83 fa 06	 cmp	 edx, 6
  01dca	7e 0f		 jle	 SHORT $L150700
  01dcc	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01dcf	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  01dd3	89 8d 20 f8 ff
	ff		 mov	 DWORD PTR -2016+[ebp], ecx
  01dd9	eb 11		 jmp	 SHORT $L150701
$L150700:
  01ddb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fontMgr@@3PAVFontMgr@@A ; fontMgr
  01de1	e8 00 00 00 00	 call	 ?GetYRes@FontMgr@@QBEHXZ ; FontMgr::GetYRes
  01de6	89 85 20 f8 ff
	ff		 mov	 DWORD PTR -2016+[ebp], eax
$L150701:
  01dec	8b 95 20 f8 ff
	ff		 mov	 edx, DWORD PTR -2016+[ebp]
  01df2	89 95 18 fd ff
	ff		 mov	 DWORD PTR _BMresY$144249[ebp], edx

; 929  : 
; 930  : 			newBM.Get ( MemBitmap, BMWidth * (BMHeight + 1) + CELHEADERSIZE );

  01df8	6a 00		 push	 0
  01dfa	6a 00		 push	 0
  01dfc	6a 00		 push	 0
  01dfe	6a 00		 push	 0
  01e00	68 00 02 00 00	 push	 512			; 00000200H
  01e05	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  01e08	83 c0 01	 add	 eax, 1
  01e0b	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  01e0e	0f af c8	 imul	 ecx, eax
  01e11	83 c1 2e	 add	 ecx, 46			; 0000002eH
  01e14	51		 push	 ecx
  01e15	6a 4b		 push	 75			; 0000004bH
  01e17	8d 8d 20 fd ff
	ff		 lea	 ecx, DWORD PTR _newBM$144246[ebp]
  01e1d	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 931  : 
; 932  : 			// copy the old bitmap into the new one
; 933  : 			memcpy ( (uchar*)memMgr->GetAddr(newBM) + CELHEADERSIZE, (uchar*)memMgr->GetAddr(BM) + CELHEADERSIZE, BMWidth * (BMHeight + 1));

  01e22	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  01e25	83 c2 01	 add	 edx, 1
  01e28	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  01e2b	0f af c2	 imul	 eax, edx
  01e2e	50		 push	 eax
  01e2f	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  01e32	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01e37	50		 push	 eax
  01e38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  01e3e	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  01e43	83 c0 2e	 add	 eax, 46			; 0000002eH
  01e46	50		 push	 eax
  01e47	8d 8d 20 fd ff
	ff		 lea	 ecx, DWORD PTR _newBM$144246[ebp]
  01e4d	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01e52	50		 push	 eax
  01e53	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  01e59	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  01e5e	83 c0 2e	 add	 eax, 46			; 0000002eH
  01e61	50		 push	 eax
  01e62	e8 00 00 00 00	 call	 _memcpy
  01e67	83 c4 0c	 add	 esp, 12			; 0000000cH

; 934  : 
; 935  : 			BuildHeader(newBM,BMWidth,BMHeight,celHeader->skip,
; 936  : 							celHeader->xHot,
; 937  : 							celHeader->yHot,
; 938  : 							celHeader->xRes,
; 939  : 							celHeader->yRes,
; 940  : 							0,
; 941  : 							False
; 942  : 						  );

  01e6a	6a 00		 push	 0
  01e6c	6a 00		 push	 0
  01e6e	8b 4d e0	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  01e71	33 d2		 xor	 edx, edx
  01e73	66 8b 51 26	 mov	 dx, WORD PTR [ecx+38]
  01e77	52		 push	 edx
  01e78	8b 45 e0	 mov	 eax, DWORD PTR _celHeader$[ebp]
  01e7b	33 c9		 xor	 ecx, ecx
  01e7d	66 8b 48 24	 mov	 cx, WORD PTR [eax+36]
  01e81	51		 push	 ecx
  01e82	8b 55 e0	 mov	 edx, DWORD PTR _celHeader$[ebp]
  01e85	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  01e89	50		 push	 eax
  01e8a	8b 4d e0	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  01e8d	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  01e91	52		 push	 edx
  01e92	8b 45 e0	 mov	 eax, DWORD PTR _celHeader$[ebp]
  01e95	33 c9		 xor	 ecx, ecx
  01e97	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  01e9a	51		 push	 ecx
  01e9b	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  01e9e	52		 push	 edx
  01e9f	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  01ea2	50		 push	 eax
  01ea3	51		 push	 ecx
  01ea4	8b cc		 mov	 ecx, esp
  01ea6	89 a5 f8 f9 ff
	ff		 mov	 DWORD PTR $T150702[ebp], esp
  01eac	8d 95 20 fd ff
	ff		 lea	 edx, DWORD PTR _newBM$144246[ebp]
  01eb2	52		 push	 edx
  01eb3	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01eb8	e8 00 00 00 00	 call	 ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ; BuildHeader
  01ebd	83 c4 28	 add	 esp, 40			; 00000028H

; 943  : 
; 944  : 			pm.acc = newBM;

  01ec0	8d 8d 20 fd ff
	ff		 lea	 ecx, DWORD PTR _newBM$144246[ebp]
  01ec6	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01ecb	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  01ed0	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 945  : 			ValidateBitmap ( BM );

  01ed5	51		 push	 ecx
  01ed6	8b cc		 mov	 ecx, esp
  01ed8	89 a5 f4 f9 ff
	ff		 mov	 DWORD PTR $T150703[ebp], esp
  01ede	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  01ee1	50		 push	 eax
  01ee2	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01ee7	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  01eec	83 c4 04	 add	 esp, 4

; 946  : 			break;

  01eef	e9 e7 2b 00 00	 jmp	 $L144030
$L144254:

; 950  : 			// read the arguments
; 951  : 			int view = arg(2);

  01ef4	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01ef7	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  01efb	89 95 9c fc ff
	ff		 mov	 DWORD PTR _view$144255[ebp], edx

; 952  : 			int loop = arg(3);

  01f01	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01f04	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  01f08	89 8d 90 fc ff
	ff		 mov	 DWORD PTR _loop$144256[ebp], ecx

; 953  : 			int cel = arg(4);

  01f0e	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01f11	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  01f15	89 85 8c fc ff
	ff		 mov	 DWORD PTR _cel$144257[ebp], eax

; 954  : 			int action = arg(5);

  01f1b	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01f1e	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  01f22	89 95 94 fc ff
	ff		 mov	 DWORD PTR _action$144258[ebp], edx

; 955  : 			int shirtView = arg(6);

  01f28	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01f2b	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  01f2f	89 8d a8 fc ff
	ff		 mov	 DWORD PTR _shirtView$144259[ebp], ecx

; 956  : 			int pantsView = arg(7);

  01f35	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01f38	0f bf 42 0e	 movsx	 eax, WORD PTR [edx+14]
  01f3c	89 85 ac fc ff
	ff		 mov	 DWORD PTR _pantsView$144260[ebp], eax

; 957  : 			int shoesView = arg(8);

  01f42	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01f45	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  01f49	89 95 c4 fc ff
	ff		 mov	 DWORD PTR _shoesView$144261[ebp], edx

; 958  : 			int beltView = arg(9);

  01f4f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01f52	0f bf 48 12	 movsx	 ecx, WORD PTR [eax+18]
  01f56	89 8d 50 fc ff
	ff		 mov	 DWORD PTR _beltView$144262[ebp], ecx

; 959  : 			int wristView = arg(10);

  01f5c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01f5f	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  01f63	89 85 40 fc ff
	ff		 mov	 DWORD PTR _wristView$144263[ebp], eax

; 960  : 			int baldricView = arg(11);

  01f69	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01f6c	0f bf 51 16	 movsx	 edx, WORD PTR [ecx+22]
  01f70	89 95 54 fc ff
	ff		 mov	 DWORD PTR _baldricView$144264[ebp], edx

; 961  : 			int robeView = arg(12);

  01f76	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01f79	0f bf 48 18	 movsx	 ecx, WORD PTR [eax+24]
  01f7d	89 8d 44 fc ff
	ff		 mov	 DWORD PTR _robeView$144265[ebp], ecx

; 962  : 			int cowlView = arg(13);

  01f83	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01f86	0f bf 42 1a	 movsx	 eax, WORD PTR [edx+26]
  01f8a	89 85 88 fc ff
	ff		 mov	 DWORD PTR _cowlView$144266[ebp], eax

; 963  : 			int skirtView = arg(14);

  01f90	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01f93	0f bf 51 1c	 movsx	 edx, WORD PTR [ecx+28]
  01f97	89 95 60 fc ff
	ff		 mov	 DWORD PTR _skirtView$144267[ebp], edx

; 964  : 			int weaponView = arg(15);

  01f9d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01fa0	0f bf 48 1e	 movsx	 ecx, WORD PTR [eax+30]
  01fa4	89 8d 58 fc ff
	ff		 mov	 DWORD PTR _weaponView$144268[ebp], ecx

; 965  : 			int shieldView = arg(16);

  01faa	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01fad	0f bf 42 20	 movsx	 eax, WORD PTR [edx+32]
  01fb1	89 85 a0 fc ff
	ff		 mov	 DWORD PTR _shieldView$144269[ebp], eax

; 966  : 			MemID headOrigin = (MemID)arg(17);

  01fb7	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  01fba	66 8b 51 22	 mov	 dx, WORD PTR [ecx+34]
  01fbe	52		 push	 edx
  01fbf	8d 8d f0 f9 ff
	ff		 lea	 ecx, DWORD PTR $T150704[ebp]
  01fc5	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01fca	50		 push	 eax
  01fcb	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144270[ebp]
  01fd1	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 967  : 			MemID headBitmaps = (MemID)arg(18);

  01fd6	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  01fd9	66 8b 48 24	 mov	 cx, WORD PTR [eax+36]
  01fdd	51		 push	 ecx
  01fde	8d 8d ec f9 ff
	ff		 lea	 ecx, DWORD PTR $T150705[ebp]
  01fe4	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01fe9	50		 push	 eax
  01fea	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR _headBitmaps$144273[ebp]
  01ff0	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 968  : 			MemID frozenClut = (MemID)arg(19);

  01ff5	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  01ff8	66 8b 42 26	 mov	 ax, WORD PTR [edx+38]
  01ffc	50		 push	 eax
  01ffd	8d 8d e8 f9 ff
	ff		 lea	 ecx, DWORD PTR $T150706[ebp]
  02003	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  02008	50		 push	 eax
  02009	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR _frozenClut$144276[ebp]
  0200f	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 969  : 			MemID invisibleClut = (MemID)arg(20);

  02014	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  02017	66 8b 51 28	 mov	 dx, WORD PTR [ecx+40]
  0201b	52		 push	 edx
  0201c	8d 8d e4 f9 ff
	ff		 lea	 ecx, DWORD PTR $T150707[ebp]
  02022	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  02027	50		 push	 eax
  02028	8d 8d b0 fc ff
	ff		 lea	 ecx, DWORD PTR _invisibleClut$144279[ebp]
  0202e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 970  : 			MemID normalClut = (MemID)arg(21);

  02033	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  02036	66 8b 48 2a	 mov	 cx, WORD PTR [eax+42]
  0203a	51		 push	 ecx
  0203b	8d 8d e0 f9 ff
	ff		 lea	 ecx, DWORD PTR $T150708[ebp]
  02041	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  02046	50		 push	 eax
  02047	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR _normalClut$144282[ebp]
  0204d	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 971  : 
; 972  : 			int actionOffset = action;

  02052	8b 95 94 fc ff
	ff		 mov	 edx, DWORD PTR _action$144258[ebp]
  02058	89 95 84 fc ff
	ff		 mov	 DWORD PTR _actionOffset$144285[ebp], edx

; 973  : 
; 974  : 			if ( view == 200 ) 

  0205e	81 bd 9c fc ff
	ff c8 00 00 00	 cmp	 DWORD PTR _view$144255[ebp], 200 ; 000000c8H
  02068	75 11		 jne	 SHORT $L144286

; 975  : 				actionOffset += 10000;

  0206a	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR _actionOffset$144285[ebp]
  02070	05 10 27 00 00	 add	 eax, 10000		; 00002710H
  02075	89 85 84 fc ff
	ff		 mov	 DWORD PTR _actionOffset$144285[ebp], eax
$L144286:

; 976  : 
; 977  : 			// this points to the current view we are looking at
; 978  : 			CelObjView celObj ( view + action, loop, cel );

  0207b	8b 8d 8c fc ff
	ff		 mov	 ecx, DWORD PTR _cel$144257[ebp]
  02081	51		 push	 ecx
  02082	8b 95 90 fc ff
	ff		 mov	 edx, DWORD PTR _loop$144256[ebp]
  02088	52		 push	 edx
  02089	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _view$144255[ebp]
  0208f	03 85 94 fc ff
	ff		 add	 eax, DWORD PTR _action$144258[ebp]
  02095	50		 push	 eax
  02096	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  0209c	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  020a1	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 979  : 
; 980  : 			BMWidth = celObj.Width();

  020a8	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  020ae	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  020b3	89 45 e4	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 981  : 			BMHeight = celObj.Height();

  020b6	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  020bc	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  020c1	89 45 f0	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 982  : 
; 983  : 			int originX = celObj.XOrg();

  020c4	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  020ca	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  020cf	89 85 a4 fc ff
	ff		 mov	 DWORD PTR _originX$144288[ebp], eax

; 984  : 			int originY = celObj.YOrg();

  020d5	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  020db	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  020e0	89 85 70 fc ff
	ff		 mov	 DWORD PTR _originY$144289[ebp], eax

; 985  : 
; 986  : 			SOL_Point headPoint ( 0, 0 );

  020e6	6a 00		 push	 0
  020e8	6a 00		 push	 0
  020ea	8d 8d 74 fc ff
	ff		 lea	 ecx, DWORD PTR _headPoint$144290[ebp]
  020f0	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 987  : 			SOL_Rect headRect;

  020f5	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR _headRect$144291[ebp]
  020fb	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 988  : 			MemID headBM;

  02100	8d 8d 48 fc ff
	ff		 lea	 ecx, DWORD PTR _headBM$144292[ebp]
  02106	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 989  : 
; 990  : 			// put the head on
; 991  : 			if ( headBitmaps && headOrigin && headOrigin.IsValid() && headBitmaps.IsValid() && headOrigin.GetMemType() == MemArray && headBitmaps.GetMemType() == MemArray ) {

  0210b	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR _headBitmaps$144273[ebp]
  02111	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02116	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0211b	85 c0		 test	 eax, eax
  0211d	0f 84 21 03 00
	00		 je	 $L144293
  02123	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144270[ebp]
  02129	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0212e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  02133	85 c0		 test	 eax, eax
  02135	0f 84 09 03 00
	00		 je	 $L144293
  0213b	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144270[ebp]
  02141	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  02146	85 c0		 test	 eax, eax
  02148	0f 84 f6 02 00
	00		 je	 $L144293
  0214e	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR _headBitmaps$144273[ebp]
  02154	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  02159	85 c0		 test	 eax, eax
  0215b	0f 84 e3 02 00
	00		 je	 $L144293
  02161	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144270[ebp]
  02167	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0216c	83 f8 35	 cmp	 eax, 53			; 00000035H
  0216f	0f 85 cf 02 00
	00		 jne	 $L144293
  02175	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR _headBitmaps$144273[ebp]
  0217b	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  02180	83 f8 35	 cmp	 eax, 53			; 00000035H
  02183	0f 85 bb 02 00
	00		 jne	 $L144293

; 992  : 				Array origins;

  02189	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _origins$144294[ebp]
  0218f	e8 00 00 00 00	 call	 ??0Array@@QAE@XZ	; Array::Array
  02194	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 993  : 				Array bitmaps;

  02198	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR _bitmaps$144295[ebp]
  0219e	e8 00 00 00 00	 call	 ??0Array@@QAE@XZ	; Array::Array
  021a3	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 994  : 
; 995  : 				origins.dataID ( headOrigin );

  021a7	51		 push	 ecx
  021a8	8b cc		 mov	 ecx, esp
  021aa	89 a5 dc f9 ff
	ff		 mov	 DWORD PTR $T150709[ebp], esp
  021b0	8d 95 64 fc ff
	ff		 lea	 edx, DWORD PTR _headOrigin$144270[ebp]
  021b6	52		 push	 edx
  021b7	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  021bc	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _origins$144294[ebp]
  021c2	e8 00 00 00 00	 call	 ?dataID@Array@@QAEXVMemID@@@Z ; Array::dataID

; 996  : 				bitmaps.dataID ( headBitmaps );

  021c7	51		 push	 ecx
  021c8	8b cc		 mov	 ecx, esp
  021ca	89 a5 d8 f9 ff
	ff		 mov	 DWORD PTR $T150710[ebp], esp
  021d0	8d 85 7c fc ff
	ff		 lea	 eax, DWORD PTR _headBitmaps$144273[ebp]
  021d6	50		 push	 eax
  021d7	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  021dc	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR _bitmaps$144295[ebp]
  021e2	e8 00 00 00 00	 call	 ?dataID@Array@@QAEXVMemID@@@Z ; Array::dataID

; 997  : 
; 998  : 				int index = loop << 1;

  021e7	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  021ed	d1 e1		 shl	 ecx, 1
  021ef	89 8d d4 fb ff
	ff		 mov	 DWORD PTR _index$144298[ebp], ecx

; 999  : 
; 1000 : 				int nOriginX = origins.at ( index );

  021f5	8b 95 d4 fb ff
	ff		 mov	 edx, DWORD PTR _index$144298[ebp]
  021fb	52		 push	 edx
  021fc	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _origins$144294[ebp]
  02202	e8 00 00 00 00	 call	 ?at@Array@@QAEHH@Z	; Array::at
  02207	89 85 e0 fb ff
	ff		 mov	 DWORD PTR _nOriginX$144299[ebp], eax

; 1001 : 				int nOriginY = origins.at ( index + 1 );

  0220d	8b 85 d4 fb ff
	ff		 mov	 eax, DWORD PTR _index$144298[ebp]
  02213	83 c0 01	 add	 eax, 1
  02216	50		 push	 eax
  02217	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _origins$144294[ebp]
  0221d	e8 00 00 00 00	 call	 ?at@Array@@QAEHH@Z	; Array::at
  02222	89 85 d8 fb ff
	ff		 mov	 DWORD PTR _nOriginY$144300[ebp], eax

; 1002 : 				int nLinkX = celObj.GetLinkPoint ( 1, 1 );

  02228	6a 01		 push	 1
  0222a	6a 01		 push	 1
  0222c	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  02232	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  02237	0f bf c8	 movsx	 ecx, ax
  0223a	89 8d dc fb ff
	ff		 mov	 DWORD PTR _nLinkX$144301[ebp], ecx

; 1003 : 				int nLinkY = celObj.GetLinkPoint ( 1, 0 );

  02240	6a 00		 push	 0
  02242	6a 01		 push	 1
  02244	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  0224a	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0224f	0f bf d0	 movsx	 edx, ax
  02252	89 95 e4 fb ff
	ff		 mov	 DWORD PTR _nLinkY$144302[ebp], edx

; 1004 : 
; 1005 : 				headPoint.x = nLinkX - nOriginX;

  02258	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR _nLinkX$144301[ebp]
  0225e	2b 85 e0 fb ff
	ff		 sub	 eax, DWORD PTR _nOriginX$144299[ebp]
  02264	89 85 74 fc ff
	ff		 mov	 DWORD PTR _headPoint$144290[ebp], eax

; 1006 : 				headPoint.y = nLinkY - nOriginY;

  0226a	8b 8d e4 fb ff
	ff		 mov	 ecx, DWORD PTR _nLinkY$144302[ebp]
  02270	2b 8d d8 fb ff
	ff		 sub	 ecx, DWORD PTR _nOriginY$144300[ebp]
  02276	89 8d 78 fc ff
	ff		 mov	 DWORD PTR _headPoint$144290[ebp+4], ecx

; 1007 : 
; 1008 : 				if ( headPoint.x < 0 ) {

  0227c	83 bd 74 fc ff
	ff 00		 cmp	 DWORD PTR _headPoint$144290[ebp], 0
  02283	7d 28		 jge	 SHORT $L144303

; 1009 : 					originX -= headPoint.x;

  02285	8b 95 a4 fc ff
	ff		 mov	 edx, DWORD PTR _originX$144288[ebp]
  0228b	2b 95 74 fc ff
	ff		 sub	 edx, DWORD PTR _headPoint$144290[ebp]
  02291	89 95 a4 fc ff
	ff		 mov	 DWORD PTR _originX$144288[ebp], edx

; 1010 : 					BMWidth -= headPoint.x;

  02297	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0229a	2b 85 74 fc ff
	ff		 sub	 eax, DWORD PTR _headPoint$144290[ebp]
  022a0	89 45 e4	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 1011 : 
; 1012 : 					headPoint.x = 0;

  022a3	c7 85 74 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _headPoint$144290[ebp], 0
$L144303:

; 1014 : 
; 1015 : 				if ( headPoint.y < 0 ) {

  022ad	83 bd 78 fc ff
	ff 00		 cmp	 DWORD PTR _headPoint$144290[ebp+4], 0
  022b4	7d 28		 jge	 SHORT $L144304

; 1016 : 					originY -= headPoint.y;

  022b6	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _originY$144289[ebp]
  022bc	2b 8d 78 fc ff
	ff		 sub	 ecx, DWORD PTR _headPoint$144290[ebp+4]
  022c2	89 8d 70 fc ff
	ff		 mov	 DWORD PTR _originY$144289[ebp], ecx

; 1017 : 					BMHeight -= headPoint.y;

  022c8	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  022cb	2b 95 78 fc ff
	ff		 sub	 edx, DWORD PTR _headPoint$144290[ebp+4]
  022d1	89 55 f0	 mov	 DWORD PTR _BMHeight$[ebp], edx

; 1018 : 
; 1019 : 					headPoint.y = 0;

  022d4	c7 85 78 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _headPoint$144290[ebp+4], 0
$L144304:

; 1021 : 
; 1022 : 				headBM = (MemID)bitmaps.at ( loop );

  022de	8b 85 90 fc ff
	ff		 mov	 eax, DWORD PTR _loop$144256[ebp]
  022e4	50		 push	 eax
  022e5	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR _bitmaps$144295[ebp]
  022eb	e8 00 00 00 00	 call	 ?at@Array@@QAEHH@Z	; Array::at
  022f0	50		 push	 eax
  022f1	8d 8d d4 f9 ff
	ff		 lea	 ecx, DWORD PTR $T150711[ebp]
  022f7	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  022fc	66 8b 08	 mov	 cx, WORD PTR [eax]
  022ff	66 89 8d 48 fc
	ff ff		 mov	 WORD PTR _headBM$144292[ebp], cx

; 1023 : 
; 1024 : 				if ( !headBM.IsValid() || headBM.GetMemType() != MemBitmap )

  02306	8d 8d 48 fc ff
	ff		 lea	 ecx, DWORD PTR _headBM$144292[ebp]
  0230c	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  02311	85 c0		 test	 eax, eax
  02313	74 10		 je	 SHORT $L144308
  02315	8d 8d 48 fc ff
	ff		 lea	 ecx, DWORD PTR _headBM$144292[ebp]
  0231b	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  02320	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  02323	74 57		 je	 SHORT $L144307
$L144308:

; 1025 : 					msgMgr->Fatal ( "%s(%d): head bitmap is invalid (bm = 0x%x, loop = %d, size = %d, headBitmaps = 0x%x)", __FILE__, __LINE__, (SCIUWord)headBM, loop, bitmaps.size(), (SCIUWord)headBitmaps );

  02325	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR _headBitmaps$144273[ebp]
  0232b	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02330	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  02335	50		 push	 eax
  02336	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR _bitmaps$144295[ebp]
  0233c	e8 00 00 00 00	 call	 ?size@Array@@QAEGXZ	; Array::size
  02341	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  02346	50		 push	 eax
  02347	8b 95 90 fc ff
	ff		 mov	 edx, DWORD PTR _loop$144256[ebp]
  0234d	52		 push	 edx
  0234e	8d 8d 48 fc ff
	ff		 lea	 ecx, DWORD PTR _headBM$144292[ebp]
  02354	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02359	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0235e	50		 push	 eax
  0235f	68 01 04 00 00	 push	 1025			; 00000401H
  02364	68 00 00 00 00	 push	 OFFSET FLAT:$SG144311
  02369	68 00 00 00 00	 push	 OFFSET FLAT:$SG144312
  0236e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  02373	50		 push	 eax
  02374	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  02379	83 c4 20	 add	 esp, 32			; 00000020H
$L144307:

; 1026 : 
; 1027 : 				CelObjMem head ( headBM );

  0237c	51		 push	 ecx
  0237d	8b cc		 mov	 ecx, esp
  0237f	89 a5 d0 f9 ff
	ff		 mov	 DWORD PTR $T150712[ebp], esp
  02385	8d 95 48 fc ff
	ff		 lea	 edx, DWORD PTR _headBM$144292[ebp]
  0238b	52		 push	 edx
  0238c	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02391	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144313[ebp]
  02397	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  0239c	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 1028 : 
; 1029 : 				headRect.Set ( headPoint.x, headPoint.y, headPoint.x + head.Width() - 1, headPoint.y + head.Height() - 1 );

  023a0	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144313[ebp]
  023a6	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  023ab	8b 8d 78 fc ff
	ff		 mov	 ecx, DWORD PTR _headPoint$144290[ebp+4]
  023b1	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  023b5	52		 push	 edx
  023b6	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144313[ebp]
  023bc	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  023c1	8b 8d 74 fc ff
	ff		 mov	 ecx, DWORD PTR _headPoint$144290[ebp]
  023c7	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  023cb	52		 push	 edx
  023cc	8b 85 78 fc ff
	ff		 mov	 eax, DWORD PTR _headPoint$144290[ebp+4]
  023d2	50		 push	 eax
  023d3	8b 8d 74 fc ff
	ff		 mov	 ecx, DWORD PTR _headPoint$144290[ebp]
  023d9	51		 push	 ecx
  023da	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR _headRect$144291[ebp]
  023e0	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 1030 : 
; 1031 : 				if ( ( headPoint.x + head.Width() - 1 ) > BMWidth ) {

  023e5	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144313[ebp]
  023eb	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  023f0	8b 95 74 fc ff
	ff		 mov	 edx, DWORD PTR _headPoint$144290[ebp]
  023f6	8d 44 02 ff	 lea	 eax, DWORD PTR [edx+eax-1]
  023fa	3b 45 e4	 cmp	 eax, DWORD PTR _BMWidth$[ebp]
  023fd	7e 18		 jle	 SHORT $L144315

; 1032 : 					BMWidth = headPoint.x + head.Width() - 1;

  023ff	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144313[ebp]
  02405	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  0240a	8b 8d 74 fc ff
	ff		 mov	 ecx, DWORD PTR _headPoint$144290[ebp]
  02410	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  02414	89 55 e4	 mov	 DWORD PTR _BMWidth$[ebp], edx
$L144315:

; 1034 : 			}

  02417	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0241b	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144313[ebp]
  02421	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  02426	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0242a	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR _bitmaps$144295[ebp]
  02430	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  02435	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  02439	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _origins$144294[ebp]
  0243f	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
$L144293:

; 1035 : 
; 1036 : 			// create the base bitmap
; 1037 : 			BM.Get ( MemBitmap, BMWidth * (BMHeight + 1) + CELHEADERSIZE );

  02444	6a 00		 push	 0
  02446	6a 00		 push	 0
  02448	6a 00		 push	 0
  0244a	6a 00		 push	 0
  0244c	68 00 02 00 00	 push	 512			; 00000200H
  02451	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  02454	83 c0 01	 add	 eax, 1
  02457	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  0245a	0f af c8	 imul	 ecx, eax
  0245d	83 c1 2e	 add	 ecx, 46			; 0000002eH
  02460	51		 push	 ecx
  02461	6a 4b		 push	 75			; 0000004bH
  02463	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  02466	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 1038 : 
; 1039 : 			// fill that bitmap in with skip color
; 1040 : 			memset ( (uchar*)memMgr->GetAddr(BM) + CELHEADERSIZE, celObj.Skip(), BMWidth * BMHeight );

  0246b	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  0246e	0f af 55 f0	 imul	 edx, DWORD PTR _BMHeight$[ebp]
  02472	52		 push	 edx
  02473	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  02479	e8 00 00 00 00	 call	 ?Skip@CelObj@@QBEEXZ	; CelObj::Skip
  0247e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02483	50		 push	 eax
  02484	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  02487	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0248c	50		 push	 eax
  0248d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  02493	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  02498	83 c0 2e	 add	 eax, 46			; 0000002eH
  0249b	50		 push	 eax
  0249c	e8 00 00 00 00	 call	 _memset
  024a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1041 : 
; 1042 : 			// put extra signature shit
; 1043 : //			memset ( (uchar *)memMgr->GetAddr(BM) + CELHEADERSIZE + (BMWidth * BMHeight), 123, BMWidth );
; 1044 : 
; 1045 : 			BuildHeader (
; 1046 : 							BM,
; 1047 : 							BMWidth,
; 1048 : 							BMHeight,
; 1049 : 							celObj.Skip(),
; 1050 : 							originX,
; 1051 : 							originY,
; 1052 : 							celObj.ResX(),
; 1053 : 							celObj.ResY(),
; 1054 : 							0,
; 1055 : 							True
; 1056 : 						);

  024a4	6a 01		 push	 1
  024a6	6a 00		 push	 0
  024a8	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  024ae	e8 00 00 00 00	 call	 ?ResY@CelObj@@QBEHXZ	; CelObj::ResY
  024b3	50		 push	 eax
  024b4	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  024ba	e8 00 00 00 00	 call	 ?ResX@CelObj@@QBEHXZ	; CelObj::ResX
  024bf	50		 push	 eax
  024c0	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  024c6	50		 push	 eax
  024c7	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  024cd	51		 push	 ecx
  024ce	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  024d4	e8 00 00 00 00	 call	 ?Skip@CelObj@@QBEEXZ	; CelObj::Skip
  024d9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  024de	50		 push	 eax
  024df	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  024e2	52		 push	 edx
  024e3	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  024e6	50		 push	 eax
  024e7	51		 push	 ecx
  024e8	8b cc		 mov	 ecx, esp
  024ea	89 a5 cc f9 ff
	ff		 mov	 DWORD PTR $T150713[ebp], esp
  024f0	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  024f3	52		 push	 edx
  024f4	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  024f9	e8 00 00 00 00	 call	 ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ; BuildHeader
  024fe	83 c4 28	 add	 esp, 40			; 00000028H

; 1057 : 
; 1058 : 			SOL_Point pt ( 0, 0 );

  02501	6a 00		 push	 0
  02503	6a 00		 push	 0
  02505	8d 8d 68 fc ff
	ff		 lea	 ecx, DWORD PTR _pt$144318[ebp]
  0250b	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 1059 : 
; 1060 : 			int combatAction = 0;

  02510	c7 85 98 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _combatAction$144319[ebp], 0

; 1061 : 			int shieldAction = 0;

  0251a	c7 85 4c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _shieldAction$144320[ebp], 0

; 1062 : 
; 1063 : 			switch ( action ) {

  02524	8b 85 94 fc ff
	ff		 mov	 eax, DWORD PTR _action$144258[ebp]
  0252a	89 85 1c f8 ff
	ff		 mov	 DWORD PTR -2020+[ebp], eax
  02530	81 bd 1c f8 ff
	ff 1c 27 00 00	 cmp	 DWORD PTR -2020+[ebp], 10012 ; 0000271cH
  0253a	7f 39		 jg	 SHORT $L150714
  0253c	81 bd 1c f8 ff
	ff 1a 27 00 00	 cmp	 DWORD PTR -2020+[ebp], 10010 ; 0000271aH
  02546	7d 5d		 jge	 SHORT $L144325
  02548	8b 8d 1c f8 ff
	ff		 mov	 ecx, DWORD PTR -2020+[ebp]
  0254e	83 e9 0a	 sub	 ecx, 10			; 0000000aH
  02551	89 8d 1c f8 ff
	ff		 mov	 DWORD PTR -2020+[ebp], ecx
  02557	83 bd 1c f8 ff
	ff 09		 cmp	 DWORD PTR -2020+[ebp], 9
  0255e	77 6f		 ja	 SHORT $L144322
  02560	8b 85 1c f8 ff
	ff		 mov	 eax, DWORD PTR -2020+[ebp]
  02566	33 d2		 xor	 edx, edx
  02568	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR $L150822[eax]
  0256e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L150823[edx*4]
$L150714:
  02575	8b 8d 1c f8 ff
	ff		 mov	 ecx, DWORD PTR -2020+[ebp]
  0257b	81 e9 1d 27 00
	00		 sub	 ecx, 10013		; 0000271dH
  02581	89 8d 1c f8 ff
	ff		 mov	 DWORD PTR -2020+[ebp], ecx
  02587	83 bd 1c f8 ff
	ff 06		 cmp	 DWORD PTR -2020+[ebp], 6
  0258e	77 3f		 ja	 SHORT $L144322
  02590	8b 85 1c f8 ff
	ff		 mov	 eax, DWORD PTR -2020+[ebp]
  02596	33 d2		 xor	 edx, edx
  02598	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR $L150824[eax]
  0259e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L150825[edx*4]
$L144325:

; 1064 : 				case 10:
; 1065 : 				case 11:
; 1066 : 				case 12:
; 1067 : 				case 10010:
; 1068 : 				case 10011:
; 1069 : 				case 10012:
; 1070 : 					combatAction = 1;

  025a5	c7 85 98 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR _combatAction$144319[ebp], 1

; 1071 : 					shieldAction = 0;

  025af	c7 85 4c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _shieldAction$144320[ebp], 0

; 1072 : 					break;

  025b9	eb 14		 jmp	 SHORT $L144322
$L144326:

; 1073 : 
; 1074 : 				case 13:
; 1075 : 				case 14:
; 1076 : 				case 15:
; 1077 : 				case 17:
; 1078 : 				case 18:
; 1079 : 				case 19:
; 1080 : 				case 10013:
; 1081 : 				case 10014:
; 1082 : 				case 10015:
; 1083 : 				case 10017:
; 1084 : 				case 10018:
; 1085 : 				case 10019:
; 1086 : 					combatAction = 1;

  025bb	c7 85 98 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR _combatAction$144319[ebp], 1

; 1087 : 					shieldAction = 1;

  025c5	c7 85 4c fc ff
	ff 01 00 00 00	 mov	 DWORD PTR _shieldAction$144320[ebp], 1
$L144322:

; 1090 : 
; 1091 : 			DrawView ( view + action, loop, cel, BM, BMWidth, BMHeight, originX, originY, False );

  025cf	6a 00		 push	 0
  025d1	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _originY$144289[ebp]
  025d7	51		 push	 ecx
  025d8	8b 95 a4 fc ff
	ff		 mov	 edx, DWORD PTR _originX$144288[ebp]
  025de	52		 push	 edx
  025df	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  025e2	50		 push	 eax
  025e3	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  025e6	51		 push	 ecx
  025e7	51		 push	 ecx
  025e8	8b cc		 mov	 ecx, esp
  025ea	89 a5 c8 f9 ff
	ff		 mov	 DWORD PTR $T150715[ebp], esp
  025f0	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  025f3	52		 push	 edx
  025f4	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  025f9	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  025ff	50		 push	 eax
  02600	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02606	51		 push	 ecx
  02607	8b 95 9c fc ff
	ff		 mov	 edx, DWORD PTR _view$144255[ebp]
  0260d	03 95 94 fc ff
	ff		 add	 edx, DWORD PTR _action$144258[ebp]
  02613	52		 push	 edx
  02614	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02619	83 c4 24	 add	 esp, 36			; 00000024H

; 1092 : 
; 1093 : 			// if there is no robe, draw it all
; 1094 : 			if ( robeView == -1 ) {

  0261c	83 bd 44 fc ff
	ff ff		 cmp	 DWORD PTR _robeView$144265[ebp], -1
  02623	0f 85 73 03 00
	00		 jne	 $L144328

; 1095 : 				if ( pantsView != -1 ) 

  02629	83 bd ac fc ff
	ff ff		 cmp	 DWORD PTR _pantsView$144260[ebp], -1
  02630	74 4d		 je	 SHORT $L144329

; 1096 : 					DrawView ( pantsView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02632	6a 01		 push	 1
  02634	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  0263a	50		 push	 eax
  0263b	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02641	51		 push	 ecx
  02642	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02645	52		 push	 edx
  02646	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02649	50		 push	 eax
  0264a	51		 push	 ecx
  0264b	8b cc		 mov	 ecx, esp
  0264d	89 a5 c4 f9 ff
	ff		 mov	 DWORD PTR $T150716[ebp], esp
  02653	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02656	52		 push	 edx
  02657	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0265c	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02662	50		 push	 eax
  02663	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02669	51		 push	 ecx
  0266a	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR _pantsView$144260[ebp]
  02670	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02676	52		 push	 edx
  02677	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0267c	83 c4 24	 add	 esp, 36			; 00000024H
$L144329:

; 1097 : 
; 1098 : 				if ( shoesView != -1 ) 

  0267f	83 bd c4 fc ff
	ff ff		 cmp	 DWORD PTR _shoesView$144261[ebp], -1
  02686	74 4d		 je	 SHORT $L144331

; 1099 : 					DrawView ( shoesView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02688	6a 01		 push	 1
  0268a	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02690	50		 push	 eax
  02691	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02697	51		 push	 ecx
  02698	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0269b	52		 push	 edx
  0269c	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0269f	50		 push	 eax
  026a0	51		 push	 ecx
  026a1	8b cc		 mov	 ecx, esp
  026a3	89 a5 c0 f9 ff
	ff		 mov	 DWORD PTR $T150717[ebp], esp
  026a9	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  026ac	52		 push	 edx
  026ad	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  026b2	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  026b8	50		 push	 eax
  026b9	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  026bf	51		 push	 ecx
  026c0	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _shoesView$144261[ebp]
  026c6	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  026cc	52		 push	 edx
  026cd	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  026d2	83 c4 24	 add	 esp, 36			; 00000024H
$L144331:

; 1100 : 
; 1101 : 				if ( skirtView != -1 ) 

  026d5	83 bd 60 fc ff
	ff ff		 cmp	 DWORD PTR _skirtView$144267[ebp], -1
  026dc	74 4d		 je	 SHORT $L144333

; 1102 : 					DrawView ( skirtView + action, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  026de	6a 01		 push	 1
  026e0	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  026e6	50		 push	 eax
  026e7	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  026ed	51		 push	 ecx
  026ee	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  026f1	52		 push	 edx
  026f2	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  026f5	50		 push	 eax
  026f6	51		 push	 ecx
  026f7	8b cc		 mov	 ecx, esp
  026f9	89 a5 bc f9 ff
	ff		 mov	 DWORD PTR $T150718[ebp], esp
  026ff	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02702	52		 push	 edx
  02703	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02708	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  0270e	50		 push	 eax
  0270f	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02715	51		 push	 ecx
  02716	8b 95 60 fc ff
	ff		 mov	 edx, DWORD PTR _skirtView$144267[ebp]
  0271c	03 95 94 fc ff
	ff		 add	 edx, DWORD PTR _action$144258[ebp]
  02722	52		 push	 edx
  02723	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02728	83 c4 24	 add	 esp, 36			; 00000024H
$L144333:

; 1103 : 
; 1104 : 				if ( shirtView != -1 ) 

  0272b	83 bd a8 fc ff
	ff ff		 cmp	 DWORD PTR _shirtView$144259[ebp], -1
  02732	74 4d		 je	 SHORT $L144335

; 1105 : 					DrawView ( shirtView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02734	6a 01		 push	 1
  02736	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  0273c	50		 push	 eax
  0273d	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02743	51		 push	 ecx
  02744	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02747	52		 push	 edx
  02748	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0274b	50		 push	 eax
  0274c	51		 push	 ecx
  0274d	8b cc		 mov	 ecx, esp
  0274f	89 a5 b8 f9 ff
	ff		 mov	 DWORD PTR $T150719[ebp], esp
  02755	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02758	52		 push	 edx
  02759	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0275e	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02764	50		 push	 eax
  02765	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  0276b	51		 push	 ecx
  0276c	8b 95 a8 fc ff
	ff		 mov	 edx, DWORD PTR _shirtView$144259[ebp]
  02772	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02778	52		 push	 edx
  02779	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0277e	83 c4 24	 add	 esp, 36			; 00000024H
$L144335:

; 1106 : 
; 1107 : 				if ( wristView != -1 ) 

  02781	83 bd 40 fc ff
	ff ff		 cmp	 DWORD PTR _wristView$144263[ebp], -1
  02788	74 4d		 je	 SHORT $L144337

; 1108 : 					DrawView ( wristView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  0278a	6a 01		 push	 1
  0278c	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02792	50		 push	 eax
  02793	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02799	51		 push	 ecx
  0279a	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0279d	52		 push	 edx
  0279e	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  027a1	50		 push	 eax
  027a2	51		 push	 ecx
  027a3	8b cc		 mov	 ecx, esp
  027a5	89 a5 b4 f9 ff
	ff		 mov	 DWORD PTR $T150720[ebp], esp
  027ab	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  027ae	52		 push	 edx
  027af	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  027b4	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  027ba	50		 push	 eax
  027bb	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  027c1	51		 push	 ecx
  027c2	8b 95 40 fc ff
	ff		 mov	 edx, DWORD PTR _wristView$144263[ebp]
  027c8	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  027ce	52		 push	 edx
  027cf	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  027d4	83 c4 24	 add	 esp, 36			; 00000024H
$L144337:

; 1109 : 
; 1110 : 				if ( cowlView != -1 ) 

  027d7	83 bd 88 fc ff
	ff ff		 cmp	 DWORD PTR _cowlView$144266[ebp], -1
  027de	74 4d		 je	 SHORT $L144339

; 1111 : 					DrawView ( cowlView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  027e0	6a 01		 push	 1
  027e2	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  027e8	50		 push	 eax
  027e9	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  027ef	51		 push	 ecx
  027f0	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  027f3	52		 push	 edx
  027f4	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  027f7	50		 push	 eax
  027f8	51		 push	 ecx
  027f9	8b cc		 mov	 ecx, esp
  027fb	89 a5 b0 f9 ff
	ff		 mov	 DWORD PTR $T150721[ebp], esp
  02801	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02804	52		 push	 edx
  02805	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0280a	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02810	50		 push	 eax
  02811	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02817	51		 push	 ecx
  02818	8b 95 88 fc ff
	ff		 mov	 edx, DWORD PTR _cowlView$144266[ebp]
  0281e	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02824	52		 push	 edx
  02825	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0282a	83 c4 24	 add	 esp, 36			; 00000024H
$L144339:

; 1112 : 
; 1113 : 				if ( beltView != -1 ) 

  0282d	83 bd 50 fc ff
	ff ff		 cmp	 DWORD PTR _beltView$144262[ebp], -1
  02834	74 4d		 je	 SHORT $L144341

; 1114 : 					DrawView ( beltView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02836	6a 01		 push	 1
  02838	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  0283e	50		 push	 eax
  0283f	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02845	51		 push	 ecx
  02846	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02849	52		 push	 edx
  0284a	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0284d	50		 push	 eax
  0284e	51		 push	 ecx
  0284f	8b cc		 mov	 ecx, esp
  02851	89 a5 ac f9 ff
	ff		 mov	 DWORD PTR $T150722[ebp], esp
  02857	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0285a	52		 push	 edx
  0285b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02860	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02866	50		 push	 eax
  02867	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  0286d	51		 push	 ecx
  0286e	8b 95 50 fc ff
	ff		 mov	 edx, DWORD PTR _beltView$144262[ebp]
  02874	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  0287a	52		 push	 edx
  0287b	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02880	83 c4 24	 add	 esp, 36			; 00000024H
$L144341:

; 1115 : 
; 1116 : 				if ( baldricView != -1 ) 

  02883	83 bd 54 fc ff
	ff ff		 cmp	 DWORD PTR _baldricView$144264[ebp], -1
  0288a	74 4d		 je	 SHORT $L144343

; 1117 : 					DrawView ( baldricView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  0288c	6a 01		 push	 1
  0288e	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02894	50		 push	 eax
  02895	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  0289b	51		 push	 ecx
  0289c	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0289f	52		 push	 edx
  028a0	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  028a3	50		 push	 eax
  028a4	51		 push	 ecx
  028a5	8b cc		 mov	 ecx, esp
  028a7	89 a5 a8 f9 ff
	ff		 mov	 DWORD PTR $T150723[ebp], esp
  028ad	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  028b0	52		 push	 edx
  028b1	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  028b6	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  028bc	50		 push	 eax
  028bd	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  028c3	51		 push	 ecx
  028c4	8b 95 54 fc ff
	ff		 mov	 edx, DWORD PTR _baldricView$144264[ebp]
  028ca	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  028d0	52		 push	 edx
  028d1	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  028d6	83 c4 24	 add	 esp, 36			; 00000024H
$L144343:

; 1118 : 
; 1119 : 				if ( combatAction ) {

  028d9	83 bd 98 fc ff
	ff 00		 cmp	 DWORD PTR _combatAction$144319[ebp], 0
  028e0	74 56		 je	 SHORT $L144346

; 1120 : 					if ( weaponView != -1 )

  028e2	83 bd 58 fc ff
	ff ff		 cmp	 DWORD PTR _weaponView$144268[ebp], -1
  028e9	74 4d		 je	 SHORT $L144346

; 1121 : 						DrawView ( weaponView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  028eb	6a 01		 push	 1
  028ed	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  028f3	50		 push	 eax
  028f4	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  028fa	51		 push	 ecx
  028fb	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  028fe	52		 push	 edx
  028ff	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02902	50		 push	 eax
  02903	51		 push	 ecx
  02904	8b cc		 mov	 ecx, esp
  02906	89 a5 a4 f9 ff
	ff		 mov	 DWORD PTR $T150724[ebp], esp
  0290c	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0290f	52		 push	 edx
  02910	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02915	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  0291b	50		 push	 eax
  0291c	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02922	51		 push	 ecx
  02923	8b 95 58 fc ff
	ff		 mov	 edx, DWORD PTR _weaponView$144268[ebp]
  02929	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  0292f	52		 push	 edx
  02930	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02935	83 c4 24	 add	 esp, 36			; 00000024H
$L144346:

; 1123 : 
; 1124 : 				if ( shieldAction ) {

  02938	83 bd 4c fc ff
	ff 00		 cmp	 DWORD PTR _shieldAction$144320[ebp], 0
  0293f	74 56		 je	 SHORT $L144349

; 1125 : 					if ( shieldView != -1 )

  02941	83 bd a0 fc ff
	ff ff		 cmp	 DWORD PTR _shieldView$144269[ebp], -1
  02948	74 4d		 je	 SHORT $L144349

; 1126 : 						DrawView ( shieldView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  0294a	6a 01		 push	 1
  0294c	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02952	50		 push	 eax
  02953	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02959	51		 push	 ecx
  0295a	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0295d	52		 push	 edx
  0295e	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02961	50		 push	 eax
  02962	51		 push	 ecx
  02963	8b cc		 mov	 ecx, esp
  02965	89 a5 a0 f9 ff
	ff		 mov	 DWORD PTR $T150725[ebp], esp
  0296b	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0296e	52		 push	 edx
  0296f	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02974	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  0297a	50		 push	 eax
  0297b	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02981	51		 push	 ecx
  02982	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR _shieldView$144269[ebp]
  02988	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  0298e	52		 push	 edx
  0298f	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02994	83 c4 24	 add	 esp, 36			; 00000024H
$L144349:

; 1128 : 			} else {

  02997	e9 63 02 00 00	 jmp	 $L144365
$L144328:

; 1129 : 				if ( shoesView != -1 ) 

  0299c	83 bd c4 fc ff
	ff ff		 cmp	 DWORD PTR _shoesView$144261[ebp], -1
  029a3	74 4d		 je	 SHORT $L144352

; 1130 : 					DrawView ( shoesView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  029a5	6a 01		 push	 1
  029a7	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  029ad	50		 push	 eax
  029ae	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  029b4	51		 push	 ecx
  029b5	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  029b8	52		 push	 edx
  029b9	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  029bc	50		 push	 eax
  029bd	51		 push	 ecx
  029be	8b cc		 mov	 ecx, esp
  029c0	89 a5 9c f9 ff
	ff		 mov	 DWORD PTR $T150726[ebp], esp
  029c6	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  029c9	52		 push	 edx
  029ca	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  029cf	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  029d5	50		 push	 eax
  029d6	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  029dc	51		 push	 ecx
  029dd	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _shoesView$144261[ebp]
  029e3	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  029e9	52		 push	 edx
  029ea	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  029ef	83 c4 24	 add	 esp, 36			; 00000024H
$L144352:

; 1131 : 
; 1132 : 				DrawView ( robeView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  029f2	6a 01		 push	 1
  029f4	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  029fa	50		 push	 eax
  029fb	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02a01	51		 push	 ecx
  02a02	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02a05	52		 push	 edx
  02a06	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02a09	50		 push	 eax
  02a0a	51		 push	 ecx
  02a0b	8b cc		 mov	 ecx, esp
  02a0d	89 a5 98 f9 ff
	ff		 mov	 DWORD PTR $T150727[ebp], esp
  02a13	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02a16	52		 push	 edx
  02a17	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02a1c	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02a22	50		 push	 eax
  02a23	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02a29	51		 push	 ecx
  02a2a	8b 95 44 fc ff
	ff		 mov	 edx, DWORD PTR _robeView$144265[ebp]
  02a30	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02a36	52		 push	 edx
  02a37	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02a3c	83 c4 24	 add	 esp, 36			; 00000024H

; 1133 : 
; 1134 : 				if ( cowlView != -1 ) 

  02a3f	83 bd 88 fc ff
	ff ff		 cmp	 DWORD PTR _cowlView$144266[ebp], -1
  02a46	74 4d		 je	 SHORT $L144355

; 1135 : 					DrawView ( cowlView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02a48	6a 01		 push	 1
  02a4a	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02a50	50		 push	 eax
  02a51	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02a57	51		 push	 ecx
  02a58	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02a5b	52		 push	 edx
  02a5c	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02a5f	50		 push	 eax
  02a60	51		 push	 ecx
  02a61	8b cc		 mov	 ecx, esp
  02a63	89 a5 94 f9 ff
	ff		 mov	 DWORD PTR $T150728[ebp], esp
  02a69	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02a6c	52		 push	 edx
  02a6d	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02a72	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02a78	50		 push	 eax
  02a79	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02a7f	51		 push	 ecx
  02a80	8b 95 88 fc ff
	ff		 mov	 edx, DWORD PTR _cowlView$144266[ebp]
  02a86	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02a8c	52		 push	 edx
  02a8d	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02a92	83 c4 24	 add	 esp, 36			; 00000024H
$L144355:

; 1136 : 
; 1137 : 				if ( beltView != -1 ) 

  02a95	83 bd 50 fc ff
	ff ff		 cmp	 DWORD PTR _beltView$144262[ebp], -1
  02a9c	74 4d		 je	 SHORT $L144357

; 1138 : 					DrawView ( beltView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02a9e	6a 01		 push	 1
  02aa0	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02aa6	50		 push	 eax
  02aa7	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02aad	51		 push	 ecx
  02aae	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02ab1	52		 push	 edx
  02ab2	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02ab5	50		 push	 eax
  02ab6	51		 push	 ecx
  02ab7	8b cc		 mov	 ecx, esp
  02ab9	89 a5 90 f9 ff
	ff		 mov	 DWORD PTR $T150729[ebp], esp
  02abf	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02ac2	52		 push	 edx
  02ac3	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02ac8	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02ace	50		 push	 eax
  02acf	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02ad5	51		 push	 ecx
  02ad6	8b 95 50 fc ff
	ff		 mov	 edx, DWORD PTR _beltView$144262[ebp]
  02adc	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02ae2	52		 push	 edx
  02ae3	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02ae8	83 c4 24	 add	 esp, 36			; 00000024H
$L144357:

; 1139 : 
; 1140 : 				if ( baldricView != -1 ) 

  02aeb	83 bd 54 fc ff
	ff ff		 cmp	 DWORD PTR _baldricView$144264[ebp], -1
  02af2	74 4d		 je	 SHORT $L144359

; 1141 : 					DrawView ( baldricView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02af4	6a 01		 push	 1
  02af6	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02afc	50		 push	 eax
  02afd	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02b03	51		 push	 ecx
  02b04	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02b07	52		 push	 edx
  02b08	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02b0b	50		 push	 eax
  02b0c	51		 push	 ecx
  02b0d	8b cc		 mov	 ecx, esp
  02b0f	89 a5 8c f9 ff
	ff		 mov	 DWORD PTR $T150730[ebp], esp
  02b15	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02b18	52		 push	 edx
  02b19	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02b1e	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02b24	50		 push	 eax
  02b25	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02b2b	51		 push	 ecx
  02b2c	8b 95 54 fc ff
	ff		 mov	 edx, DWORD PTR _baldricView$144264[ebp]
  02b32	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02b38	52		 push	 edx
  02b39	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02b3e	83 c4 24	 add	 esp, 36			; 00000024H
$L144359:

; 1142 : 
; 1143 : 				if ( combatAction ) {

  02b41	83 bd 98 fc ff
	ff 00		 cmp	 DWORD PTR _combatAction$144319[ebp], 0
  02b48	74 56		 je	 SHORT $L144362

; 1144 : 					if ( weaponView != -1 )

  02b4a	83 bd 58 fc ff
	ff ff		 cmp	 DWORD PTR _weaponView$144268[ebp], -1
  02b51	74 4d		 je	 SHORT $L144362

; 1145 : 						DrawView ( weaponView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02b53	6a 01		 push	 1
  02b55	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02b5b	50		 push	 eax
  02b5c	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02b62	51		 push	 ecx
  02b63	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02b66	52		 push	 edx
  02b67	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02b6a	50		 push	 eax
  02b6b	51		 push	 ecx
  02b6c	8b cc		 mov	 ecx, esp
  02b6e	89 a5 88 f9 ff
	ff		 mov	 DWORD PTR $T150731[ebp], esp
  02b74	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02b77	52		 push	 edx
  02b78	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02b7d	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02b83	50		 push	 eax
  02b84	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02b8a	51		 push	 ecx
  02b8b	8b 95 58 fc ff
	ff		 mov	 edx, DWORD PTR _weaponView$144268[ebp]
  02b91	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02b97	52		 push	 edx
  02b98	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02b9d	83 c4 24	 add	 esp, 36			; 00000024H
$L144362:

; 1147 : 
; 1148 : 				if ( shieldAction ) {

  02ba0	83 bd 4c fc ff
	ff 00		 cmp	 DWORD PTR _shieldAction$144320[ebp], 0
  02ba7	74 56		 je	 SHORT $L144365

; 1149 : 					if ( shieldView != -1 )

  02ba9	83 bd a0 fc ff
	ff ff		 cmp	 DWORD PTR _shieldView$144269[ebp], -1
  02bb0	74 4d		 je	 SHORT $L144365

; 1150 : 						DrawView ( shieldView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02bb2	6a 01		 push	 1
  02bb4	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02bba	50		 push	 eax
  02bbb	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02bc1	51		 push	 ecx
  02bc2	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02bc5	52		 push	 edx
  02bc6	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02bc9	50		 push	 eax
  02bca	51		 push	 ecx
  02bcb	8b cc		 mov	 ecx, esp
  02bcd	89 a5 84 f9 ff
	ff		 mov	 DWORD PTR $T150732[ebp], esp
  02bd3	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02bd6	52		 push	 edx
  02bd7	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02bdc	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02be2	50		 push	 eax
  02be3	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02be9	51		 push	 ecx
  02bea	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR _shieldView$144269[ebp]
  02bf0	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02bf6	52		 push	 edx
  02bf7	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02bfc	83 c4 24	 add	 esp, 36			; 00000024H
$L144365:

; 1153 : 
; 1154 : 			// put the head on
; 1155 : 			if ( headBitmaps && headOrigin && headOrigin.IsValid() && headBitmaps.IsValid() && headOrigin.GetMemType() == MemArray && headBitmaps.GetMemType() == MemArray ) {

  02bff	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR _headBitmaps$144273[ebp]
  02c05	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02c0a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  02c0f	85 c0		 test	 eax, eax
  02c11	0f 84 f6 00 00
	00		 je	 $L144367
  02c17	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144270[ebp]
  02c1d	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02c22	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  02c27	85 c0		 test	 eax, eax
  02c29	0f 84 de 00 00
	00		 je	 $L144367
  02c2f	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144270[ebp]
  02c35	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  02c3a	85 c0		 test	 eax, eax
  02c3c	0f 84 cb 00 00
	00		 je	 $L144367
  02c42	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR _headBitmaps$144273[ebp]
  02c48	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  02c4d	85 c0		 test	 eax, eax
  02c4f	0f 84 b8 00 00
	00		 je	 $L144367
  02c55	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144270[ebp]
  02c5b	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  02c60	83 f8 35	 cmp	 eax, 53			; 00000035H
  02c63	0f 85 a4 00 00
	00		 jne	 $L144367
  02c69	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR _headBitmaps$144273[ebp]
  02c6f	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  02c74	83 f8 35	 cmp	 eax, 53			; 00000035H
  02c77	0f 85 90 00 00
	00		 jne	 $L144367

; 1156 : 				BufferStd buf ( BMWidth, BMHeight, (uchar *)memMgr->GetAddr ( BM ) + CELHEADERSIZE );

  02c7d	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  02c80	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02c85	50		 push	 eax
  02c86	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  02c8c	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  02c91	83 c0 2e	 add	 eax, 46			; 0000002eH
  02c94	50		 push	 eax
  02c95	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  02c98	50		 push	 eax
  02c99	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  02c9c	51		 push	 ecx
  02c9d	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR _buf$144369[ebp]
  02ca3	e8 00 00 00 00	 call	 ??0BufferStd@@QAE@HHPAE@Z ; BufferStd::BufferStd

; 1157 : 
; 1158 : 				CelObjMem head ( headBM );

  02ca8	51		 push	 ecx
  02ca9	8b cc		 mov	 ecx, esp
  02cab	89 a5 80 f9 ff
	ff		 mov	 DWORD PTR $T150733[ebp], esp
  02cb1	8d 95 48 fc ff
	ff		 lea	 edx, DWORD PTR _headBM$144292[ebp]
  02cb7	52		 push	 edx
  02cb8	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02cbd	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144370[ebp]
  02cc3	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  02cc8	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 1159 : 
; 1160 : 				head.Draw ( buf, headRect, headPoint, 0 );

  02ccc	6a 00		 push	 0
  02cce	83 ec 08	 sub	 esp, 8
  02cd1	8b cc		 mov	 ecx, esp
  02cd3	89 a5 7c f9 ff
	ff		 mov	 DWORD PTR $T150734[ebp], esp
  02cd9	8d 85 74 fc ff
	ff		 lea	 eax, DWORD PTR _headPoint$144290[ebp]
  02cdf	50		 push	 eax
  02ce0	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  02ce5	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR _headRect$144291[ebp]
  02ceb	51		 push	 ecx
  02cec	8d 95 74 fb ff
	ff		 lea	 edx, DWORD PTR _buf$144369[ebp]
  02cf2	52		 push	 edx
  02cf3	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144370[ebp]
  02cf9	e8 00 00 00 00	 call	 ?Draw@CelObjMem@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjMem::Draw

; 1161 : 			}

  02cfe	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  02d02	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144370[ebp]
  02d08	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
$L144367:

; 1162 : 
; 1163 : 			if ( GetNumLoops ( resMgr->Get ( MemResView, view + action ) ) > 4 ) {

  02d0d	6a 00		 push	 0
  02d0f	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _view$144255[ebp]
  02d15	03 85 94 fc ff
	ff		 add	 eax, DWORD PTR _action$144258[ebp]
  02d1b	50		 push	 eax
  02d1c	6a 00		 push	 0
  02d1e	8d 8d 74 f9 ff
	ff		 lea	 ecx, DWORD PTR $T150736[ebp]
  02d24	51		 push	 ecx
  02d25	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  02d2b	8b 02		 mov	 eax, DWORD PTR [edx]
  02d2d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  02d33	ff 50 20	 call	 DWORD PTR [eax+32]
  02d36	51		 push	 ecx
  02d37	8b cc		 mov	 ecx, esp
  02d39	89 a5 78 f9 ff
	ff		 mov	 DWORD PTR $T150735[ebp], esp
  02d3f	50		 push	 eax
  02d40	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02d45	e8 00 00 00 00	 call	 ?GetNumLoops@@YAHVMemID@@@Z ; GetNumLoops
  02d4a	83 c4 04	 add	 esp, 4
  02d4d	83 f8 04	 cmp	 eax, 4
  02d50	0f 8e c7 0c 00
	00		 jle	 $L144457

; 1164 : 				loop += 4;

  02d56	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02d5c	83 c1 04	 add	 ecx, 4
  02d5f	89 8d 90 fc ff
	ff		 mov	 DWORD PTR _loop$144256[ebp], ecx

; 1165 : 
; 1166 : 				DrawView ( view + action, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02d65	6a 01		 push	 1
  02d67	8b 95 70 fc ff
	ff		 mov	 edx, DWORD PTR _originY$144289[ebp]
  02d6d	52		 push	 edx
  02d6e	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _originX$144288[ebp]
  02d74	50		 push	 eax
  02d75	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  02d78	51		 push	 ecx
  02d79	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  02d7c	52		 push	 edx
  02d7d	51		 push	 ecx
  02d7e	8b cc		 mov	 ecx, esp
  02d80	89 a5 70 f9 ff
	ff		 mov	 DWORD PTR $T150737[ebp], esp
  02d86	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  02d89	50		 push	 eax
  02d8a	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02d8f	8b 8d 8c fc ff
	ff		 mov	 ecx, DWORD PTR _cel$144257[ebp]
  02d95	51		 push	 ecx
  02d96	8b 95 90 fc ff
	ff		 mov	 edx, DWORD PTR _loop$144256[ebp]
  02d9c	52		 push	 edx
  02d9d	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _view$144255[ebp]
  02da3	03 85 94 fc ff
	ff		 add	 eax, DWORD PTR _action$144258[ebp]
  02da9	50		 push	 eax
  02daa	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02daf	83 c4 24	 add	 esp, 36			; 00000024H

; 1167 : 
; 1168 : 				// if there is no robe, draw it all
; 1169 : 				if ( robeView == -1 ) {

  02db2	83 bd 44 fc ff
	ff ff		 cmp	 DWORD PTR _robeView$144265[ebp], -1
  02db9	0f 85 73 03 00
	00		 jne	 $L144377

; 1170 : 					if ( pantsView != -1 ) 

  02dbf	83 bd ac fc ff
	ff ff		 cmp	 DWORD PTR _pantsView$144260[ebp], -1
  02dc6	74 4d		 je	 SHORT $L144378

; 1171 : 						DrawView ( pantsView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02dc8	6a 01		 push	 1
  02dca	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _originY$144289[ebp]
  02dd0	51		 push	 ecx
  02dd1	8b 95 a4 fc ff
	ff		 mov	 edx, DWORD PTR _originX$144288[ebp]
  02dd7	52		 push	 edx
  02dd8	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  02ddb	50		 push	 eax
  02ddc	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  02ddf	51		 push	 ecx
  02de0	51		 push	 ecx
  02de1	8b cc		 mov	 ecx, esp
  02de3	89 a5 6c f9 ff
	ff		 mov	 DWORD PTR $T150738[ebp], esp
  02de9	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02dec	52		 push	 edx
  02ded	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02df2	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02df8	50		 push	 eax
  02df9	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02dff	51		 push	 ecx
  02e00	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR _pantsView$144260[ebp]
  02e06	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02e0c	52		 push	 edx
  02e0d	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02e12	83 c4 24	 add	 esp, 36			; 00000024H
$L144378:

; 1172 : 
; 1173 : 					if ( shoesView != -1 ) 

  02e15	83 bd c4 fc ff
	ff ff		 cmp	 DWORD PTR _shoesView$144261[ebp], -1
  02e1c	74 4d		 je	 SHORT $L144380

; 1174 : 						DrawView ( shoesView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02e1e	6a 01		 push	 1
  02e20	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02e26	50		 push	 eax
  02e27	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02e2d	51		 push	 ecx
  02e2e	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02e31	52		 push	 edx
  02e32	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02e35	50		 push	 eax
  02e36	51		 push	 ecx
  02e37	8b cc		 mov	 ecx, esp
  02e39	89 a5 68 f9 ff
	ff		 mov	 DWORD PTR $T150739[ebp], esp
  02e3f	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02e42	52		 push	 edx
  02e43	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02e48	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02e4e	50		 push	 eax
  02e4f	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02e55	51		 push	 ecx
  02e56	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _shoesView$144261[ebp]
  02e5c	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02e62	52		 push	 edx
  02e63	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02e68	83 c4 24	 add	 esp, 36			; 00000024H
$L144380:

; 1175 : 
; 1176 : 					if ( skirtView != -1 ) 

  02e6b	83 bd 60 fc ff
	ff ff		 cmp	 DWORD PTR _skirtView$144267[ebp], -1
  02e72	74 4d		 je	 SHORT $L144382

; 1177 : 						DrawView ( skirtView + action, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02e74	6a 01		 push	 1
  02e76	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02e7c	50		 push	 eax
  02e7d	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02e83	51		 push	 ecx
  02e84	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02e87	52		 push	 edx
  02e88	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02e8b	50		 push	 eax
  02e8c	51		 push	 ecx
  02e8d	8b cc		 mov	 ecx, esp
  02e8f	89 a5 64 f9 ff
	ff		 mov	 DWORD PTR $T150740[ebp], esp
  02e95	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02e98	52		 push	 edx
  02e99	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02e9e	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02ea4	50		 push	 eax
  02ea5	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02eab	51		 push	 ecx
  02eac	8b 95 60 fc ff
	ff		 mov	 edx, DWORD PTR _skirtView$144267[ebp]
  02eb2	03 95 94 fc ff
	ff		 add	 edx, DWORD PTR _action$144258[ebp]
  02eb8	52		 push	 edx
  02eb9	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02ebe	83 c4 24	 add	 esp, 36			; 00000024H
$L144382:

; 1178 : 
; 1179 : 					if ( shirtView != -1 ) 

  02ec1	83 bd a8 fc ff
	ff ff		 cmp	 DWORD PTR _shirtView$144259[ebp], -1
  02ec8	74 4d		 je	 SHORT $L144384

; 1180 : 						DrawView ( shirtView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02eca	6a 01		 push	 1
  02ecc	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02ed2	50		 push	 eax
  02ed3	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02ed9	51		 push	 ecx
  02eda	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02edd	52		 push	 edx
  02ede	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02ee1	50		 push	 eax
  02ee2	51		 push	 ecx
  02ee3	8b cc		 mov	 ecx, esp
  02ee5	89 a5 60 f9 ff
	ff		 mov	 DWORD PTR $T150741[ebp], esp
  02eeb	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02eee	52		 push	 edx
  02eef	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02ef4	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02efa	50		 push	 eax
  02efb	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02f01	51		 push	 ecx
  02f02	8b 95 a8 fc ff
	ff		 mov	 edx, DWORD PTR _shirtView$144259[ebp]
  02f08	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02f0e	52		 push	 edx
  02f0f	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02f14	83 c4 24	 add	 esp, 36			; 00000024H
$L144384:

; 1181 : 
; 1182 : 					if ( wristView != -1 ) 

  02f17	83 bd 40 fc ff
	ff ff		 cmp	 DWORD PTR _wristView$144263[ebp], -1
  02f1e	74 4d		 je	 SHORT $L144386

; 1183 : 						DrawView ( wristView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02f20	6a 01		 push	 1
  02f22	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02f28	50		 push	 eax
  02f29	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02f2f	51		 push	 ecx
  02f30	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02f33	52		 push	 edx
  02f34	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02f37	50		 push	 eax
  02f38	51		 push	 ecx
  02f39	8b cc		 mov	 ecx, esp
  02f3b	89 a5 5c f9 ff
	ff		 mov	 DWORD PTR $T150742[ebp], esp
  02f41	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02f44	52		 push	 edx
  02f45	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02f4a	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02f50	50		 push	 eax
  02f51	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02f57	51		 push	 ecx
  02f58	8b 95 40 fc ff
	ff		 mov	 edx, DWORD PTR _wristView$144263[ebp]
  02f5e	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02f64	52		 push	 edx
  02f65	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02f6a	83 c4 24	 add	 esp, 36			; 00000024H
$L144386:

; 1184 : 
; 1185 : 					if ( cowlView != -1 ) 

  02f6d	83 bd 88 fc ff
	ff ff		 cmp	 DWORD PTR _cowlView$144266[ebp], -1
  02f74	74 4d		 je	 SHORT $L144388

; 1186 : 						DrawView ( cowlView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02f76	6a 01		 push	 1
  02f78	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02f7e	50		 push	 eax
  02f7f	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02f85	51		 push	 ecx
  02f86	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02f89	52		 push	 edx
  02f8a	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02f8d	50		 push	 eax
  02f8e	51		 push	 ecx
  02f8f	8b cc		 mov	 ecx, esp
  02f91	89 a5 58 f9 ff
	ff		 mov	 DWORD PTR $T150743[ebp], esp
  02f97	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02f9a	52		 push	 edx
  02f9b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02fa0	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02fa6	50		 push	 eax
  02fa7	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  02fad	51		 push	 ecx
  02fae	8b 95 88 fc ff
	ff		 mov	 edx, DWORD PTR _cowlView$144266[ebp]
  02fb4	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  02fba	52		 push	 edx
  02fbb	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  02fc0	83 c4 24	 add	 esp, 36			; 00000024H
$L144388:

; 1187 : 
; 1188 : 					if ( beltView != -1 ) 

  02fc3	83 bd 50 fc ff
	ff ff		 cmp	 DWORD PTR _beltView$144262[ebp], -1
  02fca	74 4d		 je	 SHORT $L144390

; 1189 : 						DrawView ( beltView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  02fcc	6a 01		 push	 1
  02fce	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  02fd4	50		 push	 eax
  02fd5	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  02fdb	51		 push	 ecx
  02fdc	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  02fdf	52		 push	 edx
  02fe0	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  02fe3	50		 push	 eax
  02fe4	51		 push	 ecx
  02fe5	8b cc		 mov	 ecx, esp
  02fe7	89 a5 54 f9 ff
	ff		 mov	 DWORD PTR $T150744[ebp], esp
  02fed	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  02ff0	52		 push	 edx
  02ff1	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02ff6	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  02ffc	50		 push	 eax
  02ffd	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03003	51		 push	 ecx
  03004	8b 95 50 fc ff
	ff		 mov	 edx, DWORD PTR _beltView$144262[ebp]
  0300a	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03010	52		 push	 edx
  03011	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03016	83 c4 24	 add	 esp, 36			; 00000024H
$L144390:

; 1190 : 
; 1191 : 					if ( baldricView != -1 ) 

  03019	83 bd 54 fc ff
	ff ff		 cmp	 DWORD PTR _baldricView$144264[ebp], -1
  03020	74 4d		 je	 SHORT $L144392

; 1192 : 						DrawView ( baldricView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03022	6a 01		 push	 1
  03024	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  0302a	50		 push	 eax
  0302b	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03031	51		 push	 ecx
  03032	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03035	52		 push	 edx
  03036	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03039	50		 push	 eax
  0303a	51		 push	 ecx
  0303b	8b cc		 mov	 ecx, esp
  0303d	89 a5 50 f9 ff
	ff		 mov	 DWORD PTR $T150745[ebp], esp
  03043	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03046	52		 push	 edx
  03047	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0304c	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03052	50		 push	 eax
  03053	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03059	51		 push	 ecx
  0305a	8b 95 54 fc ff
	ff		 mov	 edx, DWORD PTR _baldricView$144264[ebp]
  03060	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03066	52		 push	 edx
  03067	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0306c	83 c4 24	 add	 esp, 36			; 00000024H
$L144392:

; 1193 : 
; 1194 : 					if ( combatAction ) {

  0306f	83 bd 98 fc ff
	ff 00		 cmp	 DWORD PTR _combatAction$144319[ebp], 0
  03076	74 56		 je	 SHORT $L144395

; 1195 : 						if ( weaponView != -1 )

  03078	83 bd 58 fc ff
	ff ff		 cmp	 DWORD PTR _weaponView$144268[ebp], -1
  0307f	74 4d		 je	 SHORT $L144395

; 1196 : 							DrawView ( weaponView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03081	6a 01		 push	 1
  03083	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03089	50		 push	 eax
  0308a	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03090	51		 push	 ecx
  03091	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03094	52		 push	 edx
  03095	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03098	50		 push	 eax
  03099	51		 push	 ecx
  0309a	8b cc		 mov	 ecx, esp
  0309c	89 a5 4c f9 ff
	ff		 mov	 DWORD PTR $T150746[ebp], esp
  030a2	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  030a5	52		 push	 edx
  030a6	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  030ab	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  030b1	50		 push	 eax
  030b2	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  030b8	51		 push	 ecx
  030b9	8b 95 58 fc ff
	ff		 mov	 edx, DWORD PTR _weaponView$144268[ebp]
  030bf	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  030c5	52		 push	 edx
  030c6	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  030cb	83 c4 24	 add	 esp, 36			; 00000024H
$L144395:

; 1198 : 
; 1199 : 					if ( shieldAction ) {

  030ce	83 bd 4c fc ff
	ff 00		 cmp	 DWORD PTR _shieldAction$144320[ebp], 0
  030d5	74 56		 je	 SHORT $L144398

; 1200 : 						if ( shieldView != -1 )

  030d7	83 bd a0 fc ff
	ff ff		 cmp	 DWORD PTR _shieldView$144269[ebp], -1
  030de	74 4d		 je	 SHORT $L144398

; 1201 : 							DrawView ( shieldView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  030e0	6a 01		 push	 1
  030e2	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  030e8	50		 push	 eax
  030e9	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  030ef	51		 push	 ecx
  030f0	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  030f3	52		 push	 edx
  030f4	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  030f7	50		 push	 eax
  030f8	51		 push	 ecx
  030f9	8b cc		 mov	 ecx, esp
  030fb	89 a5 48 f9 ff
	ff		 mov	 DWORD PTR $T150747[ebp], esp
  03101	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03104	52		 push	 edx
  03105	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0310a	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03110	50		 push	 eax
  03111	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03117	51		 push	 ecx
  03118	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR _shieldView$144269[ebp]
  0311e	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03124	52		 push	 edx
  03125	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0312a	83 c4 24	 add	 esp, 36			; 00000024H
$L144398:

; 1203 : 				} else {

  0312d	e9 63 02 00 00	 jmp	 $L144414
$L144377:

; 1204 : 					if ( shoesView != -1 ) 

  03132	83 bd c4 fc ff
	ff ff		 cmp	 DWORD PTR _shoesView$144261[ebp], -1
  03139	74 4d		 je	 SHORT $L144401

; 1205 : 						DrawView ( shoesView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  0313b	6a 01		 push	 1
  0313d	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03143	50		 push	 eax
  03144	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  0314a	51		 push	 ecx
  0314b	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0314e	52		 push	 edx
  0314f	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03152	50		 push	 eax
  03153	51		 push	 ecx
  03154	8b cc		 mov	 ecx, esp
  03156	89 a5 44 f9 ff
	ff		 mov	 DWORD PTR $T150748[ebp], esp
  0315c	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0315f	52		 push	 edx
  03160	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03165	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  0316b	50		 push	 eax
  0316c	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03172	51		 push	 ecx
  03173	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _shoesView$144261[ebp]
  03179	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  0317f	52		 push	 edx
  03180	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03185	83 c4 24	 add	 esp, 36			; 00000024H
$L144401:

; 1206 : 
; 1207 : 					DrawView ( robeView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03188	6a 01		 push	 1
  0318a	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03190	50		 push	 eax
  03191	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03197	51		 push	 ecx
  03198	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0319b	52		 push	 edx
  0319c	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0319f	50		 push	 eax
  031a0	51		 push	 ecx
  031a1	8b cc		 mov	 ecx, esp
  031a3	89 a5 40 f9 ff
	ff		 mov	 DWORD PTR $T150749[ebp], esp
  031a9	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  031ac	52		 push	 edx
  031ad	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  031b2	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  031b8	50		 push	 eax
  031b9	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  031bf	51		 push	 ecx
  031c0	8b 95 44 fc ff
	ff		 mov	 edx, DWORD PTR _robeView$144265[ebp]
  031c6	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  031cc	52		 push	 edx
  031cd	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  031d2	83 c4 24	 add	 esp, 36			; 00000024H

; 1208 : 
; 1209 : 					if ( cowlView != -1 ) 

  031d5	83 bd 88 fc ff
	ff ff		 cmp	 DWORD PTR _cowlView$144266[ebp], -1
  031dc	74 4d		 je	 SHORT $L144404

; 1210 : 						DrawView ( cowlView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  031de	6a 01		 push	 1
  031e0	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  031e6	50		 push	 eax
  031e7	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  031ed	51		 push	 ecx
  031ee	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  031f1	52		 push	 edx
  031f2	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  031f5	50		 push	 eax
  031f6	51		 push	 ecx
  031f7	8b cc		 mov	 ecx, esp
  031f9	89 a5 3c f9 ff
	ff		 mov	 DWORD PTR $T150750[ebp], esp
  031ff	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03202	52		 push	 edx
  03203	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03208	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  0320e	50		 push	 eax
  0320f	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03215	51		 push	 ecx
  03216	8b 95 88 fc ff
	ff		 mov	 edx, DWORD PTR _cowlView$144266[ebp]
  0321c	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03222	52		 push	 edx
  03223	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03228	83 c4 24	 add	 esp, 36			; 00000024H
$L144404:

; 1211 : 
; 1212 : 					if ( beltView != -1 ) 

  0322b	83 bd 50 fc ff
	ff ff		 cmp	 DWORD PTR _beltView$144262[ebp], -1
  03232	74 4d		 je	 SHORT $L144406

; 1213 : 						DrawView ( beltView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03234	6a 01		 push	 1
  03236	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  0323c	50		 push	 eax
  0323d	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03243	51		 push	 ecx
  03244	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03247	52		 push	 edx
  03248	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0324b	50		 push	 eax
  0324c	51		 push	 ecx
  0324d	8b cc		 mov	 ecx, esp
  0324f	89 a5 38 f9 ff
	ff		 mov	 DWORD PTR $T150751[ebp], esp
  03255	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03258	52		 push	 edx
  03259	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0325e	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03264	50		 push	 eax
  03265	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  0326b	51		 push	 ecx
  0326c	8b 95 50 fc ff
	ff		 mov	 edx, DWORD PTR _beltView$144262[ebp]
  03272	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03278	52		 push	 edx
  03279	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0327e	83 c4 24	 add	 esp, 36			; 00000024H
$L144406:

; 1214 : 
; 1215 : 					if ( baldricView != -1 ) 

  03281	83 bd 54 fc ff
	ff ff		 cmp	 DWORD PTR _baldricView$144264[ebp], -1
  03288	74 4d		 je	 SHORT $L144408

; 1216 : 						DrawView ( baldricView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  0328a	6a 01		 push	 1
  0328c	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03292	50		 push	 eax
  03293	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03299	51		 push	 ecx
  0329a	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0329d	52		 push	 edx
  0329e	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  032a1	50		 push	 eax
  032a2	51		 push	 ecx
  032a3	8b cc		 mov	 ecx, esp
  032a5	89 a5 34 f9 ff
	ff		 mov	 DWORD PTR $T150752[ebp], esp
  032ab	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  032ae	52		 push	 edx
  032af	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  032b4	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  032ba	50		 push	 eax
  032bb	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  032c1	51		 push	 ecx
  032c2	8b 95 54 fc ff
	ff		 mov	 edx, DWORD PTR _baldricView$144264[ebp]
  032c8	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  032ce	52		 push	 edx
  032cf	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  032d4	83 c4 24	 add	 esp, 36			; 00000024H
$L144408:

; 1217 : 
; 1218 : 					if ( combatAction ) {

  032d7	83 bd 98 fc ff
	ff 00		 cmp	 DWORD PTR _combatAction$144319[ebp], 0
  032de	74 56		 je	 SHORT $L144411

; 1219 : 						if ( weaponView != -1 )

  032e0	83 bd 58 fc ff
	ff ff		 cmp	 DWORD PTR _weaponView$144268[ebp], -1
  032e7	74 4d		 je	 SHORT $L144411

; 1220 : 							DrawView ( weaponView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  032e9	6a 01		 push	 1
  032eb	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  032f1	50		 push	 eax
  032f2	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  032f8	51		 push	 ecx
  032f9	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  032fc	52		 push	 edx
  032fd	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03300	50		 push	 eax
  03301	51		 push	 ecx
  03302	8b cc		 mov	 ecx, esp
  03304	89 a5 30 f9 ff
	ff		 mov	 DWORD PTR $T150753[ebp], esp
  0330a	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0330d	52		 push	 edx
  0330e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03313	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03319	50		 push	 eax
  0331a	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03320	51		 push	 ecx
  03321	8b 95 58 fc ff
	ff		 mov	 edx, DWORD PTR _weaponView$144268[ebp]
  03327	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  0332d	52		 push	 edx
  0332e	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03333	83 c4 24	 add	 esp, 36			; 00000024H
$L144411:

; 1222 : 
; 1223 : 					if ( shieldAction ) {

  03336	83 bd 4c fc ff
	ff 00		 cmp	 DWORD PTR _shieldAction$144320[ebp], 0
  0333d	74 56		 je	 SHORT $L144414

; 1224 : 						if ( shieldView != -1 )

  0333f	83 bd a0 fc ff
	ff ff		 cmp	 DWORD PTR _shieldView$144269[ebp], -1
  03346	74 4d		 je	 SHORT $L144414

; 1225 : 							DrawView ( shieldView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03348	6a 01		 push	 1
  0334a	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03350	50		 push	 eax
  03351	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03357	51		 push	 ecx
  03358	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0335b	52		 push	 edx
  0335c	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0335f	50		 push	 eax
  03360	51		 push	 ecx
  03361	8b cc		 mov	 ecx, esp
  03363	89 a5 2c f9 ff
	ff		 mov	 DWORD PTR $T150754[ebp], esp
  03369	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0336c	52		 push	 edx
  0336d	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03372	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03378	50		 push	 eax
  03379	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  0337f	51		 push	 ecx
  03380	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR _shieldView$144269[ebp]
  03386	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  0338c	52		 push	 edx
  0338d	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03392	83 c4 24	 add	 esp, 36			; 00000024H
$L144414:

; 1228 : 
; 1229 : 				if ( GetNumLoops ( resMgr->Get ( MemResView, view + action ) ) > 8 ) {

  03395	6a 00		 push	 0
  03397	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _view$144255[ebp]
  0339d	03 85 94 fc ff
	ff		 add	 eax, DWORD PTR _action$144258[ebp]
  033a3	50		 push	 eax
  033a4	6a 00		 push	 0
  033a6	8d 8d 24 f9 ff
	ff		 lea	 ecx, DWORD PTR $T150756[ebp]
  033ac	51		 push	 ecx
  033ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  033b3	8b 02		 mov	 eax, DWORD PTR [edx]
  033b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  033bb	ff 50 20	 call	 DWORD PTR [eax+32]
  033be	51		 push	 ecx
  033bf	8b cc		 mov	 ecx, esp
  033c1	89 a5 28 f9 ff
	ff		 mov	 DWORD PTR $T150755[ebp], esp
  033c7	50		 push	 eax
  033c8	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  033cd	e8 00 00 00 00	 call	 ?GetNumLoops@@YAHVMemID@@@Z ; GetNumLoops
  033d2	83 c4 04	 add	 esp, 4
  033d5	83 f8 08	 cmp	 eax, 8
  033d8	0f 8e 3f 06 00
	00		 jle	 $L144457

; 1230 : 					loop += 4;

  033de	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  033e4	83 c1 04	 add	 ecx, 4
  033e7	89 8d 90 fc ff
	ff		 mov	 DWORD PTR _loop$144256[ebp], ecx

; 1231 : 
; 1232 : 					DrawView ( view + action, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  033ed	6a 01		 push	 1
  033ef	8b 95 70 fc ff
	ff		 mov	 edx, DWORD PTR _originY$144289[ebp]
  033f5	52		 push	 edx
  033f6	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _originX$144288[ebp]
  033fc	50		 push	 eax
  033fd	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  03400	51		 push	 ecx
  03401	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  03404	52		 push	 edx
  03405	51		 push	 ecx
  03406	8b cc		 mov	 ecx, esp
  03408	89 a5 20 f9 ff
	ff		 mov	 DWORD PTR $T150757[ebp], esp
  0340e	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  03411	50		 push	 eax
  03412	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03417	8b 8d 8c fc ff
	ff		 mov	 ecx, DWORD PTR _cel$144257[ebp]
  0341d	51		 push	 ecx
  0341e	8b 95 90 fc ff
	ff		 mov	 edx, DWORD PTR _loop$144256[ebp]
  03424	52		 push	 edx
  03425	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _view$144255[ebp]
  0342b	03 85 94 fc ff
	ff		 add	 eax, DWORD PTR _action$144258[ebp]
  03431	50		 push	 eax
  03432	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03437	83 c4 24	 add	 esp, 36			; 00000024H

; 1233 : 
; 1234 : 					// if there is no robe, draw it all
; 1235 : 					if ( robeView == -1 ) {

  0343a	83 bd 44 fc ff
	ff ff		 cmp	 DWORD PTR _robeView$144265[ebp], -1
  03441	0f 85 73 03 00
	00		 jne	 $L144420

; 1236 : 						if ( pantsView != -1 ) 

  03447	83 bd ac fc ff
	ff ff		 cmp	 DWORD PTR _pantsView$144260[ebp], -1
  0344e	74 4d		 je	 SHORT $L144421

; 1237 : 							DrawView ( pantsView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03450	6a 01		 push	 1
  03452	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR _originY$144289[ebp]
  03458	51		 push	 ecx
  03459	8b 95 a4 fc ff
	ff		 mov	 edx, DWORD PTR _originX$144288[ebp]
  0345f	52		 push	 edx
  03460	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  03463	50		 push	 eax
  03464	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  03467	51		 push	 ecx
  03468	51		 push	 ecx
  03469	8b cc		 mov	 ecx, esp
  0346b	89 a5 1c f9 ff
	ff		 mov	 DWORD PTR $T150758[ebp], esp
  03471	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03474	52		 push	 edx
  03475	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0347a	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03480	50		 push	 eax
  03481	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03487	51		 push	 ecx
  03488	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR _pantsView$144260[ebp]
  0348e	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03494	52		 push	 edx
  03495	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0349a	83 c4 24	 add	 esp, 36			; 00000024H
$L144421:

; 1238 : 
; 1239 : 						if ( shoesView != -1 ) 

  0349d	83 bd c4 fc ff
	ff ff		 cmp	 DWORD PTR _shoesView$144261[ebp], -1
  034a4	74 4d		 je	 SHORT $L144423

; 1240 : 							DrawView ( shoesView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  034a6	6a 01		 push	 1
  034a8	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  034ae	50		 push	 eax
  034af	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  034b5	51		 push	 ecx
  034b6	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  034b9	52		 push	 edx
  034ba	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  034bd	50		 push	 eax
  034be	51		 push	 ecx
  034bf	8b cc		 mov	 ecx, esp
  034c1	89 a5 18 f9 ff
	ff		 mov	 DWORD PTR $T150759[ebp], esp
  034c7	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  034ca	52		 push	 edx
  034cb	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  034d0	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  034d6	50		 push	 eax
  034d7	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  034dd	51		 push	 ecx
  034de	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _shoesView$144261[ebp]
  034e4	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  034ea	52		 push	 edx
  034eb	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  034f0	83 c4 24	 add	 esp, 36			; 00000024H
$L144423:

; 1241 : 
; 1242 : 						if ( skirtView != -1 ) 

  034f3	83 bd 60 fc ff
	ff ff		 cmp	 DWORD PTR _skirtView$144267[ebp], -1
  034fa	74 4d		 je	 SHORT $L144425

; 1243 : 							DrawView ( skirtView + action, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  034fc	6a 01		 push	 1
  034fe	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03504	50		 push	 eax
  03505	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  0350b	51		 push	 ecx
  0350c	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0350f	52		 push	 edx
  03510	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03513	50		 push	 eax
  03514	51		 push	 ecx
  03515	8b cc		 mov	 ecx, esp
  03517	89 a5 14 f9 ff
	ff		 mov	 DWORD PTR $T150760[ebp], esp
  0351d	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03520	52		 push	 edx
  03521	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03526	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  0352c	50		 push	 eax
  0352d	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03533	51		 push	 ecx
  03534	8b 95 60 fc ff
	ff		 mov	 edx, DWORD PTR _skirtView$144267[ebp]
  0353a	03 95 94 fc ff
	ff		 add	 edx, DWORD PTR _action$144258[ebp]
  03540	52		 push	 edx
  03541	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03546	83 c4 24	 add	 esp, 36			; 00000024H
$L144425:

; 1244 : 
; 1245 : 						if ( shirtView != -1 ) 

  03549	83 bd a8 fc ff
	ff ff		 cmp	 DWORD PTR _shirtView$144259[ebp], -1
  03550	74 4d		 je	 SHORT $L144427

; 1246 : 							DrawView ( shirtView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03552	6a 01		 push	 1
  03554	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  0355a	50		 push	 eax
  0355b	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03561	51		 push	 ecx
  03562	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03565	52		 push	 edx
  03566	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03569	50		 push	 eax
  0356a	51		 push	 ecx
  0356b	8b cc		 mov	 ecx, esp
  0356d	89 a5 10 f9 ff
	ff		 mov	 DWORD PTR $T150761[ebp], esp
  03573	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03576	52		 push	 edx
  03577	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0357c	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03582	50		 push	 eax
  03583	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03589	51		 push	 ecx
  0358a	8b 95 a8 fc ff
	ff		 mov	 edx, DWORD PTR _shirtView$144259[ebp]
  03590	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03596	52		 push	 edx
  03597	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0359c	83 c4 24	 add	 esp, 36			; 00000024H
$L144427:

; 1247 : 
; 1248 : 						if ( wristView != -1 ) 

  0359f	83 bd 40 fc ff
	ff ff		 cmp	 DWORD PTR _wristView$144263[ebp], -1
  035a6	74 4d		 je	 SHORT $L144429

; 1249 : 							DrawView ( wristView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  035a8	6a 01		 push	 1
  035aa	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  035b0	50		 push	 eax
  035b1	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  035b7	51		 push	 ecx
  035b8	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  035bb	52		 push	 edx
  035bc	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  035bf	50		 push	 eax
  035c0	51		 push	 ecx
  035c1	8b cc		 mov	 ecx, esp
  035c3	89 a5 0c f9 ff
	ff		 mov	 DWORD PTR $T150762[ebp], esp
  035c9	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  035cc	52		 push	 edx
  035cd	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  035d2	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  035d8	50		 push	 eax
  035d9	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  035df	51		 push	 ecx
  035e0	8b 95 40 fc ff
	ff		 mov	 edx, DWORD PTR _wristView$144263[ebp]
  035e6	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  035ec	52		 push	 edx
  035ed	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  035f2	83 c4 24	 add	 esp, 36			; 00000024H
$L144429:

; 1250 : 
; 1251 : 						if ( cowlView != -1 ) 

  035f5	83 bd 88 fc ff
	ff ff		 cmp	 DWORD PTR _cowlView$144266[ebp], -1
  035fc	74 4d		 je	 SHORT $L144431

; 1252 : 							DrawView ( cowlView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  035fe	6a 01		 push	 1
  03600	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03606	50		 push	 eax
  03607	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  0360d	51		 push	 ecx
  0360e	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03611	52		 push	 edx
  03612	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03615	50		 push	 eax
  03616	51		 push	 ecx
  03617	8b cc		 mov	 ecx, esp
  03619	89 a5 08 f9 ff
	ff		 mov	 DWORD PTR $T150763[ebp], esp
  0361f	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03622	52		 push	 edx
  03623	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03628	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  0362e	50		 push	 eax
  0362f	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03635	51		 push	 ecx
  03636	8b 95 88 fc ff
	ff		 mov	 edx, DWORD PTR _cowlView$144266[ebp]
  0363c	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03642	52		 push	 edx
  03643	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03648	83 c4 24	 add	 esp, 36			; 00000024H
$L144431:

; 1253 : 
; 1254 : 						if ( beltView != -1 ) 

  0364b	83 bd 50 fc ff
	ff ff		 cmp	 DWORD PTR _beltView$144262[ebp], -1
  03652	74 4d		 je	 SHORT $L144433

; 1255 : 							DrawView ( beltView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03654	6a 01		 push	 1
  03656	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  0365c	50		 push	 eax
  0365d	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03663	51		 push	 ecx
  03664	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03667	52		 push	 edx
  03668	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0366b	50		 push	 eax
  0366c	51		 push	 ecx
  0366d	8b cc		 mov	 ecx, esp
  0366f	89 a5 04 f9 ff
	ff		 mov	 DWORD PTR $T150764[ebp], esp
  03675	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03678	52		 push	 edx
  03679	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0367e	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03684	50		 push	 eax
  03685	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  0368b	51		 push	 ecx
  0368c	8b 95 50 fc ff
	ff		 mov	 edx, DWORD PTR _beltView$144262[ebp]
  03692	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03698	52		 push	 edx
  03699	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0369e	83 c4 24	 add	 esp, 36			; 00000024H
$L144433:

; 1256 : 
; 1257 : 						if ( baldricView != -1 ) 

  036a1	83 bd 54 fc ff
	ff ff		 cmp	 DWORD PTR _baldricView$144264[ebp], -1
  036a8	74 4d		 je	 SHORT $L144435

; 1258 : 							DrawView ( baldricView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  036aa	6a 01		 push	 1
  036ac	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  036b2	50		 push	 eax
  036b3	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  036b9	51		 push	 ecx
  036ba	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  036bd	52		 push	 edx
  036be	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  036c1	50		 push	 eax
  036c2	51		 push	 ecx
  036c3	8b cc		 mov	 ecx, esp
  036c5	89 a5 00 f9 ff
	ff		 mov	 DWORD PTR $T150765[ebp], esp
  036cb	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  036ce	52		 push	 edx
  036cf	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  036d4	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  036da	50		 push	 eax
  036db	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  036e1	51		 push	 ecx
  036e2	8b 95 54 fc ff
	ff		 mov	 edx, DWORD PTR _baldricView$144264[ebp]
  036e8	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  036ee	52		 push	 edx
  036ef	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  036f4	83 c4 24	 add	 esp, 36			; 00000024H
$L144435:

; 1259 : 
; 1260 : 						if ( combatAction ) {

  036f7	83 bd 98 fc ff
	ff 00		 cmp	 DWORD PTR _combatAction$144319[ebp], 0
  036fe	74 56		 je	 SHORT $L144438

; 1261 : 							if ( weaponView != -1 )

  03700	83 bd 58 fc ff
	ff ff		 cmp	 DWORD PTR _weaponView$144268[ebp], -1
  03707	74 4d		 je	 SHORT $L144438

; 1262 : 								DrawView ( weaponView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03709	6a 01		 push	 1
  0370b	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03711	50		 push	 eax
  03712	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03718	51		 push	 ecx
  03719	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0371c	52		 push	 edx
  0371d	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03720	50		 push	 eax
  03721	51		 push	 ecx
  03722	8b cc		 mov	 ecx, esp
  03724	89 a5 fc f8 ff
	ff		 mov	 DWORD PTR $T150766[ebp], esp
  0372a	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0372d	52		 push	 edx
  0372e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03733	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03739	50		 push	 eax
  0373a	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03740	51		 push	 ecx
  03741	8b 95 58 fc ff
	ff		 mov	 edx, DWORD PTR _weaponView$144268[ebp]
  03747	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  0374d	52		 push	 edx
  0374e	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03753	83 c4 24	 add	 esp, 36			; 00000024H
$L144438:

; 1264 : 
; 1265 : 						if ( shieldAction ) {

  03756	83 bd 4c fc ff
	ff 00		 cmp	 DWORD PTR _shieldAction$144320[ebp], 0
  0375d	74 56		 je	 SHORT $L144441

; 1266 : 							if ( shieldView != -1 )

  0375f	83 bd a0 fc ff
	ff ff		 cmp	 DWORD PTR _shieldView$144269[ebp], -1
  03766	74 4d		 je	 SHORT $L144441

; 1267 : 								DrawView ( shieldView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03768	6a 01		 push	 1
  0376a	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03770	50		 push	 eax
  03771	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03777	51		 push	 ecx
  03778	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0377b	52		 push	 edx
  0377c	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0377f	50		 push	 eax
  03780	51		 push	 ecx
  03781	8b cc		 mov	 ecx, esp
  03783	89 a5 f8 f8 ff
	ff		 mov	 DWORD PTR $T150767[ebp], esp
  03789	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0378c	52		 push	 edx
  0378d	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03792	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03798	50		 push	 eax
  03799	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  0379f	51		 push	 ecx
  037a0	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR _shieldView$144269[ebp]
  037a6	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  037ac	52		 push	 edx
  037ad	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  037b2	83 c4 24	 add	 esp, 36			; 00000024H
$L144441:

; 1269 : 					} else {

  037b5	e9 63 02 00 00	 jmp	 $L144457
$L144420:

; 1270 : 						if ( shoesView != -1 ) 

  037ba	83 bd c4 fc ff
	ff ff		 cmp	 DWORD PTR _shoesView$144261[ebp], -1
  037c1	74 4d		 je	 SHORT $L144444

; 1271 : 							DrawView ( shoesView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  037c3	6a 01		 push	 1
  037c5	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  037cb	50		 push	 eax
  037cc	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  037d2	51		 push	 ecx
  037d3	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  037d6	52		 push	 edx
  037d7	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  037da	50		 push	 eax
  037db	51		 push	 ecx
  037dc	8b cc		 mov	 ecx, esp
  037de	89 a5 f4 f8 ff
	ff		 mov	 DWORD PTR $T150768[ebp], esp
  037e4	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  037e7	52		 push	 edx
  037e8	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  037ed	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  037f3	50		 push	 eax
  037f4	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  037fa	51		 push	 ecx
  037fb	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _shoesView$144261[ebp]
  03801	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03807	52		 push	 edx
  03808	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0380d	83 c4 24	 add	 esp, 36			; 00000024H
$L144444:

; 1272 : 
; 1273 : 						DrawView ( robeView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03810	6a 01		 push	 1
  03812	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03818	50		 push	 eax
  03819	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  0381f	51		 push	 ecx
  03820	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03823	52		 push	 edx
  03824	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03827	50		 push	 eax
  03828	51		 push	 ecx
  03829	8b cc		 mov	 ecx, esp
  0382b	89 a5 f0 f8 ff
	ff		 mov	 DWORD PTR $T150769[ebp], esp
  03831	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03834	52		 push	 edx
  03835	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0383a	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03840	50		 push	 eax
  03841	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03847	51		 push	 ecx
  03848	8b 95 44 fc ff
	ff		 mov	 edx, DWORD PTR _robeView$144265[ebp]
  0384e	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03854	52		 push	 edx
  03855	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0385a	83 c4 24	 add	 esp, 36			; 00000024H

; 1274 : 
; 1275 : 						if ( cowlView != -1 ) 

  0385d	83 bd 88 fc ff
	ff ff		 cmp	 DWORD PTR _cowlView$144266[ebp], -1
  03864	74 4d		 je	 SHORT $L144447

; 1276 : 							DrawView ( cowlView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03866	6a 01		 push	 1
  03868	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  0386e	50		 push	 eax
  0386f	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03875	51		 push	 ecx
  03876	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03879	52		 push	 edx
  0387a	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0387d	50		 push	 eax
  0387e	51		 push	 ecx
  0387f	8b cc		 mov	 ecx, esp
  03881	89 a5 ec f8 ff
	ff		 mov	 DWORD PTR $T150770[ebp], esp
  03887	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0388a	52		 push	 edx
  0388b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03890	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03896	50		 push	 eax
  03897	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  0389d	51		 push	 ecx
  0389e	8b 95 88 fc ff
	ff		 mov	 edx, DWORD PTR _cowlView$144266[ebp]
  038a4	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  038aa	52		 push	 edx
  038ab	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  038b0	83 c4 24	 add	 esp, 36			; 00000024H
$L144447:

; 1277 : 
; 1278 : 						if ( beltView != -1 ) 

  038b3	83 bd 50 fc ff
	ff ff		 cmp	 DWORD PTR _beltView$144262[ebp], -1
  038ba	74 4d		 je	 SHORT $L144449

; 1279 : 							DrawView ( beltView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  038bc	6a 01		 push	 1
  038be	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  038c4	50		 push	 eax
  038c5	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  038cb	51		 push	 ecx
  038cc	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  038cf	52		 push	 edx
  038d0	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  038d3	50		 push	 eax
  038d4	51		 push	 ecx
  038d5	8b cc		 mov	 ecx, esp
  038d7	89 a5 e8 f8 ff
	ff		 mov	 DWORD PTR $T150771[ebp], esp
  038dd	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  038e0	52		 push	 edx
  038e1	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  038e6	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  038ec	50		 push	 eax
  038ed	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  038f3	51		 push	 ecx
  038f4	8b 95 50 fc ff
	ff		 mov	 edx, DWORD PTR _beltView$144262[ebp]
  038fa	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03900	52		 push	 edx
  03901	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03906	83 c4 24	 add	 esp, 36			; 00000024H
$L144449:

; 1280 : 
; 1281 : 						if ( baldricView != -1 ) 

  03909	83 bd 54 fc ff
	ff ff		 cmp	 DWORD PTR _baldricView$144264[ebp], -1
  03910	74 4d		 je	 SHORT $L144451

; 1282 : 							DrawView ( baldricView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03912	6a 01		 push	 1
  03914	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  0391a	50		 push	 eax
  0391b	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03921	51		 push	 ecx
  03922	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03925	52		 push	 edx
  03926	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03929	50		 push	 eax
  0392a	51		 push	 ecx
  0392b	8b cc		 mov	 ecx, esp
  0392d	89 a5 e4 f8 ff
	ff		 mov	 DWORD PTR $T150772[ebp], esp
  03933	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03936	52		 push	 edx
  03937	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0393c	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03942	50		 push	 eax
  03943	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03949	51		 push	 ecx
  0394a	8b 95 54 fc ff
	ff		 mov	 edx, DWORD PTR _baldricView$144264[ebp]
  03950	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03956	52		 push	 edx
  03957	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0395c	83 c4 24	 add	 esp, 36			; 00000024H
$L144451:

; 1283 : 
; 1284 : 						if ( combatAction ) {

  0395f	83 bd 98 fc ff
	ff 00		 cmp	 DWORD PTR _combatAction$144319[ebp], 0
  03966	74 56		 je	 SHORT $L144454

; 1285 : 							if ( weaponView != -1 )

  03968	83 bd 58 fc ff
	ff ff		 cmp	 DWORD PTR _weaponView$144268[ebp], -1
  0396f	74 4d		 je	 SHORT $L144454

; 1286 : 								DrawView ( weaponView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  03971	6a 01		 push	 1
  03973	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  03979	50		 push	 eax
  0397a	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  03980	51		 push	 ecx
  03981	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03984	52		 push	 edx
  03985	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03988	50		 push	 eax
  03989	51		 push	 ecx
  0398a	8b cc		 mov	 ecx, esp
  0398c	89 a5 e0 f8 ff
	ff		 mov	 DWORD PTR $T150773[ebp], esp
  03992	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03995	52		 push	 edx
  03996	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0399b	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  039a1	50		 push	 eax
  039a2	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  039a8	51		 push	 ecx
  039a9	8b 95 58 fc ff
	ff		 mov	 edx, DWORD PTR _weaponView$144268[ebp]
  039af	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  039b5	52		 push	 edx
  039b6	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  039bb	83 c4 24	 add	 esp, 36			; 00000024H
$L144454:

; 1288 : 
; 1289 : 						if ( shieldAction ) {

  039be	83 bd 4c fc ff
	ff 00		 cmp	 DWORD PTR _shieldAction$144320[ebp], 0
  039c5	74 56		 je	 SHORT $L144457

; 1290 : 							if ( shieldView != -1 )

  039c7	83 bd a0 fc ff
	ff ff		 cmp	 DWORD PTR _shieldView$144269[ebp], -1
  039ce	74 4d		 je	 SHORT $L144457

; 1291 : 								DrawView ( shieldView + actionOffset, loop, cel, BM, BMWidth, BMHeight, originX, originY );

  039d0	6a 01		 push	 1
  039d2	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR _originY$144289[ebp]
  039d8	50		 push	 eax
  039d9	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _originX$144288[ebp]
  039df	51		 push	 ecx
  039e0	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  039e3	52		 push	 edx
  039e4	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  039e7	50		 push	 eax
  039e8	51		 push	 ecx
  039e9	8b cc		 mov	 ecx, esp
  039eb	89 a5 dc f8 ff
	ff		 mov	 DWORD PTR $T150774[ebp], esp
  039f1	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  039f4	52		 push	 edx
  039f5	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  039fa	8b 85 8c fc ff
	ff		 mov	 eax, DWORD PTR _cel$144257[ebp]
  03a00	50		 push	 eax
  03a01	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _loop$144256[ebp]
  03a07	51		 push	 ecx
  03a08	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR _shieldView$144269[ebp]
  03a0e	03 95 84 fc ff
	ff		 add	 edx, DWORD PTR _actionOffset$144285[ebp]
  03a14	52		 push	 edx
  03a15	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03a1a	83 c4 24	 add	 esp, 36			; 00000024H
$L144457:

; 1296 : 
; 1297 : 			// remap the bitmap
; 1298 : 			if ( normalClut ) {

  03a1d	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR _normalClut$144282[ebp]
  03a23	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03a28	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  03a2d	85 c0		 test	 eax, eax
  03a2f	0f 84 c0 01 00
	00		 je	 $L144479

; 1299 : 				if ( frozenClut ) {

  03a35	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR _frozenClut$144276[ebp]
  03a3b	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03a40	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  03a45	85 c0		 test	 eax, eax
  03a47	0f 84 87 00 00
	00		 je	 $L144460

; 1300 : 					if ( !frozenClut.IsValid() )

  03a4d	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR _frozenClut$144276[ebp]
  03a53	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  03a58	85 c0		 test	 eax, eax
  03a5a	75 13		 jne	 SHORT $L144461

; 1301 : 						msgMgr->Fatal ( "frozenClut handle is invalid on call to bGenerate" );

  03a5c	68 00 00 00 00	 push	 OFFSET FLAT:$SG144462
  03a61	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03a66	50		 push	 eax
  03a67	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03a6c	83 c4 08	 add	 esp, 8
$L144461:

; 1302 : 
; 1303 : 					if ( !((ObjectID)frozenClut).IsObject() )

  03a6f	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR _frozenClut$144276[ebp]
  03a75	51		 push	 ecx
  03a76	8d 8d d8 f8 ff
	ff		 lea	 ecx, DWORD PTR $T150775[ebp]
  03a7c	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  03a81	8b c8		 mov	 ecx, eax
  03a83	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  03a88	85 c0		 test	 eax, eax
  03a8a	75 14		 jne	 SHORT $L144465

; 1304 : 						msgMgr->Fatal ( "frozenClut object is invalid on call to bGenerate" );

  03a8c	68 00 00 00 00	 push	 OFFSET FLAT:$SG144466
  03a91	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03a97	52		 push	 edx
  03a98	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03a9d	83 c4 08	 add	 esp, 8
$L144465:

; 1305 : 
; 1306 : 					RemapBitmap ( BM, frozenClut );

  03aa0	51		 push	 ecx
  03aa1	8b cc		 mov	 ecx, esp
  03aa3	89 a5 d4 f8 ff
	ff		 mov	 DWORD PTR $T150776[ebp], esp
  03aa9	8d 85 5c fc ff
	ff		 lea	 eax, DWORD PTR _frozenClut$144276[ebp]
  03aaf	50		 push	 eax
  03ab0	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  03ab5	51		 push	 ecx
  03ab6	8b cc		 mov	 ecx, esp
  03ab8	89 a5 d0 f8 ff
	ff		 mov	 DWORD PTR $T150777[ebp], esp
  03abe	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03ac1	52		 push	 edx
  03ac2	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03ac7	e8 00 00 00 00	 call	 ?RemapBitmap@@YAXVMemID@@VObjectID@@@Z ; RemapBitmap
  03acc	83 c4 08	 add	 esp, 8

; 1308 : 
; 1309 : 				else if ( invisibleClut ) {

  03acf	e9 21 01 00 00	 jmp	 $L144479
$L144460:
  03ad4	8d 8d b0 fc ff
	ff		 lea	 ecx, DWORD PTR _invisibleClut$144279[ebp]
  03ada	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03adf	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  03ae4	85 c0		 test	 eax, eax
  03ae6	0f 84 87 00 00
	00		 je	 $L144470

; 1310 : 					if ( !invisibleClut.IsValid() )

  03aec	8d 8d b0 fc ff
	ff		 lea	 ecx, DWORD PTR _invisibleClut$144279[ebp]
  03af2	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  03af7	85 c0		 test	 eax, eax
  03af9	75 13		 jne	 SHORT $L144471

; 1311 : 						msgMgr->Fatal ( "invisibleClut handle is invalid on call to bGenerate" );

  03afb	68 00 00 00 00	 push	 OFFSET FLAT:$SG144472
  03b00	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03b05	50		 push	 eax
  03b06	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03b0b	83 c4 08	 add	 esp, 8
$L144471:

; 1312 : 
; 1313 : 					if ( !((ObjectID)invisibleClut).IsObject() )

  03b0e	8d 8d b0 fc ff
	ff		 lea	 ecx, DWORD PTR _invisibleClut$144279[ebp]
  03b14	51		 push	 ecx
  03b15	8d 8d cc f8 ff
	ff		 lea	 ecx, DWORD PTR $T150778[ebp]
  03b1b	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  03b20	8b c8		 mov	 ecx, eax
  03b22	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  03b27	85 c0		 test	 eax, eax
  03b29	75 14		 jne	 SHORT $L144475

; 1314 : 						msgMgr->Fatal ( "invisibleClut object is invalid on call to bGenerate" );

  03b2b	68 00 00 00 00	 push	 OFFSET FLAT:$SG144476
  03b30	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03b36	52		 push	 edx
  03b37	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03b3c	83 c4 08	 add	 esp, 8
$L144475:

; 1315 : 
; 1316 : 					RemapBitmap ( BM, invisibleClut );

  03b3f	51		 push	 ecx
  03b40	8b cc		 mov	 ecx, esp
  03b42	89 a5 c8 f8 ff
	ff		 mov	 DWORD PTR $T150779[ebp], esp
  03b48	8d 85 b0 fc ff
	ff		 lea	 eax, DWORD PTR _invisibleClut$144279[ebp]
  03b4e	50		 push	 eax
  03b4f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  03b54	51		 push	 ecx
  03b55	8b cc		 mov	 ecx, esp
  03b57	89 a5 c4 f8 ff
	ff		 mov	 DWORD PTR $T150780[ebp], esp
  03b5d	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03b60	52		 push	 edx
  03b61	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03b66	e8 00 00 00 00	 call	 ?RemapBitmap@@YAXVMemID@@VObjectID@@@Z ; RemapBitmap
  03b6b	83 c4 08	 add	 esp, 8

; 1318 : 
; 1319 : 				else {

  03b6e	e9 82 00 00 00	 jmp	 $L144479
$L144470:

; 1320 : 					if ( !normalClut.IsValid() )

  03b73	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR _normalClut$144282[ebp]
  03b79	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  03b7e	85 c0		 test	 eax, eax
  03b80	75 13		 jne	 SHORT $L144480

; 1321 : 						msgMgr->Fatal ( "normalClut handle is invalid on call to bGenerate" );

  03b82	68 00 00 00 00	 push	 OFFSET FLAT:$SG144481
  03b87	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03b8c	50		 push	 eax
  03b8d	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03b92	83 c4 08	 add	 esp, 8
$L144480:

; 1322 : 
; 1323 : 					if ( !((ObjectID)normalClut).IsObject() )

  03b95	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR _normalClut$144282[ebp]
  03b9b	51		 push	 ecx
  03b9c	8d 8d c0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T150781[ebp]
  03ba2	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  03ba7	8b c8		 mov	 ecx, eax
  03ba9	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  03bae	85 c0		 test	 eax, eax
  03bb0	75 14		 jne	 SHORT $L144484

; 1324 : 						msgMgr->Fatal ( "normalClut object is invalid on call to bGenerate" );

  03bb2	68 00 00 00 00	 push	 OFFSET FLAT:$SG144485
  03bb7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  03bbd	52		 push	 edx
  03bbe	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  03bc3	83 c4 08	 add	 esp, 8
$L144484:

; 1325 : 
; 1326 : 					RemapBitmap ( BM, normalClut );

  03bc6	51		 push	 ecx
  03bc7	8b cc		 mov	 ecx, esp
  03bc9	89 a5 bc f8 ff
	ff		 mov	 DWORD PTR $T150782[ebp], esp
  03bcf	8d 85 80 fc ff
	ff		 lea	 eax, DWORD PTR _normalClut$144282[ebp]
  03bd5	50		 push	 eax
  03bd6	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  03bdb	51		 push	 ecx
  03bdc	8b cc		 mov	 ecx, esp
  03bde	89 a5 b8 f8 ff
	ff		 mov	 DWORD PTR $T150783[ebp], esp
  03be4	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03be7	52		 push	 edx
  03be8	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03bed	e8 00 00 00 00	 call	 ?RemapBitmap@@YAXVMemID@@VObjectID@@@Z ; RemapBitmap
  03bf2	83 c4 08	 add	 esp, 8
$L144479:

; 1329 : 
; 1330 : 			ValidateBitmap ( BM );

  03bf5	51		 push	 ecx
  03bf6	8b cc		 mov	 ecx, esp
  03bf8	89 a5 b4 f8 ff
	ff		 mov	 DWORD PTR $T150784[ebp], esp
  03bfe	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  03c01	50		 push	 eax
  03c02	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03c07	e8 00 00 00 00	 call	 ?ValidateBitmap@@YAXVMemID@@@Z ; ValidateBitmap
  03c0c	83 c4 04	 add	 esp, 4

; 1331 : 			pm.acc = BM;

  03c0f	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  03c12	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03c17	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  03c1c	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1332 : 		}

  03c21	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03c28	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  03c2e	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView

; 1333 : 
; 1334 : 		break;

  03c33	e9 a3 0e 00 00	 jmp	 $L144030
$L144489:

; 1337 : 			int aWhatAction = arg(2);

  03c38	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03c3b	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  03c3f	89 95 70 fb ff
	ff		 mov	 DWORD PTR _aWhatAction$144490[ebp], edx

; 1338 : 			int aLoop = arg(3);

  03c45	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03c48	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  03c4c	89 8d 54 fb ff
	ff		 mov	 DWORD PTR _aLoop$144491[ebp], ecx

; 1339 : 			int bShowFeatures = arg(4);

  03c52	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03c55	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  03c59	89 85 58 fb ff
	ff		 mov	 DWORD PTR _bShowFeatures$144492[ebp], eax

; 1340 : 			int pHelmetView = arg(5);

  03c5f	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03c62	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  03c66	89 95 50 fb ff
	ff		 mov	 DWORD PTR _pHelmetView$144493[ebp], edx

; 1341 : 			CSCI_BHead head( arg(6) );

  03c6c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03c6f	66 8b 48 0c	 mov	 cx, WORD PTR [eax+12]
  03c73	51		 push	 ecx
  03c74	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  03c7a	e8 00 00 00 00	 call	 ??0CSCI_BHead@@QAE@G@Z	; CSCI_BHead::CSCI_BHead

; 1342 : 			MemID headOrigin = (MemID)arg(7);

  03c7f	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03c82	66 8b 42 0e	 mov	 ax, WORD PTR [edx+14]
  03c86	50		 push	 eax
  03c87	8d 8d b0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T150785[ebp]
  03c8d	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03c92	50		 push	 eax
  03c93	8d 8d 5c fb ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144495[ebp]
  03c99	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 1343 : 
; 1344 : 			int tView;
; 1345 : 
; 1346 : 			CelObjView headView ( ( head.get_pHeadView() + aWhatAction ) , aLoop, 0 );

  03c9e	6a 00		 push	 0
  03ca0	8b 8d 54 fb ff
	ff		 mov	 ecx, DWORD PTR _aLoop$144491[ebp]
  03ca6	51		 push	 ecx
  03ca7	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  03cad	e8 00 00 00 00	 call	 ?get_pHeadView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pHeadView
  03cb2	0f bf d0	 movsx	 edx, ax
  03cb5	03 95 70 fb ff
	ff		 add	 edx, DWORD PTR _aWhatAction$144490[ebp]
  03cbb	52		 push	 edx
  03cbc	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03cc2	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  03cc7	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9

; 1347 : 
; 1348 : 			int originX = headView.XOrg();

  03cce	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03cd4	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  03cd9	89 85 68 fb ff
	ff		 mov	 DWORD PTR _originX$144500[ebp], eax

; 1349 : 			int originY = headView.YOrg();

  03cdf	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03ce5	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  03cea	89 85 60 fb ff
	ff		 mov	 DWORD PTR _originY$144501[ebp], eax

; 1350 : 			
; 1351 : 			// Check for a helmet
; 1352 : 			if ( pHelmetView == -1 ) {

  03cf0	83 bd 50 fb ff
	ff ff		 cmp	 DWORD PTR _pHelmetView$144493[ebp], -1
  03cf7	0f 85 d3 05 00
	00		 jne	 $L144502

; 1353 : 				// No helmet just draw the face.
; 1354 : 
; 1355 : 				BMWidth = headView.Width();

  03cfd	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03d03	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  03d08	89 45 e4	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 1356 : 				BMHeight = headView.Height();

  03d0b	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03d11	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  03d16	89 45 f0	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 1357 : 
; 1358 : 				// create the base bitmap
; 1359 : 				BM.Get ( MemBitmap, BMWidth * (BMHeight + 1) + CELHEADERSIZE );

  03d19	6a 00		 push	 0
  03d1b	6a 00		 push	 0
  03d1d	6a 00		 push	 0
  03d1f	6a 00		 push	 0
  03d21	68 00 02 00 00	 push	 512			; 00000200H
  03d26	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  03d29	83 c0 01	 add	 eax, 1
  03d2c	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  03d2f	0f af c8	 imul	 ecx, eax
  03d32	83 c1 2e	 add	 ecx, 46			; 0000002eH
  03d35	51		 push	 ecx
  03d36	6a 4b		 push	 75			; 0000004bH
  03d38	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  03d3b	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 1360 : 
; 1361 : 				// fill that bitmap in with skip color
; 1362 : 				memset ( (uchar*)memMgr->GetAddr(BM) + CELHEADERSIZE, headView.Skip(), BMWidth * BMHeight );

  03d40	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  03d43	0f af 55 f0	 imul	 edx, DWORD PTR _BMHeight$[ebp]
  03d47	52		 push	 edx
  03d48	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03d4e	e8 00 00 00 00	 call	 ?Skip@CelObj@@QBEEXZ	; CelObj::Skip
  03d53	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  03d58	50		 push	 eax
  03d59	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  03d5c	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  03d61	50		 push	 eax
  03d62	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  03d68	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  03d6d	83 c0 2e	 add	 eax, 46			; 0000002eH
  03d70	50		 push	 eax
  03d71	e8 00 00 00 00	 call	 _memset
  03d76	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1363 : 
; 1364 : 				BuildHeader (
; 1365 : 					BM,
; 1366 : 					BMWidth,
; 1367 : 					BMHeight,
; 1368 : 					headView.Skip(),
; 1369 : 					originX,
; 1370 : 					originY,
; 1371 : 					headView.ResX(),
; 1372 : 					headView.ResY(),
; 1373 : 					0,
; 1374 : 					True
; 1375 : 				);

  03d79	6a 01		 push	 1
  03d7b	6a 00		 push	 0
  03d7d	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03d83	e8 00 00 00 00	 call	 ?ResY@CelObj@@QBEHXZ	; CelObj::ResY
  03d88	50		 push	 eax
  03d89	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03d8f	e8 00 00 00 00	 call	 ?ResX@CelObj@@QBEHXZ	; CelObj::ResX
  03d94	50		 push	 eax
  03d95	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR _originY$144501[ebp]
  03d9b	50		 push	 eax
  03d9c	8b 8d 68 fb ff
	ff		 mov	 ecx, DWORD PTR _originX$144500[ebp]
  03da2	51		 push	 ecx
  03da3	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03da9	e8 00 00 00 00	 call	 ?Skip@CelObj@@QBEEXZ	; CelObj::Skip
  03dae	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  03db3	50		 push	 eax
  03db4	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03db7	52		 push	 edx
  03db8	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03dbb	50		 push	 eax
  03dbc	51		 push	 ecx
  03dbd	8b cc		 mov	 ecx, esp
  03dbf	89 a5 ac f8 ff
	ff		 mov	 DWORD PTR $T150786[ebp], esp
  03dc5	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03dc8	52		 push	 edx
  03dc9	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03dce	e8 00 00 00 00	 call	 ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ; BuildHeader
  03dd3	83 c4 28	 add	 esp, 40			; 00000028H

; 1376 : 
; 1377 : 				if ( ( tView = head.get_pHairView() ) != -1 ) {

  03dd6	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  03ddc	e8 00 00 00 00	 call	 ?get_pHairView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pHairView
  03de1	0f bf c0	 movsx	 eax, ax
  03de4	89 85 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], eax
  03dea	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  03df1	74 60		 je	 SHORT $L144505

; 1378 : 					DrawView ( ( tView + aWhatAction ), aLoop, 1, BM, BMWidth, BMHeight, headView.GetLinkPoint( _WA_LINK_HAIR, 1 ), headView.GetLinkPoint( _WA_LINK_HAIR, 0 ), False );

  03df3	6a 00		 push	 0
  03df5	6a 00		 push	 0
  03df7	6a 03		 push	 3
  03df9	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03dff	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  03e04	0f bf c8	 movsx	 ecx, ax
  03e07	51		 push	 ecx
  03e08	6a 01		 push	 1
  03e0a	6a 03		 push	 3
  03e0c	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03e12	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  03e17	0f bf d0	 movsx	 edx, ax
  03e1a	52		 push	 edx
  03e1b	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  03e1e	50		 push	 eax
  03e1f	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  03e22	51		 push	 ecx
  03e23	51		 push	 ecx
  03e24	8b cc		 mov	 ecx, esp
  03e26	89 a5 a8 f8 ff
	ff		 mov	 DWORD PTR $T150787[ebp], esp
  03e2c	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03e2f	52		 push	 edx
  03e30	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03e35	6a 01		 push	 1
  03e37	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  03e3d	50		 push	 eax
  03e3e	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  03e44	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  03e4a	51		 push	 ecx
  03e4b	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03e50	83 c4 24	 add	 esp, 36			; 00000024H
$L144505:

; 1380 : 
; 1381 : 				DrawView ( ( head.get_pHeadView() + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, originX, originY, True );

  03e53	6a 01		 push	 1
  03e55	8b 95 60 fb ff
	ff		 mov	 edx, DWORD PTR _originY$144501[ebp]
  03e5b	52		 push	 edx
  03e5c	8b 85 68 fb ff
	ff		 mov	 eax, DWORD PTR _originX$144500[ebp]
  03e62	50		 push	 eax
  03e63	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  03e66	51		 push	 ecx
  03e67	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  03e6a	52		 push	 edx
  03e6b	51		 push	 ecx
  03e6c	8b cc		 mov	 ecx, esp
  03e6e	89 a5 a4 f8 ff
	ff		 mov	 DWORD PTR $T150788[ebp], esp
  03e74	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  03e77	50		 push	 eax
  03e78	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03e7d	6a 00		 push	 0
  03e7f	8b 8d 54 fb ff
	ff		 mov	 ecx, DWORD PTR _aLoop$144491[ebp]
  03e85	51		 push	 ecx
  03e86	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  03e8c	e8 00 00 00 00	 call	 ?get_pHeadView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pHeadView
  03e91	0f bf d0	 movsx	 edx, ax
  03e94	03 95 70 fb ff
	ff		 add	 edx, DWORD PTR _aWhatAction$144490[ebp]
  03e9a	52		 push	 edx
  03e9b	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03ea0	83 c4 24	 add	 esp, 36			; 00000024H

; 1382 : 
; 1383 : 				if ( bShowFeatures ) {

  03ea3	83 bd 58 fb ff
	ff 00		 cmp	 DWORD PTR _bShowFeatures$144492[ebp], 0
  03eaa	0f 84 8a 01 00
	00		 je	 $L144513

; 1384 : 					if ( ( tView = head.get_pMouthView() ) != -1 ) {

  03eb0	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  03eb6	e8 00 00 00 00	 call	 ?get_pMouthView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pMouthView
  03ebb	0f bf c0	 movsx	 eax, ax
  03ebe	89 85 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], eax
  03ec4	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  03ecb	74 60		 je	 SHORT $L144509

; 1385 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, headView.GetLinkPoint( _WA_LINK_MOUTH, 1 ), headView.GetLinkPoint( _WA_LINK_MOUTH, 0 ), True );

  03ecd	6a 01		 push	 1
  03ecf	6a 00		 push	 0
  03ed1	6a 02		 push	 2
  03ed3	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03ed9	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  03ede	0f bf c8	 movsx	 ecx, ax
  03ee1	51		 push	 ecx
  03ee2	6a 01		 push	 1
  03ee4	6a 02		 push	 2
  03ee6	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03eec	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  03ef1	0f bf d0	 movsx	 edx, ax
  03ef4	52		 push	 edx
  03ef5	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  03ef8	50		 push	 eax
  03ef9	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  03efc	51		 push	 ecx
  03efd	51		 push	 ecx
  03efe	8b cc		 mov	 ecx, esp
  03f00	89 a5 a0 f8 ff
	ff		 mov	 DWORD PTR $T150789[ebp], esp
  03f06	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03f09	52		 push	 edx
  03f0a	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03f0f	6a 00		 push	 0
  03f11	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  03f17	50		 push	 eax
  03f18	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  03f1e	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  03f24	51		 push	 ecx
  03f25	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03f2a	83 c4 24	 add	 esp, 36			; 00000024H
$L144509:

; 1387 : 
; 1388 : 					if ( ( tView = head.get_pEyeView() ) != -1 ) {

  03f2d	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  03f33	e8 00 00 00 00	 call	 ?get_pEyeView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pEyeView
  03f38	0f bf d0	 movsx	 edx, ax
  03f3b	89 95 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], edx
  03f41	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  03f48	74 60		 je	 SHORT $L144511

; 1389 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, headView.GetLinkPoint( _WA_LINK_EYES, 1 ), headView.GetLinkPoint( _WA_LINK_EYES, 0 ), True );

  03f4a	6a 01		 push	 1
  03f4c	6a 00		 push	 0
  03f4e	6a 03		 push	 3
  03f50	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03f56	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  03f5b	0f bf c0	 movsx	 eax, ax
  03f5e	50		 push	 eax
  03f5f	6a 01		 push	 1
  03f61	6a 03		 push	 3
  03f63	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03f69	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  03f6e	0f bf c8	 movsx	 ecx, ax
  03f71	51		 push	 ecx
  03f72	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  03f75	52		 push	 edx
  03f76	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  03f79	50		 push	 eax
  03f7a	51		 push	 ecx
  03f7b	8b cc		 mov	 ecx, esp
  03f7d	89 a5 9c f8 ff
	ff		 mov	 DWORD PTR $T150790[ebp], esp
  03f83	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  03f86	52		 push	 edx
  03f87	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  03f8c	6a 00		 push	 0
  03f8e	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  03f94	50		 push	 eax
  03f95	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  03f9b	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  03fa1	51		 push	 ecx
  03fa2	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  03fa7	83 c4 24	 add	 esp, 36			; 00000024H
$L144511:

; 1391 : 
; 1392 : 					if ( ( head.get_pRace() == _BH_HUMAN ) && ( ( tView = head.get_pEarView() ) != -1 ) ) {

  03faa	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  03fb0	e8 00 00 00 00	 call	 ?get_pRace@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pRace
  03fb5	0f bf d0	 movsx	 edx, ax
  03fb8	83 fa 01	 cmp	 edx, 1
  03fbb	75 7d		 jne	 SHORT $L144513
  03fbd	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  03fc3	e8 00 00 00 00	 call	 ?get_pEarView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pEarView
  03fc8	0f bf c0	 movsx	 eax, ax
  03fcb	89 85 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], eax
  03fd1	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  03fd8	74 60		 je	 SHORT $L144513

; 1393 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, headView.GetLinkPoint( _WA_LINK_EARS, 1 ), headView.GetLinkPoint( _WA_LINK_EARS, 0 ), True );

  03fda	6a 01		 push	 1
  03fdc	6a 00		 push	 0
  03fde	6a 03		 push	 3
  03fe0	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03fe6	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  03feb	0f bf c8	 movsx	 ecx, ax
  03fee	51		 push	 ecx
  03fef	6a 01		 push	 1
  03ff1	6a 03		 push	 3
  03ff3	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  03ff9	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  03ffe	0f bf d0	 movsx	 edx, ax
  04001	52		 push	 edx
  04002	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  04005	50		 push	 eax
  04006	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  04009	51		 push	 ecx
  0400a	51		 push	 ecx
  0400b	8b cc		 mov	 ecx, esp
  0400d	89 a5 98 f8 ff
	ff		 mov	 DWORD PTR $T150791[ebp], esp
  04013	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  04016	52		 push	 edx
  04017	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0401c	6a 00		 push	 0
  0401e	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  04024	50		 push	 eax
  04025	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  0402b	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  04031	51		 push	 ecx
  04032	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  04037	83 c4 24	 add	 esp, 36			; 00000024H
$L144513:

; 1396 : 
; 1397 : 				if ( ( tView = head.get_pBrowView() ) != -1 ) {

  0403a	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  04040	e8 00 00 00 00	 call	 ?get_pBrowView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pBrowView
  04045	0f bf d0	 movsx	 edx, ax
  04048	89 95 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], edx
  0404e	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  04055	74 60		 je	 SHORT $L144515

; 1398 : 					DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, headView.GetLinkPoint( _WA_LINK_EYEBROWS, 1 ), headView.GetLinkPoint( _WA_LINK_EYEBROWS, 0 ), True );

  04057	6a 01		 push	 1
  04059	6a 00		 push	 0
  0405b	6a 03		 push	 3
  0405d	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04063	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04068	0f bf c0	 movsx	 eax, ax
  0406b	50		 push	 eax
  0406c	6a 01		 push	 1
  0406e	6a 03		 push	 3
  04070	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04076	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0407b	0f bf c8	 movsx	 ecx, ax
  0407e	51		 push	 ecx
  0407f	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  04082	52		 push	 edx
  04083	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  04086	50		 push	 eax
  04087	51		 push	 ecx
  04088	8b cc		 mov	 ecx, esp
  0408a	89 a5 94 f8 ff
	ff		 mov	 DWORD PTR $T150792[ebp], esp
  04090	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  04093	52		 push	 edx
  04094	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  04099	6a 00		 push	 0
  0409b	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  040a1	50		 push	 eax
  040a2	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  040a8	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  040ae	51		 push	 ecx
  040af	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  040b4	83 c4 24	 add	 esp, 36			; 00000024H
$L144515:

; 1400 : 
; 1401 : 				if ( ( tView = head.get_pHairView() ) != -1 ) {

  040b7	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  040bd	e8 00 00 00 00	 call	 ?get_pHairView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pHairView
  040c2	0f bf d0	 movsx	 edx, ax
  040c5	89 95 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], edx
  040cb	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  040d2	74 60		 je	 SHORT $L144517

; 1402 : 					DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, headView.GetLinkPoint( _WA_LINK_HAIR, 1 ), headView.GetLinkPoint( _WA_LINK_HAIR, 0 ), True );

  040d4	6a 01		 push	 1
  040d6	6a 00		 push	 0
  040d8	6a 03		 push	 3
  040da	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  040e0	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  040e5	0f bf c0	 movsx	 eax, ax
  040e8	50		 push	 eax
  040e9	6a 01		 push	 1
  040eb	6a 03		 push	 3
  040ed	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  040f3	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  040f8	0f bf c8	 movsx	 ecx, ax
  040fb	51		 push	 ecx
  040fc	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  040ff	52		 push	 edx
  04100	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  04103	50		 push	 eax
  04104	51		 push	 ecx
  04105	8b cc		 mov	 ecx, esp
  04107	89 a5 90 f8 ff
	ff		 mov	 DWORD PTR $T150793[ebp], esp
  0410d	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  04110	52		 push	 edx
  04111	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  04116	6a 00		 push	 0
  04118	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  0411e	50		 push	 eax
  0411f	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  04125	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  0412b	51		 push	 ecx
  0412c	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  04131	83 c4 24	 add	 esp, 36			; 00000024H
$L144517:

; 1404 : 
; 1405 : 				if ( bShowFeatures ) {

  04134	83 bd 58 fb ff
	ff 00		 cmp	 DWORD PTR _bShowFeatures$144492[ebp], 0
  0413b	0f 84 8a 01 00
	00		 je	 $L144524

; 1406 : 					if ( ( head.get_pRace() != _BH_HUMAN ) && ( ( tView = head.get_pEarView() ) != -1 ) ) {

  04141	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  04147	e8 00 00 00 00	 call	 ?get_pRace@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pRace
  0414c	0f bf d0	 movsx	 edx, ax
  0414f	83 fa 01	 cmp	 edx, 1
  04152	74 7d		 je	 SHORT $L144520
  04154	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  0415a	e8 00 00 00 00	 call	 ?get_pEarView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pEarView
  0415f	0f bf c0	 movsx	 eax, ax
  04162	89 85 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], eax
  04168	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  0416f	74 60		 je	 SHORT $L144520

; 1407 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, headView.GetLinkPoint( _WA_LINK_EARS, 1 ), headView.GetLinkPoint( _WA_LINK_EARS, 0 ), True );

  04171	6a 01		 push	 1
  04173	6a 00		 push	 0
  04175	6a 03		 push	 3
  04177	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  0417d	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04182	0f bf c8	 movsx	 ecx, ax
  04185	51		 push	 ecx
  04186	6a 01		 push	 1
  04188	6a 03		 push	 3
  0418a	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04190	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04195	0f bf d0	 movsx	 edx, ax
  04198	52		 push	 edx
  04199	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  0419c	50		 push	 eax
  0419d	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  041a0	51		 push	 ecx
  041a1	51		 push	 ecx
  041a2	8b cc		 mov	 ecx, esp
  041a4	89 a5 8c f8 ff
	ff		 mov	 DWORD PTR $T150794[ebp], esp
  041aa	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  041ad	52		 push	 edx
  041ae	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  041b3	6a 00		 push	 0
  041b5	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  041bb	50		 push	 eax
  041bc	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  041c2	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  041c8	51		 push	 ecx
  041c9	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  041ce	83 c4 24	 add	 esp, 36			; 00000024H
$L144520:

; 1409 : 
; 1410 : 					if ( ( tView = head.get_pFaceHairView() ) != -1 ) {

  041d1	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  041d7	e8 00 00 00 00	 call	 ?get_pFaceHairView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pFaceHairView
  041dc	0f bf d0	 movsx	 edx, ax
  041df	89 95 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], edx
  041e5	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  041ec	74 60		 je	 SHORT $L144522

; 1411 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, headView.GetLinkPoint( _WA_LINK_CHIN, 1 ), headView.GetLinkPoint( _WA_LINK_CHIN, 0 ), True );

  041ee	6a 01		 push	 1
  041f0	6a 00		 push	 0
  041f2	6a 01		 push	 1
  041f4	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  041fa	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  041ff	0f bf c0	 movsx	 eax, ax
  04202	50		 push	 eax
  04203	6a 01		 push	 1
  04205	6a 01		 push	 1
  04207	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  0420d	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04212	0f bf c8	 movsx	 ecx, ax
  04215	51		 push	 ecx
  04216	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  04219	52		 push	 edx
  0421a	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0421d	50		 push	 eax
  0421e	51		 push	 ecx
  0421f	8b cc		 mov	 ecx, esp
  04221	89 a5 88 f8 ff
	ff		 mov	 DWORD PTR $T150795[ebp], esp
  04227	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0422a	52		 push	 edx
  0422b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  04230	6a 00		 push	 0
  04232	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  04238	50		 push	 eax
  04239	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  0423f	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  04245	51		 push	 ecx
  04246	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0424b	83 c4 24	 add	 esp, 36			; 00000024H
$L144522:

; 1413 : 
; 1414 : 					if ( ( tView = head.get_pNoseView() ) != -1 ) {

  0424e	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  04254	e8 00 00 00 00	 call	 ?get_pNoseView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pNoseView
  04259	0f bf d0	 movsx	 edx, ax
  0425c	89 95 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], edx
  04262	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  04269	74 60		 je	 SHORT $L144524

; 1415 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, headView.GetLinkPoint( _WA_LINK_NOSE, 1 ), headView.GetLinkPoint( _WA_LINK_NOSE, 0 ), True );

  0426b	6a 01		 push	 1
  0426d	6a 00		 push	 0
  0426f	6a 03		 push	 3
  04271	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04277	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0427c	0f bf c0	 movsx	 eax, ax
  0427f	50		 push	 eax
  04280	6a 01		 push	 1
  04282	6a 03		 push	 3
  04284	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  0428a	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0428f	0f bf c8	 movsx	 ecx, ax
  04292	51		 push	 ecx
  04293	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  04296	52		 push	 edx
  04297	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0429a	50		 push	 eax
  0429b	51		 push	 ecx
  0429c	8b cc		 mov	 ecx, esp
  0429e	89 a5 84 f8 ff
	ff		 mov	 DWORD PTR $T150796[ebp], esp
  042a4	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  042a7	52		 push	 edx
  042a8	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  042ad	6a 00		 push	 0
  042af	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  042b5	50		 push	 eax
  042b6	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  042bc	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  042c2	51		 push	 ecx
  042c3	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  042c8	83 c4 24	 add	 esp, 36			; 00000024H
$L144524:

; 1418 : 			} else {

  042cb	e9 0d 07 00 00	 jmp	 $L144526
$L144502:

; 1419 : 				// Helmet - just draw it and forget the hair.
; 1420 : 
; 1421 : 				// calculate the helemt number
; 1422 : 				switch ( head.get_pRace() ) {

  042d0	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  042d6	e8 00 00 00 00	 call	 ?get_pRace@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pRace
  042db	0f bf d0	 movsx	 edx, ax
  042de	89 95 18 f8 ff
	ff		 mov	 DWORD PTR -2024+[ebp], edx
  042e4	83 bd 18 f8 ff
	ff 01		 cmp	 DWORD PTR -2024+[ebp], 1
  042eb	74 17		 je	 SHORT $L144531
  042ed	83 bd 18 f8 ff
	ff 03		 cmp	 DWORD PTR -2024+[ebp], 3
  042f4	74 40		 je	 SHORT $L144534
  042f6	83 bd 18 f8 ff
	ff 04		 cmp	 DWORD PTR -2024+[ebp], 4
  042fd	74 6c		 je	 SHORT $L144537
  042ff	e9 9a 00 00 00	 jmp	 $L144528
$L144531:

; 1423 : 					case _BH_HUMAN:
; 1424 : 						if ( head.get_pSex() ==  _BH_MALE )

  04304	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  0430a	e8 00 00 00 00	 call	 ?get_pSex@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pSex
  0430f	0f bf c0	 movsx	 eax, ax
  04312	83 f8 01	 cmp	 eax, 1
  04315	75 0e		 jne	 SHORT $L144532

; 1425 : 							pHelmetView += 0;

  04317	8b 8d 50 fb ff
	ff		 mov	 ecx, DWORD PTR _pHelmetView$144493[ebp]
  0431d	89 8d 50 fb ff
	ff		 mov	 DWORD PTR _pHelmetView$144493[ebp], ecx

; 1426 : 						else

  04323	eb 0f		 jmp	 SHORT $L144533
$L144532:

; 1427 : 							pHelmetView += 2;

  04325	8b 95 50 fb ff
	ff		 mov	 edx, DWORD PTR _pHelmetView$144493[ebp]
  0432b	83 c2 02	 add	 edx, 2
  0432e	89 95 50 fb ff
	ff		 mov	 DWORD PTR _pHelmetView$144493[ebp], edx
$L144533:

; 1428 : 
; 1429 : 						break;

  04334	eb 68		 jmp	 SHORT $L144528
$L144534:

; 1430 : 
; 1431 : 					case _BH_GIANT:
; 1432 : 						if ( head.get_pSex() ==  _BH_MALE )

  04336	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  0433c	e8 00 00 00 00	 call	 ?get_pSex@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pSex
  04341	0f bf c0	 movsx	 eax, ax
  04344	83 f8 01	 cmp	 eax, 1
  04347	75 11		 jne	 SHORT $L144535

; 1433 : 							pHelmetView += 4;

  04349	8b 8d 50 fb ff
	ff		 mov	 ecx, DWORD PTR _pHelmetView$144493[ebp]
  0434f	83 c1 04	 add	 ecx, 4
  04352	89 8d 50 fb ff
	ff		 mov	 DWORD PTR _pHelmetView$144493[ebp], ecx

; 1434 : 						else

  04358	eb 0f		 jmp	 SHORT $L144536
$L144535:

; 1435 : 							pHelmetView += 6;

  0435a	8b 95 50 fb ff
	ff		 mov	 edx, DWORD PTR _pHelmetView$144493[ebp]
  04360	83 c2 06	 add	 edx, 6
  04363	89 95 50 fb ff
	ff		 mov	 DWORD PTR _pHelmetView$144493[ebp], edx
$L144536:

; 1436 : 
; 1437 : 						break;

  04369	eb 33		 jmp	 SHORT $L144528
$L144537:

; 1438 : 
; 1439 : 					case _BH_ELF:
; 1440 : 						if ( head.get_pSex() ==  _BH_MALE )

  0436b	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  04371	e8 00 00 00 00	 call	 ?get_pSex@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pSex
  04376	0f bf c0	 movsx	 eax, ax
  04379	83 f8 01	 cmp	 eax, 1
  0437c	75 11		 jne	 SHORT $L144538

; 1441 : 							pHelmetView += 8;

  0437e	8b 8d 50 fb ff
	ff		 mov	 ecx, DWORD PTR _pHelmetView$144493[ebp]
  04384	83 c1 08	 add	 ecx, 8
  04387	89 8d 50 fb ff
	ff		 mov	 DWORD PTR _pHelmetView$144493[ebp], ecx

; 1442 : 						else

  0438d	eb 0f		 jmp	 SHORT $L144539
$L144538:

; 1443 : 							pHelmetView += 10;

  0438f	8b 95 50 fb ff
	ff		 mov	 edx, DWORD PTR _pHelmetView$144493[ebp]
  04395	83 c2 0a	 add	 edx, 10			; 0000000aH
  04398	89 95 50 fb ff
	ff		 mov	 DWORD PTR _pHelmetView$144493[ebp], edx
$L144539:
$L144528:

; 1447 : 
; 1448 : 				CelObjView helmetView ( ( pHelmetView + aWhatAction ) , aLoop, 0 );

  0439e	6a 00		 push	 0
  043a0	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  043a6	50		 push	 eax
  043a7	8b 8d 50 fb ff
	ff		 mov	 ecx, DWORD PTR _pHelmetView$144493[ebp]
  043ad	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  043b3	51		 push	 ecx
  043b4	8d 8d a0 fa ff
	ff		 lea	 ecx, DWORD PTR _helmetView$144540[ebp]
  043ba	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  043bf	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH

; 1449 : 
; 1450 : 				BMWidth = headView.Width();

  043c3	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  043c9	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  043ce	89 45 e4	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 1451 : 				BMHeight = headView.Height();

  043d1	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  043d7	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  043dc	89 45 f0	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 1452 : 
; 1453 : 				SOL_Point pt( 0, 0 );

  043df	6a 00		 push	 0
  043e1	6a 00		 push	 0
  043e3	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR _pt$144541[ebp]
  043e9	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 1454 : 
; 1455 : 				pt.x = headView.GetLinkPoint( _WA_LINK_HAIR, 1 ) - helmetView.XOrg();

  043ee	6a 01		 push	 1
  043f0	6a 03		 push	 3
  043f2	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  043f8	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  043fd	0f bf f0	 movsx	 esi, ax
  04400	8d 8d a0 fa ff
	ff		 lea	 ecx, DWORD PTR _helmetView$144540[ebp]
  04406	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  0440b	2b f0		 sub	 esi, eax
  0440d	89 b5 f0 fa ff
	ff		 mov	 DWORD PTR _pt$144541[ebp], esi

; 1456 : 				pt.y = headView.GetLinkPoint( _WA_LINK_HAIR, 0 ) - helmetView.YOrg();

  04413	6a 00		 push	 0
  04415	6a 03		 push	 3
  04417	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  0441d	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04422	0f bf f0	 movsx	 esi, ax
  04425	8d 8d a0 fa ff
	ff		 lea	 ecx, DWORD PTR _helmetView$144540[ebp]
  0442b	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  04430	2b f0		 sub	 esi, eax
  04432	89 b5 f4 fa ff
	ff		 mov	 DWORD PTR _pt$144541[ebp+4], esi

; 1457 : 				int cx = pt.x + helmetView.Width() - headView.Width();

  04438	8d 8d a0 fa ff
	ff		 lea	 ecx, DWORD PTR _helmetView$144540[ebp]
  0443e	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  04443	8b b5 f0 fa ff
	ff		 mov	 esi, DWORD PTR _pt$144541[ebp]
  04449	03 f0		 add	 esi, eax
  0444b	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04451	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  04456	2b f0		 sub	 esi, eax
  04458	89 b5 fc fa ff
	ff		 mov	 DWORD PTR _cx$144542[ebp], esi

; 1458 : 				int cy = pt.y + helmetView.Height() - headView.Height();

  0445e	8d 8d a0 fa ff
	ff		 lea	 ecx, DWORD PTR _helmetView$144540[ebp]
  04464	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  04469	8b b5 f4 fa ff
	ff		 mov	 esi, DWORD PTR _pt$144541[ebp+4]
  0446f	03 f0		 add	 esi, eax
  04471	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04477	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  0447c	2b f0		 sub	 esi, eax
  0447e	89 b5 f8 fa ff
	ff		 mov	 DWORD PTR _cy$144543[ebp], esi

; 1459 : 
; 1460 : 				if ( pt.x < 0 ) {

  04484	83 bd f0 fa ff
	ff 00		 cmp	 DWORD PTR _pt$144541[ebp], 0
  0448b	7d 38		 jge	 SHORT $L144544

; 1461 : 					pt.x = -pt.x;

  0448d	8b 95 f0 fa ff
	ff		 mov	 edx, DWORD PTR _pt$144541[ebp]
  04493	f7 da		 neg	 edx
  04495	89 95 f0 fa ff
	ff		 mov	 DWORD PTR _pt$144541[ebp], edx

; 1462 : 
; 1463 : 					if ( pt.x & 1 )		//	Force grow to be even number

  0449b	8b 85 f0 fa ff
	ff		 mov	 eax, DWORD PTR _pt$144541[ebp]
  044a1	83 e0 01	 and	 eax, 1
  044a4	85 c0		 test	 eax, eax
  044a6	74 0f		 je	 SHORT $L144545

; 1464 : 						pt.x++;

  044a8	8b 8d f0 fa ff
	ff		 mov	 ecx, DWORD PTR _pt$144541[ebp]
  044ae	83 c1 01	 add	 ecx, 1
  044b1	89 8d f0 fa ff
	ff		 mov	 DWORD PTR _pt$144541[ebp], ecx
$L144545:

; 1465 : 
; 1466 : 					BMWidth += pt.x;

  044b7	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  044ba	03 95 f0 fa ff
	ff		 add	 edx, DWORD PTR _pt$144541[ebp]
  044c0	89 55 e4	 mov	 DWORD PTR _BMWidth$[ebp], edx

; 1467 : 				} else {

  044c3	eb 0a		 jmp	 SHORT $L144546
$L144544:

; 1468 : 					pt.x = 0;

  044c5	c7 85 f0 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _pt$144541[ebp], 0
$L144546:

; 1470 : 
; 1471 : 				if ( pt.y < 0 ) {

  044cf	83 bd f4 fa ff
	ff 00		 cmp	 DWORD PTR _pt$144541[ebp+4], 0
  044d6	7d 38		 jge	 SHORT $L144547

; 1472 : 					pt.y = -pt.y;

  044d8	8b 85 f4 fa ff
	ff		 mov	 eax, DWORD PTR _pt$144541[ebp+4]
  044de	f7 d8		 neg	 eax
  044e0	89 85 f4 fa ff
	ff		 mov	 DWORD PTR _pt$144541[ebp+4], eax

; 1473 : 
; 1474 : 					if ( pt.y & 1 )		//	Force grow to be even number

  044e6	8b 8d f4 fa ff
	ff		 mov	 ecx, DWORD PTR _pt$144541[ebp+4]
  044ec	83 e1 01	 and	 ecx, 1
  044ef	85 c9		 test	 ecx, ecx
  044f1	74 0f		 je	 SHORT $L144548

; 1475 : 						pt.y++;

  044f3	8b 95 f4 fa ff
	ff		 mov	 edx, DWORD PTR _pt$144541[ebp+4]
  044f9	83 c2 01	 add	 edx, 1
  044fc	89 95 f4 fa ff
	ff		 mov	 DWORD PTR _pt$144541[ebp+4], edx
$L144548:

; 1476 : 
; 1477 : 					BMHeight += pt.y;

  04502	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  04505	03 85 f4 fa ff
	ff		 add	 eax, DWORD PTR _pt$144541[ebp+4]
  0450b	89 45 f0	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 1478 : 				} else {

  0450e	eb 0a		 jmp	 SHORT $L144549
$L144547:

; 1479 : 					pt.y = 0;

  04510	c7 85 f4 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _pt$144541[ebp+4], 0
$L144549:

; 1481 : 
; 1482 : 				if ( cx > 0 ) {

  0451a	83 bd fc fa ff
	ff 00		 cmp	 DWORD PTR _cx$144542[ebp], 0
  04521	7e 28		 jle	 SHORT $L144550

; 1483 : 					if ( cx & 1 )

  04523	8b 8d fc fa ff
	ff		 mov	 ecx, DWORD PTR _cx$144542[ebp]
  04529	83 e1 01	 and	 ecx, 1
  0452c	85 c9		 test	 ecx, ecx
  0452e	74 0f		 je	 SHORT $L144551

; 1484 : 						cx++;

  04530	8b 95 fc fa ff
	ff		 mov	 edx, DWORD PTR _cx$144542[ebp]
  04536	83 c2 01	 add	 edx, 1
  04539	89 95 fc fa ff
	ff		 mov	 DWORD PTR _cx$144542[ebp], edx
$L144551:

; 1485 : 
; 1486 : 					BMWidth += cx;

  0453f	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  04542	03 85 fc fa ff
	ff		 add	 eax, DWORD PTR _cx$144542[ebp]
  04548	89 45 e4	 mov	 DWORD PTR _BMWidth$[ebp], eax
$L144550:

; 1488 : 
; 1489 : 				if ( cy > 0 ) {

  0454b	83 bd f8 fa ff
	ff 00		 cmp	 DWORD PTR _cy$144543[ebp], 0
  04552	7e 28		 jle	 SHORT $L144552

; 1490 : 					if ( cy & 1 )		//	Force grow to be even number

  04554	8b 8d f8 fa ff
	ff		 mov	 ecx, DWORD PTR _cy$144543[ebp]
  0455a	83 e1 01	 and	 ecx, 1
  0455d	85 c9		 test	 ecx, ecx
  0455f	74 0f		 je	 SHORT $L144553

; 1491 : 						cy++;

  04561	8b 95 f8 fa ff
	ff		 mov	 edx, DWORD PTR _cy$144543[ebp]
  04567	83 c2 01	 add	 edx, 1
  0456a	89 95 f8 fa ff
	ff		 mov	 DWORD PTR _cy$144543[ebp], edx
$L144553:

; 1492 : 
; 1493 : 					BMHeight += cy;

  04570	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  04573	03 85 f8 fa ff
	ff		 add	 eax, DWORD PTR _cy$144543[ebp]
  04579	89 45 f0	 mov	 DWORD PTR _BMHeight$[ebp], eax
$L144552:

; 1495 : 
; 1496 : 				originX += pt.x;

  0457c	8b 8d 68 fb ff
	ff		 mov	 ecx, DWORD PTR _originX$144500[ebp]
  04582	03 8d f0 fa ff
	ff		 add	 ecx, DWORD PTR _pt$144541[ebp]
  04588	89 8d 68 fb ff
	ff		 mov	 DWORD PTR _originX$144500[ebp], ecx

; 1497 : 				originY += pt.y;

  0458e	8b 95 60 fb ff
	ff		 mov	 edx, DWORD PTR _originY$144501[ebp]
  04594	03 95 f4 fa ff
	ff		 add	 edx, DWORD PTR _pt$144541[ebp+4]
  0459a	89 95 60 fb ff
	ff		 mov	 DWORD PTR _originY$144501[ebp], edx

; 1498 : 
; 1499 : 				// create the base bitmap
; 1500 : 				BM.Get ( MemBitmap, BMWidth * (BMHeight + 1) + CELHEADERSIZE );

  045a0	6a 00		 push	 0
  045a2	6a 00		 push	 0
  045a4	6a 00		 push	 0
  045a6	6a 00		 push	 0
  045a8	68 00 02 00 00	 push	 512			; 00000200H
  045ad	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  045b0	83 c0 01	 add	 eax, 1
  045b3	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  045b6	0f af c8	 imul	 ecx, eax
  045b9	83 c1 2e	 add	 ecx, 46			; 0000002eH
  045bc	51		 push	 ecx
  045bd	6a 4b		 push	 75			; 0000004bH
  045bf	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  045c2	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 1501 : 
; 1502 : 				// fill that bitmap in with skip color
; 1503 : 				memset ( (uchar*)memMgr->GetAddr(BM) + CELHEADERSIZE, headView.Skip(), BMWidth * BMHeight );

  045c7	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  045ca	0f af 55 f0	 imul	 edx, DWORD PTR _BMHeight$[ebp]
  045ce	52		 push	 edx
  045cf	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  045d5	e8 00 00 00 00	 call	 ?Skip@CelObj@@QBEEXZ	; CelObj::Skip
  045da	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  045df	50		 push	 eax
  045e0	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  045e3	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  045e8	50		 push	 eax
  045e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  045ef	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  045f4	83 c0 2e	 add	 eax, 46			; 0000002eH
  045f7	50		 push	 eax
  045f8	e8 00 00 00 00	 call	 _memset
  045fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1504 : 
; 1505 : 				BuildHeader (
; 1506 : 					BM,
; 1507 : 					BMWidth,
; 1508 : 					BMHeight,
; 1509 : 					headView.Skip(),
; 1510 : 					originX,
; 1511 : 					originY,
; 1512 : 					headView.ResX(),
; 1513 : 					headView.ResY(),
; 1514 : 					0,
; 1515 : 					True
; 1516 : 				);

  04600	6a 01		 push	 1
  04602	6a 00		 push	 0
  04604	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  0460a	e8 00 00 00 00	 call	 ?ResY@CelObj@@QBEHXZ	; CelObj::ResY
  0460f	50		 push	 eax
  04610	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04616	e8 00 00 00 00	 call	 ?ResX@CelObj@@QBEHXZ	; CelObj::ResX
  0461b	50		 push	 eax
  0461c	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR _originY$144501[ebp]
  04622	50		 push	 eax
  04623	8b 8d 68 fb ff
	ff		 mov	 ecx, DWORD PTR _originX$144500[ebp]
  04629	51		 push	 ecx
  0462a	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04630	e8 00 00 00 00	 call	 ?Skip@CelObj@@QBEEXZ	; CelObj::Skip
  04635	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0463a	50		 push	 eax
  0463b	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0463e	52		 push	 edx
  0463f	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  04642	50		 push	 eax
  04643	51		 push	 ecx
  04644	8b cc		 mov	 ecx, esp
  04646	89 a5 80 f8 ff
	ff		 mov	 DWORD PTR $T150797[ebp], esp
  0464c	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0464f	52		 push	 edx
  04650	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  04655	e8 00 00 00 00	 call	 ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ; BuildHeader
  0465a	83 c4 28	 add	 esp, 40			; 00000028H

; 1517 : 
; 1518 : 				DrawView ( ( pHelmetView + aWhatAction ), aLoop, 1, BM, BMWidth, BMHeight, pt.x + headView.GetLinkPoint( _WA_LINK_HAIR, 1 ), pt.y + headView.GetLinkPoint( _WA_LINK_HAIR, 0 ), False );

  0465d	6a 00		 push	 0
  0465f	6a 00		 push	 0
  04661	6a 03		 push	 3
  04663	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04669	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0466e	0f bf c0	 movsx	 eax, ax
  04671	8b 8d f4 fa ff
	ff		 mov	 ecx, DWORD PTR _pt$144541[ebp+4]
  04677	03 c8		 add	 ecx, eax
  04679	51		 push	 ecx
  0467a	6a 01		 push	 1
  0467c	6a 03		 push	 3
  0467e	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04684	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04689	0f bf d0	 movsx	 edx, ax
  0468c	8b 85 f0 fa ff
	ff		 mov	 eax, DWORD PTR _pt$144541[ebp]
  04692	03 c2		 add	 eax, edx
  04694	50		 push	 eax
  04695	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  04698	51		 push	 ecx
  04699	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  0469c	52		 push	 edx
  0469d	51		 push	 ecx
  0469e	8b cc		 mov	 ecx, esp
  046a0	89 a5 7c f8 ff
	ff		 mov	 DWORD PTR $T150798[ebp], esp
  046a6	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  046a9	50		 push	 eax
  046aa	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  046af	6a 01		 push	 1
  046b1	8b 8d 54 fb ff
	ff		 mov	 ecx, DWORD PTR _aLoop$144491[ebp]
  046b7	51		 push	 ecx
  046b8	8b 95 50 fb ff
	ff		 mov	 edx, DWORD PTR _pHelmetView$144493[ebp]
  046be	03 95 70 fb ff
	ff		 add	 edx, DWORD PTR _aWhatAction$144490[ebp]
  046c4	52		 push	 edx
  046c5	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  046ca	83 c4 24	 add	 esp, 36			; 00000024H

; 1519 : 				DrawView ( ( head.get_pHeadView() + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, originX, originY, True );

  046cd	6a 01		 push	 1
  046cf	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR _originY$144501[ebp]
  046d5	50		 push	 eax
  046d6	8b 8d 68 fb ff
	ff		 mov	 ecx, DWORD PTR _originX$144500[ebp]
  046dc	51		 push	 ecx
  046dd	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  046e0	52		 push	 edx
  046e1	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  046e4	50		 push	 eax
  046e5	51		 push	 ecx
  046e6	8b cc		 mov	 ecx, esp
  046e8	89 a5 78 f8 ff
	ff		 mov	 DWORD PTR $T150799[ebp], esp
  046ee	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  046f1	52		 push	 edx
  046f2	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  046f7	6a 00		 push	 0
  046f9	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  046ff	50		 push	 eax
  04700	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  04706	e8 00 00 00 00	 call	 ?get_pHeadView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pHeadView
  0470b	0f bf c8	 movsx	 ecx, ax
  0470e	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  04714	51		 push	 ecx
  04715	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0471a	83 c4 24	 add	 esp, 36			; 00000024H

; 1520 : 
; 1521 : 				if ( bShowFeatures ) {

  0471d	83 bd 58 fb ff
	ff 00		 cmp	 DWORD PTR _bShowFeatures$144492[ebp], 0
  04724	0f 84 34 02 00
	00		 je	 $L144565

; 1522 : 					if ( ( tView = head.get_pMouthView() ) != -1 ) {

  0472a	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  04730	e8 00 00 00 00	 call	 ?get_pMouthView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pMouthView
  04735	0f bf d0	 movsx	 edx, ax
  04738	89 95 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], edx
  0473e	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  04745	74 70		 je	 SHORT $L144559

; 1523 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, pt.x + headView.GetLinkPoint( _WA_LINK_MOUTH, 1 ), pt.y + headView.GetLinkPoint( _WA_LINK_MOUTH, 0 ), True );

  04747	6a 01		 push	 1
  04749	6a 00		 push	 0
  0474b	6a 02		 push	 2
  0474d	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04753	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04758	0f bf c0	 movsx	 eax, ax
  0475b	8b 8d f4 fa ff
	ff		 mov	 ecx, DWORD PTR _pt$144541[ebp+4]
  04761	03 c8		 add	 ecx, eax
  04763	51		 push	 ecx
  04764	6a 01		 push	 1
  04766	6a 02		 push	 2
  04768	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  0476e	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04773	0f bf d0	 movsx	 edx, ax
  04776	8b 85 f0 fa ff
	ff		 mov	 eax, DWORD PTR _pt$144541[ebp]
  0477c	03 c2		 add	 eax, edx
  0477e	50		 push	 eax
  0477f	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  04782	51		 push	 ecx
  04783	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  04786	52		 push	 edx
  04787	51		 push	 ecx
  04788	8b cc		 mov	 ecx, esp
  0478a	89 a5 74 f8 ff
	ff		 mov	 DWORD PTR $T150800[ebp], esp
  04790	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  04793	50		 push	 eax
  04794	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  04799	6a 00		 push	 0
  0479b	8b 8d 54 fb ff
	ff		 mov	 ecx, DWORD PTR _aLoop$144491[ebp]
  047a1	51		 push	 ecx
  047a2	8b 95 64 fb ff
	ff		 mov	 edx, DWORD PTR _tView$144498[ebp]
  047a8	03 95 70 fb ff
	ff		 add	 edx, DWORD PTR _aWhatAction$144490[ebp]
  047ae	52		 push	 edx
  047af	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  047b4	83 c4 24	 add	 esp, 36			; 00000024H
$L144559:

; 1525 : 
; 1526 : 					if ( ( tView = head.get_pEyeView() ) != -1 ) {

  047b7	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  047bd	e8 00 00 00 00	 call	 ?get_pEyeView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pEyeView
  047c2	0f bf c0	 movsx	 eax, ax
  047c5	89 85 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], eax
  047cb	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  047d2	74 70		 je	 SHORT $L144561

; 1527 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, pt.x + headView.GetLinkPoint( _WA_LINK_EYES, 1 ), pt.y + headView.GetLinkPoint( _WA_LINK_EYES, 0 ), True );

  047d4	6a 01		 push	 1
  047d6	6a 00		 push	 0
  047d8	6a 03		 push	 3
  047da	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  047e0	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  047e5	0f bf c8	 movsx	 ecx, ax
  047e8	8b 95 f4 fa ff
	ff		 mov	 edx, DWORD PTR _pt$144541[ebp+4]
  047ee	03 d1		 add	 edx, ecx
  047f0	52		 push	 edx
  047f1	6a 01		 push	 1
  047f3	6a 03		 push	 3
  047f5	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  047fb	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04800	0f bf c0	 movsx	 eax, ax
  04803	8b 8d f0 fa ff
	ff		 mov	 ecx, DWORD PTR _pt$144541[ebp]
  04809	03 c8		 add	 ecx, eax
  0480b	51		 push	 ecx
  0480c	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  0480f	52		 push	 edx
  04810	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  04813	50		 push	 eax
  04814	51		 push	 ecx
  04815	8b cc		 mov	 ecx, esp
  04817	89 a5 70 f8 ff
	ff		 mov	 DWORD PTR $T150801[ebp], esp
  0481d	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  04820	52		 push	 edx
  04821	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  04826	6a 00		 push	 0
  04828	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  0482e	50		 push	 eax
  0482f	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  04835	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  0483b	51		 push	 ecx
  0483c	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  04841	83 c4 24	 add	 esp, 36			; 00000024H
$L144561:

; 1529 : 
; 1530 : 					if ( ( tView = head.get_pFaceHairView() ) != -1 ) {

  04844	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  0484a	e8 00 00 00 00	 call	 ?get_pFaceHairView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pFaceHairView
  0484f	0f bf d0	 movsx	 edx, ax
  04852	89 95 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], edx
  04858	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  0485f	74 70		 je	 SHORT $L144563

; 1531 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, pt.x + headView.GetLinkPoint( _WA_LINK_CHIN, 1 ), pt.y + headView.GetLinkPoint( _WA_LINK_CHIN, 0 ), True );

  04861	6a 01		 push	 1
  04863	6a 00		 push	 0
  04865	6a 01		 push	 1
  04867	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  0486d	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  04872	0f bf c0	 movsx	 eax, ax
  04875	8b 8d f4 fa ff
	ff		 mov	 ecx, DWORD PTR _pt$144541[ebp+4]
  0487b	03 c8		 add	 ecx, eax
  0487d	51		 push	 ecx
  0487e	6a 01		 push	 1
  04880	6a 01		 push	 1
  04882	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04888	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0488d	0f bf d0	 movsx	 edx, ax
  04890	8b 85 f0 fa ff
	ff		 mov	 eax, DWORD PTR _pt$144541[ebp]
  04896	03 c2		 add	 eax, edx
  04898	50		 push	 eax
  04899	8b 4d f0	 mov	 ecx, DWORD PTR _BMHeight$[ebp]
  0489c	51		 push	 ecx
  0489d	8b 55 e4	 mov	 edx, DWORD PTR _BMWidth$[ebp]
  048a0	52		 push	 edx
  048a1	51		 push	 ecx
  048a2	8b cc		 mov	 ecx, esp
  048a4	89 a5 6c f8 ff
	ff		 mov	 DWORD PTR $T150802[ebp], esp
  048aa	8d 45 e8	 lea	 eax, DWORD PTR _BM$[ebp]
  048ad	50		 push	 eax
  048ae	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  048b3	6a 00		 push	 0
  048b5	8b 8d 54 fb ff
	ff		 mov	 ecx, DWORD PTR _aLoop$144491[ebp]
  048bb	51		 push	 ecx
  048bc	8b 95 64 fb ff
	ff		 mov	 edx, DWORD PTR _tView$144498[ebp]
  048c2	03 95 70 fb ff
	ff		 add	 edx, DWORD PTR _aWhatAction$144490[ebp]
  048c8	52		 push	 edx
  048c9	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  048ce	83 c4 24	 add	 esp, 36			; 00000024H
$L144563:

; 1533 : 
; 1534 : 					if ( ( tView = head.get_pNoseView() ) != -1 ) {

  048d1	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR _head$144494[ebp]
  048d7	e8 00 00 00 00	 call	 ?get_pNoseView@CSCI_BHead@@QAEFXZ ; CSCI_BHead::get_pNoseView
  048dc	0f bf c0	 movsx	 eax, ax
  048df	89 85 64 fb ff
	ff		 mov	 DWORD PTR _tView$144498[ebp], eax
  048e5	83 bd 64 fb ff
	ff ff		 cmp	 DWORD PTR _tView$144498[ebp], -1
  048ec	74 70		 je	 SHORT $L144565

; 1535 : 						DrawView ( ( tView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, pt.x + headView.GetLinkPoint( _WA_LINK_NOSE, 1 ), pt.y + headView.GetLinkPoint( _WA_LINK_NOSE, 0 ), True );

  048ee	6a 01		 push	 1
  048f0	6a 00		 push	 0
  048f2	6a 03		 push	 3
  048f4	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  048fa	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  048ff	0f bf c8	 movsx	 ecx, ax
  04902	8b 95 f4 fa ff
	ff		 mov	 edx, DWORD PTR _pt$144541[ebp+4]
  04908	03 d1		 add	 edx, ecx
  0490a	52		 push	 edx
  0490b	6a 01		 push	 1
  0490d	6a 03		 push	 3
  0490f	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04915	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0491a	0f bf c0	 movsx	 eax, ax
  0491d	8b 8d f0 fa ff
	ff		 mov	 ecx, DWORD PTR _pt$144541[ebp]
  04923	03 c8		 add	 ecx, eax
  04925	51		 push	 ecx
  04926	8b 55 f0	 mov	 edx, DWORD PTR _BMHeight$[ebp]
  04929	52		 push	 edx
  0492a	8b 45 e4	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0492d	50		 push	 eax
  0492e	51		 push	 ecx
  0492f	8b cc		 mov	 ecx, esp
  04931	89 a5 68 f8 ff
	ff		 mov	 DWORD PTR $T150803[ebp], esp
  04937	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  0493a	52		 push	 edx
  0493b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  04940	6a 00		 push	 0
  04942	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  04948	50		 push	 eax
  04949	8b 8d 64 fb ff
	ff		 mov	 ecx, DWORD PTR _tView$144498[ebp]
  0494f	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  04955	51		 push	 ecx
  04956	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  0495b	83 c4 24	 add	 esp, 36			; 00000024H
$L144565:

; 1538 : 
; 1539 : 				DrawView ( ( pHelmetView + aWhatAction ), aLoop, 0, BM, BMWidth, BMHeight, pt.x + headView.GetLinkPoint( _WA_LINK_HAIR, 1 ), pt.y + headView.GetLinkPoint( _WA_LINK_HAIR, 0 ), True );

  0495e	6a 01		 push	 1
  04960	6a 00		 push	 0
  04962	6a 03		 push	 3
  04964	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  0496a	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0496f	0f bf d0	 movsx	 edx, ax
  04972	8b 85 f4 fa ff
	ff		 mov	 eax, DWORD PTR _pt$144541[ebp+4]
  04978	03 c2		 add	 eax, edx
  0497a	50		 push	 eax
  0497b	6a 01		 push	 1
  0497d	6a 03		 push	 3
  0497f	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04985	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0498a	0f bf c8	 movsx	 ecx, ax
  0498d	8b 95 f0 fa ff
	ff		 mov	 edx, DWORD PTR _pt$144541[ebp]
  04993	03 d1		 add	 edx, ecx
  04995	52		 push	 edx
  04996	8b 45 f0	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  04999	50		 push	 eax
  0499a	8b 4d e4	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  0499d	51		 push	 ecx
  0499e	51		 push	 ecx
  0499f	8b cc		 mov	 ecx, esp
  049a1	89 a5 64 f8 ff
	ff		 mov	 DWORD PTR $T150804[ebp], esp
  049a7	8d 55 e8	 lea	 edx, DWORD PTR _BM$[ebp]
  049aa	52		 push	 edx
  049ab	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  049b0	6a 00		 push	 0
  049b2	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR _aLoop$144491[ebp]
  049b8	50		 push	 eax
  049b9	8b 8d 50 fb ff
	ff		 mov	 ecx, DWORD PTR _pHelmetView$144493[ebp]
  049bf	03 8d 70 fb ff
	ff		 add	 ecx, DWORD PTR _aWhatAction$144490[ebp]
  049c5	51		 push	 ecx
  049c6	e8 00 00 00 00	 call	 ?DrawView@@YAXHHHVMemID@@HHHHH@Z ; DrawView
  049cb	83 c4 24	 add	 esp, 36			; 00000024H

; 1540 : 			}

  049ce	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  049d2	8d 8d a0 fa ff
	ff		 lea	 ecx, DWORD PTR _helmetView$144540[ebp]
  049d8	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
$L144526:

; 1541 : 
; 1542 : 			if ( (aWhatAction == 1) && headOrigin && headOrigin.IsValid() && headOrigin.GetMemType() == MemArray ) {

  049dd	33 d2		 xor	 edx, edx
  049df	83 bd 70 fb ff
	ff 01		 cmp	 DWORD PTR _aWhatAction$144490[ebp], 1
  049e6	0f 94 c2	 sete	 dl
  049e9	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  049ef	85 d2		 test	 edx, edx
  049f1	0f 84 c0 00 00
	00		 je	 $L144568
  049f7	8d 8d 5c fb ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144495[ebp]
  049fd	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04a02	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  04a07	85 c0		 test	 eax, eax
  04a09	0f 84 a8 00 00
	00		 je	 $L144568
  04a0f	8d 8d 5c fb ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144495[ebp]
  04a15	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  04a1a	85 c0		 test	 eax, eax
  04a1c	0f 84 95 00 00
	00		 je	 $L144568
  04a22	8d 8d 5c fb ff
	ff		 lea	 ecx, DWORD PTR _headOrigin$144495[ebp]
  04a28	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  04a2d	83 f8 35	 cmp	 eax, 53			; 00000035H
  04a30	0f 85 81 00 00
	00		 jne	 $L144568

; 1543 : 				Array origins;

  04a36	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _origins$144569[ebp]
  04a3c	e8 00 00 00 00	 call	 ??0Array@@QAE@XZ	; Array::Array
  04a41	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH

; 1544 : 
; 1545 : 				origins.dataID ( headOrigin );

  04a45	51		 push	 ecx
  04a46	8b cc		 mov	 ecx, esp
  04a48	89 a5 60 f8 ff
	ff		 mov	 DWORD PTR $T150805[ebp], esp
  04a4e	8d 85 5c fb ff
	ff		 lea	 eax, DWORD PTR _headOrigin$144495[ebp]
  04a54	50		 push	 eax
  04a55	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  04a5a	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _origins$144569[ebp]
  04a60	e8 00 00 00 00	 call	 ?dataID@Array@@QAEXVMemID@@@Z ; Array::dataID

; 1546 : 
; 1547 : 				int index = aLoop << 1;

  04a65	8b 8d 54 fb ff
	ff		 mov	 ecx, DWORD PTR _aLoop$144491[ebp]
  04a6b	d1 e1		 shl	 ecx, 1
  04a6d	89 8d 98 fa ff
	ff		 mov	 DWORD PTR _index$144571[ebp], ecx

; 1548 : 
; 1549 : 				origins.at ( index, originX );

  04a73	8b 95 68 fb ff
	ff		 mov	 edx, DWORD PTR _originX$144500[ebp]
  04a79	52		 push	 edx
  04a7a	8b 85 98 fa ff
	ff		 mov	 eax, DWORD PTR _index$144571[ebp]
  04a80	50		 push	 eax
  04a81	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _origins$144569[ebp]
  04a87	e8 00 00 00 00	 call	 ?at@Array@@QAEXHH@Z	; Array::at

; 1550 : 				origins.at ( ( index + 1), originY );

  04a8c	8b 8d 60 fb ff
	ff		 mov	 ecx, DWORD PTR _originY$144501[ebp]
  04a92	51		 push	 ecx
  04a93	8b 95 98 fa ff
	ff		 mov	 edx, DWORD PTR _index$144571[ebp]
  04a99	83 c2 01	 add	 edx, 1
  04a9c	52		 push	 edx
  04a9d	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _origins$144569[ebp]
  04aa3	e8 00 00 00 00	 call	 ?at@Array@@QAEXHH@Z	; Array::at

; 1551 : 			}

  04aa8	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  04aac	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _origins$144569[ebp]
  04ab2	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
$L144568:

; 1552 : 
; 1553 : 			pm.acc = BM;

  04ab7	8d 4d e8	 lea	 ecx, DWORD PTR _BM$[ebp]
  04aba	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04abf	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  04ac4	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1554 : 		}

  04ac9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04ad0	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  04ad6	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
$L144572:
$L144030:
$L144008:

; 1561 : 
; 1562 : //	ValidateViews ( __FILE__, __LINE__ );
; 1563 : }

  04adb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  04ade	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  04ae5	5e		 pop	 esi
  04ae6	8b e5		 mov	 esp, ebp
  04ae8	5d		 pop	 ebp
  04ae9	c3		 ret	 0
$L150821:
  04aea	00 00 00 00	 DD	 $L144033
  04aee	00 00 00 00	 DD	 $L144063
  04af2	00 00 00 00	 DD	 $L144072
  04af6	00 00 00 00	 DD	 $L144088
  04afa	00 00 00 00	 DD	 $L144121
  04afe	00 00 00 00	 DD	 $L144142
  04b02	00 00 00 00	 DD	 $L144175
  04b06	00 00 00 00	 DD	 $L144204
  04b0a	00 00 00 00	 DD	 $L144220
  04b0e	00 00 00 00	 DD	 $L144047
  04b12	00 00 00 00	 DD	 $L144229
  04b16	00 00 00 00	 DD	 $L144239
  04b1a	00 00 00 00	 DD	 $L144254
  04b1e	00 00 00 00	 DD	 $L144489
$L150823:
  04b22	00 00 00 00	 DD	 $L144325
  04b26	00 00 00 00	 DD	 $L144326
  04b2a	00 00 00 00	 DD	 $L144322
$L150822:
  04b2e	00		 DB	 0
  04b2f	00		 DB	 0
  04b30	00		 DB	 0
  04b31	01		 DB	 1
  04b32	01		 DB	 1
  04b33	01		 DB	 1
  04b34	02		 DB	 2
  04b35	01		 DB	 1
  04b36	01		 DB	 1
  04b37	01		 DB	 1
$L150825:
  04b38	00 00 00 00	 DD	 $L144326
  04b3c	00 00 00 00	 DD	 $L144322
$L150824:
  04b40	00		 DB	 0
  04b41	00		 DB	 0
  04b42	00		 DB	 0
  04b43	01		 DB	 1
  04b44	00		 DB	 0
  04b45	00		 DB	 0
  04b46	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
$L150806:
  00055	8d 4d 80	 lea	 ecx, DWORD PTR _celObj$144048[ebp]
  00058	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0005d	c3		 ret	 0
$L150807:
  0005e	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144100[ebp]
  00064	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  00069	c3		 ret	 0
$L150808:
  0006a	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _celObj$144138[ebp]
  00070	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  00075	c3		 ret	 0
$L150809:
  00076	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR _celObj$144200[ebp]
  0007c	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  00081	c3		 ret	 0
$L150810:
  00082	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _celObj$144287[ebp]
  00088	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0008d	c3		 ret	 0
$L150811:
  0008e	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR _origins$144294[ebp]
  00094	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00099	c3		 ret	 0
$L150812:
  0009a	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR _bitmaps$144295[ebp]
  000a0	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  000a5	c3		 ret	 0
$L150813:
  000a6	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144313[ebp]
  000ac	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  000b1	c3		 ret	 0
$L150814:
  000b2	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR _head$144370[ebp]
  000b8	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  000bd	c3		 ret	 0
$L150815:
  000be	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR _headView$144499[ebp]
  000c4	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  000c9	c3		 ret	 0
$L150816:
  000ca	8d 8d a0 fa ff
	ff		 lea	 ecx, DWORD PTR _helmetView$144540[ebp]
  000d0	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  000d5	c3		 ret	 0
$L150817:
  000d6	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _origins$144569[ebp]
  000dc	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  000e1	c3		 ret	 0
$L150820:
  000e2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150819
  000e7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KBitmap@@YAXPAF@Z ENDP					; KBitmap
EXTRN	?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z:NEAR ; MemoryMgr::Alloc
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_a$ = 16
_num$ = 20
_client$ = 24
_initChar$ = 28
_h$ = 32
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; MemID::Get, COMDAT

; 42   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		handle = memMgr->Alloc(type | a, size, num, client, initChar, h);

  00007	8b 45 20	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 1c	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0001e	0b 55 10	 or	 edx, DWORD PTR _a$[ebp]
  00021	52		 push	 edx
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00028	e8 00 00 00 00	 call	 ?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemoryMgr::Alloc
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	66 89 01	 mov	 WORD PTR [ecx], ax

; 44   : 	}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 1c 00	 ret	 28			; 0000001cH
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; MemID::Get
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8
??0Array@@QAE@XZ PROC NEAR				; Array::Array, COMDAT

; 74   : 	Array() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 75   : 		dataID ( 0 );

  00011	51		 push	 ecx
  00012	8b cc		 mov	 ecx, esp
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?dataID@Array@@QAEXVMemID@@@Z ; Array::dataID

; 76   : 	}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0Array@@QAE@XZ ENDP					; Array::Array
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1Array@@QAE@XZ PROC NEAR				; Array::~Array, COMDAT

; 88   : 	~Array() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1Array@@QAE@XZ ENDP					; Array::~Array
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT
_memID$ = 8
_this$ = -4
?dataID@Array@@QAEXVMemID@@@Z PROC NEAR			; Array::dataID, COMDAT

; 111  : 	void dataID ( MemID memID ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 		_dataID = memID;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _memID$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 113  : 	}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?dataID@Array@@QAEXVMemID@@@Z ENDP			; Array::dataID
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@XZ				; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ObjectID@@QAE@XZ PROC NEAR				; ObjectID::ObjectID, COMDAT

; 227  : 	ObjectID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@XZ	; FakeObjectID::FakeObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ObjectID@@QAE@XZ ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeObjectID@@QAE@XZ PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeObjectID@@QAE@XZ ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ObjectID@@QAE@ABVMemID@@@Z PROC NEAR			; ObjectID::ObjectID, COMDAT

; 228  : 	ObjectID(const MemID& id) : FakeObjectID(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@ABVMemID@@@Z ; FakeObjectID::FakeObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ObjectID@@QAE@ABVMemID@@@Z ENDP			; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0CSCI_BWearable@@QAE@G@Z			; CSCI_BWearable::CSCI_BWearable
;	COMDAT ??0CSCI_BHead@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BHead@@QAE@G@Z PROC NEAR			; CSCI_BHead::CSCI_BHead, COMDAT

; 4371 : 	CSCI_BHead(SOL_Handle h) : CSCI_BWearable(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_BWearable@@QAE@G@Z ; CSCI_BWearable::CSCI_BWearable
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BHead@@QAE@G@Z ENDP				; CSCI_BHead::CSCI_BHead
_TEXT	ENDS
PUBLIC	??0CSCI_WorldObjectBase@@QAE@G@Z		; CSCI_WorldObjectBase::CSCI_WorldObjectBase
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BWearable@@QAE@G@Z PROC NEAR			; CSCI_BWearable::CSCI_BWearable, COMDAT

; 4171 : 	CSCI_BWearable(SOL_Handle h) : CSCI_WorldObjectBase(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_WorldObjectBase@@QAE@G@Z ; CSCI_WorldObjectBase::CSCI_WorldObjectBase
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BWearable@@QAE@G@Z ENDP				; CSCI_BWearable::CSCI_BWearable
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@G@Z				; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_WorldObjectBase@@QAE@G@Z PROC NEAR		; CSCI_WorldObjectBase::CSCI_WorldObjectBase, COMDAT

; 3827 : 	CSCI_WorldObjectBase(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_WorldObjectBase@@QAE@G@Z ENDP			; CSCI_WorldObjectBase::CSCI_WorldObjectBase
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Object@@QAE@G@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 13   : 	CSCI_Object(SOL_Handle h) : ObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@G@Z ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
;	COMDAT ?get_pRace@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pRace@CSCI_BHead@@QAEFXZ PROC NEAR			; CSCI_BHead::get_pRace, COMDAT

; 4406 : 	Property get_pRace() { return GetProperty ( s_pRace ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0b 03 00 00	 push	 779			; 0000030bH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pRace@CSCI_BHead@@QAEFXZ ENDP			; CSCI_BHead::get_pRace
_TEXT	ENDS
;	COMDAT ?get_pSex@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pSex@CSCI_BHead@@QAEFXZ PROC NEAR			; CSCI_BHead::get_pSex, COMDAT

; 4409 : 	Property get_pSex() { return GetProperty ( s_pSex ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0c 03 00 00	 push	 780			; 0000030cH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pSex@CSCI_BHead@@QAEFXZ ENDP			; CSCI_BHead::get_pSex
_TEXT	ENDS
;	COMDAT ?get_pHeadView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pHeadView@CSCI_BHead@@QAEFXZ PROC NEAR		; CSCI_BHead::get_pHeadView, COMDAT

; 4412 : 	Property get_pHeadView() { return GetProperty ( s_pHeadView ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0d 03 00 00	 push	 781			; 0000030dH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pHeadView@CSCI_BHead@@QAEFXZ ENDP			; CSCI_BHead::get_pHeadView
_TEXT	ENDS
;	COMDAT ?get_pHairView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pHairView@CSCI_BHead@@QAEFXZ PROC NEAR		; CSCI_BHead::get_pHairView, COMDAT

; 4415 : 	Property get_pHairView() { return GetProperty ( s_pHairView ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0e 03 00 00	 push	 782			; 0000030eH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pHairView@CSCI_BHead@@QAEFXZ ENDP			; CSCI_BHead::get_pHairView
_TEXT	ENDS
;	COMDAT ?get_pBrowView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pBrowView@CSCI_BHead@@QAEFXZ PROC NEAR		; CSCI_BHead::get_pBrowView, COMDAT

; 4418 : 	Property get_pBrowView() { return GetProperty ( s_pBrowView ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0f 03 00 00	 push	 783			; 0000030fH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pBrowView@CSCI_BHead@@QAEFXZ ENDP			; CSCI_BHead::get_pBrowView
_TEXT	ENDS
;	COMDAT ?get_pEyeView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pEyeView@CSCI_BHead@@QAEFXZ PROC NEAR		; CSCI_BHead::get_pEyeView, COMDAT

; 4421 : 	Property get_pEyeView() { return GetProperty ( s_pEyeView ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 10 03 00 00	 push	 784			; 00000310H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pEyeView@CSCI_BHead@@QAEFXZ ENDP			; CSCI_BHead::get_pEyeView
_TEXT	ENDS
;	COMDAT ?get_pNoseView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pNoseView@CSCI_BHead@@QAEFXZ PROC NEAR		; CSCI_BHead::get_pNoseView, COMDAT

; 4424 : 	Property get_pNoseView() { return GetProperty ( s_pNoseView ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 11 03 00 00	 push	 785			; 00000311H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pNoseView@CSCI_BHead@@QAEFXZ ENDP			; CSCI_BHead::get_pNoseView
_TEXT	ENDS
;	COMDAT ?get_pEarView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pEarView@CSCI_BHead@@QAEFXZ PROC NEAR		; CSCI_BHead::get_pEarView, COMDAT

; 4427 : 	Property get_pEarView() { return GetProperty ( s_pEarView ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 12 03 00 00	 push	 786			; 00000312H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pEarView@CSCI_BHead@@QAEFXZ ENDP			; CSCI_BHead::get_pEarView
_TEXT	ENDS
;	COMDAT ?get_pMouthView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pMouthView@CSCI_BHead@@QAEFXZ PROC NEAR		; CSCI_BHead::get_pMouthView, COMDAT

; 4430 : 	Property get_pMouthView() { return GetProperty ( s_pMouthView ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 13 03 00 00	 push	 787			; 00000313H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pMouthView@CSCI_BHead@@QAEFXZ ENDP			; CSCI_BHead::get_pMouthView
_TEXT	ENDS
;	COMDAT ?get_pFaceHairView@CSCI_BHead@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pFaceHairView@CSCI_BHead@@QAEFXZ PROC NEAR		; CSCI_BHead::get_pFaceHairView, COMDAT

; 4433 : 	Property get_pFaceHairView() { return GetProperty ( s_pFaceHairView ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 14 03 00 00	 push	 788			; 00000314H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pFaceHairView@CSCI_BHead@@QAEFXZ ENDP		; CSCI_BHead::get_pFaceHairView
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
?Set@SOL_Rect@@QAEXHHHH@Z PROC NEAR			; SOL_Rect::Set, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	A.x = xa;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 75   : 	A.y = ya;

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 76   : 	B.x = xb;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 77   : 	B.y = yb;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 78   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
?Set@SOL_Rect@@QAEXHHHH@Z ENDP				; SOL_Rect::Set
_TEXT	ENDS
;	COMDAT ?IsEmpty@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsEmpty@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::IsEmpty, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 	if (B.x < A.x  ||  B.y < A.y)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00010	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00012	7c 0e		 jl	 SHORT $L139553
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0001d	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00020	7d 07		 jge	 SHORT $L139552
$L139553:

; 118  : 		return True;

  00022	b8 01 00 00 00	 mov	 eax, 1
  00027	eb 02		 jmp	 SHORT $L139551
$L139552:

; 119  : 	return False;

  00029	33 c0		 xor	 eax, eax
$L139551:

; 120  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?IsEmpty@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::IsEmpty
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Xlen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Xlen, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	return B.x - A.x + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	83 c0 01	 add	 eax, 1

; 155  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?Xlen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Xlen
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Ylen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Ylen, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 	return B.y - A.y + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	83 c0 01	 add	 eax, 1

; 163  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Ylen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Ylen
_TEXT	ENDS
;	COMDAT ?MoveTo@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_this$ = -4
?MoveTo@SOL_Rect@@QAEXHH@Z PROC NEAR			; SOL_Rect::MoveTo, COMDAT

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 296  : 	B.x += xa - A.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  0000d	2b 08		 sub	 ecx, DWORD PTR [eax]
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00015	03 c1		 add	 eax, ecx
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 297  : 	B.y += ya - A.y;

  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00023	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0002c	03 d0		 add	 edx, eax
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 298  : 	A.x = xa;

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 55 08	 mov	 edx, DWORD PTR _xa$[ebp]
  0003a	89 11		 mov	 DWORD PTR [ecx], edx

; 299  : 	A.y = ya;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _ya$[ebp]
  00042	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 300  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
?MoveTo@SOL_Rect@@QAEXHH@Z ENDP				; SOL_Rect::MoveTo
_TEXT	ENDS
;	COMDAT ?ResX@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?ResX@CelObj@@QBEHXZ PROC NEAR				; CelObj::ResX, COMDAT

; 181  : 	int	ResX() const			{return resx;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?ResX@CelObj@@QBEHXZ ENDP				; CelObj::ResX
_TEXT	ENDS
;	COMDAT ?ResY@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?ResY@CelObj@@QBEHXZ PROC NEAR				; CelObj::ResY, COMDAT

; 182  : 	int	ResY() const			{return resy;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?ResY@CelObj@@QBEHXZ ENDP				; CelObj::ResY
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4
?Skip@CelObj@@QBEEXZ PROC NEAR				; CelObj::Skip, COMDAT

; 184  : 	uchar	Skip() const			{return skip;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 40 38	 mov	 al, BYTE PTR [eax+56]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Skip@CelObj@@QBEEXZ ENDP				; CelObj::Skip
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObjMem@@UAE@XZ PROC NEAR				; CelObjMem::~CelObjMem, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CelObjMem@@UAE@XZ ENDP				; CelObjMem::~CelObjMem
_TEXT	ENDS
PUBLIC	?BuildHeader@@YAXPAEHHHHHHHHH@Z			; BuildHeader
;	COMDAT ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z
_TEXT	SEGMENT
_bm$ = 8
_width$ = 12
_height$ = 16
_skip$ = 20
_xHot$ = 24
_yHot$ = 28
_xRes$ = 32
_yRes$ = 36
_palFlag$ = 40
_remap$ = 44
?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z PROC NEAR		; BuildHeader, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 	BuildHeader((uchar*) *bm, width, height, skip, xHot, yHot, xRes, yRes, palFlag, remap);

  00003	8b 45 2c	 mov	 eax, DWORD PTR _remap$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 28	 mov	 ecx, DWORD PTR _palFlag$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 24	 mov	 edx, DWORD PTR _yRes$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 20	 mov	 eax, DWORD PTR _xRes$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 1c	 mov	 ecx, DWORD PTR _yHot$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 18	 mov	 edx, DWORD PTR _xHot$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 14	 mov	 eax, DWORD PTR _skip$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 10	 mov	 ecx, DWORD PTR _height$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 0c	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8d 4d 08	 lea	 ecx, DWORD PTR _bm$[ebp]
  0002a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?BuildHeader@@YAXPAEHHHHHHHHH@Z ; BuildHeader
  00035	83 c4 28	 add	 esp, 40			; 00000028H

; 43   : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ENDP		; BuildHeader
_TEXT	ENDS
;	COMDAT ??0SOL_Line@@QAE@HHHH@Z
_TEXT	SEGMENT
_x1$ = 8
_y1$ = 12
_x2$ = 16
_y2$ = 20
_this$ = -4
??0SOL_Line@@QAE@HHHH@Z PROC NEAR			; SOL_Line::SOL_Line, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 55   : 	// All lines have A.x <= B.x
; 56   : 	if (x1 <= x2) {

  0001a	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  0001d	3b 45 10	 cmp	 eax, DWORD PTR _x2$[ebp]
  00020	7f 25		 jg	 SHORT $L142506

; 57   : 		A.x=x1;

  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 55 08	 mov	 edx, DWORD PTR _x1$[ebp]
  00028	89 11		 mov	 DWORD PTR [ecx], edx

; 58   : 		A.y=y1;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _y1$[ebp]
  00030	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 59   : 		B.x=x2;

  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00039	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 60   : 		B.y=y2;

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  00042	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 62   : 	else {

  00045	eb 23		 jmp	 SHORT $L142507
$L142506:

; 63   : 		A.x=x2;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  0004d	89 08		 mov	 DWORD PTR [eax], ecx

; 64   : 		A.y=y2;

  0004f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00055	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 65   : 		B.x=x1;

  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 55 08	 mov	 edx, DWORD PTR _x1$[ebp]
  0005e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 66   : 		B.y=y1;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _y1$[ebp]
  00067	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$L142507:

; 68   : }

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 10 00	 ret	 16			; 00000010H
??0SOL_Line@@QAE@HHHH@Z ENDP				; SOL_Line::SOL_Line
_TEXT	ENDS
EXTRN	?xRes@FontMgr@@1HA:DWORD			; FontMgr::xRes
;	COMDAT ?GetXRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetXRes@FontMgr@@QBEHXZ PROC NEAR			; FontMgr::GetXRes, COMDAT

; 121  : 	int 				GetXRes() const {return xRes;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?xRes@FontMgr@@1HA ; FontMgr::xRes
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetXRes@FontMgr@@QBEHXZ ENDP				; FontMgr::GetXRes
_TEXT	ENDS
EXTRN	?yRes@FontMgr@@1HA:DWORD			; FontMgr::yRes
;	COMDAT ?GetYRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetYRes@FontMgr@@QBEHXZ PROC NEAR			; FontMgr::GetYRes, COMDAT

; 122  : 	int 				GetYRes() const {return yRes;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?yRes@FontMgr@@1HA ; FontMgr::yRes
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetYRes@FontMgr@@QBEHXZ ENDP				; FontMgr::GetYRes
_TEXT	ENDS
PUBLIC	??7MemID@@QBEHXZ				; MemID::operator!
PUBLIC	??0ArrayID@@QAE@AAVMemID@@@Z			; ArrayID::ArrayID
PUBLIC	?Data@ArrayID@@QAEPAXXZ				; ArrayID::Data
_DATA	SEGMENT
	ORG $+2
$SG144578 DB	'Invalid handle passed to RemapBitmap', 00H
	ORG $+3
$SG144584 DB	'Invalid object passed to RemapBitmap', 00H
	ORG $+3
$SG144589 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG144590 DB	'%s(%d): bitmap handle 0x%x is invalid!', 00H
_DATA	ENDS
_TEXT	SEGMENT
_BM$ = 8
_clutData$ = 12
_celHeader$ = -28
_BMWidth$ = -24
_BMHeight$ = -16
_startColor$ = -4
_data$ = -12
_size$ = -8
_i$ = -20
$T150864 = -32
$T150865 = -36
$T150866 = -40
?RemapBitmap@@YAXVMemID@@VObjectID@@@Z PROC NEAR	; RemapBitmap

; 1593 : {

  04b47	55		 push	 ebp
  04b48	8b ec		 mov	 ebp, esp
  04b4a	83 ec 28	 sub	 esp, 40			; 00000028H

; 1594 : 	if ( !clutData.IsValid() )

  04b4d	8d 4d 0c	 lea	 ecx, DWORD PTR _clutData$[ebp]
  04b50	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  04b55	85 c0		 test	 eax, eax
  04b57	75 13		 jne	 SHORT $L144577

; 1595 : 		msgMgr->Fatal ( "Invalid handle passed to RemapBitmap" );

  04b59	68 00 00 00 00	 push	 OFFSET FLAT:$SG144578
  04b5e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  04b63	50		 push	 eax
  04b64	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  04b69	83 c4 08	 add	 esp, 8
$L144577:

; 1596 : 
; 1597 : 	if ((ObjectID) clutData.IsObject())

  04b6c	8d 4d 0c	 lea	 ecx, DWORD PTR _clutData$[ebp]
  04b6f	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  04b74	50		 push	 eax
  04b75	8d 4d e0	 lea	 ecx, DWORD PTR $T150864[ebp]
  04b78	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  04b7d	8b c8		 mov	 ecx, eax
  04b7f	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04b84	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  04b89	85 c0		 test	 eax, eax
  04b8b	74 1d		 je	 SHORT $L144581

; 1598 : 		clutData = clutData.GetProperty(s_data);

  04b8d	6a 71		 push	 113			; 00000071H
  04b8f	8d 4d 0c	 lea	 ecx, DWORD PTR _clutData$[ebp]
  04b92	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  04b97	50		 push	 eax
  04b98	8d 4d dc	 lea	 ecx, DWORD PTR $T150865[ebp]
  04b9b	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  04ba0	66 8b 4d dc	 mov	 cx, WORD PTR $T150865[ebp]
  04ba4	66 89 4d 0c	 mov	 WORD PTR _clutData$[ebp], cx

; 1599 : 	else

  04ba8	eb 14		 jmp	 SHORT $L144583
$L144581:

; 1600 : 		msgMgr->Fatal ( "Invalid object passed to RemapBitmap" );

  04baa	68 00 00 00 00	 push	 OFFSET FLAT:$SG144584
  04baf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  04bb5	52		 push	 edx
  04bb6	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  04bbb	83 c4 08	 add	 esp, 8
$L144583:

; 1601 : 
; 1602 : 	if (!clutData)

  04bbe	8d 4d 0c	 lea	 ecx, DWORD PTR _clutData$[ebp]
  04bc1	e8 00 00 00 00	 call	 ??7MemID@@QBEHXZ	; MemID::operator!
  04bc6	85 c0		 test	 eax, eax
  04bc8	74 05		 je	 SHORT $L144585

; 1603 : 		return;

  04bca	e9 e3 00 00 00	 jmp	 $L144576
$L144585:

; 1604 : 
; 1605 : 	if ( !BM.IsValid() || BM.GetMemType() != MemBitmap ) 

  04bcf	8d 4d 08	 lea	 ecx, DWORD PTR _BM$[ebp]
  04bd2	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  04bd7	85 c0		 test	 eax, eax
  04bd9	74 0d		 je	 SHORT $L144587
  04bdb	8d 4d 08	 lea	 ecx, DWORD PTR _BM$[ebp]
  04bde	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  04be3	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  04be6	74 2b		 je	 SHORT $L144586
$L144587:

; 1606 : 		msgMgr->Fatal ( "%s(%d): bitmap handle 0x%x is invalid!", __FILE__, __LINE__, (SCIUWord)BM );

  04be8	8d 4d 08	 lea	 ecx, DWORD PTR _BM$[ebp]
  04beb	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04bf0	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  04bf5	50		 push	 eax
  04bf6	68 46 06 00 00	 push	 1606			; 00000646H
  04bfb	68 00 00 00 00	 push	 OFFSET FLAT:$SG144589
  04c00	68 00 00 00 00	 push	 OFFSET FLAT:$SG144590
  04c05	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  04c0a	50		 push	 eax
  04c0b	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  04c10	83 c4 14	 add	 esp, 20			; 00000014H
$L144586:

; 1607 : 
; 1608 : 	CelHeader* celHeader = ((CelHeader*) memMgr->GetAddr(BM));

  04c13	8d 4d 08	 lea	 ecx, DWORD PTR _BM$[ebp]
  04c16	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04c1b	50		 push	 eax
  04c1c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  04c22	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  04c27	89 45 e4	 mov	 DWORD PTR _celHeader$[ebp], eax

; 1609 : 	int BMWidth  = celHeader->xDim;

  04c2a	8b 4d e4	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  04c2d	33 d2		 xor	 edx, edx
  04c2f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  04c32	89 55 e8	 mov	 DWORD PTR _BMWidth$[ebp], edx

; 1610 : 	int BMHeight = celHeader->yDim;

  04c35	8b 45 e4	 mov	 eax, DWORD PTR _celHeader$[ebp]
  04c38	33 c9		 xor	 ecx, ecx
  04c3a	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  04c3e	89 4d f0	 mov	 DWORD PTR _BMHeight$[ebp], ecx

; 1611 : 
; 1612 : 	// setup pointers to BM and data block
; 1613 : 	uchar* startColor = (uchar*) (memMgr->GetAddr(BM)) +CELHEADERSIZE;

  04c41	8d 4d 08	 lea	 ecx, DWORD PTR _BM$[ebp]
  04c44	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04c49	50		 push	 eax
  04c4a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  04c50	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  04c55	83 c0 2e	 add	 eax, 46			; 0000002eH
  04c58	89 45 fc	 mov	 DWORD PTR _startColor$[ebp], eax

; 1614 : 	uchar* data = (uchar*) ArrayID(clutData).Data();

  04c5b	8d 55 0c	 lea	 edx, DWORD PTR _clutData$[ebp]
  04c5e	52		 push	 edx
  04c5f	8d 4d d8	 lea	 ecx, DWORD PTR $T150866[ebp]
  04c62	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@AAVMemID@@@Z ; ArrayID::ArrayID
  04c67	8b c8		 mov	 ecx, eax
  04c69	e8 00 00 00 00	 call	 ?Data@ArrayID@@QAEPAXXZ	; ArrayID::Data
  04c6e	89 45 f4	 mov	 DWORD PTR _data$[ebp], eax

; 1615 : 	int size = BMWidth * BMHeight;

  04c71	8b 45 e8	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  04c74	0f af 45 f0	 imul	 eax, DWORD PTR _BMHeight$[ebp]
  04c78	89 45 f8	 mov	 DWORD PTR _size$[ebp], eax

; 1616 : 
; 1617 : // VC FIX 	doRemap ( (char *)startColor, (char *)data, size );
; 1618 : 
; 1619 : #if 1
; 1620 : 	// Go through each pixel and remap the color to CLUT 
; 1621 : 	for ( int i=0; i<size; i++ )

  04c7b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  04c82	eb 09		 jmp	 SHORT $L144602
$L144603:
  04c84	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  04c87	83 c1 01	 add	 ecx, 1
  04c8a	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
$L144602:
  04c8d	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  04c90	3b 55 f8	 cmp	 edx, DWORD PTR _size$[ebp]
  04c93	7d 1d		 jge	 SHORT $L144604

; 1622 : 		*startColor++ = data[*startColor];

  04c95	8b 45 fc	 mov	 eax, DWORD PTR _startColor$[ebp]
  04c98	33 c9		 xor	 ecx, ecx
  04c9a	8a 08		 mov	 cl, BYTE PTR [eax]
  04c9c	8b 55 fc	 mov	 edx, DWORD PTR _startColor$[ebp]
  04c9f	8b 45 f4	 mov	 eax, DWORD PTR _data$[ebp]
  04ca2	8a 0c 08	 mov	 cl, BYTE PTR [eax+ecx]
  04ca5	88 0a		 mov	 BYTE PTR [edx], cl
  04ca7	8b 55 fc	 mov	 edx, DWORD PTR _startColor$[ebp]
  04caa	83 c2 01	 add	 edx, 1
  04cad	89 55 fc	 mov	 DWORD PTR _startColor$[ebp], edx
  04cb0	eb d2		 jmp	 SHORT $L144603
$L144604:
$L144576:

; 1623 : #endif
; 1624 : }

  04cb2	8b e5		 mov	 esp, ebp
  04cb4	5d		 pop	 ebp
  04cb5	c3		 ret	 0
?RemapBitmap@@YAXVMemID@@VObjectID@@@Z ENDP		; RemapBitmap
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
??7MemID@@QBEHXZ PROC NEAR				; MemID::operator!, COMDAT

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 		return handle == 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	8b c1		 mov	 eax, ecx
  00011	f7 d8		 neg	 eax
  00013	1b c0		 sbb	 eax, eax
  00015	40		 inc	 eax

; 120  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??7MemID@@QBEHXZ ENDP					; MemID::operator!
_TEXT	ENDS
PUBLIC	??0FakeArrayID@@QAE@ABVMemID@@@Z		; FakeArrayID::FakeArrayID
;	COMDAT ??0ArrayID@@QAE@AAVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ArrayID@@QAE@AAVMemID@@@Z PROC NEAR			; ArrayID::ArrayID, COMDAT

; 37   : 	ArrayID(MemID& id) : FakeArrayID(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeArrayID@@QAE@ABVMemID@@@Z ; FakeArrayID::FakeArrayID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ArrayID@@QAE@AAVMemID@@@Z ENDP			; ArrayID::ArrayID
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0FakeArrayID@@QAE@ABVMemID@@@Z PROC NEAR		; FakeArrayID::FakeArrayID, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeArrayID@@QAE@ABVMemID@@@Z ENDP			; FakeArrayID::FakeArrayID
_TEXT	ENDS
PUBLIC	??DFakeArrayID@@QBEPAUArrayHeader@@XZ		; FakeArrayID::operator*
;	COMDAT ?Data@ArrayID@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4
?Data@ArrayID@@QAEPAXXZ PROC NEAR			; ArrayID::Data, COMDAT

; 64   : 	void *Data ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 		return ((char *)**this) + sizeof ( ArrayHeader );

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DFakeArrayID@@QBEPAUArrayHeader@@XZ ; FakeArrayID::operator*
  0000f	83 c0 04	 add	 eax, 4

; 66   : 	}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Data@ArrayID@@QAEPAXXZ ENDP				; ArrayID::Data
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT
_this$ = -4
??DFakeArrayID@@QBEPAUArrayHeader@@XZ PROC NEAR		; FakeArrayID::operator*, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??DFakeArrayID@@QBEPAUArrayHeader@@XZ ENDP		; FakeArrayID::operator*
_TEXT	ENDS
PUBLIC	?Length@PlaneList@@QBEHXZ			; PlaneList::Length
PUBLIC	??APlaneList@@QAEAAVSOL_Plane@@H@Z		; PlaneList::operator[]
PUBLIC	?Planes@Screen@@QAEAAVPlaneList@@XZ		; Screen::Planes
PUBLIC	?Id@SOL_Plane@@QBEJXZ				; SOL_Plane::Id
PUBLIC	?KDeleteScreenItem@@YAXPAF@Z			; KDeleteScreenItem
PUBLIC	?ClearInSIList@Object@@QAEXXZ			; Object::ClearInSIList
EXTRN	?DeleteScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@H@Z:NEAR ; GraphicsMgr::DeleteScreenItem
_TEXT	SEGMENT
_args$ = 8
_id$ = -20
_planeId$ = -16
_planes$ = -8
_size$ = -4
_i$ = -12
_plane$144618 = -24
_si$144619 = -28
?KDeleteScreenItem@@YAXPAF@Z PROC NEAR			; KDeleteScreenItem

; 1629 : {

  04cb6	55		 push	 ebp
  04cb7	8b ec		 mov	 ebp, esp
  04cb9	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 1630 : 	// Input
; 1631 : 	//      arg1-----the SCI Object
; 1632 :  
; 1633 : 	ObjectID id = arg(1);

  04cbc	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04cbf	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  04cc3	51		 push	 ecx
  04cc4	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04cc7	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 1634 : 
; 1635 : 	id->ClearInSIList();

  04ccc	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04ccf	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  04cd4	8b c8		 mov	 ecx, eax
  04cd6	e8 00 00 00 00	 call	 ?ClearInSIList@Object@@QAEXXZ ; Object::ClearInSIList

; 1636 : 
; 1637 : 	int planeId = (int)(unsigned short)id.GetIndexedProperty(actPlaneID);

  04cdb	6a 1a		 push	 26			; 0000001aH
  04cdd	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04ce0	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  04ce5	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  04cea	89 45 f0	 mov	 DWORD PTR _planeId$[ebp], eax

; 1638 : 
; 1639 : 	PlaneList *planes = &graphMgr->NextScreen()->Planes();

  04ced	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04cf3	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  04cf8	8b c8		 mov	 ecx, eax
  04cfa	e8 00 00 00 00	 call	 ?Planes@Screen@@QAEAAVPlaneList@@XZ ; Screen::Planes
  04cff	89 45 f8	 mov	 DWORD PTR _planes$[ebp], eax

; 1640 : 	int size = planes->Length();

  04d02	8b 4d f8	 mov	 ecx, DWORD PTR _planes$[ebp]
  04d05	e8 00 00 00 00	 call	 ?Length@PlaneList@@QBEHXZ ; PlaneList::Length
  04d0a	89 45 fc	 mov	 DWORD PTR _size$[ebp], eax

; 1641 : 
; 1642 : 	for ( int i=0; i<size; i++ ) {

  04d0d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  04d14	eb 09		 jmp	 SHORT $L144615
$L144616:
  04d16	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  04d19	83 c2 01	 add	 edx, 1
  04d1c	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L144615:
  04d1f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  04d22	3b 45 fc	 cmp	 eax, DWORD PTR _size$[ebp]
  04d25	7d 5b		 jge	 SHORT $L144617

; 1643 : 		SOL_Plane *plane = &(*planes)[i];

  04d27	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  04d2a	51		 push	 ecx
  04d2b	8b 4d f8	 mov	 ecx, DWORD PTR _planes$[ebp]
  04d2e	e8 00 00 00 00	 call	 ??APlaneList@@QAEAAVSOL_Plane@@H@Z ; PlaneList::operator[]
  04d33	89 45 e8	 mov	 DWORD PTR _plane$144618[ebp], eax

; 1644 : 
; 1645 : 		ScreenItem *si = graphMgr->NextScreen()->GetScreenItem ( plane->Id(), id );

  04d36	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04d39	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04d3e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  04d43	50		 push	 eax
  04d44	8b 4d e8	 mov	 ecx, DWORD PTR _plane$144618[ebp]
  04d47	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id
  04d4c	50		 push	 eax
  04d4d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04d53	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  04d58	8b c8		 mov	 ecx, eax
  04d5a	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  04d5f	89 45 e4	 mov	 DWORD PTR _si$144619[ebp], eax

; 1646 : 
; 1647 : 		if ( si )

  04d62	83 7d e4 00	 cmp	 DWORD PTR _si$144619[ebp], 0
  04d66	74 18		 je	 SHORT $L144620

; 1648 : 			graphMgr->DeleteScreenItem ( si, plane->Id() );

  04d68	8b 4d e8	 mov	 ecx, DWORD PTR _plane$144618[ebp]
  04d6b	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id
  04d70	50		 push	 eax
  04d71	8b 55 e4	 mov	 edx, DWORD PTR _si$144619[ebp]
  04d74	52		 push	 edx
  04d75	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04d7b	e8 00 00 00 00	 call	 ?DeleteScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@H@Z ; GraphicsMgr::DeleteScreenItem
$L144620:

; 1649 : 	}

  04d80	eb 94		 jmp	 SHORT $L144616
$L144617:

; 1650 : }

  04d82	8b e5		 mov	 esp, ebp
  04d84	5d		 pop	 ebp
  04d85	c3		 ret	 0
?KDeleteScreenItem@@YAXPAF@Z ENDP			; KDeleteScreenItem
_TEXT	ENDS
;	COMDAT ?ClearInSIList@Object@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?ClearInSIList@Object@@QAEXXZ PROC NEAR			; Object::ClearInSIList, COMDAT

; 100  : 	void		ClearInSIList()			{ info &= ~IN_SILIST; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  0000e	80 e1 ef	 and	 cl, -17			; ffffffefH
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?ClearInSIList@Object@@QAEXXZ ENDP			; Object::ClearInSIList
_TEXT	ENDS
;	COMDAT ?Id@SOL_Plane@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Id@SOL_Plane@@QBEJXZ PROC NEAR				; SOL_Plane::Id, COMDAT

; 64   : 	long				Id() const					{return planeId;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?Id@SOL_Plane@@QBEJXZ ENDP				; SOL_Plane::Id
_TEXT	ENDS
;	COMDAT ?Length@PlaneList@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Length@PlaneList@@QBEHXZ PROC NEAR			; PlaneList::Length, COMDAT

; 22   : 	int	Length() const								{return length;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 90 01 00
	00		 mov	 eax, DWORD PTR [eax+400]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?Length@PlaneList@@QBEHXZ ENDP				; PlaneList::Length
_TEXT	ENDS
;	COMDAT ??APlaneList@@QAEAAVSOL_Plane@@H@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
??APlaneList@@QAEAAVSOL_Plane@@H@Z PROC NEAR		; PlaneList::operator[], COMDAT

; 29   : 	SOL_Plane& operator[](int index) 					{return *planeArray[index];}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??APlaneList@@QAEAAVSOL_Plane@@H@Z ENDP			; PlaneList::operator[]
_TEXT	ENDS
;	COMDAT ?Planes@Screen@@QAEAAVPlaneList@@XZ
_TEXT	SEGMENT
_this$ = -4
?Planes@Screen@@QAEAAVPlaneList@@XZ PROC NEAR		; Screen::Planes, COMDAT

; 37   : 	PlaneList& Planes() 						{return planes;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?Planes@Screen@@QAEAAVPlaneList@@XZ ENDP		; Screen::Planes
_TEXT	ENDS
PUBLIC	?Free@MemID@@QAEXXZ				; MemID::Free
PUBLIC	?Type@Bitmap@@QBEHXZ				; Bitmap::Type
PUBLIC	?KDeleteLine@@YAXPAF@Z				; KDeleteLine
PUBLIC	?Handle@Bitmap@@QBE?AVMemID@@XZ			; Bitmap::Handle
_DATA	SEGMENT
	ORG $+1
$SG144629 DB	'DeleteLine: unable to find SI!', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_args$ = 8
_lineID$ = -4
_si$ = -8
$T150879 = -12
?KDeleteLine@@YAXPAF@Z PROC NEAR			; KDeleteLine

; 1654 : {

  04d86	55		 push	 ebp
  04d87	8b ec		 mov	 ebp, esp
  04d89	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1655 : 	// Input
; 1656 : 	//      arg1-----the ScreenLine ID
; 1657 : 	//      arg2-----the plane ID
; 1658 :  
; 1659 : 	// Get the existing screen item
; 1660 : 	long lineID = ((long)(unsigned short)arg(1)) | 0x10000;

  04d8c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04d8f	33 c9		 xor	 ecx, ecx
  04d91	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  04d95	81 c9 00 00 01
	00		 or	 ecx, 65536		; 00010000H
  04d9b	89 4d fc	 mov	 DWORD PTR _lineID$[ebp], ecx

; 1661 : 	ScreenItem* si = graphMgr->NextScreen()->GetScreenItem ( arg(2), lineID );

  04d9e	8b 55 fc	 mov	 edx, DWORD PTR _lineID$[ebp]
  04da1	52		 push	 edx
  04da2	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04da5	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  04da9	51		 push	 ecx
  04daa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04db0	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  04db5	8b c8		 mov	 ecx, eax
  04db7	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  04dbc	89 45 f8	 mov	 DWORD PTR _si$[ebp], eax

; 1662 : 
; 1663 : 	if (si == NULL) {

  04dbf	83 7d f8 00	 cmp	 DWORD PTR _si$[ebp], 0
  04dc3	75 16		 jne	 SHORT $L144628

; 1664 : 		msgMgr->Mono ( "DeleteLine: unable to find SI!\n" );

  04dc5	68 00 00 00 00	 push	 OFFSET FLAT:$SG144629
  04dca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  04dd0	52		 push	 edx
  04dd1	e8 00 00 00 00	 call	 ?Mono@MsgMgr@@QAAXPADZZ	; MsgMgr::Mono
  04dd6	83 c4 08	 add	 esp, 8

; 1665 : 		return;														  

  04dd9	eb 3d		 jmp	 SHORT $L144623
$L144628:

; 1667 : 
; 1668 : 	// Get rid of old bitmap
; 1669 : 	if (si->bitmap.Type() == Bitmap::tMem) {

  04ddb	8b 4d f8	 mov	 ecx, DWORD PTR _si$[ebp]
  04dde	83 c1 0c	 add	 ecx, 12			; 0000000cH
  04de1	e8 00 00 00 00	 call	 ?Type@Bitmap@@QBEHXZ	; Bitmap::Type
  04de6	83 f8 02	 cmp	 eax, 2
  04de9	75 16		 jne	 SHORT $L144630

; 1670 : 		si->bitmap.Handle().Free();

  04deb	8d 45 f4	 lea	 eax, DWORD PTR $T150879[ebp]
  04dee	50		 push	 eax
  04def	8b 4d f8	 mov	 ecx, DWORD PTR _si$[ebp]
  04df2	83 c1 0c	 add	 ecx, 12			; 0000000cH
  04df5	e8 00 00 00 00	 call	 ?Handle@Bitmap@@QBE?AVMemID@@XZ ; Bitmap::Handle
  04dfa	8b c8		 mov	 ecx, eax
  04dfc	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free
$L144630:

; 1672 : 
; 1673 : 	graphMgr->DeleteScreenItem(si,(int) arg(2));

  04e01	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04e04	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  04e08	52		 push	 edx
  04e09	8b 45 f8	 mov	 eax, DWORD PTR _si$[ebp]
  04e0c	50		 push	 eax
  04e0d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04e13	e8 00 00 00 00	 call	 ?DeleteScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@H@Z ; GraphicsMgr::DeleteScreenItem
$L144623:

; 1674 : }

  04e18	8b e5		 mov	 esp, ebp
  04e1a	5d		 pop	 ebp
  04e1b	c3		 ret	 0
?KDeleteLine@@YAXPAF@Z ENDP				; KDeleteLine
_TEXT	ENDS
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Free@MemID@@QAEXXZ PROC NEAR				; MemID::Free, COMDAT

; 32   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 		if (handle) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 1a		 je	 SHORT $L113853

; 34   : 			memMgr->Free(handle);

  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	66 8b 02	 mov	 ax, WORD PTR [edx]
  00019	50		 push	 eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00020	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 35   : 			handle = 0;

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
$L113853:

; 37   : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?Free@MemID@@QAEXXZ ENDP				; MemID::Free
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Type@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Type, COMDAT

; 132  : 	int	Type() const			{return type;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?Type@Bitmap@@QBEHXZ ENDP				; Bitmap::Type
_TEXT	ENDS
;	COMDAT ?Handle@Bitmap@@QBE?AVMemID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?Handle@Bitmap@@QBE?AVMemID@@XZ PROC NEAR		; Bitmap::Handle, COMDAT

; 142  : 	MemID	Handle() const			{return memid;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 10	 add	 eax, 16			; 00000010H
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00011	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?Handle@Bitmap@@QBE?AVMemID@@XZ ENDP			; Bitmap::Handle
_TEXT	ENDS
PUBLIC	?KDeletePolygon@@YAXPAF@Z			; KDeletePolygon
_TEXT	SEGMENT
_args$ = 8
_si$ = -4
$T150884 = -8
?KDeletePolygon@@YAXPAF@Z PROC NEAR			; KDeletePolygon

; 1678 : {

  04e1c	55		 push	 ebp
  04e1d	8b ec		 mov	 ebp, esp
  04e1f	83 ec 08	 sub	 esp, 8

; 1679 : 	// Input
; 1680 : 	//      arg1-----the ScreenPolygon item ID
; 1681 : 	//      arg2-----the plane ID
; 1682 :  
; 1683 : 	// Get the existing screen item
; 1684 : 	ScreenItem* si = graphMgr->NextScreen()->GetScreenItem(arg(2),arg(1));

  04e22	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04e25	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  04e29	51		 push	 ecx
  04e2a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04e2d	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  04e31	50		 push	 eax
  04e32	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04e38	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  04e3d	8b c8		 mov	 ecx, eax
  04e3f	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  04e44	89 45 fc	 mov	 DWORD PTR _si$[ebp], eax

; 1685 : 	if (si == NULL) 

  04e47	83 7d fc 00	 cmp	 DWORD PTR _si$[ebp], 0
  04e4b	75 02		 jne	 SHORT $L144637

; 1686 : 		return;

  04e4d	eb 3d		 jmp	 SHORT $L144635
$L144637:

; 1687 : 
; 1688 : 	// Get rid of old bitmap
; 1689 : 	if (si->bitmap.Type() == Bitmap::tMem) {

  04e4f	8b 4d fc	 mov	 ecx, DWORD PTR _si$[ebp]
  04e52	83 c1 0c	 add	 ecx, 12			; 0000000cH
  04e55	e8 00 00 00 00	 call	 ?Type@Bitmap@@QBEHXZ	; Bitmap::Type
  04e5a	83 f8 02	 cmp	 eax, 2
  04e5d	75 16		 jne	 SHORT $L144638

; 1690 : 		si->bitmap.Handle().Free();

  04e5f	8d 4d f8	 lea	 ecx, DWORD PTR $T150884[ebp]
  04e62	51		 push	 ecx
  04e63	8b 4d fc	 mov	 ecx, DWORD PTR _si$[ebp]
  04e66	83 c1 0c	 add	 ecx, 12			; 0000000cH
  04e69	e8 00 00 00 00	 call	 ?Handle@Bitmap@@QBE?AVMemID@@XZ ; Bitmap::Handle
  04e6e	8b c8		 mov	 ecx, eax
  04e70	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free
$L144638:

; 1692 : 
; 1693 : 	graphMgr->DeleteScreenItem(si,(int) arg(2));

  04e75	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04e78	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  04e7c	50		 push	 eax
  04e7d	8b 4d fc	 mov	 ecx, DWORD PTR _si$[ebp]
  04e80	51		 push	 ecx
  04e81	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04e87	e8 00 00 00 00	 call	 ?DeleteScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@H@Z ; GraphicsMgr::DeleteScreenItem
$L144635:

; 1694 : }

  04e8c	8b e5		 mov	 esp, ebp
  04e8e	5d		 pop	 ebp
  04e8f	c3		 ret	 0
?KDeletePolygon@@YAXPAF@Z ENDP				; KDeletePolygon
_TEXT	ENDS
PUBLIC	??9MemID@@QBEHABV0@@Z				; MemID::operator!=
PUBLIC	?KUpdateScreenItem@@YAXPAF@Z			; KUpdateScreenItem
EXTRN	?Update@MagnifyView@@QAEXXZ:NEAR		; MagnifyView::Update
EXTRN	?Fatal@MsgMgr@@QAAXDPADH0ZZ:NEAR		; MsgMgr::Fatal
_DATA	SEGMENT
$SG144659 DB	'Magnify not registered', 00H
	ORG $+1
$SG144660 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_args$ = 8
_id$ = -4
_planeId$144646 = -8
_si$144649 = -12
_ptr$144652 = -16
_last$144653 = -20
?KUpdateScreenItem@@YAXPAF@Z PROC NEAR			; KUpdateScreenItem

; 1698 : {

  04e90	55		 push	 ebp
  04e91	8b ec		 mov	 ebp, esp
  04e93	83 ec 14	 sub	 esp, 20			; 00000014H

; 1699 : 	// Input
; 1700 : 	//      arg1-----the SCI Object
; 1701 : 
; 1702 : 	ObjectID id = arg(1);

  04e96	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04e99	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  04e9d	51		 push	 ecx
  04e9e	8d 4d fc	 lea	 ecx, DWORD PTR _id$[ebp]
  04ea1	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 1703 : 
; 1704 : 	if(!id.GetProperty(s_magnifier)) {

  04ea6	68 81 00 00 00	 push	 129			; 00000081H
  04eab	8d 4d fc	 lea	 ecx, DWORD PTR _id$[ebp]
  04eae	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  04eb3	0f bf d0	 movsx	 edx, ax
  04eb6	85 d2		 test	 edx, edx
  04eb8	75 4f		 jne	 SHORT $L144645

; 1705 : 		// UPDATE SCREEN ITEM
; 1706 : 		int planeId = (int)(unsigned short)id.GetIndexedProperty(actPlaneID);

  04eba	6a 1a		 push	 26			; 0000001aH
  04ebc	8d 4d fc	 lea	 ecx, DWORD PTR _id$[ebp]
  04ebf	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  04ec4	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  04ec9	89 45 f8	 mov	 DWORD PTR _planeId$144646[ebp], eax

; 1707 : 		ScreenItem* si = graphMgr->NextScreen()->GetScreenItem(planeId,id);

  04ecc	8d 4d fc	 lea	 ecx, DWORD PTR _id$[ebp]
  04ecf	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04ed4	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  04ed9	50		 push	 eax
  04eda	8b 45 f8	 mov	 eax, DWORD PTR _planeId$144646[ebp]
  04edd	50		 push	 eax
  04ede	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04ee4	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  04ee9	8b c8		 mov	 ecx, eax
  04eeb	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  04ef0	89 45 f4	 mov	 DWORD PTR _si$144649[ebp], eax

; 1708 : 
; 1709 : 		if (si == NULL) {

  04ef3	83 7d f4 00	 cmp	 DWORD PTR _si$144649[ebp], 0
  04ef7	75 02		 jne	 SHORT $L144650

; 1710 : // BEW			msgMgr->Fatal(SrcLoc,Msg_ScreenItemNotExist);
; 1711 : 			return;

  04ef9	eb 78		 jmp	 SHORT $L144643
$L144650:

; 1713 : 
; 1714 : //		msgMgr->Mono ( "copying object to screen item of object 0x%x\n", (SOL_Handle)id );
; 1715 : 		*si = id;

  04efb	8d 4d fc	 lea	 ecx, DWORD PTR _id$[ebp]
  04efe	51		 push	 ecx
  04eff	8b 4d f4	 mov	 ecx, DWORD PTR _si$144649[ebp]
  04f02	e8 00 00 00 00	 call	 ??4ScreenItem@@QAEAAV0@ABVObjectID@@@Z ; ScreenItem::operator=

; 1717 : 	else {

  04f07	eb 6a		 jmp	 SHORT $L144658
$L144645:

; 1718 : 		// UPDATE MAGNIFIER
; 1719 : 		// look for existing magnifier                                                  
; 1720 : 	   MagnifyView *ptr = graphMgr->magHead; 

  04f09	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04f0f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  04f12	89 45 f0	 mov	 DWORD PTR _ptr$144652[ebp], eax

; 1721 : 	   MagnifyView *last = NULL;

  04f15	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _last$144653[ebp], 0
$L144655:

; 1722 : 	   while(ptr && ptr->id != id) {

  04f1c	83 7d f0 00	 cmp	 DWORD PTR _ptr$144652[ebp], 0
  04f20	74 21		 je	 SHORT $L144656
  04f22	8d 4d fc	 lea	 ecx, DWORD PTR _id$[ebp]
  04f25	51		 push	 ecx
  04f26	8b 4d f0	 mov	 ecx, DWORD PTR _ptr$144652[ebp]
  04f29	e8 00 00 00 00	 call	 ??9MemID@@QBEHABV0@@Z	; MemID::operator!=
  04f2e	85 c0		 test	 eax, eax
  04f30	74 11		 je	 SHORT $L144656

; 1723 : 	   	last = ptr;

  04f32	8b 55 f0	 mov	 edx, DWORD PTR _ptr$144652[ebp]
  04f35	89 55 ec	 mov	 DWORD PTR _last$144653[ebp], edx

; 1724 : 		   ptr = ptr->next;

  04f38	8b 45 f0	 mov	 eax, DWORD PTR _ptr$144652[ebp]
  04f3b	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  04f3e	89 4d f0	 mov	 DWORD PTR _ptr$144652[ebp], ecx

; 1725 : 	   }

  04f41	eb d9		 jmp	 SHORT $L144655
$L144656:

; 1726 : 		if(ptr) 

  04f43	83 7d f0 00	 cmp	 DWORD PTR _ptr$144652[ebp], 0
  04f47	74 0a		 je	 SHORT $L144657

; 1727 : 			// magnifer already in list update
; 1728 : 			ptr->Update();

  04f49	8b 4d f0	 mov	 ecx, DWORD PTR _ptr$144652[ebp]
  04f4c	e8 00 00 00 00	 call	 ?Update@MagnifyView@@QAEXXZ ; MagnifyView::Update

; 1729 : 		else

  04f51	eb 20		 jmp	 SHORT $L144658
$L144657:

; 1730 : 	 		msgMgr->Fatal(SrcLoc,"Magnify not registered");

  04f53	68 00 00 00 00	 push	 OFFSET FLAT:$SG144659
  04f58	68 c2 06 00 00	 push	 1730			; 000006c2H
  04f5d	68 00 00 00 00	 push	 OFFSET FLAT:$SG144660
  04f62	6a 61		 push	 97			; 00000061H
  04f64	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  04f6a	52		 push	 edx
  04f6b	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  04f70	83 c4 14	 add	 esp, 20			; 00000014H
$L144658:
$L144643:

; 1733 : }

  04f73	8b e5		 mov	 esp, ebp
  04f75	5d		 pop	 ebp
  04f76	c3		 ret	 0
?KUpdateScreenItem@@YAXPAF@Z ENDP			; KUpdateScreenItem
_TEXT	ENDS
PUBLIC	??8MemID@@QBEHABV0@@Z				; MemID::operator==
;	COMDAT ??9MemID@@QBEHABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??9MemID@@QBEHABV0@@Z PROC NEAR				; MemID::operator!=, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 		return !(*this == id);

  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  00013	f7 d8		 neg	 eax
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 115  : 	}

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??9MemID@@QBEHABV0@@Z ENDP				; MemID::operator!=
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??8MemID@@QBEHABV0@@Z PROC NEAR				; MemID::operator==, COMDAT

; 108  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 		return handle == id.handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _id$[ebp]
  00012	33 c0		 xor	 eax, eax
  00014	66 8b 02	 mov	 ax, WORD PTR [edx]
  00017	33 d2		 xor	 edx, edx
  00019	3b c8		 cmp	 ecx, eax
  0001b	0f 94 c2	 sete	 dl
  0001e	8b c2		 mov	 eax, edx

; 110  : 	}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??8MemID@@QBEHABV0@@Z ENDP				; MemID::operator==
_TEXT	ENDS
PUBLIC	?Priority@ScreenItem@@QBEHXZ			; ScreenItem::Priority
PUBLIC	?KUpdateLine@@YAXPAF@Z				; KUpdateLine
PUBLIC	?SetHandle@Bitmap@@QAEXVMemID@@@Z		; Bitmap::SetHandle
EXTRN	?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z:NEAR ; GraphicsMgr::UpdateScreenItem
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
_DATA	SEGMENT
	ORG $+2
$SG144666 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_args$ = 8
_si$ = -40
_z$ = -32
_color$ = -20
_style$ = -44
_pattern$ = -36
_thickness$ = -24
_rect$ = -16
_BM$ = -28
$T150889 = -48
$T150890 = -52
?KUpdateLine@@YAXPAF@Z PROC NEAR			; KUpdateLine

; 1737 : {

  04f77	55		 push	 ebp
  04f78	8b ec		 mov	 ebp, esp
  04f7a	83 ec 38	 sub	 esp, 56			; 00000038H

; 1738 : 	// Input
; 1739 : 	//      arg1-----ScreenLine ID
; 1740 : 	//      arg2-----SOL_Plane ID
; 1741 : 	//      arg3-----Point A.x
; 1742 : 	//      arg4-----Point A.y
; 1743 : 	//      arg5-----Point B.x
; 1744 : 	//      arg6-----Point B.y
; 1745 : 	//		  The following arguments are optional (all or none)
; 1746 : 	//      arg7-----z
; 1747 : 	//      arg8-----color
; 1748 : 	//      arg9-----style
; 1749 : 	//      arg10----pattern  Solid=0,Dashed=1,Pattern=2};
; 1750 : 	//      arg11----thickness = 2n+1 (1->1,2->1,3->3,4->3,5->5 etc.)
; 1751 : 
; 1752 : 	// Get the existing screen item
; 1753 : 	ScreenItem* si = graphMgr->NextScreen()->GetScreenItem(arg(2),arg(1));

  04f7d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04f80	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  04f84	51		 push	 ecx
  04f85	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04f88	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  04f8c	50		 push	 eax
  04f8d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  04f93	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  04f98	8b c8		 mov	 ecx, eax
  04f9a	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  04f9f	89 45 d8	 mov	 DWORD PTR _si$[ebp], eax

; 1754 : 	if (si == NULL)

  04fa2	83 7d d8 00	 cmp	 DWORD PTR _si$[ebp], 0
  04fa6	75 1d		 jne	 SHORT $L144665

; 1755 : 		msgMgr->Fatal(SrcLoc,Msg_ScreenItemNotExist);

  04fa8	6a 6f		 push	 111			; 0000006fH
  04faa	68 db 06 00 00	 push	 1755			; 000006dbH
  04faf	68 00 00 00 00	 push	 OFFSET FLAT:$SG144666
  04fb4	6a 61		 push	 97			; 00000061H
  04fb6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  04fbc	51		 push	 ecx
  04fbd	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  04fc2	83 c4 14	 add	 esp, 20			; 00000014H
$L144665:

; 1756 : 
; 1757 : 	int	z = si->Priority();

  04fc5	8b 4d d8	 mov	 ecx, DWORD PTR _si$[ebp]
  04fc8	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  04fcd	89 45 e0	 mov	 DWORD PTR _z$[ebp], eax

; 1758 : 	uchar	color = si->color;

  04fd0	8b 55 d8	 mov	 edx, DWORD PTR _si$[ebp]
  04fd3	8a 42 30	 mov	 al, BYTE PTR [edx+48]
  04fd6	88 45 ec	 mov	 BYTE PTR _color$[ebp], al

; 1759 : 	int	style = SOL_Line::tSolid;

  04fd9	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _style$[ebp], 0

; 1760 : 	int	pattern = 0;

  04fe0	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pattern$[ebp], 0

; 1761 : 	int	thickness = 1;

  04fe7	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _thickness$[ebp], 1

; 1762 : 
; 1763 : 	if (argCount == 11) {

  04fee	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04ff1	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  04ff4	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  04ff7	75 31		 jne	 SHORT $L144672

; 1764 : 		// No default arguments
; 1765 : 		z = arg(7);

  04ff9	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04ffc	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  05000	89 4d e0	 mov	 DWORD PTR _z$[ebp], ecx

; 1766 : 		color = arg(8);

  05003	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05006	8a 42 10	 mov	 al, BYTE PTR [edx+16]
  05009	88 45 ec	 mov	 BYTE PTR _color$[ebp], al

; 1767 : 		style = arg(9);

  0500c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0500f	0f bf 51 12	 movsx	 edx, WORD PTR [ecx+18]
  05013	89 55 d4	 mov	 DWORD PTR _style$[ebp], edx

; 1768 : 		pattern = arg(10);

  05016	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05019	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  0501d	89 4d dc	 mov	 DWORD PTR _pattern$[ebp], ecx

; 1769 : 		thickness = arg(11);

  05020	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05023	0f bf 42 16	 movsx	 eax, WORD PTR [edx+22]
  05027	89 45 e8	 mov	 DWORD PTR _thickness$[ebp], eax
$L144672:

; 1771 : 		
; 1772 : 	// Convert 16 bit pattern to 32 bit pattern
; 1773 : 	pattern |= pattern << 16;

  0502a	8b 4d dc	 mov	 ecx, DWORD PTR _pattern$[ebp]
  0502d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  05030	8b 55 dc	 mov	 edx, DWORD PTR _pattern$[ebp]
  05033	0b d1		 or	 edx, ecx
  05035	89 55 dc	 mov	 DWORD PTR _pattern$[ebp], edx

; 1774 : 
; 1775 : 	SOL_Rect rect;

  05038	8d 4d f0	 lea	 ecx, DWORD PTR _rect$[ebp]
  0503b	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 1776 : 	MemID BM = BuildLineBitmap(arg(3),arg(4),arg(5),arg(6),color,style,pattern,thickness,rect);

  05040	8d 45 f0	 lea	 eax, DWORD PTR _rect$[ebp]
  05043	50		 push	 eax
  05044	8b 4d e8	 mov	 ecx, DWORD PTR _thickness$[ebp]
  05047	51		 push	 ecx
  05048	8b 55 dc	 mov	 edx, DWORD PTR _pattern$[ebp]
  0504b	52		 push	 edx
  0504c	8b 45 d4	 mov	 eax, DWORD PTR _style$[ebp]
  0504f	50		 push	 eax
  05050	8a 4d ec	 mov	 cl, BYTE PTR _color$[ebp]
  05053	51		 push	 ecx
  05054	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05057	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  0505b	50		 push	 eax
  0505c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0505f	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  05063	52		 push	 edx
  05064	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05067	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0506b	51		 push	 ecx
  0506c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0506f	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  05073	50		 push	 eax
  05074	8d 4d d0	 lea	 ecx, DWORD PTR $T150889[ebp]
  05077	51		 push	 ecx
  05078	e8 00 00 00 00	 call	 ?BuildLineBitmap@@YA?AVMemID@@HHHHEHHHAAVSOL_Rect@@@Z ; BuildLineBitmap
  0507d	83 c4 28	 add	 esp, 40			; 00000028H
  05080	50		 push	 eax
  05081	8d 4d e4	 lea	 ecx, DWORD PTR _BM$[ebp]
  05084	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 1777 : 
; 1778 : 	// Get rid of old bitmap
; 1779 : 	if (si->bitmap.Type() == Bitmap::tMem) {

  05089	8b 4d d8	 mov	 ecx, DWORD PTR _si$[ebp]
  0508c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0508f	e8 00 00 00 00	 call	 ?Type@Bitmap@@QBEHXZ	; Bitmap::Type
  05094	83 f8 02	 cmp	 eax, 2
  05097	75 16		 jne	 SHORT $L144676

; 1780 : 		si->bitmap.Handle().Free();

  05099	8d 55 cc	 lea	 edx, DWORD PTR $T150890[ebp]
  0509c	52		 push	 edx
  0509d	8b 4d d8	 mov	 ecx, DWORD PTR _si$[ebp]
  050a0	83 c1 0c	 add	 ecx, 12			; 0000000cH
  050a3	e8 00 00 00 00	 call	 ?Handle@Bitmap@@QBE?AVMemID@@XZ ; Bitmap::Handle
  050a8	8b c8		 mov	 ecx, eax
  050aa	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free
$L144676:

; 1782 : 
; 1783 : 	// Update bitmap, position, priority and color
; 1784 : 	si->bitmap.SetHandle(BM);

  050af	51		 push	 ecx
  050b0	8b cc		 mov	 ecx, esp
  050b2	8d 45 e4	 lea	 eax, DWORD PTR _BM$[ebp]
  050b5	50		 push	 eax
  050b6	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  050bb	8b 4d d8	 mov	 ecx, DWORD PTR _si$[ebp]
  050be	83 c1 0c	 add	 ecx, 12			; 0000000cH
  050c1	e8 00 00 00 00	 call	 ?SetHandle@Bitmap@@QAEXVMemID@@@Z ; Bitmap::SetHandle

; 1785 : 	si->pos.x = rect.A.x;

  050c6	8b 4d d8	 mov	 ecx, DWORD PTR _si$[ebp]
  050c9	8b 55 f0	 mov	 edx, DWORD PTR _rect$[ebp]
  050cc	89 11		 mov	 DWORD PTR [ecx], edx

; 1786 : 	si->pos.y = rect.A.y;

  050ce	8b 45 d8	 mov	 eax, DWORD PTR _si$[ebp]
  050d1	8b 4d f4	 mov	 ecx, DWORD PTR _rect$[ebp+4]
  050d4	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1787 : 	si->SetPriority(z);

  050d7	8b 55 e0	 mov	 edx, DWORD PTR _z$[ebp]
  050da	52		 push	 edx
  050db	8b 4d d8	 mov	 ecx, DWORD PTR _si$[ebp]
  050de	e8 00 00 00 00	 call	 ?SetPriority@ScreenItem@@QAEXH@Z ; ScreenItem::SetPriority

; 1788 : 	si->color = color;

  050e3	8b 45 d8	 mov	 eax, DWORD PTR _si$[ebp]
  050e6	8a 4d ec	 mov	 cl, BYTE PTR _color$[ebp]
  050e9	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1789 : 
; 1790 : 	// Set to redraw
; 1791 : 	graphMgr->UpdateScreenItem(si);

  050ec	8b 55 d8	 mov	 edx, DWORD PTR _si$[ebp]
  050ef	52		 push	 edx
  050f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  050f6	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem

; 1792 : }

  050fb	8b e5		 mov	 esp, ebp
  050fd	5d		 pop	 ebp
  050fe	c3		 ret	 0
?KUpdateLine@@YAXPAF@Z ENDP				; KUpdateLine
_TEXT	ENDS
;	COMDAT ?SetHandle@Bitmap@@QAEXVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
?SetHandle@Bitmap@@QAEXVMemID@@@Z PROC NEAR		; Bitmap::SetHandle, COMDAT

; 150  : 	void	SetHandle(MemID id)	{type = tMem; memid = id;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	66 8b 55 08	 mov	 dx, WORD PTR _id$[ebp]
  00017	66 89 51 10	 mov	 WORD PTR [ecx+16], dx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetHandle@Bitmap@@QAEXVMemID@@@Z ENDP			; Bitmap::SetHandle
_TEXT	ENDS
;	COMDAT ?Priority@ScreenItem@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Priority@ScreenItem@@QBEHXZ PROC NEAR			; ScreenItem::Priority, COMDAT

; 64   : 	int			Priority() const			{return priority;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Priority@ScreenItem@@QBEHXZ ENDP			; ScreenItem::Priority
_TEXT	ENDS
PUBLIC	?KUpdatePolygon@@YAXPAF@Z			; KUpdatePolygon
_DATA	SEGMENT
	ORG $+2
$SG144684 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_args$ = 8
_si$ = -44
_z$ = -36
_color$ = -24
_style$ = -56
_pattern$ = -40
_thickness$ = -28
_close$ = -20
_rect$ = -16
_id$ = -52
_theList$ = -48
_BM$ = -32
$T150896 = -64
$T150897 = -68
?KUpdatePolygon@@YAXPAF@Z PROC NEAR			; KUpdatePolygon

; 1796 : {

  050ff	55		 push	 ebp
  05100	8b ec		 mov	 ebp, esp
  05102	83 ec 48	 sub	 esp, 72			; 00000048H

; 1797 : 	// Input
; 1798 : 	//      arg1-----ScreenPolygon ID
; 1799 : 	//      arg2-----SOL_Plane ID
; 1800 : 	//      arg3-----Polygon list MemID
; 1801 : 	//		  The following arguments are optional (all or none)
; 1802 : 	//      arg4-----z (priority)
; 1803 : 	//      arg5-----color
; 1804 : 	//      arg6-----style  Solid=0,Dashed=1,Pattern=2
; 1805 : 	//      arg7-----pattern
; 1806 : 	//      arg8-----thickness = 2n+1 (1->1,2->1,3->3,4->3,5->5 etc.)
; 1807 : 
; 1808 : 
; 1809 : 	// Get the existing screen item
; 1810 : 	ScreenItem* si = graphMgr->NextScreen()->GetScreenItem(arg(2),arg(1));

  05105	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05108	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0510c	51		 push	 ecx
  0510d	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05110	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  05114	50		 push	 eax
  05115	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0511b	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  05120	8b c8		 mov	 ecx, eax
  05122	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  05127	89 45 d4	 mov	 DWORD PTR _si$[ebp], eax

; 1811 : 	if (si == NULL)

  0512a	83 7d d4 00	 cmp	 DWORD PTR _si$[ebp], 0
  0512e	75 1d		 jne	 SHORT $L144683

; 1812 : 		msgMgr->Fatal(SrcLoc,Msg_ScreenItemNotExist);

  05130	6a 6f		 push	 111			; 0000006fH
  05132	68 14 07 00 00	 push	 1812			; 00000714H
  05137	68 00 00 00 00	 push	 OFFSET FLAT:$SG144684
  0513c	6a 61		 push	 97			; 00000061H
  0513e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  05144	51		 push	 ecx
  05145	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  0514a	83 c4 14	 add	 esp, 20			; 00000014H
$L144683:

; 1813 : 
; 1814 : 	int	z = si->Priority();

  0514d	8b 4d d4	 mov	 ecx, DWORD PTR _si$[ebp]
  05150	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  05155	89 45 dc	 mov	 DWORD PTR _z$[ebp], eax

; 1815 : 	uchar	color = si->color;

  05158	8b 55 d4	 mov	 edx, DWORD PTR _si$[ebp]
  0515b	8a 42 30	 mov	 al, BYTE PTR [edx+48]
  0515e	88 45 e8	 mov	 BYTE PTR _color$[ebp], al

; 1816 : 	int	style = SOL_Line::tSolid;

  05161	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _style$[ebp], 0

; 1817 : 	int	pattern = 0;

  05168	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pattern$[ebp], 0

; 1818 : 	int	thickness = 1;

  0516f	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _thickness$[ebp], 1

; 1819 : 	Bool	close = True;

  05176	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _close$[ebp], 1

; 1820 : 
; 1821 : 	if (argCount == 8) {

  0517d	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05180	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  05183	83 fa 08	 cmp	 edx, 8
  05186	75 31		 jne	 SHORT $L144691

; 1822 : 		// No default arguments
; 1823 : 		z = arg(4);

  05188	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0518b	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0518f	89 4d dc	 mov	 DWORD PTR _z$[ebp], ecx

; 1824 : 		color = arg(5);

  05192	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05195	8a 42 0a	 mov	 al, BYTE PTR [edx+10]
  05198	88 45 e8	 mov	 BYTE PTR _color$[ebp], al

; 1825 : 		style = arg(6);

  0519b	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0519e	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  051a2	89 55 c8	 mov	 DWORD PTR _style$[ebp], edx

; 1826 : 		pattern = arg(7);

  051a5	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  051a8	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  051ac	89 4d d8	 mov	 DWORD PTR _pattern$[ebp], ecx

; 1827 : 		thickness = arg(8);

  051af	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  051b2	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  051b6	89 45 e4	 mov	 DWORD PTR _thickness$[ebp], eax
$L144691:

; 1829 : 		
; 1830 : 	// Convert 16 bit pattern to 32 bit pattern
; 1831 : 	pattern |= pattern << 16;

  051b9	8b 4d d8	 mov	 ecx, DWORD PTR _pattern$[ebp]
  051bc	c1 e1 10	 shl	 ecx, 16			; 00000010H
  051bf	8b 55 d8	 mov	 edx, DWORD PTR _pattern$[ebp]
  051c2	0b d1		 or	 edx, ecx
  051c4	89 55 d8	 mov	 DWORD PTR _pattern$[ebp], edx

; 1832 : 
; 1833 : 	SOL_Rect rect(100000,100000,-100000,-100000);

  051c7	68 60 79 fe ff	 push	 -100000			; fffe7960H
  051cc	68 60 79 fe ff	 push	 -100000			; fffe7960H
  051d1	68 a0 86 01 00	 push	 100000			; 000186a0H
  051d6	68 a0 86 01 00	 push	 100000			; 000186a0H
  051db	8d 4d f0	 lea	 ecx, DWORD PTR _rect$[ebp]
  051de	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 1834 : 
; 1835 :    ObjectID id = arg(3);

  051e3	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  051e6	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  051ea	51		 push	 ecx
  051eb	8d 4d cc	 lea	 ecx, DWORD PTR _id$[ebp]
  051ee	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 1836 : 	SOL_ListID theList = id.GetProperty(s_elements);

  051f3	6a 24		 push	 36			; 00000024H
  051f5	8d 4d cc	 lea	 ecx, DWORD PTR _id$[ebp]
  051f8	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  051fd	50		 push	 eax
  051fe	8d 4d d0	 lea	 ecx, DWORD PTR _theList$[ebp]
  05201	e8 00 00 00 00	 call	 ??0SOL_ListID@@QAE@G@Z	; SOL_ListID::SOL_ListID

; 1837 : 
; 1838 : 	MemID BM = BuildPolygonBitmap(theList,
; 1839 : 										color,
; 1840 : 										style,
; 1841 : 										pattern,
; 1842 : 										thickness,
; 1843 : 										rect,
; 1844 : 										close);

  05206	8b 55 ec	 mov	 edx, DWORD PTR _close$[ebp]
  05209	52		 push	 edx
  0520a	8d 45 f0	 lea	 eax, DWORD PTR _rect$[ebp]
  0520d	50		 push	 eax
  0520e	8b 4d e4	 mov	 ecx, DWORD PTR _thickness$[ebp]
  05211	51		 push	 ecx
  05212	8b 55 d8	 mov	 edx, DWORD PTR _pattern$[ebp]
  05215	52		 push	 edx
  05216	8b 45 c8	 mov	 eax, DWORD PTR _style$[ebp]
  05219	50		 push	 eax
  0521a	8a 4d e8	 mov	 cl, BYTE PTR _color$[ebp]
  0521d	51		 push	 ecx
  0521e	51		 push	 ecx
  0521f	8b cc		 mov	 ecx, esp
  05221	8d 55 d0	 lea	 edx, DWORD PTR _theList$[ebp]
  05224	52		 push	 edx
  05225	e8 00 00 00 00	 call	 ??0SOL_ListID@@QAE@ABU0@@Z ; SOL_ListID::SOL_ListID
  0522a	8d 45 c0	 lea	 eax, DWORD PTR $T150896[ebp]
  0522d	50		 push	 eax
  0522e	e8 00 00 00 00	 call	 ?BuildPolygonBitmap@@YA?AVMemID@@USOL_ListID@@EHHHAAVSOL_Rect@@H@Z ; BuildPolygonBitmap
  05233	83 c4 20	 add	 esp, 32			; 00000020H
  05236	50		 push	 eax
  05237	8d 4d e0	 lea	 ecx, DWORD PTR _BM$[ebp]
  0523a	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 1845 : 
; 1846 : 	// Get rid of old bitmap
; 1847 : 	if (si->bitmap.Type() == Bitmap::tMem) {

  0523f	8b 4d d4	 mov	 ecx, DWORD PTR _si$[ebp]
  05242	83 c1 0c	 add	 ecx, 12			; 0000000cH
  05245	e8 00 00 00 00	 call	 ?Type@Bitmap@@QBEHXZ	; Bitmap::Type
  0524a	83 f8 02	 cmp	 eax, 2
  0524d	75 16		 jne	 SHORT $L144698

; 1848 : 		si->bitmap.Handle().Free();

  0524f	8d 4d bc	 lea	 ecx, DWORD PTR $T150897[ebp]
  05252	51		 push	 ecx
  05253	8b 4d d4	 mov	 ecx, DWORD PTR _si$[ebp]
  05256	83 c1 0c	 add	 ecx, 12			; 0000000cH
  05259	e8 00 00 00 00	 call	 ?Handle@Bitmap@@QBE?AVMemID@@XZ ; Bitmap::Handle
  0525e	8b c8		 mov	 ecx, eax
  05260	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free
$L144698:

; 1850 : 
; 1851 : 	// Update bitmap, position, priority and color
; 1852 : 	si->bitmap.SetHandle(BM);

  05265	51		 push	 ecx
  05266	8b cc		 mov	 ecx, esp
  05268	8d 55 e0	 lea	 edx, DWORD PTR _BM$[ebp]
  0526b	52		 push	 edx
  0526c	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  05271	8b 4d d4	 mov	 ecx, DWORD PTR _si$[ebp]
  05274	83 c1 0c	 add	 ecx, 12			; 0000000cH
  05277	e8 00 00 00 00	 call	 ?SetHandle@Bitmap@@QAEXVMemID@@@Z ; Bitmap::SetHandle

; 1853 : 	si->pos.x = rect.A.x;

  0527c	8b 45 d4	 mov	 eax, DWORD PTR _si$[ebp]
  0527f	8b 4d f0	 mov	 ecx, DWORD PTR _rect$[ebp]
  05282	89 08		 mov	 DWORD PTR [eax], ecx

; 1854 : 	si->pos.y = rect.A.y;

  05284	8b 55 d4	 mov	 edx, DWORD PTR _si$[ebp]
  05287	8b 45 f4	 mov	 eax, DWORD PTR _rect$[ebp+4]
  0528a	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1855 : 	si->SetPriority(z);

  0528d	8b 4d dc	 mov	 ecx, DWORD PTR _z$[ebp]
  05290	51		 push	 ecx
  05291	8b 4d d4	 mov	 ecx, DWORD PTR _si$[ebp]
  05294	e8 00 00 00 00	 call	 ?SetPriority@ScreenItem@@QAEXH@Z ; ScreenItem::SetPriority

; 1856 : 	si->color = color;

  05299	8b 55 d4	 mov	 edx, DWORD PTR _si$[ebp]
  0529c	8a 45 e8	 mov	 al, BYTE PTR _color$[ebp]
  0529f	88 42 30	 mov	 BYTE PTR [edx+48], al

; 1857 : 
; 1858 : 	// Set to redraw
; 1859 : 	graphMgr->UpdateScreenItem(si);

  052a2	8b 4d d4	 mov	 ecx, DWORD PTR _si$[ebp]
  052a5	51		 push	 ecx
  052a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  052ac	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem

; 1860 : }

  052b1	8b e5		 mov	 esp, ebp
  052b3	5d		 pop	 ebp
  052b4	c3		 ret	 0
?KUpdatePolygon@@YAXPAF@Z ENDP				; KUpdatePolygon
_TEXT	ENDS
PUBLIC	??_GMagnifyView@@QAEPAXI@Z			; MagnifyView::`scalar deleting destructor'
PUBLIC	?KAddMagnify@@YAXPAF@Z				; KAddMagnify
EXTRN	??0MagnifyView@@QAE@VObjectID@@PAV0@@Z:NEAR	; MagnifyView::MagnifyView
xdata$x	SEGMENT
$T150915 DD	019930520H
	DD	01H
	DD	FLAT:$T150917
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150917 DD	0ffffffffH
	DD	FLAT:$L150913
xdata$x	ENDS
_TEXT	SEGMENT
_args$ = 8
_id$ = -24
_ptr$ = -16
_last$ = -20
$T150900 = -28
$T150901 = -32
$T150904 = -36
$T150905 = -40
$T150908 = -44
$T150909 = -48
$T150910 = -52
__$EHRec$ = -12
?KAddMagnify@@YAXPAF@Z PROC NEAR			; KAddMagnify

; 1864 : {

  052b5	55		 push	 ebp
  052b6	8b ec		 mov	 ebp, esp
  052b8	6a ff		 push	 -1
  052ba	68 00 00 00 00	 push	 $L150916
  052bf	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  052c5	50		 push	 eax
  052c6	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  052cd	83 ec 34	 sub	 esp, 52			; 00000034H

; 1865 : 	// Input
; 1866 : 	//      arg1-----the SCI Object
; 1867 : 
; 1868 : 	ObjectID id = arg(1);

  052d0	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  052d3	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  052d7	51		 push	 ecx
  052d8	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  052db	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 1869 : 
; 1870 : 	// look for existing magnifier to kill if needed                                                        
; 1871 : 	MagnifyView *ptr = graphMgr->magHead; 

  052e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  052e6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  052e9	89 45 f0	 mov	 DWORD PTR _ptr$[ebp], eax

; 1872 : 	MagnifyView *last = NULL;

  052ec	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _last$[ebp], 0
$L144708:

; 1873 : 	while(ptr && ptr->id != id) {

  052f3	83 7d f0 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  052f7	74 21		 je	 SHORT $L144709
  052f9	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  052fc	51		 push	 ecx
  052fd	8b 4d f0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  05300	e8 00 00 00 00	 call	 ??9MemID@@QBEHABV0@@Z	; MemID::operator!=
  05305	85 c0		 test	 eax, eax
  05307	74 11		 je	 SHORT $L144709

; 1874 : 	last = ptr;

  05309	8b 55 f0	 mov	 edx, DWORD PTR _ptr$[ebp]
  0530c	89 55 ec	 mov	 DWORD PTR _last$[ebp], edx

; 1875 : 		ptr = ptr->next;

  0530f	8b 45 f0	 mov	 eax, DWORD PTR _ptr$[ebp]
  05312	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  05315	89 4d f0	 mov	 DWORD PTR _ptr$[ebp], ecx

; 1876 : 	}

  05318	eb d9		 jmp	 SHORT $L144708
$L144709:

; 1877 : 
; 1878 : 	// if found a ptr to delete
; 1879 : 	if (ptr) {

  0531a	83 7d f0 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  0531e	74 73		 je	 SHORT $L150907

; 1880 : 	// if last is null we're at the head of the list
; 1881 : 		if (!last) { 

  05320	83 7d ec 00	 cmp	 DWORD PTR _last$[ebp], 0
  05324	75 39		 jne	 SHORT $L144711

; 1882 : 			graphMgr->magHead = ptr->next;

  05326	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0532c	8b 45 f0	 mov	 eax, DWORD PTR _ptr$[ebp]
  0532f	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  05332	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1883 : 			delete ptr;

  05335	8b 55 f0	 mov	 edx, DWORD PTR _ptr$[ebp]
  05338	89 55 e0	 mov	 DWORD PTR $T150901[ebp], edx
  0533b	8b 45 e0	 mov	 eax, DWORD PTR $T150901[ebp]
  0533e	89 45 e4	 mov	 DWORD PTR $T150900[ebp], eax
  05341	83 7d e4 00	 cmp	 DWORD PTR $T150900[ebp], 0
  05345	74 0f		 je	 SHORT $L150902
  05347	6a 01		 push	 1
  05349	8b 4d e4	 mov	 ecx, DWORD PTR $T150900[ebp]
  0534c	e8 00 00 00 00	 call	 ??_GMagnifyView@@QAEPAXI@Z ; MagnifyView::`scalar deleting destructor'
  05351	89 45 c8	 mov	 DWORD PTR -56+[ebp], eax
  05354	eb 07		 jmp	 SHORT $L150903
$L150902:
  05356	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR -56+[ebp], 0
$L150903:

; 1884 : 		} else {   

  0535d	eb 34		 jmp	 SHORT $L150907
$L144711:

; 1885 : 			last->next = ptr->next;

  0535f	8b 4d ec	 mov	 ecx, DWORD PTR _last$[ebp]
  05362	8b 55 f0	 mov	 edx, DWORD PTR _ptr$[ebp]
  05365	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  05368	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1886 : 			delete ptr;

  0536b	8b 4d f0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  0536e	89 4d d8	 mov	 DWORD PTR $T150905[ebp], ecx
  05371	8b 55 d8	 mov	 edx, DWORD PTR $T150905[ebp]
  05374	89 55 dc	 mov	 DWORD PTR $T150904[ebp], edx
  05377	83 7d dc 00	 cmp	 DWORD PTR $T150904[ebp], 0
  0537b	74 0f		 je	 SHORT $L150906
  0537d	6a 01		 push	 1
  0537f	8b 4d dc	 mov	 ecx, DWORD PTR $T150904[ebp]
  05382	e8 00 00 00 00	 call	 ??_GMagnifyView@@QAEPAXI@Z ; MagnifyView::`scalar deleting destructor'
  05387	89 45 c4	 mov	 DWORD PTR -60+[ebp], eax
  0538a	eb 07		 jmp	 SHORT $L150907
$L150906:
  0538c	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR -60+[ebp], 0
$L150907:

; 1889 :    // Now add new magnifier
; 1890 : 	graphMgr->magHead = New MagnifyView(id,graphMgr->magHead);

  05393	6a 50		 push	 80			; 00000050H
  05395	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0539a	83 c4 04	 add	 esp, 4
  0539d	89 45 d0	 mov	 DWORD PTR $T150909[ebp], eax
  053a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  053a7	83 7d d0 00	 cmp	 DWORD PTR $T150909[ebp], 0
  053ab	74 25		 je	 SHORT $L150911
  053ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  053b2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  053b5	51		 push	 ecx
  053b6	51		 push	 ecx
  053b7	8b cc		 mov	 ecx, esp
  053b9	89 65 cc	 mov	 DWORD PTR $T150910[ebp], esp
  053bc	8d 55 e8	 lea	 edx, DWORD PTR _id$[ebp]
  053bf	52		 push	 edx
  053c0	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  053c5	8b 4d d0	 mov	 ecx, DWORD PTR $T150909[ebp]
  053c8	e8 00 00 00 00	 call	 ??0MagnifyView@@QAE@VObjectID@@PAV0@@Z ; MagnifyView::MagnifyView
  053cd	89 45 c0	 mov	 DWORD PTR -64+[ebp], eax
  053d0	eb 07		 jmp	 SHORT $L150912
$L150911:
  053d2	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR -64+[ebp], 0
$L150912:
  053d9	8b 45 c0	 mov	 eax, DWORD PTR -64+[ebp]
  053dc	89 45 d4	 mov	 DWORD PTR $T150908[ebp], eax
  053df	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  053e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  053ec	8b 55 d4	 mov	 edx, DWORD PTR $T150908[ebp]
  053ef	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1891 : }

  053f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  053f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  053fc	8b e5		 mov	 esp, ebp
  053fe	5d		 pop	 ebp
  053ff	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L150913:
  000ec	8b 45 d0	 mov	 eax, DWORD PTR $T150909[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000f5	59		 pop	 ecx
  000f6	c3		 ret	 0
$L150916:
  000f7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150915
  000fc	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KAddMagnify@@YAXPAF@Z ENDP				; KAddMagnify
EXTRN	??1MagnifyView@@QAE@XZ:NEAR			; MagnifyView::~MagnifyView
;	COMDAT ??_GMagnifyView@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GMagnifyView@@QAEPAXI@Z PROC NEAR			; MagnifyView::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1MagnifyView@@QAE@XZ	; MagnifyView::~MagnifyView
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L144725
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L144725:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GMagnifyView@@QAEPAXI@Z ENDP				; MagnifyView::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?KDeleteMagnify@@YAXPAF@Z			; KDeleteMagnify
_TEXT	SEGMENT
_args$ = 8
_id$ = -24
_ptr$ = -4
_last$ = -8
_magID$ = -20
_planeId$ = -12
_si$ = -16
$T150920 = -28
$T150921 = -32
$T150924 = -36
$T150925 = -40
?KDeleteMagnify@@YAXPAF@Z PROC NEAR			; KDeleteMagnify

; 1895 : {

  05400	55		 push	 ebp
  05401	8b ec		 mov	 ebp, esp
  05403	83 ec 30	 sub	 esp, 48			; 00000030H

; 1896 : 	// Input
; 1897 : 	//      arg1-----the SCI Object
; 1898 : 
; 1899 : 	ObjectID id = arg(1);

  05406	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05409	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  0540d	51		 push	 ecx
  0540e	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05411	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 1900 : 
; 1901 : 	// look for existing magnifier                                                  
; 1902 : 	MagnifyView *ptr = graphMgr->magHead; 

  05416	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0541c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0541f	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 1903 : 	MagnifyView *last = NULL;

  05422	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _last$[ebp], 0
$L144733:

; 1904 : 	while(ptr && ptr->id != id) {

  05429	83 7d fc 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  0542d	74 21		 je	 SHORT $L144734
  0542f	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05432	51		 push	 ecx
  05433	8b 4d fc	 mov	 ecx, DWORD PTR _ptr$[ebp]
  05436	e8 00 00 00 00	 call	 ??9MemID@@QBEHABV0@@Z	; MemID::operator!=
  0543b	85 c0		 test	 eax, eax
  0543d	74 11		 je	 SHORT $L144734

; 1905 : 		last = ptr;

  0543f	8b 55 fc	 mov	 edx, DWORD PTR _ptr$[ebp]
  05442	89 55 f8	 mov	 DWORD PTR _last$[ebp], edx

; 1906 : 		ptr = ptr->next;

  05445	8b 45 fc	 mov	 eax, DWORD PTR _ptr$[ebp]
  05448	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0544b	89 4d fc	 mov	 DWORD PTR _ptr$[ebp], ecx

; 1907 : 	}

  0544e	eb d9		 jmp	 SHORT $L144733
$L144734:

; 1908 : 	// if found a ptr to delete
; 1909 : 	if (ptr) {

  05450	83 7d fc 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  05454	74 73		 je	 SHORT $L150927

; 1910 : 		// if last is null we're at the head of the list
; 1911 : 		if (!last) { 

  05456	83 7d f8 00	 cmp	 DWORD PTR _last$[ebp], 0
  0545a	75 39		 jne	 SHORT $L144736

; 1912 : 			graphMgr->magHead = ptr->next;

  0545c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05462	8b 45 fc	 mov	 eax, DWORD PTR _ptr$[ebp]
  05465	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  05468	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1913 : 			delete ptr;

  0546b	8b 55 fc	 mov	 edx, DWORD PTR _ptr$[ebp]
  0546e	89 55 e0	 mov	 DWORD PTR $T150921[ebp], edx
  05471	8b 45 e0	 mov	 eax, DWORD PTR $T150921[ebp]
  05474	89 45 e4	 mov	 DWORD PTR $T150920[ebp], eax
  05477	83 7d e4 00	 cmp	 DWORD PTR $T150920[ebp], 0
  0547b	74 0f		 je	 SHORT $L150922
  0547d	6a 01		 push	 1
  0547f	8b 4d e4	 mov	 ecx, DWORD PTR $T150920[ebp]
  05482	e8 00 00 00 00	 call	 ??_GMagnifyView@@QAEPAXI@Z ; MagnifyView::`scalar deleting destructor'
  05487	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  0548a	eb 07		 jmp	 SHORT $L150923
$L150922:
  0548c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR -44+[ebp], 0
$L150923:

; 1914 : 		} else {   

  05493	eb 34		 jmp	 SHORT $L150927
$L144736:

; 1915 : 			last->next = ptr->next;

  05495	8b 4d f8	 mov	 ecx, DWORD PTR _last$[ebp]
  05498	8b 55 fc	 mov	 edx, DWORD PTR _ptr$[ebp]
  0549b	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0549e	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 1916 : 			delete ptr;

  054a1	8b 4d fc	 mov	 ecx, DWORD PTR _ptr$[ebp]
  054a4	89 4d d8	 mov	 DWORD PTR $T150925[ebp], ecx
  054a7	8b 55 d8	 mov	 edx, DWORD PTR $T150925[ebp]
  054aa	89 55 dc	 mov	 DWORD PTR $T150924[ebp], edx
  054ad	83 7d dc 00	 cmp	 DWORD PTR $T150924[ebp], 0
  054b1	74 0f		 je	 SHORT $L150926
  054b3	6a 01		 push	 1
  054b5	8b 4d dc	 mov	 ecx, DWORD PTR $T150924[ebp]
  054b8	e8 00 00 00 00	 call	 ??_GMagnifyView@@QAEPAXI@Z ; MagnifyView::`scalar deleting destructor'
  054bd	89 45 d0	 mov	 DWORD PTR -48+[ebp], eax
  054c0	eb 07		 jmp	 SHORT $L150927
$L150926:
  054c2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR -48+[ebp], 0
$L150927:

; 1919 : 
; 1920 : 	ObjectID magID(id.GetProperty(s_client));

  054c9	6a 36		 push	 54			; 00000036H
  054cb	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  054ce	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  054d3	50		 push	 eax
  054d4	8d 4d ec	 lea	 ecx, DWORD PTR _magID$[ebp]
  054d7	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 1921 : 	id->ClearInSIList();

  054dc	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  054df	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  054e4	8b c8		 mov	 ecx, eax
  054e6	e8 00 00 00 00	 call	 ?ClearInSIList@Object@@QAEXXZ ; Object::ClearInSIList

; 1922 : 
; 1923 : 	int planeId = magID.GetIndexedProperty(actPlaneID);

  054eb	6a 1a		 push	 26			; 0000001aH
  054ed	8d 4d ec	 lea	 ecx, DWORD PTR _magID$[ebp]
  054f0	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  054f5	0f bf c0	 movsx	 eax, ax
  054f8	89 45 f4	 mov	 DWORD PTR _planeId$[ebp], eax

; 1924 : 
; 1925 : 	ScreenItem* si = graphMgr->NextScreen()->GetScreenItem(planeId,id);

  054fb	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  054fe	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  05503	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  05508	50		 push	 eax
  05509	8b 4d f4	 mov	 ecx, DWORD PTR _planeId$[ebp]
  0550c	51		 push	 ecx
  0550d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05513	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  05518	8b c8		 mov	 ecx, eax
  0551a	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  0551f	89 45 f0	 mov	 DWORD PTR _si$[ebp], eax

; 1926 : 	if (si == NULL)

  05522	83 7d f0 00	 cmp	 DWORD PTR _si$[ebp], 0
  05526	75 02		 jne	 SHORT $L144745

; 1927 :       // ignore
; 1928 :       return;

  05528	eb 13		 jmp	 SHORT $L144728
$L144745:

; 1929 : 	graphMgr->DeleteScreenItem(si,planeId);

  0552a	8b 55 f4	 mov	 edx, DWORD PTR _planeId$[ebp]
  0552d	52		 push	 edx
  0552e	8b 45 f0	 mov	 eax, DWORD PTR _si$[ebp]
  05531	50		 push	 eax
  05532	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05538	e8 00 00 00 00	 call	 ?DeleteScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@H@Z ; GraphicsMgr::DeleteScreenItem
$L144728:

; 1930 : }

  0553d	8b e5		 mov	 esp, ebp
  0553f	5d		 pop	 ebp
  05540	c3		 ret	 0
?KDeleteMagnify@@YAXPAF@Z ENDP				; KDeleteMagnify
_TEXT	ENDS
PUBLIC	?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z	; GraphicsMgr::AddPlane
PUBLIC	?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z	; GraphicsMgr::GetPlaneNext
PUBLIC	?KAddPlane@@YAXPAF@Z				; KAddPlane
EXTRN	?UpdatePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z:NEAR ; GraphicsMgr::UpdatePlane
EXTRN	??0SOL_Plane@@QAE@VObjectID@@@Z:NEAR		; SOL_Plane::SOL_Plane
EXTRN	??4SOL_Plane@@QAEAAV0@AAVObjectID@@@Z:NEAR	; SOL_Plane::operator=
xdata$x	SEGMENT
$T150938 DD	019930520H
	DD	01H
	DD	FLAT:$T150940
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150940 DD	0ffffffffH
	DD	FLAT:$L150936
xdata$x	ENDS
_TEXT	SEGMENT
_args$ = 8
_id$ = -20
_plane$ = -16
$T150929 = -24
$T150930 = -28
$T150931 = -32
$T150932 = -36
$T150933 = -40
__$EHRec$ = -12
?KAddPlane@@YAXPAF@Z PROC NEAR				; KAddPlane

; 1934 : {

  05541	55		 push	 ebp
  05542	8b ec		 mov	 ebp, esp
  05544	6a ff		 push	 -1
  05546	68 00 00 00 00	 push	 $L150939
  0554b	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05551	50		 push	 eax
  05552	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05559	83 ec 20	 sub	 esp, 32			; 00000020H

; 1935 : 	// Input
; 1936 : 	//      arg1-----an SCI plane Object
; 1937 : 	// Ouput
; 1938 : 	//      none
; 1939 : 
; 1940 : 	ObjectID id = (ObjectID) arg(1);

  0555c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0555f	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  05563	51		 push	 ecx
  05564	8d 4d e8	 lea	 ecx, DWORD PTR $T150929[ebp]
  05567	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0556c	50		 push	 eax
  0556d	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  05570	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID

; 1941 : 
; 1942 : 	SOL_Plane* plane = graphMgr->GetPlaneNext(id);

  05575	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  05578	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0557d	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  05582	50		 push	 eax
  05583	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05589	e8 00 00 00 00	 call	 ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::GetPlaneNext
  0558e	89 45 f0	 mov	 DWORD PTR _plane$[ebp], eax

; 1943 : 	if (plane == NULL) {

  05591	83 7d f0 00	 cmp	 DWORD PTR _plane$[ebp], 0
  05595	75 71		 jne	 SHORT $L144753

; 1944 : 		plane = New SOL_Plane((ObjectID) arg(1));

  05597	68 c8 9c 00 00	 push	 40136			; 00009cc8H
  0559c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  055a1	83 c4 04	 add	 esp, 4
  055a4	89 45 e0	 mov	 DWORD PTR $T150931[ebp], eax
  055a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  055ae	83 7d e0 00	 cmp	 DWORD PTR $T150931[ebp], 0
  055b2	74 29		 je	 SHORT $L150934
  055b4	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  055b7	66 8b 42 02	 mov	 ax, WORD PTR [edx+2]
  055bb	50		 push	 eax
  055bc	8d 4d d8	 lea	 ecx, DWORD PTR $T150933[ebp]
  055bf	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  055c4	51		 push	 ecx
  055c5	8b cc		 mov	 ecx, esp
  055c7	89 65 dc	 mov	 DWORD PTR $T150932[ebp], esp
  055ca	50		 push	 eax
  055cb	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  055d0	8b 4d e0	 mov	 ecx, DWORD PTR $T150931[ebp]
  055d3	e8 00 00 00 00	 call	 ??0SOL_Plane@@QAE@VObjectID@@@Z ; SOL_Plane::SOL_Plane
  055d8	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  055db	eb 07		 jmp	 SHORT $L150935
$L150934:
  055dd	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR -44+[ebp], 0
$L150935:
  055e4	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  055e7	89 4d e4	 mov	 DWORD PTR $T150930[ebp], ecx
  055ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  055f1	8b 55 e4	 mov	 edx, DWORD PTR $T150930[ebp]
  055f4	89 55 f0	 mov	 DWORD PTR _plane$[ebp], edx

; 1945 : 		// add the plane
; 1946 : 		graphMgr->AddPlane(plane);

  055f7	8b 45 f0	 mov	 eax, DWORD PTR _plane$[ebp]
  055fa	50		 push	 eax
  055fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05601	e8 00 00 00 00	 call	 ?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::AddPlane

; 1948 : 	else {

  05606	eb 1b		 jmp	 SHORT $L144761
$L144753:

; 1949 : 		// Change add to update
; 1950 : 		// Put new data into plane
; 1951 : 		*plane = id;

  05608	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0560b	51		 push	 ecx
  0560c	8b 4d f0	 mov	 ecx, DWORD PTR _plane$[ebp]
  0560f	e8 00 00 00 00	 call	 ??4SOL_Plane@@QAEAAV0@AAVObjectID@@@Z ; SOL_Plane::operator=

; 1952 : 
; 1953 : 		graphMgr->UpdatePlane(plane);

  05614	8b 55 f0	 mov	 edx, DWORD PTR _plane$[ebp]
  05617	52		 push	 edx
  05618	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0561e	e8 00 00 00 00	 call	 ?UpdatePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::UpdatePlane
$L144761:

; 1955 : }

  05623	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05626	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0562d	8b e5		 mov	 esp, ebp
  0562f	5d		 pop	 ebp
  05630	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L150936:
  00101	8b 45 e0	 mov	 eax, DWORD PTR $T150931[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010a	59		 pop	 ecx
  0010b	c3		 ret	 0
$L150939:
  0010c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150938
  00111	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KAddPlane@@YAXPAF@Z ENDP				; KAddPlane
EXTRN	?AddPlane@Screen@@QAEXPAVSOL_Plane@@@Z:NEAR	; Screen::AddPlane
;	COMDAT ?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z
_TEXT	SEGMENT
_plane$ = 8
_this$ = -4
?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z PROC NEAR	; GraphicsMgr::AddPlane, COMDAT

; 59   : 	void		AddPlane(SOL_Plane* plane)				{next.AddPlane(plane);}	// cant be const

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e8 00 00 00 00	 call	 ?AddPlane@Screen@@QAEXPAVSOL_Plane@@@Z ; Screen::AddPlane
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ENDP	; GraphicsMgr::AddPlane
_TEXT	ENDS
EXTRN	?GetPlane@Screen@@QAEPAVSOL_Plane@@H@Z:NEAR	; Screen::GetPlane
;	COMDAT ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z
_TEXT	SEGMENT
_planeId$ = 8
_this$ = -4
?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z PROC NEAR ; GraphicsMgr::GetPlaneNext, COMDAT

; 69   : 	SOL_Plane* 	GetPlaneNext(int planeId) 			{return next.GetPlane(planeId);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _planeId$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e8 00 00 00 00	 call	 ?GetPlane@Screen@@QAEPAVSOL_Plane@@H@Z ; Screen::GetPlane
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ENDP	; GraphicsMgr::GetPlaneNext
_TEXT	ENDS
PUBLIC	?KDeletePlane@@YAXPAF@Z				; KDeletePlane
EXTRN	?DeletePlane@GraphicsMgr@@QAEXH@Z:NEAR		; GraphicsMgr::DeletePlane
_TEXT	SEGMENT
_args$ = 8
_id$ = -4
?KDeletePlane@@YAXPAF@Z PROC NEAR			; KDeletePlane

; 1959 : {

  05631	55		 push	 ebp
  05632	8b ec		 mov	 ebp, esp
  05634	51		 push	 ecx

; 1960 : 	// Input
; 1961 : 	//      arg1-----an SCI plane Object
; 1962 : 	// Ouput
; 1963 : 	//      none
; 1964 : 
; 1965 : 	ObjectID id = arg(1);

  05635	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05638	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  0563c	51		 push	 ecx
  0563d	8d 4d fc	 lea	 ecx, DWORD PTR _id$[ebp]
  05640	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 1966 : 
; 1967 : 	graphMgr->DeletePlane((int) arg(1));

  05645	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05648	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  0564c	50		 push	 eax
  0564d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05653	e8 00 00 00 00	 call	 ?DeletePlane@GraphicsMgr@@QAEXH@Z ; GraphicsMgr::DeletePlane

; 1968 : }

  05658	8b e5		 mov	 esp, ebp
  0565a	5d		 pop	 ebp
  0565b	c3		 ret	 0
?KDeletePlane@@YAXPAF@Z ENDP				; KDeletePlane
_TEXT	ENDS
PUBLIC	?KUpdatePlane@@YAXPAF@Z				; KUpdatePlane
_DATA	SEGMENT
	ORG $+2
$SG144775 DB	'Can not find plane on update plane!', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_args$ = 8
_id$ = -8
_plane$ = -4
$T150945 = -12
?KUpdatePlane@@YAXPAF@Z PROC NEAR			; KUpdatePlane

; 1972 : {

  0565c	55		 push	 ebp
  0565d	8b ec		 mov	 ebp, esp
  0565f	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1973 : 	// Input
; 1974 : 	//      arg1-----an SCI plane Object
; 1975 : 	// Ouput
; 1976 : 	//      none
; 1977 : 
; 1978 : 	ObjectID id = (ObjectID) arg(1);

  05662	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05665	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  05669	51		 push	 ecx
  0566a	8d 4d f4	 lea	 ecx, DWORD PTR $T150945[ebp]
  0566d	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  05672	50		 push	 eax
  05673	8d 4d f8	 lea	 ecx, DWORD PTR _id$[ebp]
  05676	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID

; 1979 : 
; 1980 : 	SOL_Plane* plane = graphMgr->GetPlaneNext(id);

  0567b	8d 4d f8	 lea	 ecx, DWORD PTR _id$[ebp]
  0567e	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  05683	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  05688	50		 push	 eax
  05689	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0568f	e8 00 00 00 00	 call	 ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::GetPlaneNext
  05694	89 45 fc	 mov	 DWORD PTR _plane$[ebp], eax

; 1981 : 
; 1982 : 	if (plane == NULL) {

  05697	83 7d fc 00	 cmp	 DWORD PTR _plane$[ebp], 0
  0569b	75 16		 jne	 SHORT $L144774

; 1983 : 		msgMgr->Fatal ( "Can not find plane on update plane!\n" );

  0569d	68 00 00 00 00	 push	 OFFSET FLAT:$SG144775
  056a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  056a8	52		 push	 edx
  056a9	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  056ae	83 c4 08	 add	 esp, 8

; 1984 : 		return;

  056b1	eb 1b		 jmp	 SHORT $L144769
$L144774:

; 1986 : 
; 1987 : 	// Put new data into plane
; 1988 : 	*plane = id;

  056b3	8d 45 f8	 lea	 eax, DWORD PTR _id$[ebp]
  056b6	50		 push	 eax
  056b7	8b 4d fc	 mov	 ecx, DWORD PTR _plane$[ebp]
  056ba	e8 00 00 00 00	 call	 ??4SOL_Plane@@QAEAAV0@AAVObjectID@@@Z ; SOL_Plane::operator=

; 1989 : 
; 1990 : 	graphMgr->UpdatePlane(plane);

  056bf	8b 4d fc	 mov	 ecx, DWORD PTR _plane$[ebp]
  056c2	51		 push	 ecx
  056c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  056c9	e8 00 00 00 00	 call	 ?UpdatePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::UpdatePlane
$L144769:

; 1991 : }

  056ce	8b e5		 mov	 esp, ebp
  056d0	5d		 pop	 ebp
  056d1	c3		 ret	 0
?KUpdatePlane@@YAXPAF@Z ENDP				; KUpdatePlane
_TEXT	ENDS
PUBLIC	?KAddPicAt@@YAXPAF@Z				; KAddPicAt
EXTRN	?AddPic@SOL_Plane@@QAEHHABVSOL_Point@@HH@Z:NEAR	; SOL_Plane::AddPic
_DATA	SEGMENT
	ORG $+3
$SG144788 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_args$ = 8
_id$ = -20
_mirror$ = -16
_anchor$ = -8
_plane$ = -12
$T150947 = -24
?KAddPicAt@@YAXPAF@Z PROC NEAR				; KAddPicAt

; 1995 : {

  056d2	55		 push	 ebp
  056d3	8b ec		 mov	 ebp, esp
  056d5	83 ec 18	 sub	 esp, 24			; 00000018H

; 1996 : 	// Input
; 1997 : 	//      arg1-----an SCI plane Object
; 1998 : 	//      arg2-----picture number
; 1999 : 	//      arg3-----x postion plane relative of left corner of picture
; 2000 : 	//      arg4-----y postion plane relative of top corner of picture
; 2001 : 	//		  arg5-----True if mirrored, False for not mirrored
; 2002 : 	// Ouput
; 2003 : 	//      picture added to plane at specified postion
; 2004 : 
; 2005 : 	// Currently the assumption is that the
; 2006 : 	// plane is already a picture plane
; 2007 : 	ObjectID id = (ObjectID) arg(1);

  056d8	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  056db	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  056df	51		 push	 ecx
  056e0	8d 4d e8	 lea	 ecx, DWORD PTR $T150947[ebp]
  056e3	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  056e8	50		 push	 eax
  056e9	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  056ec	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID

; 2008 : 	Bool mirror = False;

  056f1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _mirror$[ebp], 0

; 2009 : 	if (argCount > 4)

  056f8	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  056fb	0f bf 02	 movsx	 eax, WORD PTR [edx]
  056fe	83 f8 04	 cmp	 eax, 4
  05701	7e 0a		 jle	 SHORT $L144783

; 2010 : 		mirror = arg(5);

  05703	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05706	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  0570a	89 55 f0	 mov	 DWORD PTR _mirror$[ebp], edx
$L144783:

; 2011 : 	SOL_Point anchor(arg(3),arg(4));

  0570d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05710	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  05714	51		 push	 ecx
  05715	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05718	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  0571c	50		 push	 eax
  0571d	8d 4d f8	 lea	 ecx, DWORD PTR _anchor$[ebp]
  05720	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 2012 : 
; 2013 : 	SOL_Plane* plane = graphMgr->GetPlaneNext(id);

  05725	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  05728	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0572d	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  05732	50		 push	 eax
  05733	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05739	e8 00 00 00 00	 call	 ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::GetPlaneNext
  0573e	89 45 f4	 mov	 DWORD PTR _plane$[ebp], eax

; 2014 : 	if (plane != NULL)

  05741	83 7d f4 00	 cmp	 DWORD PTR _plane$[ebp], 0
  05745	74 1c		 je	 SHORT $L144786

; 2015 : 		plane->AddPic(arg(2),anchor,mirror);

  05747	6a 01		 push	 1
  05749	8b 4d f0	 mov	 ecx, DWORD PTR _mirror$[ebp]
  0574c	51		 push	 ecx
  0574d	8d 55 f8	 lea	 edx, DWORD PTR _anchor$[ebp]
  05750	52		 push	 edx
  05751	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05754	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  05758	51		 push	 ecx
  05759	8b 4d f4	 mov	 ecx, DWORD PTR _plane$[ebp]
  0575c	e8 00 00 00 00	 call	 ?AddPic@SOL_Plane@@QAEHHABVSOL_Point@@HH@Z ; SOL_Plane::AddPic

; 2016 : 	else

  05761	eb 21		 jmp	 SHORT $L144787
$L144786:

; 2017 : 		msgMgr->Fatal(SrcLoc,Msg_PlaneNotFound,id);

  05763	66 8b 55 ec	 mov	 dx, WORD PTR _id$[ebp]
  05767	52		 push	 edx
  05768	6a 6b		 push	 107			; 0000006bH
  0576a	68 e1 07 00 00	 push	 2017			; 000007e1H
  0576f	68 00 00 00 00	 push	 OFFSET FLAT:$SG144788
  05774	6a 61		 push	 97			; 00000061H
  05776	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0577b	50		 push	 eax
  0577c	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  05781	83 c4 18	 add	 esp, 24			; 00000018H
$L144787:

; 2018 : 
; 2019 : }

  05784	8b e5		 mov	 esp, ebp
  05786	5d		 pop	 ebp
  05787	c3		 ret	 0
?KAddPicAt@@YAXPAF@Z ENDP				; KAddPicAt
_TEXT	ENDS
PUBLIC	?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z	; GraphicsMgr::VisiblePlane
PUBLIC	?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ		; SOL_Plane::OnScreen
PUBLIC	?KRepaintPlane@@YAXPAF@Z			; KRepaintPlane
_DATA	SEGMENT
	ORG $+2
$SG144798 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_args$ = 8
_id$ = -8
_plane$ = -4
$T150949 = -12
?KRepaintPlane@@YAXPAF@Z PROC NEAR			; KRepaintPlane

; 2023 : {

  05788	55		 push	 ebp
  05789	8b ec		 mov	 ebp, esp
  0578b	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 2024 : 	// Input
; 2025 : 	//      arg1-----an SCI plane Object
; 2026 : 	// Ouput
; 2027 : 	//      none
; 2028 : 	
; 2029 : 	ObjectID id = (ObjectID) arg(1);

  0578e	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05791	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  05795	51		 push	 ecx
  05796	8d 4d f4	 lea	 ecx, DWORD PTR $T150949[ebp]
  05799	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0579e	50		 push	 eax
  0579f	8d 4d f8	 lea	 ecx, DWORD PTR _id$[ebp]
  057a2	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID

; 2030 : 
; 2031 : 	SOL_Plane* plane = graphMgr->VisiblePlane(id);

  057a7	8d 4d f8	 lea	 ecx, DWORD PTR _id$[ebp]
  057aa	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  057af	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  057b4	50		 push	 eax
  057b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  057bb	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  057c0	89 45 fc	 mov	 DWORD PTR _plane$[ebp], eax

; 2032 : 	if (plane != NULL)

  057c3	83 7d fc 00	 cmp	 DWORD PTR _plane$[ebp], 0
  057c7	74 1c		 je	 SHORT $L144796

; 2033 : 		graphMgr->Repaint(plane->OnScreen());

  057c9	8b 4d fc	 mov	 ecx, DWORD PTR _plane$[ebp]
  057cc	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  057d1	50		 push	 eax
  057d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  057d8	8b 02		 mov	 eax, DWORD PTR [edx]
  057da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  057e0	ff 50 30	 call	 DWORD PTR [eax+48]

; 2034 : 	else

  057e3	eb 22		 jmp	 SHORT $L144797
$L144796:

; 2035 : 		msgMgr->Fatal(SrcLoc,Msg_PlaneNotFound,id);

  057e5	66 8b 4d f8	 mov	 cx, WORD PTR _id$[ebp]
  057e9	51		 push	 ecx
  057ea	6a 6b		 push	 107			; 0000006bH
  057ec	68 f3 07 00 00	 push	 2035			; 000007f3H
  057f1	68 00 00 00 00	 push	 OFFSET FLAT:$SG144798
  057f6	6a 61		 push	 97			; 00000061H
  057f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  057fe	52		 push	 edx
  057ff	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  05804	83 c4 18	 add	 esp, 24			; 00000018H
$L144797:

; 2036 : }

  05807	8b e5		 mov	 esp, ebp
  05809	5d		 pop	 ebp
  0580a	c3		 ret	 0
?KRepaintPlane@@YAXPAF@Z ENDP				; KRepaintPlane
_TEXT	ENDS
;	COMDAT ?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ
_TEXT	SEGMENT
_this$ = -4
?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ PROC NEAR	; SOL_Plane::OnScreen, COMDAT

; 80   : 	SOL_Rect&		OnScreen()					{return onScreen;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 4c	 add	 eax, 76			; 0000004cH
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?OnScreen@SOL_Plane@@QAEAAVSOL_Rect@@XZ ENDP		; SOL_Plane::OnScreen
_TEXT	ENDS
;	COMDAT ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z
_TEXT	SEGMENT
_planeId$ = 8
_this$ = -4
?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z PROC NEAR ; GraphicsMgr::VisiblePlane, COMDAT

; 84   : 					{return VisibleScreen().GetPlane(planeId);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _planeId$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	ff 52 44	 call	 DWORD PTR [edx+68]
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?GetPlane@Screen@@QAEPAVSOL_Plane@@H@Z ; Screen::GetPlane
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ENDP	; GraphicsMgr::VisiblePlane
_TEXT	ENDS
PUBLIC	?TopSCIPlane@GraphicsMgr@@QBEHXZ		; GraphicsMgr::TopSCIPlane
PUBLIC	?KGetHighPlanePri@@YAXPAF@Z			; KGetHighPlanePri
_TEXT	SEGMENT
?KGetHighPlanePri@@YAXPAF@Z PROC NEAR			; KGetHighPlanePri

; 2040 : {

  0580b	55		 push	 ebp
  0580c	8b ec		 mov	 ebp, esp

; 2041 : 	pm.acc = graphMgr->TopSCIPlane();

  0580e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05814	e8 00 00 00 00	 call	 ?TopSCIPlane@GraphicsMgr@@QBEHXZ ; GraphicsMgr::TopSCIPlane
  05819	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2042 : }

  0581e	5d		 pop	 ebp
  0581f	c3		 ret	 0
?KGetHighPlanePri@@YAXPAF@Z ENDP			; KGetHighPlanePri
_TEXT	ENDS
PUBLIC	?TopSCIPlane@Screen@@QBEHXZ			; Screen::TopSCIPlane
;	COMDAT ?TopSCIPlane@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?TopSCIPlane@GraphicsMgr@@QBEHXZ PROC NEAR		; GraphicsMgr::TopSCIPlane, COMDAT

; 56   : 	int		TopSCIPlane() const					{return next.TopSCIPlane();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ?TopSCIPlane@Screen@@QBEHXZ ; Screen::TopSCIPlane
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?TopSCIPlane@GraphicsMgr@@QBEHXZ ENDP			; GraphicsMgr::TopSCIPlane
_TEXT	ENDS
EXTRN	?TopSCIPlane@PlaneList@@QBEHXZ:NEAR		; PlaneList::TopSCIPlane
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?TopSCIPlane@Screen@@QBEHXZ PROC NEAR			; Screen::TopSCIPlane, COMDAT

; 31   : 	int	TopSCIPlane() const				{return planes.TopSCIPlane();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?TopSCIPlane@PlaneList@@QBEHXZ ; PlaneList::TopSCIPlane
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?TopSCIPlane@Screen@@QBEHXZ ENDP			; Screen::TopSCIPlane
_TEXT	ENDS
PUBLIC	?TopScreenItem@GraphicsMgr@@QBEHH@Z		; GraphicsMgr::TopScreenItem
PUBLIC	?KGetHighItemPri@@YAXPAF@Z			; KGetHighItemPri
_TEXT	SEGMENT
_args$ = 8
?KGetHighItemPri@@YAXPAF@Z PROC NEAR			; KGetHighItemPri

; 2046 : {

  05820	55		 push	 ebp
  05821	8b ec		 mov	 ebp, esp

; 2047 : 	// Input
; 2048 : 	//      arg1-----the plane's ID
; 2049 : 
; 2050 : 	pm.acc = graphMgr->TopScreenItem((int)(unsigned short)arg(1));

  05823	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05826	33 c9		 xor	 ecx, ecx
  05828	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  0582c	51		 push	 ecx
  0582d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05833	e8 00 00 00 00	 call	 ?TopScreenItem@GraphicsMgr@@QBEHH@Z ; GraphicsMgr::TopScreenItem
  05838	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2051 : }

  0583d	5d		 pop	 ebp
  0583e	c3		 ret	 0
?KGetHighItemPri@@YAXPAF@Z ENDP				; KGetHighItemPri
_TEXT	ENDS
EXTRN	?TopScreenItem@Screen@@QBEHH@Z:NEAR		; Screen::TopScreenItem
;	COMDAT ?TopScreenItem@GraphicsMgr@@QBEHH@Z
_TEXT	SEGMENT
_planeID$ = 8
_this$ = -4
?TopScreenItem@GraphicsMgr@@QBEHH@Z PROC NEAR		; GraphicsMgr::TopScreenItem, COMDAT

; 57   : 	int		TopScreenItem(int planeID) const	{return next.TopScreenItem(planeID);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _planeID$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e8 00 00 00 00	 call	 ?TopScreenItem@Screen@@QBEHH@Z ; Screen::TopScreenItem
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?TopScreenItem@GraphicsMgr@@QBEHH@Z ENDP		; GraphicsMgr::TopScreenItem
_TEXT	ENDS
PUBLIC	??0Ratio@@QAE@HH@Z				; Ratio::Ratio
PUBLIC	??D@YAHHABVRatio@@@Z				; operator*
PUBLIC	?KCelHigh@@YAXPAF@Z				; KCelHigh
xdata$x	SEGMENT
$T150961 DD	019930520H
	DD	01H
	DD	FLAT:$T150963
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150963 DD	0ffffffffH
	DD	FLAT:$L150959
xdata$x	ENDS
_TEXT	SEGMENT
_args$ = 8
_celObj$ = -92
$T150958 = -100
__$EHRec$ = -12
?KCelHigh@@YAXPAF@Z PROC NEAR				; KCelHigh

; 2055 : {

  0583f	55		 push	 ebp
  05840	8b ec		 mov	 ebp, esp
  05842	6a ff		 push	 -1
  05844	68 00 00 00 00	 push	 $L150962
  05849	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0584f	50		 push	 eax
  05850	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05857	83 ec 58	 sub	 esp, 88			; 00000058H

; 2056 :    // Input is view,loop,cel
; 2057 : 	//  Report height in game resolution
; 2058 :    CelObjView celObj(arg(1),arg(2),arg(3));

  0585a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0585d	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  05861	51		 push	 ecx
  05862	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05865	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  05869	50		 push	 eax
  0586a	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0586d	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  05871	52		 push	 edx
  05872	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  05875	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  0587a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2059 :    pm.acc = celObj.Height() * Ratio(SCIRESY, celObj.ResY());

  05881	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  05884	e8 00 00 00 00	 call	 ?ResY@CelObj@@QBEHXZ	; CelObj::ResY
  05889	50		 push	 eax
  0588a	68 e0 01 00 00	 push	 480			; 000001e0H
  0588f	8d 4d 9c	 lea	 ecx, DWORD PTR $T150958[ebp]
  05892	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  05897	50		 push	 eax
  05898	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  0589b	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  058a0	50		 push	 eax
  058a1	e8 00 00 00 00	 call	 ??D@YAHHABVRatio@@@Z	; operator*
  058a6	83 c4 08	 add	 esp, 8
  058a9	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2060 : }

  058ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  058b5	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  058b8	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  058bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  058c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  058c7	8b e5		 mov	 esp, ebp
  058c9	5d		 pop	 ebp
  058ca	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L150959:
  00116	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  00119	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0011e	c3		 ret	 0
$L150962:
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150961
  00124	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KCelHigh@@YAXPAF@Z ENDP				; KCelHigh
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT
_num$ = 8
_denom$ = 12
_this$ = -4
??0Ratio@@QAE@HH@Z PROC NEAR				; Ratio::Ratio, COMDAT

; 9    : 	Ratio(int num, int denom)	:	numer(num), denom(denom) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _num$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _denom$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0Ratio@@QAE@HH@Z ENDP					; Ratio::Ratio
_TEXT	ENDS
;	COMDAT ??D@YAHHABVRatio@@@Z
_TEXT	SEGMENT
_i$ = 8
_ratio$ = 12
_total$ = -8
_val$ = -4
??D@YAHHABVRatio@@@Z PROC NEAR				; operator*, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 54   : 	int total = i * ratio.numer;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _ratio$[ebp]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  0000c	0f af 08	 imul	 ecx, DWORD PTR [eax]
  0000f	89 4d f8	 mov	 DWORD PTR _total$[ebp], ecx

; 55   : 	int val = total / ratio.denom;

  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _ratio$[ebp]
  00015	8b 45 f8	 mov	 eax, DWORD PTR _total$[ebp]
  00018	99		 cdq
  00019	f7 79 04	 idiv	 DWORD PTR [ecx+4]
  0001c	89 45 fc	 mov	 DWORD PTR _val$[ebp], eax

; 56   : 	if (total > ratio.denom  &&  total % ratio.denom)

  0001f	8b 55 0c	 mov	 edx, DWORD PTR _ratio$[ebp]
  00022	8b 45 f8	 mov	 eax, DWORD PTR _total$[ebp]
  00025	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00028	7e 17		 jle	 SHORT $L139728
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _ratio$[ebp]
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _total$[ebp]
  00030	99		 cdq
  00031	f7 79 04	 idiv	 DWORD PTR [ecx+4]
  00034	85 d2		 test	 edx, edx
  00036	74 09		 je	 SHORT $L139728

; 57   : 		val++;

  00038	8b 55 fc	 mov	 edx, DWORD PTR _val$[ebp]
  0003b	83 c2 01	 add	 edx, 1
  0003e	89 55 fc	 mov	 DWORD PTR _val$[ebp], edx
$L139728:

; 58   : 	return val;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _val$[ebp]

; 59   : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??D@YAHHABVRatio@@@Z ENDP				; operator*
_TEXT	ENDS
PUBLIC	?KCelWide@@YAXPAF@Z				; KCelWide
xdata$x	SEGMENT
$T150970 DD	019930520H
	DD	01H
	DD	FLAT:$T150972
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150972 DD	0ffffffffH
	DD	FLAT:$L150968
xdata$x	ENDS
_TEXT	SEGMENT
_args$ = 8
_celObj$ = -92
$T150967 = -100
__$EHRec$ = -12
?KCelWide@@YAXPAF@Z PROC NEAR				; KCelWide

; 2064 : {

  058cb	55		 push	 ebp
  058cc	8b ec		 mov	 ebp, esp
  058ce	6a ff		 push	 -1
  058d0	68 00 00 00 00	 push	 $L150971
  058d5	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  058db	50		 push	 eax
  058dc	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  058e3	83 ec 58	 sub	 esp, 88			; 00000058H

; 2065 :    // Input is view,loop,cel
; 2066 :    // Output is the given cels width
; 2067 :    CelObjView celObj(arg(1),arg(2),arg(3));

  058e6	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  058e9	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  058ed	51		 push	 ecx
  058ee	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  058f1	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  058f5	50		 push	 eax
  058f6	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  058f9	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  058fd	52		 push	 edx
  058fe	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  05901	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  05906	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2068 :    pm.acc = celObj.Width() * Ratio(SCIRESX, celObj.ResX());

  0590d	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  05910	e8 00 00 00 00	 call	 ?ResX@CelObj@@QBEHXZ	; CelObj::ResX
  05915	50		 push	 eax
  05916	68 80 02 00 00	 push	 640			; 00000280H
  0591b	8d 4d 9c	 lea	 ecx, DWORD PTR $T150967[ebp]
  0591e	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  05923	50		 push	 eax
  05924	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  05927	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  0592c	50		 push	 eax
  0592d	e8 00 00 00 00	 call	 ??D@YAHHABVRatio@@@Z	; operator*
  05932	83 c4 08	 add	 esp, 8
  05935	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2069 : }

  0593a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05941	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  05944	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  05949	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0594c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05953	8b e5		 mov	 esp, ebp
  05955	5d		 pop	 ebp
  05956	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L150968:
  00129	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  0012c	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  00131	c3		 ret	 0
$L150971:
  00132	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150970
  00137	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KCelWide@@YAXPAF@Z ENDP				; KCelWide
PUBLIC	?KNumLoops@@YAXPAF@Z				; KNumLoops
_TEXT	SEGMENT
_args$ = 8
_id$ = -8
_view$ = -4
$T150975 = -16
?KNumLoops@@YAXPAF@Z PROC NEAR				; KNumLoops

; 2073 : {

  05957	55		 push	 ebp
  05958	8b ec		 mov	 ebp, esp
  0595a	83 ec 10	 sub	 esp, 16			; 00000010H

; 2074 : 	// Input
; 2075 : 	//      arg1-----the SCI Object
; 2076 : 	// Ouput
; 2077 : 	//    acc------the number of loops in the view
; 2078 : 
; 2079 : 	ObjectID id = arg(1);

  0595d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05960	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  05964	51		 push	 ecx
  05965	8d 4d f8	 lea	 ecx, DWORD PTR _id$[ebp]
  05968	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 2080 : 
; 2081 : 	int view = id.GetIndexedProperty(actView);

  0596d	6a 03		 push	 3
  0596f	8d 4d f8	 lea	 ecx, DWORD PTR _id$[ebp]
  05972	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  05977	0f bf d0	 movsx	 edx, ax
  0597a	89 55 fc	 mov	 DWORD PTR _view$[ebp], edx

; 2082 : 	pm.acc = GetNumLoops(resMgr->Get(MemResView,view));

  0597d	6a 00		 push	 0
  0597f	66 8b 45 fc	 mov	 ax, WORD PTR _view$[ebp]
  05983	50		 push	 eax
  05984	6a 00		 push	 0
  05986	8d 4d f0	 lea	 ecx, DWORD PTR $T150975[ebp]
  05989	51		 push	 ecx
  0598a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  05990	8b 02		 mov	 eax, DWORD PTR [edx]
  05992	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  05998	ff 50 20	 call	 DWORD PTR [eax+32]
  0599b	51		 push	 ecx
  0599c	8b cc		 mov	 ecx, esp
  0599e	50		 push	 eax
  0599f	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  059a4	e8 00 00 00 00	 call	 ?GetNumLoops@@YAHVMemID@@@Z ; GetNumLoops
  059a9	83 c4 04	 add	 esp, 4
  059ac	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2083 : }

  059b1	8b e5		 mov	 esp, ebp
  059b3	5d		 pop	 ebp
  059b4	c3		 ret	 0
?KNumLoops@@YAXPAF@Z ENDP				; KNumLoops
_TEXT	ENDS
PUBLIC	??0ViewHeaderID@@QAE@ABVMemID@@@Z		; ViewHeaderID::ViewHeaderID
PUBLIC	??CViewHeaderID@@QBEPAUViewHeader@@XZ		; ViewHeaderID::operator->
_TEXT	SEGMENT
_id$ = 8
$T150977 = -4
?GetNumLoops@@YAHVMemID@@@Z PROC NEAR			; GetNumLoops

; 2087 : {

  059b5	55		 push	 ebp
  059b6	8b ec		 mov	 ebp, esp
  059b8	51		 push	 ecx

; 2088 : 	return ((ViewHeaderID) id)->loopCount;

  059b9	8d 45 08	 lea	 eax, DWORD PTR _id$[ebp]
  059bc	50		 push	 eax
  059bd	8d 4d fc	 lea	 ecx, DWORD PTR $T150977[ebp]
  059c0	e8 00 00 00 00	 call	 ??0ViewHeaderID@@QAE@ABVMemID@@@Z ; ViewHeaderID::ViewHeaderID
  059c5	8b c8		 mov	 ecx, eax
  059c7	e8 00 00 00 00	 call	 ??CViewHeaderID@@QBEPAUViewHeader@@XZ ; ViewHeaderID::operator->
  059cc	33 c9		 xor	 ecx, ecx
  059ce	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  059d1	8b c1		 mov	 eax, ecx

; 2089 : }

  059d3	8b e5		 mov	 esp, ebp
  059d5	5d		 pop	 ebp
  059d6	c3		 ret	 0
?GetNumLoops@@YAHVMemID@@@Z ENDP			; GetNumLoops
_TEXT	ENDS
;	COMDAT ??0ViewHeaderID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ViewHeaderID@@QAE@ABVMemID@@@Z PROC NEAR		; ViewHeaderID::ViewHeaderID, COMDAT

; 70   : FakeTemplateID(ViewHeaderID, ViewHeader, MemViewHeader)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ViewHeaderID@@QAE@ABVMemID@@@Z ENDP			; ViewHeaderID::ViewHeaderID
_TEXT	ENDS
;	COMDAT ??CViewHeaderID@@QBEPAUViewHeader@@XZ
_TEXT	SEGMENT
_this$ = -4
??CViewHeaderID@@QBEPAUViewHeader@@XZ PROC NEAR		; ViewHeaderID::operator->, COMDAT

; 70   : FakeTemplateID(ViewHeaderID, ViewHeader, MemViewHeader)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CViewHeaderID@@QBEPAUViewHeader@@XZ ENDP		; ViewHeaderID::operator->
_TEXT	ENDS
PUBLIC	?GetNumCels@@YAHVMemID@@H@Z			; GetNumCels
PUBLIC	?KNumCels@@YAXPAF@Z				; KNumCels
_TEXT	SEGMENT
_args$ = 8
_id$ = -12
_view$ = -4
_loop$ = -8
$T150982 = -20
?KNumCels@@YAXPAF@Z PROC NEAR				; KNumCels

; 2094 : {

  059d7	55		 push	 ebp
  059d8	8b ec		 mov	 ebp, esp
  059da	83 ec 14	 sub	 esp, 20			; 00000014H

; 2095 : 	// Input
; 2096 : 	//    arg1-----the SCI Object
; 2097 : 	// Ouput
; 2098 : 	//    acc------the number of cels in the object's view,loop
; 2099 : 
; 2100 : 	ObjectID id = arg(1);

  059dd	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  059e0	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  059e4	51		 push	 ecx
  059e5	8d 4d f4	 lea	 ecx, DWORD PTR _id$[ebp]
  059e8	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 2101 : 
; 2102 : 	int view = id.GetIndexedProperty(actView);

  059ed	6a 03		 push	 3
  059ef	8d 4d f4	 lea	 ecx, DWORD PTR _id$[ebp]
  059f2	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  059f7	0f bf d0	 movsx	 edx, ax
  059fa	89 55 fc	 mov	 DWORD PTR _view$[ebp], edx

; 2103 : 	int loop = id.GetIndexedProperty(actLoop);

  059fd	6a 04		 push	 4
  059ff	8d 4d f4	 lea	 ecx, DWORD PTR _id$[ebp]
  05a02	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  05a07	0f bf c0	 movsx	 eax, ax
  05a0a	89 45 f8	 mov	 DWORD PTR _loop$[ebp], eax

; 2104 : 
; 2105 : 	pm.acc = GetNumCels(resMgr->Get(MemResView,view),loop);

  05a0d	8b 4d f8	 mov	 ecx, DWORD PTR _loop$[ebp]
  05a10	51		 push	 ecx
  05a11	6a 00		 push	 0
  05a13	66 8b 55 fc	 mov	 dx, WORD PTR _view$[ebp]
  05a17	52		 push	 edx
  05a18	6a 00		 push	 0
  05a1a	8d 45 ec	 lea	 eax, DWORD PTR $T150982[ebp]
  05a1d	50		 push	 eax
  05a1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  05a24	8b 11		 mov	 edx, DWORD PTR [ecx]
  05a26	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  05a2c	ff 52 20	 call	 DWORD PTR [edx+32]
  05a2f	51		 push	 ecx
  05a30	8b cc		 mov	 ecx, esp
  05a32	50		 push	 eax
  05a33	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  05a38	e8 00 00 00 00	 call	 ?GetNumCels@@YAHVMemID@@H@Z ; GetNumCels
  05a3d	83 c4 08	 add	 esp, 8
  05a40	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2106 : }

  05a45	8b e5		 mov	 esp, ebp
  05a47	5d		 pop	 ebp
  05a48	c3		 ret	 0
?KNumCels@@YAXPAF@Z ENDP				; KNumCels
_viewID$ = 8
_loop$ = 12
_viewPtr$ = -4
_loopPtr$144845 = -8
?GetNumCels@@YAHVMemID@@H@Z PROC NEAR			; GetNumCels

; 2111 : {

  05a49	55		 push	 ebp
  05a4a	8b ec		 mov	 ebp, esp
  05a4c	83 ec 08	 sub	 esp, 8

; 2112 : 	ViewHeader * viewPtr = (ViewHeader *) *viewID;

  05a4f	8d 4d 08	 lea	 ecx, DWORD PTR _viewID$[ebp]
  05a52	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  05a57	89 45 fc	 mov	 DWORD PTR _viewPtr$[ebp], eax

; 2113 : 	if (viewPtr->loopCount < loop) 

  05a5a	8b 45 fc	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  05a5d	33 c9		 xor	 ecx, ecx
  05a5f	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  05a62	3b 4d 0c	 cmp	 ecx, DWORD PTR _loop$[ebp]
  05a65	7d 04		 jge	 SHORT $L144843

; 2114 : 		return 0;

  05a67	33 c0		 xor	 eax, eax
  05a69	eb 58		 jmp	 SHORT $L144844
$L144843:

; 2116 : 		LoopHeader * loopPtr =
; 2117 : 			(LoopHeader *) ((char *) viewPtr + viewPtr->loopHeaderSize * loop + viewPtr->viewHeaderSize + 2);

  05a6b	8b 55 fc	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  05a6e	33 c0		 xor	 eax, eax
  05a70	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  05a73	0f af 45 0c	 imul	 eax, DWORD PTR _loop$[ebp]
  05a77	8b 4d fc	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  05a7a	03 c8		 add	 ecx, eax
  05a7c	8b 55 fc	 mov	 edx, DWORD PTR _viewPtr$[ebp]
  05a7f	33 c0		 xor	 eax, eax
  05a81	66 8b 02	 mov	 ax, WORD PTR [edx]
  05a84	8d 4c 01 02	 lea	 ecx, DWORD PTR [ecx+eax+2]
  05a88	89 4d f8	 mov	 DWORD PTR _loopPtr$144845[ebp], ecx

; 2118 : 		if (loopPtr->altLoop != -1)

  05a8b	8b 55 f8	 mov	 edx, DWORD PTR _loopPtr$144845[ebp]
  05a8e	0f be 02	 movsx	 eax, BYTE PTR [edx]
  05a91	83 f8 ff	 cmp	 eax, -1
  05a94	74 25		 je	 SHORT $L144848

; 2119 : 			loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize*loopPtr->altLoop + viewPtr->viewHeaderSize + 2);

  05a96	8b 4d fc	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  05a99	33 d2		 xor	 edx, edx
  05a9b	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  05a9e	8b 45 f8	 mov	 eax, DWORD PTR _loopPtr$144845[ebp]
  05aa1	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  05aa4	0f af d1	 imul	 edx, ecx
  05aa7	8b 45 fc	 mov	 eax, DWORD PTR _viewPtr$[ebp]
  05aaa	03 c2		 add	 eax, edx
  05aac	8b 4d fc	 mov	 ecx, DWORD PTR _viewPtr$[ebp]
  05aaf	33 d2		 xor	 edx, edx
  05ab1	66 8b 11	 mov	 dx, WORD PTR [ecx]
  05ab4	8d 44 10 02	 lea	 eax, DWORD PTR [eax+edx+2]
  05ab8	89 45 f8	 mov	 DWORD PTR _loopPtr$144845[ebp], eax
$L144848:

; 2120 : 		return loopPtr->numCels;

  05abb	8b 4d f8	 mov	 ecx, DWORD PTR _loopPtr$144845[ebp]
  05abe	33 c0		 xor	 eax, eax
  05ac0	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
$L144844:

; 2122 : }

  05ac3	8b e5		 mov	 esp, ebp
  05ac5	5d		 pop	 ebp
  05ac6	c3		 ret	 0
?GetNumCels@@YAHVMemID@@H@Z ENDP			; GetNumCels
_TEXT	ENDS
PUBLIC	?KShakeScreen@@YAXPAF@Z				; KShakeScreen
_TEXT	SEGMENT
_args$ = 8
?KShakeScreen@@YAXPAF@Z PROC NEAR			; KShakeScreen

; 2126 : {

  05ac7	55		 push	 ebp
  05ac8	8b ec		 mov	 ebp, esp

; 2127 : 	graphMgr->ShakeScreen(arg(1), arg(2));

  05aca	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05acd	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  05ad1	51		 push	 ecx
  05ad2	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05ad5	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  05ad9	50		 push	 eax
  05ada	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05ae0	8b 11		 mov	 edx, DWORD PTR [ecx]
  05ae2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05ae8	ff 52 3c	 call	 DWORD PTR [edx+60]

; 2128 : }

  05aeb	5d		 pop	 ebp
  05aec	c3		 ret	 0
?KShakeScreen@@YAXPAF@Z ENDP				; KShakeScreen
_TEXT	ENDS
PUBLIC	?KIsOnMe@@YAXPAF@Z				; KIsOnMe
EXTRN	??0ScreenItem@@QAE@PBV0@@Z:NEAR			; ScreenItem::ScreenItem
EXTRN	??1ScreenItem@@QAE@XZ:NEAR			; ScreenItem::~ScreenItem
EXTRN	?IsOnMe@GraphicsMgr@@QAEHAAVScreenItem@@ABVSOL_Plane@@ABVSOL_Point@@H@Z:NEAR ; GraphicsMgr::IsOnMe
xdata$x	SEGMENT
$T150989 DD	019930520H
	DD	01H
	DD	FLAT:$T150991
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T150991 DD	0ffffffffH
	DD	FLAT:$L150987
xdata$x	ENDS
_TEXT	SEGMENT
$T150986 = -188
__$EHRec$ = -12
_args$ = 8
_id$ = -180
_planeId$ = -172
_si$ = -176
_plane$ = -168
_siCopy$ = -164
?KIsOnMe@@YAXPAF@Z PROC NEAR				; KIsOnMe

; 2132 : {

  05aed	55		 push	 ebp
  05aee	8b ec		 mov	 ebp, esp
  05af0	6a ff		 push	 -1
  05af2	68 00 00 00 00	 push	 $L150990
  05af7	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05afd	50		 push	 eax
  05afe	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05b05	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H

; 2133 : 	// Input
; 2134 : 	//		arg(1) = x coordinate of point to check (plane relative)
; 2135 : 	//		arg(2) = y   "
; 2136 : 	// 	arg(3) = obj
; 2137 : 	//		arg(4) = check skip or not
; 2138 : 	//
; 2139 : 	// Returns -
; 2140 : 	// 	True or False
; 2141 : 
; 2142 : 	ObjectID id = arg(3);

  05b0b	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05b0e	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  05b12	51		 push	 ecx
  05b13	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _id$[ebp]
  05b19	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 2143 : 
; 2144 : 	int planeId = id.GetIndexedProperty(actPlaneID);

  05b1e	6a 1a		 push	 26			; 0000001aH
  05b20	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _id$[ebp]
  05b26	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  05b2b	0f bf d0	 movsx	 edx, ax
  05b2e	89 95 54 ff ff
	ff		 mov	 DWORD PTR _planeId$[ebp], edx

; 2145 : 
; 2146 : 	ScreenItem* si = graphMgr->VisibleScreen().GetScreenItem(planeId,id);

  05b34	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _id$[ebp]
  05b3a	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  05b3f	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  05b44	50		 push	 eax
  05b45	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _planeId$[ebp]
  05b4b	50		 push	 eax
  05b4c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05b52	8b 11		 mov	 edx, DWORD PTR [ecx]
  05b54	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05b5a	ff 52 44	 call	 DWORD PTR [edx+68]
  05b5d	8b c8		 mov	 ecx, eax
  05b5f	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  05b64	89 85 50 ff ff
	ff		 mov	 DWORD PTR _si$[ebp], eax

; 2147 : 	if (si == NULL) {

  05b6a	83 bd 50 ff ff
	ff 00		 cmp	 DWORD PTR _si$[ebp], 0
  05b71	75 0f		 jne	 SHORT $L144860

; 2148 : 		pm.acc = False;

  05b73	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 2149 : 		return;

  05b7d	e9 9a 00 00 00	 jmp	 $L144856
$L144860:

; 2151 : 
; 2152 : 	SOL_Plane* plane = graphMgr->VisiblePlane(planeId);

  05b82	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _planeId$[ebp]
  05b88	50		 push	 eax
  05b89	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05b8f	e8 00 00 00 00	 call	 ?VisiblePlane@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::VisiblePlane
  05b94	89 85 58 ff ff
	ff		 mov	 DWORD PTR _plane$[ebp], eax

; 2153 : 	if (plane == NULL) {

  05b9a	83 bd 58 ff ff
	ff 00		 cmp	 DWORD PTR _plane$[ebp], 0
  05ba1	75 0c		 jne	 SHORT $L144862

; 2154 : 		pm.acc = False;

  05ba3	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 2155 : 		return;

  05bad	eb 6d		 jmp	 SHORT $L144856
$L144862:

; 2157 : 
; 2158 : 	ScreenItem siCopy(si);

  05baf	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _si$[ebp]
  05bb5	51		 push	 ecx
  05bb6	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _siCopy$[ebp]
  05bbc	e8 00 00 00 00	 call	 ??0ScreenItem@@QAE@PBV0@@Z ; ScreenItem::ScreenItem
  05bc1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2159 : 
; 2160 : 	pm.acc = graphMgr->IsOnMe(siCopy,*plane,SOL_Point(arg(1), arg(2)),(Bool) arg(4));

  05bc8	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05bcb	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  05bcf	50		 push	 eax
  05bd0	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05bd3	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  05bd7	52		 push	 edx
  05bd8	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05bdb	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  05bdf	51		 push	 ecx
  05be0	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T150986[ebp]
  05be6	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  05beb	50		 push	 eax
  05bec	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _plane$[ebp]
  05bf2	52		 push	 edx
  05bf3	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _siCopy$[ebp]
  05bf9	50		 push	 eax
  05bfa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05c00	e8 00 00 00 00	 call	 ?IsOnMe@GraphicsMgr@@QAEHAAVScreenItem@@ABVSOL_Plane@@ABVSOL_Point@@H@Z ; GraphicsMgr::IsOnMe
  05c05	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2161 : }

  05c0a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05c11	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _siCopy$[ebp]
  05c17	e8 00 00 00 00	 call	 ??1ScreenItem@@QAE@XZ	; ScreenItem::~ScreenItem
$L144856:
  05c1c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05c1f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05c26	8b e5		 mov	 esp, ebp
  05c28	5d		 pop	 ebp
  05c29	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L150987:
  0013c	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _siCopy$[ebp]
  00142	e8 00 00 00 00	 call	 ??1ScreenItem@@QAE@XZ	; ScreenItem::~ScreenItem
  00147	c3		 ret	 0
$L150990:
  00148	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T150989
  0014d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KIsOnMe@@YAXPAF@Z ENDP					; KIsOnMe
PUBLIC	?RespondsTo@ObjectID@@QBEHG@Z			; ObjectID::RespondsTo
PUBLIC	?SetIndexedProperty@ObjectID@@QBEXHF@Z		; ObjectID::SetIndexedProperty
PUBLIC	?KSetNowSeen@@YAXPAF@Z				; KSetNowSeen
EXTRN	?NowSeen@GraphicsMgr@@QAEHHHAAVSOL_Rect@@@Z:NEAR ; GraphicsMgr::NowSeen
_DATA	SEGMENT
	ORG $+2
$SG144871 DB	'0x%x was passed to SetNowSeen and is not a valid object.'
	DB	00H
	ORG $+3
$SG144873 DB	'0x%x was passed to SetNowSeen and does not respond to th'
	DB	'e plane property.', 00H
	ORG $+2
$SG144875 DB	'0x%x was passed to SetNowSeen and does not respond to th'
	DB	'e left property.', 00H
	ORG $+3
$SG144877 DB	'0x%x was passed to SetNowSeen and does not respond to th'
	DB	'e top property.', 00H
$SG144879 DB	'0x%x was passed to SetNowSeen and does not respond to th'
	DB	'e right property.', 00H
	ORG $+2
$SG144881 DB	'0x%x was passed to SetNowSeen and does not respond to th'
	DB	'e bottom property.', 00H
	ORG $+1
$SG144886 DB	'0x%x was passed to SetNowSeen and does not have a valid '
	DB	'plane property.', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T150993 = -28
_args$ = 8
_id$ = -24
_planeID$ = -20
_nowSeen$ = -16
?KSetNowSeen@@YAXPAF@Z PROC NEAR			; KSetNowSeen

; 2165 : {

  05c2a	55		 push	 ebp
  05c2b	8b ec		 mov	 ebp, esp
  05c2d	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 2166 : 	// Input
; 2167 : 	//      arg1-----the SCI Object
; 2168 : 	// Ouput
; 2169 : 	//       -----the nowSeen rectangle is set
; 2170 : 
; 2171 : 	ObjectID id = arg(1);

  05c30	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05c33	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  05c37	51		 push	 ecx
  05c38	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05c3b	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 2172 : 
; 2173 : 	// make sure this is a valid object
; 2174 : 	if ( !id.IsObject() )

  05c40	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05c43	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  05c48	85 c0		 test	 eax, eax
  05c4a	75 18		 jne	 SHORT $L144870

; 2175 : 		msgMgr->Fatal ( "0x%x was passed to SetNowSeen and is not a valid object.", id );

  05c4c	66 8b 55 e8	 mov	 dx, WORD PTR _id$[ebp]
  05c50	52		 push	 edx
  05c51	68 00 00 00 00	 push	 OFFSET FLAT:$SG144871
  05c56	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  05c5b	50		 push	 eax
  05c5c	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  05c61	83 c4 0c	 add	 esp, 12			; 0000000cH
$L144870:

; 2176 : 
; 2177 : 	if ( !id.RespondsTo ( s_plane ) )

  05c64	6a 00		 push	 0
  05c66	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05c69	e8 00 00 00 00	 call	 ?RespondsTo@ObjectID@@QBEHG@Z ; ObjectID::RespondsTo
  05c6e	85 c0		 test	 eax, eax
  05c70	75 19		 jne	 SHORT $L144872

; 2178 : 		msgMgr->Fatal ( "0x%x was passed to SetNowSeen and does not respond to the plane property.", id );

  05c72	66 8b 4d e8	 mov	 cx, WORD PTR _id$[ebp]
  05c76	51		 push	 ecx
  05c77	68 00 00 00 00	 push	 OFFSET FLAT:$SG144873
  05c7c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  05c82	52		 push	 edx
  05c83	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  05c88	83 c4 0c	 add	 esp, 12			; 0000000cH
$L144872:

; 2179 : 
; 2180 : 	if ( !id.RespondsTo ( s_left ) )

  05c8b	68 87 00 00 00	 push	 135			; 00000087H
  05c90	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05c93	e8 00 00 00 00	 call	 ?RespondsTo@ObjectID@@QBEHG@Z ; ObjectID::RespondsTo
  05c98	85 c0		 test	 eax, eax
  05c9a	75 19		 jne	 SHORT $L144874

; 2181 : 		msgMgr->Fatal ( "0x%x was passed to SetNowSeen and does not respond to the left property.", id );

  05c9c	66 8b 45 e8	 mov	 ax, WORD PTR _id$[ebp]
  05ca0	50		 push	 eax
  05ca1	68 00 00 00 00	 push	 OFFSET FLAT:$SG144875
  05ca6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  05cac	51		 push	 ecx
  05cad	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  05cb2	83 c4 0c	 add	 esp, 12			; 0000000cH
$L144874:

; 2182 : 
; 2183 : 	if ( !id.RespondsTo ( s_top ) )

  05cb5	68 89 00 00 00	 push	 137			; 00000089H
  05cba	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05cbd	e8 00 00 00 00	 call	 ?RespondsTo@ObjectID@@QBEHG@Z ; ObjectID::RespondsTo
  05cc2	85 c0		 test	 eax, eax
  05cc4	75 18		 jne	 SHORT $L144876

; 2184 : 		msgMgr->Fatal ( "0x%x was passed to SetNowSeen and does not respond to the top property.", id );

  05cc6	66 8b 55 e8	 mov	 dx, WORD PTR _id$[ebp]
  05cca	52		 push	 edx
  05ccb	68 00 00 00 00	 push	 OFFSET FLAT:$SG144877
  05cd0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  05cd5	50		 push	 eax
  05cd6	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  05cdb	83 c4 0c	 add	 esp, 12			; 0000000cH
$L144876:

; 2185 : 
; 2186 : 	if ( !id.RespondsTo ( s_right ) )

  05cde	68 88 00 00 00	 push	 136			; 00000088H
  05ce3	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05ce6	e8 00 00 00 00	 call	 ?RespondsTo@ObjectID@@QBEHG@Z ; ObjectID::RespondsTo
  05ceb	85 c0		 test	 eax, eax
  05ced	75 19		 jne	 SHORT $L144878

; 2187 : 		msgMgr->Fatal ( "0x%x was passed to SetNowSeen and does not respond to the right property.", id );

  05cef	66 8b 4d e8	 mov	 cx, WORD PTR _id$[ebp]
  05cf3	51		 push	 ecx
  05cf4	68 00 00 00 00	 push	 OFFSET FLAT:$SG144879
  05cf9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  05cff	52		 push	 edx
  05d00	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  05d05	83 c4 0c	 add	 esp, 12			; 0000000cH
$L144878:

; 2188 : 
; 2189 : 	if ( !id.RespondsTo ( s_bottom ) )

  05d08	68 8a 00 00 00	 push	 138			; 0000008aH
  05d0d	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05d10	e8 00 00 00 00	 call	 ?RespondsTo@ObjectID@@QBEHG@Z ; ObjectID::RespondsTo
  05d15	85 c0		 test	 eax, eax
  05d17	75 19		 jne	 SHORT $L144880

; 2190 : 		msgMgr->Fatal ( "0x%x was passed to SetNowSeen and does not respond to the bottom property.", id );

  05d19	66 8b 45 e8	 mov	 ax, WORD PTR _id$[ebp]
  05d1d	50		 push	 eax
  05d1e	68 00 00 00 00	 push	 OFFSET FLAT:$SG144881
  05d23	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  05d29	51		 push	 ecx
  05d2a	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  05d2f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L144880:

; 2191 : 
; 2192 : 	int planeID = id.GetIndexedProperty(actPlaneID);

  05d32	6a 1a		 push	 26			; 0000001aH
  05d34	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05d37	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  05d3c	0f bf d0	 movsx	 edx, ax
  05d3f	89 55 ec	 mov	 DWORD PTR _planeID$[ebp], edx

; 2193 : 
; 2194 : 	if ( !((ObjectID) planeID).IsObject() )

  05d42	66 8b 45 ec	 mov	 ax, WORD PTR _planeID$[ebp]
  05d46	50		 push	 eax
  05d47	8d 4d e4	 lea	 ecx, DWORD PTR $T150993[ebp]
  05d4a	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  05d4f	8b c8		 mov	 ecx, eax
  05d51	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  05d56	85 c0		 test	 eax, eax
  05d58	75 19		 jne	 SHORT $L144885

; 2195 : 		msgMgr->Fatal ( "0x%x was passed to SetNowSeen and does not have a valid plane property.", id );

  05d5a	66 8b 4d e8	 mov	 cx, WORD PTR _id$[ebp]
  05d5e	51		 push	 ecx
  05d5f	68 00 00 00 00	 push	 OFFSET FLAT:$SG144886
  05d64	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  05d6a	52		 push	 edx
  05d6b	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  05d70	83 c4 0c	 add	 esp, 12			; 0000000cH
$L144885:

; 2196 : 
; 2197 : 	SOL_Rect nowSeen;

  05d73	8d 4d f0	 lea	 ecx, DWORD PTR _nowSeen$[ebp]
  05d76	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 2198 : 	graphMgr->NowSeen((int) id,planeID,nowSeen);

  05d7b	8d 45 f0	 lea	 eax, DWORD PTR _nowSeen$[ebp]
  05d7e	50		 push	 eax
  05d7f	8b 4d ec	 mov	 ecx, DWORD PTR _planeID$[ebp]
  05d82	51		 push	 ecx
  05d83	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05d86	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  05d8b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  05d90	50		 push	 eax
  05d91	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05d97	e8 00 00 00 00	 call	 ?NowSeen@GraphicsMgr@@QAEHHHAAVSOL_Rect@@@Z ; GraphicsMgr::NowSeen

; 2199 : 
; 2200 : 	id.SetIndexedProperty(actLeft, nowSeen.A.x);

  05d9c	66 8b 55 f0	 mov	 dx, WORD PTR _nowSeen$[ebp]
  05da0	52		 push	 edx
  05da1	6a 07		 push	 7
  05da3	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05da6	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty

; 2201 : 	id.SetIndexedProperty(actTop, nowSeen.A.y);

  05dab	66 8b 45 f4	 mov	 ax, WORD PTR _nowSeen$[ebp+4]
  05daf	50		 push	 eax
  05db0	6a 08		 push	 8
  05db2	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05db5	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty

; 2202 : 	id.SetIndexedProperty(actRight, nowSeen.B.x);

  05dba	66 8b 4d f8	 mov	 cx, WORD PTR _nowSeen$[ebp+8]
  05dbe	51		 push	 ecx
  05dbf	6a 09		 push	 9
  05dc1	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05dc4	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty

; 2203 : 	id.SetIndexedProperty(actBottom, nowSeen.B.y);

  05dc9	66 8b 55 fc	 mov	 dx, WORD PTR _nowSeen$[ebp+12]
  05dcd	52		 push	 edx
  05dce	6a 0a		 push	 10			; 0000000aH
  05dd0	8d 4d e8	 lea	 ecx, DWORD PTR _id$[ebp]
  05dd3	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty

; 2204 : }

  05dd8	8b e5		 mov	 esp, ebp
  05dda	5d		 pop	 ebp
  05ddb	c3		 ret	 0
?KSetNowSeen@@YAXPAF@Z ENDP				; KSetNowSeen
_TEXT	ENDS
EXTRN	?RespondsTo@Object@@QAEHG@Z:NEAR		; Object::RespondsTo
;	COMDAT ?RespondsTo@ObjectID@@QBEHG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?RespondsTo@ObjectID@@QBEHG@Z PROC NEAR			; ObjectID::RespondsTo, COMDAT

; 315  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 316  : 		//	return whether 'selector' is a property or method of us or our
; 317  : 		//	superclasses
; 318  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 319  : 		return (*this)->RespondsTo(selector);

  0000f	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?RespondsTo@Object@@QAEHG@Z ; Object::RespondsTo

; 320  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?RespondsTo@ObjectID@@QBEHG@Z ENDP			; ObjectID::RespondsTo
_TEXT	ENDS
PUBLIC	?SetIndexedProperty@Object@@QAEXHF@Z		; Object::SetIndexedProperty
;	COMDAT ?SetIndexedProperty@ObjectID@@QBEXHF@Z
_TEXT	SEGMENT
_index$ = 8
_property$ = 12
_this$ = -4
?SetIndexedProperty@ObjectID@@QBEXHF@Z PROC NEAR	; ObjectID::SetIndexedProperty, COMDAT

; 324  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  : 		//	set a property given an index into property offsets table
; 326  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 327  : 		(*this)->SetIndexedProperty(index, property);

  0000f	66 8b 45 0c	 mov	 ax, WORD PTR _property$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  00017	51		 push	 ecx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?SetIndexedProperty@Object@@QAEXHF@Z ; Object::SetIndexedProperty

; 328  : 	}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?SetIndexedProperty@ObjectID@@QBEXHF@Z ENDP		; ObjectID::SetIndexedProperty
_TEXT	ENDS
PUBLIC	?SetPropAtOffset@Object@@QAEAAFI@Z		; Object::SetPropAtOffset
EXTRN	?indexedPropertyOffsets@@3PAIA:BYTE		; indexedPropertyOffsets
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT
_this$ = -4
_index$ = 8
_property$ = 12
?SetIndexedProperty@Object@@QAEXHF@Z PROC NEAR		; Object::SetIndexedProperty, COMDAT

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 189  : 		//	set a property given an index into property offsets table
; 190  : 		extern size_t indexedPropertyOffsets[];
; 191  : 		SetPropAtOffset(indexedPropertyOffsets[index] * sizeof(Property)) =
; 192  : 			property;

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?indexedPropertyOffsets@@3PAIA[eax*4]
  00011	d1 e1		 shl	 ecx, 1
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?SetPropAtOffset@Object@@QAEAAFI@Z ; Object::SetPropAtOffset
  0001c	66 8b 55 0c	 mov	 dx, WORD PTR _property$[ebp]
  00020	66 89 10	 mov	 WORD PTR [eax], dx

; 193  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?SetIndexedProperty@Object@@QAEXHF@Z ENDP		; Object::SetIndexedProperty
_TEXT	ENDS
PUBLIC	?SetGraphicsUpdate@Object@@QAEXXZ		; Object::SetGraphicsUpdate
PUBLIC	?GetPropAtOffset@Object@@QAEAAFI@Z		; Object::GetPropAtOffset
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT
_this$ = -4
_offset$ = 8
?SetPropAtOffset@Object@@QAEAAFI@Z PROC NEAR		; Object::SetPropAtOffset, COMDAT

; 197  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 198  : 		//	return reference to property that is about to be changed
; 199  : 		if (offset <= MaxGraphUpdateOffset && offset >= MinGraphUpdateOffset)

  00007	83 7d 08 56	 cmp	 DWORD PTR _offset$[ebp], 86 ; 00000056H
  0000b	77 0e		 ja	 SHORT $L116783
  0000d	83 7d 08 30	 cmp	 DWORD PTR _offset$[ebp], 48 ; 00000030H
  00011	72 08		 jb	 SHORT $L116783

; 200  : 			SetGraphicsUpdate();

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?SetGraphicsUpdate@Object@@QAEXXZ ; Object::SetGraphicsUpdate
$L116783:

; 201  : 		return GetPropAtOffset(offset);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _offset$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?GetPropAtOffset@Object@@QAEAAFI@Z ; Object::GetPropAtOffset

; 202  : 	}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetPropAtOffset@Object@@QAEAAFI@Z ENDP			; Object::SetPropAtOffset
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?SetGraphicsUpdate@Object@@QAEXXZ PROC NEAR		; Object::SetGraphicsUpdate, COMDAT

; 97   : 	void		SetGraphicsUpdate()		{ info |= GRAPH_UPD; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  0000e	80 c9 08	 or	 cl, 8
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?SetGraphicsUpdate@Object@@QAEXXZ ENDP			; Object::SetGraphicsUpdate
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT
_this$ = -4
_offset$ = 8
?GetPropAtOffset@Object@@QAEAAFI@Z PROC NEAR		; Object::GetPropAtOffset, COMDAT

; 163  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 		//	get a property given an offset into the object
; 165  : 		return (Property&) ((char*) this)[offset];

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	03 45 08	 add	 eax, DWORD PTR _offset$[ebp]

; 166  : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?GetPropAtOffset@Object@@QAEAAFI@Z ENDP			; Object::GetPropAtOffset
_TEXT	ENDS
PUBLIC	?Area@SOL_Rect@@QBEJXZ				; SOL_Rect::Area
PUBLIC	?KObjectIntersect@@YAXPAF@Z			; KObjectIntersect
_TEXT	SEGMENT
_args$ = 8
_id$ = -36
_planeID$ = -32
_nowSeen$ = -24
_id2$ = -28
_planeID2$ = -4
_nowSeen2$ = -52
_intersectArea$ = -8
?KObjectIntersect@@YAXPAF@Z PROC NEAR			; KObjectIntersect

; 2208 : {

  05ddc	55		 push	 ebp
  05ddd	8b ec		 mov	 ebp, esp
  05ddf	83 ec 34	 sub	 esp, 52			; 00000034H

; 2209 : 	// Input
; 2210 : 	//      arg1-----the SCI Object
; 2211 : 	//      arg2-----the other SCI Object
; 2212 : 	// Ouput
; 2213 : 	//          -----The AREA of the object intersection.
; 2214 : 
; 2215 : 	ObjectID id = arg(1);

  05de2	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05de5	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  05de9	51		 push	 ecx
  05dea	8d 4d dc	 lea	 ecx, DWORD PTR _id$[ebp]
  05ded	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 2216 : 	int planeID = id.GetIndexedProperty(actPlaneID);

  05df2	6a 1a		 push	 26			; 0000001aH
  05df4	8d 4d dc	 lea	 ecx, DWORD PTR _id$[ebp]
  05df7	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  05dfc	0f bf d0	 movsx	 edx, ax
  05dff	89 55 e0	 mov	 DWORD PTR _planeID$[ebp], edx

; 2217 : 	SOL_Rect nowSeen;

  05e02	8d 4d e8	 lea	 ecx, DWORD PTR _nowSeen$[ebp]
  05e05	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 2218 : 	graphMgr->NowSeen(arg(1),planeID,nowSeen);

  05e0a	8d 45 e8	 lea	 eax, DWORD PTR _nowSeen$[ebp]
  05e0d	50		 push	 eax
  05e0e	8b 4d e0	 mov	 ecx, DWORD PTR _planeID$[ebp]
  05e11	51		 push	 ecx
  05e12	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05e15	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  05e19	50		 push	 eax
  05e1a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05e20	e8 00 00 00 00	 call	 ?NowSeen@GraphicsMgr@@QAEHHHAAVSOL_Rect@@@Z ; GraphicsMgr::NowSeen

; 2219 : 
; 2220 : 	ObjectID id2 = arg(2);

  05e25	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05e28	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  05e2c	52		 push	 edx
  05e2d	8d 4d e4	 lea	 ecx, DWORD PTR _id2$[ebp]
  05e30	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 2221 : 	int planeID2 = id2.GetIndexedProperty(actPlaneID);

  05e35	6a 1a		 push	 26			; 0000001aH
  05e37	8d 4d e4	 lea	 ecx, DWORD PTR _id2$[ebp]
  05e3a	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  05e3f	0f bf c0	 movsx	 eax, ax
  05e42	89 45 fc	 mov	 DWORD PTR _planeID2$[ebp], eax

; 2222 : 	SOL_Rect nowSeen2;

  05e45	8d 4d cc	 lea	 ecx, DWORD PTR _nowSeen2$[ebp]
  05e48	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 2223 : 	graphMgr->NowSeen(arg(2),planeID2,nowSeen2);

  05e4d	8d 4d cc	 lea	 ecx, DWORD PTR _nowSeen2$[ebp]
  05e50	51		 push	 ecx
  05e51	8b 55 fc	 mov	 edx, DWORD PTR _planeID2$[ebp]
  05e54	52		 push	 edx
  05e55	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05e58	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  05e5c	51		 push	 ecx
  05e5d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  05e63	e8 00 00 00 00	 call	 ?NowSeen@GraphicsMgr@@QAEHHHAAVSOL_Rect@@@Z ; GraphicsMgr::NowSeen

; 2224 : 	nowSeen.Clip(nowSeen2);

  05e68	8d 55 cc	 lea	 edx, DWORD PTR _nowSeen2$[ebp]
  05e6b	52		 push	 edx
  05e6c	8d 4d e8	 lea	 ecx, DWORD PTR _nowSeen$[ebp]
  05e6f	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip

; 2225 : 	long intersectArea = nowSeen.Area();

  05e74	8d 4d e8	 lea	 ecx, DWORD PTR _nowSeen$[ebp]
  05e77	e8 00 00 00 00	 call	 ?Area@SOL_Rect@@QBEJXZ	; SOL_Rect::Area
  05e7c	89 45 f8	 mov	 DWORD PTR _intersectArea$[ebp], eax

; 2226 : 	pm.acc = intersectArea;

  05e7f	8b 45 f8	 mov	 eax, DWORD PTR _intersectArea$[ebp]
  05e82	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2227 : 
; 2228 : }

  05e87	8b e5		 mov	 esp, ebp
  05e89	5d		 pop	 ebp
  05e8a	c3		 ret	 0
?KObjectIntersect@@YAXPAF@Z ENDP			; KObjectIntersect
_TEXT	ENDS
;	COMDAT ?Area@SOL_Rect@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Area@SOL_Rect@@QBEJXZ PROC NEAR			; SOL_Rect::Area, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 170  : 	return (long) Xlen() * Ylen();

  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  00010	8b f0		 mov	 esi, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  0001a	0f af c6	 imul	 eax, esi

; 171  : }

  0001d	5e		 pop	 esi
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?Area@SOL_Rect@@QBEJXZ ENDP				; SOL_Rect::Area
_TEXT	ENDS
PUBLIC	?KPriority@@YAXPAF@Z				; KPriority
_TEXT	SEGMENT
_args$ = 8
_i$ = -4
?KPriority@@YAXPAF@Z PROC NEAR				; KPriority

; 2232 : {

  05e8b	55		 push	 ebp
  05e8c	8b ec		 mov	 ebp, esp
  05e8e	51		 push	 ecx

; 2233 : 	int i = arg(1);

  05e8f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05e92	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  05e96	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx

; 2234 : //	graphMgr->ShowPriority(arg(1));
; 2235 : }

  05e99	8b e5		 mov	 esp, ebp
  05e9b	5d		 pop	 ebp
  05e9c	c3		 ret	 0
?KPriority@@YAXPAF@Z ENDP				; KPriority
_bmAddr$ = 8
_width$ = 12
_height$ = 16
_skip$ = 20
_xHot$ = 24
_yHot$ = 28
_xRes$ = 32
_yRes$ = 36
_palFlag$ = 40
_remap$ = 44
_celHeader$ = -4
?BuildHeader@@YAXPAEHHHHHHHHH@Z PROC NEAR		; BuildHeader

; 2248 : {

  05e9d	55		 push	 ebp
  05e9e	8b ec		 mov	 ebp, esp
  05ea0	51		 push	 ecx

; 2249 : 	// initialize the header
; 2250 : 	CelHeader* celHeader = (CelHeader*) bmAddr;

  05ea1	8b 45 08	 mov	 eax, DWORD PTR _bmAddr$[ebp]
  05ea4	89 45 fc	 mov	 DWORD PTR _celHeader$[ebp], eax

; 2251 : 	celHeader->xDim = width;

  05ea7	8b 4d fc	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  05eaa	66 8b 55 0c	 mov	 dx, WORD PTR _width$[ebp]
  05eae	66 89 11	 mov	 WORD PTR [ecx], dx

; 2252 : 	celHeader->yDim = height;

  05eb1	8b 45 fc	 mov	 eax, DWORD PTR _celHeader$[ebp]
  05eb4	66 8b 4d 10	 mov	 cx, WORD PTR _height$[ebp]
  05eb8	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 2253 : 	celHeader->xHot = xHot;

  05ebc	8b 55 fc	 mov	 edx, DWORD PTR _celHeader$[ebp]
  05ebf	66 8b 45 18	 mov	 ax, WORD PTR _xHot$[ebp]
  05ec3	66 89 42 04	 mov	 WORD PTR [edx+4], ax

; 2254 : 	celHeader->yHot = yHot;

  05ec7	8b 4d fc	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  05eca	66 8b 55 1c	 mov	 dx, WORD PTR _yHot$[ebp]
  05ece	66 89 51 06	 mov	 WORD PTR [ecx+6], dx

; 2255 : 	celHeader->skip = skip;

  05ed2	8b 45 fc	 mov	 eax, DWORD PTR _celHeader$[ebp]
  05ed5	8a 4d 14	 mov	 cl, BYTE PTR _skip$[ebp]
  05ed8	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 2256 : 	celHeader->compressType = 0;     //HOOK Needs to be fixed

  05edb	8b 55 fc	 mov	 edx, DWORD PTR _celHeader$[ebp]
  05ede	c6 42 09 00	 mov	 BYTE PTR [edx+9], 0

; 2257 : 	celHeader->dataFlags = 0;

  05ee2	8b 45 fc	 mov	 eax, DWORD PTR _celHeader$[ebp]
  05ee5	66 c7 40 0a 00
	00		 mov	 WORD PTR [eax+10], 0

; 2258 : 	celHeader->dataByteCount = width * height;

  05eeb	8b 4d 0c	 mov	 ecx, DWORD PTR _width$[ebp]
  05eee	0f af 4d 10	 imul	 ecx, DWORD PTR _height$[ebp]
  05ef2	8b 55 fc	 mov	 edx, DWORD PTR _celHeader$[ebp]
  05ef5	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 2259 : 	celHeader->controlByteCount = 0;

  05ef8	8b 45 fc	 mov	 eax, DWORD PTR _celHeader$[ebp]
  05efb	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 2260 : 	celHeader->xRes = xRes;

  05f02	8b 4d fc	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  05f05	66 8b 55 20	 mov	 dx, WORD PTR _xRes$[ebp]
  05f09	66 89 51 24	 mov	 WORD PTR [ecx+36], dx

; 2261 : 	celHeader->yRes = yRes;

  05f0d	8b 45 fc	 mov	 eax, DWORD PTR _celHeader$[ebp]
  05f10	66 8b 4d 24	 mov	 cx, WORD PTR _yRes$[ebp]
  05f14	66 89 48 26	 mov	 WORD PTR [eax+38], cx

; 2262 : 
; 2263 : 	if (palFlag) 

  05f18	83 7d 28 00	 cmp	 DWORD PTR _palFlag$[ebp], 0
  05f1c	74 12		 je	 SHORT $L144917

; 2264 : 		celHeader->paletteOffset = CELHEADERSIZE + (width * height);

  05f1e	8b 55 0c	 mov	 edx, DWORD PTR _width$[ebp]
  05f21	0f af 55 10	 imul	 edx, DWORD PTR _height$[ebp]
  05f25	83 c2 2e	 add	 edx, 46			; 0000002eH
  05f28	8b 45 fc	 mov	 eax, DWORD PTR _celHeader$[ebp]
  05f2b	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 2265 : 	else

  05f2e	eb 0a		 jmp	 SHORT $L144918
$L144917:

; 2266 : 		celHeader->paletteOffset = 0;

  05f30	8b 4d fc	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  05f33	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
$L144918:

; 2267 : 
; 2268 : 	// HOOK 
; 2269 : 	// the pics have the color offset in the controlOffset field
; 2270 : 	// when that is corrected then this can be corrected.
; 2271 : // celHeader->controlOffset = 0;
; 2272 : 	celHeader->controlOffset = CELHEADERSIZE;

  05f3a	8b 55 fc	 mov	 edx, DWORD PTR _celHeader$[ebp]
  05f3d	c7 42 18 2e 00
	00 00		 mov	 DWORD PTR [edx+24], 46	; 0000002eH

; 2273 : 	celHeader->colorOffset = CELHEADERSIZE;

  05f44	8b 45 fc	 mov	 eax, DWORD PTR _celHeader$[ebp]
  05f47	c7 40 1c 2e 00
	00 00		 mov	 DWORD PTR [eax+28], 46	; 0000002eH

; 2274 : 	celHeader->rowTableOffset = 0;

  05f4e	8b 4d fc	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  05f51	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 2275 : 
; 2276 : 	if (remap)

  05f58	83 7d 2c 00	 cmp	 DWORD PTR _remap$[ebp], 0
  05f5c	74 10		 je	 SHORT $L144919

; 2277 : 		celHeader->dataFlags |= 2; //2=REMAP_PRESENT

  05f5e	8b 55 fc	 mov	 edx, DWORD PTR _celHeader$[ebp]
  05f61	66 8b 42 0a	 mov	 ax, WORD PTR [edx+10]
  05f65	0c 02		 or	 al, 2
  05f67	8b 4d fc	 mov	 ecx, DWORD PTR _celHeader$[ebp]
  05f6a	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax
$L144919:

; 2278 : }

  05f6e	8b e5		 mov	 esp, ebp
  05f70	5d		 pop	 ebp
  05f71	c3		 ret	 0
?BuildHeader@@YAXPAEHHHHHHHHH@Z ENDP			; BuildHeader
_TEXT	ENDS
PUBLIC	?Max@@YAHHH@Z					; Max
EXTRN	?DrawThick@SOL_Line@@QAEXEHHHVMemID@@H@Z:NEAR	; SOL_Line::DrawThick
_TEXT	SEGMENT
_x1$ = 12
_y1$ = 16
_x2$ = 20
_y2$ = 24
_color$ = 28
_style$ = 32
_pattern$ = 36
_thickness$ = 40
_rect$ = 44
___$ReturnUdt$ = 8
_BM$ = -28
_BMWidth$ = -32
_BMHeight$ = -20
_skip$ = -24
_line$ = -16
?BuildLineBitmap@@YA?AVMemID@@HHHHEHHHAAVSOL_Rect@@@Z PROC NEAR ; BuildLineBitmap

; 2283 : {

  05f72	55		 push	 ebp
  05f73	8b ec		 mov	 ebp, esp
  05f75	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 2284 : 	MemID    BM;

  05f78	8d 4d e4	 lea	 ecx, DWORD PTR _BM$[ebp]
  05f7b	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 2285 : 
; 2286 : 	thickness = Max(1,thickness);

  05f80	8b 45 28	 mov	 eax, DWORD PTR _thickness$[ebp]
  05f83	50		 push	 eax
  05f84	6a 01		 push	 1
  05f86	e8 00 00 00 00	 call	 ?Max@@YAHHH@Z		; Max
  05f8b	83 c4 08	 add	 esp, 8
  05f8e	89 45 28	 mov	 DWORD PTR _thickness$[ebp], eax

; 2287 : 	if (!(thickness & 1))

  05f91	8b 4d 28	 mov	 ecx, DWORD PTR _thickness$[ebp]
  05f94	83 e1 01	 and	 ecx, 1
  05f97	85 c9		 test	 ecx, ecx
  05f99	75 09		 jne	 SHORT $L144939

; 2288 : 		thickness -= 1;

  05f9b	8b 55 28	 mov	 edx, DWORD PTR _thickness$[ebp]
  05f9e	83 ea 01	 sub	 edx, 1
  05fa1	89 55 28	 mov	 DWORD PTR _thickness$[ebp], edx
$L144939:

; 2289 : 	thickness = thickness >> 1;

  05fa4	8b 45 28	 mov	 eax, DWORD PTR _thickness$[ebp]
  05fa7	d1 f8		 sar	 eax, 1
  05fa9	89 45 28	 mov	 DWORD PTR _thickness$[ebp], eax

; 2290 : 
; 2291 : 	// Find the rectangle thats fits the line
; 2292 : 	rect.A.x = (x1 < x2)? x1 - thickness:x2 - thickness;

  05fac	8b 4d 0c	 mov	 ecx, DWORD PTR _x1$[ebp]
  05faf	3b 4d 14	 cmp	 ecx, DWORD PTR _x2$[ebp]
  05fb2	7d 0b		 jge	 SHORT $L151005
  05fb4	8b 55 0c	 mov	 edx, DWORD PTR _x1$[ebp]
  05fb7	2b 55 28	 sub	 edx, DWORD PTR _thickness$[ebp]
  05fba	89 55 d0	 mov	 DWORD PTR -48+[ebp], edx
  05fbd	eb 09		 jmp	 SHORT $L151006
$L151005:
  05fbf	8b 45 14	 mov	 eax, DWORD PTR _x2$[ebp]
  05fc2	2b 45 28	 sub	 eax, DWORD PTR _thickness$[ebp]
  05fc5	89 45 d0	 mov	 DWORD PTR -48+[ebp], eax
$L151006:
  05fc8	8b 4d 2c	 mov	 ecx, DWORD PTR _rect$[ebp]
  05fcb	8b 55 d0	 mov	 edx, DWORD PTR -48+[ebp]
  05fce	89 11		 mov	 DWORD PTR [ecx], edx

; 2293 : 	rect.A.y = (y1 < y2)? y1 - thickness:y2	- thickness;

  05fd0	8b 45 10	 mov	 eax, DWORD PTR _y1$[ebp]
  05fd3	3b 45 18	 cmp	 eax, DWORD PTR _y2$[ebp]
  05fd6	7d 0b		 jge	 SHORT $L151007
  05fd8	8b 4d 10	 mov	 ecx, DWORD PTR _y1$[ebp]
  05fdb	2b 4d 28	 sub	 ecx, DWORD PTR _thickness$[ebp]
  05fde	89 4d cc	 mov	 DWORD PTR -52+[ebp], ecx
  05fe1	eb 09		 jmp	 SHORT $L151008
$L151007:
  05fe3	8b 55 18	 mov	 edx, DWORD PTR _y2$[ebp]
  05fe6	2b 55 28	 sub	 edx, DWORD PTR _thickness$[ebp]
  05fe9	89 55 cc	 mov	 DWORD PTR -52+[ebp], edx
$L151008:
  05fec	8b 45 2c	 mov	 eax, DWORD PTR _rect$[ebp]
  05fef	8b 4d cc	 mov	 ecx, DWORD PTR -52+[ebp]
  05ff2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2294 : 	rect.B.x = (x2 < x1)? x1 + thickness:x2 + thickness;

  05ff5	8b 55 14	 mov	 edx, DWORD PTR _x2$[ebp]
  05ff8	3b 55 0c	 cmp	 edx, DWORD PTR _x1$[ebp]
  05ffb	7d 0b		 jge	 SHORT $L151009
  05ffd	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  06000	03 45 28	 add	 eax, DWORD PTR _thickness$[ebp]
  06003	89 45 c8	 mov	 DWORD PTR -56+[ebp], eax
  06006	eb 09		 jmp	 SHORT $L151010
$L151009:
  06008	8b 4d 14	 mov	 ecx, DWORD PTR _x2$[ebp]
  0600b	03 4d 28	 add	 ecx, DWORD PTR _thickness$[ebp]
  0600e	89 4d c8	 mov	 DWORD PTR -56+[ebp], ecx
$L151010:
  06011	8b 55 2c	 mov	 edx, DWORD PTR _rect$[ebp]
  06014	8b 45 c8	 mov	 eax, DWORD PTR -56+[ebp]
  06017	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 2295 : 	rect.B.y = (y2 < y1)? y1 + thickness:y2	+ thickness;

  0601a	8b 4d 18	 mov	 ecx, DWORD PTR _y2$[ebp]
  0601d	3b 4d 10	 cmp	 ecx, DWORD PTR _y1$[ebp]
  06020	7d 0b		 jge	 SHORT $L151011
  06022	8b 55 10	 mov	 edx, DWORD PTR _y1$[ebp]
  06025	03 55 28	 add	 edx, DWORD PTR _thickness$[ebp]
  06028	89 55 c4	 mov	 DWORD PTR -60+[ebp], edx
  0602b	eb 09		 jmp	 SHORT $L151012
$L151011:
  0602d	8b 45 18	 mov	 eax, DWORD PTR _y2$[ebp]
  06030	03 45 28	 add	 eax, DWORD PTR _thickness$[ebp]
  06033	89 45 c4	 mov	 DWORD PTR -60+[ebp], eax
$L151012:
  06036	8b 4d 2c	 mov	 ecx, DWORD PTR _rect$[ebp]
  06039	8b 55 c4	 mov	 edx, DWORD PTR -60+[ebp]
  0603c	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 2296 : 
; 2297 : 	// Get memory for bitmap
; 2298 : 	int BMWidth = rect.Xlen();

  0603f	8b 4d 2c	 mov	 ecx, DWORD PTR _rect$[ebp]
  06042	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  06047	89 45 e0	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 2299 : 	int BMHeight = rect.Ylen();

  0604a	8b 4d 2c	 mov	 ecx, DWORD PTR _rect$[ebp]
  0604d	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  06052	89 45 ec	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 2300 : 	BM.Get(MemBitmap,BMWidth*BMHeight+CELHEADERSIZE);

  06055	6a 00		 push	 0
  06057	6a 00		 push	 0
  06059	6a 00		 push	 0
  0605b	6a 00		 push	 0
  0605d	68 00 02 00 00	 push	 512			; 00000200H
  06062	8b 45 e0	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  06065	0f af 45 ec	 imul	 eax, DWORD PTR _BMHeight$[ebp]
  06069	83 c0 2e	 add	 eax, 46			; 0000002eH
  0606c	50		 push	 eax
  0606d	6a 4b		 push	 75			; 0000004bH
  0606f	8d 4d e4	 lea	 ecx, DWORD PTR _BM$[ebp]
  06072	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 2301 : 
; 2302 : 	// Chose a skip
; 2303 : 	uchar skip = 0;

  06077	c6 45 e8 00	 mov	 BYTE PTR _skip$[ebp], 0

; 2304 : 	if (color != SOL_SKIP)

  0607b	8b 4d 1c	 mov	 ecx, DWORD PTR _color$[ebp]
  0607e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  06084	81 f9 fa 00 00
	00		 cmp	 ecx, 250		; 000000faH
  0608a	74 04		 je	 SHORT $L144943

; 2305 : 		skip = SOL_SKIP;

  0608c	c6 45 e8 fa	 mov	 BYTE PTR _skip$[ebp], 250 ; 000000faH
$L144943:

; 2306 : 	// build the header for the BM
; 2307 : 	BuildHeader(BM,BMWidth,BMHeight,skip);

  06090	6a 00		 push	 0
  06092	6a 00		 push	 0
  06094	68 e0 01 00 00	 push	 480			; 000001e0H
  06099	68 80 02 00 00	 push	 640			; 00000280H
  0609e	6a 00		 push	 0
  060a0	6a 00		 push	 0
  060a2	8b 55 e8	 mov	 edx, DWORD PTR _skip$[ebp]
  060a5	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  060ab	52		 push	 edx
  060ac	8b 45 ec	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  060af	50		 push	 eax
  060b0	8b 4d e0	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  060b3	51		 push	 ecx
  060b4	51		 push	 ecx
  060b5	8b cc		 mov	 ecx, esp
  060b7	8d 55 e4	 lea	 edx, DWORD PTR _BM$[ebp]
  060ba	52		 push	 edx
  060bb	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  060c0	e8 00 00 00 00	 call	 ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ; BuildHeader
  060c5	83 c4 28	 add	 esp, 40			; 00000028H

; 2308 : 
; 2309 : 	// Fill the bitmap with skip
; 2310 : 	memset((uchar*) memMgr->GetAddr(BM)+CELHEADERSIZE,skip,BMWidth*BMHeight);

  060c8	8b 45 e0	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  060cb	0f af 45 ec	 imul	 eax, DWORD PTR _BMHeight$[ebp]
  060cf	50		 push	 eax
  060d0	8b 4d e8	 mov	 ecx, DWORD PTR _skip$[ebp]
  060d3	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  060d9	51		 push	 ecx
  060da	8d 4d e4	 lea	 ecx, DWORD PTR _BM$[ebp]
  060dd	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  060e2	50		 push	 eax
  060e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  060e9	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  060ee	83 c0 2e	 add	 eax, 46			; 0000002eH
  060f1	50		 push	 eax
  060f2	e8 00 00 00 00	 call	 _memset
  060f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2311 : 
; 2312 : 	SOL_Line line(x1 - rect.A.x,
; 2313 : 					  y1 - rect.A.y,
; 2314 : 					  x2 - rect.A.x,
; 2315 : 					  y2 - rect.A.y);

  060fa	8b 55 2c	 mov	 edx, DWORD PTR _rect$[ebp]
  060fd	8b 45 18	 mov	 eax, DWORD PTR _y2$[ebp]
  06100	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  06103	50		 push	 eax
  06104	8b 4d 2c	 mov	 ecx, DWORD PTR _rect$[ebp]
  06107	8b 55 14	 mov	 edx, DWORD PTR _x2$[ebp]
  0610a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0610c	52		 push	 edx
  0610d	8b 45 2c	 mov	 eax, DWORD PTR _rect$[ebp]
  06110	8b 4d 10	 mov	 ecx, DWORD PTR _y1$[ebp]
  06113	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  06116	51		 push	 ecx
  06117	8b 55 2c	 mov	 edx, DWORD PTR _rect$[ebp]
  0611a	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  0611d	2b 02		 sub	 eax, DWORD PTR [edx]
  0611f	50		 push	 eax
  06120	8d 4d f0	 lea	 ecx, DWORD PTR _line$[ebp]
  06123	e8 00 00 00 00	 call	 ??0SOL_Line@@QAE@HHHH@Z	; SOL_Line::SOL_Line

; 2316 : 
; 2317 : 	if (!thickness)

  06128	83 7d 28 00	 cmp	 DWORD PTR _thickness$[ebp], 0
  0612c	75 26		 jne	 SHORT $L144947

; 2318 : 		line.DrawThin(color,style,pattern,BM,BMWidth);

  0612e	8b 4d e0	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  06131	51		 push	 ecx
  06132	51		 push	 ecx
  06133	8b cc		 mov	 ecx, esp
  06135	8d 55 e4	 lea	 edx, DWORD PTR _BM$[ebp]
  06138	52		 push	 edx
  06139	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0613e	8b 45 24	 mov	 eax, DWORD PTR _pattern$[ebp]
  06141	50		 push	 eax
  06142	8b 4d 20	 mov	 ecx, DWORD PTR _style$[ebp]
  06145	51		 push	 ecx
  06146	8a 55 1c	 mov	 dl, BYTE PTR _color$[ebp]
  06149	52		 push	 edx
  0614a	8d 4d f0	 lea	 ecx, DWORD PTR _line$[ebp]
  0614d	e8 00 00 00 00	 call	 ?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z ; SOL_Line::DrawThin

; 2319 : 	else

  06152	eb 28		 jmp	 SHORT $L144949
$L144947:

; 2320 : //	 	msgMgr->Fatal(SrcLoc,"Thick line not currently supported");
; 2321 : 		line.DrawThick(color,thickness,style,pattern,BM,BMWidth);

  06154	8b 45 e0	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  06157	50		 push	 eax
  06158	51		 push	 ecx
  06159	8b cc		 mov	 ecx, esp
  0615b	8d 55 e4	 lea	 edx, DWORD PTR _BM$[ebp]
  0615e	52		 push	 edx
  0615f	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  06164	8b 45 24	 mov	 eax, DWORD PTR _pattern$[ebp]
  06167	50		 push	 eax
  06168	8b 4d 20	 mov	 ecx, DWORD PTR _style$[ebp]
  0616b	51		 push	 ecx
  0616c	8b 55 28	 mov	 edx, DWORD PTR _thickness$[ebp]
  0616f	52		 push	 edx
  06170	8a 45 1c	 mov	 al, BYTE PTR _color$[ebp]
  06173	50		 push	 eax
  06174	8d 4d f0	 lea	 ecx, DWORD PTR _line$[ebp]
  06177	e8 00 00 00 00	 call	 ?DrawThick@SOL_Line@@QAEXEHHHVMemID@@H@Z ; SOL_Line::DrawThick
$L144949:

; 2322 : 	return BM;

  0617c	8d 4d e4	 lea	 ecx, DWORD PTR _BM$[ebp]
  0617f	51		 push	 ecx
  06180	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  06183	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  06188	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2323 : }

  0618b	8b e5		 mov	 esp, ebp
  0618d	5d		 pop	 ebp
  0618e	c3		 ret	 0
?BuildLineBitmap@@YA?AVMemID@@HHHHEHHHAAVSOL_Rect@@@Z ENDP ; BuildLineBitmap
_TEXT	ENDS
PUBLIC	?size@SOL_List@@QAEAAHXZ			; SOL_List::size
PUBLIC	??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ		; FakeSOL_ListID::operator->
EXTRN	?at@SOL_List@@QAEGH@Z:NEAR			; SOL_List::at
_TEXT	SEGMENT
$T151017 = -108
$T151019 = -116
_theList$ = 12
_color$ = 16
_style$ = 20
_pattern$ = 24
_thickness$ = 28
_rect$ = 32
_close$ = 36
___$ReturnUdt$ = 8
_BM$ = -16
_i$ = -12
_id$144972 = -48
_arrayID$144975 = -44
_pointsID$144976 = -40
_points$144977 = -36
_size$144979 = -28
_i$144980 = -32
_BMWidth$ = -20
_BMHeight$ = -4
_skip$ = -8
_index$ = -24
_id$145008 = -72
_arrayID$145011 = -68
_pointsID$145012 = -64
_points$145013 = -60
_size$145015 = -52
_i$145016 = -56
_line$145020 = -88
_line$145026 = -104
?BuildPolygonBitmap@@YA?AVMemID@@USOL_ListID@@EHHHAAVSOL_Rect@@H@Z PROC NEAR ; BuildPolygonBitmap

; 2328 : {

  0618f	55		 push	 ebp
  06190	8b ec		 mov	 ebp, esp
  06192	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H

; 2329 : 	MemID    BM;

  06198	8d 4d f0	 lea	 ecx, DWORD PTR _BM$[ebp]
  0619b	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 2330 : 
; 2331 : 	thickness = Max(1,thickness);

  061a0	8b 45 1c	 mov	 eax, DWORD PTR _thickness$[ebp]
  061a3	50		 push	 eax
  061a4	6a 01		 push	 1
  061a6	e8 00 00 00 00	 call	 ?Max@@YAHHH@Z		; Max
  061ab	83 c4 08	 add	 esp, 8
  061ae	89 45 1c	 mov	 DWORD PTR _thickness$[ebp], eax

; 2332 : 	if (!(thickness & 1))

  061b1	8b 4d 1c	 mov	 ecx, DWORD PTR _thickness$[ebp]
  061b4	83 e1 01	 and	 ecx, 1
  061b7	85 c9		 test	 ecx, ecx
  061b9	75 09		 jne	 SHORT $L144967

; 2333 : 		thickness -= 1;

  061bb	8b 55 1c	 mov	 edx, DWORD PTR _thickness$[ebp]
  061be	83 ea 01	 sub	 edx, 1
  061c1	89 55 1c	 mov	 DWORD PTR _thickness$[ebp], edx
$L144967:

; 2334 : 	thickness = thickness >> 1;

  061c4	8b 45 1c	 mov	 eax, DWORD PTR _thickness$[ebp]
  061c7	d1 f8		 sar	 eax, 1
  061c9	89 45 1c	 mov	 DWORD PTR _thickness$[ebp], eax

; 2335 : 
; 2336 : 	for ( int i=0; i<theList->size(); i++ ) {

  061cc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  061d3	eb 09		 jmp	 SHORT $L144969
$L144970:
  061d5	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  061d8	83 c1 01	 add	 ecx, 1
  061db	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L144969:
  061de	8d 4d 0c	 lea	 ecx, DWORD PTR _theList$[ebp]
  061e1	e8 00 00 00 00	 call	 ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ; FakeSOL_ListID::operator->
  061e6	8b c8		 mov	 ecx, eax
  061e8	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  061ed	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  061f0	3b 10		 cmp	 edx, DWORD PTR [eax]
  061f2	0f 8d 24 01 00
	00		 jge	 $L144971

; 2337 : 	   ObjectID id = (ObjectID)theList->at ( i );

  061f8	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  061fb	50		 push	 eax
  061fc	8d 4d 0c	 lea	 ecx, DWORD PTR _theList$[ebp]
  061ff	e8 00 00 00 00	 call	 ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ; FakeSOL_ListID::operator->
  06204	8b c8		 mov	 ecx, eax
  06206	e8 00 00 00 00	 call	 ?at@SOL_List@@QAEGH@Z	; SOL_List::at
  0620b	50		 push	 eax
  0620c	8d 4d 94	 lea	 ecx, DWORD PTR $T151017[ebp]
  0620f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  06214	50		 push	 eax
  06215	8d 4d d0	 lea	 ecx, DWORD PTR _id$144972[ebp]
  06218	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID

; 2338 : 
; 2339 : 		ObjectID arrayID = id.GetProperty(s_points);

  0621d	6a 5b		 push	 91			; 0000005bH
  0621f	8d 4d d0	 lea	 ecx, DWORD PTR _id$144972[ebp]
  06222	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  06227	50		 push	 eax
  06228	8d 4d d4	 lea	 ecx, DWORD PTR _arrayID$144975[ebp]
  0622b	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 2340 : 		MemID pointsID = arrayID.GetProperty(s_data);

  06230	6a 71		 push	 113			; 00000071H
  06232	8d 4d d4	 lea	 ecx, DWORD PTR _arrayID$144975[ebp]
  06235	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0623a	50		 push	 eax
  0623b	8d 4d d8	 lea	 ecx, DWORD PTR _pointsID$144976[ebp]
  0623e	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 2341 : 
; 2342 :       SCI_Point* points = (SCI_Point*) memMgr->GetAddr(pointsID);

  06243	8d 4d d8	 lea	 ecx, DWORD PTR _pointsID$144976[ebp]
  06246	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0624b	50		 push	 eax
  0624c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  06252	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  06257	89 45 dc	 mov	 DWORD PTR _points$144977[ebp], eax

; 2343 : 
; 2344 : 		int size = id.GetProperty(s_size);

  0625a	6a 5a		 push	 90			; 0000005aH
  0625c	8d 4d d0	 lea	 ecx, DWORD PTR _id$144972[ebp]
  0625f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  06264	0f bf c8	 movsx	 ecx, ax
  06267	89 4d e4	 mov	 DWORD PTR _size$144979[ebp], ecx

; 2345 : 	
; 2346 : 		for (int i=1;i<=size;++i) {

  0626a	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _i$144980[ebp], 1
  06271	eb 09		 jmp	 SHORT $L144981
$L144982:
  06273	8b 55 e0	 mov	 edx, DWORD PTR _i$144980[ebp]
  06276	83 c2 01	 add	 edx, 1
  06279	89 55 e0	 mov	 DWORD PTR _i$144980[ebp], edx
$L144981:
  0627c	8b 45 e0	 mov	 eax, DWORD PTR _i$144980[ebp]
  0627f	3b 45 e4	 cmp	 eax, DWORD PTR _size$144979[ebp]
  06282	0f 8f 8f 00 00
	00		 jg	 $L144983

; 2347 : 			if (rect.A.x > points[i].x) 

  06288	8b 4d e0	 mov	 ecx, DWORD PTR _i$144980[ebp]
  0628b	8b 55 dc	 mov	 edx, DWORD PTR _points$144977[ebp]
  0628e	0f bf 04 8a	 movsx	 eax, WORD PTR [edx+ecx*4]
  06292	8b 4d 20	 mov	 ecx, DWORD PTR _rect$[ebp]
  06295	39 01		 cmp	 DWORD PTR [ecx], eax
  06297	7e 0f		 jle	 SHORT $L144984

; 2348 : 				rect.A.x = points[i].x;

  06299	8b 55 e0	 mov	 edx, DWORD PTR _i$144980[ebp]
  0629c	8b 45 dc	 mov	 eax, DWORD PTR _points$144977[ebp]
  0629f	0f bf 0c 90	 movsx	 ecx, WORD PTR [eax+edx*4]
  062a3	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  062a6	89 0a		 mov	 DWORD PTR [edx], ecx
$L144984:

; 2349 : 			if (rect.B.x < points[i].x) 

  062a8	8b 45 e0	 mov	 eax, DWORD PTR _i$144980[ebp]
  062ab	8b 4d dc	 mov	 ecx, DWORD PTR _points$144977[ebp]
  062ae	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  062b2	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp]
  062b5	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  062b8	7d 10		 jge	 SHORT $L144985

; 2350 : 				rect.B.x = points[i].x;

  062ba	8b 4d e0	 mov	 ecx, DWORD PTR _i$144980[ebp]
  062bd	8b 55 dc	 mov	 edx, DWORD PTR _points$144977[ebp]
  062c0	0f bf 04 8a	 movsx	 eax, WORD PTR [edx+ecx*4]
  062c4	8b 4d 20	 mov	 ecx, DWORD PTR _rect$[ebp]
  062c7	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L144985:

; 2351 : 
; 2352 : 			if (rect.A.y > points[i].y) 

  062ca	8b 55 e0	 mov	 edx, DWORD PTR _i$144980[ebp]
  062cd	8b 45 dc	 mov	 eax, DWORD PTR _points$144977[ebp]
  062d0	0f bf 4c 90 02	 movsx	 ecx, WORD PTR [eax+edx*4+2]
  062d5	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  062d8	39 4a 04	 cmp	 DWORD PTR [edx+4], ecx
  062db	7e 11		 jle	 SHORT $L144986

; 2353 : 				rect.A.y = points[i].y;

  062dd	8b 45 e0	 mov	 eax, DWORD PTR _i$144980[ebp]
  062e0	8b 4d dc	 mov	 ecx, DWORD PTR _points$144977[ebp]
  062e3	0f bf 54 81 02	 movsx	 edx, WORD PTR [ecx+eax*4+2]
  062e8	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp]
  062eb	89 50 04	 mov	 DWORD PTR [eax+4], edx
$L144986:

; 2354 : 			if (rect.B.y < points[i].y) 

  062ee	8b 4d e0	 mov	 ecx, DWORD PTR _i$144980[ebp]
  062f1	8b 55 dc	 mov	 edx, DWORD PTR _points$144977[ebp]
  062f4	0f bf 44 8a 02	 movsx	 eax, WORD PTR [edx+ecx*4+2]
  062f9	8b 4d 20	 mov	 ecx, DWORD PTR _rect$[ebp]
  062fc	39 41 0c	 cmp	 DWORD PTR [ecx+12], eax
  062ff	7d 11		 jge	 SHORT $L144987

; 2355 : 				rect.B.y = points[i].y;

  06301	8b 55 e0	 mov	 edx, DWORD PTR _i$144980[ebp]
  06304	8b 45 dc	 mov	 eax, DWORD PTR _points$144977[ebp]
  06307	0f bf 4c 90 02	 movsx	 ecx, WORD PTR [eax+edx*4+2]
  0630c	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  0630f	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
$L144987:

; 2356 : 		}

  06312	e9 5c ff ff ff	 jmp	 $L144982
$L144983:

; 2357 : 	}

  06317	e9 b9 fe ff ff	 jmp	 $L144970
$L144971:

; 2358 : 
; 2359 : 	rect.A.x -= thickness;

  0631c	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp]
  0631f	8b 08		 mov	 ecx, DWORD PTR [eax]
  06321	2b 4d 1c	 sub	 ecx, DWORD PTR _thickness$[ebp]
  06324	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  06327	89 0a		 mov	 DWORD PTR [edx], ecx

; 2360 : 	rect.A.y -= thickness;

  06329	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp]
  0632c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0632f	2b 4d 1c	 sub	 ecx, DWORD PTR _thickness$[ebp]
  06332	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  06335	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 2361 : 	rect.B.x += thickness;

  06338	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp]
  0633b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0633e	03 4d 1c	 add	 ecx, DWORD PTR _thickness$[ebp]
  06341	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  06344	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 2362 : 	rect.B.y += thickness;

  06347	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp]
  0634a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0634d	03 4d 1c	 add	 ecx, DWORD PTR _thickness$[ebp]
  06350	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  06353	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 2363 : 
; 2364 : 	// Get memory for bitmap
; 2365 : 	int BMWidth = Max(0,rect.Xlen());

  06356	8b 4d 20	 mov	 ecx, DWORD PTR _rect$[ebp]
  06359	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  0635e	50		 push	 eax
  0635f	6a 00		 push	 0
  06361	e8 00 00 00 00	 call	 ?Max@@YAHHH@Z		; Max
  06366	83 c4 08	 add	 esp, 8
  06369	89 45 ec	 mov	 DWORD PTR _BMWidth$[ebp], eax

; 2366 : 	int BMHeight = Max(0,rect.Ylen());

  0636c	8b 4d 20	 mov	 ecx, DWORD PTR _rect$[ebp]
  0636f	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  06374	50		 push	 eax
  06375	6a 00		 push	 0
  06377	e8 00 00 00 00	 call	 ?Max@@YAHHH@Z		; Max
  0637c	83 c4 08	 add	 esp, 8
  0637f	89 45 fc	 mov	 DWORD PTR _BMHeight$[ebp], eax

; 2367 : 	BM.Get(MemBitmap,BMWidth*BMHeight+CELHEADERSIZE);

  06382	6a 00		 push	 0
  06384	6a 00		 push	 0
  06386	6a 00		 push	 0
  06388	6a 00		 push	 0
  0638a	68 00 02 00 00	 push	 512			; 00000200H
  0638f	8b 45 ec	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  06392	0f af 45 fc	 imul	 eax, DWORD PTR _BMHeight$[ebp]
  06396	83 c0 2e	 add	 eax, 46			; 0000002eH
  06399	50		 push	 eax
  0639a	6a 4b		 push	 75			; 0000004bH
  0639c	8d 4d f0	 lea	 ecx, DWORD PTR _BM$[ebp]
  0639f	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 2368 : 
; 2369 : 	// Chose a skip
; 2370 : 	uchar skip = 0;

  063a4	c6 45 f8 00	 mov	 BYTE PTR _skip$[ebp], 0

; 2371 : 	if (color != SOL_SKIP)

  063a8	8b 4d 10	 mov	 ecx, DWORD PTR _color$[ebp]
  063ab	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  063b1	81 f9 fa 00 00
	00		 cmp	 ecx, 250		; 000000faH
  063b7	74 04		 je	 SHORT $L145001

; 2372 : 		skip = SOL_SKIP;

  063b9	c6 45 f8 fa	 mov	 BYTE PTR _skip$[ebp], 250 ; 000000faH
$L145001:

; 2373 : 	// build the header for the BM
; 2374 : 	BuildHeader(BM,BMWidth,BMHeight,skip);

  063bd	6a 00		 push	 0
  063bf	6a 00		 push	 0
  063c1	68 e0 01 00 00	 push	 480			; 000001e0H
  063c6	68 80 02 00 00	 push	 640			; 00000280H
  063cb	6a 00		 push	 0
  063cd	6a 00		 push	 0
  063cf	8b 55 f8	 mov	 edx, DWORD PTR _skip$[ebp]
  063d2	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  063d8	52		 push	 edx
  063d9	8b 45 fc	 mov	 eax, DWORD PTR _BMHeight$[ebp]
  063dc	50		 push	 eax
  063dd	8b 4d ec	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  063e0	51		 push	 ecx
  063e1	51		 push	 ecx
  063e2	8b cc		 mov	 ecx, esp
  063e4	8d 55 f0	 lea	 edx, DWORD PTR _BM$[ebp]
  063e7	52		 push	 edx
  063e8	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  063ed	e8 00 00 00 00	 call	 ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ; BuildHeader
  063f2	83 c4 28	 add	 esp, 40			; 00000028H

; 2375 : 
; 2376 : 	// Fill the bitmap with skip
; 2377 : 	memset((uchar*) memMgr->GetAddr(BM)+CELHEADERSIZE,skip,BMWidth*BMHeight);

  063f5	8b 45 ec	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  063f8	0f af 45 fc	 imul	 eax, DWORD PTR _BMHeight$[ebp]
  063fc	50		 push	 eax
  063fd	8b 4d f8	 mov	 ecx, DWORD PTR _skip$[ebp]
  06400	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  06406	51		 push	 ecx
  06407	8d 4d f0	 lea	 ecx, DWORD PTR _BM$[ebp]
  0640a	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0640f	50		 push	 eax
  06410	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  06416	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  0641b	83 c0 2e	 add	 eax, 46			; 0000002eH
  0641e	50		 push	 eax
  0641f	e8 00 00 00 00	 call	 _memset
  06424	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2378 : 
; 2379 : 	for ( int index=0; index<theList->size(); index++ ) {

  06427	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0
  0642e	eb 09		 jmp	 SHORT $L145005
$L145006:
  06430	8b 55 e8	 mov	 edx, DWORD PTR _index$[ebp]
  06433	83 c2 01	 add	 edx, 1
  06436	89 55 e8	 mov	 DWORD PTR _index$[ebp], edx
$L145005:
  06439	8d 4d 0c	 lea	 ecx, DWORD PTR _theList$[ebp]
  0643c	e8 00 00 00 00	 call	 ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ; FakeSOL_ListID::operator->
  06441	8b c8		 mov	 ecx, eax
  06443	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  06448	8b 4d e8	 mov	 ecx, DWORD PTR _index$[ebp]
  0644b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0644d	0f 8d de 01 00
	00		 jge	 $L145007

; 2380 : 		ObjectID id = (ObjectID)theList->at ( index );

  06453	8b 55 e8	 mov	 edx, DWORD PTR _index$[ebp]
  06456	52		 push	 edx
  06457	8d 4d 0c	 lea	 ecx, DWORD PTR _theList$[ebp]
  0645a	e8 00 00 00 00	 call	 ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ; FakeSOL_ListID::operator->
  0645f	8b c8		 mov	 ecx, eax
  06461	e8 00 00 00 00	 call	 ?at@SOL_List@@QAEGH@Z	; SOL_List::at
  06466	50		 push	 eax
  06467	8d 4d 8c	 lea	 ecx, DWORD PTR $T151019[ebp]
  0646a	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0646f	50		 push	 eax
  06470	8d 4d b8	 lea	 ecx, DWORD PTR _id$145008[ebp]
  06473	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID

; 2381 : 
; 2382 : 		ObjectID arrayID = id.GetProperty(s_points);

  06478	6a 5b		 push	 91			; 0000005bH
  0647a	8d 4d b8	 lea	 ecx, DWORD PTR _id$145008[ebp]
  0647d	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  06482	50		 push	 eax
  06483	8d 4d bc	 lea	 ecx, DWORD PTR _arrayID$145011[ebp]
  06486	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 2383 : 		MemID pointsID = arrayID.GetProperty(s_data);

  0648b	6a 71		 push	 113			; 00000071H
  0648d	8d 4d bc	 lea	 ecx, DWORD PTR _arrayID$145011[ebp]
  06490	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  06495	50		 push	 eax
  06496	8d 4d c0	 lea	 ecx, DWORD PTR _pointsID$145012[ebp]
  06499	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 2384 : 
; 2385 :       SCI_Point* points = (SCI_Point*) memMgr->GetAddr(pointsID);

  0649e	8d 4d c0	 lea	 ecx, DWORD PTR _pointsID$145012[ebp]
  064a1	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  064a6	50		 push	 eax
  064a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  064ad	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  064b2	89 45 c4	 mov	 DWORD PTR _points$145013[ebp], eax

; 2386 : 
; 2387 : 		int size = id.GetProperty(s_size);

  064b5	6a 5a		 push	 90			; 0000005aH
  064b7	8d 4d b8	 lea	 ecx, DWORD PTR _id$145008[ebp]
  064ba	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  064bf	0f bf c0	 movsx	 eax, ax
  064c2	89 45 cc	 mov	 DWORD PTR _size$145015[ebp], eax

; 2388 : 	
; 2389 : 
; 2390 : 
; 2391 : 		for (int i=1;i<size;++i) {

  064c5	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _i$145016[ebp], 1
  064cc	eb 09		 jmp	 SHORT $L145017
$L145018:
  064ce	8b 4d c8	 mov	 ecx, DWORD PTR _i$145016[ebp]
  064d1	83 c1 01	 add	 ecx, 1
  064d4	89 4d c8	 mov	 DWORD PTR _i$145016[ebp], ecx
$L145017:
  064d7	8b 55 c8	 mov	 edx, DWORD PTR _i$145016[ebp]
  064da	3b 55 cc	 cmp	 edx, DWORD PTR _size$145015[ebp]
  064dd	0f 8d a6 00 00
	00		 jge	 $L145019

; 2392 : 			SOL_Line line(points[i].x - rect.A.x,
; 2393 : 							  points[i].y - rect.A.y,
; 2394 : 							  points[i+1].x - rect.A.x,
; 2395 : 							  points[i+1].y - rect.A.y);

  064e3	8b 45 c8	 mov	 eax, DWORD PTR _i$145016[ebp]
  064e6	8b 4d c4	 mov	 ecx, DWORD PTR _points$145013[ebp]
  064e9	0f bf 54 81 06	 movsx	 edx, WORD PTR [ecx+eax*4+6]
  064ee	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp]
  064f1	2b 50 04	 sub	 edx, DWORD PTR [eax+4]
  064f4	52		 push	 edx
  064f5	8b 4d c8	 mov	 ecx, DWORD PTR _i$145016[ebp]
  064f8	8b 55 c4	 mov	 edx, DWORD PTR _points$145013[ebp]
  064fb	0f bf 44 8a 04	 movsx	 eax, WORD PTR [edx+ecx*4+4]
  06500	8b 4d 20	 mov	 ecx, DWORD PTR _rect$[ebp]
  06503	2b 01		 sub	 eax, DWORD PTR [ecx]
  06505	50		 push	 eax
  06506	8b 55 c8	 mov	 edx, DWORD PTR _i$145016[ebp]
  06509	8b 45 c4	 mov	 eax, DWORD PTR _points$145013[ebp]
  0650c	0f bf 4c 90 02	 movsx	 ecx, WORD PTR [eax+edx*4+2]
  06511	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  06514	2b 4a 04	 sub	 ecx, DWORD PTR [edx+4]
  06517	51		 push	 ecx
  06518	8b 45 c8	 mov	 eax, DWORD PTR _i$145016[ebp]
  0651b	8b 4d c4	 mov	 ecx, DWORD PTR _points$145013[ebp]
  0651e	0f bf 14 81	 movsx	 edx, WORD PTR [ecx+eax*4]
  06522	8b 45 20	 mov	 eax, DWORD PTR _rect$[ebp]
  06525	2b 10		 sub	 edx, DWORD PTR [eax]
  06527	52		 push	 edx
  06528	8d 4d a8	 lea	 ecx, DWORD PTR _line$145020[ebp]
  0652b	e8 00 00 00 00	 call	 ??0SOL_Line@@QAE@HHHH@Z	; SOL_Line::SOL_Line

; 2396 : 			if (!thickness)

  06530	83 7d 1c 00	 cmp	 DWORD PTR _thickness$[ebp], 0
  06534	75 26		 jne	 SHORT $L145021

; 2397 : 				line.DrawThin(color,style,pattern,BM,BMWidth);

  06536	8b 4d ec	 mov	 ecx, DWORD PTR _BMWidth$[ebp]
  06539	51		 push	 ecx
  0653a	51		 push	 ecx
  0653b	8b cc		 mov	 ecx, esp
  0653d	8d 55 f0	 lea	 edx, DWORD PTR _BM$[ebp]
  06540	52		 push	 edx
  06541	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  06546	8b 45 18	 mov	 eax, DWORD PTR _pattern$[ebp]
  06549	50		 push	 eax
  0654a	8b 4d 14	 mov	 ecx, DWORD PTR _style$[ebp]
  0654d	51		 push	 ecx
  0654e	8a 55 10	 mov	 dl, BYTE PTR _color$[ebp]
  06551	52		 push	 edx
  06552	8d 4d a8	 lea	 ecx, DWORD PTR _line$145020[ebp]
  06555	e8 00 00 00 00	 call	 ?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z ; SOL_Line::DrawThin

; 2398 : 			else

  0655a	eb 28		 jmp	 SHORT $L145023
$L145021:

; 2399 : //	 	      msgMgr->Fatal(SrcLoc,"Thick line not currently supported");
; 2400 : 				line.DrawThick(color,thickness,style,pattern,BM,BMWidth);

  0655c	8b 45 ec	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  0655f	50		 push	 eax
  06560	51		 push	 ecx
  06561	8b cc		 mov	 ecx, esp
  06563	8d 55 f0	 lea	 edx, DWORD PTR _BM$[ebp]
  06566	52		 push	 edx
  06567	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0656c	8b 45 18	 mov	 eax, DWORD PTR _pattern$[ebp]
  0656f	50		 push	 eax
  06570	8b 4d 14	 mov	 ecx, DWORD PTR _style$[ebp]
  06573	51		 push	 ecx
  06574	8b 55 1c	 mov	 edx, DWORD PTR _thickness$[ebp]
  06577	52		 push	 edx
  06578	8a 45 10	 mov	 al, BYTE PTR _color$[ebp]
  0657b	50		 push	 eax
  0657c	8d 4d a8	 lea	 ecx, DWORD PTR _line$145020[ebp]
  0657f	e8 00 00 00 00	 call	 ?DrawThick@SOL_Line@@QAEXEHHHVMemID@@H@Z ; SOL_Line::DrawThick
$L145023:

; 2401 : 		}

  06584	e9 45 ff ff ff	 jmp	 $L145018
$L145019:

; 2402 : 		if (close) {

  06589	83 7d 24 00	 cmp	 DWORD PTR _close$[ebp], 0
  0658d	0f 84 99 00 00
	00		 je	 $L145029

; 2403 : 			SOL_Line line(points[1].x - rect.A.x,
; 2404 : 							  points[1].y - rect.A.y,
; 2405 : 							  points[size].x - rect.A.x,
; 2406 : 							  points[size].y - rect.A.y);

  06593	8b 4d cc	 mov	 ecx, DWORD PTR _size$145015[ebp]
  06596	8b 55 c4	 mov	 edx, DWORD PTR _points$145013[ebp]
  06599	0f bf 44 8a 02	 movsx	 eax, WORD PTR [edx+ecx*4+2]
  0659e	8b 4d 20	 mov	 ecx, DWORD PTR _rect$[ebp]
  065a1	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  065a4	50		 push	 eax
  065a5	8b 55 cc	 mov	 edx, DWORD PTR _size$145015[ebp]
  065a8	8b 45 c4	 mov	 eax, DWORD PTR _points$145013[ebp]
  065ab	0f bf 0c 90	 movsx	 ecx, WORD PTR [eax+edx*4]
  065af	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  065b2	2b 0a		 sub	 ecx, DWORD PTR [edx]
  065b4	51		 push	 ecx
  065b5	8b 45 c4	 mov	 eax, DWORD PTR _points$145013[ebp]
  065b8	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  065bc	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  065bf	2b 4a 04	 sub	 ecx, DWORD PTR [edx+4]
  065c2	51		 push	 ecx
  065c3	8b 45 c4	 mov	 eax, DWORD PTR _points$145013[ebp]
  065c6	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  065ca	8b 55 20	 mov	 edx, DWORD PTR _rect$[ebp]
  065cd	2b 0a		 sub	 ecx, DWORD PTR [edx]
  065cf	51		 push	 ecx
  065d0	8d 4d 98	 lea	 ecx, DWORD PTR _line$145026[ebp]
  065d3	e8 00 00 00 00	 call	 ??0SOL_Line@@QAE@HHHH@Z	; SOL_Line::SOL_Line

; 2407 : 			if (!thickness)

  065d8	83 7d 1c 00	 cmp	 DWORD PTR _thickness$[ebp], 0
  065dc	75 26		 jne	 SHORT $L145027

; 2408 : 				line.DrawThin(color,style,pattern,BM,BMWidth);

  065de	8b 45 ec	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  065e1	50		 push	 eax
  065e2	51		 push	 ecx
  065e3	8b cc		 mov	 ecx, esp
  065e5	8d 55 f0	 lea	 edx, DWORD PTR _BM$[ebp]
  065e8	52		 push	 edx
  065e9	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  065ee	8b 45 18	 mov	 eax, DWORD PTR _pattern$[ebp]
  065f1	50		 push	 eax
  065f2	8b 4d 14	 mov	 ecx, DWORD PTR _style$[ebp]
  065f5	51		 push	 ecx
  065f6	8a 55 10	 mov	 dl, BYTE PTR _color$[ebp]
  065f9	52		 push	 edx
  065fa	8d 4d 98	 lea	 ecx, DWORD PTR _line$145026[ebp]
  065fd	e8 00 00 00 00	 call	 ?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z ; SOL_Line::DrawThin

; 2409 : 			else

  06602	eb 28		 jmp	 SHORT $L145029
$L145027:

; 2410 : //	 	      msgMgr->Fatal(SrcLoc,"Thick line not currently supported");
; 2411 : 				line.DrawThick(color,thickness,style,pattern,BM,BMWidth);

  06604	8b 45 ec	 mov	 eax, DWORD PTR _BMWidth$[ebp]
  06607	50		 push	 eax
  06608	51		 push	 ecx
  06609	8b cc		 mov	 ecx, esp
  0660b	8d 55 f0	 lea	 edx, DWORD PTR _BM$[ebp]
  0660e	52		 push	 edx
  0660f	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  06614	8b 45 18	 mov	 eax, DWORD PTR _pattern$[ebp]
  06617	50		 push	 eax
  06618	8b 4d 14	 mov	 ecx, DWORD PTR _style$[ebp]
  0661b	51		 push	 ecx
  0661c	8b 55 1c	 mov	 edx, DWORD PTR _thickness$[ebp]
  0661f	52		 push	 edx
  06620	8a 45 10	 mov	 al, BYTE PTR _color$[ebp]
  06623	50		 push	 eax
  06624	8d 4d 98	 lea	 ecx, DWORD PTR _line$145026[ebp]
  06627	e8 00 00 00 00	 call	 ?DrawThick@SOL_Line@@QAEXEHHHVMemID@@H@Z ; SOL_Line::DrawThick
$L145029:

; 2413 : 	}

  0662c	e9 ff fd ff ff	 jmp	 $L145006
$L145007:

; 2414 : 
; 2415 : 	return BM;

  06631	8d 4d f0	 lea	 ecx, DWORD PTR _BM$[ebp]
  06634	51		 push	 ecx
  06635	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  06638	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0663d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2416 : }

  06640	8b e5		 mov	 esp, ebp
  06642	5d		 pop	 ebp
  06643	c3		 ret	 0
?BuildPolygonBitmap@@YA?AVMemID@@USOL_ListID@@EHHHAAVSOL_Rect@@H@Z ENDP ; BuildPolygonBitmap
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT
_this$ = -4
?size@SOL_List@@QAEAAHXZ PROC NEAR			; SOL_List::size, COMDAT

; 24   : 	inline int &size ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return _size;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4

; 26   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?size@SOL_List@@QAEAAHXZ ENDP				; SOL_List::size
_TEXT	ENDS
;	COMDAT ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ PROC NEAR		; FakeSOL_ListID::operator->, COMDAT

; 84   : FakeTemplateID(FakeSOL_ListID, SOL_List, MemList)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ENDP		; FakeSOL_ListID::operator->
_TEXT	ENDS
PUBLIC	?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z	; GraphicsMgr::ScrollScreenItems
PUBLIC	?Length@ScreenItemList@@QBEHXZ			; ScreenItemList::Length
PUBLIC	??AScreenItemList@@QAEAAVScreenItem@@H@Z	; ScreenItemList::operator[]
PUBLIC	?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ	; SOL_Plane::SIList
PUBLIC	?KMovePlaneItems@@YAXPAF@Z			; KMovePlaneItems
_TEXT	SEGMENT
_args$ = 8
_planeID$ = -20
_deltaX$ = -24
_deltaY$ = -28
_movePic$ = -8
_siArray$ = -4
_count$ = -12
_i$ = -16
_siID$145045 = -32
_newX$145049 = -36
_newY$145052 = -40
?KMovePlaneItems@@YAXPAF@Z PROC NEAR			; KMovePlaneItems

; 2419 : {

  06644	55		 push	 ebp
  06645	8b ec		 mov	 ebp, esp
  06647	83 ec 28	 sub	 esp, 40			; 00000028H

; 2420 : 	// Shifts all the screen items in the plane
; 2421 : 	// Input
; 2422 : 	//      arg1-----the SCI Object plane id
; 2423 : 	//      arg2-----the delta x 
; 2424 : 	//      arg3-----the delta y 
; 2425 : 	//      arg4-----Bool shift the picture items also
; 2426 : 	// Ouput
; 2427 : 	//      none
; 2428 : 
; 2429 : 	int	planeID = arg(1);

  0664a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0664d	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  06651	89 4d ec	 mov	 DWORD PTR _planeID$[ebp], ecx

; 2430 : 	int	deltaX = arg(2);

  06654	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  06657	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  0665b	89 45 e8	 mov	 DWORD PTR _deltaX$[ebp], eax

; 2431 : 	int	deltaY = arg(3);

  0665e	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  06661	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  06665	89 55 e4	 mov	 DWORD PTR _deltaY$[ebp], edx

; 2432 : 	Bool 	movePic = False;

  06668	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _movePic$[ebp], 0

; 2433 : 	if (argCount > 3)

  0666f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  06672	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  06675	83 f9 03	 cmp	 ecx, 3
  06678	7e 0a		 jle	 SHORT $L145038

; 2434 : 		movePic = arg(4);

  0667a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0667d	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  06681	89 45 f8	 mov	 DWORD PTR _movePic$[ebp], eax
$L145038:

; 2435 : 
; 2436 : 	graphMgr->ScrollScreenItems(planeID,deltaX,deltaY,movePic);

  06684	8b 4d f8	 mov	 ecx, DWORD PTR _movePic$[ebp]
  06687	51		 push	 ecx
  06688	8b 55 e4	 mov	 edx, DWORD PTR _deltaY$[ebp]
  0668b	52		 push	 edx
  0668c	8b 45 e8	 mov	 eax, DWORD PTR _deltaX$[ebp]
  0668f	50		 push	 eax
  06690	8b 4d ec	 mov	 ecx, DWORD PTR _planeID$[ebp]
  06693	51		 push	 ecx
  06694	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0669a	e8 00 00 00 00	 call	 ?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z ; GraphicsMgr::ScrollScreenItems

; 2437 : 
; 2438 : 	// Update position of all SCI objects in plane
; 2439 : 
; 2440 : 	ScreenItemList& siArray = graphMgr->GetPlaneNext(planeID)->SIList();

  0669f	8b 55 ec	 mov	 edx, DWORD PTR _planeID$[ebp]
  066a2	52		 push	 edx
  066a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  066a9	e8 00 00 00 00	 call	 ?GetPlaneNext@GraphicsMgr@@QAEPAVSOL_Plane@@H@Z ; GraphicsMgr::GetPlaneNext
  066ae	8b c8		 mov	 ecx, eax
  066b0	e8 00 00 00 00	 call	 ?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ ; SOL_Plane::SIList
  066b5	89 45 fc	 mov	 DWORD PTR _siArray$[ebp], eax

; 2441 : 	int count = siArray.Length();

  066b8	8b 4d fc	 mov	 ecx, DWORD PTR _siArray$[ebp]
  066bb	e8 00 00 00 00	 call	 ?Length@ScreenItemList@@QBEHXZ ; ScreenItemList::Length
  066c0	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax

; 2442 : 	for (int i=0;i<count;++i) {

  066c3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  066ca	eb 09		 jmp	 SHORT $L145042
$L145043:
  066cc	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  066cf	83 c0 01	 add	 eax, 1
  066d2	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L145042:
  066d5	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  066d8	3b 4d f4	 cmp	 ecx, DWORD PTR _count$[ebp]
  066db	0f 8d 85 00 00
	00		 jge	 $L145044

; 2443 : 		ObjectID  siID = siArray[i].Id();

  066e1	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  066e4	52		 push	 edx
  066e5	8b 4d fc	 mov	 ecx, DWORD PTR _siArray$[ebp]
  066e8	e8 00 00 00 00	 call	 ??AScreenItemList@@QAEAAVScreenItem@@H@Z ; ScreenItemList::operator[]
  066ed	8b c8		 mov	 ecx, eax
  066ef	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  066f4	50		 push	 eax
  066f5	8d 4d e0	 lea	 ecx, DWORD PTR _siID$145045[ebp]
  066f8	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 2444 : 		if ((int) siID < 100000)	{

  066fd	8d 4d e0	 lea	 ecx, DWORD PTR _siID$145045[ebp]
  06700	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  06705	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0670a	3d a0 86 01 00	 cmp	 eax, 100000		; 000186a0H
  0670f	7d 50		 jge	 SHORT $L145051

; 2445 : 			// Ajdust it's position
; 2446 : 			if (deltaX) {

  06711	83 7d e8 00	 cmp	 DWORD PTR _deltaX$[ebp], 0
  06715	74 22		 je	 SHORT $L145048

; 2447 : 				int newX = ((signed short)siID.GetIndexedProperty(actX)) + deltaX;

  06717	6a 00		 push	 0
  06719	8d 4d e0	 lea	 ecx, DWORD PTR _siID$145045[ebp]
  0671c	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  06721	0f bf c0	 movsx	 eax, ax
  06724	03 45 e8	 add	 eax, DWORD PTR _deltaX$[ebp]
  06727	89 45 dc	 mov	 DWORD PTR _newX$145049[ebp], eax

; 2448 : 				siID.SetIndexedProperty(actX,newX);

  0672a	66 8b 4d dc	 mov	 cx, WORD PTR _newX$145049[ebp]
  0672e	51		 push	 ecx
  0672f	6a 00		 push	 0
  06731	8d 4d e0	 lea	 ecx, DWORD PTR _siID$145045[ebp]
  06734	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty
$L145048:

; 2450 : 			if (deltaY) {

  06739	83 7d e4 00	 cmp	 DWORD PTR _deltaY$[ebp], 0
  0673d	74 22		 je	 SHORT $L145051

; 2451 : 				int newY = ((signed short)siID.GetIndexedProperty(actY)) + deltaY;

  0673f	6a 01		 push	 1
  06741	8d 4d e0	 lea	 ecx, DWORD PTR _siID$145045[ebp]
  06744	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  06749	0f bf d0	 movsx	 edx, ax
  0674c	03 55 e4	 add	 edx, DWORD PTR _deltaY$[ebp]
  0674f	89 55 d8	 mov	 DWORD PTR _newY$145052[ebp], edx

; 2452 : 				siID.SetIndexedProperty(actY,newY);

  06752	66 8b 45 d8	 mov	 ax, WORD PTR _newY$145052[ebp]
  06756	50		 push	 eax
  06757	6a 01		 push	 1
  06759	8d 4d e0	 lea	 ecx, DWORD PTR _siID$145045[ebp]
  0675c	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty
$L145051:

; 2455 : 	}

  06761	e9 66 ff ff ff	 jmp	 $L145043
$L145044:

; 2456 : }

  06766	8b e5		 mov	 esp, ebp
  06768	5d		 pop	 ebp
  06769	c3		 ret	 0
?KMovePlaneItems@@YAXPAF@Z ENDP				; KMovePlaneItems
_TEXT	ENDS
;	COMDAT ?Length@ScreenItemList@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Length@ScreenItemList@@QBEHXZ PROC NEAR		; ScreenItemList::Length, COMDAT

; 20   : 	int	Length() const							{return length;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 40 9c 00
	00		 mov	 eax, DWORD PTR [eax+40000]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?Length@ScreenItemList@@QBEHXZ ENDP			; ScreenItemList::Length
_TEXT	ENDS
;	COMDAT ??AScreenItemList@@QAEAAVScreenItem@@H@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
??AScreenItemList@@QAEAAVScreenItem@@H@Z PROC NEAR	; ScreenItemList::operator[], COMDAT

; 27   : 	ScreenItem& operator[](int index) 		{return *siArray[index];}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??AScreenItemList@@QAEAAVScreenItem@@H@Z ENDP		; ScreenItemList::operator[]
_TEXT	ENDS
;	COMDAT ?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ
_TEXT	SEGMENT
_this$ = -4
?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ PROC NEAR	; SOL_Plane::SIList, COMDAT

; 125  : 						SIList()						{return siArray;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 7c	 add	 eax, 124		; 0000007cH
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?SIList@SOL_Plane@@QAEAAVScreenItemList@@XZ ENDP	; SOL_Plane::SIList
_TEXT	ENDS
EXTRN	?ScrollScreenItems@Screen@@QAEXJHHH@Z:NEAR	; Screen::ScrollScreenItems
;	COMDAT ?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z
_TEXT	SEGMENT
_planeID$ = 8
_xStep$ = 12
_yStep$ = 16
_movePic$ = 20
_this$ = -4
?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z PROC NEAR	; GraphicsMgr::ScrollScreenItems, COMDAT

; 79   : 					{next.ScrollScreenItems(planeID,xStep,yStep,movePic);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 14	 mov	 eax, DWORD PTR _movePic$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _yStep$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _xStep$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _planeID$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 14	 add	 ecx, 20			; 00000014H
  0001d	e8 00 00 00 00	 call	 ?ScrollScreenItems@Screen@@QAEXJHHH@Z ; Screen::ScrollScreenItems
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 10 00	 ret	 16			; 00000010H
?ScrollScreenItems@GraphicsMgr@@QAEXJHHH@Z ENDP		; GraphicsMgr::ScrollScreenItems
_TEXT	ENDS
PUBLIC	??4SOL_Rect@@QAEAAV0@ABV0@@Z			; SOL_Rect::operator=
PUBLIC	??0ArrayID@@QAE@G@Z				; ArrayID::ArrayID
PUBLIC	?KBaseLineSpan@@YAXPAF@Z			; KBaseLineSpan
EXTRN	?ReadLineSpan@CelObj@@QAE?AVSOL_Rect@@H@Z:NEAR	; CelObj::ReadLineSpan
xdata$x	SEGMENT
$T151044 DD	019930520H
	DD	01H
	DD	FLAT:$T151046
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151046 DD	0ffffffffH
	DD	FLAT:$L151042
xdata$x	ENDS
_TEXT	SEGMENT
$T151032 = -160
$T151033 = -176
$T151038 = -184
$T151039 = -192
$T151040 = -200
$T151041 = -208
__$EHRec$ = -12
_args$ = 8
_vlc$ = -104
_ptz$ = -132
_ptemp$ = -152
_data$ = -24
_begin$ = -116
_end$ = -108
_i$ = -112
_cWidth$ = -136
_ptempA$145077 = -156
_xOff$ = -16
_yOff$ = -20
?KBaseLineSpan@@YAXPAF@Z PROC NEAR			; KBaseLineSpan

; 2462 : {

  0676a	55		 push	 ebp
  0676b	8b ec		 mov	 ebp, esp
  0676d	6a ff		 push	 -1
  0676f	68 00 00 00 00	 push	 $L151045
  06774	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0677a	50		 push	 eax
  0677b	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  06782	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH

; 2463 : 	//	   Input:
; 2464 : 	//		arg(1) = ArrayID to array for rect
; 2465 : 	//		arg(2) = view
; 2466 : 	//		arg(3) = loop
; 2467 : 	//		arg(4) = cel
; 2468 : 	//		arg(5) = [x]
; 2469 : 	//		arg(6) = [y]
; 2470 : 	//		Returns in ArrayID:
; 2471 : 	//			A.x = leftmost non-skip of cel
; 2472 : 	//			B.x = rightmost non-skip of cel
; 2473 : 	//			A.y = B.y = bottom line of non skip
; 2474 : 
; 2475 : 	CelObjView vlc(arg(2),arg(3),arg(4));

  06788	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0678b	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0678f	51		 push	 ecx
  06790	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  06793	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  06797	50		 push	 eax
  06798	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0679b	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  0679f	52		 push	 edx
  067a0	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  067a3	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  067a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2476 : 	
; 2477 : 	SOL_Rect ptz,ptemp;

  067af	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _ptz$[ebp]
  067b5	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  067ba	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _ptemp$[ebp]
  067c0	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 2478 : 
; 2479 : 	SCIWord* data = (SCIWord*) ((ArrayID) arg(1)).Data();

  067c5	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  067c8	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  067cc	51		 push	 ecx
  067cd	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T151032[ebp]
  067d3	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  067d8	8b c8		 mov	 ecx, eax
  067da	e8 00 00 00 00	 call	 ?Data@ArrayID@@QAEPAXXZ	; ArrayID::Data
  067df	89 45 e8	 mov	 DWORD PTR _data$[ebp], eax

; 2480 : 
; 2481 : 	int	begin,end;
; 2482 : 
; 2483 : 	begin	= data[1];

  067e2	8b 55 e8	 mov	 edx, DWORD PTR _data$[ebp]
  067e5	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  067e9	89 45 8c	 mov	 DWORD PTR _begin$[ebp], eax

; 2484 : 	end	= data[3];

  067ec	8b 4d e8	 mov	 ecx, DWORD PTR _data$[ebp]
  067ef	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  067f3	89 55 94	 mov	 DWORD PTR _end$[ebp], edx

; 2485 : 
; 2486 : 	if (end == 0)

  067f6	83 7d 94 00	 cmp	 DWORD PTR _end$[ebp], 0
  067fa	75 0e		 jne	 SHORT $L145066

; 2487 : 		end = vlc.Height() - 1;

  067fc	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  067ff	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  06804	83 e8 01	 sub	 eax, 1
  06807	89 45 94	 mov	 DWORD PTR _end$[ebp], eax
$L145066:

; 2488 : 
; 2489 : 	// Find beginning xy and ending xy of cel's base line span
; 2490 : 
; 2491 : 	ptemp.A.x =	 1000;

  0680a	c7 85 68 ff ff
	ff e8 03 00 00	 mov	 DWORD PTR _ptemp$[ebp], 1000 ; 000003e8H

; 2492 : 	ptemp.B.x = -1;

  06814	c7 85 70 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _ptemp$[ebp+8], -1

; 2493 : 
; 2494 : 	for (int i = begin; i <= end  ; i++) {

  0681e	8b 45 8c	 mov	 eax, DWORD PTR _begin$[ebp]
  06821	89 45 90	 mov	 DWORD PTR _i$[ebp], eax
  06824	eb 09		 jmp	 SHORT $L145068
$L145069:
  06826	8b 4d 90	 mov	 ecx, DWORD PTR _i$[ebp]
  06829	83 c1 01	 add	 ecx, 1
  0682c	89 4d 90	 mov	 DWORD PTR _i$[ebp], ecx
$L145068:
  0682f	8b 55 90	 mov	 edx, DWORD PTR _i$[ebp]
  06832	3b 55 94	 cmp	 edx, DWORD PTR _end$[ebp]
  06835	7f 6a		 jg	 SHORT $L145070

; 2495 : 		ptz	= vlc.ReadLineSpan(i);

  06837	8b 45 90	 mov	 eax, DWORD PTR _i$[ebp]
  0683a	50		 push	 eax
  0683b	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T151033[ebp]
  06841	51		 push	 ecx
  06842	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  06845	e8 00 00 00 00	 call	 ?ReadLineSpan@CelObj@@QAE?AVSOL_Rect@@H@Z ; CelObj::ReadLineSpan
  0684a	50		 push	 eax
  0684b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _ptz$[ebp]
  06851	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 2496 : 		
; 2497 : 		if (ptz.A.x != -1)  {

  06856	83 bd 7c ff ff
	ff ff		 cmp	 DWORD PTR _ptz$[ebp], -1
  0685d	74 40		 je	 SHORT $L145074

; 2498 : 			if (ptz.A.x < ptemp.A.x) {

  0685f	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _ptz$[ebp]
  06865	3b 95 68 ff ff
	ff		 cmp	 edx, DWORD PTR _ptemp$[ebp]
  0686b	7d 15		 jge	 SHORT $L145073

; 2499 : 				ptemp.A.x = ptz.A.x;

  0686d	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ptz$[ebp]
  06873	89 85 68 ff ff
	ff		 mov	 DWORD PTR _ptemp$[ebp], eax

; 2500 : 				ptemp.A.y = i;

  06879	8b 4d 90	 mov	 ecx, DWORD PTR _i$[ebp]
  0687c	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _ptemp$[ebp+4], ecx
$L145073:

; 2502 : 
; 2503 : 			if (ptz.B.x > ptemp.B.x) {

  06882	8b 55 84	 mov	 edx, DWORD PTR _ptz$[ebp+8]
  06885	3b 95 70 ff ff
	ff		 cmp	 edx, DWORD PTR _ptemp$[ebp+8]
  0688b	7e 12		 jle	 SHORT $L145074

; 2504 : 				ptemp.B.x = ptz.B.x;

  0688d	8b 45 84	 mov	 eax, DWORD PTR _ptz$[ebp+8]
  06890	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ptemp$[ebp+8], eax

; 2505 : 				ptemp.B.y = i;

  06896	8b 4d 90	 mov	 ecx, DWORD PTR _i$[ebp]
  06899	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _ptemp$[ebp+12], ecx
$L145074:

; 2508 : 	}

  0689f	eb 85		 jmp	 SHORT $L145069
$L145070:

; 2509 : 
; 2510 : 	// Make the xy points relative to the cel origin and the passed in point
; 2511 : 
; 2512 : 	int cWidth = vlc.Width();

  068a1	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  068a4	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  068a9	89 85 78 ff ff
	ff		 mov	 DWORD PTR _cWidth$[ebp], eax

; 2513 : 	if (vlc.Mirrored()) {

  068af	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  068b2	e8 00 00 00 00	 call	 ?Mirrored@CelObj@@QBEHXZ ; CelObj::Mirrored
  068b7	85 c0		 test	 eax, eax
  068b9	74 36		 je	 SHORT $L145076

; 2514 : 		int ptempA = ptemp.A.x;

  068bb	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _ptemp$[ebp]
  068c1	89 95 64 ff ff
	ff		 mov	 DWORD PTR _ptempA$145077[ebp], edx

; 2515 : 		ptemp.A.x = cWidth - ptemp.B.x -1;

  068c7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _cWidth$[ebp]
  068cd	2b 85 70 ff ff
	ff		 sub	 eax, DWORD PTR _ptemp$[ebp+8]
  068d3	83 e8 01	 sub	 eax, 1
  068d6	89 85 68 ff ff
	ff		 mov	 DWORD PTR _ptemp$[ebp], eax

; 2516 : 		ptemp.B.x = cWidth - ptempA - 1;

  068dc	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _cWidth$[ebp]
  068e2	2b 8d 64 ff ff
	ff		 sub	 ecx, DWORD PTR _ptempA$145077[ebp]
  068e8	83 e9 01	 sub	 ecx, 1
  068eb	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _ptemp$[ebp+8], ecx
$L145076:

; 2518 : 	int xOff = ((argCount > 4) ? arg(5) : 0);

  068f1	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  068f4	0f bf 02	 movsx	 eax, WORD PTR [edx]
  068f7	83 f8 04	 cmp	 eax, 4
  068fa	7e 0f		 jle	 SHORT $L151034
  068fc	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  068ff	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  06903	89 95 2c ff ff
	ff		 mov	 DWORD PTR -212+[ebp], edx
  06909	eb 0a		 jmp	 SHORT $L151035
$L151034:
  0690b	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR -212+[ebp], 0
$L151035:
  06915	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR -212+[ebp]
  0691b	89 45 f0	 mov	 DWORD PTR _xOff$[ebp], eax

; 2519 : 	int yOff = ((argCount > 5) ? arg(6) : 0);

  0691e	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  06921	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  06924	83 fa 05	 cmp	 edx, 5
  06927	7e 0f		 jle	 SHORT $L151036
  06929	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0692c	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  06930	89 8d 28 ff ff
	ff		 mov	 DWORD PTR -216+[ebp], ecx
  06936	eb 0a		 jmp	 SHORT $L151037
$L151036:
  06938	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR -216+[ebp], 0
$L151037:
  06942	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR -216+[ebp]
  06948	89 55 ec	 mov	 DWORD PTR _yOff$[ebp], edx

; 2520 : 
; 2521 : 
; 2522 : 	//	Store the info in the data which can be read back from SCI
; 2523 : 
; 2524 : 	// left
; 2525 : 	data[0] = (ptemp.A.x - vlc.XOrg()) * Ratio(SCIRESX, vlc.ResX()) + xOff;

  0694b	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  0694e	e8 00 00 00 00	 call	 ?ResX@CelObj@@QBEHXZ	; CelObj::ResX
  06953	50		 push	 eax
  06954	68 80 02 00 00	 push	 640			; 00000280H
  06959	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T151038[ebp]
  0695f	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  06964	50		 push	 eax
  06965	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  06968	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  0696d	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _ptemp$[ebp]
  06973	2b c8		 sub	 ecx, eax
  06975	51		 push	 ecx
  06976	e8 00 00 00 00	 call	 ??D@YAHHABVRatio@@@Z	; operator*
  0697b	83 c4 08	 add	 esp, 8
  0697e	03 45 f0	 add	 eax, DWORD PTR _xOff$[ebp]
  06981	8b 55 e8	 mov	 edx, DWORD PTR _data$[ebp]
  06984	66 89 02	 mov	 WORD PTR [edx], ax

; 2526 : 	// right
; 2527 : 	data[2] = (ptemp.B.x - vlc.XOrg()) * Ratio(SCIRESX, vlc.ResX()) + xOff;

  06987	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  0698a	e8 00 00 00 00	 call	 ?ResX@CelObj@@QBEHXZ	; CelObj::ResX
  0698f	50		 push	 eax
  06990	68 80 02 00 00	 push	 640			; 00000280H
  06995	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T151039[ebp]
  0699b	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  069a0	50		 push	 eax
  069a1	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  069a4	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  069a9	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _ptemp$[ebp+8]
  069af	2b c8		 sub	 ecx, eax
  069b1	51		 push	 ecx
  069b2	e8 00 00 00 00	 call	 ??D@YAHHABVRatio@@@Z	; operator*
  069b7	83 c4 08	 add	 esp, 8
  069ba	03 45 f0	 add	 eax, DWORD PTR _xOff$[ebp]
  069bd	8b 55 e8	 mov	 edx, DWORD PTR _data$[ebp]
  069c0	66 89 42 04	 mov	 WORD PTR [edx+4], ax

; 2528 : 	// top
; 2529 : 	data[1] = (ptemp.A.y - vlc.YOrg()) * Ratio(SCIRESY, vlc.ResY()) + yOff;

  069c4	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  069c7	e8 00 00 00 00	 call	 ?ResY@CelObj@@QBEHXZ	; CelObj::ResY
  069cc	50		 push	 eax
  069cd	68 e0 01 00 00	 push	 480			; 000001e0H
  069d2	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T151040[ebp]
  069d8	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  069dd	50		 push	 eax
  069de	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  069e1	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  069e6	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _ptemp$[ebp+4]
  069ec	2b c8		 sub	 ecx, eax
  069ee	51		 push	 ecx
  069ef	e8 00 00 00 00	 call	 ??D@YAHHABVRatio@@@Z	; operator*
  069f4	83 c4 08	 add	 esp, 8
  069f7	03 45 ec	 add	 eax, DWORD PTR _yOff$[ebp]
  069fa	8b 55 e8	 mov	 edx, DWORD PTR _data$[ebp]
  069fd	66 89 42 02	 mov	 WORD PTR [edx+2], ax

; 2530 : 	// bottom
; 2531 : 	data[3] = (ptemp.B.y - vlc.YOrg()) * Ratio(SCIRESY, vlc.ResY()) + yOff;

  06a01	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  06a04	e8 00 00 00 00	 call	 ?ResY@CelObj@@QBEHXZ	; CelObj::ResY
  06a09	50		 push	 eax
  06a0a	68 e0 01 00 00	 push	 480			; 000001e0H
  06a0f	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T151041[ebp]
  06a15	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  06a1a	50		 push	 eax
  06a1b	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  06a1e	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  06a23	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptemp$[ebp+12]
  06a29	2b c8		 sub	 ecx, eax
  06a2b	51		 push	 ecx
  06a2c	e8 00 00 00 00	 call	 ??D@YAHHABVRatio@@@Z	; operator*
  06a31	83 c4 08	 add	 esp, 8
  06a34	03 45 ec	 add	 eax, DWORD PTR _yOff$[ebp]
  06a37	8b 55 e8	 mov	 edx, DWORD PTR _data$[ebp]
  06a3a	66 89 42 06	 mov	 WORD PTR [edx+6], ax

; 2532 : 
; 2533 : }

  06a3e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06a45	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  06a48	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  06a4d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06a50	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  06a57	8b e5		 mov	 esp, ebp
  06a59	5d		 pop	 ebp
  06a5a	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L151042:
  00152	8d 4d 98	 lea	 ecx, DWORD PTR _vlc$[ebp]
  00155	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0015a	c3		 ret	 0
$L151045:
  0015b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151044
  00160	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KBaseLineSpan@@YAXPAF@Z ENDP				; KBaseLineSpan
PUBLIC	??0FakeArrayID@@QAE@G@Z				; FakeArrayID::FakeArrayID
;	COMDAT ??0ArrayID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ArrayID@@QAE@G@Z PROC NEAR				; ArrayID::ArrayID, COMDAT

; 38   : 	ArrayID(SOL_Handle h) : FakeArrayID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeArrayID@@QAE@G@Z	; FakeArrayID::FakeArrayID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ArrayID@@QAE@G@Z ENDP				; ArrayID::ArrayID
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeArrayID@@QAE@G@Z PROC NEAR			; FakeArrayID::FakeArrayID, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeArrayID@@QAE@G@Z ENDP				; FakeArrayID::FakeArrayID
_TEXT	ENDS
PUBLIC	??4SOL_Point@@QAEAAV0@ABV0@@Z			; SOL_Point::operator=
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4SOL_Rect@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Rect::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??4SOL_Rect@@QAEAAV0@ABV0@@Z ENDP			; SOL_Rect::operator=
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??4SOL_Point@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Point::operator=, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	x = p.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 119  : 	y = p.y;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 120  : 	return *this;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 121  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4SOL_Point@@QAEAAV0@ABV0@@Z ENDP			; SOL_Point::operator=
_TEXT	ENDS
PUBLIC	?KCelInfo@@YAXPAF@Z				; KCelInfo
xdata$x	SEGMENT
$T151054 DD	019930520H
	DD	01H
	DD	FLAT:$T151057
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151057 DD	0ffffffffH
	DD	FLAT:$L151052
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_args$ = 8
_func$ = -96
_celObj$ = -92
?KCelInfo@@YAXPAF@Z PROC NEAR				; KCelInfo

; 2537 : {

  06a5b	55		 push	 ebp
  06a5c	8b ec		 mov	 ebp, esp
  06a5e	6a ff		 push	 -1
  06a60	68 00 00 00 00	 push	 $L151055
  06a65	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  06a6b	50		 push	 eax
  06a6c	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  06a73	83 ec 58	 sub	 esp, 88			; 00000058H

; 2538 : 
; 2539 : 	enum {
; 2540 : 		getOrigX,
; 2541 : 		getOrigY,
; 2542 : 		getLinkX,
; 2543 : 		getLinkY,
; 2544 : 		getPixel
; 2545 : 	};
; 2546 : 
; 2547 : 	int func = arg(1);

  06a76	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  06a79	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  06a7d	89 4d a0	 mov	 DWORD PTR _func$[ebp], ecx

; 2548 : 
; 2549 : 	CelObjView celObj(arg(2),arg(3),arg(4));

  06a80	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  06a83	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  06a87	50		 push	 eax
  06a88	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  06a8b	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  06a8f	52		 push	 edx
  06a90	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  06a93	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  06a97	51		 push	 ecx
  06a98	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  06a9b	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  06aa0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2550 : 
; 2551 : 	switch (func) {

  06aa7	8b 55 a0	 mov	 edx, DWORD PTR _func$[ebp]
  06aaa	89 55 9c	 mov	 DWORD PTR -100+[ebp], edx
  06aad	83 7d 9c 04	 cmp	 DWORD PTR -100+[ebp], 4
  06ab1	77 6b		 ja	 SHORT $L145096
  06ab3	8b 45 9c	 mov	 eax, DWORD PTR -100+[ebp]
  06ab6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L151056[eax*4]
$L145099:

; 2553 : //			if ( celObj.Mirrored() ) {
; 2554 : //				pm.acc = celObj.Width() - celObj.XOrg() - 1;
; 2555 : //			} else {
; 2556 : 				pm.acc = celObj.XOrg();

  06abd	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  06ac0	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  06ac5	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2557 : //			}
; 2558 : 
; 2559 : 			break;

  06aca	eb 52		 jmp	 SHORT $L145096
$L145100:

; 2562 : 			pm.acc = celObj.YOrg();

  06acc	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  06acf	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  06ad4	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2563 : 			break;

  06ad9	eb 43		 jmp	 SHORT $L145096
$L145101:

; 2566 : 			pm.acc = 0;

  06adb	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 2567 : 			break;

  06ae5	eb 37		 jmp	 SHORT $L145096
$L145102:

; 2570 : 			pm.acc = 0;

  06ae7	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 2571 : 			break;

  06af1	eb 2b		 jmp	 SHORT $L145096
$L145103:

; 2574 : 			pm.acc = celObj.ReadPix(arg(5), arg(6), celObj.Mirrored());

  06af3	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  06af6	e8 00 00 00 00	 call	 ?Mirrored@CelObj@@QBEHXZ ; CelObj::Mirrored
  06afb	50		 push	 eax
  06afc	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  06aff	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  06b03	52		 push	 edx
  06b04	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  06b07	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  06b0b	51		 push	 ecx
  06b0c	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  06b0f	e8 00 00 00 00	 call	 ?ReadPix@CelObj@@UAEEHHH@Z ; CelObj::ReadPix
  06b14	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  06b19	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax
$L145096:

; 2578 : }

  06b1e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06b25	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  06b28	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  06b2d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06b30	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  06b37	8b e5		 mov	 esp, ebp
  06b39	5d		 pop	 ebp
  06b3a	c3		 ret	 0
$L151056:
  06b3b	00 00 00 00	 DD	 $L145099
  06b3f	00 00 00 00	 DD	 $L145100
  06b43	00 00 00 00	 DD	 $L145101
  06b47	00 00 00 00	 DD	 $L145102
  06b4b	00 00 00 00	 DD	 $L145103
_TEXT	ENDS
text$x	SEGMENT
$L151052:
  00165	8d 4d a4	 lea	 ecx, DWORD PTR _celObj$[ebp]
  00168	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0016d	c3		 ret	 0
$L151055:
  0016e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151054
  00173	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KCelInfo@@YAXPAF@Z ENDP				; KCelInfo
PUBLIC	?AddLinkedBitmap@@YAHVObjectID@@0H@Z		; AddLinkedBitmap
PUBLIC	?GetCel@ScreenItem@@QAEPAVCelObj@@XZ		; ScreenItem::GetCel
PUBLIC	?View@Bitmap@@QBEHXZ				; Bitmap::View
PUBLIC	?Loop@Bitmap@@QBEHXZ				; Bitmap::Loop
PUBLIC	?Cel@Bitmap@@QBEHXZ				; Bitmap::Cel
PUBLIC	?SetType@Bitmap@@QAEXH@Z			; Bitmap::SetType
_DATA	SEGMENT
$SG145140 DB	'No type for CelLink x', 00H
	ORG $+2
$SG145141 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
	ORG $+2
$SG145144 DB	'No type for CelLink y', 00H
	ORG $+2
$SG145145 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Grap'
	DB	'h.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T151073 DD	019930520H
	DD	02H
	DD	FLAT:$T151075
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151075 DD	0ffffffffH
	DD	FLAT:$L151070
	DD	00H
	DD	FLAT:$L151071
xdata$x	ENDS
_TEXT	SEGMENT
$T151059 = -360
$T151060 = -364
$T151061 = -368
$T151062 = -388
$T151063 = -392
$T151064 = -396
$T151065 = -400
$T151066 = -404
$T151067 = -408
$T151068 = -412
$T151069 = -416
__$EHRec$ = -12
_idBase$ = 8
_idAdd$ = 12
_type$ = 16
_planeId$ = -136
_siBase$ = -52
_siAdd$ = -140
_BM$ = -104
_BMWidthA$ = -332
_BMWidthB$ = -244
_objWidthA$ = -108
_objWidthB$ = -160
_BMHeightA$ = -76
_BMHeightB$ = -68
_objHeightA$ = -48
_objHeightB$ = -64
_theTextBox$ = -156
_BMRect$ = -32
_viewB$ = -36
_loopB$ = -60
_celB$ = -72
_viewA$ = -16
_loopA$ = -44
_celA$ = -56
_resX$ = -84
_resY$ = -88
_i$ = -100
_x$ = -92
_y$ = -96
_largerBitmap$ = -40
_xOffset$ = -328
_yOffset$ = -80
_vCelObjB$ = -240
_vCelObjA$ = -324
_pt$145157 = -356
_buffer$145160 = -348
_pt$ = -132
_buffer$ = -124
?AddLinkedBitmap@@YAHVObjectID@@0H@Z PROC NEAR		; AddLinkedBitmap

; 2583 : {

  06b4f	55		 push	 ebp
  06b50	8b ec		 mov	 ebp, esp
  06b52	6a ff		 push	 -1
  06b54	68 00 00 00 00	 push	 $L151074
  06b59	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  06b5f	50		 push	 eax
  06b60	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  06b67	81 ec 94 01 00
	00		 sub	 esp, 404		; 00000194H
  06b6d	56		 push	 esi
  06b6e	57		 push	 edi

; 2584 : 	int planeId = idBase.GetIndexedProperty(actPlaneID);

  06b6f	6a 1a		 push	 26			; 0000001aH
  06b71	8d 4d 08	 lea	 ecx, DWORD PTR _idBase$[ebp]
  06b74	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  06b79	0f bf c0	 movsx	 eax, ax
  06b7c	89 85 78 ff ff
	ff		 mov	 DWORD PTR _planeId$[ebp], eax

; 2585 : 	ScreenItem* siBase = graphMgr->NextScreen()->GetScreenItem(planeId,idBase);

  06b82	8d 4d 08	 lea	 ecx, DWORD PTR _idBase$[ebp]
  06b85	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  06b8a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  06b8f	50		 push	 eax
  06b90	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _planeId$[ebp]
  06b96	51		 push	 ecx
  06b97	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  06b9d	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  06ba2	8b c8		 mov	 ecx, eax
  06ba4	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  06ba9	89 45 cc	 mov	 DWORD PTR _siBase$[ebp], eax

; 2586 : 
; 2587 : 	planeId = idAdd.GetIndexedProperty(actPlaneID);

  06bac	6a 1a		 push	 26			; 0000001aH
  06bae	8d 4d 0c	 lea	 ecx, DWORD PTR _idAdd$[ebp]
  06bb1	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  06bb6	0f bf d0	 movsx	 edx, ax
  06bb9	89 95 78 ff ff
	ff		 mov	 DWORD PTR _planeId$[ebp], edx

; 2588 : 	ScreenItem* siAdd = graphMgr->NextScreen()->GetScreenItem(planeId,idAdd);

  06bbf	8d 4d 0c	 lea	 ecx, DWORD PTR _idAdd$[ebp]
  06bc2	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  06bc7	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  06bcc	50		 push	 eax
  06bcd	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _planeId$[ebp]
  06bd3	50		 push	 eax
  06bd4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  06bda	e8 00 00 00 00	 call	 ?NextScreen@GraphicsMgr@@QAEPAVScreen@@XZ ; GraphicsMgr::NextScreen
  06bdf	8b c8		 mov	 ecx, eax
  06be1	e8 00 00 00 00	 call	 ?GetScreenItem@Screen@@QAEPAVScreenItem@@HJ@Z ; Screen::GetScreenItem
  06be6	89 85 74 ff ff
	ff		 mov	 DWORD PTR _siAdd$[ebp], eax

; 2589 : 	MemID			BM;

  06bec	8d 4d 98	 lea	 ecx, DWORD PTR _BM$[ebp]
  06bef	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 2590 : 	int 			BMWidthA,BMWidthB,objWidthA,objWidthB;
; 2591 : 	int 			BMHeightA,BMHeightB,objHeightA,objHeightB;
; 2592 : 	SOL_Rect    theTextBox,BMRect;

  06bf4	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$[ebp]
  06bfa	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  06bff	8d 4d e0	 lea	 ecx, DWORD PTR _BMRect$[ebp]
  06c02	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 2593 : 	int 			viewB,loopB,celB,viewA,loopA,celA,resX,resY;
; 2594 : 	
; 2595 : 	int i = type;

  06c07	8b 4d 10	 mov	 ecx, DWORD PTR _type$[ebp]
  06c0a	89 4d 9c	 mov	 DWORD PTR _i$[ebp], ecx

; 2596 : 	int x,y;
; 2597 : 	int largerBitmap = 0;

  06c0d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _largerBitmap$[ebp], 0

; 2598 : 	int xOffset = 0;

  06c14	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _xOffset$[ebp], 0

; 2599 : 	int yOffset = 0;

  06c1e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _yOffset$[ebp], 0

; 2600 : 
; 2601 : 	viewB = siBase->bitmap.View();

  06c25	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06c28	83 c1 0c	 add	 ecx, 12			; 0000000cH
  06c2b	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  06c30	89 45 dc	 mov	 DWORD PTR _viewB$[ebp], eax

; 2602 : 	loopB = siBase->bitmap.Loop();

  06c33	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06c36	83 c1 0c	 add	 ecx, 12			; 0000000cH
  06c39	e8 00 00 00 00	 call	 ?Loop@Bitmap@@QBEHXZ	; Bitmap::Loop
  06c3e	89 45 c4	 mov	 DWORD PTR _loopB$[ebp], eax

; 2603 : 	celB  = siBase->bitmap.Cel();

  06c41	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06c44	83 c1 0c	 add	 ecx, 12			; 0000000cH
  06c47	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  06c4c	89 45 b8	 mov	 DWORD PTR _celB$[ebp], eax

; 2604 :    CelObjView vCelObjB(viewB,loopB,celB); 

  06c4f	8b 55 b8	 mov	 edx, DWORD PTR _celB$[ebp]
  06c52	52		 push	 edx
  06c53	8b 45 c4	 mov	 eax, DWORD PTR _loopB$[ebp]
  06c56	50		 push	 eax
  06c57	8b 4d dc	 mov	 ecx, DWORD PTR _viewB$[ebp]
  06c5a	51		 push	 ecx
  06c5b	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  06c61	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  06c66	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2605 : 
; 2606 : 	viewA = siAdd->bitmap.View();

  06c6d	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _siAdd$[ebp]
  06c73	83 c1 0c	 add	 ecx, 12			; 0000000cH
  06c76	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  06c7b	89 45 f0	 mov	 DWORD PTR _viewA$[ebp], eax

; 2607 : 	loopA = siAdd->bitmap.Loop();

  06c7e	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _siAdd$[ebp]
  06c84	83 c1 0c	 add	 ecx, 12			; 0000000cH
  06c87	e8 00 00 00 00	 call	 ?Loop@Bitmap@@QBEHXZ	; Bitmap::Loop
  06c8c	89 45 d4	 mov	 DWORD PTR _loopA$[ebp], eax

; 2608 : 	celA  = siAdd->bitmap.Cel();

  06c8f	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _siAdd$[ebp]
  06c95	83 c1 0c	 add	 ecx, 12			; 0000000cH
  06c98	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  06c9d	89 45 c8	 mov	 DWORD PTR _celA$[ebp], eax

; 2609 :    CelObjView vCelObjA(viewA,loopA,celA); 

  06ca0	8b 55 c8	 mov	 edx, DWORD PTR _celA$[ebp]
  06ca3	52		 push	 edx
  06ca4	8b 45 d4	 mov	 eax, DWORD PTR _loopA$[ebp]
  06ca7	50		 push	 eax
  06ca8	8b 4d f0	 mov	 ecx, DWORD PTR _viewA$[ebp]
  06cab	51		 push	 ecx
  06cac	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  06cb2	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  06cb7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2610 : 
; 2611 : 	x = vCelObjB.GetLinkPoint(type,1);

  06cbb	6a 01		 push	 1
  06cbd	8b 55 10	 mov	 edx, DWORD PTR _type$[ebp]
  06cc0	52		 push	 edx
  06cc1	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  06cc7	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  06ccc	0f bf c0	 movsx	 eax, ax
  06ccf	89 45 a4	 mov	 DWORD PTR _x$[ebp], eax

; 2612 : 	if (x == -1) {

  06cd2	83 7d a4 ff	 cmp	 DWORD PTR _x$[ebp], -1
  06cd6	75 56		 jne	 SHORT $L145139

; 2613 : 		msgMgr->Fatal(SrcLoc,"No type for CelLink x");

  06cd8	68 00 00 00 00	 push	 OFFSET FLAT:$SG145140
  06cdd	68 35 0a 00 00	 push	 2613			; 00000a35H
  06ce2	68 00 00 00 00	 push	 OFFSET FLAT:$SG145141
  06ce7	6a 61		 push	 97			; 00000061H
  06ce9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  06cef	51		 push	 ecx
  06cf0	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  06cf5	83 c4 14	 add	 esp, 20			; 00000014H

; 2614 : 		return(0);	

  06cf8	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T151059[ebp], 0
  06d02	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06d06	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  06d0c	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  06d11	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06d18	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  06d1e	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  06d23	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR $T151059[ebp]
  06d29	e9 27 05 00 00	 jmp	 $L145108
$L145139:

; 2616 : 
; 2617 : 	y = vCelObjB.GetLinkPoint(type,0);

  06d2e	6a 00		 push	 0
  06d30	8b 55 10	 mov	 edx, DWORD PTR _type$[ebp]
  06d33	52		 push	 edx
  06d34	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  06d3a	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  06d3f	0f bf c0	 movsx	 eax, ax
  06d42	89 45 a0	 mov	 DWORD PTR _y$[ebp], eax

; 2618 : 	if (y == -1){

  06d45	83 7d a0 ff	 cmp	 DWORD PTR _y$[ebp], -1
  06d49	75 56		 jne	 SHORT $L145143

; 2619 :  		msgMgr->Fatal(SrcLoc,"No type for CelLink y");

  06d4b	68 00 00 00 00	 push	 OFFSET FLAT:$SG145144
  06d50	68 3b 0a 00 00	 push	 2619			; 00000a3bH
  06d55	68 00 00 00 00	 push	 OFFSET FLAT:$SG145145
  06d5a	6a 61		 push	 97			; 00000061H
  06d5c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  06d62	51		 push	 ecx
  06d63	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  06d68	83 c4 14	 add	 esp, 20			; 00000014H

; 2620 : 		return(0);	

  06d6b	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T151060[ebp], 0
  06d75	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06d79	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  06d7f	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  06d84	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06d8b	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  06d91	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  06d96	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR $T151060[ebp]
  06d9c	e9 b4 04 00 00	 jmp	 $L145108
$L145143:

; 2622 : 
; 2623 : 	objWidthB  = vCelObjB.Width();

  06da1	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  06da7	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  06dac	89 85 60 ff ff
	ff		 mov	 DWORD PTR _objWidthB$[ebp], eax

; 2624 : 	objHeightB = vCelObjB.Height();

  06db2	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  06db8	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  06dbd	89 45 c0	 mov	 DWORD PTR _objHeightB$[ebp], eax

; 2625 : 
; 2626 : 	objWidthA  = vCelObjA.Width();

  06dc0	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  06dc6	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  06dcb	89 45 94	 mov	 DWORD PTR _objWidthA$[ebp], eax

; 2627 : 	objHeightA = vCelObjA.Height();

  06dce	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  06dd4	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  06dd9	89 45 d0	 mov	 DWORD PTR _objHeightA$[ebp], eax

; 2628 : 
; 2629 : 	BMWidthB 		= siBase->GetCel()->Width() ;

  06ddc	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06ddf	e8 00 00 00 00	 call	 ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ ; ScreenItem::GetCel
  06de4	8b c8		 mov	 ecx, eax
  06de6	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  06deb	89 85 0c ff ff
	ff		 mov	 DWORD PTR _BMWidthB$[ebp], eax

; 2630 : 	BMHeightB 		= siBase->GetCel()->Height();

  06df1	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06df4	e8 00 00 00 00	 call	 ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ ; ScreenItem::GetCel
  06df9	8b c8		 mov	 ecx, eax
  06dfb	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  06e00	89 45 bc	 mov	 DWORD PTR _BMHeightB$[ebp], eax

; 2631 : 
; 2632 : 	x -= vCelObjA.XOrg();

  06e03	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  06e09	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  06e0e	8b 55 a4	 mov	 edx, DWORD PTR _x$[ebp]
  06e11	2b d0		 sub	 edx, eax
  06e13	89 55 a4	 mov	 DWORD PTR _x$[ebp], edx

; 2633 : 	y -= vCelObjA.YOrg();

  06e16	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  06e1c	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  06e21	8b 4d a0	 mov	 ecx, DWORD PTR _y$[ebp]
  06e24	2b c8		 sub	 ecx, eax
  06e26	89 4d a0	 mov	 DWORD PTR _y$[ebp], ecx

; 2634 : 
; 2635 : 	if ((x+objWidthA)>BMWidthB) {

  06e29	8b 55 a4	 mov	 edx, DWORD PTR _x$[ebp]
  06e2c	03 55 94	 add	 edx, DWORD PTR _objWidthA$[ebp]
  06e2f	3b 95 0c ff ff
	ff		 cmp	 edx, DWORD PTR _BMWidthB$[ebp]
  06e35	7e 13		 jle	 SHORT $L145147

; 2636 : 		BMWidthB = x + objWidthA ;

  06e37	8b 45 a4	 mov	 eax, DWORD PTR _x$[ebp]
  06e3a	03 45 94	 add	 eax, DWORD PTR _objWidthA$[ebp]
  06e3d	89 85 0c ff ff
	ff		 mov	 DWORD PTR _BMWidthB$[ebp], eax

; 2637 : 		largerBitmap = 1;

  06e43	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _largerBitmap$[ebp], 1
$L145147:

; 2639 : 
; 2640 : 	if ((y+objHeightA)>BMHeightB) {

  06e4a	8b 4d a0	 mov	 ecx, DWORD PTR _y$[ebp]
  06e4d	03 4d d0	 add	 ecx, DWORD PTR _objHeightA$[ebp]
  06e50	3b 4d bc	 cmp	 ecx, DWORD PTR _BMHeightB$[ebp]
  06e53	7e 10		 jle	 SHORT $L145148

; 2641 : 		BMHeightB = y + objHeightA ;

  06e55	8b 55 a0	 mov	 edx, DWORD PTR _y$[ebp]
  06e58	03 55 d0	 add	 edx, DWORD PTR _objHeightA$[ebp]
  06e5b	89 55 bc	 mov	 DWORD PTR _BMHeightB$[ebp], edx

; 2642 : 		largerBitmap = 1;

  06e5e	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _largerBitmap$[ebp], 1
$L145148:

; 2644 : 
; 2645 : 	if (x<0) {

  06e65	83 7d a4 00	 cmp	 DWORD PTR _x$[ebp], 0
  06e69	7d 2c		 jge	 SHORT $L145149

; 2646 : 		BMWidthB += -(x);

  06e6b	8b 45 a4	 mov	 eax, DWORD PTR _x$[ebp]
  06e6e	f7 d8		 neg	 eax
  06e70	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _BMWidthB$[ebp]
  06e76	03 c8		 add	 ecx, eax
  06e78	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _BMWidthB$[ebp], ecx

; 2647 : 		largerBitmap = 1;

  06e7e	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _largerBitmap$[ebp], 1

; 2648 : 		xOffset  = -(x);

  06e85	8b 55 a4	 mov	 edx, DWORD PTR _x$[ebp]
  06e88	f7 da		 neg	 edx
  06e8a	89 95 b8 fe ff
	ff		 mov	 DWORD PTR _xOffset$[ebp], edx

; 2649 : 		x = 0;

  06e90	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
$L145149:

; 2651 : 
; 2652 : 	if (y<0) {

  06e97	83 7d a0 00	 cmp	 DWORD PTR _y$[ebp], 0
  06e9b	7d 23		 jge	 SHORT $L145150

; 2653 : 		BMHeightB += -(y);

  06e9d	8b 45 a0	 mov	 eax, DWORD PTR _y$[ebp]
  06ea0	f7 d8		 neg	 eax
  06ea2	8b 4d bc	 mov	 ecx, DWORD PTR _BMHeightB$[ebp]
  06ea5	03 c8		 add	 ecx, eax
  06ea7	89 4d bc	 mov	 DWORD PTR _BMHeightB$[ebp], ecx

; 2654 : 		yOffset   = -(y);

  06eaa	8b 55 a0	 mov	 edx, DWORD PTR _y$[ebp]
  06ead	f7 da		 neg	 edx
  06eaf	89 55 b0	 mov	 DWORD PTR _yOffset$[ebp], edx

; 2655 : 		largerBitmap = 1;

  06eb2	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _largerBitmap$[ebp], 1

; 2656 : 		y = 0;

  06eb9	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
$L145150:

; 2658 : 
; 2659 : 	
; 2660 : 	if ((siBase->bitmap.Type() != Bitmap::tMem)||largerBitmap) {  // create a bitmap

  06ec0	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06ec3	83 c1 0c	 add	 ecx, 12			; 0000000cH
  06ec6	e8 00 00 00 00	 call	 ?Type@Bitmap@@QBEHXZ	; Bitmap::Type
  06ecb	83 f8 02	 cmp	 eax, 2
  06ece	75 0a		 jne	 SHORT $L145152
  06ed0	83 7d d8 00	 cmp	 DWORD PTR _largerBitmap$[ebp], 0
  06ed4	0f 84 14 02 00
	00		 je	 $L145151
$L145152:

; 2661 : 
; 2662 : 		BM.Get(MemBitmap,BMWidthB*BMHeightB+CELHEADERSIZE);

  06eda	6a 00		 push	 0
  06edc	6a 00		 push	 0
  06ede	6a 00		 push	 0
  06ee0	6a 00		 push	 0
  06ee2	68 00 02 00 00	 push	 512			; 00000200H
  06ee7	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _BMWidthB$[ebp]
  06eed	0f af 45 bc	 imul	 eax, DWORD PTR _BMHeightB$[ebp]
  06ef1	83 c0 2e	 add	 eax, 46			; 0000002eH
  06ef4	50		 push	 eax
  06ef5	6a 4b		 push	 75			; 0000004bH
  06ef7	8d 4d 98	 lea	 ecx, DWORD PTR _BM$[ebp]
  06efa	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 2663 : 
; 2664 : 		resX = siBase->GetCel()->ResX();

  06eff	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06f02	e8 00 00 00 00	 call	 ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ ; ScreenItem::GetCel
  06f07	8b c8		 mov	 ecx, eax
  06f09	e8 00 00 00 00	 call	 ?ResX@CelObj@@QBEHXZ	; CelObj::ResX
  06f0e	89 45 ac	 mov	 DWORD PTR _resX$[ebp], eax

; 2665 : 		resY = siBase->GetCel()->ResY();

  06f11	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06f14	e8 00 00 00 00	 call	 ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ ; ScreenItem::GetCel
  06f19	8b c8		 mov	 ecx, eax
  06f1b	e8 00 00 00 00	 call	 ?ResY@CelObj@@QBEHXZ	; CelObj::ResY
  06f20	89 45 a8	 mov	 DWORD PTR _resY$[ebp], eax

; 2666 : 		memset((uchar*) memMgr->GetAddr(BM)+CELHEADERSIZE,0,BMWidthB*BMHeightB);

  06f23	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _BMWidthB$[ebp]
  06f29	0f af 4d bc	 imul	 ecx, DWORD PTR _BMHeightB$[ebp]
  06f2d	51		 push	 ecx
  06f2e	6a 00		 push	 0
  06f30	8d 4d 98	 lea	 ecx, DWORD PTR _BM$[ebp]
  06f33	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  06f38	50		 push	 eax
  06f39	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  06f3f	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  06f44	83 c0 2e	 add	 eax, 46			; 0000002eH
  06f47	50		 push	 eax
  06f48	e8 00 00 00 00	 call	 _memset
  06f4d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2667 : 
; 2668 : 	   BuildHeader(BM,BMWidthB,BMHeightB,0,siBase->GetCel()->XOrg(),siBase->GetCel()->YOrg(),resX,resY);

  06f50	6a 00		 push	 0
  06f52	6a 00		 push	 0
  06f54	8b 55 a8	 mov	 edx, DWORD PTR _resY$[ebp]
  06f57	52		 push	 edx
  06f58	8b 45 ac	 mov	 eax, DWORD PTR _resX$[ebp]
  06f5b	50		 push	 eax
  06f5c	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06f5f	e8 00 00 00 00	 call	 ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ ; ScreenItem::GetCel
  06f64	8b c8		 mov	 ecx, eax
  06f66	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  06f6b	50		 push	 eax
  06f6c	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06f6f	e8 00 00 00 00	 call	 ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ ; ScreenItem::GetCel
  06f74	8b c8		 mov	 ecx, eax
  06f76	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  06f7b	50		 push	 eax
  06f7c	6a 00		 push	 0
  06f7e	8b 4d bc	 mov	 ecx, DWORD PTR _BMHeightB$[ebp]
  06f81	51		 push	 ecx
  06f82	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _BMWidthB$[ebp]
  06f88	52		 push	 edx
  06f89	51		 push	 ecx
  06f8a	8b cc		 mov	 ecx, esp
  06f8c	89 a5 90 fe ff
	ff		 mov	 DWORD PTR $T151061[ebp], esp
  06f92	8d 45 98	 lea	 eax, DWORD PTR _BM$[ebp]
  06f95	50		 push	 eax
  06f96	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  06f9b	e8 00 00 00 00	 call	 ?BuildHeader@@YAXVMemID@@HHHHHHHHH@Z ; BuildHeader
  06fa0	83 c4 28	 add	 esp, 40			; 00000028H

; 2669 :    
; 2670 : 		siBase->bitmap = Bitmap(BM);

  06fa3	51		 push	 ecx
  06fa4	8b cc		 mov	 ecx, esp
  06fa6	89 a5 78 fe ff
	ff		 mov	 DWORD PTR $T151063[ebp], esp
  06fac	8d 55 98	 lea	 edx, DWORD PTR _BM$[ebp]
  06faf	52		 push	 edx
  06fb0	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  06fb5	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T151062[ebp]
  06fbb	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@VMemID@@@Z ; Bitmap::Bitmap
  06fc0	8b f0		 mov	 esi, eax
  06fc2	8b 7d cc	 mov	 edi, DWORD PTR _siBase$[ebp]
  06fc5	83 c7 0c	 add	 edi, 12			; 0000000cH
  06fc8	b9 05 00 00 00	 mov	 ecx, 5
  06fcd	f3 a5		 rep movsd

; 2671 : 		siBase->bitmap.SetType(Bitmap::tMem);

  06fcf	6a 02		 push	 2
  06fd1	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  06fd4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  06fd7	e8 00 00 00 00	 call	 ?SetType@Bitmap@@QAEXH@Z ; Bitmap::SetType

; 2672 : 				
; 2673 : 		theTextBox.Set(xOffset,yOffset,objWidthB+xOffset,objHeightB+yOffset); 

  06fdc	8b 45 c0	 mov	 eax, DWORD PTR _objHeightB$[ebp]
  06fdf	03 45 b0	 add	 eax, DWORD PTR _yOffset$[ebp]
  06fe2	50		 push	 eax
  06fe3	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _objWidthB$[ebp]
  06fe9	03 8d b8 fe ff
	ff		 add	 ecx, DWORD PTR _xOffset$[ebp]
  06fef	51		 push	 ecx
  06ff0	8b 55 b0	 mov	 edx, DWORD PTR _yOffset$[ebp]
  06ff3	52		 push	 edx
  06ff4	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _xOffset$[ebp]
  06ffa	50		 push	 eax
  06ffb	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$[ebp]
  07001	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 2674 : 		BMRect.Set(xOffset, yOffset,xOffset+BMWidthB-1,yOffset+BMHeightB-1);

  07006	8b 4d bc	 mov	 ecx, DWORD PTR _BMHeightB$[ebp]
  07009	8b 55 b0	 mov	 edx, DWORD PTR _yOffset$[ebp]
  0700c	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  07010	50		 push	 eax
  07011	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _BMWidthB$[ebp]
  07017	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR _xOffset$[ebp]
  0701d	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  07021	50		 push	 eax
  07022	8b 4d b0	 mov	 ecx, DWORD PTR _yOffset$[ebp]
  07025	51		 push	 ecx
  07026	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR _xOffset$[ebp]
  0702c	52		 push	 edx
  0702d	8d 4d e0	 lea	 ecx, DWORD PTR _BMRect$[ebp]
  07030	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 2675 : 		theTextBox.Clip(BMRect);

  07035	8d 45 e0	 lea	 eax, DWORD PTR _BMRect$[ebp]
  07038	50		 push	 eax
  07039	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$[ebp]
  0703f	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip

; 2676 : 		SOL_Point pt(xOffset,yOffset);

  07044	8b 4d b0	 mov	 ecx, DWORD PTR _yOffset$[ebp]
  07047	51		 push	 ecx
  07048	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR _xOffset$[ebp]
  0704e	52		 push	 edx
  0704f	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _pt$145157[ebp]
  07055	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 2677 : 
; 2678 : 		resMgr->Get ( MemResView, viewB );

  0705a	6a 00		 push	 0
  0705c	66 8b 45 dc	 mov	 ax, WORD PTR _viewB$[ebp]
  07060	50		 push	 eax
  07061	6a 00		 push	 0
  07063	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR $T151064[ebp]
  07069	51		 push	 ecx
  0706a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  07070	8b 02		 mov	 eax, DWORD PTR [edx]
  07072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  07078	ff 50 20	 call	 DWORD PTR [eax+32]

; 2679 : 		BufferStd buffer(BMWidthB,BMHeightB,(uchar*) memMgr->GetAddr(BM) + CELHEADERSIZE);

  0707b	8d 4d 98	 lea	 ecx, DWORD PTR _BM$[ebp]
  0707e	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  07083	50		 push	 eax
  07084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  0708a	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  0708f	83 c0 2e	 add	 eax, 46			; 0000002eH
  07092	50		 push	 eax
  07093	8b 4d bc	 mov	 ecx, DWORD PTR _BMHeightB$[ebp]
  07096	51		 push	 ecx
  07097	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _BMWidthB$[ebp]
  0709d	52		 push	 edx
  0709e	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$145160[ebp]
  070a4	e8 00 00 00 00	 call	 ??0BufferStd@@QAE@HHPAE@Z ; BufferStd::BufferStd

; 2680 : 
; 2681 : 		vCelObjB.Draw(buffer, theTextBox, pt, 0);

  070a9	6a 00		 push	 0
  070ab	83 ec 08	 sub	 esp, 8
  070ae	8b cc		 mov	 ecx, esp
  070b0	89 a5 70 fe ff
	ff		 mov	 DWORD PTR $T151065[ebp], esp
  070b6	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _pt$145157[ebp]
  070bc	50		 push	 eax
  070bd	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  070c2	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$[ebp]
  070c8	51		 push	 ecx
  070c9	8d 95 a4 fe ff
	ff		 lea	 edx, DWORD PTR _buffer$145160[ebp]
  070cf	52		 push	 edx
  070d0	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  070d6	e8 00 00 00 00	 call	 ?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjView::Draw

; 2682 : 		idBase.SetIndexedProperty(actBitmap,BM);

  070db	8d 4d 98	 lea	 ecx, DWORD PTR _BM$[ebp]
  070de	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  070e3	50		 push	 eax
  070e4	6a 19		 push	 25			; 00000019H
  070e6	8d 4d 08	 lea	 ecx, DWORD PTR _idBase$[ebp]
  070e9	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty
$L145151:

; 2684 : 	// add object to bitmap
; 2685 : 	BM	= siBase->bitmap.Handle();

  070ee	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR $T151066[ebp]
  070f4	50		 push	 eax
  070f5	8b 4d cc	 mov	 ecx, DWORD PTR _siBase$[ebp]
  070f8	83 c1 0c	 add	 ecx, 12			; 0000000cH
  070fb	e8 00 00 00 00	 call	 ?Handle@Bitmap@@QBE?AVMemID@@XZ ; Bitmap::Handle
  07100	66 8b 08	 mov	 cx, WORD PTR [eax]
  07103	66 89 4d 98	 mov	 WORD PTR _BM$[ebp], cx

; 2686 : 
; 2687 : 	theTextBox.Set(x,y,x+objWidthA,y+objHeightA);

  07107	8b 55 a0	 mov	 edx, DWORD PTR _y$[ebp]
  0710a	03 55 d0	 add	 edx, DWORD PTR _objHeightA$[ebp]
  0710d	52		 push	 edx
  0710e	8b 45 a4	 mov	 eax, DWORD PTR _x$[ebp]
  07111	03 45 94	 add	 eax, DWORD PTR _objWidthA$[ebp]
  07114	50		 push	 eax
  07115	8b 4d a0	 mov	 ecx, DWORD PTR _y$[ebp]
  07118	51		 push	 ecx
  07119	8b 55 a4	 mov	 edx, DWORD PTR _x$[ebp]
  0711c	52		 push	 edx
  0711d	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$[ebp]
  07123	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 2688 : 	BMWidthA 		= siAdd->GetCel()->Width();

  07128	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _siAdd$[ebp]
  0712e	e8 00 00 00 00	 call	 ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ ; ScreenItem::GetCel
  07133	8b c8		 mov	 ecx, eax
  07135	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  0713a	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _BMWidthA$[ebp], eax

; 2689 : 	BMHeightA 		= siAdd->GetCel()->Height();

  07140	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _siAdd$[ebp]
  07146	e8 00 00 00 00	 call	 ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ ; ScreenItem::GetCel
  0714b	8b c8		 mov	 ecx, eax
  0714d	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  07152	89 45 b4	 mov	 DWORD PTR _BMHeightA$[ebp], eax

; 2690 :  
; 2691 : 	BMRect.Set(x,y,x+BMWidthA-1,y+BMHeightA-1);

  07155	8b 45 b4	 mov	 eax, DWORD PTR _BMHeightA$[ebp]
  07158	8b 4d a0	 mov	 ecx, DWORD PTR _y$[ebp]
  0715b	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  0715f	52		 push	 edx
  07160	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _BMWidthA$[ebp]
  07166	8b 4d a4	 mov	 ecx, DWORD PTR _x$[ebp]
  07169	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  0716d	52		 push	 edx
  0716e	8b 45 a0	 mov	 eax, DWORD PTR _y$[ebp]
  07171	50		 push	 eax
  07172	8b 4d a4	 mov	 ecx, DWORD PTR _x$[ebp]
  07175	51		 push	 ecx
  07176	8d 4d e0	 lea	 ecx, DWORD PTR _BMRect$[ebp]
  07179	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 2692 : 	theTextBox.Clip(BMRect);

  0717e	8d 55 e0	 lea	 edx, DWORD PTR _BMRect$[ebp]
  07181	52		 push	 edx
  07182	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _theTextBox$[ebp]
  07188	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip

; 2693 : 
; 2694 : 	SOL_Point pt(x,y);

  0718d	8b 45 a0	 mov	 eax, DWORD PTR _y$[ebp]
  07190	50		 push	 eax
  07191	8b 4d a4	 mov	 ecx, DWORD PTR _x$[ebp]
  07194	51		 push	 ecx
  07195	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _pt$[ebp]
  0719b	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 2695 : 
; 2696 : 	resMgr->Get ( MemResView, viewA );

  071a0	6a 00		 push	 0
  071a2	66 8b 55 f0	 mov	 dx, WORD PTR _viewA$[ebp]
  071a6	52		 push	 edx
  071a7	6a 00		 push	 0
  071a9	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR $T151067[ebp]
  071af	50		 push	 eax
  071b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  071b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  071b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  071be	ff 52 20	 call	 DWORD PTR [edx+32]

; 2697 : 	BufferStd buffer(BMWidthB,BMHeightB,(uchar*) memMgr->GetAddr(BM) + CELHEADERSIZE);

  071c1	8d 4d 98	 lea	 ecx, DWORD PTR _BM$[ebp]
  071c4	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  071c9	50		 push	 eax
  071ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  071d0	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  071d5	83 c0 2e	 add	 eax, 46			; 0000002eH
  071d8	50		 push	 eax
  071d9	8b 45 bc	 mov	 eax, DWORD PTR _BMHeightB$[ebp]
  071dc	50		 push	 eax
  071dd	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _BMWidthB$[ebp]
  071e3	51		 push	 ecx
  071e4	8d 4d 84	 lea	 ecx, DWORD PTR _buffer$[ebp]
  071e7	e8 00 00 00 00	 call	 ??0BufferStd@@QAE@HHPAE@Z ; BufferStd::BufferStd

; 2698 : 	vCelObjA.Draw(buffer, theTextBox, pt, 0);

  071ec	6a 00		 push	 0
  071ee	83 ec 08	 sub	 esp, 8
  071f1	8b cc		 mov	 ecx, esp
  071f3	89 a5 64 fe ff
	ff		 mov	 DWORD PTR $T151068[ebp], esp
  071f9	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _pt$[ebp]
  071ff	52		 push	 edx
  07200	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  07205	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _theTextBox$[ebp]
  0720b	50		 push	 eax
  0720c	8d 4d 84	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0720f	51		 push	 ecx
  07210	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  07216	e8 00 00 00 00	 call	 ?Draw@CelObjView@@UAEXABVBuffer@@ABVSOL_Rect@@VSOL_Point@@H@Z ; CelObjView::Draw

; 2699 : 	 
; 2700 : 	return(BM);	

  0721b	8d 4d 98	 lea	 ecx, DWORD PTR _BM$[ebp]
  0721e	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  07223	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  07228	89 85 60 fe ff
	ff		 mov	 DWORD PTR $T151069[ebp], eax
  0722e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  07232	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  07238	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0723d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  07244	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  0724a	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0724f	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR $T151069[ebp]
$L145108:

; 2701 : }

  07255	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  07258	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0725f	5f		 pop	 edi
  07260	5e		 pop	 esi
  07261	8b e5		 mov	 esp, ebp
  07263	5d		 pop	 ebp
  07264	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L151070:
  00178	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vCelObjB$[ebp]
  0017e	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  00183	c3		 ret	 0
$L151071:
  00184	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vCelObjA$[ebp]
  0018a	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  0018f	c3		 ret	 0
$L151074:
  00190	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151073
  00195	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddLinkedBitmap@@YAHVObjectID@@0H@Z ENDP		; AddLinkedBitmap
;	COMDAT ?View@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?View@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::View, COMDAT

; 137  : 	int	View() const			{return view;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?View@Bitmap@@QBEHXZ ENDP				; Bitmap::View
_TEXT	ENDS
;	COMDAT ?Loop@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Loop@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Loop, COMDAT

; 138  : 	int	Loop() const			{return loop;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Loop@Bitmap@@QBEHXZ ENDP				; Bitmap::Loop
_TEXT	ENDS
;	COMDAT ?Cel@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Cel@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Cel, COMDAT

; 139  : 	int	Cel() const				{return cel;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Cel@Bitmap@@QBEHXZ ENDP				; Bitmap::Cel
_TEXT	ENDS
;	COMDAT ?SetType@Bitmap@@QAEXH@Z
_TEXT	SEGMENT
_theType$ = 8
_this$ = -4
?SetType@Bitmap@@QAEXH@Z PROC NEAR			; Bitmap::SetType, COMDAT

; 151  : 	void	SetType(int theType)	{type = theType;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _theType$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetType@Bitmap@@QAEXH@Z ENDP				; Bitmap::SetType
_TEXT	ENDS
;	COMDAT ?GetCel@ScreenItem@@QAEPAVCelObj@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetCel@ScreenItem@@QAEPAVCelObj@@XZ PROC NEAR		; ScreenItem::GetCel, COMDAT

; 88   : 	CelObj*		GetCel()						{return cel;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetCel@ScreenItem@@QAEPAVCelObj@@XZ ENDP		; ScreenItem::GetCel
_TEXT	ENDS
PUBLIC	?KCelLink@@YAXPAF@Z				; KCelLink
EXTRN	?GetFirstLink@CelObj@@QAEFXZ:NEAR		; CelObj::GetFirstLink
EXTRN	?GetNextLink@CelObj@@QAEFH@Z:NEAR		; CelObj::GetNextLink
xdata$x	SEGMENT
$T151088 DD	019930520H
	DD	01H
	DD	FLAT:$T151091
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151091 DD	0ffffffffH
	DD	FLAT:$L151086
xdata$x	ENDS
_TEXT	SEGMENT
$T151082 = -100
$T151083 = -104
$T151084 = -108
$T151085 = -112
__$EHRec$ = -12
_args$ = 8
_function$ = -96
_vlc$ = -92
?KCelLink@@YAXPAF@Z PROC NEAR				; KCelLink

; 2705 : {

  07265	55		 push	 ebp
  07266	8b ec		 mov	 ebp, esp
  07268	6a ff		 push	 -1
  0726a	68 00 00 00 00	 push	 $L151089
  0726f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  07275	50		 push	 eax
  07276	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0727d	83 ec 68	 sub	 esp, 104		; 00000068H

; 2706 : 	//		arg(1) = function
; 2707 : 	//		arg(2) = view
; 2708 : 	//		arg(3) = loop
; 2709 : 	//		arg(4) = cel
; 2710 : 	//		arg(5) = type
; 2711 : 
; 2712 : 	enum {
; 2713 : 		GetFirstLink,
; 2714 : 		GetNextLink,
; 2715 : 		GetXLinkPoint,
; 2716 : 		GetYLinkPoint,
; 2717 : 		AddBitmapLink
; 2718 : 		
; 2719 : 	};
; 2720 : 
; 2721 : 	int function = arg(1);

  07280	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  07283	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  07287	89 4d a0	 mov	 DWORD PTR _function$[ebp], ecx

; 2722 : 	
; 2723 : 	if (function == 4) {

  0728a	83 7d a0 04	 cmp	 DWORD PTR _function$[ebp], 4
  0728e	75 40		 jne	 SHORT $L145179

; 2724 : 		pm.acc = AddLinkedBitmap(arg(2),arg(3),arg(4));

  07290	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  07293	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  07297	50		 push	 eax
  07298	51		 push	 ecx
  07299	8b cc		 mov	 ecx, esp
  0729b	89 65 9c	 mov	 DWORD PTR $T151082[ebp], esp
  0729e	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  072a1	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  072a5	50		 push	 eax
  072a6	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  072ab	51		 push	 ecx
  072ac	8b cc		 mov	 ecx, esp
  072ae	89 65 98	 mov	 DWORD PTR $T151083[ebp], esp
  072b1	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  072b4	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  072b8	50		 push	 eax
  072b9	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  072be	e8 00 00 00 00	 call	 ?AddLinkedBitmap@@YAHVObjectID@@0H@Z ; AddLinkedBitmap
  072c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  072c6	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2725 : 		return;

  072cb	e9 f2 00 00 00	 jmp	 $L145171
$L145179:

; 2727 : 
; 2728 : 	CelObjView	vlc(arg(2),arg(3),arg(4));

  072d0	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  072d3	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  072d7	52		 push	 edx
  072d8	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  072db	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  072df	51		 push	 ecx
  072e0	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  072e3	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  072e7	50		 push	 eax
  072e8	8d 4d a4	 lea	 ecx, DWORD PTR _vlc$[ebp]
  072eb	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  072f0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2729 : 
; 2730 : 	switch(function) {

  072f7	8b 4d a0	 mov	 ecx, DWORD PTR _function$[ebp]
  072fa	89 4d 8c	 mov	 DWORD PTR -116+[ebp], ecx
  072fd	83 7d 8c 04	 cmp	 DWORD PTR -116+[ebp], 4
  07301	0f 87 ac 00 00
	00		 ja	 $L145184
  07307	8b 55 8c	 mov	 edx, DWORD PTR -116+[ebp]
  0730a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L151090[edx*4]
$L145187:

; 2731 : 		case GetFirstLink:
; 2732 : 		pm.acc =	vlc.GetFirstLink();

  07311	8d 4d a4	 lea	 ecx, DWORD PTR _vlc$[ebp]
  07314	e8 00 00 00 00	 call	 ?GetFirstLink@CelObj@@QAEFXZ ; CelObj::GetFirstLink
  07319	0f bf c0	 movsx	 eax, ax
  0731c	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2733 : 		break;

  07321	e9 8d 00 00 00	 jmp	 $L145184
$L145188:

; 2734 : 
; 2735 : 		case GetNextLink:
; 2736 : 		pm.acc = vlc.GetNextLink(arg(5));

  07326	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  07329	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  0732d	52		 push	 edx
  0732e	8d 4d a4	 lea	 ecx, DWORD PTR _vlc$[ebp]
  07331	e8 00 00 00 00	 call	 ?GetNextLink@CelObj@@QAEFH@Z ; CelObj::GetNextLink
  07336	0f bf c0	 movsx	 eax, ax
  07339	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2737 : 		break;

  0733e	eb 73		 jmp	 SHORT $L145184
$L145189:

; 2738 : 
; 2739 : 		case GetXLinkPoint:
; 2740 : 		pm.acc = vlc.GetLinkPoint(arg(5),1);

  07340	6a 01		 push	 1
  07342	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  07345	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  07349	52		 push	 edx
  0734a	8d 4d a4	 lea	 ecx, DWORD PTR _vlc$[ebp]
  0734d	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  07352	0f bf c0	 movsx	 eax, ax
  07355	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2741 : 		break;

  0735a	eb 57		 jmp	 SHORT $L145184
$L145190:

; 2742 : 
; 2743 : 		case GetYLinkPoint:
; 2744 : 		pm.acc = vlc.GetLinkPoint(arg(5),0);

  0735c	6a 00		 push	 0
  0735e	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  07361	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  07365	52		 push	 edx
  07366	8d 4d a4	 lea	 ecx, DWORD PTR _vlc$[ebp]
  07369	e8 00 00 00 00	 call	 ?GetLinkPoint@CelObj@@QAEFHH@Z ; CelObj::GetLinkPoint
  0736e	0f bf c0	 movsx	 eax, ax
  07371	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 2745 : 		break;

  07376	eb 3b		 jmp	 SHORT $L145184
$L145191:

; 2746 : 
; 2747 : 		case AddBitmapLink:
; 2748 : 		// arg(2) = baseSI
; 2749 : 		// arg(3) = addedSI
; 2750 : 		// arg(4) = linkType
; 2751 : 		pm.acc = AddLinkedBitmap(arg(2),arg(3),arg(4));

  07378	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0737b	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  0737f	52		 push	 edx
  07380	51		 push	 ecx
  07381	8b cc		 mov	 ecx, esp
  07383	89 65 94	 mov	 DWORD PTR $T151084[ebp], esp
  07386	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  07389	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  0738d	52		 push	 edx
  0738e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  07393	51		 push	 ecx
  07394	8b cc		 mov	 ecx, esp
  07396	89 65 90	 mov	 DWORD PTR $T151085[ebp], esp
  07399	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0739c	66 8b 50 04	 mov	 dx, WORD PTR [eax+4]
  073a0	52		 push	 edx
  073a1	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  073a6	e8 00 00 00 00	 call	 ?AddLinkedBitmap@@YAHVObjectID@@0H@Z ; AddLinkedBitmap
  073ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  073ae	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax
$L145184:

; 2755 : }

  073b3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  073ba	8d 4d a4	 lea	 ecx, DWORD PTR _vlc$[ebp]
  073bd	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
$L145171:
  073c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  073c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  073cc	8b e5		 mov	 esp, ebp
  073ce	5d		 pop	 ebp
  073cf	c3		 ret	 0
$L151090:
  073d0	00 00 00 00	 DD	 $L145187
  073d4	00 00 00 00	 DD	 $L145188
  073d8	00 00 00 00	 DD	 $L145189
  073dc	00 00 00 00	 DD	 $L145190
  073e0	00 00 00 00	 DD	 $L145191
_TEXT	ENDS
text$x	SEGMENT
$L151086:
  0019a	8d 4d a4	 lea	 ecx, DWORD PTR _vlc$[ebp]
  0019d	e8 00 00 00 00	 call	 ??1CelObjView@@UAE@XZ	; CelObjView::~CelObjView
  001a2	c3		 ret	 0
$L151089:
  001a3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151088
  001a8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KCelLink@@YAXPAF@Z ENDP				; KCelLink
;	COMDAT ?Max@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8
_b$ = 12
?Max@@YAHHH@Z PROC NEAR					; Max, COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 97   : 	return a > b ? a : b;

  00004	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00007	3b 45 0c	 cmp	 eax, DWORD PTR _b$[ebp]
  0000a	7e 08		 jle	 SHORT $L151093
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR -4+[ebp], ecx
  00012	eb 06		 jmp	 SHORT $L151094
$L151093:
  00014	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00017	89 55 fc	 mov	 DWORD PTR -4+[ebp], edx
$L151094:
  0001a	8b 45 fc	 mov	 eax, DWORD PTR -4+[ebp]

; 98   : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?Max@@YAHHH@Z ENDP					; Max
_TEXT	ENDS
END

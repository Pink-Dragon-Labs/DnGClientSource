	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Networkw.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@NAAD@Magellan?5MSWHEEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FPAF@MouseZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CLBL@MSWHEEL_ROLLMSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DLPD@MSH_WHEELSUPPORT_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODOJ@MSH_SCROLL_LINES_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EDBF@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FGFK@CLSID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DMDD@?5?9?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOFL@Interface?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FNJL@?$CICLSID?$DP?$DP?$DP?$CJ?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DLIL@?5?9?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@NKPL@Unknown?5Error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@HOAP@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@BJHN@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MDHG@?4tlb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLHD@oleaut32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FJNM@UnRegisterTypeLib?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CDEE@DllGetVersion?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FDEG@comctl32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKNA@shell32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@ILEN@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@JLLA@?3Jan?3January?3Feb?3February?3Mar?3Ma@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCCD@true?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELCB@no?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LGKI@yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKHJ@C?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPIO@IDispatch?5error?5?$CD?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NADL@Unknown?5error?50x?$CF0lX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MHAC@?$CFp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CFAI@0123456789abcdefABCDEF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KFAL@E?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KMAE@?0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MMAA@missing?5locale?5facet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __tcscmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcscoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextWindow@@YAPAUHWND__@@PAU1@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawState@@YGHPAUHDC__@@PAUHBRUSH__@@P6GH0JIHH@ZJIHHHHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextPtr@CSimpleList@@QBEPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CByteArray@@QBEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CByteArray@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CWordArray@@QBEGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CWordArray@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CDWordArray@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CDWordArray@@QAEAAKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CUIntArray@@QBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CUIntArray@@QAEAAIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ACPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CObArray@@QBEPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CObArray@@QAEAAPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CStringArray@@QBE?AVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CStringArray@@QAEAAVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSimpleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSimpleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMemoryException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemoryException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNotSupportedException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNotSupportedException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCArchiveException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFileException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFileException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFilePath@CFile@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CString@@IBEPAUCStringData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CString@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@CString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDays@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalHours@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalMinutes@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalSeconds@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwapLeftRight@CRect@@SAXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCResourceException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CResourceException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCUserException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CUserException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPen@@SGPAV1@PAUHPEN__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBrush@@SGPAV1@PAUHBRUSH__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPalette@@SGPAV1@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHmenu@CMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CListBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCheckListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCheckListBox@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComboBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemData@CComboBox@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CComboBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEdit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCommonDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCommonDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintSelection@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintRange@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorders@CStatusBar@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRectTracker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmapButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmapButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualGUID@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCOleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1COleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleCurrency@@QAEXW4CurrencyStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4COleDateTime@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTime@@QAEXW4DateTimeStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0COleDateTimeSpan@@QAE@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTimeSpan@@QAEXW4DateTimeSpanStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@COleSafeArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDateTimeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonthCalCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDragListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatusBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListCtrl@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHotKeyCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpinButtonCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSliderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAnimateCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRichEditCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCReBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CReBarCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBoxEx@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIPAddressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2BSTR@@YAPAGPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlTrace2@ATL@@YAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualGUID@ATL@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YAHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReplaceSingleQuote@CComModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@CComBSTR@ATL@@QAE_NPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalClear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlAdvise@ATL@@YGJPAUIUnknown@@0ABU_GUID@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_NextObjectMapEntry@ATL@@YAPAU_ATL_OBJMAP_ENTRY@1@PAU_ATL_MODULE@1@PAU21@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleInit@ATL@@YGJPAU_ATL_MODULE@1@PAU_ATL_OBJMAP_ENTRY@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterClassObjects@ATL@@YGJPAU_ATL_MODULE@1@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRevokeClassObjects@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleGetClassObject@ATL@@YGJPAU_ATL_MODULE@1@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleTerm@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddTermFunc@ATL@@YGJPAU_ATL_MODULE@1@P6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterServer@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServerEx@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServer@ATL@@YGJPAU_ATL_MODULE@1@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUpdateRegistryFromResourceD@ATL@@YGJPAU_ATL_MODULE@1@PBGHPAU_ATL_REGMAP_ENTRY@1@PAUIRegistrar@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleLoadTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBGPAPAGPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddCreateWndData@ATL@@YGXPAU_ATL_MODULE@1@PAU_AtlCreateWndData@1@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleExtractCreateWndData@ATL@@YGPAXPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBDPAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@invalid_argument@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0invalid_argument@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YAGDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@failure@ios_base@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7_bstr_t@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Compare@_bstr_t@@ABEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@Data_t@_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Assign@Data_t@_bstr_t@@QAEXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@Data_t@_bstr_t@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8_variant_t@@QBE_NPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@_variant_t@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonikerFile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDocument@COleServerItem@@QBEPAVCOleServerDoc@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@AAVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Data@ArrayID@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TextID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckBounds@OCArray@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Data@OCArray@@QAEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Size@CPackedData@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ByteAt@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetByte@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetByte@CPackedData@@QAEXHE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutByte@CPackedData@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWord@CPackedData@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutWord@CPackedData@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LongAt@CPackedData@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_nValue@CSCI_LongInt@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDLo@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDHi@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_nServID@CSCI_WorldObject@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GroupMember@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPointContainer@@@ATL@@QAEPAPAUIConnectionPointContainer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPointContainer@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPointContainer@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPoint@@@ATL@@QAEPAPAUIConnectionPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPoint@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPoint@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIRegistrar@@@ATL@@QAEPAPAUIRegistrar@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIRegistrar@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIRegistrar@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIRegistrar@@@ATL@@QAEPAUIRegistrar@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInterfacePtr@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QBEPAUIMoniker@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QBEPAUIBinding@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@G@std@@QAEPAGIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@G@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YADDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@GU?$char_traits@G@std@@@1@0IPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?isdigit@std@@YA_NDABVlocale@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@G@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@D@std@@@std@@SAPAV?$ctype@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@G@std@@@std@@SAPAV?$ctype@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAPAV?$numpunct@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAPAV?$numpunct@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPADPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPAGPBDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_eab22ac1_30c1_11cf_a7eb_0000c05bae0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d66d6f98_cdaa_11d0_b822_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9860_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000117_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000113_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d8_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1f8352c0_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMonthCalCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f220_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f208_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc9_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa5_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000192_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000128_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000140_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CEdit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000122_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_920ff31f_ca25_451a_9738_3444fc206bcc
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b283_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CScrollBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bcc7_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTabCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b3e7c340_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d49_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_85cb6900_4d95_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4f7ae600_0142_11d3_9dcf_89be4efb591e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBoxEx@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f203_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1ac3d9f0_175c_11d1_95be_00609797ea4f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_012dd920_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHotKeyCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020403_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f311_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1008c4a0_7613_11cf_9af1_0020af6e72f4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020410_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020404_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVoverflow_error@std@@@8??0overflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f23b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b15b8dc1_c7e1_11d0_8680_00aa00bdcb71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f52e2b61_18a1_11d1_b105_00805f49916b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3d7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2aa_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1de_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9d5_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000025_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000019_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2a4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d8_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_948c5ad3_c58d_11d0_9c0b_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020406_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_bc40bec1_c493_11d0_831b_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd21_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ee11629b_36df_11d3_9dd0_89d6dbbba800
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9bfbbc02_eff1_101a_84ed_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f03340_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_63cdbcb0_c1b1_11d0_9336_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_bb1a2ae1_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0c733a30_2a1c_11ce_ade5_00aa0044773d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65ce_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cb5bdc81_93c1_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f218_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f230_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ef_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSimpleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f377_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0e6d4d92_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ca478da0_3920_11d3_9dd0_8067e4a06603
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eae1ba61_a4ed_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9eb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55882_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVrange_error@std@@@8??0range_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f35f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3fd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd23_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a3ccedf3_2de2_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d10f6761_83e9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0002e011_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28d_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1ff_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f240_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1da_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCommonDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000129_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88a05c00_f000_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ee_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d5f56b60_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToolBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_08ec3e00_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af280b6_cb3f_11d0_891e_00c04fb6bfc4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9e7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020d03_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_85bd8e82_0fba_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CNotSupportedException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3fc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d40_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_359f3441_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f28b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_afa0dc11_c313_11d0_831a_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000023_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e0e270c1_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVbad_typeid@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c9_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1c2056cc_5ef4_101b_8bc8_00aa003e3b29
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2c2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fbf23b80_e3f0_101b_8488_00aa003e56f8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d9_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f1_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_b722bcc5_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSliderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_618736e0_3c3d_11cf_810c_00aa00389b71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000190_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDragListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3af24292_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020d00_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000191_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_f77459a0_bf9a_11cf_ba4e_00c04fd70816
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f322_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f266_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a41_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4425_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$ctype@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@D@std@@@std@@0PAV?$numpunct@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@G@std@@@std@@0PAV?$numpunct@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@D@std@@@std@@0PAV?$ctype@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@G@std@@@std@@0PAV?$ctype@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f29c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_359f3443_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc8_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e003_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f206_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f212_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020402_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ed_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f490eb00_1240_11d1_9888_006097deacf9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_typeid@std@@@8??0bad_typeid@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CBitmapButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1dd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f373_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214ea_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d7_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ed_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000112_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3f7f31ac_e15f_11d0_9c25_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000118_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f25f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fac32c80_cbe4_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7bf80980_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eb0fe172_1a3a_11d0_89b3_00a0c90a90ac
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_729fe2f8_1ea8_11d1_8f85_00c04fc2fbe1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f202_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ac60f6a0_0fd9_11d0_99cb_00c04fd64497
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bccb_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f216_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_04598fc6_866c_11cf_ab7c_00aa00c08fcf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7COleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_332c4426_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28c_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ee_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e013_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_594f31d0_7f19_11d0_b194_00a0c90dc8bf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_6d5140c1_7436_11ce_8034_00aa006009fa
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f313_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88e39e80_3578_11cf_ae69_08002b2e1262
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_742b0e01_14e6_101b_914e_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAnimateCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f37e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVunderflow_error@std@@@8??0underflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9c7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e7a1af80_4d96_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpinButtonCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ca04b7e6_0d21_11d1_8cc5_00c04fc2b085
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b288_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000126_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_163bb1e0_6e00_11cf_837a_48dc04c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_2a342fc2_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d8f015c0_c278_11ce_a49e_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd3f23c0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_df0b3d60_548f_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a7aba9c1_8983_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_744129e0_cbe5_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_68284faa_6a48_11d0_8c78_00c04fd918b4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000010_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CStatusBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3d5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_626fc520_a41e_11cf_a731_00a0c9082637
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_91a565c1_e38f_11d0_94bf_00a0c9055cbf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2ad_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d31_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56a34_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000012a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af24290_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1e0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f35c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a9d758a0_4617_11cf_95fc_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b8da6310_e19b_11d0_933c_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_db01a1e3_a42b_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_65725580_9b5d_11d0_9bfe_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_539698a0_cdca_11cf_a5eb_00aa0047a063
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d30c1661_cdaf_11d0_8a3e_00c04fc9e26e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3dc39d1d_c030_11d0_b81b_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d46_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_37deb787_2d9b_11d3_9dd0_c423e6542e10
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_922eada0_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_69d14c80_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFileException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CReBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000011c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_9c2cad80_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_70bdde00_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f3cf_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CArchiveException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000121_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CResourceException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_d9f1e15a_ccdb_11d0_9c0c_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa2_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002df05_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRectTracker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f209_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000020_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f319_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f375_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f369_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cf51ed10_62fe_11cf_bf86_00a0c9034836
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_894ad3b0_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_baa342a0_2ded_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f29f6bc0_5021_11ce_aa15_00006901293f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e8_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f315_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f265_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMemoryException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cd_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d001f200_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e002_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_085fb2c0_0df8_11d1_8f4b_00a0c905413f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9e4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55dd814e_a1b7_4808_9625_4f75a3fad8a7
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f569d0_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ec_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214ee_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fa_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b285_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f361_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214eb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0c6c4200_c589_11d0_999a_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000139_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55881_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4ef6100a_af88_11d0_9846_00c04fc29993
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000002_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000138_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f7_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f372_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f5be2ee1_bfd7_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020411_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020405_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRichEditCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDateTimeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f376_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f401_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d9e89500_30fa_11d0_b724_00aa006c1a01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_376bd3aa_3845_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f357_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f360_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a1_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c01387a_6ac2_4ef1_bda2_ec5d26e3b065
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_37d84f60_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_322982e0_0855_11d3_9dcf_ddfb3ab09e18
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cabb0da0_da57_11cf_9974_0020afd79762
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_c04d65d2_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7d688a70_c613_11d0_999b_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f378_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f383_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1cff0050_6fdd_11d0_9328_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bb1a2ae2_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_01e44665_24ac_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_6cfc9ba1_fe87_11d2_9dcf_ed29fafe371d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9ba05970_f6a8_11cf_a442_00a0c90a8f39
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcca_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_83c2d7a0_0de6_11d3_9dcf_9423f1b2561c
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonikerFile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_275c23e3_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVdomain_error@std@@@8??0domain_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28f_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000104_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000110_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f207_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d4c_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_25b15600_0115_11d0_bf0d_00aa00b8dfd2
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000127_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000022_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000016_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c6_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCheckListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000026_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55272a00_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28b_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4427_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_aa5b6a80_b834_11d0_932f_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_e0e270c0_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e6_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000101_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000029_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3127ca40_446e_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_55980ba0_35aa_11cf_b671_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a1faf330_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a4c65425_0f82_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CIPAddressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CUserException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a6ef9861_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9862_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000018_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000193_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000024_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f200_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_dce47f78_8a6c_4c6d_a6f7_8be4427127c4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f204_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ea_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd1ae5e0_a6ae_11ce_bd37_504200c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000102_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f0_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a42_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f24f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000001d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000194_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHeaderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_99caf010_415e_11cf_8814_00aa00b569f5
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_47d2657a_7b27_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ec_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f211_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f205_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0e6d4d90_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00021500_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc6_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_89bcb740_6119_101a_bcb7_00dd010655af
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bcfce0a0_ec17_11d0_8d10_00a0c90f2719
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d6_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000119_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000111_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000105_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000125_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7bf80981_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b289_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65d0_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_972de6c1_8b09_11d2_b652_a1fd6cc34260
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f244_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56afc_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000103_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000013e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e1_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000003_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f1db8392_7331_11d0_8c99_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_c4d244b0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2eb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?GUID_ATLVer30@ATL@@3U_GUID@@A			; ATL::GUID_ATLVer30
PUBLIC	?m_libid@CComModule@ATL@@2U_GUID@@A		; ATL::CComModule::m_libid
PUBLIC	_LIBID_ATLLib
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	?seq_no@@3GA					; seq_no
PUBLIC	?g_pEncryption@@3P6IHPAH0@ZA			; g_pEncryption
PUBLIC	?g_pDecryption@@3P6IHPAH0@ZA			; g_pDecryption
PUBLIC	?maxSID@@3IA					; maxSID
PUBLIC	?SIDTable@@3PAKA				; SIDTable
PUBLIC	?g_nMessage@@3PAEA				; g_nMessage
PUBLIC	?netAddress@@3Usockaddr_in@@A			; netAddress
PUBLIC	?netSocket@@3IA					; netSocket
PUBLIC	?netDevice@@3HA					; netDevice
PUBLIC	?netState@@3HA					; netState
PUBLIC	?netIncoming@@3VSOL_List@@A			; netIncoming
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?netOutgoing@@3VSOL_List@@A			; netOutgoing
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_LIBID_ACTIVESKINLib
PUBLIC	_IID_ISkinForm
PUBLIC	_IID_ISkinObjectDisp
PUBLIC	_IID_ISkinSource
PUBLIC	_DIID__ISkinFormEvents
PUBLIC	_IID_ISkinFormEvents_Sink
PUBLIC	_CLSID_SkinForm
PUBLIC	_DIID__ISkinObjectDispEvents
PUBLIC	_IID_ICOMScript
PUBLIC	_IID_IComMorph
PUBLIC	_IID_IComMoveSize
PUBLIC	_IID_ISkinButton
PUBLIC	_CLSID_SkinObject
PUBLIC	_CLSID_COMScript
PUBLIC	_CLSID_ComMorph
PUBLIC	_CLSID_ComMoveSize
PUBLIC	_DIID__ISkinButtonEvents
PUBLIC	_CLSID_SkinButton
PUBLIC	_IID_ISkinPanel
PUBLIC	_DIID__ISkinPanelEvents
PUBLIC	_IID_ISkinLabel
PUBLIC	_CLSID_SkinPanel
PUBLIC	_DIID__ISkinLabelEvents
PUBLIC	_IID_ISkinScrollBar
PUBLIC	_CLSID_SkinLabel
PUBLIC	_DIID__ISkinScrollBarEvents
PUBLIC	_CLSID_SkinScrollBar
PUBLIC	_DIID__ISkinSourceEvents
PUBLIC	_IID_ISkinStorage
PUBLIC	_IID_ISkinPopup
PUBLIC	_IID_IComTransitions
PUBLIC	_IID_ISkinEvent
PUBLIC	_IID_IComProcTextures
PUBLIC	_IID_IComFilters
PUBLIC	_CLSID_SkinSource
PUBLIC	_CLSID_SkinStorage
PUBLIC	_CLSID_SkinPopup
PUBLIC	_CLSID_ComTransitions
PUBLIC	_CLSID_SkinEvent
PUBLIC	_CLSID_ComProcTextures
PUBLIC	_CLSID_ComFilters
PUBLIC	_IID_IInternalConnection
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CComModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CComModule::m_libid
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
_BSS	SEGMENT
?seq_no@@3GA DW	01H DUP (?)				; seq_no
	ALIGN	4

?g_pEncryption@@3P6IHPAH0@ZA DD 01H DUP (?)		; g_pEncryption
?g_pDecryption@@3P6IHPAH0@ZA DD 01H DUP (?)		; g_pDecryption
?maxSID@@3IA DD	01H DUP (?)				; maxSID
?SIDTable@@3PAKA DD 01H DUP (?)				; SIDTable
?g_nMessage@@3PAEA DB 05000H DUP (?)			; g_nMessage
?netAddress@@3Usockaddr_in@@A DB 010H DUP (?)		; netAddress
?netDevice@@3HA DD 01H DUP (?)				; netDevice
?netState@@3HA DD 01H DUP (?)				; netState
	ALIGN	8

?netIncoming@@3VSOL_List@@A DQ 01H DUP (?)		; netIncoming
?netOutgoing@@3VSOL_List@@A DQ 01H DUP (?)		; netOutgoing
_?msgSize@?1??PollSocket@@YAHXZ@4HA DD 01H DUP (?)
_?index@?1??PollSocket@@YAHXZ@4HA DD 01H DUP (?)
_?count@?1??PollSocket@@YAHXZ@4HA DD 01H DUP (?)
_?sizeIndex@?1??PollSocket@@YAHXZ@4HA DD 01H DUP (?)
_?callCount@?1??PollSocket@@YAHXZ@4HA DD 01H DUP (?)
_BSS	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT
?GUID_ATLVer30@ATL@@3U_GUID@@A DD 0b62f5910H		; ATL::GUID_ATLVer30
	DW	06528H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT
_LIBID_ACTIVESKINLib DD 0972de6b5H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT
_IID_ISkinForm DD 0972de6c1H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT
_IID_ISkinObjectDisp DD 06cfc9ba1H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT
_IID_ISkinSource DD 037deb787H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT
_DIID__ISkinFormEvents DD 0972de6c3H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT
_IID_ISkinFormEvents_Sink DD 053fa8d31H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT
_CLSID_SkinForm DD 0972de6c2H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT
_DIID__ISkinObjectDispEvents DD 06cfc9ba3H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT
_IID_ICOMScript DD 04f7ae600H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT
_IID_IComMorph DD 0322982e0H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT
_IID_IComMoveSize DD 083c2d7a0H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT
_IID_ISkinButton DD 053fa8d40H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT
_CLSID_SkinObject DD 06cfc9ba2H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT
_CLSID_COMScript DD 04f7ae601H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT
_CLSID_ComMorph DD 0322982e1H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT
_CLSID_ComMoveSize DD 083c2d7a1H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT
_DIID__ISkinButtonEvents DD 053fa8d42H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT
_CLSID_SkinButton DD 053fa8d41H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT
_IID_ISkinPanel DD 053fa8d46H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT
_DIID__ISkinPanelEvents DD 053fa8d48H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT
_IID_ISkinLabel DD 053fa8d49H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT
_CLSID_SkinPanel DD 053fa8d47H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT
_DIID__ISkinLabelEvents DD 053fa8d4bH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT
_IID_ISkinScrollBar DD 053fa8d4cH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT
_CLSID_SkinLabel DD 053fa8d4aH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT
_DIID__ISkinScrollBarEvents DD 053fa8d4eH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT
_CLSID_SkinScrollBar DD 053fa8d4dH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT
_DIID__ISkinSourceEvents DD 037deb788H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT
_IID_ISkinStorage DD 0ee11629bH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT
_IID_ISkinPopup DD 0ca478da0H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT
_IID_IComTransitions DD 03c01387aH
	DW	06ac2H
	DW	04ef1H
	DB	0bdH
	DB	0a2H
	DB	0ecH
	DB	05dH
	DB	026H
	DB	0e3H
	DB	0b0H
	DB	065H
CONST	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT
_IID_ISkinEvent DD 055dd814eH
	DW	0a1b7H
	DW	04808H
	DB	096H
	DB	025H
	DB	04fH
	DB	075H
	DB	0a3H
	DB	0faH
	DB	0d8H
	DB	0a7H
CONST	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT
_IID_IComProcTextures DD 0dce47f78H
	DW	08a6cH
	DW	04c6dH
	DB	0a6H
	DB	0f7H
	DB	08bH
	DB	0e4H
	DB	042H
	DB	071H
	DB	027H
	DB	0c4H
CONST	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT
_IID_IComFilters DD 0920ff31fH
	DW	0ca25H
	DW	0451aH
	DB	097H
	DB	038H
	DB	034H
	DB	044H
	DB	0fcH
	DB	020H
	DB	06bH
	DB	0ccH
CONST	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT
_CLSID_SkinSource DD 053fa8d44H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT
_CLSID_SkinStorage DD 0ee11629cH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT
_CLSID_SkinPopup DD 0ca478da1H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT
_CLSID_ComTransitions DD 03c6d21d6H
	DW	07470H
	DW	04555H
	DB	0a8H
	DB	0fbH
	DB	06cH
	DB	022H
	DB	092H
	DB	0b3H
	DB	09cH
	DB	046H
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT
_CLSID_SkinEvent DD 08f59c2a4H
	DW	04c01H
	DW	04451H
	DB	0beH
	DB	05bH
	DB	09H
	DB	078H
	DB	07bH
	DB	012H
	DB	03aH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT
_CLSID_ComProcTextures DD 0bf1b5d50H
	DW	03c5cH
	DW	048ceH
	DB	0b9H
	DB	091H
	DB	0eH
	DB	086H
	DB	0d2H
	DB	06fH
	DB	06fH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT
_CLSID_ComFilters DD 0c4d7e3c7H
	DW	03c26H
	DW	04052H
	DB	0a9H
	DB	093H
	DB	071H
	DB	0e5H
	DB	00H
	DB	0eaH
	DB	08cH
	DB	05H
CONST	ENDS
_DATA	SEGMENT
?netSocket@@3IA DD 0ffffffffH				; netSocket
_DATA	ENDS
CRT$XCU	SEGMENT
_$S294	DD	FLAT:_$E293
_$S299	DD	FLAT:_$E298
CRT$XCU	ENDS
_DATA	SEGMENT
_?sizeLeft@?1??PollSocket@@YAHXZ@4HA DD 04H
_DATA	ENDS
_TEXT	SEGMENT
_$E293	PROC NEAR
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 _$E290
  00008	e8 00 00 00 00	 call	 _$E292
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E293	ENDP
_TEXT	ENDS
PUBLIC	??0SOL_List@@QAE@XZ				; SOL_List::SOL_List
_TEXT	SEGMENT
_$E290	PROC NEAR

; 187  : SOL_List netIncoming;

  0000f	55		 push	 ebp
  00010	8b ec		 mov	 ebp, esp
  00012	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netIncoming@@3VSOL_List@@A
  00017	e8 00 00 00 00	 call	 ??0SOL_List@@QAE@XZ	; SOL_List::SOL_List
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_$E290	ENDP
_TEXT	ENDS
PUBLIC	??0Array@@QAE@XZ				; Array::Array
PUBLIC	??1Array@@QAE@XZ				; Array::~Array
PUBLIC	?size@SOL_List@@QAEAAHXZ			; SOL_List::size
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\list.hpp
xdata$x	SEGMENT
$T148514 DD	019930520H
	DD	01H
	DD	FLAT:$T148517
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T148517 DD	0ffffffffH
	DD	FLAT:$L148510
xdata$x	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??0SOL_List@@QAE@XZ PROC NEAR				; SOL_List::SOL_List, COMDAT

; 19   : 	SOL_List() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L148515
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0Array@@QAE@XZ	; Array::Array
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 20   : 		size() = 0;

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 21   : 	} 

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148510:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00008	c3		 ret	 0
$L148515:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T148514
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0SOL_List@@QAE@XZ ENDP				; SOL_List::SOL_List
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
PUBLIC	?dataID@Array@@QAEXVMemID@@@Z			; Array::dataID
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8
??0Array@@QAE@XZ PROC NEAR				; Array::Array, COMDAT

; 74   : 	Array() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 75   : 		dataID ( 0 );

  00011	51		 push	 ecx
  00012	8b cc		 mov	 ecx, esp
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?dataID@Array@@QAEXVMemID@@@Z ; Array::dataID

; 76   : 	}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0Array@@QAE@XZ ENDP					; Array::Array
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1Array@@QAE@XZ PROC NEAR				; Array::~Array, COMDAT

; 88   : 	~Array() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1Array@@QAE@XZ ENDP					; Array::~Array
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT
_memID$ = 8
_this$ = -4
?dataID@Array@@QAEXVMemID@@@Z PROC NEAR			; Array::dataID, COMDAT

; 111  : 	void dataID ( MemID memID ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 		_dataID = memID;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _memID$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 113  : 	}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?dataID@Array@@QAEXVMemID@@@Z ENDP			; Array::dataID
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT
_this$ = -4
?size@SOL_List@@QAEAAHXZ PROC NEAR			; SOL_List::size, COMDAT

; 24   : 	inline int &size ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return _size;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4

; 26   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?size@SOL_List@@QAEAAHXZ ENDP				; SOL_List::size
_TEXT	ENDS
EXTRN	_atexit:NEAR
_TEXT	SEGMENT
_$E292	PROC NEAR
  0001e	55		 push	 ebp
  0001f	8b ec		 mov	 ebp, esp
  00021	68 00 00 00 00	 push	 OFFSET FLAT:_$E291
  00026	e8 00 00 00 00	 call	 _atexit
  0002b	83 c4 04	 add	 esp, 4
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_$E292	ENDP
_TEXT	ENDS
PUBLIC	??1SOL_List@@QAE@XZ				; SOL_List::~SOL_List
_TEXT	SEGMENT
_$E291	PROC NEAR
  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netIncoming@@3VSOL_List@@A
  00038	e8 00 00 00 00	 call	 ??1SOL_List@@QAE@XZ	; SOL_List::~SOL_List
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_$E291	ENDP
_TEXT	ENDS
;	COMDAT ??1SOL_List@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1SOL_List@@QAE@XZ PROC NEAR				; SOL_List::~SOL_List, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1SOL_List@@QAE@XZ ENDP				; SOL_List::~SOL_List
_TEXT	ENDS
_TEXT	SEGMENT
_$E298	PROC NEAR
  0003f	55		 push	 ebp
  00040	8b ec		 mov	 ebp, esp
  00042	e8 00 00 00 00	 call	 _$E295
  00047	e8 00 00 00 00	 call	 _$E297
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_$E298	ENDP
_$E295	PROC NEAR

; 188  : SOL_List netOutgoing;

  0004e	55		 push	 ebp
  0004f	8b ec		 mov	 ebp, esp
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netOutgoing@@3VSOL_List@@A
  00056	e8 00 00 00 00	 call	 ??0SOL_List@@QAE@XZ	; SOL_List::SOL_List
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_$E295	ENDP
_$E297	PROC NEAR
  0005d	55		 push	 ebp
  0005e	8b ec		 mov	 ebp, esp
  00060	68 00 00 00 00	 push	 OFFSET FLAT:_$E296
  00065	e8 00 00 00 00	 call	 _atexit
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_$E297	ENDP
_$E296	PROC NEAR
  0006f	55		 push	 ebp
  00070	8b ec		 mov	 ebp, esp
  00072	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netOutgoing@@3VSOL_List@@A
  00077	e8 00 00 00 00	 call	 ??1SOL_List@@QAE@XZ	; SOL_List::~SOL_List
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_$E296	ENDP
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
PUBLIC	?Free@MemID@@QAEXXZ				; MemID::Free
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
PUBLIC	?KNetwork@@YAXPAF@Z				; KNetwork
PUBLIC	??0ArrayID@@QAE@G@Z				; ArrayID::ArrayID
PUBLIC	??0Array@@QAE@VMemID@@@Z			; Array::Array
PUBLIC	?dataID@Array@@QAE?AVMemID@@XZ			; Array::dataID
PUBLIC	?CNetFastSend@@YIHHPAE@Z			; CNetFastSend
PUBLIC	?FlushSocket@@YAXXZ				; FlushSocket
PUBLIC	?PollSocket@@YAHXZ				; PollSocket
PUBLIC	?NetConnect@@YAHPADH@Z				; NetConnect
PUBLIC	?NetConnectIP@@YAHHHHHH@Z			; NetConnectIP
PUBLIC	?NetDisconnect@@YAHXZ				; NetDisconnect
PUBLIC	?NetSend@@YAHPAFH@Z				; NetSend
PUBLIC	??DTextID@@QAEPADXZ				; TextID::operator*
EXTRN	?size@Array@@QAEGXZ:NEAR			; Array::size
EXTRN	?calcAddress@Array@@QAEPAXH@Z:NEAR		; Array::calcAddress
EXTRN	?copy@Array@@QAEXHVMemID@@HH@Z:NEAR		; Array::copy
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
EXTRN	?at@SOL_List@@QAEGH@Z:NEAR			; SOL_List::at
EXTRN	?del@SOL_List@@QAEHG@Z:NEAR			; SOL_List::del
EXTRN	__imp__atoi:NEAR
EXTRN	??0TextID@@QAE@G@Z:NEAR				; TextID::TextID
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
EXTRN	__imp__VirtualAlloc@16:NEAR
xdata$x	SEGMENT
$T148557 DD	019930520H
	DD	04H
	DD	FLAT:$T148560
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T148560 DD	0ffffffffH
	DD	FLAT:$L148552
	DD	00H
	DD	FLAT:$L148553
	DD	0ffffffffH
	DD	FLAT:$L148554
	DD	02H
	DD	FLAT:$L148555
xdata$x	ENDS
_TEXT	SEGMENT
$T148537 = -48
$T148538 = -52
$T148539 = -56
$T148540 = -60
$T148541 = -64
$T148542 = -68
$T148543 = -72
$T148544 = -76
$T148545 = -80
$T148546 = -84
$T148547 = -88
$T148548 = -92
$T148549 = -96
$T148550 = -100
$T148551 = -104
__$EHRec$ = -12
_args$ = 8
_nSize$ = -16
_encrypt$142804 = -32
_decrypt$142808 = -20
_pCode$142815 = -28
_pJmp$142818 = -24
_count$142856 = -36
_array$142864 = -40
_msg$142868 = -44
?KNetwork@@YAXPAF@Z PROC NEAR				; KNetwork

; 209  : KNetwork(argList) {

  0007e	55		 push	 ebp
  0007f	8b ec		 mov	 ebp, esp
  00081	6a ff		 push	 -1
  00083	68 00 00 00 00	 push	 $L148558
  00088	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0008e	50		 push	 eax
  0008f	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00096	83 ec 68	 sub	 esp, 104		; 00000068H

; 210  : 	int nSize = argCount;

  00099	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0009c	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0009f	89 4d f0	 mov	 DWORD PTR _nSize$[ebp], ecx

; 211  : 
; 212  : 	switch (arg(1)) {

  000a2	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  000a5	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  000a9	89 45 94	 mov	 DWORD PTR -108+[ebp], eax
  000ac	83 7d 94 10	 cmp	 DWORD PTR -108+[ebp], 16 ; 00000010H
  000b0	0f 87 ce 03 00
	00		 ja	 $L142798
  000b6	8b 4d 94	 mov	 ecx, DWORD PTR -108+[ebp]
  000b9	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L148559[ecx*4]
$L142801:

; 214  : 				Array encrypt ( (ArrayID)arg(2) );

  000c0	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  000c3	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  000c7	50		 push	 eax
  000c8	8d 4d cc	 lea	 ecx, DWORD PTR $T148538[ebp]
  000cb	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  000d0	51		 push	 ecx
  000d1	8b cc		 mov	 ecx, esp
  000d3	89 65 d0	 mov	 DWORD PTR $T148537[ebp], esp
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  000dc	8d 4d e0	 lea	 ecx, DWORD PTR _encrypt$142804[ebp]
  000df	e8 00 00 00 00	 call	 ??0Array@@QAE@VMemID@@@Z ; Array::Array
  000e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 215  : 				Array decrypt ( (ArrayID)arg(3) );

  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  000ee	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  000f2	52		 push	 edx
  000f3	8d 4d c4	 lea	 ecx, DWORD PTR $T148540[ebp]
  000f6	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  000fb	51		 push	 ecx
  000fc	8b cc		 mov	 ecx, esp
  000fe	89 65 c8	 mov	 DWORD PTR $T148539[ebp], esp
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00107	8d 4d ec	 lea	 ecx, DWORD PTR _decrypt$142808[ebp]
  0010a	e8 00 00 00 00	 call	 ??0Array@@QAE@VMemID@@@Z ; Array::Array
  0010f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 216  : 
; 217  : 				if ( g_pEncryption == NULL ) {

  00113	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pEncryption@@3P6IHPAH0@ZA, 0 ; g_pEncryption
  0011a	75 2a		 jne	 SHORT $L142810

; 218  : 					g_pEncryption = (CryptFunc) VirtualAlloc( NULL, 4090, MEM_COMMIT, PAGE_EXECUTE_READWRITE );

  0011c	6a 40		 push	 64			; 00000040H
  0011e	68 00 10 00 00	 push	 4096			; 00001000H
  00123	68 fa 0f 00 00	 push	 4090			; 00000ffaH
  00128	6a 00		 push	 0
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
  00130	a3 00 00 00 00	 mov	 DWORD PTR ?g_pEncryption@@3P6IHPAH0@ZA, eax ; g_pEncryption

; 219  : 					g_pDecryption = (CryptFunc) ( (int) g_pEncryption + 2048 );

  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pEncryption@@3P6IHPAH0@ZA ; g_pEncryption
  0013a	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  0013f	a3 00 00 00 00	 mov	 DWORD PTR ?g_pDecryption@@3P6IHPAH0@ZA, eax ; g_pDecryption

; 220  : 				} else {

  00144	eb 16		 jmp	 SHORT $L142814
$L142810:

; 221  : 					memset( g_pEncryption, 0, 4089 );

  00146	68 f9 0f 00 00	 push	 4089			; 00000ff9H
  0014b	6a 00		 push	 0
  0014d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pEncryption@@3P6IHPAH0@ZA ; g_pEncryption
  00153	51		 push	 ecx
  00154	e8 00 00 00 00	 call	 _memset
  00159	83 c4 0c	 add	 esp, 12			; 0000000cH
$L142814:

; 223  : 
; 224  : 				void* pCode = (void*) ( (int) g_pDecryption + 0x0700 );

  0015c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pDecryption@@3P6IHPAH0@ZA ; g_pDecryption
  00162	81 c2 00 07 00
	00		 add	 edx, 1792		; 00000700H
  00168	89 55 e4	 mov	 DWORD PTR _pCode$142815[ebp], edx

; 225  : 				char* pJmp = (char*) g_pDecryption;

  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pDecryption@@3P6IHPAH0@ZA ; g_pDecryption
  00170	89 45 e8	 mov	 DWORD PTR _pJmp$142818[ebp], eax

; 226  : 
; 227  : 				pJmp[0] = 0xe9;

  00173	8b 4d e8	 mov	 ecx, DWORD PTR _pJmp$142818[ebp]
  00176	c6 01 e9	 mov	 BYTE PTR [ecx], -23	; ffffffe9H

; 228  : 				*((int*) &pJmp[1]) = 0x000006fb;

  00179	8b 55 e8	 mov	 edx, DWORD PTR _pJmp$142818[ebp]
  0017c	c7 42 01 fb 06
	00 00		 mov	 DWORD PTR [edx+1], 1787	; 000006fbH

; 229  : 
; 230  : 				memcpy( g_pEncryption, encrypt.calcAddress( 0 ),  encrypt.size() );

  00183	8d 4d e0	 lea	 ecx, DWORD PTR _encrypt$142804[ebp]
  00186	e8 00 00 00 00	 call	 ?size@Array@@QAEGXZ	; Array::size
  0018b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00190	50		 push	 eax
  00191	6a 00		 push	 0
  00193	8d 4d e0	 lea	 ecx, DWORD PTR _encrypt$142804[ebp]
  00196	e8 00 00 00 00	 call	 ?calcAddress@Array@@QAEPAXH@Z ; Array::calcAddress
  0019b	50		 push	 eax
  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pEncryption@@3P6IHPAH0@ZA ; g_pEncryption
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 _memcpy
  001a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 231  : 				memcpy( pCode, decrypt.calcAddress( 0 ),  decrypt.size() );

  001aa	8d 4d ec	 lea	 ecx, DWORD PTR _decrypt$142808[ebp]
  001ad	e8 00 00 00 00	 call	 ?size@Array@@QAEGXZ	; Array::size
  001b2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001b7	50		 push	 eax
  001b8	6a 00		 push	 0
  001ba	8d 4d ec	 lea	 ecx, DWORD PTR _decrypt$142808[ebp]
  001bd	e8 00 00 00 00	 call	 ?calcAddress@Array@@QAEPAXH@Z ; Array::calcAddress
  001c2	50		 push	 eax
  001c3	8b 4d e4	 mov	 ecx, DWORD PTR _pCode$142815[ebp]
  001c6	51		 push	 ecx
  001c7	e8 00 00 00 00	 call	 _memcpy
  001cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 232  : 
; 233  : 				*((int*) &pJmp[ arg(4) ]) = (int) g_pDecryption;

  001cf	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  001d2	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  001d6	8b 4d e8	 mov	 ecx, DWORD PTR _pJmp$142818[ebp]
  001d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pDecryption@@3P6IHPAH0@ZA ; g_pDecryption
  001df	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 234  : 				*((int*) &pJmp[ arg(5) ]) = (int) g_pEncryption;

  001e2	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  001e5	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  001e9	8b 55 e8	 mov	 edx, DWORD PTR _pJmp$142818[ebp]
  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pEncryption@@3P6IHPAH0@ZA ; g_pEncryption
  001f1	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 235  : 
; 236  : 				*((int*) &pJmp[ arg(6) ]) = (int) CNetFastSend;

  001f4	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  001f7	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  001fb	8b 45 e8	 mov	 eax, DWORD PTR _pJmp$142818[ebp]
  001fe	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET FLAT:?CNetFastSend@@YIHHPAE@Z ; CNetFastSend

; 237  : 			}

  00205	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00209	8d 4d ec	 lea	 ecx, DWORD PTR _decrypt$142808[ebp]
  0020c	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00211	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00218	8d 4d e0	 lea	 ecx, DWORD PTR _encrypt$142804[ebp]
  0021b	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array

; 238  : 
; 239  : 			break;

  00220	e9 5f 02 00 00	 jmp	 $L142798
$L142827:

; 240  : 
; 241  : 		case NET_CONNECT:
; 242  : 			pm.acc = NetConnect ( *(TextID)arg(2), atoi ( *(TextID)arg(3) ) );

  00225	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00228	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  0022c	52		 push	 edx
  0022d	8d 4d c0	 lea	 ecx, DWORD PTR $T148541[ebp]
  00230	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00235	8b c8		 mov	 ecx, eax
  00237	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00243	83 c4 04	 add	 esp, 4
  00246	50		 push	 eax
  00247	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0024a	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  0024e	51		 push	 ecx
  0024f	8d 4d bc	 lea	 ecx, DWORD PTR $T148542[ebp]
  00252	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00257	8b c8		 mov	 ecx, eax
  00259	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0025e	50		 push	 eax
  0025f	e8 00 00 00 00	 call	 ?NetConnect@@YAHPADH@Z	; NetConnect
  00264	83 c4 08	 add	 esp, 8
  00267	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 243  : 			break;

  0026c	e9 13 02 00 00	 jmp	 $L142798
$L142832:

; 244  : 
; 245  : 		case NET_PATCH:
; 246  : 			pm.acc = NetConnectIP ( (int)arg(2), (int)arg(3), (int)arg(4), (int)arg(5), atoi ( *(TextID)arg(6) ) );

  00271	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00274	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  00278	50		 push	 eax
  00279	8d 4d b8	 lea	 ecx, DWORD PTR $T148543[ebp]
  0027c	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00281	8b c8		 mov	 ecx, eax
  00283	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00288	50		 push	 eax
  00289	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0028f	83 c4 04	 add	 esp, 4
  00292	50		 push	 eax
  00293	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00296	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  0029a	52		 push	 edx
  0029b	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0029e	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  002a2	51		 push	 ecx
  002a3	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  002a6	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  002aa	50		 push	 eax
  002ab	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  002ae	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  002b2	52		 push	 edx
  002b3	e8 00 00 00 00	 call	 ?NetConnectIP@@YAHHHHHH@Z ; NetConnectIP
  002b8	83 c4 14	 add	 esp, 20			; 00000014H
  002bb	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 247  : 			break;

  002c0	e9 bf 01 00 00	 jmp	 $L142798
$L142839:

; 248  : 
; 249  : 		case NET_SEND:
; 250  : 			NetSend ( args + 2, argCount - 1 );

  002c5	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  002c8	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  002cb	83 e9 01	 sub	 ecx, 1
  002ce	51		 push	 ecx
  002cf	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  002d2	83 c2 04	 add	 edx, 4
  002d5	52		 push	 edx
  002d6	e8 00 00 00 00	 call	 ?NetSend@@YAHPAFH@Z	; NetSend
  002db	83 c4 08	 add	 esp, 8

; 251  : 			break;

  002de	e9 a1 01 00 00	 jmp	 $L142798
$L142840:

; 252  : 
; 253  : 		// send a message converted to big-endian
; 254  : 		case NET_SENDBE:
; 255  : 			NetSend ( args + 2, argCount - 1 );

  002e3	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  002e6	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  002e9	83 e9 01	 sub	 ecx, 1
  002ec	51		 push	 ecx
  002ed	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  002f0	83 c2 04	 add	 edx, 4
  002f3	52		 push	 edx
  002f4	e8 00 00 00 00	 call	 ?NetSend@@YAHPAFH@Z	; NetSend
  002f9	83 c4 08	 add	 esp, 8

; 256  : 			break;

  002fc	e9 83 01 00 00	 jmp	 $L142798
$L142841:

; 257  : 
; 258  : 		case NET_DISCONNECT:
; 259  : 			NetDisconnect();

  00301	e8 00 00 00 00	 call	 ?NetDisconnect@@YAHXZ	; NetDisconnect

; 260  : 			break;

  00306	e9 79 01 00 00	 jmp	 $L142798
$L142842:

; 263  : 			switch ( netDevice ) {

  0030b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?netDevice@@3HA ; netDevice
  00310	89 45 90	 mov	 DWORD PTR -112+[ebp], eax
  00313	83 7d 90 00	 cmp	 DWORD PTR -112+[ebp], 0
  00317	74 02		 je	 SHORT $L142847
  00319	eb 05		 jmp	 SHORT $L142844
$L142847:

; 264  : 				case _NET_SOCKET:
; 265  : 					FlushSocket();

  0031b	e8 00 00 00 00	 call	 ?FlushSocket@@YAXXZ	; FlushSocket
$L142844:

; 269  : 
; 270  : 			break;

  00320	e9 5f 01 00 00	 jmp	 $L142798
$L142848:

; 271  : 	
; 272  : 		case NET_INFO: 
; 273  : 			pm.acc = netDevice;

  00325	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?netDevice@@3HA ; netDevice
  0032b	89 0d 04 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, ecx

; 274  : 			break;

  00331	e9 4e 01 00 00	 jmp	 $L142798
$L142849:

; 275  : 
; 276  : 		case NET_PARENT:
; 277  : 			pm.acc = netIncoming.size();

  00336	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netIncoming@@3VSOL_List@@A
  0033b	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  00340	8b 10		 mov	 edx, DWORD PTR [eax]
  00342	89 15 04 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, edx

; 278  : 			break;

  00348	e9 37 01 00 00	 jmp	 $L142798
$L142850:

; 281  : 			switch ( netDevice ) {

  0034d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?netDevice@@3HA ; netDevice
  00352	89 45 8c	 mov	 DWORD PTR -116+[ebp], eax
  00355	83 7d 8c 00	 cmp	 DWORD PTR -116+[ebp], 0
  00359	74 02		 je	 SHORT $L142855
  0035b	eb 1b		 jmp	 SHORT $L142852
$L142855:

; 282  : 				case _NET_SOCKET:
; 283  : 					int count = 0;

  0035d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _count$142856[ebp], 0
$L142858:

; 284  : 
; 285  : 					while ( PollSocket() != 0 )

  00364	e8 00 00 00 00	 call	 ?PollSocket@@YAHXZ	; PollSocket
  00369	85 c0		 test	 eax, eax
  0036b	74 0b		 je	 SHORT $L142859

; 286  : 						count++;

  0036d	8b 4d dc	 mov	 ecx, DWORD PTR _count$142856[ebp]
  00370	83 c1 01	 add	 ecx, 1
  00373	89 4d dc	 mov	 DWORD PTR _count$142856[ebp], ecx
  00376	eb ec		 jmp	 SHORT $L142858
$L142859:
$L142852:

; 291  : 
; 292  : 			break;

  00378	e9 07 01 00 00	 jmp	 $L142798
$L142860:

; 295  : 			if ( netIncoming.size() ) {

  0037d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netIncoming@@3VSOL_List@@A
  00382	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  00387	83 38 00	 cmp	 DWORD PTR [eax], 0
  0038a	0f 84 ea 00 00
	00		 je	 $L142861

; 296  : 				Array array ( (ArrayID)arg(2) );

  00390	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00393	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  00397	50		 push	 eax
  00398	8d 4d b0	 lea	 ecx, DWORD PTR $T148545[ebp]
  0039b	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  003a0	51		 push	 ecx
  003a1	8b cc		 mov	 ecx, esp
  003a3	89 65 b4	 mov	 DWORD PTR $T148544[ebp], esp
  003a6	50		 push	 eax
  003a7	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  003ac	8d 4d d8	 lea	 ecx, DWORD PTR _array$142864[ebp]
  003af	e8 00 00 00 00	 call	 ??0Array@@QAE@VMemID@@@Z ; Array::Array
  003b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 297  : 
; 298  : 				Array msg ( (ArrayID)netIncoming.at ( 0 ) );

  003bb	6a 00		 push	 0
  003bd	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netIncoming@@3VSOL_List@@A
  003c2	e8 00 00 00 00	 call	 ?at@SOL_List@@QAEGH@Z	; SOL_List::at
  003c7	50		 push	 eax
  003c8	8d 4d a8	 lea	 ecx, DWORD PTR $T148547[ebp]
  003cb	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  003d0	51		 push	 ecx
  003d1	8b cc		 mov	 ecx, esp
  003d3	89 65 ac	 mov	 DWORD PTR $T148546[ebp], esp
  003d6	50		 push	 eax
  003d7	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  003dc	8d 4d d4	 lea	 ecx, DWORD PTR _msg$142868[ebp]
  003df	e8 00 00 00 00	 call	 ??0Array@@QAE@VMemID@@@Z ; Array::Array
  003e4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 299  : 				netIncoming.del ( msg.dataID() );

  003e8	8d 4d a4	 lea	 ecx, DWORD PTR $T148548[ebp]
  003eb	51		 push	 ecx
  003ec	8d 4d d4	 lea	 ecx, DWORD PTR _msg$142868[ebp]
  003ef	e8 00 00 00 00	 call	 ?dataID@Array@@QAE?AVMemID@@XZ ; Array::dataID
  003f4	8b c8		 mov	 ecx, eax
  003f6	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  003fb	50		 push	 eax
  003fc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netIncoming@@3VSOL_List@@A
  00401	e8 00 00 00 00	 call	 ?del@SOL_List@@QAEHG@Z	; SOL_List::del

; 300  : 
; 301  : 				pm.acc = msg.size();

  00406	8d 4d d4	 lea	 ecx, DWORD PTR _msg$142868[ebp]
  00409	e8 00 00 00 00	 call	 ?size@Array@@QAEGXZ	; Array::size
  0040e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00413	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 302  : 
; 303  : 				// copy the message into the needed buffer
; 304  : 				array.copy ( 0, msg.dataID(), 0, msg.size() );

  00418	8d 4d d4	 lea	 ecx, DWORD PTR _msg$142868[ebp]
  0041b	e8 00 00 00 00	 call	 ?size@Array@@QAEGXZ	; Array::size
  00420	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00425	50		 push	 eax
  00426	6a 00		 push	 0
  00428	8d 55 9c	 lea	 edx, DWORD PTR $T148550[ebp]
  0042b	52		 push	 edx
  0042c	8d 4d d4	 lea	 ecx, DWORD PTR _msg$142868[ebp]
  0042f	e8 00 00 00 00	 call	 ?dataID@Array@@QAE?AVMemID@@XZ ; Array::dataID
  00434	51		 push	 ecx
  00435	8b cc		 mov	 ecx, esp
  00437	89 65 a0	 mov	 DWORD PTR $T148549[ebp], esp
  0043a	50		 push	 eax
  0043b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00440	6a 00		 push	 0
  00442	8d 4d d8	 lea	 ecx, DWORD PTR _array$142864[ebp]
  00445	e8 00 00 00 00	 call	 ?copy@Array@@QAEXHVMemID@@HH@Z ; Array::copy

; 305  : 
; 306  : 				// toss the message
; 307  : 				msg.dataID().Free();

  0044a	8d 45 98	 lea	 eax, DWORD PTR $T148551[ebp]
  0044d	50		 push	 eax
  0044e	8d 4d d4	 lea	 ecx, DWORD PTR _msg$142868[ebp]
  00451	e8 00 00 00 00	 call	 ?dataID@Array@@QAE?AVMemID@@XZ ; Array::dataID
  00456	8b c8		 mov	 ecx, eax
  00458	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 308  : 			} else {

  0045d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00461	8d 4d d4	 lea	 ecx, DWORD PTR _msg$142868[ebp]
  00464	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00469	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00470	8d 4d d8	 lea	 ecx, DWORD PTR _array$142864[ebp]
  00473	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00478	eb 0a		 jmp	 SHORT $L142874
$L142861:

; 309  : 				pm.acc = 0;

  0047a	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0
$L142874:
$L142798:

; 320  : }

  00484	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00487	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
$L148559:
  00492	00 00 00 00	 DD	 $L142848
  00496	00 00 00 00	 DD	 $L142827
  0049a	00 00 00 00	 DD	 $L142798
  0049e	00 00 00 00	 DD	 $L142839
  004a2	00 00 00 00	 DD	 $L142850
  004a6	00 00 00 00	 DD	 $L142841
  004aa	00 00 00 00	 DD	 $L142798
  004ae	00 00 00 00	 DD	 $L142798
  004b2	00 00 00 00	 DD	 $L142849
  004b6	00 00 00 00	 DD	 $L142798
  004ba	00 00 00 00	 DD	 $L142798
  004be	00 00 00 00	 DD	 $L142842
  004c2	00 00 00 00	 DD	 $L142798
  004c6	00 00 00 00	 DD	 $L142860
  004ca	00 00 00 00	 DD	 $L142840
  004ce	00 00 00 00	 DD	 $L142832
  004d2	00 00 00 00	 DD	 $L142801
_TEXT	ENDS
text$x	SEGMENT
$L148552:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _encrypt$142804[ebp]
  00003	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00008	c3		 ret	 0
$L148553:
  00009	8d 4d ec	 lea	 ecx, DWORD PTR _decrypt$142808[ebp]
  0000c	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00011	c3		 ret	 0
$L148554:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR _array$142864[ebp]
  00015	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  0001a	c3		 ret	 0
$L148555:
  0001b	8d 4d d4	 lea	 ecx, DWORD PTR _msg$142868[ebp]
  0001e	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00023	c3		 ret	 0
$L148558:
  00024	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T148557
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KNetwork@@YAXPAF@Z ENDP				; KNetwork
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
EXTRN	_memMgr:DWORD
EXTRN	?Free@MemoryMgr@@QAEXG@Z:NEAR			; MemoryMgr::Free
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Free@MemID@@QAEXXZ PROC NEAR				; MemID::Free, COMDAT

; 32   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 		if (handle) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 1a		 je	 SHORT $L113853

; 34   : 			memMgr->Free(handle);

  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	66 8b 02	 mov	 ax, WORD PTR [edx]
  00019	50		 push	 eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00020	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 35   : 			handle = 0;

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
$L113853:

; 37   : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?Free@MemID@@QAEXXZ ENDP				; MemID::Free
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
PUBLIC	??0FakeArrayID@@QAE@G@Z				; FakeArrayID::FakeArrayID
;	COMDAT ??0ArrayID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ArrayID@@QAE@G@Z PROC NEAR				; ArrayID::ArrayID, COMDAT

; 38   : 	ArrayID(SOL_Handle h) : FakeArrayID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeArrayID@@QAE@G@Z	; FakeArrayID::FakeArrayID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ArrayID@@QAE@G@Z ENDP				; ArrayID::ArrayID
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeArrayID@@QAE@G@Z PROC NEAR			; FakeArrayID::FakeArrayID, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeArrayID@@QAE@G@Z ENDP				; FakeArrayID::FakeArrayID
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@VMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -8
??0Array@@QAE@VMemID@@@Z PROC NEAR			; Array::Array, COMDAT

; 79   : 	Array ( MemID id ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 80   : 		dataID ( id );

  00011	51		 push	 ecx
  00012	8b cc		 mov	 ecx, esp
  00014	8d 45 08	 lea	 eax, DWORD PTR _id$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0001d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?dataID@Array@@QAEXVMemID@@@Z ; Array::dataID

; 81   : 	}

  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0Array@@QAE@VMemID@@@Z ENDP				; Array::Array
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?dataID@Array@@QAE?AVMemID@@XZ PROC NEAR		; Array::dataID, COMDAT

; 96   : 	MemID dataID ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 97   : 		return _dataID;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 98   : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?dataID@Array@@QAE?AVMemID@@XZ ENDP			; Array::dataID
_TEXT	ENDS
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\textid.hpp
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4
??DTextID@@QAEPADXZ PROC NEAR				; TextID::operator*, COMDAT

; 24   : 	char	*operator *() { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return handle ? (char *)MemID::operator*() : ""; 

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	33 c9		 xor	 ecx, ecx
  0000e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0d		 je	 SHORT $L148570
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0001d	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00020	eb 07		 jmp	 SHORT $L148571
$L148570:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L148571:
  00029	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 26   : 	}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??DTextID@@QAEPADXZ ENDP				; TextID::operator*
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
PUBLIC	?KSID@@YAXPAF@Z					; KSID
EXTRN	__imp__malloc:NEAR
_TEXT	SEGMENT
_args$ = 8
?KSID@@YAXPAF@Z PROC NEAR				; KSID

; 323  : KSID(argList) {

  004d6	55		 push	 ebp
  004d7	8b ec		 mov	 ebp, esp
  004d9	51		 push	 ecx

; 324  : 	switch (arg(1)) {

  004da	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  004dd	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  004e1	89 4d fc	 mov	 DWORD PTR -4+[ebp], ecx
  004e4	83 7d fc 00	 cmp	 DWORD PTR -4+[ebp], 0
  004e8	74 02		 je	 SHORT $L142883
  004ea	eb 2d		 jmp	 SHORT $L142880
$L142883:

; 325  : 		case SID_INIT:
; 326  : 			if (SIDTable == NULL) {

  004ec	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SIDTable@@3PAKA, 0 ; SIDTable
  004f3	75 24		 jne	 SHORT $L142884

; 327  : 				maxSID = arg(2);

  004f5	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  004f8	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  004fc	a3 00 00 00 00	 mov	 DWORD PTR ?maxSID@@3IA, eax ; maxSID

; 328  : 				SIDTable = (unsigned long *)malloc ( maxSID * sizeof ( unsigned long ) );

  00501	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?maxSID@@3IA ; maxSID
  00507	c1 e1 02	 shl	 ecx, 2
  0050a	51		 push	 ecx
  0050b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00511	83 c4 04	 add	 esp, 4
  00514	a3 00 00 00 00	 mov	 DWORD PTR ?SIDTable@@3PAKA, eax ; SIDTable
$L142884:
$L142880:

; 348  : }

  00519	8b e5		 mov	 esp, ebp
  0051b	5d		 pop	 ebp
  0051c	c3		 ret	 0
?KSID@@YAXPAF@Z ENDP					; KSID
_TEXT	ENDS
EXTRN	__imp__isdigit:NEAR
EXTRN	_connect@12:NEAR
EXTRN	_htons@4:NEAR
EXTRN	__imp__calloc:NEAR
EXTRN	__imp__free:NEAR
EXTRN	_setsockopt@20:NEAR
EXTRN	_socket@12:NEAR
EXTRN	_gethostbyname@4:NEAR
EXTRN	_WSASetLastError@4:NEAR
EXTRN	_WSAGetLastError@0:NEAR
EXTRN	?Fatal@MsgMgr@@QAAXPADZZ:NEAR			; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
EXTRN	__imp__strchr:NEAR
EXTRN	__imp__strdup:NEAR
_DATA	SEGMENT
$SG142899 DB	'NETERR: Socket creation has failed: Please make sure tha'
	DB	't you are connected to your service provider.', 00H
	ORG $+2
$SG142908 DB	'NETERR: Incomplete numerical address.', 00H
	ORG $+2
$SG142911 DB	'NETERR: Incomplete numerical address.', 00H
	ORG $+2
$SG142914 DB	'NETERR: Incomplete numerical address.', 00H
	ORG $+2
$SG142916 DB	'NETERR: Incomplete numerical address.', 00H
	ORG $+2
$SG142921 DB	'-no description available-', 00H
	ORG $+1
$SG142928 DB	'WSAStartup not called sucessfully.', 00H
	ORG $+1
$SG142930 DB	'The network subsystem has failed.', 00H
	ORG $+2
$SG142932 DB	'Could not find an authoritative answer', 00H
	ORG $+1
$SG142934 DB	'Could not find a non-authoritative host, or DNS server f'
	DB	'ailure.', 00H
$SG142936 DB	'A nonrecoverable error occurred.', 00H
	ORG $+3
$SG142938 DB	'Valid host name, but no record found.', 00H
	ORG $+2
$SG142940 DB	'A blocking call is in progress, or the service provider '
	DB	'is still processing a callback function.', 00H
	ORG $+3
$SG142942 DB	'Memory fault', 00H
	ORG $+3
$SG142944 DB	'A blocking call was cancelled', 00H
	ORG $+2
$SG142945 DB	'NETERR: Could not find DNS entry for %s. Error: [%d]%s', 00H
_DATA	ENDS
_TEXT	SEGMENT
_host$ = 8
_port$ = 12
_lingerState$142900 = -8
_str$142903 = -16
_ptr$142904 = -12
_index$142905 = -20
_hostInfo$142918 = -28
_errorMessage$142920 = -36
_err$142922 = -32
_hostAddr$142946 = -24
_address$142948 = -4
_nError$142953 = -40
?NetConnect@@YAHPADH@Z PROC NEAR			; NetConnect

; 354  : int NetConnect ( char *host, int port ) {

  0051d	55		 push	 ebp
  0051e	8b ec		 mov	 ebp, esp
  00520	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 355  : #ifdef DUMP_MESSAGE
; 356  : 		msgMgr->Mono( "Connectting to %s #%d\n", host, port );
; 357  : #endif
; 358  : 
; 359  :   	netState = _NET_RCVSIZE;

  00523	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?netState@@3HA, 0 ; netState

; 360  : 
; 361  : 	NetDisconnect();

  0052d	e8 00 00 00 00	 call	 ?NetDisconnect@@YAHXZ	; NetDisconnect

; 362  : 
; 363  : 	memset ( &netAddress, 0, sizeof ( netAddress ) );

  00532	6a 10		 push	 16			; 00000010H
  00534	6a 00		 push	 0
  00536	68 00 00 00 00	 push	 OFFSET FLAT:?netAddress@@3Usockaddr_in@@A ; netAddress
  0053b	e8 00 00 00 00	 call	 _memset
  00540	83 c4 0c	 add	 esp, 12			; 0000000cH

; 364  : 
; 365  : 	if ( netDevice == _NET_SOCKET ) {

  00543	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?netDevice@@3HA, 0 ; netDevice
  0054a	0f 85 50 03 00
	00		 jne	 $L142897

; 366  : 		netSocket = socket ( AF_INET, SOCK_STREAM, 0 );

  00550	6a 00		 push	 0
  00552	6a 01		 push	 1
  00554	6a 02		 push	 2
  00556	e8 00 00 00 00	 call	 _socket@12
  0055b	a3 00 00 00 00	 mov	 DWORD PTR ?netSocket@@3IA, eax ; netSocket

; 367  : 
; 368  : 		if ( netSocket == -1 )

  00560	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?netSocket@@3IA, -1 ; netSocket
  00567	75 1c		 jne	 SHORT $L142898

; 369  : 			msgMgr->Fatal ( "NETERR: Socket creation has failed: Please make sure that you are connected to your service provider.", host, port );

  00569	8b 45 0c	 mov	 eax, DWORD PTR _port$[ebp]
  0056c	50		 push	 eax
  0056d	8b 4d 08	 mov	 ecx, DWORD PTR _host$[ebp]
  00570	51		 push	 ecx
  00571	68 00 00 00 00	 push	 OFFSET FLAT:$SG142899
  00576	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0057c	52		 push	 edx
  0057d	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00582	83 c4 10	 add	 esp, 16			; 00000010H
$L142898:

; 372  : 		lingerState.l_onoff = 1;

  00585	66 c7 45 f8 01
	00		 mov	 WORD PTR _lingerState$142900[ebp], 1

; 373  : 		lingerState.l_linger = 0;

  0058b	66 c7 45 fa 00
	00		 mov	 WORD PTR _lingerState$142900[ebp+2], 0

; 374  : 
; 375  : 		setsockopt ( netSocket, SOL_SOCKET, SO_LINGER, (char *)&lingerState, sizeof ( lingerState ) );

  00591	6a 04		 push	 4
  00593	8d 45 f8	 lea	 eax, DWORD PTR _lingerState$142900[ebp]
  00596	50		 push	 eax
  00597	68 80 00 00 00	 push	 128			; 00000080H
  0059c	68 ff ff 00 00	 push	 65535			; 0000ffffH
  005a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?netSocket@@3IA ; netSocket
  005a7	51		 push	 ecx
  005a8	e8 00 00 00 00	 call	 _setsockopt@20

; 376  : 
; 377  : 		netAddress.sin_port				= htons ( port );

  005ad	66 8b 55 0c	 mov	 dx, WORD PTR _port$[ebp]
  005b1	52		 push	 edx
  005b2	e8 00 00 00 00	 call	 _htons@4
  005b7	66 a3 02 00 00
	00		 mov	 WORD PTR ?netAddress@@3Usockaddr_in@@A+2, ax

; 378  : 		netAddress.sin_family 			= AF_INET;

  005bd	66 c7 05 00 00
	00 00 02 00	 mov	 WORD PTR ?netAddress@@3Usockaddr_in@@A, 2

; 379  : 
; 380  : 		if ( isdigit ( *host ) ) {

  005c6	8b 45 08	 mov	 eax, DWORD PTR _host$[ebp]
  005c9	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  005cc	51		 push	 ecx
  005cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isdigit
  005d3	83 c4 04	 add	 esp, 4
  005d6	85 c0		 test	 eax, eax
  005d8	0f 84 45 01 00
	00		 je	 $L142902

; 381  : 			char *str = strdup ( host );

  005de	8b 55 08	 mov	 edx, DWORD PTR _host$[ebp]
  005e1	52		 push	 edx
  005e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strdup
  005e8	83 c4 04	 add	 esp, 4
  005eb	89 45 f0	 mov	 DWORD PTR _str$142903[ebp], eax

; 382  : 			char *ptr = str;

  005ee	8b 45 f0	 mov	 eax, DWORD PTR _str$142903[ebp]
  005f1	89 45 f4	 mov	 DWORD PTR _ptr$142904[ebp], eax

; 383  : 
; 384  : 			char *index = strchr ( ptr, '.' );

  005f4	6a 2e		 push	 46			; 0000002eH
  005f6	8b 4d f4	 mov	 ecx, DWORD PTR _ptr$142904[ebp]
  005f9	51		 push	 ecx
  005fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00600	83 c4 08	 add	 esp, 8
  00603	89 45 ec	 mov	 DWORD PTR _index$142905[ebp], eax

; 385  : 			
; 386  : 			if ( index ) {

  00606	83 7d ec 00	 cmp	 DWORD PTR _index$142905[ebp], 0
  0060a	74 23		 je	 SHORT $L142906

; 387  : 				*index = 0;

  0060c	8b 55 ec	 mov	 edx, DWORD PTR _index$142905[ebp]
  0060f	c6 02 00	 mov	 BYTE PTR [edx], 0

; 388  : 				netAddress.sin_addr.s_net = atoi ( ptr );

  00612	8b 45 f4	 mov	 eax, DWORD PTR _ptr$142904[ebp]
  00615	50		 push	 eax
  00616	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0061c	83 c4 04	 add	 esp, 4
  0061f	a2 04 00 00 00	 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+4, al

; 389  : 				ptr = index + 1;

  00624	8b 4d ec	 mov	 ecx, DWORD PTR _index$142905[ebp]
  00627	83 c1 01	 add	 ecx, 1
  0062a	89 4d f4	 mov	 DWORD PTR _ptr$142904[ebp], ecx

; 390  : 			} else {

  0062d	eb 14		 jmp	 SHORT $L142907
$L142906:

; 391  : 				msgMgr->Fatal ( "NETERR: Incomplete numerical address." );

  0062f	68 00 00 00 00	 push	 OFFSET FLAT:$SG142908
  00634	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0063a	52		 push	 edx
  0063b	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00640	83 c4 08	 add	 esp, 8
$L142907:

; 393  : 
; 394  : 			index = strchr ( ptr, '.' );

  00643	6a 2e		 push	 46			; 0000002eH
  00645	8b 45 f4	 mov	 eax, DWORD PTR _ptr$142904[ebp]
  00648	50		 push	 eax
  00649	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  0064f	83 c4 08	 add	 esp, 8
  00652	89 45 ec	 mov	 DWORD PTR _index$142905[ebp], eax

; 395  : 			
; 396  : 			if ( index ) {

  00655	83 7d ec 00	 cmp	 DWORD PTR _index$142905[ebp], 0
  00659	74 23		 je	 SHORT $L142909

; 397  : 				*index = 0;

  0065b	8b 4d ec	 mov	 ecx, DWORD PTR _index$142905[ebp]
  0065e	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 398  : 				netAddress.sin_addr.s_host = atoi ( ptr );

  00661	8b 55 f4	 mov	 edx, DWORD PTR _ptr$142904[ebp]
  00664	52		 push	 edx
  00665	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0066b	83 c4 04	 add	 esp, 4
  0066e	a2 05 00 00 00	 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+5, al

; 399  : 				ptr = index + 1;

  00673	8b 45 ec	 mov	 eax, DWORD PTR _index$142905[ebp]
  00676	83 c0 01	 add	 eax, 1
  00679	89 45 f4	 mov	 DWORD PTR _ptr$142904[ebp], eax

; 400  : 			} else {

  0067c	eb 14		 jmp	 SHORT $L142910
$L142909:

; 401  : 				msgMgr->Fatal ( "NETERR: Incomplete numerical address." );

  0067e	68 00 00 00 00	 push	 OFFSET FLAT:$SG142911
  00683	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00689	51		 push	 ecx
  0068a	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  0068f	83 c4 08	 add	 esp, 8
$L142910:

; 403  : 
; 404  : 			index = strchr ( ptr, '.' );

  00692	6a 2e		 push	 46			; 0000002eH
  00694	8b 55 f4	 mov	 edx, DWORD PTR _ptr$142904[ebp]
  00697	52		 push	 edx
  00698	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  0069e	83 c4 08	 add	 esp, 8
  006a1	89 45 ec	 mov	 DWORD PTR _index$142905[ebp], eax

; 405  : 			
; 406  : 			if ( index ) {

  006a4	83 7d ec 00	 cmp	 DWORD PTR _index$142905[ebp], 0
  006a8	74 23		 je	 SHORT $L142912

; 407  : 				*index = 0;

  006aa	8b 45 ec	 mov	 eax, DWORD PTR _index$142905[ebp]
  006ad	c6 00 00	 mov	 BYTE PTR [eax], 0

; 408  : 				netAddress.sin_addr.s_lh = atoi ( ptr );

  006b0	8b 4d f4	 mov	 ecx, DWORD PTR _ptr$142904[ebp]
  006b3	51		 push	 ecx
  006b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  006ba	83 c4 04	 add	 esp, 4
  006bd	a2 06 00 00 00	 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+6, al

; 409  : 				ptr = index + 1;

  006c2	8b 55 ec	 mov	 edx, DWORD PTR _index$142905[ebp]
  006c5	83 c2 01	 add	 edx, 1
  006c8	89 55 f4	 mov	 DWORD PTR _ptr$142904[ebp], edx

; 410  : 			} else {

  006cb	eb 13		 jmp	 SHORT $L142913
$L142912:

; 411  : 				msgMgr->Fatal ( "NETERR: Incomplete numerical address." );

  006cd	68 00 00 00 00	 push	 OFFSET FLAT:$SG142914
  006d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  006d7	50		 push	 eax
  006d8	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  006dd	83 c4 08	 add	 esp, 8
$L142913:

; 413  : 
; 414  : 			netAddress.sin_addr.s_impno = atoi ( ptr );

  006e0	8b 4d f4	 mov	 ecx, DWORD PTR _ptr$142904[ebp]
  006e3	51		 push	 ecx
  006e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  006ea	83 c4 04	 add	 esp, 4
  006ed	a2 07 00 00 00	 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+7, al

; 415  : 
; 416  : 			if ( !netAddress.sin_addr.s_impno )

  006f2	33 d2		 xor	 edx, edx
  006f4	8a 15 07 00 00
	00		 mov	 dl, BYTE PTR ?netAddress@@3Usockaddr_in@@A+7
  006fa	85 d2		 test	 edx, edx
  006fc	75 13		 jne	 SHORT $L142915

; 417  : 				msgMgr->Fatal ( "NETERR: Incomplete numerical address." );

  006fe	68 00 00 00 00	 push	 OFFSET FLAT:$SG142916
  00703	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00708	50		 push	 eax
  00709	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  0070e	83 c4 08	 add	 esp, 8
$L142915:

; 418  : 			
; 419  : 			free ( str );

  00711	8b 4d f0	 mov	 ecx, DWORD PTR _str$142903[ebp]
  00714	51		 push	 ecx
  00715	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0071b	83 c4 04	 add	 esp, 4

; 420  : 		} else {

  0071e	e9 2b 01 00 00	 jmp	 $L142917
$L142902:

; 421  : 			struct hostent FAR *hostInfo;
; 422  : 
; 423  : 			hostInfo = gethostbyname ( host );

  00723	8b 55 08	 mov	 edx, DWORD PTR _host$[ebp]
  00726	52		 push	 edx
  00727	e8 00 00 00 00	 call	 _gethostbyname@4
  0072c	89 45 e4	 mov	 DWORD PTR _hostInfo$142918[ebp], eax

; 424  : 
; 425  : 			if ( !hostInfo ) {

  0072f	83 7d e4 00	 cmp	 DWORD PTR _hostInfo$142918[ebp], 0
  00733	0f 85 dc 00 00
	00		 jne	 $L142919

; 426  : 				const char* errorMessage = "-no description available-";

  00739	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142921

; 427  : 
; 428  : 				int err = WSAGetLastError();

  00740	e8 00 00 00 00	 call	 _WSAGetLastError@0
  00745	89 45 e0	 mov	 DWORD PTR _err$142922[ebp], eax

; 429  : 
; 430  : 				switch( err ) {

  00748	8b 45 e0	 mov	 eax, DWORD PTR _err$142922[ebp]
  0074b	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  0074e	81 7d d4 6d 27
	00 00		 cmp	 DWORD PTR -44+[ebp], 10093 ; 0000276dH
  00755	7f 2d		 jg	 SHORT $L148577
  00757	81 7d d4 6d 27
	00 00		 cmp	 DWORD PTR -44+[ebp], 10093 ; 0000276dH
  0075e	74 40		 je	 SHORT $L142927
  00760	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  00763	81 e9 14 27 00
	00		 sub	 ecx, 10004		; 00002714H
  00769	89 4d d4	 mov	 DWORD PTR -44+[ebp], ecx
  0076c	83 7d d4 2e	 cmp	 DWORD PTR -44+[ebp], 46	; 0000002eH
  00770	77 7d		 ja	 SHORT $L142924
  00772	8b 45 d4	 mov	 eax, DWORD PTR -44+[ebp]
  00775	33 d2		 xor	 edx, edx
  00777	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR $L148578[eax]
  0077d	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L148579[edx*4]
$L148577:
  00784	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  00787	81 e9 f9 2a 00
	00		 sub	 ecx, 11001		; 00002af9H
  0078d	89 4d d4	 mov	 DWORD PTR -44+[ebp], ecx
  00790	83 7d d4 03	 cmp	 DWORD PTR -44+[ebp], 3
  00794	77 59		 ja	 SHORT $L142924
  00796	8b 55 d4	 mov	 edx, DWORD PTR -44+[ebp]
  00799	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L148580[edx*4]
$L142927:

; 431  : 					case WSANOTINITIALISED:
; 432  : 						errorMessage = "WSAStartup not called sucessfully."; break;

  007a0	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142928
  007a7	eb 46		 jmp	 SHORT $L142924
$L142929:

; 433  : 					case WSAENETDOWN:
; 434  : 						errorMessage = "The network subsystem has failed."; break;

  007a9	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142930
  007b0	eb 3d		 jmp	 SHORT $L142924
$L142931:

; 435  : 					case WSAHOST_NOT_FOUND:
; 436  : 						errorMessage = "Could not find an authoritative answer"; break;

  007b2	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142932
  007b9	eb 34		 jmp	 SHORT $L142924
$L142933:

; 437  : 					case WSATRY_AGAIN:
; 438  : 						errorMessage = "Could not find a non-authoritative host, or DNS server failure."; break;

  007bb	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142934
  007c2	eb 2b		 jmp	 SHORT $L142924
$L142935:

; 439  : 					case WSANO_RECOVERY:
; 440  : 						errorMessage = "A nonrecoverable error occurred."; break;

  007c4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142936
  007cb	eb 22		 jmp	 SHORT $L142924
$L142937:

; 441  : 					case WSANO_DATA:
; 442  : 						errorMessage = "Valid host name, but no record found."; break;

  007cd	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142938
  007d4	eb 19		 jmp	 SHORT $L142924
$L142939:

; 443  : 					case WSAEINPROGRESS:
; 444  : 						errorMessage = "A blocking call is in progress, or the service provider is still processing a callback function."; break;

  007d6	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142940
  007dd	eb 10		 jmp	 SHORT $L142924
$L142941:

; 445  : 					case WSAEFAULT:
; 446  : 						errorMessage = "Memory fault"; break;

  007df	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142942
  007e6	eb 07		 jmp	 SHORT $L142924
$L142943:

; 447  : 					case WSAEINTR:
; 448  : 						errorMessage = "A blocking call was cancelled"; break;

  007e8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _errorMessage$142920[ebp], OFFSET FLAT:$SG142944
$L142924:

; 450  : 
; 451  : 				WSASetLastError( 0 );

  007ef	6a 00		 push	 0
  007f1	e8 00 00 00 00	 call	 _WSASetLastError@4

; 452  : 				
; 453  : 				msgMgr->Fatal ( "NETERR: Could not find DNS entry for %s. Error: [%d]%s", host, err, errorMessage );

  007f6	8b 45 dc	 mov	 eax, DWORD PTR _errorMessage$142920[ebp]
  007f9	50		 push	 eax
  007fa	8b 4d e0	 mov	 ecx, DWORD PTR _err$142922[ebp]
  007fd	51		 push	 ecx
  007fe	8b 55 08	 mov	 edx, DWORD PTR _host$[ebp]
  00801	52		 push	 edx
  00802	68 00 00 00 00	 push	 OFFSET FLAT:$SG142945
  00807	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0080c	50		 push	 eax
  0080d	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00812	83 c4 14	 add	 esp, 20			; 00000014H
$L142919:

; 455  : 
; 456  : 			char far *hostAddr = (char far *) hostInfo->h_addr;

  00815	8b 4d e4	 mov	 ecx, DWORD PTR _hostInfo$142918[ebp]
  00818	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0081b	8b 02		 mov	 eax, DWORD PTR [edx]
  0081d	89 45 e8	 mov	 DWORD PTR _hostAddr$142946[ebp], eax

; 457  : 
; 458  : 			netAddress.sin_addr.s_net = hostAddr[0];

  00820	8b 4d e8	 mov	 ecx, DWORD PTR _hostAddr$142946[ebp]
  00823	8a 11		 mov	 dl, BYTE PTR [ecx]
  00825	88 15 04 00 00
	00		 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+4, dl

; 459  : 			netAddress.sin_addr.s_host = hostAddr[1];

  0082b	8b 45 e8	 mov	 eax, DWORD PTR _hostAddr$142946[ebp]
  0082e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00831	88 0d 05 00 00
	00		 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+5, cl

; 460  : 			netAddress.sin_addr.s_lh = hostAddr[2];

  00837	8b 55 e8	 mov	 edx, DWORD PTR _hostAddr$142946[ebp]
  0083a	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  0083d	a2 06 00 00 00	 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+6, al

; 461  : 			netAddress.sin_addr.s_impno = hostAddr[3];

  00842	8b 4d e8	 mov	 ecx, DWORD PTR _hostAddr$142946[ebp]
  00845	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  00848	88 15 07 00 00
	00		 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+7, dl
$L142917:

; 463  : 
; 464  : 		sockaddr *address = (sockaddr *)calloc ( 1, sizeof ( sockaddr ) );

  0084e	6a 10		 push	 16			; 00000010H
  00850	6a 01		 push	 1
  00852	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00858	83 c4 08	 add	 esp, 8
  0085b	89 45 fc	 mov	 DWORD PTR _address$142948[ebp], eax

; 465  : 		memcpy ( address, &netAddress, sizeof ( sockaddr ) );

  0085e	6a 10		 push	 16			; 00000010H
  00860	68 00 00 00 00	 push	 OFFSET FLAT:?netAddress@@3Usockaddr_in@@A ; netAddress
  00865	8b 45 fc	 mov	 eax, DWORD PTR _address$142948[ebp]
  00868	50		 push	 eax
  00869	e8 00 00 00 00	 call	 _memcpy
  0086e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 466  : 
; 467  : 		// set the socket to make internet connections
; 468  : 		if ( connect ( netSocket, address, sizeof ( netAddress ) ) < 0 ) {

  00871	6a 10		 push	 16			; 00000010H
  00873	8b 4d fc	 mov	 ecx, DWORD PTR _address$142948[ebp]
  00876	51		 push	 ecx
  00877	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?netSocket@@3IA ; netSocket
  0087d	52		 push	 edx
  0087e	e8 00 00 00 00	 call	 _connect@12
  00883	85 c0		 test	 eax, eax
  00885	7d 0c		 jge	 SHORT $L142952

; 469  : 			int nError = WSAGetLastError();

  00887	e8 00 00 00 00	 call	 _WSAGetLastError@0
  0088c	89 45 d8	 mov	 DWORD PTR _nError$142953[ebp], eax

; 470  : 
; 471  : 			// instead of fataling, return a 0 so sci code can deal with it dougo 12/9/99
; 472  : 			return 0;

  0088f	33 c0		 xor	 eax, eax
  00891	eb 12		 jmp	 SHORT $L142896
$L142952:

; 474  : 
; 475  : #ifdef DUMP_MESSAGE
; 476  : 		msgMgr->Mono( "Connect to %s #%d\n", host, port );
; 477  : #endif
; 478  : 
; 479  : 		free ( address );

  00893	8b 45 fc	 mov	 eax, DWORD PTR _address$142948[ebp]
  00896	50		 push	 eax
  00897	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0089d	83 c4 04	 add	 esp, 4
$L142897:

; 481  : 
; 482  : 	return 1;

  008a0	b8 01 00 00 00	 mov	 eax, 1
$L142896:

; 483  : }

  008a5	8b e5		 mov	 esp, ebp
  008a7	5d		 pop	 ebp
  008a8	c3		 ret	 0
$L148579:
  008a9	00 00 00 00	 DD	 $L142943
  008ad	00 00 00 00	 DD	 $L142941
  008b1	00 00 00 00	 DD	 $L142939
  008b5	00 00 00 00	 DD	 $L142929
  008b9	00 00 00 00	 DD	 $L142924
$L148578:
  008bd	00		 DB	 0
  008be	04		 DB	 4
  008bf	04		 DB	 4
  008c0	04		 DB	 4
  008c1	04		 DB	 4
  008c2	04		 DB	 4
  008c3	04		 DB	 4
  008c4	04		 DB	 4
  008c5	04		 DB	 4
  008c6	04		 DB	 4
  008c7	01		 DB	 1
  008c8	04		 DB	 4
  008c9	04		 DB	 4
  008ca	04		 DB	 4
  008cb	04		 DB	 4
  008cc	04		 DB	 4
  008cd	04		 DB	 4
  008ce	04		 DB	 4
  008cf	04		 DB	 4
  008d0	04		 DB	 4
  008d1	04		 DB	 4
  008d2	04		 DB	 4
  008d3	04		 DB	 4
  008d4	04		 DB	 4
  008d5	04		 DB	 4
  008d6	04		 DB	 4
  008d7	04		 DB	 4
  008d8	04		 DB	 4
  008d9	04		 DB	 4
  008da	04		 DB	 4
  008db	04		 DB	 4
  008dc	04		 DB	 4
  008dd	02		 DB	 2
  008de	04		 DB	 4
  008df	04		 DB	 4
  008e0	04		 DB	 4
  008e1	04		 DB	 4
  008e2	04		 DB	 4
  008e3	04		 DB	 4
  008e4	04		 DB	 4
  008e5	04		 DB	 4
  008e6	04		 DB	 4
  008e7	04		 DB	 4
  008e8	04		 DB	 4
  008e9	04		 DB	 4
  008ea	04		 DB	 4
  008eb	03		 DB	 3
$L148580:
  008ec	00 00 00 00	 DD	 $L142931
  008f0	00 00 00 00	 DD	 $L142933
  008f4	00 00 00 00	 DD	 $L142935
  008f8	00 00 00 00	 DD	 $L142937
?NetConnect@@YAHPADH@Z ENDP				; NetConnect
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+1
$SG142963 DB	'NETERR: Socket creation has failed: Please make sure tha'
	DB	't you are connected to your service provider.', 00H
	ORG $+2
$SG142969 DB	'NETERR: Could not make connection with ''%d.%d.%d.%d %d '
	DB	'[0x%08x]''.  The server is probably down, try again in 10 min'
	DB	'utes.', 00H
_DATA	ENDS
_TEXT	SEGMENT
_a$ = 8
_b$ = 12
_c$ = 16
_d$ = 20
_port$ = 24
_lingerState$142964 = -4
_nError$142968 = -8
?NetConnectIP@@YAHHHHHH@Z PROC NEAR			; NetConnectIP

; 485  : int NetConnectIP ( int a, int b, int c, int d, int port ) {

  008fc	55		 push	 ebp
  008fd	8b ec		 mov	 ebp, esp
  008ff	83 ec 08	 sub	 esp, 8

; 486  : 	netState = _NET_RCVSIZE;

  00902	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?netState@@3HA, 0 ; netState

; 487  : 
; 488  : 	NetDisconnect();

  0090c	e8 00 00 00 00	 call	 ?NetDisconnect@@YAHXZ	; NetDisconnect

; 489  : 
; 490  : 	if ( netDevice == _NET_SOCKET ) {

  00911	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?netDevice@@3HA, 0 ; netDevice
  00918	0f 85 df 00 00
	00		 jne	 $L142967

; 491  : 		netSocket = socket ( AF_INET, SOCK_STREAM, 0 );

  0091e	6a 00		 push	 0
  00920	6a 01		 push	 1
  00922	6a 02		 push	 2
  00924	e8 00 00 00 00	 call	 _socket@12
  00929	a3 00 00 00 00	 mov	 DWORD PTR ?netSocket@@3IA, eax ; netSocket

; 492  : 
; 493  : 		if ( netSocket == -1 )

  0092e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?netSocket@@3IA, -1 ; netSocket
  00935	75 13		 jne	 SHORT $L142962

; 494  : 			msgMgr->Fatal ( "NETERR: Socket creation has failed: Please make sure that you are connected to your service provider." );

  00937	68 00 00 00 00	 push	 OFFSET FLAT:$SG142963
  0093c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00941	50		 push	 eax
  00942	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  00947	83 c4 08	 add	 esp, 8
$L142962:

; 497  : 		lingerState.l_onoff = 1;

  0094a	66 c7 45 fc 01
	00		 mov	 WORD PTR _lingerState$142964[ebp], 1

; 498  : 		lingerState.l_linger = 0;

  00950	66 c7 45 fe 00
	00		 mov	 WORD PTR _lingerState$142964[ebp+2], 0

; 499  : 
; 500  : 		setsockopt ( netSocket, SOL_SOCKET, SO_LINGER, (char *)&lingerState, sizeof ( lingerState ) );

  00956	6a 04		 push	 4
  00958	8d 4d fc	 lea	 ecx, DWORD PTR _lingerState$142964[ebp]
  0095b	51		 push	 ecx
  0095c	68 80 00 00 00	 push	 128			; 00000080H
  00961	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00966	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?netSocket@@3IA ; netSocket
  0096c	52		 push	 edx
  0096d	e8 00 00 00 00	 call	 _setsockopt@20

; 501  : 
; 502  : 		netAddress.sin_port				= htons ( port );

  00972	66 8b 45 18	 mov	 ax, WORD PTR _port$[ebp]
  00976	50		 push	 eax
  00977	e8 00 00 00 00	 call	 _htons@4
  0097c	66 a3 02 00 00
	00		 mov	 WORD PTR ?netAddress@@3Usockaddr_in@@A+2, ax

; 503  : 		netAddress.sin_family 			= AF_INET;

  00982	66 c7 05 00 00
	00 00 02 00	 mov	 WORD PTR ?netAddress@@3Usockaddr_in@@A, 2

; 504  : 
; 505  : 		netAddress.sin_addr.s_net = a;

  0098b	8a 4d 08	 mov	 cl, BYTE PTR _a$[ebp]
  0098e	88 0d 04 00 00
	00		 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+4, cl

; 506  : 		netAddress.sin_addr.s_host = b;

  00994	8a 55 0c	 mov	 dl, BYTE PTR _b$[ebp]
  00997	88 15 05 00 00
	00		 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+5, dl

; 507  : 		netAddress.sin_addr.s_lh = c;

  0099d	8a 45 10	 mov	 al, BYTE PTR _c$[ebp]
  009a0	a2 06 00 00 00	 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+6, al

; 508  : 		netAddress.sin_addr.s_impno = d;

  009a5	8a 4d 14	 mov	 cl, BYTE PTR _d$[ebp]
  009a8	88 0d 07 00 00
	00		 mov	 BYTE PTR ?netAddress@@3Usockaddr_in@@A+7, cl

; 509  : 
; 510  : 		// set the socket to make internet connections
; 511  : 		if ( connect ( netSocket, (sockaddr *)&netAddress, sizeof ( netAddress ) ) < 0 ) {

  009ae	6a 10		 push	 16			; 00000010H
  009b0	68 00 00 00 00	 push	 OFFSET FLAT:?netAddress@@3Usockaddr_in@@A ; netAddress
  009b5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?netSocket@@3IA ; netSocket
  009bb	52		 push	 edx
  009bc	e8 00 00 00 00	 call	 _connect@12
  009c1	85 c0		 test	 eax, eax
  009c3	7d 38		 jge	 SHORT $L142967

; 512  : 			int nError = WSAGetLastError();

  009c5	e8 00 00 00 00	 call	 _WSAGetLastError@0
  009ca	89 45 f8	 mov	 DWORD PTR _nError$142968[ebp], eax

; 513  : 
; 514  : 			msgMgr->Fatal ( "NETERR: Could not make connection with '%d.%d.%d.%d %d [0x%08x]'.  The server is probably down, try again in 10 minutes.", a, b, c, d, port, nError );

  009cd	8b 45 f8	 mov	 eax, DWORD PTR _nError$142968[ebp]
  009d0	50		 push	 eax
  009d1	8b 4d 18	 mov	 ecx, DWORD PTR _port$[ebp]
  009d4	51		 push	 ecx
  009d5	8b 55 14	 mov	 edx, DWORD PTR _d$[ebp]
  009d8	52		 push	 edx
  009d9	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  009dc	50		 push	 eax
  009dd	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  009e0	51		 push	 ecx
  009e1	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  009e4	52		 push	 edx
  009e5	68 00 00 00 00	 push	 OFFSET FLAT:$SG142969
  009ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  009ef	50		 push	 eax
  009f0	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  009f5	83 c4 20	 add	 esp, 32			; 00000020H

; 515  : 			NetDisconnect();

  009f8	e8 00 00 00 00	 call	 ?NetDisconnect@@YAHXZ	; NetDisconnect
$L142967:

; 522  : 
; 523  : 	return 1;

  009fd	b8 01 00 00 00	 mov	 eax, 1

; 524  : }

  00a02	8b e5		 mov	 esp, ebp
  00a04	5d		 pop	 ebp
  00a05	c3		 ret	 0
?NetConnectIP@@YAHHHHHH@Z ENDP				; NetConnectIP
_TEXT	ENDS
EXTRN	_closesocket@4:NEAR
EXTRN	?bEncrypt@@3KA:DWORD				; bEncrypt
_TEXT	SEGMENT
?NetDisconnect@@YAHXZ PROC NEAR				; NetDisconnect

; 526  : int NetDisconnect ( void ) {

  00a06	55		 push	 ebp
  00a07	8b ec		 mov	 ebp, esp

; 527  : 	if ( netDevice == _NET_SOCKET ) {

  00a09	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?netDevice@@3HA, 0 ; netDevice
  00a10	75 1e		 jne	 SHORT $L142974

; 528  : 		if ( netSocket != -1 ) {

  00a12	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?netSocket@@3IA, -1 ; netSocket
  00a19	74 15		 je	 SHORT $L142974

; 529  : 			closesocket ( netSocket );

  00a1b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?netSocket@@3IA ; netSocket
  00a20	50		 push	 eax
  00a21	e8 00 00 00 00	 call	 _closesocket@4

; 530  : 			netSocket = -1;

  00a26	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?netSocket@@3IA, -1 ; netSocket
$L142974:

; 533  : 
; 534  : 	bEncrypt = 0;

  00a30	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bEncrypt@@3KA, 0 ; bEncrypt

; 535  : 
; 536  : 	return 1;

  00a3a	b8 01 00 00 00	 mov	 eax, 1

; 537  : }

  00a3f	5d		 pop	 ebp
  00a40	c3		 ret	 0
?NetDisconnect@@YAHXZ ENDP				; NetDisconnect
_TEXT	ENDS
PUBLIC	??0CSCI_LongInt@@QAE@XZ				; CSCI_LongInt::CSCI_LongInt
PUBLIC	??0CSCI_LongInt@@QAE@G@Z			; CSCI_LongInt::CSCI_LongInt
PUBLIC	?get_nValue@CSCI_LongInt@@QAEHXZ		; CSCI_LongInt::get_nValue
PUBLIC	??0ArrayID@@QAE@XZ				; ArrayID::ArrayID
PUBLIC	?Data@ArrayID@@QAEPAXXZ				; ArrayID::Data
PUBLIC	??0Array@@QAE@HW4ArrayType@@@Z			; Array::Array
PUBLIC	??0CSCI_WorldObject@@QAE@XZ			; CSCI_WorldObject::CSCI_WorldObject
PUBLIC	??0CSCI_WorldObject@@QAE@G@Z			; CSCI_WorldObject::CSCI_WorldObject
PUBLIC	?get_nServID@CSCI_WorldObject@@QAEHXZ		; CSCI_WorldObject::get_nServID
EXTRN	?addToEnd@SOL_List@@QAEXG@Z:NEAR		; SOL_List::addToEnd
EXTRN	_strlen:NEAR
xdata$x	SEGMENT
$T148594 DD	019930520H
	DD	01H
	DD	FLAT:$T148598
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T148598 DD	0ffffffffH
	DD	FLAT:$L148592
xdata$x	ENDS
_TEXT	SEGMENT
$T148584 = -84
$T148585 = -88
$T148586 = -92
$T148587 = -96
$T148588 = -100
$T148589 = -104
$T148590 = -108
$T148591 = -112
__$EHRec$ = -12
_args$ = 8
_size$ = 12
_i$ = -48
_n$ = -68
_len$ = -56
_val$ = -16
_lastSize$ = -72
_sp$ = -24
_tp$ = -36
_pp$ = -32
_ar$ = -60
_nLong$ = -40
_nObj$ = -64
_pMsgData$ = -20
_pTmp$143045 = -76
_pTmp$143052 = -80
_message$ = -44
?NetSend@@YAHPAFH@Z PROC NEAR				; NetSend

; 539  : int NetSend ( argList, int size ) {

  00a41	55		 push	 ebp
  00a42	8b ec		 mov	 ebp, esp
  00a44	6a ff		 push	 -1
  00a46	68 00 00 00 00	 push	 $L148595
  00a4b	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00a51	50		 push	 eax
  00a52	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00a59	83 ec 68	 sub	 esp, 104		; 00000068H

; 540  : 	unsigned int		i, n, len, val, lastSize;
; 541  : 	char	*sp;
; 542  : 	char	*tp, *mp, *saveP;
; 543  : 	SCIWord	*pp;
; 544  : 	ArrayID	ar;

  00a5c	8d 4d c4	 lea	 ecx, DWORD PTR _ar$[ebp]
  00a5f	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@XZ	; ArrayID::ArrayID

; 545  : 		 
; 546  : 	CSCI_LongInt		nLong;

  00a64	8d 4d d8	 lea	 ecx, DWORD PTR _nLong$[ebp]
  00a67	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@XZ	; CSCI_LongInt::CSCI_LongInt

; 547  : 	CSCI_WorldObject	nObj;

  00a6c	8d 4d c0	 lea	 ecx, DWORD PTR _nObj$[ebp]
  00a6f	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@XZ ; CSCI_WorldObject::CSCI_WorldObject

; 548  : 	
; 549  : #ifdef DEBUG
; 550  : 	memMgr->CheckVolatile ( True );
; 551  : #endif
; 552  : 
; 553  : 	// Set data pointer to right after the size value
; 554  : 	unsigned char* pMsgData = &g_nMessage[ 4 ];

  00a74	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _pMsgData$[ebp], OFFSET FLAT:?g_nMessage@@3PAEA+4

; 555  : 
; 556  : 	// Determine the length of the message.
; 557  : 	len = 0;

  00a7b	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0

; 558  : 
; 559  : 	for (i = 1, sp = *(TextID)arg(0) ; i <= (unsigned int) size && *sp ; ++i, ++sp) {

  00a82	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00a89	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00a8c	66 8b 08	 mov	 cx, WORD PTR [eax]
  00a8f	51		 push	 ecx
  00a90	8d 4d ac	 lea	 ecx, DWORD PTR $T148584[ebp]
  00a93	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00a98	8b c8		 mov	 ecx, eax
  00a9a	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00a9f	89 45 e8	 mov	 DWORD PTR _sp$[ebp], eax
  00aa2	eb 12		 jmp	 SHORT $L142996
$L142997:
  00aa4	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  00aa7	83 c2 01	 add	 edx, 1
  00aaa	89 55 d0	 mov	 DWORD PTR _i$[ebp], edx
  00aad	8b 45 e8	 mov	 eax, DWORD PTR _sp$[ebp]
  00ab0	83 c0 01	 add	 eax, 1
  00ab3	89 45 e8	 mov	 DWORD PTR _sp$[ebp], eax
$L142996:
  00ab6	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  00ab9	3b 4d 0c	 cmp	 ecx, DWORD PTR _size$[ebp]
  00abc	0f 87 9d 03 00
	00		 ja	 $L142998
  00ac2	8b 55 e8	 mov	 edx, DWORD PTR _sp$[ebp]
  00ac5	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00ac8	85 c0		 test	 eax, eax
  00aca	0f 84 8f 03 00
	00		 je	 $L142998

; 560  : 		switch (*sp) {

  00ad0	8b 4d e8	 mov	 ecx, DWORD PTR _sp$[ebp]
  00ad3	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00ad6	89 55 8c	 mov	 DWORD PTR -116+[ebp], edx
  00ad9	8b 45 8c	 mov	 eax, DWORD PTR -116+[ebp]
  00adc	83 e8 2b	 sub	 eax, 43			; 0000002bH
  00adf	89 45 8c	 mov	 DWORD PTR -116+[ebp], eax
  00ae2	83 7d 8c 4c	 cmp	 DWORD PTR -116+[ebp], 76 ; 0000004cH
  00ae6	0f 87 6e 03 00
	00		 ja	 $L143000
  00aec	8b 55 8c	 mov	 edx, DWORD PTR -116+[ebp]
  00aef	33 c9		 xor	 ecx, ecx
  00af1	8a 8a 00 00 00
	00		 mov	 cl, BYTE PTR $L148596[edx]
  00af7	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L148597[ecx*4]
$L143003:

; 561  : 			case 'b':
; 562  : 				lastSize = 1;

  00afe	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _lastSize$[ebp], 1

; 563  : 
; 564  : 				len++;

  00b05	8b 45 c8	 mov	 eax, DWORD PTR _len$[ebp]
  00b08	83 c0 01	 add	 eax, 1
  00b0b	89 45 c8	 mov	 DWORD PTR _len$[ebp], eax

; 565  : 				*pMsgData++ = (unsigned char) arg(i);

  00b0e	8b 4d ec	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  00b11	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  00b14	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00b17	8a 14 50	 mov	 dl, BYTE PTR [eax+edx*2]
  00b1a	88 11		 mov	 BYTE PTR [ecx], dl
  00b1c	8b 45 ec	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  00b1f	83 c0 01	 add	 eax, 1
  00b22	89 45 ec	 mov	 DWORD PTR _pMsgData$[ebp], eax

; 566  : 				break;

  00b25	e9 30 03 00 00	 jmp	 $L143000
$L143005:

; 567  : 
; 568  : 			case 'w':
; 569  : 				lastSize = 2;

  00b2a	c7 45 b8 02 00
	00 00		 mov	 DWORD PTR _lastSize$[ebp], 2

; 570  : 
; 571  : 				len += 2;

  00b31	8b 4d c8	 mov	 ecx, DWORD PTR _len$[ebp]
  00b34	83 c1 02	 add	 ecx, 2
  00b37	89 4d c8	 mov	 DWORD PTR _len$[ebp], ecx

; 572  : 
; 573  : 				val = arg(i);

  00b3a	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  00b3d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00b40	0f bf 0c 50	 movsx	 ecx, WORD PTR [eax+edx*2]
  00b44	89 4d f0	 mov	 DWORD PTR _val$[ebp], ecx

; 574  : 
; 575  : #if BIG_ENDIAN
; 576  : 				*pMsgData++ = (unsigned char) (val >> 8);
; 577  : 				*pMsgData++ = (unsigned char) (val & 0xff);
; 578  : #else
; 579  : 				*( (unsigned short*) pMsgData) = (unsigned short) val;

  00b47	8b 55 ec	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  00b4a	66 8b 45 f0	 mov	 ax, WORD PTR _val$[ebp]
  00b4e	66 89 02	 mov	 WORD PTR [edx], ax

; 580  : 				pMsgData += 2;

  00b51	8b 4d ec	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  00b54	83 c1 02	 add	 ecx, 2
  00b57	89 4d ec	 mov	 DWORD PTR _pMsgData$[ebp], ecx

; 581  : #endif
; 582  : 
; 583  : 				break;

  00b5a	e9 fb 02 00 00	 jmp	 $L143000
$L143008:

; 584  : 
; 585  : 			case 'l':
; 586  : 				lastSize = 4;

  00b5f	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR _lastSize$[ebp], 4

; 587  : 
; 588  : 				len += 4;

  00b66	8b 55 c8	 mov	 edx, DWORD PTR _len$[ebp]
  00b69	83 c2 04	 add	 edx, 4
  00b6c	89 55 c8	 mov	 DWORD PTR _len$[ebp], edx

; 589  : 
; 590  : 				nLong = arg(i);

  00b6f	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  00b72	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00b75	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  00b79	52		 push	 edx
  00b7a	8d 4d a8	 lea	 ecx, DWORD PTR $T148585[ebp]
  00b7d	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  00b82	66 8b 45 a8	 mov	 ax, WORD PTR $T148585[ebp]
  00b86	66 89 45 d8	 mov	 WORD PTR _nLong$[ebp], ax

; 591  : 
; 592  : 				if ( nLong ) {

  00b8a	8d 4d d8	 lea	 ecx, DWORD PTR _nLong$[ebp]
  00b8d	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00b92	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00b97	85 c0		 test	 eax, eax
  00b99	74 0d		 je	 SHORT $L143010

; 593  : 					val = nLong.get_nValue();

  00b9b	8d 4d d8	 lea	 ecx, DWORD PTR _nLong$[ebp]
  00b9e	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  00ba3	89 45 f0	 mov	 DWORD PTR _val$[ebp], eax

; 594  : 				} else {

  00ba6	eb 07		 jmp	 SHORT $L143011
$L143010:

; 595  : 					val = -1;

  00ba8	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _val$[ebp], -1
$L143011:

; 597  : 
; 598  : #if BIG_ENDIAN
; 599  : 				*pMsgData++ = (unsigned char) (val >> 24);
; 600  : 				*pMsgData++ = (unsigned char) (val >> 16);
; 601  : 				*pMsgData++ = (unsigned char) (val >> 8);
; 602  : 				*pMsgData++ = (unsigned char) (val & 0xff);
; 603  : #else
; 604  : 				*( (unsigned int*) pMsgData) = (unsigned int) val;

  00baf	8b 4d ec	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  00bb2	8b 55 f0	 mov	 edx, DWORD PTR _val$[ebp]
  00bb5	89 11		 mov	 DWORD PTR [ecx], edx

; 605  : 				pMsgData += 4;

  00bb7	8b 45 ec	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  00bba	83 c0 04	 add	 eax, 4
  00bbd	89 45 ec	 mov	 DWORD PTR _pMsgData$[ebp], eax

; 606  : #endif
; 607  : 
; 608  : 				break;

  00bc0	e9 95 02 00 00	 jmp	 $L143000
$L143014:

; 609  : 
; 610  : 			case 't':
; 611  : 				lastSize = 4;

  00bc5	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR _lastSize$[ebp], 4

; 612  : 
; 613  : 				len += 4;

  00bcc	8b 4d c8	 mov	 ecx, DWORD PTR _len$[ebp]
  00bcf	83 c1 04	 add	 ecx, 4
  00bd2	89 4d c8	 mov	 DWORD PTR _len$[ebp], ecx

; 614  : 
; 615  : 				val = arg(i);

  00bd5	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  00bd8	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00bdb	0f bf 0c 50	 movsx	 ecx, WORD PTR [eax+edx*2]
  00bdf	89 4d f0	 mov	 DWORD PTR _val$[ebp], ecx

; 616  : 
; 617  : #if BIG_ENDIAN
; 618  : 				*pMsgData++ = (unsigned char) (val >> 24);
; 619  : 				*pMsgData++ = (unsigned char) (val >> 16);
; 620  : 				*pMsgData++ = (unsigned char) (val >> 8);
; 621  : 				*pMsgData++ = (unsigned char) (val & 0xff);
; 622  : #else
; 623  : 				*( (unsigned int*) pMsgData) = (unsigned int) val;

  00be2	8b 55 ec	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  00be5	8b 45 f0	 mov	 eax, DWORD PTR _val$[ebp]
  00be8	89 02		 mov	 DWORD PTR [edx], eax

; 624  : 				pMsgData += 4;

  00bea	8b 4d ec	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  00bed	83 c1 04	 add	 ecx, 4
  00bf0	89 4d ec	 mov	 DWORD PTR _pMsgData$[ebp], ecx

; 625  : #endif
; 626  : 
; 627  : 				break;

  00bf3	e9 62 02 00 00	 jmp	 $L143000
$L143017:

; 628  : 
; 629  : 			case 'p':
; 630  : 				lastSize = 4;

  00bf8	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR _lastSize$[ebp], 4

; 631  : 
; 632  : 				len += 4;

  00bff	8b 55 c8	 mov	 edx, DWORD PTR _len$[ebp]
  00c02	83 c2 04	 add	 edx, 4
  00c05	89 55 c8	 mov	 DWORD PTR _len$[ebp], edx

; 633  : 
; 634  : 				nObj = arg(i);

  00c08	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  00c0b	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00c0e	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  00c12	52		 push	 edx
  00c13	8d 4d a4	 lea	 ecx, DWORD PTR $T148586[ebp]
  00c16	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  00c1b	66 8b 45 a4	 mov	 ax, WORD PTR $T148586[ebp]
  00c1f	66 89 45 c0	 mov	 WORD PTR _nObj$[ebp], ax

; 635  : 
; 636  : 				if ( nObj ) {

  00c23	8d 4d c0	 lea	 ecx, DWORD PTR _nObj$[ebp]
  00c26	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00c2b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00c30	85 c0		 test	 eax, eax
  00c32	74 0d		 je	 SHORT $L143019

; 637  : 					val = nObj.get_nServID();

  00c34	8d 4d c0	 lea	 ecx, DWORD PTR _nObj$[ebp]
  00c37	e8 00 00 00 00	 call	 ?get_nServID@CSCI_WorldObject@@QAEHXZ ; CSCI_WorldObject::get_nServID
  00c3c	89 45 f0	 mov	 DWORD PTR _val$[ebp], eax

; 638  : 				} else {

  00c3f	eb 07		 jmp	 SHORT $L143020
$L143019:

; 639  : 					val = -1;

  00c41	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _val$[ebp], -1
$L143020:

; 641  : 
; 642  : #if BIG_ENDIAN
; 643  : 				*pMsgData++ = (unsigned char) (val >> 24);
; 644  : 				*pMsgData++ = (unsigned char) (val >> 16);
; 645  : 				*pMsgData++ = (unsigned char) (val >> 8);
; 646  : 				*pMsgData++ = (unsigned char) (val & 0xff);
; 647  : #else
; 648  : 				*( (unsigned int*) pMsgData) = (unsigned int) val;

  00c48	8b 4d ec	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  00c4b	8b 55 f0	 mov	 edx, DWORD PTR _val$[ebp]
  00c4e	89 11		 mov	 DWORD PTR [ecx], edx

; 649  : 				pMsgData += 4;

  00c50	8b 45 ec	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  00c53	83 c0 04	 add	 eax, 4
  00c56	89 45 ec	 mov	 DWORD PTR _pMsgData$[ebp], eax

; 650  : #endif
; 651  : 
; 652  : 				break;

  00c59	e9 fc 01 00 00	 jmp	 $L143000
$L143023:

; 653  : 
; 654  : 			case 's':
; 655  : 				tp = *(TextID) arg(i);

  00c5e	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  00c61	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00c64	66 8b 04 4a	 mov	 ax, WORD PTR [edx+ecx*2]
  00c68	50		 push	 eax
  00c69	8d 4d a0	 lea	 ecx, DWORD PTR $T148587[ebp]
  00c6c	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00c71	8b c8		 mov	 ecx, eax
  00c73	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00c78	89 45 dc	 mov	 DWORD PTR _tp$[ebp], eax

; 656  : 				len += strlen( tp ) + 1;

  00c7b	8b 4d dc	 mov	 ecx, DWORD PTR _tp$[ebp]
  00c7e	51		 push	 ecx
  00c7f	e8 00 00 00 00	 call	 _strlen
  00c84	83 c4 04	 add	 esp, 4
  00c87	8b 55 c8	 mov	 edx, DWORD PTR _len$[ebp]
  00c8a	8d 44 02 01	 lea	 eax, DWORD PTR [edx+eax+1]
  00c8e	89 45 c8	 mov	 DWORD PTR _len$[ebp], eax
$L143027:

; 657  : 
; 658  : 				while (*tp) 

  00c91	8b 4d dc	 mov	 ecx, DWORD PTR _tp$[ebp]
  00c94	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00c97	85 d2		 test	 edx, edx
  00c99	74 1e		 je	 SHORT $L143028

; 659  : 					*pMsgData++ = *tp++;

  00c9b	8b 45 ec	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  00c9e	8b 4d dc	 mov	 ecx, DWORD PTR _tp$[ebp]
  00ca1	8a 11		 mov	 dl, BYTE PTR [ecx]
  00ca3	88 10		 mov	 BYTE PTR [eax], dl
  00ca5	8b 45 ec	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  00ca8	83 c0 01	 add	 eax, 1
  00cab	89 45 ec	 mov	 DWORD PTR _pMsgData$[ebp], eax
  00cae	8b 4d dc	 mov	 ecx, DWORD PTR _tp$[ebp]
  00cb1	83 c1 01	 add	 ecx, 1
  00cb4	89 4d dc	 mov	 DWORD PTR _tp$[ebp], ecx
  00cb7	eb d8		 jmp	 SHORT $L143027
$L143028:

; 660  : 
; 661  : 				*pMsgData++ = (unsigned char) 0;

  00cb9	8b 55 ec	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  00cbc	c6 02 00	 mov	 BYTE PTR [edx], 0
  00cbf	8b 45 ec	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  00cc2	83 c0 01	 add	 eax, 1
  00cc5	89 45 ec	 mov	 DWORD PTR _pMsgData$[ebp], eax

; 662  : 
; 663  : 				break;

  00cc8	e9 8d 01 00 00	 jmp	 $L143000
$L143030:

; 664  : 
; 665  : 			case 'S':
; 666  : 				n = arg(i++);

  00ccd	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  00cd0	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00cd3	0f bf 04 4a	 movsx	 eax, WORD PTR [edx+ecx*2]
  00cd7	89 45 bc	 mov	 DWORD PTR _n$[ebp], eax
  00cda	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  00cdd	83 c1 01	 add	 ecx, 1
  00ce0	89 4d d0	 mov	 DWORD PTR _i$[ebp], ecx

; 667  : 				len += n;

  00ce3	8b 55 c8	 mov	 edx, DWORD PTR _len$[ebp]
  00ce6	03 55 bc	 add	 edx, DWORD PTR _n$[ebp]
  00ce9	89 55 c8	 mov	 DWORD PTR _len$[ebp], edx

; 668  : 
; 669  : 				tp = *(TextID) arg(i);

  00cec	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  00cef	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00cf2	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  00cf6	52		 push	 edx
  00cf7	8d 4d 9c	 lea	 ecx, DWORD PTR $T148588[ebp]
  00cfa	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00cff	8b c8		 mov	 ecx, eax
  00d01	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00d06	89 45 dc	 mov	 DWORD PTR _tp$[ebp], eax
$L143034:

; 670  : 
; 671  : 				while (n--)

  00d09	8b 45 bc	 mov	 eax, DWORD PTR _n$[ebp]
  00d0c	8b 4d bc	 mov	 ecx, DWORD PTR _n$[ebp]
  00d0f	83 e9 01	 sub	 ecx, 1
  00d12	89 4d bc	 mov	 DWORD PTR _n$[ebp], ecx
  00d15	85 c0		 test	 eax, eax
  00d17	74 1e		 je	 SHORT $L143035

; 672  : 					*pMsgData++ = *tp++;

  00d19	8b 55 ec	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  00d1c	8b 45 dc	 mov	 eax, DWORD PTR _tp$[ebp]
  00d1f	8a 08		 mov	 cl, BYTE PTR [eax]
  00d21	88 0a		 mov	 BYTE PTR [edx], cl
  00d23	8b 55 ec	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  00d26	83 c2 01	 add	 edx, 1
  00d29	89 55 ec	 mov	 DWORD PTR _pMsgData$[ebp], edx
  00d2c	8b 45 dc	 mov	 eax, DWORD PTR _tp$[ebp]
  00d2f	83 c0 01	 add	 eax, 1
  00d32	89 45 dc	 mov	 DWORD PTR _tp$[ebp], eax
  00d35	eb d2		 jmp	 SHORT $L143034
$L143035:

; 673  : 
; 674  : 				break;

  00d37	e9 1e 01 00 00	 jmp	 $L143000
$L143036:

; 675  : 
; 676  : 			case 'a':
; 677  : 				// get the length of record
; 678  : 	            n = arg(i++);

  00d3c	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  00d3f	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00d42	0f bf 04 4a	 movsx	 eax, WORD PTR [edx+ecx*2]
  00d46	89 45 bc	 mov	 DWORD PTR _n$[ebp], eax
  00d49	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  00d4c	83 c1 01	 add	 ecx, 1
  00d4f	89 4d d0	 mov	 DWORD PTR _i$[ebp], ecx

; 679  : 				len += n;

  00d52	8b 55 c8	 mov	 edx, DWORD PTR _len$[ebp]
  00d55	03 55 bc	 add	 edx, DWORD PTR _n$[ebp]
  00d58	89 55 c8	 mov	 DWORD PTR _len$[ebp], edx

; 680  : 
; 681  : 		        ar = (ArrayID) arg(i);

  00d5b	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  00d5e	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00d61	66 8b 14 41	 mov	 dx, WORD PTR [ecx+eax*2]
  00d65	52		 push	 edx
  00d66	8d 4d 98	 lea	 ecx, DWORD PTR $T148589[ebp]
  00d69	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  00d6e	66 8b 00	 mov	 ax, WORD PTR [eax]
  00d71	66 89 45 c4	 mov	 WORD PTR _ar$[ebp], ax

; 682  : 				tp = (char *) ar.Data();

  00d75	8d 4d c4	 lea	 ecx, DWORD PTR _ar$[ebp]
  00d78	e8 00 00 00 00	 call	 ?Data@ArrayID@@QAEPAXXZ	; ArrayID::Data
  00d7d	89 45 dc	 mov	 DWORD PTR _tp$[ebp], eax
$L143041:

; 683  : 		
; 684  : 				while (n--)

  00d80	8b 4d bc	 mov	 ecx, DWORD PTR _n$[ebp]
  00d83	8b 55 bc	 mov	 edx, DWORD PTR _n$[ebp]
  00d86	83 ea 01	 sub	 edx, 1
  00d89	89 55 bc	 mov	 DWORD PTR _n$[ebp], edx
  00d8c	85 c9		 test	 ecx, ecx
  00d8e	74 1e		 je	 SHORT $L143042

; 685  : 					*pMsgData++ = *tp++;

  00d90	8b 45 ec	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  00d93	8b 4d dc	 mov	 ecx, DWORD PTR _tp$[ebp]
  00d96	8a 11		 mov	 dl, BYTE PTR [ecx]
  00d98	88 10		 mov	 BYTE PTR [eax], dl
  00d9a	8b 45 ec	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  00d9d	83 c0 01	 add	 eax, 1
  00da0	89 45 ec	 mov	 DWORD PTR _pMsgData$[ebp], eax
  00da3	8b 4d dc	 mov	 ecx, DWORD PTR _tp$[ebp]
  00da6	83 c1 01	 add	 ecx, 1
  00da9	89 4d dc	 mov	 DWORD PTR _tp$[ebp], ecx
  00dac	eb d2		 jmp	 SHORT $L143041
$L143042:

; 686  : 
; 687  : 				break;

  00dae	e9 a7 00 00 00	 jmp	 $L143000
$L143043:

; 688  : 
; 689  : 			case '+':
; 690  : 				// get the length of record
; 691  : 				n = size - i + 1;

  00db3	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  00db6	2b 55 d0	 sub	 edx, DWORD PTR _i$[ebp]
  00db9	83 c2 01	 add	 edx, 1
  00dbc	89 55 bc	 mov	 DWORD PTR _n$[ebp], edx

; 692  : 				len += lastSize * n;

  00dbf	8b 45 b8	 mov	 eax, DWORD PTR _lastSize$[ebp]
  00dc2	0f af 45 bc	 imul	 eax, DWORD PTR _n$[ebp]
  00dc6	8b 4d c8	 mov	 ecx, DWORD PTR _len$[ebp]
  00dc9	03 c8		 add	 ecx, eax
  00dcb	89 4d c8	 mov	 DWORD PTR _len$[ebp], ecx

; 693  : 
; 694  : 				if (lastSize == 1) {

  00dce	83 7d b8 01	 cmp	 DWORD PTR _lastSize$[ebp], 1
  00dd2	75 43		 jne	 SHORT $L143044

; 695  : 					unsigned char* pTmp = (unsigned char*) &arg(i);

  00dd4	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  00dd7	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00dda	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00ddd	89 4d b4	 mov	 DWORD PTR _pTmp$143045[ebp], ecx
$L143048:

; 696  : 
; 697  : 					while (n--)

  00de0	8b 55 bc	 mov	 edx, DWORD PTR _n$[ebp]
  00de3	8b 45 bc	 mov	 eax, DWORD PTR _n$[ebp]
  00de6	83 e8 01	 sub	 eax, 1
  00de9	89 45 bc	 mov	 DWORD PTR _n$[ebp], eax
  00dec	85 d2		 test	 edx, edx
  00dee	74 25		 je	 SHORT $L143049

; 698  : 						*pMsgData++ = (unsigned char) ((*pp++) & 0xff);

  00df0	8b 4d e0	 mov	 ecx, DWORD PTR _pp$[ebp]
  00df3	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00df6	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00dfc	8b 45 ec	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  00dff	88 10		 mov	 BYTE PTR [eax], dl
  00e01	8b 4d ec	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  00e04	83 c1 01	 add	 ecx, 1
  00e07	89 4d ec	 mov	 DWORD PTR _pMsgData$[ebp], ecx
  00e0a	8b 55 e0	 mov	 edx, DWORD PTR _pp$[ebp]
  00e0d	83 c2 02	 add	 edx, 2
  00e10	89 55 e0	 mov	 DWORD PTR _pp$[ebp], edx
  00e13	eb cb		 jmp	 SHORT $L143048
$L143049:

; 699  : 				} else {

  00e15	eb 43		 jmp	 SHORT $L143055
$L143044:

; 700  : 					SCIWord* pTmp = &arg(i);

  00e17	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  00e1a	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00e1d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00e20	89 55 b0	 mov	 DWORD PTR _pTmp$143052[ebp], edx
$L143054:

; 701  : 
; 702  : 					while (n--) {

  00e23	8b 45 bc	 mov	 eax, DWORD PTR _n$[ebp]
  00e26	8b 4d bc	 mov	 ecx, DWORD PTR _n$[ebp]
  00e29	83 e9 01	 sub	 ecx, 1
  00e2c	89 4d bc	 mov	 DWORD PTR _n$[ebp], ecx
  00e2f	85 c0		 test	 eax, eax
  00e31	74 27		 je	 SHORT $L143055

; 703  : 						val = *pp++;

  00e33	8b 55 e0	 mov	 edx, DWORD PTR _pp$[ebp]
  00e36	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00e39	89 45 f0	 mov	 DWORD PTR _val$[ebp], eax
  00e3c	8b 4d e0	 mov	 ecx, DWORD PTR _pp$[ebp]
  00e3f	83 c1 02	 add	 ecx, 2
  00e42	89 4d e0	 mov	 DWORD PTR _pp$[ebp], ecx

; 704  : 
; 705  : #if BIG_ENDIAN
; 706  : 						*pMsgData++ = (unsigned char) (val >> 8);
; 707  : 						*pMsgData++ = (unsigned char) (val & 0xff);
; 708  : #else
; 709  : 						*( (unsigned short*) pMsgData) = (unsigned short) val;

  00e45	8b 55 ec	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  00e48	66 8b 45 f0	 mov	 ax, WORD PTR _val$[ebp]
  00e4c	66 89 02	 mov	 WORD PTR [edx], ax

; 710  : 						pMsgData += 2;

  00e4f	8b 4d ec	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  00e52	83 c1 02	 add	 ecx, 2
  00e55	89 4d ec	 mov	 DWORD PTR _pMsgData$[ebp], ecx

; 711  : #endif
; 712  : 					}

  00e58	eb c9		 jmp	 SHORT $L143054
$L143055:
$L143000:

; 717  : 	}

  00e5a	e9 45 fc ff ff	 jmp	 $L142997
$L142998:

; 718  : 
; 719  : #ifdef DEBUG
; 720  : 	memMgr->CheckVolatile ( False );
; 721  : #endif
; 722  : 
; 723  :    if ( len == 0)

  00e5f	83 7d c8 00	 cmp	 DWORD PTR _len$[ebp], 0
  00e63	75 07		 jne	 SHORT $L143058

; 724  :       return FALSE;

  00e65	33 c0		 xor	 eax, eax
  00e67	e9 93 00 00 00	 jmp	 $L142978
$L143058:

; 725  : 
; 726  : 	len += 11;	// Add 4 for length and then add 7 and make a multiple of 4

  00e6c	8b 55 c8	 mov	 edx, DWORD PTR _len$[ebp]
  00e6f	83 c2 0b	 add	 edx, 11			; 0000000bH
  00e72	89 55 c8	 mov	 DWORD PTR _len$[ebp], edx

; 727  : 	len &= 0xfffffffc;

  00e75	8b 45 c8	 mov	 eax, DWORD PTR _len$[ebp]
  00e78	24 fc		 and	 al, -4			; fffffffcH
  00e7a	89 45 c8	 mov	 DWORD PTR _len$[ebp], eax

; 728  : 
; 729  : 	// Allocate a ByteArray in which to put the message.
; 730  : 	Array message ( len, BYTEARRAY );

  00e7d	6a 02		 push	 2
  00e7f	8b 4d c8	 mov	 ecx, DWORD PTR _len$[ebp]
  00e82	51		 push	 ecx
  00e83	8d 4d d4	 lea	 ecx, DWORD PTR _message$[ebp]
  00e86	e8 00 00 00 00	 call	 ??0Array@@QAE@HW4ArrayType@@@Z ; Array::Array
  00e8b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 731  : 
; 732  : 	*( (int*) g_nMessage) = len - 8;

  00e92	8b 55 c8	 mov	 edx, DWORD PTR _len$[ebp]
  00e95	83 ea 08	 sub	 edx, 8
  00e98	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nMessage@@3PAEA, edx

; 733  : 
; 734  : 	g_pEncryption( (int*) g_nMessage, (int*) message.calcAddress( 0 ) );

  00e9e	6a 00		 push	 0
  00ea0	8d 4d d4	 lea	 ecx, DWORD PTR _message$[ebp]
  00ea3	e8 00 00 00 00	 call	 ?calcAddress@Array@@QAEPAXH@Z ; Array::calcAddress
  00ea8	8b d0		 mov	 edx, eax
  00eaa	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_nMessage@@3PAEA ; g_nMessage
  00eaf	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pEncryption@@3P6IHPAH0@ZA ; g_pEncryption

; 735  : 
; 736  : #ifdef DUMP_MESSAGE
; 737  : 	DumpData( "U_SEND", len, &g_nMessage[4] );
; 738  : 	DumpData( "E_SEND", len, (unsigned char*) message.calcAddress ( 4 ) );
; 739  : #endif
; 740  : 
; 741  : 	netOutgoing.addToEnd ( message.dataID() );

  00eb5	8d 45 94	 lea	 eax, DWORD PTR $T148590[ebp]
  00eb8	50		 push	 eax
  00eb9	8d 4d d4	 lea	 ecx, DWORD PTR _message$[ebp]
  00ebc	e8 00 00 00 00	 call	 ?dataID@Array@@QAE?AVMemID@@XZ ; Array::dataID
  00ec1	8b c8		 mov	 ecx, eax
  00ec3	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00ec8	50		 push	 eax
  00ec9	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netOutgoing@@3VSOL_List@@A
  00ece	e8 00 00 00 00	 call	 ?addToEnd@SOL_List@@QAEXG@Z ; SOL_List::addToEnd

; 742  : 
; 743  : 	memset( g_nMessage, 0, len );

  00ed3	8b 4d c8	 mov	 ecx, DWORD PTR _len$[ebp]
  00ed6	51		 push	 ecx
  00ed7	6a 00		 push	 0
  00ed9	68 00 00 00 00	 push	 OFFSET FLAT:?g_nMessage@@3PAEA ; g_nMessage
  00ede	e8 00 00 00 00	 call	 _memset
  00ee3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 744  : 
; 745  : 	return 1;

  00ee6	c7 45 90 01 00
	00 00		 mov	 DWORD PTR $T148591[ebp], 1
  00eed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00ef4	8d 4d d4	 lea	 ecx, DWORD PTR _message$[ebp]
  00ef7	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00efc	8b 45 90	 mov	 eax, DWORD PTR $T148591[ebp]
$L142978:

; 746  : }

  00eff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00f02	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00f09	8b e5		 mov	 esp, ebp
  00f0b	5d		 pop	 ebp
  00f0c	c3		 ret	 0
$L148597:
  00f0d	00 00 00 00	 DD	 $L143043
  00f11	00 00 00 00	 DD	 $L143030
  00f15	00 00 00 00	 DD	 $L143036
  00f19	00 00 00 00	 DD	 $L143003
  00f1d	00 00 00 00	 DD	 $L143008
  00f21	00 00 00 00	 DD	 $L143017
  00f25	00 00 00 00	 DD	 $L143023
  00f29	00 00 00 00	 DD	 $L143014
  00f2d	00 00 00 00	 DD	 $L143005
  00f31	00 00 00 00	 DD	 $L143000
$L148596:
  00f35	00		 DB	 0
  00f36	09		 DB	 9
  00f37	09		 DB	 9
  00f38	09		 DB	 9
  00f39	09		 DB	 9
  00f3a	09		 DB	 9
  00f3b	09		 DB	 9
  00f3c	09		 DB	 9
  00f3d	09		 DB	 9
  00f3e	09		 DB	 9
  00f3f	09		 DB	 9
  00f40	09		 DB	 9
  00f41	09		 DB	 9
  00f42	09		 DB	 9
  00f43	09		 DB	 9
  00f44	09		 DB	 9
  00f45	09		 DB	 9
  00f46	09		 DB	 9
  00f47	09		 DB	 9
  00f48	09		 DB	 9
  00f49	09		 DB	 9
  00f4a	09		 DB	 9
  00f4b	09		 DB	 9
  00f4c	09		 DB	 9
  00f4d	09		 DB	 9
  00f4e	09		 DB	 9
  00f4f	09		 DB	 9
  00f50	09		 DB	 9
  00f51	09		 DB	 9
  00f52	09		 DB	 9
  00f53	09		 DB	 9
  00f54	09		 DB	 9
  00f55	09		 DB	 9
  00f56	09		 DB	 9
  00f57	09		 DB	 9
  00f58	09		 DB	 9
  00f59	09		 DB	 9
  00f5a	09		 DB	 9
  00f5b	09		 DB	 9
  00f5c	09		 DB	 9
  00f5d	01		 DB	 1
  00f5e	09		 DB	 9
  00f5f	09		 DB	 9
  00f60	09		 DB	 9
  00f61	09		 DB	 9
  00f62	09		 DB	 9
  00f63	09		 DB	 9
  00f64	09		 DB	 9
  00f65	09		 DB	 9
  00f66	09		 DB	 9
  00f67	09		 DB	 9
  00f68	09		 DB	 9
  00f69	09		 DB	 9
  00f6a	09		 DB	 9
  00f6b	02		 DB	 2
  00f6c	03		 DB	 3
  00f6d	09		 DB	 9
  00f6e	09		 DB	 9
  00f6f	09		 DB	 9
  00f70	09		 DB	 9
  00f71	09		 DB	 9
  00f72	09		 DB	 9
  00f73	09		 DB	 9
  00f74	09		 DB	 9
  00f75	09		 DB	 9
  00f76	04		 DB	 4
  00f77	09		 DB	 9
  00f78	09		 DB	 9
  00f79	09		 DB	 9
  00f7a	05		 DB	 5
  00f7b	09		 DB	 9
  00f7c	09		 DB	 9
  00f7d	06		 DB	 6
  00f7e	07		 DB	 7
  00f7f	09		 DB	 9
  00f80	09		 DB	 9
  00f81	08		 DB	 8
_TEXT	ENDS
text$x	SEGMENT
$L148592:
  0002e	8d 4d d4	 lea	 ecx, DWORD PTR _message$[ebp]
  00031	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00036	c3		 ret	 0
$L148595:
  00037	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T148594
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?NetSend@@YAHPAFH@Z ENDP				; NetSend
PUBLIC	??0FakeArrayID@@QAE@XZ				; FakeArrayID::FakeArrayID
;	COMDAT ??0ArrayID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ArrayID@@QAE@XZ PROC NEAR				; ArrayID::ArrayID, COMDAT

; 36   : 	ArrayID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeArrayID@@QAE@XZ	; FakeArrayID::FakeArrayID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ArrayID@@QAE@XZ ENDP					; ArrayID::ArrayID
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeArrayID@@QAE@XZ PROC NEAR			; FakeArrayID::FakeArrayID, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeArrayID@@QAE@XZ ENDP				; FakeArrayID::FakeArrayID
_TEXT	ENDS
PUBLIC	??DFakeArrayID@@QBEPAUArrayHeader@@XZ		; FakeArrayID::operator*
;	COMDAT ?Data@ArrayID@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4
?Data@ArrayID@@QAEPAXXZ PROC NEAR			; ArrayID::Data, COMDAT

; 64   : 	void *Data ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 		return ((char *)**this) + sizeof ( ArrayHeader );

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DFakeArrayID@@QBEPAUArrayHeader@@XZ ; FakeArrayID::operator*
  0000f	83 c0 04	 add	 eax, 4

; 66   : 	}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Data@ArrayID@@QAEPAXXZ ENDP				; ArrayID::Data
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT
_this$ = -4
??DFakeArrayID@@QBEPAUArrayHeader@@XZ PROC NEAR		; FakeArrayID::operator*, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??DFakeArrayID@@QBEPAUArrayHeader@@XZ ENDP		; FakeArrayID::operator*
_TEXT	ENDS
PUBLIC	??0ArrayID@@QAE@HW4ArrayType@@@Z		; ArrayID::ArrayID
;	COMDAT ??0Array@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT
$T148605 = -8
_count$ = 8
_type$ = 12
_this$ = -12
??0Array@@QAE@HW4ArrayType@@@Z PROC NEAR		; Array::Array, COMDAT

; 84   : 	Array ( int count, ArrayType type ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 85   : 		dataID ( ArrayID ( count, type ) );

  00011	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _count$[ebp]
  00018	51		 push	 ecx
  00019	8d 4d f8	 lea	 ecx, DWORD PTR $T148605[ebp]
  0001c	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@HW4ArrayType@@@Z ; ArrayID::ArrayID
  00021	51		 push	 ecx
  00022	8b cc		 mov	 ecx, esp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0002a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?dataID@Array@@QAEXVMemID@@@Z ; Array::dataID

; 86   : 	}

  00032	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??0Array@@QAE@HW4ArrayType@@@Z ENDP			; Array::Array
_TEXT	ENDS
PUBLIC	?Get@ArrayID@@QAEXI@Z				; ArrayID::Get
EXTRN	?ArrayElementSize@@3PAHA:BYTE			; ArrayElementSize
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT
_size$ = 8
_type$ = 12
_this$ = -12
_elementSize$ = -8
_array$ = -4
??0ArrayID@@QAE@HW4ArrayType@@@Z PROC NEAR		; ArrayID::ArrayID, COMDAT

; 40   : 	ArrayID ( int size, ArrayType type )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0FakeArrayID@@QAE@XZ	; FakeArrayID::FakeArrayID

; 41   : 	{
; 42   : 		int elementSize = ArrayElementSize[type];

  00011	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00014	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?ArrayElementSize@@3PAHA[eax*4]
  0001b	89 4d f8	 mov	 DWORD PTR _elementSize$[ebp], ecx

; 43   : 
; 44   : 		// allocate the base array
; 45   : 		Get ( elementSize * size + sizeof ( ArrayHeader ) );

  0001e	8b 55 f8	 mov	 edx, DWORD PTR _elementSize$[ebp]
  00021	0f af 55 08	 imul	 edx, DWORD PTR _size$[ebp]
  00025	83 c2 04	 add	 edx, 4
  00028	52		 push	 edx
  00029	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?Get@ArrayID@@QAEXI@Z	; ArrayID::Get

; 46   : 
; 47   : 		// set the default values for the Array struct that I represent
; 48   : 		ArrayHeader *array = **this;

  00031	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??DFakeArrayID@@QBEPAUArrayHeader@@XZ ; FakeArrayID::operator*
  00039	89 45 fc	 mov	 DWORD PTR _array$[ebp], eax

; 49   : 		array->elementSize = elementSize;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _array$[ebp]
  0003f	66 8b 4d f8	 mov	 cx, WORD PTR _elementSize$[ebp]
  00043	66 89 08	 mov	 WORD PTR [eax], cx

; 50   : 		array->size = size;

  00046	8b 55 fc	 mov	 edx, DWORD PTR _array$[ebp]
  00049	66 8b 45 08	 mov	 ax, WORD PTR _size$[ebp]
  0004d	66 89 42 02	 mov	 WORD PTR [edx+2], ax

; 51   : 	}

  00051	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
??0ArrayID@@QAE@HW4ArrayType@@@Z ENDP			; ArrayID::ArrayID
_TEXT	ENDS
PUBLIC	?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT
_size$ = 8
_this$ = -4
?Get@ArrayID@@QAEXI@Z PROC NEAR				; ArrayID::Get, COMDAT

; 55   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 56   : 		// initialize arrays to 0
; 57   : 
; 58   : 		//	include defaulted args because CodeWarrior 1.1.1.2 doesn't
; 59   : 		//	consider enums a separate type and so can't distinguish between
; 60   : 		//	overloaded Get()s.
; 61   : 		MemID::Get(MemArray, size, INITMEMORY | MOVEABLE, 0, 0, 0, IllegalHandle);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	68 00 02 01 00	 push	 66048			; 00010200H
  00014	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00017	50		 push	 eax
  00018	6a 35		 push	 53			; 00000035H
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 62   : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?Get@ArrayID@@QAEXI@Z ENDP				; ArrayID::Get
_TEXT	ENDS
EXTRN	?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z:NEAR ; MemoryMgr::Alloc
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_a$ = 16
_num$ = 20
_client$ = 24
_initChar$ = 28
_h$ = 32
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; MemID::Get, COMDAT

; 42   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		handle = memMgr->Alloc(type | a, size, num, client, initChar, h);

  00007	8b 45 20	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 1c	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0001e	0b 55 10	 or	 edx, DWORD PTR _a$[ebp]
  00021	52		 push	 edx
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00028	e8 00 00 00 00	 call	 ?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemoryMgr::Alloc
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	66 89 01	 mov	 WORD PTR [ecx], ax

; 44   : 	}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 1c 00	 ret	 28			; 0000001cH
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; MemID::Get
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@XZ				; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_LongInt@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_LongInt@@QAE@XZ PROC NEAR			; CSCI_LongInt::CSCI_LongInt, COMDAT

; 721  : 	CSCI_LongInt() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@XZ	; CSCI_Object::CSCI_Object
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_LongInt@@QAE@XZ ENDP				; CSCI_LongInt::CSCI_LongInt
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@XZ				; ObjectID::ObjectID
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Object@@QAE@XZ PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 10   : 	CSCI_Object() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@XZ	; ObjectID::ObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Object@@QAE@XZ ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@XZ				; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ObjectID@@QAE@XZ PROC NEAR				; ObjectID::ObjectID, COMDAT

; 227  : 	ObjectID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@XZ	; FakeObjectID::FakeObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ObjectID@@QAE@XZ ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeObjectID@@QAE@XZ PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeObjectID@@QAE@XZ ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@G@Z				; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_LongInt@@QAE@G@Z PROC NEAR			; CSCI_LongInt::CSCI_LongInt, COMDAT

; 724  : 	CSCI_LongInt(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_LongInt@@QAE@G@Z ENDP				; CSCI_LongInt::CSCI_LongInt
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Object@@QAE@G@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 13   : 	CSCI_Object(SOL_Handle h) : ObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@G@Z ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	?get_lowWord@CSCI_LongInt@@QAEFXZ		; CSCI_LongInt::get_lowWord
PUBLIC	?get_hiWord@CSCI_LongInt@@QAEFXZ		; CSCI_LongInt::get_hiWord
;	COMDAT ?get_nValue@CSCI_LongInt@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?get_nValue@CSCI_LongInt@@QAEHXZ PROC NEAR		; CSCI_LongInt::get_nValue, COMDAT

; 732  : 	int get_nValue() { return ( ( ((int) get_hiWord()) << 16) + ( (int) get_lowWord() & 0x0000ffff ) ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?get_hiWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_hiWord
  00010	0f bf f0	 movsx	 esi, ax
  00013	c1 e6 10	 shl	 esi, 16			; 00000010H
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?get_lowWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_lowWord
  0001e	0f bf c0	 movsx	 eax, ax
  00021	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00026	03 c6		 add	 eax, esi
  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?get_nValue@CSCI_LongInt@@QAEHXZ ENDP			; CSCI_LongInt::get_nValue
_TEXT	ENDS
PUBLIC	?GetProperty@ObjectID@@QBEFG@Z			; ObjectID::GetProperty
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_lowWord@CSCI_LongInt@@QAEFXZ PROC NEAR		; CSCI_LongInt::get_lowWord, COMDAT

; 726  : 	Property get_lowWord() { return GetProperty ( s_lowWord ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0d 01 00 00	 push	 269			; 0000010dH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_lowWord@CSCI_LongInt@@QAEFXZ ENDP			; CSCI_LongInt::get_lowWord
_TEXT	ENDS
PUBLIC	?GetProperty@Object@@QAEFG@Z			; Object::GetProperty
PUBLIC	??CFakeObjectID@@QBEPAUObject@@XZ		; FakeObjectID::operator->
PUBLIC	?AssureValid@ObjectID@@QBEXXZ			; ObjectID::AssureValid
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@ObjectID@@QBEFG@Z PROC NEAR		; ObjectID::GetProperty, COMDAT

; 290  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 		//	get a property given a selector
; 292  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 293  : 		return (*this)->GetProperty(selector);

  0000f	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty

; 294  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetProperty@ObjectID@@QBEFG@Z ENDP			; ObjectID::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddrCheck@Object@@QAEPAFG@Z		; Object::GetPropAddrCheck
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@Object@@QAEFG@Z PROC NEAR			; Object::GetProperty, COMDAT

; 170  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		//	get a property given a selector
; 172  : 		return *GetPropAddrCheck(selector);

  00007	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00014	66 8b 00	 mov	 ax, WORD PTR [eax]

; 173  : 	}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetProperty@Object@@QAEFG@Z ENDP			; Object::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddr@Object@@QAEPAFG@Z			; Object::GetPropAddr
EXTRN	?Fatal@MsgMgr@@QAAXHZZ:NEAR			; MsgMgr::Fatal
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -8
_property$ = -4
?GetPropAddrCheck@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddrCheck, COMDAT

; 153  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 		//	get a property's address, checking for valid property
; 155  : 		Property* property = GetPropAddr(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddr@Object@@QAEPAFG@Z ; Object::GetPropAddr
  00016	89 45 fc	 mov	 DWORD PTR _property$[ebp], eax

; 156  : 		if (!property)

  00019	83 7d fc 00	 cmp	 DWORD PTR _property$[ebp], 0
  0001d	75 1b		 jne	 SHORT $L116853

; 157  : 			msgMgr->Fatal(Msg_InvalidProperty, selector);

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _selector$[ebp]
  00022	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00028	51		 push	 ecx
  00029	6a 29		 push	 41			; 00000029H
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
$L116853:

; 158  : 		return property;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _property$[ebp]

; 159  : 	}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetPropAddrCheck@Object@@QAEPAFG@Z ENDP		; Object::GetPropAddrCheck
_TEXT	ENDS
PUBLIC	?selectorDict@Object@@QAEPAVSelectorDict@@XZ	; Object::selectorDict
PUBLIC	??AObject@@QAEAAFH@Z				; Object::operator[]
EXTRN	?get@SelectorDict@@QAEHG@Z:NEAR			; SelectorDict::get
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -8
_index$ = -4
?GetPropAddr@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddr, COMDAT

; 127  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 		int index = selectorDict()->get ( selector );

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?get@SelectorDict@@QAEHG@Z ; SelectorDict::get
  0001d	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 129  : 
; 130  : 		if ( index != -1 && !selectorDict()->script )

  00020	83 7d fc ff	 cmp	 DWORD PTR _index$[ebp], -1
  00024	74 2b		 je	 SHORT $L116844
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  0002e	33 c9		 xor	 ecx, ecx
  00030	66 8b 48 16	 mov	 cx, WORD PTR [eax+22]
  00034	85 c9		 test	 ecx, ecx
  00036	75 19		 jne	 SHORT $L116844

; 131  : 			return &(*this)[selectorDict()->offset]; 

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00040	33 d2		 xor	 edx, edx
  00042	66 8b 50 14	 mov	 dx, WORD PTR [eax+20]
  00046	52		 push	 edx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ??AObject@@QAEAAFH@Z	; Object::operator[]
  0004f	eb 02		 jmp	 SHORT $L116842
$L116844:

; 132  : 
; 133  : 		return 0;

  00051	33 c0		 xor	 eax, eax
$L116842:

; 134  : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?GetPropAddr@Object@@QAEPAFG@Z ENDP			; Object::GetPropAddr
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT
_this$ = -4
?selectorDict@Object@@QAEPAVSelectorDict@@XZ PROC NEAR	; Object::selectorDict, COMDAT

; 102  : 	SelectorDict *selectorDict ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 		return _selectorDict;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 104  : 	};

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?selectorDict@Object@@QAEPAVSelectorDict@@XZ ENDP	; Object::selectorDict
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
??AObject@@QAEAAFH@Z PROC NEAR				; Object::operator[], COMDAT

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		//	get a reference to a property given the number of the property
; 119  : 		return ((Property*) this)[index];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 120  : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??AObject@@QAEAAFH@Z ENDP				; Object::operator[]
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeObjectID@@QBEPAUObject@@XZ PROC NEAR		; FakeObjectID::operator->, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeObjectID@@QBEPAUObject@@XZ ENDP			; FakeObjectID::operator->
_TEXT	ENDS
PUBLIC	?IsObject@ObjectID@@QBEHXZ			; ObjectID::IsObject
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssureValid@ObjectID@@QBEXXZ PROC NEAR			; ObjectID::AssureValid, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 239  : 		if (!IsObject())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  0000f	85 c0		 test	 eax, eax
  00011	75 1e		 jne	 SHORT $L117012

; 240  : 			msgMgr->Fatal(Msg_NotObject, (int) *this);

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0001b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00020	50		 push	 eax
  00021	6a 2f		 push	 47			; 0000002fH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L117012:

; 241  : 	}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?AssureValid@ObjectID@@QBEXXZ ENDP			; ObjectID::AssureValid
_TEXT	ENDS
PUBLIC	?IsValid@MemID@@QBEHXZ				; MemID::IsValid
EXTRN	?GetMemType@MemID@@QBE?AW4MemType@@XZ:NEAR	; MemID::GetMemType
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsObject@ObjectID@@QBEHXZ PROC NEAR			; ObjectID::IsObject, COMDAT

; 247  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 		return IsValid() && GetMemType() == MemObject;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00011	85 c0		 test	 eax, eax
  00013	74 16		 je	 SHORT $L148628
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0001d	83 f8 34	 cmp	 eax, 52			; 00000034H
  00020	75 09		 jne	 SHORT $L148628
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  00029	eb 07		 jmp	 SHORT $L148629
$L148628:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L148629:
  00032	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 249  : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?IsObject@ObjectID@@QBEHXZ ENDP				; ObjectID::IsObject
_TEXT	ENDS
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@MemID@@QBEHXZ PROC NEAR			; MemID::IsValid, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return memMgr->IsValid(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid

; 64   : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IsValid@MemID@@QBEHXZ ENDP				; MemID::IsValid
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L148632
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L148632
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L148632
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L148632
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L148633
$L148632:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L148633:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_hiWord@CSCI_LongInt@@QAEFXZ PROC NEAR		; CSCI_LongInt::get_hiWord, COMDAT

; 729  : 	Property get_hiWord() { return GetProperty ( s_hiWord ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0e 01 00 00	 push	 270			; 0000010eH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_hiWord@CSCI_LongInt@@QAEFXZ ENDP			; CSCI_LongInt::get_hiWord
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@XZ				; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_WorldObject@@QAE@XZ PROC NEAR			; CSCI_WorldObject::CSCI_WorldObject, COMDAT

; 4472 : 	CSCI_WorldObject() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@XZ	; CSCI_Actor::CSCI_Actor
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_WorldObject@@QAE@XZ ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@XZ				; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Actor@@QAE@XZ PROC NEAR				; CSCI_Actor::CSCI_Actor, COMDAT

; 1593 : 	CSCI_Actor() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@XZ	; CSCI_Prop::CSCI_Prop
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Actor@@QAE@XZ ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@XZ				; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Prop@@QAE@XZ PROC NEAR				; CSCI_Prop::CSCI_Prop, COMDAT

; 1557 : 	CSCI_Prop() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@XZ	; CSCI_View::CSCI_View
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Prop@@QAE@XZ ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@XZ				; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_View@@QAE@XZ PROC NEAR				; CSCI_View::CSCI_View, COMDAT

; 1512 : 	CSCI_View() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@XZ	; CSCI_Feature::CSCI_Feature
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_View@@QAE@XZ ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@XZ				; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Feature@@QAE@XZ PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT

; 1434 : 	CSCI_Feature() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@XZ	; CSCI_BitMap::CSCI_BitMap
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Feature@@QAE@XZ ENDP				; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@XZ			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_BitMap@@QAE@XZ PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT

; 1355 : 	CSCI_BitMap() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@XZ ; CSCI_Rectangle::CSCI_Rectangle
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_BitMap@@QAE@XZ ENDP				; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Rectangle@@QAE@XZ PROC NEAR			; CSCI_Rectangle::CSCI_Rectangle, COMDAT

; 514  : 	CSCI_Rectangle() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@XZ	; CSCI_Object::CSCI_Object
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Rectangle@@QAE@XZ ENDP				; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@G@Z				; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_WorldObject@@QAE@G@Z PROC NEAR			; CSCI_WorldObject::CSCI_WorldObject, COMDAT

; 4475 : 	CSCI_WorldObject(SOL_Handle h) : CSCI_Actor(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@G@Z	; CSCI_Actor::CSCI_Actor
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_WorldObject@@QAE@G@Z ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@G@Z				; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Actor@@QAE@G@Z PROC NEAR			; CSCI_Actor::CSCI_Actor, COMDAT

; 1596 : 	CSCI_Actor(SOL_Handle h) : CSCI_Prop(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@G@Z	; CSCI_Prop::CSCI_Prop
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Actor@@QAE@G@Z ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@G@Z				; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Prop@@QAE@G@Z PROC NEAR				; CSCI_Prop::CSCI_Prop, COMDAT

; 1560 : 	CSCI_Prop(SOL_Handle h) : CSCI_View(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@G@Z	; CSCI_View::CSCI_View
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Prop@@QAE@G@Z ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@G@Z			; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_View@@QAE@G@Z PROC NEAR				; CSCI_View::CSCI_View, COMDAT

; 1515 : 	CSCI_View(SOL_Handle h) : CSCI_Feature(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@G@Z ; CSCI_Feature::CSCI_Feature
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_View@@QAE@G@Z ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@G@Z				; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Feature@@QAE@G@Z PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT

; 1437 : 	CSCI_Feature(SOL_Handle h) : CSCI_BitMap(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@G@Z	; CSCI_BitMap::CSCI_BitMap
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Feature@@QAE@G@Z ENDP				; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@G@Z			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BitMap@@QAE@G@Z PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT

; 1358 : 	CSCI_BitMap(SOL_Handle h) : CSCI_Rectangle(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@G@Z ; CSCI_Rectangle::CSCI_Rectangle
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BitMap@@QAE@G@Z ENDP				; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Rectangle@@QAE@G@Z PROC NEAR			; CSCI_Rectangle::CSCI_Rectangle, COMDAT

; 517  : 	CSCI_Rectangle(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Rectangle@@QAE@G@Z ENDP				; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
PUBLIC	?get_pServIDLo@CSCI_WorldObject@@QAEFXZ		; CSCI_WorldObject::get_pServIDLo
PUBLIC	?get_pServIDHi@CSCI_WorldObject@@QAEFXZ		; CSCI_WorldObject::get_pServIDHi
;	COMDAT ?get_nServID@CSCI_WorldObject@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?get_nServID@CSCI_WorldObject@@QAEHXZ PROC NEAR		; CSCI_WorldObject::get_nServID, COMDAT

; 4544 : 	int get_nServID() { return ( ( ((int) get_pServIDHi()) << 16 ) + ( (int) get_pServIDLo() & 0x0000ffff ) ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ ; CSCI_WorldObject::get_pServIDHi
  00010	0f bf f0	 movsx	 esi, ax
  00013	c1 e6 10	 shl	 esi, 16			; 00000010H
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ ; CSCI_WorldObject::get_pServIDLo
  0001e	0f bf c0	 movsx	 eax, ax
  00021	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00026	03 c6		 add	 eax, esi
  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?get_nServID@CSCI_WorldObject@@QAEHXZ ENDP		; CSCI_WorldObject::get_nServID
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pServIDLo@CSCI_WorldObject@@QAEFXZ PROC NEAR	; CSCI_WorldObject::get_pServIDLo, COMDAT

; 4538 : 	Property get_pServIDLo() { return GetProperty ( s_pServIDLo ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 cb 02 00 00	 push	 715			; 000002cbH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pServIDLo@CSCI_WorldObject@@QAEFXZ ENDP		; CSCI_WorldObject::get_pServIDLo
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pServIDHi@CSCI_WorldObject@@QAEFXZ PROC NEAR	; CSCI_WorldObject::get_pServIDHi, COMDAT

; 4541 : 	Property get_pServIDHi() { return GetProperty ( s_pServIDHi ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 cc 02 00 00	 push	 716			; 000002ccH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pServIDHi@CSCI_WorldObject@@QAEFXZ ENDP		; CSCI_WorldObject::get_pServIDHi
_TEXT	ENDS
PUBLIC	?CNetSend@@YAHPADZZ				; CNetSend
PUBLIC	?Data@OCArray@@QAEPAEXZ				; OCArray::Data
PUBLIC	?Size@CPackedData@@QAEHXZ			; CPackedData::Size
xdata$x	SEGMENT
$T148657 DD	019930520H
	DD	01H
	DD	FLAT:$T148661
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T148661 DD	0ffffffffH
	DD	FLAT:$L148655
xdata$x	ENDS
_TEXT	SEGMENT
$T148653 = -68
$T148654 = -72
__$EHRec$ = -12
_lpszMsgFormat$ = 8
_ptr$ = -20
_args$ = -28
_nMsgLen$ = -24
_pMsgData$ = -16
_val$143092 = -36
_val$143104 = -40
_val$143118 = -44
_pData$143131 = -52
_nSize$143139 = -48
_pStr$143141 = -56
_nStrLen$143153 = -64
_pStr$143161 = -60
_message$ = -32
?CNetSend@@YAHPADZZ PROC NEAR				; CNetSend

; 749  : int CNetSend ( char *lpszMsgFormat, ... ) {

  00f82	55		 push	 ebp
  00f83	8b ec		 mov	 ebp, esp
  00f85	6a ff		 push	 -1
  00f87	68 00 00 00 00	 push	 $L148658
  00f8c	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00f92	50		 push	 eax
  00f93	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00f9a	83 ec 40	 sub	 esp, 64			; 00000040H

; 750  : 	// some local variables...
; 751  : 	char *ptr = NULL;

  00f9d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 752  : 	va_list args;
; 753  : 
; 754  : 	// step through the format of this message to determine the length
; 755  : 	int nMsgLen = 0;

  00fa4	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nMsgLen$[ebp], 0

; 756  : 
; 757  : 	va_start ( args, lpszMsgFormat );

  00fab	8d 45 0c	 lea	 eax, DWORD PTR _lpszMsgFormat$[ebp+4]
  00fae	89 45 e4	 mov	 DWORD PTR _args$[ebp], eax

; 758  : 	ptr = lpszMsgFormat;

  00fb1	8b 4d 08	 mov	 ecx, DWORD PTR _lpszMsgFormat$[ebp]
  00fb4	89 4d ec	 mov	 DWORD PTR _ptr$[ebp], ecx

; 759  : 
; 760  : 	unsigned char *pMsgData = &g_nMessage[ 4 ];

  00fb7	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _pMsgData$[ebp], OFFSET FLAT:?g_nMessage@@3PAEA+4
$L143077:

; 761  : 
; 762  : 	while ( *ptr ) {

  00fbe	8b 55 ec	 mov	 edx, DWORD PTR _ptr$[ebp]
  00fc1	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00fc4	85 c0		 test	 eax, eax
  00fc6	0f 84 ac 02 00
	00		 je	 $L143078

; 763  : 		switch ( *ptr ) {

  00fcc	8b 4d ec	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00fcf	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00fd2	89 55 b4	 mov	 DWORD PTR -76+[ebp], edx
  00fd5	8b 45 b4	 mov	 eax, DWORD PTR -76+[ebp]
  00fd8	83 e8 53	 sub	 eax, 83			; 00000053H
  00fdb	89 45 b4	 mov	 DWORD PTR -76+[ebp], eax
  00fde	83 7d b4 24	 cmp	 DWORD PTR -76+[ebp], 36	; 00000024H
  00fe2	0f 87 82 02 00
	00		 ja	 $L143080
  00fe8	8b 55 b4	 mov	 edx, DWORD PTR -76+[ebp]
  00feb	33 c9		 xor	 ecx, ecx
  00fed	8a 8a 00 00 00
	00		 mov	 cl, BYTE PTR $L148659[edx]
  00ff3	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L148660[ecx*4]
$L143083:

; 766  : 				nMsgLen++;

  00ffa	8b 45 e8	 mov	 eax, DWORD PTR _nMsgLen$[ebp]
  00ffd	83 c0 01	 add	 eax, 1
  01000	89 45 e8	 mov	 DWORD PTR _nMsgLen$[ebp], eax

; 767  : 				*pMsgData++ = va_arg ( args, char );

  01003	8b 4d e4	 mov	 ecx, DWORD PTR _args$[ebp]
  01006	83 c1 04	 add	 ecx, 4
  01009	89 4d e4	 mov	 DWORD PTR _args$[ebp], ecx
  0100c	8b 55 f0	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  0100f	8b 45 e4	 mov	 eax, DWORD PTR _args$[ebp]
  01012	8a 48 fc	 mov	 cl, BYTE PTR [eax-4]
  01015	88 0a		 mov	 BYTE PTR [edx], cl
  01017	8b 55 f0	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  0101a	83 c2 01	 add	 edx, 1
  0101d	89 55 f0	 mov	 DWORD PTR _pMsgData$[ebp], edx

; 769  : 
; 770  : 			break;

  01020	e9 45 02 00 00	 jmp	 $L143080
$L143091:

; 774  : 				nMsgLen += 2;

  01025	8b 45 e8	 mov	 eax, DWORD PTR _nMsgLen$[ebp]
  01028	83 c0 02	 add	 eax, 2
  0102b	89 45 e8	 mov	 DWORD PTR _nMsgLen$[ebp], eax

; 775  : 
; 776  : 				unsigned short val = va_arg ( args, short );

  0102e	8b 4d e4	 mov	 ecx, DWORD PTR _args$[ebp]
  01031	83 c1 04	 add	 ecx, 4
  01034	89 4d e4	 mov	 DWORD PTR _args$[ebp], ecx
  01037	8b 55 e4	 mov	 edx, DWORD PTR _args$[ebp]
  0103a	66 8b 42 fc	 mov	 ax, WORD PTR [edx-4]
  0103e	66 89 45 dc	 mov	 WORD PTR _val$143092[ebp], ax

; 777  : 				*pMsgData++ = (unsigned char)(val & 0xFF);

  01042	8b 4d dc	 mov	 ecx, DWORD PTR _val$143092[ebp]
  01045	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0104b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01051	8b 55 f0	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  01054	88 0a		 mov	 BYTE PTR [edx], cl
  01056	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  01059	83 c0 01	 add	 eax, 1
  0105c	89 45 f0	 mov	 DWORD PTR _pMsgData$[ebp], eax

; 778  : 				*pMsgData++ = (unsigned char)(val >> 8);

  0105f	8b 4d dc	 mov	 ecx, DWORD PTR _val$143092[ebp]
  01062	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01068	c1 f9 08	 sar	 ecx, 8
  0106b	8b 55 f0	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  0106e	88 0a		 mov	 BYTE PTR [edx], cl
  01070	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  01073	83 c0 01	 add	 eax, 1
  01076	89 45 f0	 mov	 DWORD PTR _pMsgData$[ebp], eax

; 780  : 
; 781  : 			break;

  01079	e9 ec 01 00 00	 jmp	 $L143080
$L143102:

; 785  : 				nMsgLen += sizeof ( long );

  0107e	8b 4d e8	 mov	 ecx, DWORD PTR _nMsgLen$[ebp]
  01081	83 c1 04	 add	 ecx, 4
  01084	89 4d e8	 mov	 DWORD PTR _nMsgLen$[ebp], ecx

; 786  : 
; 787  : 				long val = va_arg ( args, long );

  01087	8b 55 e4	 mov	 edx, DWORD PTR _args$[ebp]
  0108a	83 c2 04	 add	 edx, 4
  0108d	89 55 e4	 mov	 DWORD PTR _args$[ebp], edx
  01090	8b 45 e4	 mov	 eax, DWORD PTR _args$[ebp]
  01093	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  01096	89 4d d8	 mov	 DWORD PTR _val$143104[ebp], ecx

; 788  : 				*pMsgData++ = (unsigned char)(val & 0xFF);

  01099	8b 55 d8	 mov	 edx, DWORD PTR _val$143104[ebp]
  0109c	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  010a2	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  010a5	88 10		 mov	 BYTE PTR [eax], dl
  010a7	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  010aa	83 c1 01	 add	 ecx, 1
  010ad	89 4d f0	 mov	 DWORD PTR _pMsgData$[ebp], ecx

; 789  : 				*pMsgData++ = (unsigned char)(val >> 8);

  010b0	8b 55 d8	 mov	 edx, DWORD PTR _val$143104[ebp]
  010b3	c1 fa 08	 sar	 edx, 8
  010b6	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  010b9	88 10		 mov	 BYTE PTR [eax], dl
  010bb	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  010be	83 c1 01	 add	 ecx, 1
  010c1	89 4d f0	 mov	 DWORD PTR _pMsgData$[ebp], ecx

; 790  : 				*pMsgData++ = (unsigned char)(val >> 16);

  010c4	8b 55 d8	 mov	 edx, DWORD PTR _val$143104[ebp]
  010c7	c1 fa 10	 sar	 edx, 16			; 00000010H
  010ca	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  010cd	88 10		 mov	 BYTE PTR [eax], dl
  010cf	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  010d2	83 c1 01	 add	 ecx, 1
  010d5	89 4d f0	 mov	 DWORD PTR _pMsgData$[ebp], ecx

; 791  : 				*pMsgData++ = (unsigned char)(val >> 24);

  010d8	8b 55 d8	 mov	 edx, DWORD PTR _val$143104[ebp]
  010db	c1 fa 18	 sar	 edx, 24			; 00000018H
  010de	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  010e1	88 10		 mov	 BYTE PTR [eax], dl
  010e3	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  010e6	83 c1 01	 add	 ecx, 1
  010e9	89 4d f0	 mov	 DWORD PTR _pMsgData$[ebp], ecx

; 793  : 
; 794  : 			break;

  010ec	e9 79 01 00 00	 jmp	 $L143080
$L143116:

; 798  : 				nMsgLen += sizeof ( long );

  010f1	8b 55 e8	 mov	 edx, DWORD PTR _nMsgLen$[ebp]
  010f4	83 c2 04	 add	 edx, 4
  010f7	89 55 e8	 mov	 DWORD PTR _nMsgLen$[ebp], edx

; 799  : 
; 800  : 				long val = va_arg ( args, long );

  010fa	8b 45 e4	 mov	 eax, DWORD PTR _args$[ebp]
  010fd	83 c0 04	 add	 eax, 4
  01100	89 45 e4	 mov	 DWORD PTR _args$[ebp], eax
  01103	8b 4d e4	 mov	 ecx, DWORD PTR _args$[ebp]
  01106	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  01109	89 55 d4	 mov	 DWORD PTR _val$143118[ebp], edx

; 801  : 				*pMsgData++ = (unsigned char)(val & 0xFF);

  0110c	8b 45 d4	 mov	 eax, DWORD PTR _val$143118[ebp]
  0110f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01114	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  01117	88 01		 mov	 BYTE PTR [ecx], al
  01119	8b 55 f0	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  0111c	83 c2 01	 add	 edx, 1
  0111f	89 55 f0	 mov	 DWORD PTR _pMsgData$[ebp], edx

; 802  : 				*pMsgData++ = (unsigned char)(val >> 8);

  01122	8b 45 d4	 mov	 eax, DWORD PTR _val$143118[ebp]
  01125	c1 f8 08	 sar	 eax, 8
  01128	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  0112b	88 01		 mov	 BYTE PTR [ecx], al
  0112d	8b 55 f0	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  01130	83 c2 01	 add	 edx, 1
  01133	89 55 f0	 mov	 DWORD PTR _pMsgData$[ebp], edx

; 803  : 				*pMsgData++ = (unsigned char)(val >> 16);

  01136	8b 45 d4	 mov	 eax, DWORD PTR _val$143118[ebp]
  01139	c1 f8 10	 sar	 eax, 16			; 00000010H
  0113c	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  0113f	88 01		 mov	 BYTE PTR [ecx], al
  01141	8b 55 f0	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  01144	83 c2 01	 add	 edx, 1
  01147	89 55 f0	 mov	 DWORD PTR _pMsgData$[ebp], edx

; 804  : 				*pMsgData++ = (unsigned char)(val >> 24);

  0114a	8b 45 d4	 mov	 eax, DWORD PTR _val$143118[ebp]
  0114d	c1 f8 18	 sar	 eax, 24			; 00000018H
  01150	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  01153	88 01		 mov	 BYTE PTR [ecx], al
  01155	8b 55 f0	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  01158	83 c2 01	 add	 edx, 1
  0115b	89 55 f0	 mov	 DWORD PTR _pMsgData$[ebp], edx

; 806  : 
; 807  : 			break;

  0115e	e9 07 01 00 00	 jmp	 $L143080
$L143130:

; 811  : 				CPackedData *pData = va_arg ( args, CPackedData * );

  01163	8b 45 e4	 mov	 eax, DWORD PTR _args$[ebp]
  01166	83 c0 04	 add	 eax, 4
  01169	89 45 e4	 mov	 DWORD PTR _args$[ebp], eax
  0116c	8b 4d e4	 mov	 ecx, DWORD PTR _args$[ebp]
  0116f	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  01172	89 55 cc	 mov	 DWORD PTR _pData$143131[ebp], edx

; 812  : 				int nSize = pData->Size();

  01175	8b 4d cc	 mov	 ecx, DWORD PTR _pData$143131[ebp]
  01178	e8 00 00 00 00	 call	 ?Size@CPackedData@@QAEHXZ ; CPackedData::Size
  0117d	89 45 d0	 mov	 DWORD PTR _nSize$143139[ebp], eax

; 813  : 
; 814  : 				nMsgLen += nSize;

  01180	8b 45 e8	 mov	 eax, DWORD PTR _nMsgLen$[ebp]
  01183	03 45 d0	 add	 eax, DWORD PTR _nSize$143139[ebp]
  01186	89 45 e8	 mov	 DWORD PTR _nMsgLen$[ebp], eax

; 815  : 
; 816  : 				memcpy ( pMsgData, pData->Data(), nSize );

  01189	8b 4d d0	 mov	 ecx, DWORD PTR _nSize$143139[ebp]
  0118c	51		 push	 ecx
  0118d	8b 4d cc	 mov	 ecx, DWORD PTR _pData$143131[ebp]
  01190	83 c1 04	 add	 ecx, 4
  01193	e8 00 00 00 00	 call	 ?Data@OCArray@@QAEPAEXZ	; OCArray::Data
  01198	50		 push	 eax
  01199	8b 55 f0	 mov	 edx, DWORD PTR _pMsgData$[ebp]
  0119c	52		 push	 edx
  0119d	e8 00 00 00 00	 call	 _memcpy
  011a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 817  : 
; 818  : 				pMsgData += nSize;

  011a5	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  011a8	03 45 d0	 add	 eax, DWORD PTR _nSize$143139[ebp]
  011ab	89 45 f0	 mov	 DWORD PTR _pMsgData$[ebp], eax

; 820  : 
; 821  : 			break;

  011ae	e9 b7 00 00 00	 jmp	 $L143080
$L143140:

; 825  : 				char *pStr = va_arg ( args, char * );

  011b3	8b 4d e4	 mov	 ecx, DWORD PTR _args$[ebp]
  011b6	83 c1 04	 add	 ecx, 4
  011b9	89 4d e4	 mov	 DWORD PTR _args$[ebp], ecx
  011bc	8b 55 e4	 mov	 edx, DWORD PTR _args$[ebp]
  011bf	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  011c2	89 45 c8	 mov	 DWORD PTR _pStr$143141[ebp], eax
$L143150:

; 826  : 
; 827  : 				while ( *pStr ) {

  011c5	8b 4d c8	 mov	 ecx, DWORD PTR _pStr$143141[ebp]
  011c8	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  011cb	85 d2		 test	 edx, edx
  011cd	74 27		 je	 SHORT $L143151

; 828  : 					*pMsgData++ = *pStr++;

  011cf	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  011d2	8b 4d c8	 mov	 ecx, DWORD PTR _pStr$143141[ebp]
  011d5	8a 11		 mov	 dl, BYTE PTR [ecx]
  011d7	88 10		 mov	 BYTE PTR [eax], dl
  011d9	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  011dc	83 c0 01	 add	 eax, 1
  011df	89 45 f0	 mov	 DWORD PTR _pMsgData$[ebp], eax
  011e2	8b 4d c8	 mov	 ecx, DWORD PTR _pStr$143141[ebp]
  011e5	83 c1 01	 add	 ecx, 1
  011e8	89 4d c8	 mov	 DWORD PTR _pStr$143141[ebp], ecx

; 829  : 					nMsgLen++;

  011eb	8b 55 e8	 mov	 edx, DWORD PTR _nMsgLen$[ebp]
  011ee	83 c2 01	 add	 edx, 1
  011f1	89 55 e8	 mov	 DWORD PTR _nMsgLen$[ebp], edx

; 830  : 				}

  011f4	eb cf		 jmp	 SHORT $L143150
$L143151:

; 831  : 
; 832  : 				// terminate the string...
; 833  : 				*pMsgData++ = 0;

  011f6	8b 45 f0	 mov	 eax, DWORD PTR _pMsgData$[ebp]
  011f9	c6 00 00	 mov	 BYTE PTR [eax], 0
  011fc	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  011ff	83 c1 01	 add	 ecx, 1
  01202	89 4d f0	 mov	 DWORD PTR _pMsgData$[ebp], ecx

; 834  : 				nMsgLen++;

  01205	8b 55 e8	 mov	 edx, DWORD PTR _nMsgLen$[ebp]
  01208	83 c2 01	 add	 edx, 1
  0120b	89 55 e8	 mov	 DWORD PTR _nMsgLen$[ebp], edx

; 836  : 
; 837  : 			break;

  0120e	eb 5a		 jmp	 SHORT $L143080
$L143152:

; 841  : 				int nStrLen = va_arg ( args, int );

  01210	8b 45 e4	 mov	 eax, DWORD PTR _args$[ebp]
  01213	83 c0 04	 add	 eax, 4
  01216	89 45 e4	 mov	 DWORD PTR _args$[ebp], eax
  01219	8b 4d e4	 mov	 ecx, DWORD PTR _args$[ebp]
  0121c	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0121f	89 55 c0	 mov	 DWORD PTR _nStrLen$143153[ebp], edx

; 842  : 				char *pStr = va_arg ( args, char * );

  01222	8b 45 e4	 mov	 eax, DWORD PTR _args$[ebp]
  01225	83 c0 04	 add	 eax, 4
  01228	89 45 e4	 mov	 DWORD PTR _args$[ebp], eax
  0122b	8b 4d e4	 mov	 ecx, DWORD PTR _args$[ebp]
  0122e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  01231	89 55 c4	 mov	 DWORD PTR _pStr$143161[ebp], edx

; 843  : 
; 844  : 				nMsgLen += nStrLen;

  01234	8b 45 e8	 mov	 eax, DWORD PTR _nMsgLen$[ebp]
  01237	03 45 c0	 add	 eax, DWORD PTR _nStrLen$143153[ebp]
  0123a	89 45 e8	 mov	 DWORD PTR _nMsgLen$[ebp], eax
$L143170:

; 845  : 
; 846  : 				while ( nStrLen ) {

  0123d	83 7d c0 00	 cmp	 DWORD PTR _nStrLen$143153[ebp], 0
  01241	74 27		 je	 SHORT $L143171

; 847  : 					*pMsgData++ = *pStr++;

  01243	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  01246	8b 55 c4	 mov	 edx, DWORD PTR _pStr$143161[ebp]
  01249	8a 02		 mov	 al, BYTE PTR [edx]
  0124b	88 01		 mov	 BYTE PTR [ecx], al
  0124d	8b 4d f0	 mov	 ecx, DWORD PTR _pMsgData$[ebp]
  01250	83 c1 01	 add	 ecx, 1
  01253	89 4d f0	 mov	 DWORD PTR _pMsgData$[ebp], ecx
  01256	8b 55 c4	 mov	 edx, DWORD PTR _pStr$143161[ebp]
  01259	83 c2 01	 add	 edx, 1
  0125c	89 55 c4	 mov	 DWORD PTR _pStr$143161[ebp], edx

; 848  : 					nStrLen--;

  0125f	8b 45 c0	 mov	 eax, DWORD PTR _nStrLen$143153[ebp]
  01262	83 e8 01	 sub	 eax, 1
  01265	89 45 c0	 mov	 DWORD PTR _nStrLen$143153[ebp], eax

; 849  : 				}

  01268	eb d3		 jmp	 SHORT $L143170
$L143171:
$L143080:

; 854  : 
; 855  : 		ptr++;

  0126a	8b 4d ec	 mov	 ecx, DWORD PTR _ptr$[ebp]
  0126d	83 c1 01	 add	 ecx, 1
  01270	89 4d ec	 mov	 DWORD PTR _ptr$[ebp], ecx

; 856  : 	}

  01273	e9 46 fd ff ff	 jmp	 $L143077
$L143078:

; 857  : 
; 858  : 	if ( nMsgLen == 0 )

  01278	83 7d e8 00	 cmp	 DWORD PTR _nMsgLen$[ebp], 0
  0127c	75 07		 jne	 SHORT $L143172

; 859  : 		return 0;

  0127e	33 c0		 xor	 eax, eax
  01280	e9 93 00 00 00	 jmp	 $L143068
$L143172:

; 860  : 
; 861  : 	// add the 32-bit message length to the overall size
; 862  : 	nMsgLen += 11;	// Add 4 for length and then add 7 and make a multiple of 4

  01285	8b 55 e8	 mov	 edx, DWORD PTR _nMsgLen$[ebp]
  01288	83 c2 0b	 add	 edx, 11			; 0000000bH
  0128b	89 55 e8	 mov	 DWORD PTR _nMsgLen$[ebp], edx

; 863  : 	nMsgLen &= 0xfffffffc;

  0128e	8b 45 e8	 mov	 eax, DWORD PTR _nMsgLen$[ebp]
  01291	24 fc		 and	 al, -4			; fffffffcH
  01293	89 45 e8	 mov	 DWORD PTR _nMsgLen$[ebp], eax

; 864  : 
; 865  : 	// Allocate a ByteArray in which to put the message.
; 866  : 	Array message( nMsgLen, BYTEARRAY );

  01296	6a 02		 push	 2
  01298	8b 4d e8	 mov	 ecx, DWORD PTR _nMsgLen$[ebp]
  0129b	51		 push	 ecx
  0129c	8d 4d e0	 lea	 ecx, DWORD PTR _message$[ebp]
  0129f	e8 00 00 00 00	 call	 ??0Array@@QAE@HW4ArrayType@@@Z ; Array::Array
  012a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 867  : 
; 868  : 	// calc/set the data length...
; 869  : 	*( (int*) g_nMessage) = nMsgLen - 8;

  012ab	8b 55 e8	 mov	 edx, DWORD PTR _nMsgLen$[ebp]
  012ae	83 ea 08	 sub	 edx, 8
  012b1	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nMessage@@3PAEA, edx

; 870  : 
; 871  : 	g_pEncryption( (int*) g_nMessage, (int*) message.calcAddress( 0 ) );

  012b7	6a 00		 push	 0
  012b9	8d 4d e0	 lea	 ecx, DWORD PTR _message$[ebp]
  012bc	e8 00 00 00 00	 call	 ?calcAddress@Array@@QAEPAXH@Z ; Array::calcAddress
  012c1	8b d0		 mov	 edx, eax
  012c3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_nMessage@@3PAEA ; g_nMessage
  012c8	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pEncryption@@3P6IHPAH0@ZA ; g_pEncryption

; 872  : 
; 873  : #ifdef DUMP_MESSAGE
; 874  : 	DumpData( "U_SEND", nMsgLen, &g_nMessage[4] );
; 875  : 	DumpData( "E_SEND", nMsgLen, (unsigned char*) message.calcAddress ( 4 ) );
; 876  : #endif
; 877  : 
; 878  : 	netOutgoing.addToEnd ( message.dataID() );

  012ce	8d 45 bc	 lea	 eax, DWORD PTR $T148653[ebp]
  012d1	50		 push	 eax
  012d2	8d 4d e0	 lea	 ecx, DWORD PTR _message$[ebp]
  012d5	e8 00 00 00 00	 call	 ?dataID@Array@@QAE?AVMemID@@XZ ; Array::dataID
  012da	8b c8		 mov	 ecx, eax
  012dc	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  012e1	50		 push	 eax
  012e2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netOutgoing@@3VSOL_List@@A
  012e7	e8 00 00 00 00	 call	 ?addToEnd@SOL_List@@QAEXG@Z ; SOL_List::addToEnd

; 879  : 
; 880  : 	memset( g_nMessage, 0, nMsgLen );

  012ec	8b 4d e8	 mov	 ecx, DWORD PTR _nMsgLen$[ebp]
  012ef	51		 push	 ecx
  012f0	6a 00		 push	 0
  012f2	68 00 00 00 00	 push	 OFFSET FLAT:?g_nMessage@@3PAEA ; g_nMessage
  012f7	e8 00 00 00 00	 call	 _memset
  012fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 881  : 
; 882  : 	return 1;

  012ff	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR $T148654[ebp], 1
  01306	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0130d	8d 4d e0	 lea	 ecx, DWORD PTR _message$[ebp]
  01310	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  01315	8b 45 b8	 mov	 eax, DWORD PTR $T148654[ebp]
$L143068:

; 883  : }

  01318	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0131b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01322	8b e5		 mov	 esp, ebp
  01324	5d		 pop	 ebp
  01325	c3		 ret	 0
$L148660:
  01326	00 00 00 00	 DD	 $L143152
  0132a	00 00 00 00	 DD	 $L143083
  0132e	00 00 00 00	 DD	 $L143102
  01332	00 00 00 00	 DD	 $L143130
  01336	00 00 00 00	 DD	 $L143140
  0133a	00 00 00 00	 DD	 $L143116
  0133e	00 00 00 00	 DD	 $L143091
  01342	00 00 00 00	 DD	 $L143080
$L148659:
  01346	00		 DB	 0
  01347	07		 DB	 7
  01348	07		 DB	 7
  01349	07		 DB	 7
  0134a	07		 DB	 7
  0134b	07		 DB	 7
  0134c	07		 DB	 7
  0134d	07		 DB	 7
  0134e	07		 DB	 7
  0134f	07		 DB	 7
  01350	07		 DB	 7
  01351	07		 DB	 7
  01352	07		 DB	 7
  01353	07		 DB	 7
  01354	07		 DB	 7
  01355	01		 DB	 1
  01356	07		 DB	 7
  01357	07		 DB	 7
  01358	07		 DB	 7
  01359	07		 DB	 7
  0135a	07		 DB	 7
  0135b	07		 DB	 7
  0135c	07		 DB	 7
  0135d	07		 DB	 7
  0135e	07		 DB	 7
  0135f	02		 DB	 2
  01360	07		 DB	 7
  01361	07		 DB	 7
  01362	07		 DB	 7
  01363	03		 DB	 3
  01364	07		 DB	 7
  01365	07		 DB	 7
  01366	04		 DB	 4
  01367	05		 DB	 5
  01368	07		 DB	 7
  01369	07		 DB	 7
  0136a	06		 DB	 6
_TEXT	ENDS
text$x	SEGMENT
$L148655:
  00041	8d 4d e0	 lea	 ecx, DWORD PTR _message$[ebp]
  00044	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00049	c3		 ret	 0
$L148658:
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T148657
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CNetSend@@YAHPADZZ ENDP				; CNetSend
;	COMDAT ?Data@OCArray@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4
?Data@OCArray@@QAEPAEXZ PROC NEAR			; OCArray::Data, COMDAT

; 56   : 	inline unsigned char *Data ( void ) { return m_pData; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?Data@OCArray@@QAEPAEXZ ENDP				; OCArray::Data
_TEXT	ENDS
;	COMDAT ?Size@CPackedData@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?Size@CPackedData@@QAEHXZ PROC NEAR			; CPackedData::Size, COMDAT

; 37   : 	inline int Size ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 		if ( !this )

  00007	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000b	75 04		 jne	 SHORT $L119796

; 39   : 			return 0;

  0000d	33 c0		 xor	 eax, eax
  0000f	eb 06		 jmp	 SHORT $L119795
$L119796:

; 40   : 
; 41   : 		return m_nSize;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
$L119795:

; 42   : 	};

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?Size@CPackedData@@QAEHXZ ENDP				; CPackedData::Size
_TEXT	ENDS
xdata$x	SEGMENT
$T148669 DD	019930520H
	DD	01H
	DD	FLAT:$T148671
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T148671 DD	0ffffffffH
	DD	FLAT:$L148667
xdata$x	ENDS
_TEXT	SEGMENT
$T148665 = -20
$T148666 = -24
__$EHRec$ = -12
_nSize$ = -28
_pSrc$ = -32
_message$ = -16
?CNetFastSend@@YIHHPAE@Z PROC NEAR			; CNetFastSend

; 885  : int __fastcall CNetFastSend( int nSize, unsigned char* pSrc ){

  0136b	55		 push	 ebp
  0136c	8b ec		 mov	 ebp, esp
  0136e	6a ff		 push	 -1
  01370	68 00 00 00 00	 push	 $L148670
  01375	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0137b	50		 push	 eax
  0137c	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01383	83 ec 14	 sub	 esp, 20			; 00000014H
  01386	89 55 e0	 mov	 DWORD PTR _pSrc$[ebp], edx
  01389	89 4d e4	 mov	 DWORD PTR _nSize$[ebp], ecx

; 886  : 	// Allocate a ByteArray in which to put the message.
; 887  : 	Array message( nSize, BYTEARRAY );

  0138c	6a 02		 push	 2
  0138e	8b 45 e4	 mov	 eax, DWORD PTR _nSize$[ebp]
  01391	50		 push	 eax
  01392	8d 4d f0	 lea	 ecx, DWORD PTR _message$[ebp]
  01395	e8 00 00 00 00	 call	 ??0Array@@QAE@HW4ArrayType@@@Z ; Array::Array
  0139a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 888  : 
; 889  : 	g_pEncryption( (int*) pSrc, (int*) message.calcAddress( 0 ) );

  013a1	6a 00		 push	 0
  013a3	8d 4d f0	 lea	 ecx, DWORD PTR _message$[ebp]
  013a6	e8 00 00 00 00	 call	 ?calcAddress@Array@@QAEPAXH@Z ; Array::calcAddress
  013ab	8b d0		 mov	 edx, eax
  013ad	8b 4d e0	 mov	 ecx, DWORD PTR _pSrc$[ebp]
  013b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pEncryption@@3P6IHPAH0@ZA ; g_pEncryption

; 890  : 
; 891  : #ifdef DUMP_MESSAGE
; 892  : 	DumpData( "U_SEND", nSize, &pSrc[4] );
; 893  : 	DumpData( "E_SEND", nSize, (unsigned char*) message.calcAddress ( 4 ) );
; 894  : #endif
; 895  : 
; 896  : 	netOutgoing.addToEnd ( message.dataID() );

  013b6	8d 4d ec	 lea	 ecx, DWORD PTR $T148665[ebp]
  013b9	51		 push	 ecx
  013ba	8d 4d f0	 lea	 ecx, DWORD PTR _message$[ebp]
  013bd	e8 00 00 00 00	 call	 ?dataID@Array@@QAE?AVMemID@@XZ ; Array::dataID
  013c2	8b c8		 mov	 ecx, eax
  013c4	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  013c9	50		 push	 eax
  013ca	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netOutgoing@@3VSOL_List@@A
  013cf	e8 00 00 00 00	 call	 ?addToEnd@SOL_List@@QAEXG@Z ; SOL_List::addToEnd

; 897  : 
; 898  : 	return 1;

  013d4	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR $T148666[ebp], 1
  013db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  013e2	8d 4d f0	 lea	 ecx, DWORD PTR _message$[ebp]
  013e5	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  013ea	8b 45 e8	 mov	 eax, DWORD PTR $T148666[ebp]

; 899  : }

  013ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  013f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  013f7	8b e5		 mov	 esp, ebp
  013f9	5d		 pop	 ebp
  013fa	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L148667:
  00054	8d 4d f0	 lea	 ecx, DWORD PTR _message$[ebp]
  00057	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  0005c	c3		 ret	 0
$L148670:
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T148669
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CNetFastSend@@YIHHPAE@Z ENDP				; CNetFastSend
PUBLIC	??0ArrayID@@QAE@AAVMemID@@@Z			; ArrayID::ArrayID
EXTRN	_ioctlsocket@12:NEAR
EXTRN	_recv@16:NEAR
EXTRN	_select@20:NEAR
_BSS	SEGMENT
_?packet@?1??PollSocket@@YAHXZ@4UArrayID@@A DW 01H DUP (?)
	ALIGN	4

_?$S300@?1??PollSocket@@YAHXZ@4EA DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
	ORG $+3
$SG143217 DB	'NETERR: Your connection to the realm server has dropped.'
	DB	' This program will exit now and you will have to relaunch it '
	DB	'to re-establish your connection.', 00H
	ORG $+2
$SG143227 DB	'NETERR: Unable to recieve message size (error code = %d)'
	DB	00H
	ORG $+3
$SG143230 DB	'PollSocket: message size is too big %d', 00H
	ORG $+1
$SG143242 DB	'NETERR: Network Error: Unable to recieve message data (e'
	DB	'rror code = %d)', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T148681 DD	019930520H
	DD	02H
	DD	FLAT:$T148683
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T148683 DD	0ffffffffH
	DD	FLAT:$L148678
	DD	0ffffffffH
	DD	FLAT:$L148679
xdata$x	ENDS
_TEXT	SEGMENT
$T148673 = -312
$T148674 = -316
$T148675 = -320
__$EHRec$ = -12
_len$ = -16
_retVal$ = -20
_mySet$143212 = -280
_myTime$143213 = -288
_numRead$143224 = -292
_msg$143231 = -296
_msg$143236 = -308
_numToRead$143238 = -304
_numRead$143239 = -300
?PollSocket@@YAHXZ PROC NEAR				; PollSocket

; 904  : int PollSocket ( void ) {

  013fb	55		 push	 ebp
  013fc	8b ec		 mov	 ebp, esp
  013fe	6a ff		 push	 -1
  01400	68 00 00 00 00	 push	 $L148682
  01405	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0140b	50		 push	 eax
  0140c	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01413	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  01419	56		 push	 esi

; 905  : 	static int msgSize = 0;		// number of bytes remaining in this packet
; 906  : 	static int index = 0;		// index into the packet we are building
; 907  : 	static ArrayID packet = 0;	// packet we are building

  0141a	33 c0		 xor	 eax, eax
  0141c	a0 00 00 00 00	 mov	 al, BYTE PTR _?$S300@?1??PollSocket@@YAHXZ@4EA
  01421	83 e0 01	 and	 eax, 1
  01424	85 c0		 test	 eax, eax
  01426	75 28		 jne	 SHORT $L143199
  01428	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _?$S300@?1??PollSocket@@YAHXZ@4EA
  0142e	80 c9 01	 or	 cl, 1
  01431	88 0d 00 00 00
	00		 mov	 BYTE PTR _?$S300@?1??PollSocket@@YAHXZ@4EA, cl
  01437	6a 00		 push	 0
  01439	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_?packet@?1??PollSocket@@YAHXZ@4UArrayID@@A
  0143e	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  01443	68 00 00 00 00	 push	 OFFSET FLAT:_$E301
  01448	e8 00 00 00 00	 call	 _atexit
  0144d	83 c4 04	 add	 esp, 4
$L143199:

; 908  : 	static int count = 0;
; 909  : 	static int sizeLeft = 4;
; 910  : 	static int sizeIndex = 0;
; 911  : 	static int callCount = 0;
; 912  : 	unsigned long len = 0;					// bytes in this chunk

  01450	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0

; 913  : 	int retVal = 0;

  01457	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 0

; 914  : 
; 915  : 	if ( netSocket != -1 ) {

  0145e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?netSocket@@3IA, -1 ; netSocket
  01465	74 7a		 je	 SHORT $L143216

; 916  : 		fd_set mySet;
; 917  : 		struct timeval myTime = { 0, 0 };

  01467	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _myTime$143213[ebp], 0
  01471	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _myTime$143213[ebp+4], 0

; 918  : 
; 919  : 		mySet.fd_count = 1;

  0147b	c7 85 e8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _mySet$143212[ebp], 1

; 920  : 		mySet.fd_array[0] = netSocket;

  01485	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?netSocket@@3IA ; netSocket
  0148b	89 95 ec fe ff
	ff		 mov	 DWORD PTR _mySet$143212[ebp+4], edx

; 921  : 
; 922  : 		select ( 1, &mySet, NULL, NULL, &myTime );

  01491	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _myTime$143213[ebp]
  01497	50		 push	 eax
  01498	6a 00		 push	 0
  0149a	6a 00		 push	 0
  0149c	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _mySet$143212[ebp]
  014a2	51		 push	 ecx
  014a3	6a 01		 push	 1
  014a5	e8 00 00 00 00	 call	 _select@20

; 923  : 
; 924  : 		ioctlsocket ( netSocket, FIONREAD, &len ); 

  014aa	8d 55 f0	 lea	 edx, DWORD PTR _len$[ebp]
  014ad	52		 push	 edx
  014ae	68 7f 66 04 40	 push	 1074030207		; 4004667fH
  014b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?netSocket@@3IA ; netSocket
  014b8	50		 push	 eax
  014b9	e8 00 00 00 00	 call	 _ioctlsocket@12

; 925  : 
; 926  : 		if ( mySet.fd_count && !len ) {

  014be	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _mySet$143212[ebp], 0
  014c5	74 1a		 je	 SHORT $L143216
  014c7	83 7d f0 00	 cmp	 DWORD PTR _len$[ebp], 0
  014cb	75 14		 jne	 SHORT $L143216

; 927  : 			msgMgr->Fatal ( "NETERR: Your connection to the realm server has dropped. This program will exit now and you will have to relaunch it to re-establish your connection." );

  014cd	68 00 00 00 00	 push	 OFFSET FLAT:$SG143217
  014d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  014d8	51		 push	 ecx
  014d9	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  014de	83 c4 08	 add	 esp, 8
$L143216:

; 930  : 
; 931  : 	if ( len ) {

  014e1	83 7d f0 00	 cmp	 DWORD PTR _len$[ebp], 0
  014e5	0f 84 90 02 00
	00		 je	 $L143220

; 932  : 		switch ( netState ) {

  014eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?netState@@3HA ; netState
  014f1	89 95 bc fe ff
	ff		 mov	 DWORD PTR -324+[ebp], edx
  014f7	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR -324+[ebp], 0
  014fe	74 12		 je	 SHORT $L143223
  01500	83 bd bc fe ff
	ff 01		 cmp	 DWORD PTR -324+[ebp], 1
  01507	0f 84 3b 01 00
	00		 je	 $L143235
  0150d	e9 69 02 00 00	 jmp	 $L143220
$L143223:

; 934  : 				retVal = 1;

  01512	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 1

; 935  : 
; 936  : 				int numRead = recv ( netSocket, ((char *)&msgSize) + sizeIndex, sizeLeft, 0 );

  01519	6a 00		 push	 0
  0151b	a1 00 00 00 00	 mov	 eax, DWORD PTR _?sizeLeft@?1??PollSocket@@YAHXZ@4HA
  01520	50		 push	 eax
  01521	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?sizeIndex@?1??PollSocket@@YAHXZ@4HA
  01527	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:_?msgSize@?1??PollSocket@@YAHXZ@4HA
  0152d	51		 push	 ecx
  0152e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?netSocket@@3IA ; netSocket
  01534	52		 push	 edx
  01535	e8 00 00 00 00	 call	 _recv@16
  0153a	89 85 dc fe ff
	ff		 mov	 DWORD PTR _numRead$143224[ebp], eax

; 937  : 
; 938  : 				if ( numRead < 0 )

  01540	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _numRead$143224[ebp], 0
  01547	7d 19		 jge	 SHORT $L143226

; 939  : 					msgMgr->Fatal ( "NETERR: Unable to recieve message size (error code = %d)", WSAGetLastError() );

  01549	e8 00 00 00 00	 call	 _WSAGetLastError@0
  0154e	50		 push	 eax
  0154f	68 00 00 00 00	 push	 OFFSET FLAT:$SG143227
  01554	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01559	50		 push	 eax
  0155a	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  0155f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L143226:

; 940  : 
; 941  : 				sizeLeft -= numRead;

  01562	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?sizeLeft@?1??PollSocket@@YAHXZ@4HA
  01568	2b 8d dc fe ff
	ff		 sub	 ecx, DWORD PTR _numRead$143224[ebp]
  0156e	89 0d 00 00 00
	00		 mov	 DWORD PTR _?sizeLeft@?1??PollSocket@@YAHXZ@4HA, ecx

; 942  : 				sizeIndex += numRead;

  01574	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _?sizeIndex@?1??PollSocket@@YAHXZ@4HA
  0157a	03 95 dc fe ff
	ff		 add	 edx, DWORD PTR _numRead$143224[ebp]
  01580	89 15 00 00 00
	00		 mov	 DWORD PTR _?sizeIndex@?1??PollSocket@@YAHXZ@4HA, edx

; 943  : 
; 944  : 				if ( !sizeLeft ) {

  01586	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _?sizeLeft@?1??PollSocket@@YAHXZ@4HA, 0
  0158d	0f 85 b0 00 00
	00		 jne	 $L143228

; 945  : //					msgSize = htonl ( msgSize ) + 4;
; 946  : 					msgSize += 4;

  01593	a1 00 00 00 00	 mov	 eax, DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA
  01598	83 c0 04	 add	 eax, 4
  0159b	a3 00 00 00 00	 mov	 DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA, eax

; 947  : 
; 948  : 					if ( msgSize > 0x0000ffff )

  015a0	81 3d 00 00 00
	00 ff ff 00 00	 cmp	 DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA, 65535 ; 0000ffffH
  015aa	7e 1b		 jle	 SHORT $L143229

; 949  : 						msgMgr->Fatal ( "PollSocket: message size is too big %d", msgSize );

  015ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA
  015b2	51		 push	 ecx
  015b3	68 00 00 00 00	 push	 OFFSET FLAT:$SG143230
  015b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  015be	52		 push	 edx
  015bf	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  015c4	83 c4 0c	 add	 esp, 12			; 0000000cH
$L143229:

; 950  : 
; 951  : 					// build the array to hold the message
; 952  : 					Array msg ( msgSize, BYTEARRAY );

  015c7	6a 02		 push	 2
  015c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA
  015ce	50		 push	 eax
  015cf	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143231[ebp]
  015d5	e8 00 00 00 00	 call	 ??0Array@@QAE@HW4ArrayType@@@Z ; Array::Array
  015da	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 953  : 					packet = (ArrayID)msg.dataID();

  015e1	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T148674[ebp]
  015e7	51		 push	 ecx
  015e8	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143231[ebp]
  015ee	e8 00 00 00 00	 call	 ?dataID@Array@@QAE?AVMemID@@XZ ; Array::dataID
  015f3	50		 push	 eax
  015f4	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T148673[ebp]
  015fa	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@AAVMemID@@@Z ; ArrayID::ArrayID
  015ff	66 8b 10	 mov	 dx, WORD PTR [eax]
  01602	66 89 15 00 00
	00 00		 mov	 WORD PTR _?packet@?1??PollSocket@@YAHXZ@4UArrayID@@A, dx

; 954  : 
; 955  : 					index = 0;

  01609	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _?index@?1??PollSocket@@YAHXZ@4HA, 0

; 956  : 					sizeLeft = 4;

  01613	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR _?sizeLeft@?1??PollSocket@@YAHXZ@4HA, 4

; 957  : 					sizeIndex = 0;

  0161d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _?sizeIndex@?1??PollSocket@@YAHXZ@4HA, 0

; 958  : 
; 959  : 					netState = _NET_RCVDATA;

  01627	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?netState@@3HA, 1 ; netState

; 960  : 				}

  01631	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01638	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143231[ebp]
  0163e	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
$L143228:

; 962  : 
; 963  : 			break;

  01643	e9 33 01 00 00	 jmp	 $L143220
$L143235:

; 966  : 				retVal = 1;

  01648	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 1

; 967  : 				Array msg ( packet );

  0164f	51		 push	 ecx
  01650	8b cc		 mov	 ecx, esp
  01652	89 a5 c0 fe ff
	ff		 mov	 DWORD PTR $T148675[ebp], esp
  01658	68 00 00 00 00	 push	 OFFSET FLAT:_?packet@?1??PollSocket@@YAHXZ@4UArrayID@@A
  0165d	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01662	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143236[ebp]
  01668	e8 00 00 00 00	 call	 ??0Array@@QAE@VMemID@@@Z ; Array::Array
  0166d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 968  : 
; 969  : 				int numToRead = (len > msgSize)? msgSize : len;

  01674	8b 45 f0	 mov	 eax, DWORD PTR _len$[ebp]
  01677	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA
  0167d	76 0e		 jbe	 SHORT $L148676
  0167f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA
  01685	89 8d b8 fe ff
	ff		 mov	 DWORD PTR -328+[ebp], ecx
  0168b	eb 09		 jmp	 SHORT $L148677
$L148676:
  0168d	8b 55 f0	 mov	 edx, DWORD PTR _len$[ebp]
  01690	89 95 b8 fe ff
	ff		 mov	 DWORD PTR -328+[ebp], edx
$L148677:
  01696	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR -328+[ebp]
  0169c	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _numToRead$143238[ebp], eax

; 970  : 
; 971  : 				int numRead = recv ( netSocket, (char *)msg.calcAddress ( index ), numToRead, 0 );

  016a2	6a 00		 push	 0
  016a4	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _numToRead$143238[ebp]
  016aa	51		 push	 ecx
  016ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _?index@?1??PollSocket@@YAHXZ@4HA
  016b1	52		 push	 edx
  016b2	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143236[ebp]
  016b8	e8 00 00 00 00	 call	 ?calcAddress@Array@@QAEPAXH@Z ; Array::calcAddress
  016bd	50		 push	 eax
  016be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?netSocket@@3IA ; netSocket
  016c3	50		 push	 eax
  016c4	e8 00 00 00 00	 call	 _recv@16
  016c9	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _numRead$143239[ebp], eax

; 972  : 
; 973  : 				if ( numRead < 0 )

  016cf	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _numRead$143239[ebp], 0
  016d6	7d 1a		 jge	 SHORT $L143241

; 974  : 					msgMgr->Fatal ( "NETERR: Network Error: Unable to recieve message data (error code = %d)", WSAGetLastError() );

  016d8	e8 00 00 00 00	 call	 _WSAGetLastError@0
  016dd	50		 push	 eax
  016de	68 00 00 00 00	 push	 OFFSET FLAT:$SG143242
  016e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  016e9	51		 push	 ecx
  016ea	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  016ef	83 c4 0c	 add	 esp, 12			; 0000000cH
$L143241:

; 975  : 
; 976  : 				msgSize -= numRead;

  016f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA
  016f8	2b 95 d4 fe ff
	ff		 sub	 edx, DWORD PTR _numRead$143239[ebp]
  016fe	89 15 00 00 00
	00		 mov	 DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA, edx

; 977  : 
; 978  : 				if ( msgSize ) {

  01704	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _?msgSize@?1??PollSocket@@YAHXZ@4HA, 0
  0170b	74 12		 je	 SHORT $L143243

; 979  : 					index += numRead;

  0170d	a1 00 00 00 00	 mov	 eax, DWORD PTR _?index@?1??PollSocket@@YAHXZ@4HA
  01712	03 85 d4 fe ff
	ff		 add	 eax, DWORD PTR _numRead$143239[ebp]
  01718	a3 00 00 00 00	 mov	 DWORD PTR _?index@?1??PollSocket@@YAHXZ@4HA, eax

; 980  : 				} else {

  0171d	eb 4a		 jmp	 SHORT $L143244
$L143243:

; 981  : #ifdef DUMP_MESSAGE
; 982  : // -- MonoOut for received msg.
; 983  : 					DumpData( "E_RECV", msg.size(), (unsigned char*) msg.calcAddress ( 0 ) );
; 984  : // --
; 985  : #endif
; 986  : 					g_pDecryption( (int*) ( msg.size() ), (int*) msg.calcAddress( 0 ) );

  0171f	6a 00		 push	 0
  01721	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143236[ebp]
  01727	e8 00 00 00 00	 call	 ?calcAddress@Array@@QAEPAXH@Z ; Array::calcAddress
  0172c	8b f0		 mov	 esi, eax
  0172e	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143236[ebp]
  01734	e8 00 00 00 00	 call	 ?size@Array@@QAEGXZ	; Array::size
  01739	66 8b c8	 mov	 cx, ax
  0173c	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  01742	8b d6		 mov	 edx, esi
  01744	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pDecryption@@3P6IHPAH0@ZA ; g_pDecryption

; 987  : #ifdef DUMP_MESSAGE
; 988  : // -- MonoOut for received msg.
; 989  : 					DumpData( "U_RECV", msg.size(), (unsigned char*) msg.calcAddress ( 0 ) );
; 990  : // --
; 991  : #endif
; 992  : 
; 993  : 					netIncoming.addToEnd ( packet );

  0174a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_?packet@?1??PollSocket@@YAHXZ@4UArrayID@@A
  0174f	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01754	50		 push	 eax
  01755	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netIncoming@@3VSOL_List@@A
  0175a	e8 00 00 00 00	 call	 ?addToEnd@SOL_List@@QAEXG@Z ; SOL_List::addToEnd

; 994  : 					netState = _NET_RCVSIZE;

  0175f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?netState@@3HA, 0 ; netState
$L143244:

; 996  : 			}

  01769	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01770	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143236[ebp]
  01776	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
$L143220:

; 1001 : 
; 1002 : 	return retVal;

  0177b	8b 45 ec	 mov	 eax, DWORD PTR _retVal$[ebp]

; 1003 : }

  0177e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01781	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01788	5e		 pop	 esi
  01789	8b e5		 mov	 esp, ebp
  0178b	5d		 pop	 ebp
  0178c	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L148678:
  00067	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143231[ebp]
  0006d	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00072	c3		 ret	 0
$L148679:
  00073	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _msg$143236[ebp]
  00079	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  0007e	c3		 ret	 0
$L148682:
  0007f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T148681
  00084	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?PollSocket@@YAHXZ ENDP					; PollSocket
PUBLIC	??0FakeArrayID@@QAE@ABVMemID@@@Z		; FakeArrayID::FakeArrayID
;	COMDAT ??0ArrayID@@QAE@AAVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ArrayID@@QAE@AAVMemID@@@Z PROC NEAR			; ArrayID::ArrayID, COMDAT

; 37   : 	ArrayID(MemID& id) : FakeArrayID(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeArrayID@@QAE@ABVMemID@@@Z ; FakeArrayID::FakeArrayID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ArrayID@@QAE@AAVMemID@@@Z ENDP			; ArrayID::ArrayID
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0FakeArrayID@@QAE@ABVMemID@@@Z PROC NEAR		; FakeArrayID::FakeArrayID, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeArrayID@@QAE@ABVMemID@@@Z ENDP			; FakeArrayID::FakeArrayID
_TEXT	ENDS
_TEXT	SEGMENT
_$E301	PROC NEAR
  0178d	55		 push	 ebp
  0178e	8b ec		 mov	 ebp, esp
  01790	5d		 pop	 ebp
  01791	c3		 ret	 0
_$E301	ENDP
_TEXT	ENDS
PUBLIC	?NetTerminate@@YAXXZ				; NetTerminate
EXTRN	_send@16:NEAR
_TEXT	SEGMENT
_msg$ = -8
?NetTerminate@@YAXXZ PROC NEAR				; NetTerminate

; 1005 : void NetTerminate ( void ) {

  01792	55		 push	 ebp
  01793	8b ec		 mov	 ebp, esp
  01795	83 ec 08	 sub	 esp, 8

; 1006 : 	int msg[2] = { 0, -1 };

  01798	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _msg$[ebp], 0
  0179f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _msg$[ebp+4], -1
$L143253:

; 1007 : 
; 1008 : 	while ( netOutgoing.size() ) 

  017a6	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netOutgoing@@3VSOL_List@@A
  017ab	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  017b0	83 38 00	 cmp	 DWORD PTR [eax], 0
  017b3	74 07		 je	 SHORT $L143254

; 1009 : 		FlushSocket();

  017b5	e8 00 00 00 00	 call	 ?FlushSocket@@YAXXZ	; FlushSocket
  017ba	eb ea		 jmp	 SHORT $L143253
$L143254:

; 1010 : 
; 1011 : 	send ( netSocket, (char *)&msg, 8, 0 );

  017bc	6a 00		 push	 0
  017be	6a 08		 push	 8
  017c0	8d 45 f8	 lea	 eax, DWORD PTR _msg$[ebp]
  017c3	50		 push	 eax
  017c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?netSocket@@3IA ; netSocket
  017ca	51		 push	 ecx
  017cb	e8 00 00 00 00	 call	 _send@16

; 1012 : }

  017d0	8b e5		 mov	 esp, ebp
  017d2	5d		 pop	 ebp
  017d3	c3		 ret	 0
?NetTerminate@@YAXXZ ENDP				; NetTerminate
_TEXT	ENDS
_DATA	SEGMENT
$SG143269 DB	'NETERR: Could not send network message.  The server you '
	DB	'were connected to has dropped its end of the connection.', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T148695 DD	019930520H
	DD	01H
	DD	FLAT:$T148697
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T148697 DD	0ffffffffH
	DD	FLAT:$L148693
xdata$x	ENDS
_TEXT	SEGMENT
$T148689 = -24
$T148690 = -28
$T148691 = -32
$T148692 = -36
__$EHRec$ = -12
_msg$143262 = -16
_result$143266 = -20
?FlushSocket@@YAXXZ PROC NEAR				; FlushSocket

; 1015 : void FlushSocket ( void ) {

  017d4	55		 push	 ebp
  017d5	8b ec		 mov	 ebp, esp
  017d7	6a ff		 push	 -1
  017d9	68 00 00 00 00	 push	 $L148696
  017de	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  017e4	50		 push	 eax
  017e5	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  017ec	83 ec 18	 sub	 esp, 24			; 00000018H

; 1016 : 	if ( netOutgoing.size() ) {

  017ef	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netOutgoing@@3VSOL_List@@A
  017f4	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  017f9	83 38 00	 cmp	 DWORD PTR [eax], 0
  017fc	0f 84 bd 00 00
	00		 je	 $L143259

; 1017 : 		Array msg ( (ArrayID)netOutgoing.at ( 0 ) );

  01802	6a 00		 push	 0
  01804	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netOutgoing@@3VSOL_List@@A
  01809	e8 00 00 00 00	 call	 ?at@SOL_List@@QAEGH@Z	; SOL_List::at
  0180e	50		 push	 eax
  0180f	8d 4d e4	 lea	 ecx, DWORD PTR $T148690[ebp]
  01812	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  01817	51		 push	 ecx
  01818	8b cc		 mov	 ecx, esp
  0181a	89 65 e8	 mov	 DWORD PTR $T148689[ebp], esp
  0181d	50		 push	 eax
  0181e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01823	8d 4d f0	 lea	 ecx, DWORD PTR _msg$143262[ebp]
  01826	e8 00 00 00 00	 call	 ??0Array@@QAE@VMemID@@@Z ; Array::Array
  0182b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1018 : 		netOutgoing.del ( msg.dataID() );

  01832	8d 45 e0	 lea	 eax, DWORD PTR $T148691[ebp]
  01835	50		 push	 eax
  01836	8d 4d f0	 lea	 ecx, DWORD PTR _msg$143262[ebp]
  01839	e8 00 00 00 00	 call	 ?dataID@Array@@QAE?AVMemID@@XZ ; Array::dataID
  0183e	8b c8		 mov	 ecx, eax
  01840	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01845	50		 push	 eax
  01846	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?netOutgoing@@3VSOL_List@@A
  0184b	e8 00 00 00 00	 call	 ?del@SOL_List@@QAEHG@Z	; SOL_List::del

; 1019 : 
; 1020 : 		if ( netSocket != -1 ) {

  01850	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?netSocket@@3IA, -1 ; netSocket
  01857	74 44		 je	 SHORT $L143268

; 1021 : 			int result = send ( netSocket, (char *)msg.calcAddress ( 0 ), msg.size(), 0 );

  01859	6a 00		 push	 0
  0185b	8d 4d f0	 lea	 ecx, DWORD PTR _msg$143262[ebp]
  0185e	e8 00 00 00 00	 call	 ?size@Array@@QAEGXZ	; Array::size
  01863	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  01868	50		 push	 eax
  01869	6a 00		 push	 0
  0186b	8d 4d f0	 lea	 ecx, DWORD PTR _msg$143262[ebp]
  0186e	e8 00 00 00 00	 call	 ?calcAddress@Array@@QAEPAXH@Z ; Array::calcAddress
  01873	50		 push	 eax
  01874	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?netSocket@@3IA ; netSocket
  0187a	51		 push	 ecx
  0187b	e8 00 00 00 00	 call	 _send@16
  01880	89 45 ec	 mov	 DWORD PTR _result$143266[ebp], eax

; 1022 : 	
; 1023 : 			if ( result == SOCKET_ERROR ) 

  01883	83 7d ec ff	 cmp	 DWORD PTR _result$143266[ebp], -1
  01887	75 14		 jne	 SHORT $L143268

; 1024 : 				msgMgr->Fatal ( "NETERR: Could not send network message.  The server you were connected to has dropped its end of the connection." );

  01889	68 00 00 00 00	 push	 OFFSET FLAT:$SG143269
  0188e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01894	52		 push	 edx
  01895	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  0189a	83 c4 08	 add	 esp, 8
$L143268:

; 1026 : 
; 1027 : 		msg.dataID().Free();

  0189d	8d 45 dc	 lea	 eax, DWORD PTR $T148692[ebp]
  018a0	50		 push	 eax
  018a1	8d 4d f0	 lea	 ecx, DWORD PTR _msg$143262[ebp]
  018a4	e8 00 00 00 00	 call	 ?dataID@Array@@QAE?AVMemID@@XZ ; Array::dataID
  018a9	8b c8		 mov	 ecx, eax
  018ab	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1028 : 	}

  018b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  018b7	8d 4d f0	 lea	 ecx, DWORD PTR _msg$143262[ebp]
  018ba	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
$L143259:

; 1029 : }

  018bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  018c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  018c9	8b e5		 mov	 esp, ebp
  018cb	5d		 pop	 ebp
  018cc	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L148693:
  00089	8d 4d f0	 lea	 ecx, DWORD PTR _msg$143262[ebp]
  0008c	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00091	c3		 ret	 0
$L148696:
  00092	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T148695
  00097	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?FlushSocket@@YAXXZ ENDP				; FlushSocket
END

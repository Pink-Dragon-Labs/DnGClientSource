	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Palmgri.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24F@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9SOLPalette@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ASOLPalette@@QAEAAVRgb24F@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0HunkPalette@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Version@HunkPalette@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CycleMap@PaletteMgrIndex@@UBEPBEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPercent@PaletteMgrIndex@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPause@PaletteMgrIndex@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GRemapper@GraphicsMgr@@QAEAAVRemap@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrIndex@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PaletteMgr@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgrIndex@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?gamma@@3QAY0BAA@$$CBDA				; gamma
CONST	SEGMENT
?gamma@@3QAY0BAA@$$CBDA DB 00H				; gamma
	DB	02H
	DB	03H
	DB	05H
	DB	06H
	DB	07H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	03H
	DB	05H
	DB	06H
	DB	08H
	DB	0aH
	DB	0bH
	DB	0dH
	DB	0eH
	DB	010H
	DB	011H
	DB	013H
	DB	014H
	DB	016H
	DB	017H
	DB	018H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	04H
	DB	06H
	DB	08H
	DB	0aH
	DB	0cH
	DB	0eH
	DB	010H
	DB	012H
	DB	013H
	DB	015H
	DB	017H
	DB	018H
	DB	01aH
	DB	01bH
	DB	01dH
	DB	01eH
	DB	020H
	DB	021H
	DB	023H
	DB	024H
	DB	025H
	DB	027H
	DB	028H
	DB	029H
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	05H
	DB	09H
	DB	0bH
	DB	0eH
	DB	010H
	DB	013H
	DB	015H
	DB	017H
	DB	019H
	DB	01aH
	DB	01cH
	DB	01eH
	DB	020H
	DB	021H
	DB	023H
	DB	025H
	DB	026H
	DB	028H
	DB	029H
	DB	02bH
	DB	02cH
	DB	02eH
	DB	02fH
	DB	031H
	DB	032H
	DB	034H
	DB	035H
	DB	036H
	DB	038H
	DB	039H
	DB	03aH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	??0PaletteMgr@@QAE@XZ				; PaletteMgr::PaletteMgr
PUBLIC	??0PaletteMgrIndex@@QAE@XZ			; PaletteMgrIndex::PaletteMgrIndex
PUBLIC	?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ	; PaletteMgrIndex::Current
PUBLIC	?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ	; PaletteMgrIndex::Source
PUBLIC	?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ	; PaletteMgrIndex::Next
PUBLIC	?CycleMap@PaletteMgrIndex@@UBEPBEXZ		; PaletteMgrIndex::CycleMap
PUBLIC	?Submit@PaletteMgrIndex@@UAEXAAVHunkPalette@@@Z	; PaletteMgrIndex::Submit
PUBLIC	?Submit@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z	; PaletteMgrIndex::Submit
PUBLIC	?UpdateForFrame@PaletteMgrIndex@@UAEHXZ		; PaletteMgrIndex::UpdateForFrame
PUBLIC	?UpdateFFrame@PaletteMgrIndex@@UAEHXZ		; PaletteMgrIndex::UpdateFFrame
PUBLIC	?SetCycle@PaletteMgrIndex@@UAEXHHHH@Z		; PaletteMgrIndex::SetCycle
PUBLIC	?CycleOn@PaletteMgrIndex@@UAEXH@Z		; PaletteMgrIndex::CycleOn
PUBLIC	?CycleAllOn@PaletteMgrIndex@@UAEXXZ		; PaletteMgrIndex::CycleAllOn
PUBLIC	?CyclePause@PaletteMgrIndex@@UAEXH@Z		; PaletteMgrIndex::CyclePause
PUBLIC	?CycleAllPause@PaletteMgrIndex@@UAEXXZ		; PaletteMgrIndex::CycleAllPause
PUBLIC	?CycleOff@PaletteMgrIndex@@UAEXH@Z		; PaletteMgrIndex::CycleOff
PUBLIC	?CycleAllOff@PaletteMgrIndex@@UAEXXZ		; PaletteMgrIndex::CycleAllOff
PUBLIC	?SetTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z ; PaletteMgrIndex::SetTarget
PUBLIC	?MergeTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z ; PaletteMgrIndex::MergeTarget
PUBLIC	?SetStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z ; PaletteMgrIndex::SetStart
PUBLIC	?MergeStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z ; PaletteMgrIndex::MergeStart
PUBLIC	?SetVary@PaletteMgrIndex@@UAEXABVSOLPalette@@HHHH@Z ; PaletteMgrIndex::SetVary
PUBLIC	?SetVaryPercent@PaletteMgrIndex@@UAEXHHHH@Z	; PaletteMgrIndex::SetVaryPercent
PUBLIC	?SetVaryTime@PaletteMgrIndex@@UAEXH@Z		; PaletteMgrIndex::SetVaryTime
PUBLIC	?VaryPercent@PaletteMgrIndex@@UBEHXZ		; PaletteMgrIndex::VaryPercent
PUBLIC	?VaryOff@PaletteMgrIndex@@UAEXXZ		; PaletteMgrIndex::VaryOff
PUBLIC	?VaryOn@PaletteMgrIndex@@UAEXXZ			; PaletteMgrIndex::VaryOn
PUBLIC	?VaryPause@PaletteMgrIndex@@UAEXXZ		; PaletteMgrIndex::VaryPause
PUBLIC	?SetFade@PaletteMgrIndex@@UAEXHHH@Z		; PaletteMgrIndex::SetFade
PUBLIC	?SetGamma@PaletteMgrIndex@@UAEXH@Z		; PaletteMgrIndex::SetGamma
PUBLIC	?GammaOff@PaletteMgrIndex@@UAEXXZ		; PaletteMgrIndex::GammaOff
PUBLIC	?FadeOff@PaletteMgrIndex@@UAEXXZ		; PaletteMgrIndex::FadeOff
PUBLIC	?DoCycle@PaletteMgrIndex@@MAEXHH@Z		; PaletteMgrIndex::DoCycle
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
PUBLIC	??_7PaletteMgrIndex@@6B@			; PaletteMgrIndex::`vftable'
PUBLIC	??_GPaletteMgrIndex@@UAEPAXI@Z			; PaletteMgrIndex::`scalar deleting destructor'
PUBLIC	??_EPaletteMgrIndex@@UAEPAXI@Z			; PaletteMgrIndex::`vector deleting destructor'
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
PUBLIC	??0HunkPalette@@QAE@XZ				; HunkPalette::HunkPalette
PUBLIC	??1PaletteMgr@@UAE@XZ				; PaletteMgr::~PaletteMgr
EXTRN	__purecall:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?resMgr@@3PAVResourceMgr@@A:DWORD		; resMgr
EXTRN	?GetNum@ConfigMgr@@QAEHPADHH@Z:NEAR		; ConfigMgr::GetNum
EXTRN	?configMgr@@3PAVConfigMgr@@A:DWORD		; configMgr
EXTRN	??0SOLPalette@@QAE@XZ:NEAR			; SOLPalette::SOLPalette
EXTRN	?Init@HunkPalette@@QAEXPAX@Z:NEAR		; HunkPalette::Init
;	COMDAT ??_7PaletteMgrIndex@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Palmgri.cpp
CONST	SEGMENT
??_7PaletteMgrIndex@@6B@ DD FLAT:??_EPaletteMgrIndex@@UAEPAXI@Z ; PaletteMgrIndex::`vftable'
	DD	FLAT:?Submit@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?Submit@PaletteMgrIndex@@UAEXAAVHunkPalette@@@Z
	DD	FLAT:?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?CycleMap@PaletteMgrIndex@@UBEPBEXZ
	DD	FLAT:?UpdateForFrame@PaletteMgrIndex@@UAEHXZ
	DD	FLAT:?UpdateFFrame@PaletteMgrIndex@@UAEHXZ
	DD	FLAT:?SetCycle@PaletteMgrIndex@@UAEXHHHH@Z
	DD	FLAT:?DoCycle@PaletteMgrIndex@@MAEXHH@Z
	DD	FLAT:?CycleOn@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CyclePause@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CycleAllOn@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?CycleAllPause@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?CycleOff@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CycleAllOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?SetTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?MergeTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?SetStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?MergeStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?SetVary@PaletteMgrIndex@@UAEXABVSOLPalette@@HHHH@Z
	DD	FLAT:?SetVaryPercent@PaletteMgrIndex@@UAEXHHHH@Z
	DD	FLAT:?SetVaryTime@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?VaryPercent@PaletteMgrIndex@@UBEHXZ
	DD	FLAT:?VaryOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?VaryOn@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?VaryPause@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?SetFade@PaletteMgrIndex@@UAEXHHH@Z
	DD	FLAT:?SetGamma@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?GammaOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?FadeOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
_DATA	SEGMENT
$SG58879 DB	'brightness', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T59478	DD	019930520H
	DD	01H
	DD	FLAT:$T59481
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T59481	DD	0ffffffffH
	DD	FLAT:$L59474
xdata$x	ENDS
_TEXT	SEGMENT
$T59473 = -36
__$EHRec$ = -12
_this$ = -40
_i$ = -32
_palID$ = -28
_hpal$ = -24
??0PaletteMgrIndex@@QAE@XZ PROC NEAR			; PaletteMgrIndex::PaletteMgrIndex

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L59479
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0001b	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??0PaletteMgr@@QAE@XZ	; PaletteMgr::PaletteMgr
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	81 c1 58 05 00
	00		 add	 ecx, 1368		; 00000558H
  00036	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@XZ	; SOLPalette::SOLPalette
  0003b	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	81 c1 60 09 00
	00		 add	 ecx, 2400		; 00000960H
  00044	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@XZ	; SOLPalette::SOLPalette
  00049	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  00052	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@XZ	; SOLPalette::SOLPalette
  00057	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PaletteMgrIndex@@6B@ ; PaletteMgrIndex::`vftable'

; 20   : 	int i;
; 21   : 	version = 1;

  00060	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 22   : 
; 23   : 	deltaTimeVary = 0;

  0006a	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0

; 24   : 	varyDirection = 0;

  00074	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00077	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 25   : 	varyPercent = targetVaryPercent = 0;

  0007e	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00088	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 26   : 	target = NULL;

  00092	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00095	c7 80 5c 09 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+2396], 0

; 27   : 	start = NULL;

  0009f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	c7 81 58 09 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2392], 0

; 28   : 	varyStartPos = 0;

  000ac	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000af	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 29   : 	varyEndPos = 255;

  000b6	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	c7 40 18 ff 00
	00 00		 mov	 DWORD PTR [eax+24], 255	; 000000ffH

; 30   : 	needUpdate = False;

  000c0	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 31   : 
; 32   : #ifdef MACINTOSH
; 33   :    gammaValue = 2; //KGN configMgr->GetNum("brightness",0,0) - 1;
; 34   : #else
; 35   :    gammaValue = configMgr->GetNum("brightness",0,0) - 1;

  000ca	6a 00		 push	 0
  000cc	6a 00		 push	 0
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:$SG58879
  000d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?configMgr@@3PAVConfigMgr@@A ; configMgr
  000d9	e8 00 00 00 00	 call	 ?GetNum@ConfigMgr@@QAEHPADHH@Z ; ConfigMgr::GetNum
  000de	83 e8 01	 sub	 eax, 1
  000e1	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000e4	89 82 54 05 00
	00		 mov	 DWORD PTR [edx+1364], eax

; 36   : #endif
; 37   : 	assert(gammaValue >= -1  &&  gammaValue < 4);
; 38   : 
; 39   : 	for (i = 0; i < MAXCYCLES; i++) 

  000ea	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000f1	eb 09		 jmp	 SHORT $L58881
$L58882:
  000f3	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  000f6	83 c0 01	 add	 eax, 1
  000f9	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
$L58881:
  000fc	83 7d e0 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00100	7d 13		 jge	 SHORT $L58883

; 40   : 		cycle[i] = NULL;

  00102	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  00105	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00108	c7 84 8a 28 05
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+ecx*4+1320], 0
  00113	eb de		 jmp	 SHORT $L58882
$L58883:

; 41   : 
; 42   : 	for (i = 0; i < MaxColors; i++) {

  00115	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0011c	eb 09		 jmp	 SHORT $L58884
$L58885:
  0011e	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  00121	83 c0 01	 add	 eax, 1
  00124	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
$L58884:
  00127	81 7d e0 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0012e	7d 1d		 jge	 SHORT $L58886

; 43   : 		intensity[i] = 100;

  00130	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  00133	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00136	c7 44 8a 28 64
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+40], 100 ; 00000064H

; 44   : 		cycleLoc[i] = 0;

  0013e	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00141	03 45 e0	 add	 eax, DWORD PTR _i$[ebp]
  00144	c6 80 28 04 00
	00 00		 mov	 BYTE PTR [eax+1064], 0

; 45   : 	}

  0014b	eb d1		 jmp	 SHORT $L58885
$L58886:

; 46   : 
; 47   : 	//  submit 999 pal of game at init time
; 48   : 	MemID palID = resMgr->Get(MemResPalette, 999);

  0014d	6a 00		 push	 0
  0014f	68 e7 03 00 00	 push	 999			; 000003e7H
  00154	6a 0b		 push	 11			; 0000000bH
  00156	8d 4d dc	 lea	 ecx, DWORD PTR $T59473[ebp]
  00159	51		 push	 ecx
  0015a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00160	8b 02		 mov	 eax, DWORD PTR [edx]
  00162	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00168	ff 50 20	 call	 DWORD PTR [eax+32]
  0016b	50		 push	 eax
  0016c	8d 4d e4	 lea	 ecx, DWORD PTR _palID$[ebp]
  0016f	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 49   : 	HunkPalette hpal;

  00174	8d 4d e8	 lea	 ecx, DWORD PTR _hpal$[ebp]
  00177	e8 00 00 00 00	 call	 ??0HunkPalette@@QAE@XZ	; HunkPalette::HunkPalette

; 50   : 	hpal.Init(*palID);

  0017c	8d 4d e4	 lea	 ecx, DWORD PTR _palID$[ebp]
  0017f	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00184	50		 push	 eax
  00185	8d 4d e8	 lea	 ecx, DWORD PTR _hpal$[ebp]
  00188	e8 00 00 00 00	 call	 ?Init@HunkPalette@@QAEXPAX@Z ; HunkPalette::Init

; 51   : 	Submit(hpal);

  0018d	8d 4d e8	 lea	 ecx, DWORD PTR _hpal$[ebp]
  00190	51		 push	 ecx
  00191	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00194	e8 00 00 00 00	 call	 ?Submit@PaletteMgrIndex@@UAEXAAVHunkPalette@@@Z ; PaletteMgrIndex::Submit

; 52   : }

  00199	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a0	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  001a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L59474:
  00000	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1PaletteMgr@@UAE@XZ	; PaletteMgr::~PaletteMgr
  00008	c3		 ret	 0
$L59479:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T59478
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0PaletteMgrIndex@@QAE@XZ ENDP				; PaletteMgrIndex::PaletteMgrIndex
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
EXTRN	_memMgr:DWORD
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
;	COMDAT ??0HunkPalette@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0HunkPalette@@QAE@XZ PROC NEAR			; HunkPalette::HunkPalette, COMDAT

; 56   : 	HunkPalette()									{palInHunk = NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0HunkPalette@@QAE@XZ ENDP				; HunkPalette::HunkPalette
_TEXT	ENDS
PUBLIC	??_7PaletteMgr@@6B@				; PaletteMgr::`vftable'
PUBLIC	??_GPaletteMgr@@UAEPAXI@Z			; PaletteMgr::`scalar deleting destructor'
PUBLIC	??_EPaletteMgr@@UAEPAXI@Z			; PaletteMgr::`vector deleting destructor'
;	COMDAT ??_7PaletteMgr@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\palmgr.hpp
CONST	SEGMENT
??_7PaletteMgr@@6B@ DD FLAT:??_EPaletteMgr@@UAEPAXI@Z	; PaletteMgr::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??1PaletteMgr@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1PaletteMgr@@UAE@XZ PROC NEAR				; PaletteMgr::~PaletteMgr, COMDAT

; 15   : 	virtual	~PaletteMgr() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PaletteMgr@@6B@ ; PaletteMgr::`vftable'
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1PaletteMgr@@UAE@XZ ENDP				; PaletteMgr::~PaletteMgr
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ??_GPaletteMgr@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GPaletteMgr@@UAEPAXI@Z PROC NEAR			; PaletteMgr::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1PaletteMgr@@UAE@XZ	; PaletteMgr::~PaletteMgr
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L55339
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L55339:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GPaletteMgr@@UAEPAXI@Z ENDP				; PaletteMgr::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT
_this$ = -4
?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ PROC NEAR ; PaletteMgrIndex::Current, COMDAT

; 16   : 	const SOLPalette&	Current() const		{return current;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 60 09 00 00	 add	 eax, 2400		; 00000960H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ ENDP	; PaletteMgrIndex::Current
_TEXT	ENDS
;	COMDAT ?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT
_this$ = -4
?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ PROC NEAR	; PaletteMgrIndex::Source, COMDAT

; 17   : 	const SOLPalette&	Source() const			{return source;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 58 05 00 00	 add	 eax, 1368		; 00000558H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ ENDP	; PaletteMgrIndex::Source
_TEXT	ENDS
;	COMDAT ?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT
_this$ = -4
?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ PROC NEAR	; PaletteMgrIndex::Next, COMDAT

; 18   : 	const SOLPalette&	Next() const			{return next;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 60 0d 00 00	 add	 eax, 3424		; 00000d60H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ ENDP	; PaletteMgrIndex::Next
_TEXT	ENDS
;	COMDAT ?CycleMap@PaletteMgrIndex@@UBEPBEXZ
_TEXT	SEGMENT
_this$ = -4
?CycleMap@PaletteMgrIndex@@UBEPBEXZ PROC NEAR		; PaletteMgrIndex::CycleMap, COMDAT

; 19   : 	const uchar* 		CycleMap() const		{return cycleLoc;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 28 04 00 00	 add	 eax, 1064		; 00000428H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?CycleMap@PaletteMgrIndex@@UBEPBEXZ ENDP		; PaletteMgrIndex::CycleMap
_TEXT	ENDS
;	COMDAT ?VaryPercent@PaletteMgrIndex@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4
?VaryPercent@PaletteMgrIndex@@UBEHXZ PROC NEAR		; PaletteMgrIndex::VaryPercent, COMDAT

; 42   : 	int	VaryPercent() const {return (varyDirection < 0)?-varyPercent:varyPercent;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	7d 0d		 jge	 SHORT $L59494
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00018	f7 da		 neg	 edx
  0001a	89 55 f8	 mov	 DWORD PTR -8+[ebp], edx
  0001d	eb 09		 jmp	 SHORT $L59495
$L59494:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00025	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
$L59495:
  00028	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?VaryPercent@PaletteMgrIndex@@UBEHXZ ENDP		; PaletteMgrIndex::VaryPercent
_TEXT	ENDS
;	COMDAT ?VaryPause@PaletteMgrIndex@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?VaryPause@PaletteMgrIndex@@UAEXXZ PROC NEAR		; PaletteMgrIndex::VaryPause, COMDAT

; 45   : 	void  VaryPause() {varyPause++; varyDirection = 0;} 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0000d	83 c1 01	 add	 ecx, 1
  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?VaryPause@PaletteMgrIndex@@UAEXXZ ENDP			; PaletteMgrIndex::VaryPause
_TEXT	ENDS
PUBLIC	??1PaletteMgrIndex@@UAE@XZ			; PaletteMgrIndex::~PaletteMgrIndex
;	COMDAT ??_GPaletteMgrIndex@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GPaletteMgrIndex@@UAEPAXI@Z PROC NEAR		; PaletteMgrIndex::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1PaletteMgrIndex@@UAE@XZ ; PaletteMgrIndex::~PaletteMgrIndex
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L58893
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L58893:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GPaletteMgrIndex@@UAEPAXI@Z ENDP			; PaletteMgrIndex::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??0PaletteMgr@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0PaletteMgr@@QAE@XZ PROC NEAR				; PaletteMgr::PaletteMgr, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PaletteMgr@@6B@ ; PaletteMgr::`vftable'
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0PaletteMgr@@QAE@XZ ENDP				; PaletteMgr::PaletteMgr
_TEXT	ENDS
xdata$x	SEGMENT
$T59505	DD	019930520H
	DD	01H
	DD	FLAT:$T59507
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T59507	DD	0ffffffffH
	DD	FLAT:$L59503
xdata$x	ENDS
_TEXT	SEGMENT
$T59500 = -20
$T59501 = -24
$T59502 = -28
__$EHRec$ = -12
_this$ = -32
_i$ = -16
??1PaletteMgrIndex@@UAE@XZ PROC NEAR			; PaletteMgrIndex::~PaletteMgrIndex

; 55   : {

  001b1	55		 push	 ebp
  001b2	8b ec		 mov	 ebp, esp
  001b4	6a ff		 push	 -1
  001b6	68 00 00 00 00	 push	 $L59506
  001bb	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  001c1	50		 push	 eax
  001c2	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  001c9	83 ec 14	 sub	 esp, 20			; 00000014H
  001cc	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  001cf	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  001d2	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PaletteMgrIndex@@6B@ ; PaletteMgrIndex::`vftable'
  001d8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 56   : 	version = 1;

  001df	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001e2	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 57   : 	delete target;

  001e9	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  001ec	8b 82 5c 09 00
	00		 mov	 eax, DWORD PTR [edx+2396]
  001f2	89 45 ec	 mov	 DWORD PTR $T59500[ebp], eax
  001f5	8b 4d ec	 mov	 ecx, DWORD PTR $T59500[ebp]
  001f8	51		 push	 ecx
  001f9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001fe	83 c4 04	 add	 esp, 4

; 58   : 	delete start;

  00201	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00204	8b 82 58 09 00
	00		 mov	 eax, DWORD PTR [edx+2392]
  0020a	89 45 e8	 mov	 DWORD PTR $T59501[ebp], eax
  0020d	8b 4d e8	 mov	 ecx, DWORD PTR $T59501[ebp]
  00210	51		 push	 ecx
  00211	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00216	83 c4 04	 add	 esp, 4

; 59   : 
; 60   : 	for (int i = 0; i < MAXCYCLES; i++) 

  00219	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00220	eb 09		 jmp	 SHORT $L58902
$L58903:
  00222	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00225	83 c2 01	 add	 edx, 1
  00228	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$L58902:
  0022b	83 7d f0 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0022f	7d 1e		 jge	 SHORT $L58904

; 61   : 		delete cycle[i];

  00231	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00234	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00237	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  0023e	89 55 e4	 mov	 DWORD PTR $T59502[ebp], edx
  00241	8b 45 e4	 mov	 eax, DWORD PTR $T59502[ebp]
  00244	50		 push	 eax
  00245	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0024a	83 c4 04	 add	 esp, 4
  0024d	eb d3		 jmp	 SHORT $L58903
$L58904:

; 62   : }

  0024f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00256	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00259	e8 00 00 00 00	 call	 ??1PaletteMgr@@UAE@XZ	; PaletteMgr::~PaletteMgr
  0025e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00261	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00268	8b e5		 mov	 esp, ebp
  0026a	5d		 pop	 ebp
  0026b	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L59503:
  00013	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??1PaletteMgr@@UAE@XZ	; PaletteMgr::~PaletteMgr
  0001b	c3		 ret	 0
$L59506:
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T59505
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1PaletteMgrIndex@@UAE@XZ ENDP				; PaletteMgrIndex::~PaletteMgrIndex
PUBLIC	??9SOLPalette@@QBEHABV0@@Z			; SOLPalette::operator!=
PUBLIC	?Version@HunkPalette@@QBEJXZ			; HunkPalette::Version
EXTRN	??0SOLPalette@@QAE@ABVHunkPalette@@@Z:NEAR	; SOLPalette::SOLPalette
EXTRN	??0SOLPalette@@QAE@ABV0@@Z:NEAR			; SOLPalette::SOLPalette
EXTRN	?Merge@SOLPalette@@QAEXABV1@@Z:NEAR		; SOLPalette::Merge
EXTRN	?SetVersion@HunkPalette@@QAEXH@Z:NEAR		; HunkPalette::SetVersion
_TEXT	SEGMENT
_hpal$ = 8
_this$ = -2056
_tmppal$ = -1028
_old$ = -2052
_paletteChanged$ = -4
?Submit@PaletteMgrIndex@@UAEXAAVHunkPalette@@@Z PROC NEAR ; PaletteMgrIndex::Submit

; 66   : {

  0026c	55		 push	 ebp
  0026d	8b ec		 mov	 ebp, esp
  0026f	81 ec 08 08 00
	00		 sub	 esp, 2056		; 00000808H
  00275	89 8d f8 f7 ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 	//  If versions match, this palette has already been submitted
; 68   : 	if (hpal.Version() == version)

  0027b	8b 4d 08	 mov	 ecx, DWORD PTR _hpal$[ebp]
  0027e	e8 00 00 00 00	 call	 ?Version@HunkPalette@@QBEJXZ ; HunkPalette::Version
  00283	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00289	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0028c	75 05		 jne	 SHORT $L58910

; 69   : 		return;

  0028e	e9 9f 00 00 00	 jmp	 $L58909
$L58910:

; 70   : 
; 71   : 	//  Submit palette, if it will change current, set update, version
; 72   : 	SOLPalette tmppal = hpal;

  00293	8b 55 08	 mov	 edx, DWORD PTR _hpal$[ebp]
  00296	52		 push	 edx
  00297	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _tmppal$[ebp]
  0029d	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABVHunkPalette@@@Z ; SOLPalette::SOLPalette

; 73   : 	SOLPalette old = source;

  002a2	8b 85 f8 f7 ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  002a8	05 58 05 00 00	 add	 eax, 1368		; 00000558H
  002ad	50		 push	 eax
  002ae	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _old$[ebp]
  002b4	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABV0@@Z ; SOLPalette::SOLPalette

; 74   : 	source.Merge(tmppal);

  002b9	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _tmppal$[ebp]
  002bf	51		 push	 ecx
  002c0	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002c6	81 c1 58 05 00
	00		 add	 ecx, 1368		; 00000558H
  002cc	e8 00 00 00 00	 call	 ?Merge@SOLPalette@@QAEXABV1@@Z ; SOLPalette::Merge

; 75   : 
; 76   : 	Bool paletteChanged = (old != source);

  002d1	8b 95 f8 f7 ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  002d7	81 c2 58 05 00
	00		 add	 edx, 1368		; 00000558H
  002dd	52		 push	 edx
  002de	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _old$[ebp]
  002e4	e8 00 00 00 00	 call	 ??9SOLPalette@@QBEHABV0@@Z ; SOLPalette::operator!=
  002e9	89 45 fc	 mov	 DWORD PTR _paletteChanged$[ebp], eax

; 77   : 	if (!needUpdate  &&  paletteChanged)

  002ec	8b 85 f8 f7 ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  002f2	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  002f6	75 28		 jne	 SHORT $L58914
  002f8	83 7d fc 00	 cmp	 DWORD PTR _paletteChanged$[ebp], 0
  002fc	74 22		 je	 SHORT $L58914

; 79   : 		version++;

  002fe	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00304	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00307	83 c2 01	 add	 edx, 1
  0030a	8b 85 f8 f7 ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00310	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 80   : 		needUpdate = True;

  00313	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00319	c7 41 20 01 00
	00 00		 mov	 DWORD PTR [ecx+32], 1
$L58914:

; 82   : 		
; 83   : 	//  Bring version number of hunk palette up to date
; 84   : 	hpal.SetVersion(version);

  00320	8b 95 f8 f7 ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00326	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00329	50		 push	 eax
  0032a	8b 4d 08	 mov	 ecx, DWORD PTR _hpal$[ebp]
  0032d	e8 00 00 00 00	 call	 ?SetVersion@HunkPalette@@QAEXH@Z ; HunkPalette::SetVersion
$L58909:

; 85   : }

  00332	8b e5		 mov	 esp, ebp
  00334	5d		 pop	 ebp
  00335	c2 04 00	 ret	 4
?Submit@PaletteMgrIndex@@UAEXAAVHunkPalette@@@Z ENDP	; PaletteMgrIndex::Submit
_TEXT	ENDS
EXTRN	??8SOLPalette@@QBEHABV0@@Z:NEAR			; SOLPalette::operator==
;	COMDAT ??9SOLPalette@@QBEHABV0@@Z
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??9SOLPalette@@QBEHABV0@@Z PROC NEAR			; SOLPalette::operator!=, COMDAT

; 36   : 	int				operator!=(const SOLPalette& src) const {return !operator==(src);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??8SOLPalette@@QBEHABV0@@Z ; SOLPalette::operator==
  00013	f7 d8		 neg	 eax
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??9SOLPalette@@QBEHABV0@@Z ENDP				; SOLPalette::operator!=
_TEXT	ENDS
;	COMDAT ?Version@HunkPalette@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Version@HunkPalette@@QBEJXZ PROC NEAR			; HunkPalette::Version, COMDAT

; 58   : 	long		Version() const					{return version;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Version@HunkPalette@@QBEJXZ ENDP			; HunkPalette::Version
_TEXT	ENDS
_TEXT	SEGMENT
_pal$ = 8
_this$ = -1032
_old$ = -1028
_paletteChanged$ = -4
?Submit@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z PROC NEAR ; PaletteMgrIndex::Submit

; 89   : {                    

  00338	55		 push	 ebp
  00339	8b ec		 mov	 ebp, esp
  0033b	81 ec 08 04 00
	00		 sub	 esp, 1032		; 00000408H
  00341	89 8d f8 fb ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 	SOLPalette old = source;

  00347	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0034d	05 58 05 00 00	 add	 eax, 1368		; 00000558H
  00352	50		 push	 eax
  00353	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _old$[ebp]
  00359	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABV0@@Z ; SOLPalette::SOLPalette

; 91   : 	source.Merge(pal); 

  0035e	8b 4d 08	 mov	 ecx, DWORD PTR _pal$[ebp]
  00361	51		 push	 ecx
  00362	8b 8d f8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00368	81 c1 58 05 00
	00		 add	 ecx, 1368		; 00000558H
  0036e	e8 00 00 00 00	 call	 ?Merge@SOLPalette@@QAEXABV1@@Z ; SOLPalette::Merge

; 92   : 	Bool paletteChanged = (old != source);

  00373	8b 95 f8 fb ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00379	81 c2 58 05 00
	00		 add	 edx, 1368		; 00000558H
  0037f	52		 push	 edx
  00380	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _old$[ebp]
  00386	e8 00 00 00 00	 call	 ??9SOLPalette@@QBEHABV0@@Z ; SOLPalette::operator!=
  0038b	89 45 fc	 mov	 DWORD PTR _paletteChanged$[ebp], eax

; 93   : 
; 94   : 	if (!needUpdate  &&  paletteChanged)

  0038e	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00394	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00398	75 28		 jne	 SHORT $L58921
  0039a	83 7d fc 00	 cmp	 DWORD PTR _paletteChanged$[ebp], 0
  0039e	74 22		 je	 SHORT $L58921

; 96   : 		version++;

  003a0	8b 8d f8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  003a6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003a9	83 c2 01	 add	 edx, 1
  003ac	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  003b2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 97   : 		needUpdate = True;

  003b5	8b 8d f8 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  003bb	c7 41 20 01 00
	00 00		 mov	 DWORD PTR [ecx+32], 1
$L58921:

; 99   : }

  003c2	8b e5		 mov	 esp, ebp
  003c4	5d		 pop	 ebp
  003c5	c2 04 00	 ret	 4
?Submit@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z ENDP	; PaletteMgrIndex::Submit
_TEXT	ENDS
PUBLIC	?ApplyAll@PaletteMgrIndex@@IAEXXZ		; PaletteMgrIndex::ApplyAll
PUBLIC	?ApplyCycles@PaletteMgrIndex@@IAEXXZ		; PaletteMgrIndex::ApplyCycles
PUBLIC	?ApplyVary@PaletteMgrIndex@@IAEXXZ		; PaletteMgrIndex::ApplyVary
PUBLIC	?ApplyFade@PaletteMgrIndex@@IAEXXZ		; PaletteMgrIndex::ApplyFade
_TEXT	SEGMENT
_this$ = -4
?ApplyAll@PaletteMgrIndex@@IAEXXZ PROC NEAR		; PaletteMgrIndex::ApplyAll

; 104  : {

  003c8	55		 push	 ebp
  003c9	8b ec		 mov	 ebp, esp
  003cb	51		 push	 ecx
  003cc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 	ApplyVary();

  003cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003d2	e8 00 00 00 00	 call	 ?ApplyVary@PaletteMgrIndex@@IAEXXZ ; PaletteMgrIndex::ApplyVary

; 106  : 	ApplyCycles();

  003d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003da	e8 00 00 00 00	 call	 ?ApplyCycles@PaletteMgrIndex@@IAEXXZ ; PaletteMgrIndex::ApplyCycles

; 107  : 	ApplyFade();

  003df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e2	e8 00 00 00 00	 call	 ?ApplyFade@PaletteMgrIndex@@IAEXXZ ; PaletteMgrIndex::ApplyFade

; 108  : }

  003e7	8b e5		 mov	 esp, ebp
  003e9	5d		 pop	 ebp
  003ea	c3		 ret	 0
?ApplyAll@PaletteMgrIndex@@IAEXXZ ENDP			; PaletteMgrIndex::ApplyAll
_TEXT	ENDS
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	_abs:NEAR
EXTRN	?timeMgr@@3PAVTimeMgr@@A:DWORD			; timeMgr
EXTRN	?Fatal@MsgMgr@@QAAXDPADH0ZZ:NEAR		; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
	ORG $+1
$SG58963 DB	'cycles intersect', 00H
	ORG $+3
$SG58964 DB	'\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\Palm'
	DB	'gri.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T59514 = -20
_begin$ = 8
_end$ = 12
_direction$ = 16
_ticks$ = 20
_this$ = -24
_i$ = -4
_j$ = -8
_last$58946 = -12
_index$58947 = -16
?SetCycle@PaletteMgrIndex@@UAEXHHHH@Z PROC NEAR		; PaletteMgrIndex::SetCycle

; 112  : {

  003eb	55		 push	 ebp
  003ec	8b ec		 mov	 ebp, esp
  003ee	83 ec 18	 sub	 esp, 24			; 00000018H
  003f1	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 	int i, j;
; 114  : 	for (i = 0; i < MAXCYCLES; i++)

  003f4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003fb	eb 09		 jmp	 SHORT $L58934
$L58935:
  003fd	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00400	83 c0 01	 add	 eax, 1
  00403	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L58934:
  00406	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0040a	7d 28		 jge	 SHORT $L58936

; 115  : 		if (cycle[i] && begin == cycle[i]->begin)

  0040c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0040f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00412	83 bc 8a 28 05
	00 00 00	 cmp	 DWORD PTR [edx+ecx*4+1320], 0
  0041a	74 16		 je	 SHORT $L58937
  0041c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0041f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00422	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  00429	8b 45 08	 mov	 eax, DWORD PTR _begin$[ebp]
  0042c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0042e	75 02		 jne	 SHORT $L58937

; 116  : 			break;

  00430	eb 02		 jmp	 SHORT $L58936
$L58937:

; 117  : 
; 118  : 	if (i == MAXCYCLES)

  00432	eb c9		 jmp	 SHORT $L58935
$L58936:
  00434	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00438	0f 85 12 01 00
	00		 jne	 $L58938

; 120  : 		for (i = 0; i < MAXCYCLES; i++)

  0043e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00445	eb 09		 jmp	 SHORT $L58939
$L58940:
  00447	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0044a	83 c1 01	 add	 ecx, 1
  0044d	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L58939:
  00450	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00454	7d 31		 jge	 SHORT $L58941

; 122  : 			if (!cycle[i])

  00456	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00459	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0045c	83 bc 90 28 05
	00 00 00	 cmp	 DWORD PTR [eax+edx*4+1320], 0
  00464	75 1f		 jne	 SHORT $L58942

; 124  : 				cycle[i] = New Cycle;

  00466	6a 1c		 push	 28			; 0000001cH
  00468	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0046d	83 c4 04	 add	 esp, 4
  00470	89 45 ec	 mov	 DWORD PTR $T59514[ebp], eax
  00473	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00476	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00479	8b 45 ec	 mov	 eax, DWORD PTR $T59514[ebp]
  0047c	89 84 8a 28 05
	00 00		 mov	 DWORD PTR [edx+ecx*4+1320], eax

; 125  : 				break;

  00483	eb 02		 jmp	 SHORT $L58941
$L58942:

; 127  : 		}

  00485	eb c0		 jmp	 SHORT $L58940
$L58941:

; 128  : 
; 129  : 		if (i == MAXCYCLES)

  00487	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0048b	0f 85 bd 00 00
	00		 jne	 $L58954

; 131  : 			ulong last = 0xffffffff;

  00491	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _last$58946[ebp], -1

; 132  : 			int index;
; 133  : 			for (i = 0; i < MAXCYCLES; i++)

  00498	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0049f	eb 09		 jmp	 SHORT $L58948
$L58949:
  004a1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  004a4	83 c1 01	 add	 ecx, 1
  004a7	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L58948:
  004aa	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  004ae	7d 52		 jge	 SHORT $L58950

; 135  : 				if (timeMgr->GetTickCount() - cycle[i]->lastUpdate < last)

  004b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  004b6	8b 02		 mov	 eax, DWORD PTR [edx]
  004b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  004be	ff 50 04	 call	 DWORD PTR [eax+4]
  004c1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  004c4	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  004c7	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  004ce	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  004d1	3b 45 f4	 cmp	 eax, DWORD PTR _last$58946[ebp]
  004d4	73 2a		 jae	 SHORT $L58951

; 137  : 					last = timeMgr->GetTickCount() - cycle[i]->lastUpdate;

  004d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  004dc	8b 02		 mov	 eax, DWORD PTR [edx]
  004de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  004e4	ff 50 04	 call	 DWORD PTR [eax+4]
  004e7	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  004ea	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  004ed	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  004f4	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  004f7	89 45 f4	 mov	 DWORD PTR _last$58946[ebp], eax

; 138  : 					index = i;

  004fa	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  004fd	89 55 f0	 mov	 DWORD PTR _index$58947[ebp], edx
$L58951:

; 140  : 			}

  00500	eb 9f		 jmp	 SHORT $L58949
$L58950:

; 141  : 
; 142  : 			i = index;

  00502	8b 45 f0	 mov	 eax, DWORD PTR _index$58947[ebp]
  00505	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 143  : 
; 144  : 			for (j = 0; j < cycle[i]->range; j++) 

  00508	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0050f	eb 09		 jmp	 SHORT $L58952
$L58953:
  00511	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00514	83 c1 01	 add	 ecx, 1
  00517	89 4d f8	 mov	 DWORD PTR _j$[ebp], ecx
$L58952:
  0051a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0051d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00520	8b 8c 90 28 05
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+1320]
  00527	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  0052a	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0052d	7d 1f		 jge	 SHORT $L58954

; 145  : 				cycleLoc[j + cycle[i]->begin] = 0;

  0052f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00532	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00535	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  0053c	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0053f	03 02		 add	 eax, DWORD PTR [edx]
  00541	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00544	c6 84 01 28 04
	00 00 00	 mov	 BYTE PTR [ecx+eax+1064], 0
  0054c	eb c3		 jmp	 SHORT $L58953
$L58954:

; 148  : 	else

  0054e	eb 46		 jmp	 SHORT $L58958
$L58938:

; 150  : 		for (j = 0; j < cycle[i]->range; j++) 

  00550	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00557	eb 09		 jmp	 SHORT $L58956
$L58957:
  00559	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  0055c	83 c2 01	 add	 edx, 1
  0055f	89 55 f8	 mov	 DWORD PTR _j$[ebp], edx
$L58956:
  00562	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00565	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00568	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  0056f	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00572	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00575	7d 1f		 jge	 SHORT $L58958

; 151  : 			cycleLoc[j + cycle[i]->begin] = 0;

  00577	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0057a	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0057d	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00584	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00587	03 08		 add	 ecx, DWORD PTR [eax]
  00589	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0058c	c6 84 0a 28 04
	00 00 00	 mov	 BYTE PTR [edx+ecx+1064], 0
  00594	eb c3		 jmp	 SHORT $L58957
$L58958:

; 153  : 	
; 154  : 
; 155  : 							 
; 156  : 	cycle[i]->begin = begin;

  00596	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00599	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0059c	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  005a3	8b 45 08	 mov	 eax, DWORD PTR _begin$[ebp]
  005a6	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 	cycle[i]->range = end - begin + 1;

  005a8	8b 4d 0c	 mov	 ecx, DWORD PTR _end$[ebp]
  005ab	2b 4d 08	 sub	 ecx, DWORD PTR _begin$[ebp]
  005ae	83 c1 01	 add	 ecx, 1
  005b1	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  005b4	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  005b7	8b 94 90 28 05
	00 00		 mov	 edx, DWORD PTR [eax+edx*4+1320]
  005be	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 158  : 	cycle[i]->current = 0;

  005c1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  005c4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  005c7	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  005ce	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 159  : 	cycle[i]->forward = (direction < 0) ? False : True;

  005d5	33 c0		 xor	 eax, eax
  005d7	83 7d 10 00	 cmp	 DWORD PTR _direction$[ebp], 0
  005db	0f 9d c0	 setge	 al
  005de	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  005e1	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  005e4	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  005eb	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 160  : 	cycle[i]->lastUpdate = timeMgr->GetTickCount();

  005ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  005f4	8b 02		 mov	 eax, DWORD PTR [edx]
  005f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  005fc	ff 50 04	 call	 DWORD PTR [eax+4]
  005ff	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00602	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00605	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  0060c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 161  : 	cycle[i]->deltaTime = abs(ticks);

  0060f	8b 55 14	 mov	 edx, DWORD PTR _ticks$[ebp]
  00612	52		 push	 edx
  00613	e8 00 00 00 00	 call	 _abs
  00618	83 c4 04	 add	 esp, 4
  0061b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0061e	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00621	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  00628	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 162  : 	cycle[i]->pause = False;

  0062b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0062e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00631	8b 8c 90 28 05
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+1320]
  00638	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 163  : 
; 164  : 	for (i = begin; i <= end; i++)

  0063f	8b 55 08	 mov	 edx, DWORD PTR _begin$[ebp]
  00642	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  00645	eb 09		 jmp	 SHORT $L58959
$L58960:
  00647	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0064a	83 c0 01	 add	 eax, 1
  0064d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L58959:
  00650	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00653	3b 4d 0c	 cmp	 ecx, DWORD PTR _end$[ebp]
  00656	7f 41		 jg	 SHORT $L58961

; 166  : 		if (cycleLoc[i])

  00658	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0065b	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  0065e	33 c0		 xor	 eax, eax
  00660	8a 82 28 04 00
	00		 mov	 al, BYTE PTR [edx+1064]
  00666	85 c0		 test	 eax, eax
  00668	74 20		 je	 SHORT $L58962

; 167  : 			msgMgr->Fatal(SrcLoc,"cycles intersect");

  0066a	68 00 00 00 00	 push	 OFFSET FLAT:$SG58963
  0066f	68 a7 00 00 00	 push	 167			; 000000a7H
  00674	68 00 00 00 00	 push	 OFFSET FLAT:$SG58964
  00679	6a 61		 push	 97			; 00000061H
  0067b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00681	51		 push	 ecx
  00682	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  00687	83 c4 14	 add	 esp, 20			; 00000014H
$L58962:

; 168  : 		cycleLoc[i] = 1;

  0068a	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0068d	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  00690	c6 82 28 04 00
	00 01		 mov	 BYTE PTR [edx+1064], 1

; 169  : 	}

  00697	eb ae		 jmp	 SHORT $L58960
$L58961:

; 170  : }

  00699	8b e5		 mov	 esp, ebp
  0069b	5d		 pop	 ebp
  0069c	c2 10 00	 ret	 16			; 00000010H
?SetCycle@PaletteMgrIndex@@UAEXHHHH@Z ENDP		; PaletteMgrIndex::SetCycle
_which$ = 8
_steps$ = 12
_this$ = -12
_i$ = -4
_range$58976 = -8
?DoCycle@PaletteMgrIndex@@MAEXHH@Z PROC NEAR		; PaletteMgrIndex::DoCycle

; 174  : {

  0069f	55		 push	 ebp
  006a0	8b ec		 mov	 ebp, esp
  006a2	83 ec 0c	 sub	 esp, 12			; 0000000cH
  006a5	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 175  : 	int i;
; 176  : 	for (i = 0; i < MAXCYCLES; i++)

  006a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  006af	eb 09		 jmp	 SHORT $L58971
$L58972:
  006b1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  006b4	83 c0 01	 add	 eax, 1
  006b7	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L58971:
  006ba	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  006be	7d 28		 jge	 SHORT $L58973

; 177  : 		if (cycle[i] && which == cycle[i]->begin)

  006c0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  006c3	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  006c6	83 bc 8a 28 05
	00 00 00	 cmp	 DWORD PTR [edx+ecx*4+1320], 0
  006ce	74 16		 je	 SHORT $L58974
  006d0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  006d3	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  006d6	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  006dd	8b 45 08	 mov	 eax, DWORD PTR _which$[ebp]
  006e0	3b 02		 cmp	 eax, DWORD PTR [edx]
  006e2	75 02		 jne	 SHORT $L58974

; 178  : 			break;

  006e4	eb 02		 jmp	 SHORT $L58973
$L58974:

; 179  : 
; 180  : 	if (i < MAXCYCLES)

  006e6	eb c9		 jmp	 SHORT $L58972
$L58973:
  006e8	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  006ec	0f 8d a0 00 00
	00		 jge	 $L58978

; 182  : 		int range = cycle[i]->range;

  006f2	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  006f5	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  006f8	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  006ff	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00702	89 4d f8	 mov	 DWORD PTR _range$58976[ebp], ecx

; 183  : 		cycle[i]->lastUpdate = timeMgr->GetTickCount();

  00705	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0070b	8b 02		 mov	 eax, DWORD PTR [edx]
  0070d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  00713	ff 50 04	 call	 DWORD PTR [eax+4]
  00716	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00719	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0071c	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  00723	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 184  : 
; 185  : 		if (cycle[i]->forward)

  00726	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00729	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0072c	8b 8c 90 28 05
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+1320]
  00733	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00737	74 29		 je	 SHORT $L58977

; 186  : 			cycle[i]->current = (cycle[i]->current + steps) % range;

  00739	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0073c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0073f	8b 8c 90 28 05
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+1320]
  00746	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00749	03 45 0c	 add	 eax, DWORD PTR _steps$[ebp]
  0074c	99		 cdq
  0074d	f7 7d f8	 idiv	 DWORD PTR _range$58976[ebp]
  00750	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00753	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00756	8b 84 81 28 05
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+1320]
  0075d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 187  : 		else   

  00760	eb 30		 jmp	 SHORT $L58978
$L58977:

; 188  : 			cycle[i]->current = ((cycle[i]->current - (steps % range)) + range) % range;

  00762	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00765	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00768	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  0076f	8b 45 0c	 mov	 eax, DWORD PTR _steps$[ebp]
  00772	99		 cdq
  00773	f7 7d f8	 idiv	 DWORD PTR _range$58976[ebp]
  00776	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00779	2b c2		 sub	 eax, edx
  0077b	03 45 f8	 add	 eax, DWORD PTR _range$58976[ebp]
  0077e	99		 cdq
  0077f	f7 7d f8	 idiv	 DWORD PTR _range$58976[ebp]
  00782	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00785	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00788	8b 84 81 28 05
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+1320]
  0078f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$L58978:

; 190  : }

  00792	8b e5		 mov	 esp, ebp
  00794	5d		 pop	 ebp
  00795	c2 08 00	 ret	 8
?DoCycle@PaletteMgrIndex@@MAEXHH@Z ENDP			; PaletteMgrIndex::DoCycle
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
PUBLIC	??0Rgb24F@@QAE@XZ				; Rgb24F::Rgb24F
PUBLIC	??ASOLPalette@@QAEAAVRgb24F@@H@Z		; SOLPalette::operator[]
EXTRN	_memcpy:NEAR
xdata$x	SEGMENT
$T59524	DD	019930520H
	DD	01H
	DD	FLAT:$T59526
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T59526	DD	0ffffffffH
	DD	FLAT:$L59522
xdata$x	ENDS
_TEXT	SEGMENT
$T59517 = -32
$T59518 = -36
$T59521 = -40
__$EHRec$ = -12
_this$ = -44
_i$ = -16
_hold$58993 = -20
_$S22$58995 = -28
_j$59001 = -24
?ApplyCycles@PaletteMgrIndex@@IAEXXZ PROC NEAR		; PaletteMgrIndex::ApplyCycles

; 194  : {

  00798	55		 push	 ebp
  00799	8b ec		 mov	 ebp, esp
  0079b	6a ff		 push	 -1
  0079d	68 00 00 00 00	 push	 $L59525
  007a2	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  007a8	50		 push	 eax
  007a9	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  007b0	83 ec 24	 sub	 esp, 36			; 00000024H
  007b3	56		 push	 esi
  007b4	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 195  : 	int i;
; 196  : 	for (i = 0; i < MAXCYCLES; i++)

  007b7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  007be	eb 09		 jmp	 SHORT $L58983
$L58984:
  007c0	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  007c3	83 c0 01	 add	 eax, 1
  007c6	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L58983:
  007c9	83 7d f0 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  007cd	0f 8d 72 02 00
	00		 jge	 $L58985

; 198  : 		if (cycle[i])

  007d3	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  007d6	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  007d9	83 bc 8a 28 05
	00 00 00	 cmp	 DWORD PTR [edx+ecx*4+1320], 0
  007e1	0f 84 59 02 00
	00		 je	 $L58986

; 200  : 			if (cycle[i]->deltaTime && !(cycle[i]->pause))

  007e7	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  007ea	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  007ed	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  007f4	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  007f8	0f 84 13 01 00
	00		 je	 $L58990
  007fe	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00801	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00804	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  0080b	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  0080f	0f 85 fc 00 00
	00		 jne	 $L58990
$L58989:

; 202  : 				while (cycle[i]->lastUpdate + cycle[i]->deltaTime < timeMgr->GetTickCount())

  00815	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00818	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0081b	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  00822	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00825	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00828	8b 84 81 28 05
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+1320]
  0082f	8b 72 10	 mov	 esi, DWORD PTR [edx+16]
  00832	03 70 14	 add	 esi, DWORD PTR [eax+20]
  00835	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0083b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0083d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  00843	ff 52 04	 call	 DWORD PTR [edx+4]
  00846	3b f0		 cmp	 esi, eax
  00848	0f 83 c3 00 00
	00		 jae	 $L58990

; 204  : 					if (cycle[i]->forward)

  0084e	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00851	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00854	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  0085b	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0085f	74 36		 je	 SHORT $L58991

; 205  : 						cycle[i]->current = (cycle[i]->current + 1) % cycle[i]->range;

  00861	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00864	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00867	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  0086e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00871	83 c0 01	 add	 eax, 1
  00874	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00877	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0087a	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  00881	99		 cdq
  00882	f7 79 04	 idiv	 DWORD PTR [ecx+4]
  00885	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00888	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0088b	8b 84 81 28 05
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+1320]
  00892	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 206  : 					else

  00895	eb 45		 jmp	 SHORT $L58992
$L58991:

; 207  : 						cycle[i]->current = ((cycle[i]->current - 1 + cycle[i]->range) % cycle[i]->range);

  00897	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  0089a	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0089d	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  008a4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  008a7	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  008aa	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  008ad	8b 94 90 28 05
	00 00		 mov	 edx, DWORD PTR [eax+edx*4+1320]
  008b4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  008b7	8d 44 01 ff	 lea	 eax, DWORD PTR [ecx+eax-1]
  008bb	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  008be	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  008c1	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  008c8	99		 cdq
  008c9	f7 79 04	 idiv	 DWORD PTR [ecx+4]
  008cc	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  008cf	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  008d2	8b 84 81 28 05
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+1320]
  008d9	89 50 08	 mov	 DWORD PTR [eax+8], edx
$L58992:

; 208  : 
; 209  : 					cycle[i]->lastUpdate += cycle[i]->deltaTime;

  008dc	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  008df	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  008e2	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  008e9	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  008ec	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  008ef	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  008f6	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  008f9	03 51 14	 add	 edx, DWORD PTR [ecx+20]
  008fc	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  008ff	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00902	8b 84 81 28 05
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+1320]
  00909	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 210  : 				}      

  0090c	e9 04 ff ff ff	 jmp	 $L58989
$L58990:

; 212  : #ifdef MACINTOSH
; 213  : 			//KGN
; 214  : 			Rgb24F initter;
; 215  : 			Rgb24F *hold = (Rgb24F *) NewPtr((cycle[i]->range) * sizeof(Rgb24F));
; 216  : 			for (int n = 0; n < cycle[i]->range; n++)
; 217  : 				hold[n] = initter;
; 218  : #else
; 219  : 			Rgb24F *hold = New Rgb24F[cycle[i]->range];

  00911	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00914	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00917	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  0091e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00921	89 4d e4	 mov	 DWORD PTR _$S22$58995[ebp], ecx
  00924	8b 55 e4	 mov	 edx, DWORD PTR _$S22$58995[ebp]
  00927	c1 e2 02	 shl	 edx, 2
  0092a	52		 push	 edx
  0092b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00930	83 c4 04	 add	 esp, 4
  00933	89 45 dc	 mov	 DWORD PTR $T59518[ebp], eax
  00936	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0093d	83 7d dc 00	 cmp	 DWORD PTR $T59518[ebp], 0
  00941	74 1c		 je	 SHORT $L59519
  00943	68 00 00 00 00	 push	 OFFSET FLAT:??0Rgb24F@@QAE@XZ ; Rgb24F::Rgb24F
  00948	8b 45 e4	 mov	 eax, DWORD PTR _$S22$58995[ebp]
  0094b	50		 push	 eax
  0094c	6a 04		 push	 4
  0094e	8b 4d dc	 mov	 ecx, DWORD PTR $T59518[ebp]
  00951	51		 push	 ecx
  00952	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EX0@Z@Z	; `vector constructor iterator'
  00957	8b 55 dc	 mov	 edx, DWORD PTR $T59518[ebp]
  0095a	89 55 d0	 mov	 DWORD PTR -48+[ebp], edx
  0095d	eb 07		 jmp	 SHORT $L59520
$L59519:
  0095f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR -48+[ebp], 0
$L59520:
  00966	8b 45 d0	 mov	 eax, DWORD PTR -48+[ebp]
  00969	89 45 e0	 mov	 DWORD PTR $T59517[ebp], eax
  0096c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00973	8b 4d e0	 mov	 ecx, DWORD PTR $T59517[ebp]
  00976	89 4d ec	 mov	 DWORD PTR _hold$58993[ebp], ecx

; 220  : #endif
; 221  : 			memcpy(hold, &next[cycle[i]->begin], cycle[i]->range * sizeof(Rgb24F));

  00979	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0097c	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0097f	8b 8c 90 28 05
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+1320]
  00986	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00989	c1 e2 02	 shl	 edx, 2
  0098c	52		 push	 edx
  0098d	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00990	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00993	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  0099a	8b 02		 mov	 eax, DWORD PTR [edx]
  0099c	50		 push	 eax
  0099d	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  009a0	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  009a6	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  009ab	50		 push	 eax
  009ac	8b 4d ec	 mov	 ecx, DWORD PTR _hold$58993[ebp]
  009af	51		 push	 ecx
  009b0	e8 00 00 00 00	 call	 _memcpy
  009b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 222  : 			for (int j = 0; j < cycle[i]->range; j++)

  009b8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _j$59001[ebp], 0
  009bf	eb 09		 jmp	 SHORT $L59002
$L59003:
  009c1	8b 55 e8	 mov	 edx, DWORD PTR _j$59001[ebp]
  009c4	83 c2 01	 add	 edx, 1
  009c7	89 55 e8	 mov	 DWORD PTR _j$59001[ebp], edx
$L59002:
  009ca	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  009cd	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  009d0	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  009d7	8b 45 e8	 mov	 eax, DWORD PTR _j$59001[ebp]
  009da	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  009dd	7d 4f		 jge	 SHORT $L59004

; 223  : 				next[cycle[i]->begin + j] = hold[(cycle[i]->current + j) % cycle[i]->range];

  009df	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  009e2	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  009e5	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  009ec	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  009ef	03 45 e8	 add	 eax, DWORD PTR _j$59001[ebp]
  009f2	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  009f5	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  009f8	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  009ff	99		 cdq
  00a00	f7 79 04	 idiv	 DWORD PTR [ecx+4]
  00a03	8b 45 ec	 mov	 eax, DWORD PTR _hold$58993[ebp]
  00a06	8b 34 90	 mov	 esi, DWORD PTR [eax+edx*4]
  00a09	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00a0c	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00a0f	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00a16	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a18	03 4d e8	 add	 ecx, DWORD PTR _j$59001[ebp]
  00a1b	51		 push	 ecx
  00a1c	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00a1f	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  00a25	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  00a2a	89 30		 mov	 DWORD PTR [eax], esi
  00a2c	eb 93		 jmp	 SHORT $L59003
$L59004:

; 224  : #ifdef MACINTOSH
; 225  : 			DisposePtr((Ptr) hold);
; 226  : #else
; 227  : 			delete hold;

  00a2e	8b 55 ec	 mov	 edx, DWORD PTR _hold$58993[ebp]
  00a31	89 55 d8	 mov	 DWORD PTR $T59521[ebp], edx
  00a34	8b 45 d8	 mov	 eax, DWORD PTR $T59521[ebp]
  00a37	50		 push	 eax
  00a38	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00a3d	83 c4 04	 add	 esp, 4
$L58986:

; 230  : 	}

  00a40	e9 7b fd ff ff	 jmp	 $L58984
$L58985:

; 231  : }

  00a45	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00a48	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00a4f	5e		 pop	 esi
  00a50	8b e5		 mov	 esp, ebp
  00a52	5d		 pop	 ebp
  00a53	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L59522:
  00026	8b 45 dc	 mov	 eax, DWORD PTR $T59518[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	c3		 ret	 0
$L59525:
  00031	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T59524
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ApplyCycles@PaletteMgrIndex@@IAEXXZ ENDP		; PaletteMgrIndex::ApplyCycles
PUBLIC	??0Rgb24@@QAE@XZ				; Rgb24::Rgb24
;	COMDAT ??0Rgb24F@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Rgb24F@@QAE@XZ PROC NEAR				; Rgb24F::Rgb24F, COMDAT

; 27   : 	Rgb24F() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0Rgb24@@QAE@XZ	; Rgb24::Rgb24
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0Rgb24F@@QAE@XZ ENDP					; Rgb24F::Rgb24F
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Rgb24@@QAE@XZ PROC NEAR				; Rgb24::Rgb24, COMDAT

; 8    : 	Rgb24() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0Rgb24@@QAE@XZ ENDP					; Rgb24::Rgb24
_TEXT	ENDS
;	COMDAT ??ASOLPalette@@QAEAAVRgb24F@@H@Z
_TEXT	SEGMENT
_i$ = 8
_this$ = -4
??ASOLPalette@@QAEAAVRgb24F@@H@Z PROC NEAR		; SOLPalette::operator[], COMDAT

; 42   : 	Rgb24F&	operator[](int i)					{return colors[i];}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??ASOLPalette@@QAEAAVRgb24F@@H@Z ENDP			; SOLPalette::operator[]
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L59014:
  00003	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00006	83 e8 01	 sub	 eax, 1
  00009	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  0000c	83 7d 10 00	 cmp	 DWORD PTR ___n$[ebp], 0
  00010	7c 11		 jl	 SHORT $L59015
  00012	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00015	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001b	03 4d 0c	 add	 ecx, DWORD PTR ___s$[ebp]
  0001e	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
  00021	eb e0		 jmp	 SHORT $L59014
$L59015:
  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?ApplyAllCycles@PaletteMgrIndex@@IAEXXZ		; PaletteMgrIndex::ApplyAllCycles
xdata$x	SEGMENT
$T59539	DD	019930520H
	DD	01H
	DD	FLAT:$T59541
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T59541	DD	0ffffffffH
	DD	FLAT:$L59537
xdata$x	ENDS
_TEXT	SEGMENT
$T59532 = -32
$T59533 = -36
$T59536 = -40
__$EHRec$ = -12
_this$ = -44
_i$ = -16
_hold$59025 = -24
_$S23$59027 = -20
_j$59033 = -28
?ApplyAllCycles@PaletteMgrIndex@@IAEXXZ PROC NEAR	; PaletteMgrIndex::ApplyAllCycles

; 235  : {

  00a54	55		 push	 ebp
  00a55	8b ec		 mov	 ebp, esp
  00a57	6a ff		 push	 -1
  00a59	68 00 00 00 00	 push	 $L59540
  00a5e	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00a64	50		 push	 eax
  00a65	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00a6c	83 ec 24	 sub	 esp, 36			; 00000024H
  00a6f	56		 push	 esi
  00a70	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 236  : 	int i;
; 237  : 	for (i = 0; i < MAXCYCLES; i++)

  00a73	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00a7a	eb 09		 jmp	 SHORT $L59021
$L59022:
  00a7c	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00a7f	83 c0 01	 add	 eax, 1
  00a82	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L59021:
  00a85	83 7d f0 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00a89	0f 8d 7c 01 00
	00		 jge	 $L59023

; 239  : 		if (cycle[i])

  00a8f	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00a92	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00a95	83 bc 8a 28 05
	00 00 00	 cmp	 DWORD PTR [edx+ecx*4+1320], 0
  00a9d	0f 84 63 01 00
	00		 je	 $L59024

; 241  : 			cycle[i]->current = (cycle[i]->current + 1) % cycle[i]->range;

  00aa3	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00aa6	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00aa9	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  00ab0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00ab3	83 c0 01	 add	 eax, 1
  00ab6	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00ab9	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00abc	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  00ac3	99		 cdq
  00ac4	f7 79 04	 idiv	 DWORD PTR [ecx+4]
  00ac7	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00aca	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00acd	8b 84 81 28 05
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+1320]
  00ad4	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 242  : 
; 243  : #ifdef MACINTOSH
; 244  : 			//KGN
; 245  : 			Rgb24F initter;
; 246  : 			Rgb24F *hold = (Rgb24F *) NewPtr((cycle[i]->range) * sizeof(Rgb24F));
; 247  : 			for (int n = 0; n < cycle[i]->range; n++)
; 248  : 				hold[n] = initter;
; 249  : #else
; 250  : 			Rgb24F *hold = New Rgb24F[cycle[i]->range];

  00ad7	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00ada	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00add	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00ae4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00ae7	89 4d ec	 mov	 DWORD PTR _$S23$59027[ebp], ecx
  00aea	8b 55 ec	 mov	 edx, DWORD PTR _$S23$59027[ebp]
  00aed	c1 e2 02	 shl	 edx, 2
  00af0	52		 push	 edx
  00af1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00af6	83 c4 04	 add	 esp, 4
  00af9	89 45 dc	 mov	 DWORD PTR $T59533[ebp], eax
  00afc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00b03	83 7d dc 00	 cmp	 DWORD PTR $T59533[ebp], 0
  00b07	74 1c		 je	 SHORT $L59534
  00b09	68 00 00 00 00	 push	 OFFSET FLAT:??0Rgb24F@@QAE@XZ ; Rgb24F::Rgb24F
  00b0e	8b 45 ec	 mov	 eax, DWORD PTR _$S23$59027[ebp]
  00b11	50		 push	 eax
  00b12	6a 04		 push	 4
  00b14	8b 4d dc	 mov	 ecx, DWORD PTR $T59533[ebp]
  00b17	51		 push	 ecx
  00b18	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EX0@Z@Z	; `vector constructor iterator'
  00b1d	8b 55 dc	 mov	 edx, DWORD PTR $T59533[ebp]
  00b20	89 55 d0	 mov	 DWORD PTR -48+[ebp], edx
  00b23	eb 07		 jmp	 SHORT $L59535
$L59534:
  00b25	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR -48+[ebp], 0
$L59535:
  00b2c	8b 45 d0	 mov	 eax, DWORD PTR -48+[ebp]
  00b2f	89 45 e0	 mov	 DWORD PTR $T59532[ebp], eax
  00b32	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00b39	8b 4d e0	 mov	 ecx, DWORD PTR $T59532[ebp]
  00b3c	89 4d e8	 mov	 DWORD PTR _hold$59025[ebp], ecx

; 251  : #endif
; 252  : 			memcpy(hold, &next[cycle[i]->begin], cycle[i]->range * sizeof(Rgb24F));

  00b3f	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00b42	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00b45	8b 8c 90 28 05
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+1320]
  00b4c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00b4f	c1 e2 02	 shl	 edx, 2
  00b52	52		 push	 edx
  00b53	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00b56	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b59	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  00b60	8b 02		 mov	 eax, DWORD PTR [edx]
  00b62	50		 push	 eax
  00b63	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b66	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  00b6c	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  00b71	50		 push	 eax
  00b72	8b 4d e8	 mov	 ecx, DWORD PTR _hold$59025[ebp]
  00b75	51		 push	 ecx
  00b76	e8 00 00 00 00	 call	 _memcpy
  00b7b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 253  : 			for (int j = 0; j < cycle[i]->range; j++)

  00b7e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _j$59033[ebp], 0
  00b85	eb 09		 jmp	 SHORT $L59034
$L59035:
  00b87	8b 55 e4	 mov	 edx, DWORD PTR _j$59033[ebp]
  00b8a	83 c2 01	 add	 edx, 1
  00b8d	89 55 e4	 mov	 DWORD PTR _j$59033[ebp], edx
$L59034:
  00b90	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00b93	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b96	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  00b9d	8b 45 e4	 mov	 eax, DWORD PTR _j$59033[ebp]
  00ba0	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00ba3	7d 4f		 jge	 SHORT $L59036

; 254  : 				next[cycle[i]->begin + j] = hold[(cycle[i]->current + j) % cycle[i]->range];

  00ba5	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00ba8	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00bab	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00bb2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00bb5	03 45 e4	 add	 eax, DWORD PTR _j$59033[ebp]
  00bb8	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00bbb	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00bbe	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  00bc5	99		 cdq
  00bc6	f7 79 04	 idiv	 DWORD PTR [ecx+4]
  00bc9	8b 45 e8	 mov	 eax, DWORD PTR _hold$59025[ebp]
  00bcc	8b 34 90	 mov	 esi, DWORD PTR [eax+edx*4]
  00bcf	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00bd2	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00bd5	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00bdc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bde	03 4d e4	 add	 ecx, DWORD PTR _j$59033[ebp]
  00be1	51		 push	 ecx
  00be2	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00be5	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  00beb	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  00bf0	89 30		 mov	 DWORD PTR [eax], esi
  00bf2	eb 93		 jmp	 SHORT $L59035
$L59036:

; 255  : #ifdef MACINTOSH
; 256  : 			DisposePtr((Ptr) hold);
; 257  : #else
; 258  : 			delete hold;

  00bf4	8b 55 e8	 mov	 edx, DWORD PTR _hold$59025[ebp]
  00bf7	89 55 d8	 mov	 DWORD PTR $T59536[ebp], edx
  00bfa	8b 45 d8	 mov	 eax, DWORD PTR $T59536[ebp]
  00bfd	50		 push	 eax
  00bfe	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00c03	83 c4 04	 add	 esp, 4
$L59024:

; 261  : 	}

  00c06	e9 71 fe ff ff	 jmp	 $L59022
$L59023:

; 262  : }

  00c0b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00c0e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00c15	5e		 pop	 esi
  00c16	8b e5		 mov	 esp, ebp
  00c18	5d		 pop	 ebp
  00c19	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L59537:
  0003b	8b 45 dc	 mov	 eax, DWORD PTR $T59533[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00044	59		 pop	 ecx
  00045	c3		 ret	 0
$L59540:
  00046	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T59539
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ApplyAllCycles@PaletteMgrIndex@@IAEXXZ ENDP		; PaletteMgrIndex::ApplyAllCycles
_TEXT	SEGMENT
_which$ = 8
_this$ = -8
_i$ = -4
?CycleOn@PaletteMgrIndex@@UAEXH@Z PROC NEAR		; PaletteMgrIndex::CycleOn

; 266  : {

  00c1a	55		 push	 ebp
  00c1b	8b ec		 mov	 ebp, esp
  00c1d	83 ec 08	 sub	 esp, 8
  00c20	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 267  : 	int i;
; 268  : 	for (i = 0; i < MAXCYCLES; i++)

  00c23	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00c2a	eb 09		 jmp	 SHORT $L59043
$L59044:
  00c2c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00c2f	83 c0 01	 add	 eax, 1
  00c32	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L59043:
  00c35	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00c39	7d 28		 jge	 SHORT $L59045

; 269  : 		if (cycle[i] && which == cycle[i]->begin)

  00c3b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00c3e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c41	83 bc 8a 28 05
	00 00 00	 cmp	 DWORD PTR [edx+ecx*4+1320], 0
  00c49	74 16		 je	 SHORT $L59046
  00c4b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00c4e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c51	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  00c58	8b 45 08	 mov	 eax, DWORD PTR _which$[ebp]
  00c5b	3b 02		 cmp	 eax, DWORD PTR [edx]
  00c5d	75 02		 jne	 SHORT $L59046

; 270  : 			break;

  00c5f	eb 02		 jmp	 SHORT $L59045
$L59046:

; 271  : 
; 272  : 	if (i < MAXCYCLES)

  00c61	eb c9		 jmp	 SHORT $L59044
$L59045:
  00c63	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00c67	7d 56		 jge	 SHORT $L59047

; 274  : 		if (cycle[i]->pause)

  00c69	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00c6c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c6f	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00c76	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00c7a	74 23		 je	 SHORT $L59048

; 275  : 			cycle[i]->pause--; 

  00c7c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00c7f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c82	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00c89	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00c8c	83 e9 01	 sub	 ecx, 1
  00c8f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00c92	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c95	8b 94 90 28 05
	00 00		 mov	 edx, DWORD PTR [eax+edx*4+1320]
  00c9c	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$L59048:

; 276  : 		cycle[i]->lastUpdate = timeMgr->GetTickCount();

  00c9f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  00ca4	8b 10		 mov	 edx, DWORD PTR [eax]
  00ca6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  00cac	ff 52 04	 call	 DWORD PTR [edx+4]
  00caf	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00cb2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00cb5	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  00cbc	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$L59047:

; 278  : }

  00cbf	8b e5		 mov	 esp, ebp
  00cc1	5d		 pop	 ebp
  00cc2	c2 04 00	 ret	 4
?CycleOn@PaletteMgrIndex@@UAEXH@Z ENDP			; PaletteMgrIndex::CycleOn
_this$ = -8
_i$ = -4
?CycleAllOn@PaletteMgrIndex@@UAEXXZ PROC NEAR		; PaletteMgrIndex::CycleAllOn

; 282  : {

  00cc5	55		 push	 ebp
  00cc6	8b ec		 mov	 ebp, esp
  00cc8	83 ec 08	 sub	 esp, 8
  00ccb	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 283  : 	int i;
; 284  : 	for (i = 0; i < MAXCYCLES; i++)

  00cce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00cd5	eb 09		 jmp	 SHORT $L59053
$L59054:
  00cd7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00cda	83 c0 01	 add	 eax, 1
  00cdd	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L59053:
  00ce0	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00ce4	7d 58		 jge	 SHORT $L59055

; 286  : 		if (cycle[i]->pause)

  00ce6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00ce9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00cec	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00cf3	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00cf7	74 23		 je	 SHORT $L59056

; 287  : 			cycle[i]->pause--; 

  00cf9	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00cfc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00cff	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00d06	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00d09	83 e9 01	 sub	 ecx, 1
  00d0c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00d0f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d12	8b 94 90 28 05
	00 00		 mov	 edx, DWORD PTR [eax+edx*4+1320]
  00d19	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$L59056:

; 288  : 		cycle[i]->lastUpdate = timeMgr->GetTickCount();

  00d1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  00d21	8b 10		 mov	 edx, DWORD PTR [eax]
  00d23	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  00d29	ff 52 04	 call	 DWORD PTR [edx+4]
  00d2c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00d2f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d32	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  00d39	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 289  : 	}

  00d3c	eb 99		 jmp	 SHORT $L59054
$L59055:

; 290  : }

  00d3e	8b e5		 mov	 esp, ebp
  00d40	5d		 pop	 ebp
  00d41	c3		 ret	 0
?CycleAllOn@PaletteMgrIndex@@UAEXXZ ENDP		; PaletteMgrIndex::CycleAllOn
_this$ = -8
_i$ = -4
?CycleAllPause@PaletteMgrIndex@@UAEXXZ PROC NEAR	; PaletteMgrIndex::CycleAllPause

; 294  : {

  00d42	55		 push	 ebp
  00d43	8b ec		 mov	 ebp, esp
  00d45	83 ec 08	 sub	 esp, 8
  00d48	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 295  : 	int i;
; 296  : 	for (i = 0; i < MAXCYCLES; i++)

  00d4b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00d52	eb 09		 jmp	 SHORT $L59061
$L59062:
  00d54	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00d57	83 c0 01	 add	 eax, 1
  00d5a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L59061:
  00d5d	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00d61	7d 21		 jge	 SHORT $L59063

; 297  : 		cycle[i]->current = cycle[i]->begin; // + cycle[i]->range - 1;

  00d63	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00d66	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d69	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00d70	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00d73	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d76	8b 8c 8a 28 05
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+1320]
  00d7d	8b 10		 mov	 edx, DWORD PTR [eax]
  00d7f	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00d82	eb d0		 jmp	 SHORT $L59062
$L59063:

; 298  : 
; 299  : 	ApplyAllCycles();

  00d84	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d87	e8 00 00 00 00	 call	 ?ApplyAllCycles@PaletteMgrIndex@@IAEXXZ ; PaletteMgrIndex::ApplyAllCycles

; 300  : 
; 301  : 	for (i = 0; i < MAXCYCLES; i++) 

  00d8c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00d93	eb 09		 jmp	 SHORT $L59064
$L59065:
  00d95	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00d98	83 c0 01	 add	 eax, 1
  00d9b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L59064:
  00d9e	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00da2	7d 25		 jge	 SHORT $L59066

; 302  : 		cycle[i]->pause++;

  00da4	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00da7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00daa	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00db1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00db4	83 c1 01	 add	 ecx, 1
  00db7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00dba	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00dbd	8b 94 90 28 05
	00 00		 mov	 edx, DWORD PTR [eax+edx*4+1320]
  00dc4	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  00dc7	eb cc		 jmp	 SHORT $L59065
$L59066:

; 303  : }

  00dc9	8b e5		 mov	 esp, ebp
  00dcb	5d		 pop	 ebp
  00dcc	c3		 ret	 0
?CycleAllPause@PaletteMgrIndex@@UAEXXZ ENDP		; PaletteMgrIndex::CycleAllPause
_which$ = 8
_this$ = -8
_i$ = -4
?CyclePause@PaletteMgrIndex@@UAEXH@Z PROC NEAR		; PaletteMgrIndex::CyclePause

; 307  : {

  00dcd	55		 push	 ebp
  00dce	8b ec		 mov	 ebp, esp
  00dd0	83 ec 08	 sub	 esp, 8
  00dd3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 308  : 	int i;
; 309  : 	for (i = 0; i < MAXCYCLES; i++)

  00dd6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00ddd	eb 09		 jmp	 SHORT $L59072
$L59073:
  00ddf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00de2	83 c0 01	 add	 eax, 1
  00de5	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L59072:
  00de8	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00dec	7d 28		 jge	 SHORT $L59074

; 310  : 		if (cycle[i] && which == cycle[i]->begin)

  00dee	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00df1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00df4	83 bc 8a 28 05
	00 00 00	 cmp	 DWORD PTR [edx+ecx*4+1320], 0
  00dfc	74 16		 je	 SHORT $L59075
  00dfe	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00e01	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e04	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  00e0b	8b 45 08	 mov	 eax, DWORD PTR _which$[ebp]
  00e0e	3b 02		 cmp	 eax, DWORD PTR [edx]
  00e10	75 02		 jne	 SHORT $L59075

; 311  : 			break;

  00e12	eb 02		 jmp	 SHORT $L59074
$L59075:

; 312  : 
; 313  : 	if (i < MAXCYCLES) 

  00e14	eb c9		 jmp	 SHORT $L59073
$L59074:
  00e16	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00e1a	7d 23		 jge	 SHORT $L59076

; 314  : 		cycle[i]->pause++;

  00e1c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00e1f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00e22	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00e29	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00e2c	83 c1 01	 add	 ecx, 1
  00e2f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00e32	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e35	8b 94 90 28 05
	00 00		 mov	 edx, DWORD PTR [eax+edx*4+1320]
  00e3c	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$L59076:

; 315  : }

  00e3f	8b e5		 mov	 esp, ebp
  00e41	5d		 pop	 ebp
  00e42	c2 04 00	 ret	 4
?CyclePause@PaletteMgrIndex@@UAEXH@Z ENDP		; PaletteMgrIndex::CyclePause
$T59547 = -12
_which$ = 8
_this$ = -16
_i$ = -4
_j$59087 = -8
?CycleOff@PaletteMgrIndex@@UAEXH@Z PROC NEAR		; PaletteMgrIndex::CycleOff

; 319  : {

  00e45	55		 push	 ebp
  00e46	8b ec		 mov	 ebp, esp
  00e48	83 ec 10	 sub	 esp, 16			; 00000010H
  00e4b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 320  : 	int i;
; 321  : 	for (i = 0; i < MAXCYCLES; i++)

  00e4e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00e55	eb 09		 jmp	 SHORT $L59082
$L59083:
  00e57	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00e5a	83 c0 01	 add	 eax, 1
  00e5d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L59082:
  00e60	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00e64	7d 28		 jge	 SHORT $L59084

; 322  : 		if (cycle[i] && which == cycle[i]->begin)

  00e66	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00e69	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00e6c	83 bc 8a 28 05
	00 00 00	 cmp	 DWORD PTR [edx+ecx*4+1320], 0
  00e74	74 16		 je	 SHORT $L59085
  00e76	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00e79	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e7c	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  00e83	8b 45 08	 mov	 eax, DWORD PTR _which$[ebp]
  00e86	3b 02		 cmp	 eax, DWORD PTR [edx]
  00e88	75 02		 jne	 SHORT $L59085

; 323  : 			break;

  00e8a	eb 02		 jmp	 SHORT $L59084
$L59085:

; 324  : 
; 325  : 	if (i < MAXCYCLES) {

  00e8c	eb c9		 jmp	 SHORT $L59083
$L59084:
  00e8e	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00e92	7d 73		 jge	 SHORT $L59086

; 326  : 		for (int j = 0; j < cycle[i]->range; j++) 

  00e94	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$59087[ebp], 0
  00e9b	eb 09		 jmp	 SHORT $L59088
$L59089:
  00e9d	8b 4d f8	 mov	 ecx, DWORD PTR _j$59087[ebp]
  00ea0	83 c1 01	 add	 ecx, 1
  00ea3	89 4d f8	 mov	 DWORD PTR _j$59087[ebp], ecx
$L59088:
  00ea6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00ea9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00eac	8b 8c 90 28 05
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+1320]
  00eb3	8b 55 f8	 mov	 edx, DWORD PTR _j$59087[ebp]
  00eb6	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00eb9	7d 1f		 jge	 SHORT $L59090

; 327  : 			cycleLoc[j + cycle[i]->begin] = 0; 

  00ebb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00ebe	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ec1	8b 94 81 28 05
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+1320]
  00ec8	8b 45 f8	 mov	 eax, DWORD PTR _j$59087[ebp]
  00ecb	03 02		 add	 eax, DWORD PTR [edx]
  00ecd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ed0	c6 84 01 28 04
	00 00 00	 mov	 BYTE PTR [ecx+eax+1064], 0
  00ed8	eb c3		 jmp	 SHORT $L59089
$L59090:

; 328  : 
; 329  : 		delete cycle[i];

  00eda	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00edd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00ee0	8b 8c 90 28 05
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+1320]
  00ee7	89 4d f4	 mov	 DWORD PTR $T59547[ebp], ecx
  00eea	8b 55 f4	 mov	 edx, DWORD PTR $T59547[ebp]
  00eed	52		 push	 edx
  00eee	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00ef3	83 c4 04	 add	 esp, 4

; 330  : 		cycle[i] = NULL;

  00ef6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00ef9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00efc	c7 84 81 28 05
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+1320], 0
$L59086:

; 332  : }

  00f07	8b e5		 mov	 esp, ebp
  00f09	5d		 pop	 ebp
  00f0a	c2 04 00	 ret	 4
?CycleOff@PaletteMgrIndex@@UAEXH@Z ENDP			; PaletteMgrIndex::CycleOff
$T59549 = -8
_this$ = -12
_i$ = -4
?CycleAllOff@PaletteMgrIndex@@UAEXXZ PROC NEAR		; PaletteMgrIndex::CycleAllOff

; 336  : {

  00f0d	55		 push	 ebp
  00f0e	8b ec		 mov	 ebp, esp
  00f10	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00f13	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 337  : 	int i;
; 338  : 	for (i = 0; i < MAXCYCLES; i++)

  00f16	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00f1d	eb 09		 jmp	 SHORT $L59096
$L59097:
  00f1f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00f22	83 c0 01	 add	 eax, 1
  00f25	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L59096:
  00f28	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00f2c	7d 2f		 jge	 SHORT $L59098

; 340  : 		delete cycle[i];

  00f2e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00f31	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00f34	8b 84 8a 28 05
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+1320]
  00f3b	89 45 f8	 mov	 DWORD PTR $T59549[ebp], eax
  00f3e	8b 4d f8	 mov	 ecx, DWORD PTR $T59549[ebp]
  00f41	51		 push	 ecx
  00f42	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00f47	83 c4 04	 add	 esp, 4

; 341  : 		cycle[i] = NULL;

  00f4a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00f4d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00f50	c7 84 90 28 05
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+edx*4+1320], 0

; 342  : 	}

  00f5b	eb c2		 jmp	 SHORT $L59097
$L59098:

; 343  : 	for (i = 0; i < MaxColors; i++) 

  00f5d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00f64	eb 09		 jmp	 SHORT $L59100
$L59101:
  00f66	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00f69	83 c1 01	 add	 ecx, 1
  00f6c	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L59100:
  00f6f	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00f76	7d 0f		 jge	 SHORT $L59102

; 344  : 		cycleLoc[i] = 0;

  00f78	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00f7b	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  00f7e	c6 82 28 04 00
	00 00		 mov	 BYTE PTR [edx+1064], 0
  00f85	eb df		 jmp	 SHORT $L59101
$L59102:

; 345  : }

  00f87	8b e5		 mov	 esp, ebp
  00f89	5d		 pop	 ebp
  00f8a	c3		 ret	 0
?CycleAllOff@PaletteMgrIndex@@UAEXXZ ENDP		; PaletteMgrIndex::CycleAllOff
_TEXT	ENDS
xdata$x	SEGMENT
$T59558	DD	019930520H
	DD	01H
	DD	FLAT:$T59560
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T59560	DD	0ffffffffH
	DD	FLAT:$L59556
xdata$x	ENDS
_TEXT	SEGMENT
$T59551 = -16
$T59552 = -20
$T59553 = -24
__$EHRec$ = -12
_pal$ = 8
_this$ = -28
?SetTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z PROC NEAR ; PaletteMgrIndex::SetTarget

; 349  : {

  00f8b	55		 push	 ebp
  00f8c	8b ec		 mov	 ebp, esp
  00f8e	6a ff		 push	 -1
  00f90	68 00 00 00 00	 push	 $L59559
  00f95	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00f9b	50		 push	 eax
  00f9c	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00fa3	83 ec 14	 sub	 esp, 20			; 00000014H
  00fa6	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 	delete target;

  00fa9	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00fac	8b 88 5c 09 00
	00		 mov	 ecx, DWORD PTR [eax+2396]
  00fb2	89 4d f0	 mov	 DWORD PTR $T59551[ebp], ecx
  00fb5	8b 55 f0	 mov	 edx, DWORD PTR $T59551[ebp]
  00fb8	52		 push	 edx
  00fb9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00fbe	83 c4 04	 add	 esp, 4

; 351  : 	target = New SOLPalette(pal);

  00fc1	68 00 04 00 00	 push	 1024			; 00000400H
  00fc6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00fcb	83 c4 04	 add	 esp, 4
  00fce	89 45 e8	 mov	 DWORD PTR $T59553[ebp], eax
  00fd1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00fd8	83 7d e8 00	 cmp	 DWORD PTR $T59553[ebp], 0
  00fdc	74 11		 je	 SHORT $L59554
  00fde	8b 45 08	 mov	 eax, DWORD PTR _pal$[ebp]
  00fe1	50		 push	 eax
  00fe2	8b 4d e8	 mov	 ecx, DWORD PTR $T59553[ebp]
  00fe5	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABV0@@Z ; SOLPalette::SOLPalette
  00fea	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  00fed	eb 07		 jmp	 SHORT $L59555
$L59554:
  00fef	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L59555:
  00ff6	8b 4d e0	 mov	 ecx, DWORD PTR -32+[ebp]
  00ff9	89 4d ec	 mov	 DWORD PTR $T59552[ebp], ecx
  00ffc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01003	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  01006	8b 45 ec	 mov	 eax, DWORD PTR $T59552[ebp]
  01009	89 82 5c 09 00
	00		 mov	 DWORD PTR [edx+2396], eax

; 352  : }

  0100f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01012	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01019	8b e5		 mov	 esp, ebp
  0101b	5d		 pop	 ebp
  0101c	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L59556:
  00050	8b 45 e8	 mov	 eax, DWORD PTR $T59553[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00059	59		 pop	 ecx
  0005a	c3		 ret	 0
$L59559:
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T59558
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z ENDP	; PaletteMgrIndex::SetTarget
xdata$x	SEGMENT
$T59568	DD	019930520H
	DD	01H
	DD	FLAT:$T59570
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T59570	DD	0ffffffffH
	DD	FLAT:$L59566
xdata$x	ENDS
_TEXT	SEGMENT
$T59562 = -16
$T59563 = -20
__$EHRec$ = -12
_pal$ = 8
_this$ = -24
?MergeTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z PROC NEAR ; PaletteMgrIndex::MergeTarget

; 356  : {

  0101f	55		 push	 ebp
  01020	8b ec		 mov	 ebp, esp
  01022	6a ff		 push	 -1
  01024	68 00 00 00 00	 push	 $L59569
  01029	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0102f	50		 push	 eax
  01030	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01037	83 ec 10	 sub	 esp, 16			; 00000010H
  0103a	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 357  : 	if (target)

  0103d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01040	83 b8 5c 09 00
	00 00		 cmp	 DWORD PTR [eax+2396], 0
  01047	74 14		 je	 SHORT $L59116

; 358  : 		target->Merge(pal);

  01049	8b 4d 08	 mov	 ecx, DWORD PTR _pal$[ebp]
  0104c	51		 push	 ecx
  0104d	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01050	8b 8a 5c 09 00
	00		 mov	 ecx, DWORD PTR [edx+2396]
  01056	e8 00 00 00 00	 call	 ?Merge@SOLPalette@@QAEXABV1@@Z ; SOLPalette::Merge

; 359  : 	else

  0105b	eb 4e		 jmp	 SHORT $L59117
$L59116:

; 360  : 		target = New SOLPalette(pal);

  0105d	68 00 04 00 00	 push	 1024			; 00000400H
  01062	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01067	83 c4 04	 add	 esp, 4
  0106a	89 45 ec	 mov	 DWORD PTR $T59563[ebp], eax
  0106d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01074	83 7d ec 00	 cmp	 DWORD PTR $T59563[ebp], 0
  01078	74 11		 je	 SHORT $L59564
  0107a	8b 45 08	 mov	 eax, DWORD PTR _pal$[ebp]
  0107d	50		 push	 eax
  0107e	8b 4d ec	 mov	 ecx, DWORD PTR $T59563[ebp]
  01081	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABV0@@Z ; SOLPalette::SOLPalette
  01086	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  01089	eb 07		 jmp	 SHORT $L59565
$L59564:
  0108b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L59565:
  01092	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  01095	89 4d f0	 mov	 DWORD PTR $T59562[ebp], ecx
  01098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0109f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  010a2	8b 45 f0	 mov	 eax, DWORD PTR $T59562[ebp]
  010a5	89 82 5c 09 00
	00		 mov	 DWORD PTR [edx+2396], eax
$L59117:

; 361  : }

  010ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  010ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  010b5	8b e5		 mov	 esp, ebp
  010b7	5d		 pop	 ebp
  010b8	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L59566:
  00065	8b 45 ec	 mov	 eax, DWORD PTR $T59563[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006e	59		 pop	 ecx
  0006f	c3		 ret	 0
$L59569:
  00070	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T59568
  00075	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MergeTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z ENDP ; PaletteMgrIndex::MergeTarget
xdata$x	SEGMENT
$T59579	DD	019930520H
	DD	01H
	DD	FLAT:$T59581
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T59581	DD	0ffffffffH
	DD	FLAT:$L59577
xdata$x	ENDS
_TEXT	SEGMENT
$T59572 = -16
$T59573 = -20
$T59574 = -24
__$EHRec$ = -12
_pal$ = 8
_this$ = -28
?SetStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z PROC NEAR ; PaletteMgrIndex::SetStart

; 365  : {

  010bb	55		 push	 ebp
  010bc	8b ec		 mov	 ebp, esp
  010be	6a ff		 push	 -1
  010c0	68 00 00 00 00	 push	 $L59580
  010c5	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  010cb	50		 push	 eax
  010cc	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  010d3	83 ec 14	 sub	 esp, 20			; 00000014H
  010d6	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 366  : 	delete start;

  010d9	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  010dc	8b 88 58 09 00
	00		 mov	 ecx, DWORD PTR [eax+2392]
  010e2	89 4d f0	 mov	 DWORD PTR $T59572[ebp], ecx
  010e5	8b 55 f0	 mov	 edx, DWORD PTR $T59572[ebp]
  010e8	52		 push	 edx
  010e9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  010ee	83 c4 04	 add	 esp, 4

; 367  : 	start = New SOLPalette(pal);

  010f1	68 00 04 00 00	 push	 1024			; 00000400H
  010f6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  010fb	83 c4 04	 add	 esp, 4
  010fe	89 45 e8	 mov	 DWORD PTR $T59574[ebp], eax
  01101	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01108	83 7d e8 00	 cmp	 DWORD PTR $T59574[ebp], 0
  0110c	74 11		 je	 SHORT $L59575
  0110e	8b 45 08	 mov	 eax, DWORD PTR _pal$[ebp]
  01111	50		 push	 eax
  01112	8b 4d e8	 mov	 ecx, DWORD PTR $T59574[ebp]
  01115	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABV0@@Z ; SOLPalette::SOLPalette
  0111a	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  0111d	eb 07		 jmp	 SHORT $L59576
$L59575:
  0111f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L59576:
  01126	8b 4d e0	 mov	 ecx, DWORD PTR -32+[ebp]
  01129	89 4d ec	 mov	 DWORD PTR $T59573[ebp], ecx
  0112c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01133	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  01136	8b 45 ec	 mov	 eax, DWORD PTR $T59573[ebp]
  01139	89 82 58 09 00
	00		 mov	 DWORD PTR [edx+2392], eax

; 368  : }

  0113f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01142	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01149	8b e5		 mov	 esp, ebp
  0114b	5d		 pop	 ebp
  0114c	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L59577:
  0007a	8b 45 e8	 mov	 eax, DWORD PTR $T59574[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00083	59		 pop	 ecx
  00084	c3		 ret	 0
$L59580:
  00085	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T59579
  0008a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z ENDP	; PaletteMgrIndex::SetStart
xdata$x	SEGMENT
$T59589	DD	019930520H
	DD	01H
	DD	FLAT:$T59591
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T59591	DD	0ffffffffH
	DD	FLAT:$L59587
xdata$x	ENDS
_TEXT	SEGMENT
$T59583 = -16
$T59584 = -20
__$EHRec$ = -12
_pal$ = 8
_this$ = -24
?MergeStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z PROC NEAR ; PaletteMgrIndex::MergeStart

; 372  : {

  0114f	55		 push	 ebp
  01150	8b ec		 mov	 ebp, esp
  01152	6a ff		 push	 -1
  01154	68 00 00 00 00	 push	 $L59590
  01159	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0115f	50		 push	 eax
  01160	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01167	83 ec 10	 sub	 esp, 16			; 00000010H
  0116a	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 373  : 	if (start)

  0116d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01170	83 b8 58 09 00
	00 00		 cmp	 DWORD PTR [eax+2392], 0
  01177	74 14		 je	 SHORT $L59135

; 374  : 		start->Merge(pal);

  01179	8b 4d 08	 mov	 ecx, DWORD PTR _pal$[ebp]
  0117c	51		 push	 ecx
  0117d	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01180	8b 8a 58 09 00
	00		 mov	 ecx, DWORD PTR [edx+2392]
  01186	e8 00 00 00 00	 call	 ?Merge@SOLPalette@@QAEXABV1@@Z ; SOLPalette::Merge

; 375  : 	else

  0118b	eb 4e		 jmp	 SHORT $L59136
$L59135:

; 376  : 		start = New SOLPalette(pal);

  0118d	68 00 04 00 00	 push	 1024			; 00000400H
  01192	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01197	83 c4 04	 add	 esp, 4
  0119a	89 45 ec	 mov	 DWORD PTR $T59584[ebp], eax
  0119d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  011a4	83 7d ec 00	 cmp	 DWORD PTR $T59584[ebp], 0
  011a8	74 11		 je	 SHORT $L59585
  011aa	8b 45 08	 mov	 eax, DWORD PTR _pal$[ebp]
  011ad	50		 push	 eax
  011ae	8b 4d ec	 mov	 ecx, DWORD PTR $T59584[ebp]
  011b1	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABV0@@Z ; SOLPalette::SOLPalette
  011b6	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  011b9	eb 07		 jmp	 SHORT $L59586
$L59585:
  011bb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L59586:
  011c2	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  011c5	89 4d f0	 mov	 DWORD PTR $T59583[ebp], ecx
  011c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  011cf	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  011d2	8b 45 f0	 mov	 eax, DWORD PTR $T59583[ebp]
  011d5	89 82 58 09 00
	00		 mov	 DWORD PTR [edx+2392], eax
$L59136:

; 377  : }

  011db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  011de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  011e5	8b e5		 mov	 esp, ebp
  011e7	5d		 pop	 ebp
  011e8	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L59587:
  0008f	8b 45 ec	 mov	 eax, DWORD PTR $T59584[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00098	59		 pop	 ecx
  00099	c3		 ret	 0
$L59590:
  0009a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T59589
  0009f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MergeStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z ENDP	; PaletteMgrIndex::MergeStart
xdata$x	SEGMENT
$T59600	DD	019930520H
	DD	01H
	DD	FLAT:$T59602
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T59602	DD	0ffffffffH
	DD	FLAT:$L59598
xdata$x	ENDS
_TEXT	SEGMENT
$T59593 = -16
$T59594 = -20
$T59595 = -24
__$EHRec$ = -12
_pal$ = 8
_percent$ = 12
_ticks$ = 16
_begin$ = 20
_end$ = 24
_this$ = -28
?SetVary@PaletteMgrIndex@@UAEXABVSOLPalette@@HHHH@Z PROC NEAR ; PaletteMgrIndex::SetVary

; 382  : {

  011eb	55		 push	 ebp
  011ec	8b ec		 mov	 ebp, esp
  011ee	6a ff		 push	 -1
  011f0	68 00 00 00 00	 push	 $L59601
  011f5	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  011fb	50		 push	 eax
  011fc	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01203	83 ec 14	 sub	 esp, 20			; 00000014H
  01206	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 383  : 	delete target;

  01209	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0120c	8b 88 5c 09 00
	00		 mov	 ecx, DWORD PTR [eax+2396]
  01212	89 4d f0	 mov	 DWORD PTR $T59593[ebp], ecx
  01215	8b 55 f0	 mov	 edx, DWORD PTR $T59593[ebp]
  01218	52		 push	 edx
  01219	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0121e	83 c4 04	 add	 esp, 4

; 384  : 	target = New SOLPalette(pal);

  01221	68 00 04 00 00	 push	 1024			; 00000400H
  01226	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0122b	83 c4 04	 add	 esp, 4
  0122e	89 45 e8	 mov	 DWORD PTR $T59595[ebp], eax
  01231	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01238	83 7d e8 00	 cmp	 DWORD PTR $T59595[ebp], 0
  0123c	74 11		 je	 SHORT $L59596
  0123e	8b 45 08	 mov	 eax, DWORD PTR _pal$[ebp]
  01241	50		 push	 eax
  01242	8b 4d e8	 mov	 ecx, DWORD PTR $T59595[ebp]
  01245	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@ABV0@@Z ; SOLPalette::SOLPalette
  0124a	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  0124d	eb 07		 jmp	 SHORT $L59597
$L59596:
  0124f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L59597:
  01256	8b 4d e0	 mov	 ecx, DWORD PTR -32+[ebp]
  01259	89 4d ec	 mov	 DWORD PTR $T59594[ebp], ecx
  0125c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01263	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  01266	8b 45 ec	 mov	 eax, DWORD PTR $T59594[ebp]
  01269	89 82 5c 09 00
	00		 mov	 DWORD PTR [edx+2396], eax

; 385  : 	timeLastVary = timeMgr->GetTickCount();

  0126f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  01275	8b 11		 mov	 edx, DWORD PTR [ecx]
  01277	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0127d	ff 52 04	 call	 DWORD PTR [edx+4]
  01280	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01283	89 81 50 05 00
	00		 mov	 DWORD PTR [ecx+1360], eax

; 386  : 	if (ticks && percent != varyPercent)

  01289	83 7d 10 00	 cmp	 DWORD PTR _ticks$[ebp], 0
  0128d	74 7f		 je	 SHORT $L59154
  0128f	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  01292	8b 45 0c	 mov	 eax, DWORD PTR _percent$[ebp]
  01295	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  01298	74 74		 je	 SHORT $L59154

; 388  : 		targetVaryPercent = percent;

  0129a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0129d	8b 55 0c	 mov	 edx, DWORD PTR _percent$[ebp]
  012a0	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 389  : 		deltaTimeVary = ticks/(percent-varyPercent);

  012a3	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  012a6	8b 4d 0c	 mov	 ecx, DWORD PTR _percent$[ebp]
  012a9	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  012ac	8b 45 10	 mov	 eax, DWORD PTR _ticks$[ebp]
  012af	99		 cdq
  012b0	f7 f9		 idiv	 ecx
  012b2	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  012b5	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 390  : 		if (deltaTimeVary < 0)

  012b8	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  012bb	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  012bf	7d 1a		 jge	 SHORT $L59155

; 392  : 			varyDirection = -1;

  012c1	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  012c4	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 393  : 			deltaTimeVary  = -deltaTimeVary;

  012cb	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  012ce	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  012d1	f7 d8		 neg	 eax
  012d3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  012d6	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 395  : 		else if (deltaTimeVary > 0)

  012d9	eb 31		 jmp	 SHORT $L59158
$L59155:
  012db	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  012de	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  012e2	7e 0c		 jle	 SHORT $L59157

; 397  : 			varyDirection = 1;

  012e4	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  012e7	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1

; 399  : 		else

  012ee	eb 1c		 jmp	 SHORT $L59158
$L59157:

; 401  : 			varyPercent = targetVaryPercent = percent;

  012f0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  012f3	8b 55 0c	 mov	 edx, DWORD PTR _percent$[ebp]
  012f6	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  012f9	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  012fc	8b 4d 0c	 mov	 ecx, DWORD PTR _percent$[ebp]
  012ff	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 402  : 			varyDirection = 0;

  01302	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  01305	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
$L59158:

; 405  : 	else

  0130c	eb 1c		 jmp	 SHORT $L59159
$L59154:

; 407  : 		varyPercent = targetVaryPercent = percent;

  0130e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  01311	8b 4d 0c	 mov	 ecx, DWORD PTR _percent$[ebp]
  01314	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  01317	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0131a	8b 45 0c	 mov	 eax, DWORD PTR _percent$[ebp]
  0131d	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 408  : 		varyDirection = 0;

  01320	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01323	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$L59159:

; 410  : 
; 411  : 	if (begin > -1)

  0132a	83 7d 14 ff	 cmp	 DWORD PTR _begin$[ebp], -1
  0132e	7e 09		 jle	 SHORT $L59160

; 412  : 		varyStartPos = begin;

  01330	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  01333	8b 45 14	 mov	 eax, DWORD PTR _begin$[ebp]
  01336	89 42 14	 mov	 DWORD PTR [edx+20], eax
$L59160:

; 413  : 
; 414  : 	if (end > -1)

  01339	83 7d 18 ff	 cmp	 DWORD PTR _end$[ebp], -1
  0133d	7e 09		 jle	 SHORT $L59161

; 415  : 		varyEndPos = end;

  0133f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01342	8b 55 18	 mov	 edx, DWORD PTR _end$[ebp]
  01345	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$L59161:

; 416  : }

  01348	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0134b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01352	8b e5		 mov	 esp, ebp
  01354	5d		 pop	 ebp
  01355	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
text$x	SEGMENT
$L59598:
  000a4	8b 45 e8	 mov	 eax, DWORD PTR $T59595[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ad	59		 pop	 ecx
  000ae	c3		 ret	 0
$L59601:
  000af	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T59600
  000b4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetVary@PaletteMgrIndex@@UAEXABVSOLPalette@@HHHH@Z ENDP ; PaletteMgrIndex::SetVary
_TEXT	SEGMENT
_percent$ = 8
_ticks$ = 12
_begin$ = 16
_end$ = 20
_this$ = -4
?SetVaryPercent@PaletteMgrIndex@@UAEXHHHH@Z PROC NEAR	; PaletteMgrIndex::SetVaryPercent

; 420  : {

  01358	55		 push	 ebp
  01359	8b ec		 mov	 ebp, esp
  0135b	51		 push	 ecx
  0135c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 421  : 	if (target)

  0135f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01362	83 b8 5c 09 00
	00 00		 cmp	 DWORD PTR [eax+2396], 0
  01369	0f 84 bb 00 00
	00		 je	 $L59175

; 423  : 		timeLastVary = timeMgr->GetTickCount();

  0136f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  01375	8b 11		 mov	 edx, DWORD PTR [ecx]
  01377	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0137d	ff 52 04	 call	 DWORD PTR [edx+4]
  01380	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01383	89 81 50 05 00
	00		 mov	 DWORD PTR [ecx+1360], eax

; 424  : 		if (ticks && percent != varyPercent)

  01389	83 7d 0c 00	 cmp	 DWORD PTR _ticks$[ebp], 0
  0138d	74 7f		 je	 SHORT $L59170
  0138f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01392	8b 45 08	 mov	 eax, DWORD PTR _percent$[ebp]
  01395	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  01398	74 74		 je	 SHORT $L59170

; 426  : 			targetVaryPercent = percent;

  0139a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0139d	8b 55 08	 mov	 edx, DWORD PTR _percent$[ebp]
  013a0	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 427  : 			deltaTimeVary = ticks/(percent-varyPercent);

  013a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013a6	8b 4d 08	 mov	 ecx, DWORD PTR _percent$[ebp]
  013a9	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  013ac	8b 45 0c	 mov	 eax, DWORD PTR _ticks$[ebp]
  013af	99		 cdq
  013b0	f7 f9		 idiv	 ecx
  013b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  013b5	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 428  : 			if (deltaTimeVary < 0)

  013b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013bb	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  013bf	7d 1a		 jge	 SHORT $L59171

; 430  : 				varyDirection = -1;

  013c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013c4	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 431  : 				deltaTimeVary  = -deltaTimeVary;

  013cb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  013ce	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  013d1	f7 d8		 neg	 eax
  013d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013d6	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 433  : 			else if (deltaTimeVary > 0)

  013d9	eb 31		 jmp	 SHORT $L59174
$L59171:
  013db	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  013de	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  013e2	7e 0c		 jle	 SHORT $L59173

; 435  : 				varyDirection = 1;

  013e4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013e7	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1

; 437  : 			else

  013ee	eb 1c		 jmp	 SHORT $L59174
$L59173:

; 439  : 				varyPercent = targetVaryPercent = percent;

  013f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013f3	8b 55 08	 mov	 edx, DWORD PTR _percent$[ebp]
  013f6	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  013f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013fc	8b 4d 08	 mov	 ecx, DWORD PTR _percent$[ebp]
  013ff	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 440  : 				varyDirection = 0;

  01402	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01405	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
$L59174:

; 443  : 		else

  0140c	eb 1c		 jmp	 SHORT $L59175
$L59170:

; 445  : 			varyPercent = targetVaryPercent = percent;

  0140e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01411	8b 4d 08	 mov	 ecx, DWORD PTR _percent$[ebp]
  01414	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  01417	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0141a	8b 45 08	 mov	 eax, DWORD PTR _percent$[ebp]
  0141d	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 446  : 			varyDirection = 0;

  01420	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01423	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$L59175:

; 449  : 
; 450  : 	if (begin > -1)

  0142a	83 7d 10 ff	 cmp	 DWORD PTR _begin$[ebp], -1
  0142e	7e 09		 jle	 SHORT $L59176

; 451  : 		varyStartPos = begin;

  01430	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01433	8b 45 10	 mov	 eax, DWORD PTR _begin$[ebp]
  01436	89 42 14	 mov	 DWORD PTR [edx+20], eax
$L59176:

; 452  : 
; 453  : 	if (end > -1)

  01439	83 7d 14 ff	 cmp	 DWORD PTR _end$[ebp], -1
  0143d	7e 09		 jle	 SHORT $L59177

; 454  : 		varyStartPos = end;

  0143f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01442	8b 55 14	 mov	 edx, DWORD PTR _end$[ebp]
  01445	89 51 14	 mov	 DWORD PTR [ecx+20], edx
$L59177:

; 455  : }

  01448	8b e5		 mov	 esp, ebp
  0144a	5d		 pop	 ebp
  0144b	c2 10 00	 ret	 16			; 00000010H
?SetVaryPercent@PaletteMgrIndex@@UAEXHHHH@Z ENDP	; PaletteMgrIndex::SetVaryPercent
_ticks$ = 8
_this$ = -4
?SetVaryTime@PaletteMgrIndex@@UAEXH@Z PROC NEAR		; PaletteMgrIndex::SetVaryTime

; 459  : {

  0144e	55		 push	 ebp
  0144f	8b ec		 mov	 ebp, esp
  01451	51		 push	 ecx
  01452	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 460  : 	if (target)

  01455	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01458	83 b8 5c 09 00
	00 00		 cmp	 DWORD PTR [eax+2396], 0
  0145f	0f 84 ac 00 00
	00		 je	 $L59188

; 462  : 		timeLastVary = timeMgr->GetTickCount();

  01465	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0146b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0146d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  01473	ff 52 04	 call	 DWORD PTR [edx+4]
  01476	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01479	89 81 50 05 00
	00		 mov	 DWORD PTR [ecx+1360], eax

; 463  : 		if (ticks && targetVaryPercent != varyPercent)

  0147f	83 7d 08 00	 cmp	 DWORD PTR _ticks$[ebp], 0
  01483	74 76		 je	 SHORT $L59183
  01485	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01488	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0148b	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0148e	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  01491	74 68		 je	 SHORT $L59183

; 465  : 			deltaTimeVary = ticks/(targetVaryPercent-varyPercent);

  01493	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01496	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01499	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0149c	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  0149f	8b 45 08	 mov	 eax, DWORD PTR _ticks$[ebp]
  014a2	99		 cdq
  014a3	f7 f9		 idiv	 ecx
  014a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  014a8	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 466  : 			if (deltaTimeVary < 0)

  014ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  014ae	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  014b2	7d 1a		 jge	 SHORT $L59184

; 468  : 				varyDirection = -1;

  014b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014b7	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 469  : 				deltaTimeVary  = -deltaTimeVary;

  014be	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  014c1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  014c4	f7 d8		 neg	 eax
  014c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014c9	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 471  : 			else if (deltaTimeVary > 0)

  014cc	eb 2b		 jmp	 SHORT $L59187
$L59184:
  014ce	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  014d1	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  014d5	7e 0c		 jle	 SHORT $L59186

; 473  : 				varyDirection = 1;

  014d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  014da	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1

; 475  : 			else

  014e1	eb 16		 jmp	 SHORT $L59187
$L59186:

; 477  : 				varyPercent = targetVaryPercent;

  014e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  014e9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  014ec	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 478  : 				varyDirection = 0;

  014ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014f2	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$L59187:

; 481  : 		else

  014f9	eb 16		 jmp	 SHORT $L59188
$L59183:

; 483  : 			varyPercent = targetVaryPercent;

  014fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  014fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01501	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01504	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 484  : 			varyDirection = 0;

  01507	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0150a	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
$L59188:

; 487  : }

  01511	8b e5		 mov	 esp, ebp
  01513	5d		 pop	 ebp
  01514	c2 04 00	 ret	 4
?SetVaryTime@PaletteMgrIndex@@UAEXH@Z ENDP		; PaletteMgrIndex::SetVaryTime
_this$ = -20
_i$59199 = -4
_i$59207 = -8
_src$59214 = -12
_trg$59215 = -16
?ApplyVary@PaletteMgrIndex@@IAEXXZ PROC NEAR		; PaletteMgrIndex::ApplyVary

; 491  : {

  01517	55		 push	 ebp
  01518	8b ec		 mov	 ebp, esp
  0151a	83 ec 14	 sub	 esp, 20			; 00000014H
  0151d	53		 push	 ebx
  0151e	56		 push	 esi
  0151f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
$L59193:

; 492  : 	while((int)(timeMgr->GetTickCount() - timeLastVary) > deltaTimeVary && varyDirection)

  01522	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  01527	8b 10		 mov	 edx, DWORD PTR [eax]
  01529	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0152f	ff 52 04	 call	 DWORD PTR [edx+4]
  01532	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01535	2b 81 50 05 00
	00		 sub	 eax, DWORD PTR [ecx+1360]
  0153b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0153e	3b 42 24	 cmp	 eax, DWORD PTR [edx+36]
  01541	7e 4d		 jle	 SHORT $L59194
  01543	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01546	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0154a	74 44		 je	 SHORT $L59194

; 494  : 		timeLastVary += deltaTimeVary;

  0154c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0154f	8b 91 50 05 00
	00		 mov	 edx, DWORD PTR [ecx+1360]
  01555	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01558	03 50 24	 add	 edx, DWORD PTR [eax+36]
  0155b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0155e	89 91 50 05 00
	00		 mov	 DWORD PTR [ecx+1360], edx

; 495  : 		if (varyPercent == targetVaryPercent)

  01564	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01567	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0156a	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0156d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  01570	75 0a		 jne	 SHORT $L59196

; 496  : 			varyDirection = 0;

  01572	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01575	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
$L59196:

; 497  : 
; 498  : 		varyPercent += varyDirection;

  0157c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0157f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01582	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01585	03 4a 08	 add	 ecx, DWORD PTR [edx+8]
  01588	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0158b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 499  : 	}

  0158e	eb 92		 jmp	 SHORT $L59193
$L59194:

; 500  : 
; 501  : 	if (varyPercent == 0 || target == NULL)

  01590	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01593	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  01597	74 10		 je	 SHORT $L59198
  01599	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0159c	83 ba 5c 09 00
	00 00		 cmp	 DWORD PTR [edx+2396], 0
  015a3	0f 85 99 00 00
	00		 jne	 $L59197
$L59198:

; 503  : 		for (int i = 0; i < MaxColors; i++)

  015a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$59199[ebp], 0
  015b0	eb 09		 jmp	 SHORT $L59200
$L59201:
  015b2	8b 45 fc	 mov	 eax, DWORD PTR _i$59199[ebp]
  015b5	83 c0 01	 add	 eax, 1
  015b8	89 45 fc	 mov	 DWORD PTR _i$59199[ebp], eax
$L59200:
  015bb	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$59199[ebp], 256 ; 00000100H
  015c2	7d 79		 jge	 SHORT $L59202

; 505  : 			if (!start || i < varyStartPos || i > varyEndPos)

  015c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  015c7	83 b9 58 09 00
	00 00		 cmp	 DWORD PTR [ecx+2392], 0
  015ce	74 16		 je	 SHORT $L59204
  015d0	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  015d3	8b 45 fc	 mov	 eax, DWORD PTR _i$59199[ebp]
  015d6	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  015d9	7c 0b		 jl	 SHORT $L59204
  015db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  015de	8b 55 fc	 mov	 edx, DWORD PTR _i$59199[ebp]
  015e1	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  015e4	7e 2a		 jle	 SHORT $L59203
$L59204:

; 506  : 				next[i] = source[i];

  015e6	8b 45 fc	 mov	 eax, DWORD PTR _i$59199[ebp]
  015e9	50		 push	 eax
  015ea	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  015ed	81 c1 58 05 00
	00		 add	 ecx, 1368		; 00000558H
  015f3	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  015f8	8b 30		 mov	 esi, DWORD PTR [eax]
  015fa	8b 4d fc	 mov	 ecx, DWORD PTR _i$59199[ebp]
  015fd	51		 push	 ecx
  015fe	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01601	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01607	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  0160c	89 30		 mov	 DWORD PTR [eax], esi

; 507  : 			else 

  0160e	eb 28		 jmp	 SHORT $L59205
$L59203:

; 508  : 				next[i] = (*start)[i];

  01610	8b 55 fc	 mov	 edx, DWORD PTR _i$59199[ebp]
  01613	52		 push	 edx
  01614	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01617	8b 88 58 09 00
	00		 mov	 ecx, DWORD PTR [eax+2392]
  0161d	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01622	8b 30		 mov	 esi, DWORD PTR [eax]
  01624	8b 4d fc	 mov	 ecx, DWORD PTR _i$59199[ebp]
  01627	51		 push	 ecx
  01628	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0162b	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01631	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01636	89 30		 mov	 DWORD PTR [eax], esi
$L59205:

; 509  : 		}

  01638	e9 75 ff ff ff	 jmp	 $L59201
$L59202:

; 511  : 	else

  0163d	e9 ae 01 00 00	 jmp	 $L59210
$L59197:

; 513  : 		for (int i = 0; i < MaxColors; i++)

  01642	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$59207[ebp], 0
  01649	eb 09		 jmp	 SHORT $L59208
$L59209:
  0164b	8b 55 f8	 mov	 edx, DWORD PTR _i$59207[ebp]
  0164e	83 c2 01	 add	 edx, 1
  01651	89 55 f8	 mov	 DWORD PTR _i$59207[ebp], edx
$L59208:
  01654	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$59207[ebp], 256 ; 00000100H
  0165b	0f 8d 8f 01 00
	00		 jge	 $L59210

; 515  : 			if (i < varyStartPos || i > varyEndPos)

  01661	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01664	8b 4d f8	 mov	 ecx, DWORD PTR _i$59207[ebp]
  01667	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0166a	7c 0b		 jl	 SHORT $L59212
  0166c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0166f	8b 45 f8	 mov	 eax, DWORD PTR _i$59207[ebp]
  01672	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  01675	7e 2d		 jle	 SHORT $L59211
$L59212:

; 516  : 				next[i] = source[i];

  01677	8b 4d f8	 mov	 ecx, DWORD PTR _i$59207[ebp]
  0167a	51		 push	 ecx
  0167b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0167e	81 c1 58 05 00
	00		 add	 ecx, 1368		; 00000558H
  01684	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01689	8b 30		 mov	 esi, DWORD PTR [eax]
  0168b	8b 55 f8	 mov	 edx, DWORD PTR _i$59207[ebp]
  0168e	52		 push	 edx
  0168f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01692	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01698	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  0169d	89 30		 mov	 DWORD PTR [eax], esi

; 517  : 			else

  0169f	e9 47 01 00 00	 jmp	 $L59213
$L59211:

; 519  : 				Rgb24F src;

  016a4	8d 4d f4	 lea	 ecx, DWORD PTR _src$59214[ebp]
  016a7	e8 00 00 00 00	 call	 ??0Rgb24F@@QAE@XZ	; Rgb24F::Rgb24F

; 520  : 				Rgb24F trg((*target)[i]);

  016ac	8b 45 f8	 mov	 eax, DWORD PTR _i$59207[ebp]
  016af	50		 push	 eax
  016b0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  016b3	8b 89 5c 09 00
	00		 mov	 ecx, DWORD PTR [ecx+2396]
  016b9	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  016be	8b 10		 mov	 edx, DWORD PTR [eax]
  016c0	89 55 f0	 mov	 DWORD PTR _trg$59215[ebp], edx

; 521  : 				if (start)

  016c3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  016c6	83 b8 58 09 00
	00 00		 cmp	 DWORD PTR [eax+2392], 0
  016cd	74 19		 je	 SHORT $L59216

; 522  : 					src = (*start)[i];

  016cf	8b 4d f8	 mov	 ecx, DWORD PTR _i$59207[ebp]
  016d2	51		 push	 ecx
  016d3	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  016d6	8b 8a 58 09 00
	00		 mov	 ecx, DWORD PTR [edx+2392]
  016dc	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  016e1	8b 00		 mov	 eax, DWORD PTR [eax]
  016e3	89 45 f4	 mov	 DWORD PTR _src$59214[ebp], eax

; 523  : 				else

  016e6	eb 17		 jmp	 SHORT $L59217
$L59216:

; 524  : 					src = source[i];

  016e8	8b 4d f8	 mov	 ecx, DWORD PTR _i$59207[ebp]
  016eb	51		 push	 ecx
  016ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  016ef	81 c1 58 05 00
	00		 add	 ecx, 1368		; 00000558H
  016f5	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  016fa	8b 10		 mov	 edx, DWORD PTR [eax]
  016fc	89 55 f4	 mov	 DWORD PTR _src$59214[ebp], edx
$L59217:

; 525  : 		 
; 526  : 				next[i].red = src.red + (uchar)(((int)(trg.red - src.red)) * varyPercent / 100);

  016ff	8b 5d f4	 mov	 ebx, DWORD PTR _src$59214[ebp]
  01702	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  01708	8b 45 f0	 mov	 eax, DWORD PTR _trg$59215[ebp]
  0170b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01710	8b 4d f4	 mov	 ecx, DWORD PTR _src$59214[ebp]
  01713	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01719	2b c1		 sub	 eax, ecx
  0171b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0171e	0f af 42 0c	 imul	 eax, DWORD PTR [edx+12]
  01722	99		 cdq
  01723	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01728	f7 f9		 idiv	 ecx
  0172a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0172f	03 d8		 add	 ebx, eax
  01731	8b 55 f8	 mov	 edx, DWORD PTR _i$59207[ebp]
  01734	52		 push	 edx
  01735	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01738	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  0173e	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01743	88 18		 mov	 BYTE PTR [eax], bl

; 527  : 				next[i].blue = src.blue + (uchar)(((int)(trg.blue - src.blue)) * varyPercent / 100);

  01745	8b 5d f6	 mov	 ebx, DWORD PTR _src$59214[ebp+2]
  01748	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  0174e	8b 45 f2	 mov	 eax, DWORD PTR _trg$59215[ebp+2]
  01751	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01756	8b 4d f6	 mov	 ecx, DWORD PTR _src$59214[ebp+2]
  01759	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0175f	2b c1		 sub	 eax, ecx
  01761	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  01764	0f af 42 0c	 imul	 eax, DWORD PTR [edx+12]
  01768	99		 cdq
  01769	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0176e	f7 f9		 idiv	 ecx
  01770	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01775	03 d8		 add	 ebx, eax
  01777	8b 55 f8	 mov	 edx, DWORD PTR _i$59207[ebp]
  0177a	52		 push	 edx
  0177b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0177e	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01784	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01789	88 58 02	 mov	 BYTE PTR [eax+2], bl

; 528  : 				next[i].green = src.green + (uchar)(((int)(trg.green - src.green)) * varyPercent / 100);

  0178c	8b 5d f5	 mov	 ebx, DWORD PTR _src$59214[ebp+1]
  0178f	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  01795	8b 45 f1	 mov	 eax, DWORD PTR _trg$59215[ebp+1]
  01798	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0179d	8b 4d f5	 mov	 ecx, DWORD PTR _src$59214[ebp+1]
  017a0	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  017a6	2b c1		 sub	 eax, ecx
  017a8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  017ab	0f af 42 0c	 imul	 eax, DWORD PTR [edx+12]
  017af	99		 cdq
  017b0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  017b5	f7 f9		 idiv	 ecx
  017b7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  017bc	03 d8		 add	 ebx, eax
  017be	8b 55 f8	 mov	 edx, DWORD PTR _i$59207[ebp]
  017c1	52		 push	 edx
  017c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  017c5	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  017cb	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  017d0	88 58 01	 mov	 BYTE PTR [eax+1], bl

; 529  : 				next[i].flag = src.flag;

  017d3	8b 45 f8	 mov	 eax, DWORD PTR _i$59207[ebp]
  017d6	50		 push	 eax
  017d7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  017da	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  017e0	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  017e5	8a 4d f7	 mov	 cl, BYTE PTR _src$59214[ebp+3]
  017e8	88 48 03	 mov	 BYTE PTR [eax+3], cl
$L59213:

; 531  : 		}

  017eb	e9 5b fe ff ff	 jmp	 $L59209
$L59210:

; 533  : }

  017f0	5e		 pop	 esi
  017f1	5b		 pop	 ebx
  017f2	8b e5		 mov	 esp, ebp
  017f4	5d		 pop	 ebp
  017f5	c3		 ret	 0
?ApplyVary@PaletteMgrIndex@@IAEXXZ ENDP			; PaletteMgrIndex::ApplyVary
_this$ = -4
?VaryOn@PaletteMgrIndex@@UAEXXZ PROC NEAR		; PaletteMgrIndex::VaryOn

; 537  : {      

  017f6	55		 push	 ebp
  017f7	8b ec		 mov	 ebp, esp
  017f9	51		 push	 ecx
  017fa	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 538  : 	if (varyPause)

  017fd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01800	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  01804	74 0f		 je	 SHORT $L59227

; 539  : 		varyPause--;

  01806	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01809	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0180c	83 ea 01	 sub	 edx, 1
  0180f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01812	89 50 1c	 mov	 DWORD PTR [eax+28], edx
$L59227:

; 540  : 
; 541  : 	if (target)

  01815	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01818	83 b9 5c 09 00
	00 00		 cmp	 DWORD PTR [ecx+2396], 0
  0181f	74 4e		 je	 SHORT $L59231

; 543  : 		if (!varyPause)

  01821	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01824	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  01828	75 45		 jne	 SHORT $L59231

; 545  : 			if (varyPercent != targetVaryPercent && deltaTimeVary)

  0182a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0182d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01830	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  01833	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  01836	74 2b		 je	 SHORT $L59230
  01838	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0183b	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0183f	74 22		 je	 SHORT $L59230

; 546  : 				varyDirection = (targetVaryPercent - varyPercent > 0) ? 1 : -1;

  01841	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01844	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01847	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0184a	2b 42 0c	 sub	 eax, DWORD PTR [edx+12]
  0184d	33 c9		 xor	 ecx, ecx
  0184f	85 c0		 test	 eax, eax
  01851	0f 9e c1	 setle	 cl
  01854	49		 dec	 ecx
  01855	83 e1 02	 and	 ecx, 2
  01858	83 c1 ff	 add	 ecx, -1
  0185b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0185e	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 547  : 			else

  01861	eb 0c		 jmp	 SHORT $L59231
$L59230:

; 548  : 				varyPercent = targetVaryPercent;

  01863	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01866	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01869	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0186c	89 50 0c	 mov	 DWORD PTR [eax+12], edx
$L59231:

; 551  : }

  0186f	8b e5		 mov	 esp, ebp
  01871	5d		 pop	 ebp
  01872	c3		 ret	 0
?VaryOn@PaletteMgrIndex@@UAEXXZ ENDP			; PaletteMgrIndex::VaryOn
$T59608 = -4
$T59609 = -8
_this$ = -12
?VaryOff@PaletteMgrIndex@@UAEXXZ PROC NEAR		; PaletteMgrIndex::VaryOff

; 555  : { 

  01873	55		 push	 ebp
  01874	8b ec		 mov	 ebp, esp
  01876	83 ec 0c	 sub	 esp, 12			; 0000000cH
  01879	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 556  : 	varyPause = 0;

  0187c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0187f	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 557  : 	varyPercent = targetVaryPercent = 0;

  01886	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01889	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  01890	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  01893	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 558  : 	varyStartPos = 0;

  0189a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0189d	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 559  : 	varyEndPos = 255;

  018a4	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  018a7	c7 41 18 ff 00
	00 00		 mov	 DWORD PTR [ecx+24], 255	; 000000ffH

; 560  : 	varyDirection = 0;  

  018ae	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  018b1	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 561  : 
; 562  : 	delete target;

  018b8	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  018bb	8b 88 5c 09 00
	00		 mov	 ecx, DWORD PTR [eax+2396]
  018c1	89 4d fc	 mov	 DWORD PTR $T59608[ebp], ecx
  018c4	8b 55 fc	 mov	 edx, DWORD PTR $T59608[ebp]
  018c7	52		 push	 edx
  018c8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  018cd	83 c4 04	 add	 esp, 4

; 563  : 	target = NULL;

  018d0	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  018d3	c7 80 5c 09 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+2396], 0

; 564  : 
; 565  : 	delete start;

  018dd	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  018e0	8b 91 58 09 00
	00		 mov	 edx, DWORD PTR [ecx+2392]
  018e6	89 55 f8	 mov	 DWORD PTR $T59609[ebp], edx
  018e9	8b 45 f8	 mov	 eax, DWORD PTR $T59609[ebp]
  018ec	50		 push	 eax
  018ed	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  018f2	83 c4 04	 add	 esp, 4

; 566  : 	start = NULL;

  018f5	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  018f8	c7 81 58 09 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2392], 0

; 567  : }

  01902	8b e5		 mov	 esp, ebp
  01904	5d		 pop	 ebp
  01905	c3		 ret	 0
?VaryOff@PaletteMgrIndex@@UAEXXZ ENDP			; PaletteMgrIndex::VaryOff
_percent$ = 8
_begin$ = 12
_end$ = 16
_this$ = -8
_i$ = -4
?SetFade@PaletteMgrIndex@@UAEXHHH@Z PROC NEAR		; PaletteMgrIndex::SetFade

; 571  : {

  01906	55		 push	 ebp
  01907	8b ec		 mov	 ebp, esp
  01909	83 ec 08	 sub	 esp, 8
  0190c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 572  : 	for (int i = begin; i <= end; i++)

  0190f	8b 45 0c	 mov	 eax, DWORD PTR _begin$[ebp]
  01912	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  01915	eb 09		 jmp	 SHORT $L59244
$L59245:
  01917	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0191a	83 c1 01	 add	 ecx, 1
  0191d	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L59244:
  01920	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  01923	3b 55 10	 cmp	 edx, DWORD PTR _end$[ebp]
  01926	7f 0f		 jg	 SHORT $L59246

; 573  : 		intensity[i] = percent;

  01928	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0192b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0192e	8b 55 08	 mov	 edx, DWORD PTR _percent$[ebp]
  01931	89 54 81 28	 mov	 DWORD PTR [ecx+eax*4+40], edx
  01935	eb e0		 jmp	 SHORT $L59245
$L59246:

; 574  : }

  01937	8b e5		 mov	 esp, ebp
  01939	5d		 pop	 ebp
  0193a	c2 0c 00	 ret	 12			; 0000000cH
?SetFade@PaletteMgrIndex@@UAEXHHH@Z ENDP		; PaletteMgrIndex::SetFade
_this$ = -20
_i$ = -4
_red$59255 = -8
_green$59258 = -12
_blue$59261 = -16
?ApplyFade@PaletteMgrIndex@@IAEXXZ PROC NEAR		; PaletteMgrIndex::ApplyFade

; 578  : {

  0193d	55		 push	 ebp
  0193e	8b ec		 mov	 ebp, esp
  01940	83 ec 20	 sub	 esp, 32			; 00000020H
  01943	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 579  : 	for (int i = 0; i < MaxColors; i++)

  01946	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0194d	eb 09		 jmp	 SHORT $L59251
$L59252:
  0194f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01952	83 c0 01	 add	 eax, 1
  01955	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L59251:
  01958	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0195f	0f 8d 34 01 00
	00		 jge	 $L59253

; 581  : 		if (intensity[i] != 100)

  01965	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  01968	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0196b	83 7c 8a 28 64	 cmp	 DWORD PTR [edx+ecx*4+40], 100 ; 00000064H
  01970	0f 84 1e 01 00
	00		 je	 $L59254

; 583  : 			uint red = (uint)(next[i].red) * (uint)intensity[i] / 100U;

  01976	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01979	50		 push	 eax
  0197a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0197d	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01983	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01988	33 c9		 xor	 ecx, ecx
  0198a	8a 08		 mov	 cl, BYTE PTR [eax]
  0198c	8b c1		 mov	 eax, ecx
  0198e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  01991	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01994	0f af 44 91 28	 imul	 eax, DWORD PTR [ecx+edx*4+40]
  01999	33 d2		 xor	 edx, edx
  0199b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  019a0	f7 f1		 div	 ecx
  019a2	89 45 f8	 mov	 DWORD PTR _red$59255[ebp], eax

; 584  : 			uint green = (uint)(next[i].green) * (uint)intensity[i] / 100U;

  019a5	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  019a8	52		 push	 edx
  019a9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  019ac	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  019b2	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  019b7	33 c9		 xor	 ecx, ecx
  019b9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  019bc	8b c1		 mov	 eax, ecx
  019be	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  019c1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  019c4	0f af 44 91 28	 imul	 eax, DWORD PTR [ecx+edx*4+40]
  019c9	33 d2		 xor	 edx, edx
  019cb	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  019d0	f7 f1		 div	 ecx
  019d2	89 45 f4	 mov	 DWORD PTR _green$59258[ebp], eax

; 585  : 			uint blue = (uint)(next[i].blue) * (uint)intensity[i] / 100U;

  019d5	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  019d8	52		 push	 edx
  019d9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  019dc	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  019e2	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  019e7	33 c9		 xor	 ecx, ecx
  019e9	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  019ec	8b c1		 mov	 eax, ecx
  019ee	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  019f1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  019f4	0f af 44 91 28	 imul	 eax, DWORD PTR [ecx+edx*4+40]
  019f9	33 d2		 xor	 edx, edx
  019fb	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01a00	f7 f1		 div	 ecx
  01a02	89 45 f0	 mov	 DWORD PTR _blue$59261[ebp], eax

; 586  : 			next[i].red = red > 255U ? 255U : red;

  01a05	81 7d f8 ff 00
	00 00		 cmp	 DWORD PTR _red$59255[ebp], 255 ; 000000ffH
  01a0c	76 09		 jbe	 SHORT $L59612
  01a0e	c7 45 e8 ff 00
	00 00		 mov	 DWORD PTR -24+[ebp], 255 ; 000000ffH
  01a15	eb 06		 jmp	 SHORT $L59613
$L59612:
  01a17	8b 55 f8	 mov	 edx, DWORD PTR _red$59255[ebp]
  01a1a	89 55 e8	 mov	 DWORD PTR -24+[ebp], edx
$L59613:
  01a1d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01a20	50		 push	 eax
  01a21	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01a24	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01a2a	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01a2f	8a 4d e8	 mov	 cl, BYTE PTR -24+[ebp]
  01a32	88 08		 mov	 BYTE PTR [eax], cl

; 587  : 			next[i].green = green > 255U ? 255U : green;

  01a34	81 7d f4 ff 00
	00 00		 cmp	 DWORD PTR _green$59258[ebp], 255 ; 000000ffH
  01a3b	76 09		 jbe	 SHORT $L59614
  01a3d	c7 45 e4 ff 00
	00 00		 mov	 DWORD PTR -28+[ebp], 255 ; 000000ffH
  01a44	eb 06		 jmp	 SHORT $L59615
$L59614:
  01a46	8b 55 f4	 mov	 edx, DWORD PTR _green$59258[ebp]
  01a49	89 55 e4	 mov	 DWORD PTR -28+[ebp], edx
$L59615:
  01a4c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01a4f	50		 push	 eax
  01a50	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01a53	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01a59	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01a5e	8a 4d e4	 mov	 cl, BYTE PTR -28+[ebp]
  01a61	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 588  : 			next[i].blue = blue > 255U ? 255U : blue;

  01a64	81 7d f0 ff 00
	00 00		 cmp	 DWORD PTR _blue$59261[ebp], 255 ; 000000ffH
  01a6b	76 09		 jbe	 SHORT $L59616
  01a6d	c7 45 e0 ff 00
	00 00		 mov	 DWORD PTR -32+[ebp], 255 ; 000000ffH
  01a74	eb 06		 jmp	 SHORT $L59617
$L59616:
  01a76	8b 55 f0	 mov	 edx, DWORD PTR _blue$59261[ebp]
  01a79	89 55 e0	 mov	 DWORD PTR -32+[ebp], edx
$L59617:
  01a7c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01a7f	50		 push	 eax
  01a80	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01a83	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01a89	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01a8e	8a 4d e0	 mov	 cl, BYTE PTR -32+[ebp]
  01a91	88 48 02	 mov	 BYTE PTR [eax+2], cl
$L59254:

; 590  : 	}    

  01a94	e9 b6 fe ff ff	 jmp	 $L59252
$L59253:

; 591  : }

  01a99	8b e5		 mov	 esp, ebp
  01a9b	5d		 pop	 ebp
  01a9c	c3		 ret	 0
?ApplyFade@PaletteMgrIndex@@IAEXXZ ENDP			; PaletteMgrIndex::ApplyFade
_this$ = -8
_i$ = -4
?FadeOff@PaletteMgrIndex@@UAEXXZ PROC NEAR		; PaletteMgrIndex::FadeOff

; 595  : {

  01a9d	55		 push	 ebp
  01a9e	8b ec		 mov	 ebp, esp
  01aa0	83 ec 08	 sub	 esp, 8
  01aa3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 596  : 	for (int i = 0; i < MaxColors; i++) 

  01aa6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01aad	eb 09		 jmp	 SHORT $L59268
$L59269:
  01aaf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01ab2	83 c0 01	 add	 eax, 1
  01ab5	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L59268:
  01ab8	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  01abf	7d 10		 jge	 SHORT $L59270

; 597  : 		intensity[i] = 100;

  01ac1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  01ac4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01ac7	c7 44 8a 28 64
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+40], 100 ; 00000064H
  01acf	eb de		 jmp	 SHORT $L59269
$L59270:

; 598  : }

  01ad1	8b e5		 mov	 esp, ebp
  01ad3	5d		 pop	 ebp
  01ad4	c3		 ret	 0
?FadeOff@PaletteMgrIndex@@UAEXXZ ENDP			; PaletteMgrIndex::FadeOff
_TEXT	ENDS
PUBLIC	?GRemapper@GraphicsMgr@@QAEAAVRemap@@XZ		; GraphicsMgr::GRemapper
EXTRN	?RemapAllTables@Remap@@QAEHH@Z:NEAR		; Remap::RemapAllTables
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
_TEXT	SEGMENT
_this$ = -12
_i$ = -8
_paletteChanged$ = -4
?UpdateFFrame@PaletteMgrIndex@@UAEHXZ PROC NEAR		; PaletteMgrIndex::UpdateFFrame

; 602  : {

  01ad5	55		 push	 ebp
  01ad6	8b ec		 mov	 ebp, esp
  01ad8	83 ec 0c	 sub	 esp, 12			; 0000000cH
  01adb	56		 push	 esi
  01adc	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 603  : 	for (int i = 0; i < MaxColors; i++) 

  01adf	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01ae6	eb 09		 jmp	 SHORT $L59275
$L59276:
  01ae8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  01aeb	83 c0 01	 add	 eax, 1
  01aee	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L59275:
  01af1	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  01af8	7d 2a		 jge	 SHORT $L59277

; 604  : 		next[i] = source[i];

  01afa	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  01afd	51		 push	 ecx
  01afe	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01b01	81 c1 58 05 00
	00		 add	 ecx, 1368		; 00000558H
  01b07	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01b0c	8b 30		 mov	 esi, DWORD PTR [eax]
  01b0e	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  01b11	52		 push	 edx
  01b12	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01b15	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01b1b	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  01b20	89 30		 mov	 DWORD PTR [eax], esi
  01b22	eb c4		 jmp	 SHORT $L59276
$L59277:

; 605  : 
; 606  : 	needUpdate = False;

  01b24	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  01b27	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 607  : 
; 608  : 	Bool paletteChanged = (current != next);

  01b2e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01b31	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01b37	51		 push	 ecx
  01b38	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01b3b	81 c1 60 09 00
	00		 add	 ecx, 2400		; 00000960H
  01b41	e8 00 00 00 00	 call	 ??9SOLPalette@@QBEHABV0@@Z ; SOLPalette::operator!=
  01b46	89 45 fc	 mov	 DWORD PTR _paletteChanged$[ebp], eax

; 609  :    return(graphMgr->GRemapper().RemapAllTables(paletteChanged));

  01b49	8b 55 fc	 mov	 edx, DWORD PTR _paletteChanged$[ebp]
  01b4c	52		 push	 edx
  01b4d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01b53	e8 00 00 00 00	 call	 ?GRemapper@GraphicsMgr@@QAEAAVRemap@@XZ ; GraphicsMgr::GRemapper
  01b58	8b c8		 mov	 ecx, eax
  01b5a	e8 00 00 00 00	 call	 ?RemapAllTables@Remap@@QAEHH@Z ; Remap::RemapAllTables

; 610  : }

  01b5f	5e		 pop	 esi
  01b60	8b e5		 mov	 esp, ebp
  01b62	5d		 pop	 ebp
  01b63	c3		 ret	 0
?UpdateFFrame@PaletteMgrIndex@@UAEHXZ ENDP		; PaletteMgrIndex::UpdateFFrame
_TEXT	ENDS
;	COMDAT ?GRemapper@GraphicsMgr@@QAEAAVRemap@@XZ
_TEXT	SEGMENT
_this$ = -4
?GRemapper@GraphicsMgr@@QAEAAVRemap@@XZ PROC NEAR	; GraphicsMgr::GRemapper, COMDAT

; 70   : 	Remap&	GRemapper() 							{return remapper;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 68 11 00 00	 add	 eax, 4456		; 00001168H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GRemapper@GraphicsMgr@@QAEAAVRemap@@XZ ENDP		; GraphicsMgr::GRemapper
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -8
_paletteChanged$ = -4
?UpdateForFrame@PaletteMgrIndex@@UAEHXZ PROC NEAR	; PaletteMgrIndex::UpdateForFrame

; 615  : {

  01b64	55		 push	 ebp
  01b65	8b ec		 mov	 ebp, esp
  01b67	83 ec 08	 sub	 esp, 8
  01b6a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 616  : 	ApplyAll();

  01b6d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01b70	e8 00 00 00 00	 call	 ?ApplyAll@PaletteMgrIndex@@IAEXXZ ; PaletteMgrIndex::ApplyAll

; 617  : 	needUpdate = False;

  01b75	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01b78	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 618  : 
; 619  : 	Bool paletteChanged = (current != next);

  01b7f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01b82	81 c1 60 0d 00
	00		 add	 ecx, 3424		; 00000d60H
  01b88	51		 push	 ecx
  01b89	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01b8c	81 c1 60 09 00
	00		 add	 ecx, 2400		; 00000960H
  01b92	e8 00 00 00 00	 call	 ??9SOLPalette@@QBEHABV0@@Z ; SOLPalette::operator!=
  01b97	89 45 fc	 mov	 DWORD PTR _paletteChanged$[ebp], eax

; 620  : 	return graphMgr->GRemapper().RemapAllTables(paletteChanged);

  01b9a	8b 55 fc	 mov	 edx, DWORD PTR _paletteChanged$[ebp]
  01b9d	52		 push	 edx
  01b9e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01ba4	e8 00 00 00 00	 call	 ?GRemapper@GraphicsMgr@@QAEAAVRemap@@XZ ; GraphicsMgr::GRemapper
  01ba9	8b c8		 mov	 ecx, eax
  01bab	e8 00 00 00 00	 call	 ?RemapAllTables@Remap@@QAEHH@Z ; Remap::RemapAllTables

; 621  : }

  01bb0	8b e5		 mov	 esp, ebp
  01bb2	5d		 pop	 ebp
  01bb3	c3		 ret	 0
?UpdateForFrame@PaletteMgrIndex@@UAEHXZ ENDP		; PaletteMgrIndex::UpdateForFrame
_index$ = 8
_this$ = -4
?SetGamma@PaletteMgrIndex@@UAEXH@Z PROC NEAR		; PaletteMgrIndex::SetGamma

; 625  : {

  01bb4	55		 push	 ebp
  01bb5	8b ec		 mov	 ebp, esp
  01bb7	51		 push	 ecx
  01bb8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 626  : 	assert(index >= 0  &&  index < 4);
; 627  : 
; 628  : 	gammaValue = index;

  01bbb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01bbe	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  01bc1	89 88 54 05 00
	00		 mov	 DWORD PTR [eax+1364], ecx

; 629  : }

  01bc7	8b e5		 mov	 esp, ebp
  01bc9	5d		 pop	 ebp
  01bca	c2 04 00	 ret	 4
?SetGamma@PaletteMgrIndex@@UAEXH@Z ENDP			; PaletteMgrIndex::SetGamma
_this$ = -4
?GammaOff@PaletteMgrIndex@@UAEXXZ PROC NEAR		; PaletteMgrIndex::GammaOff

; 633  : {

  01bcd	55		 push	 ebp
  01bce	8b ec		 mov	 ebp, esp
  01bd0	51		 push	 ecx
  01bd1	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 634  : 	gammaValue = -1;

  01bd4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01bd7	c7 80 54 05 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+1364], -1

; 635  : }

  01be1	8b e5		 mov	 esp, ebp
  01be3	5d		 pop	 ebp
  01be4	c3		 ret	 0
?GammaOff@PaletteMgrIndex@@UAEXXZ ENDP			; PaletteMgrIndex::GammaOff
_TEXT	ENDS
END

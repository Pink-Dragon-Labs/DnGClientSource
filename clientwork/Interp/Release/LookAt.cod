	TITLE	\\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\LookAt.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@NAAD@Magellan?5MSWHEEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FPAF@MouseZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CLBL@MSWHEEL_ROLLMSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DLPD@MSH_WHEELSUPPORT_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODOJ@MSH_SCROLL_LINES_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EDBF@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FGFK@CLSID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DMDD@?5?9?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOFL@Interface?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FNJL@?$CICLSID?$DP?$DP?$DP?$CJ?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DLIL@?5?9?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@NKPL@Unknown?5Error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@HOAP@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@BJHN@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MDHG@?4tlb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLHD@oleaut32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FJNM@UnRegisterTypeLib?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CDEE@DllGetVersion?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FDEG@comctl32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKNA@shell32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@ILEN@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@JLLA@?3Jan?3January?3Feb?3February?3Mar?3Ma@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCCD@true?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELCB@no?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LGKI@yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKHJ@C?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPIO@IDispatch?5error?5?$CD?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NADL@Unknown?5error?50x?$CF0lX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KLJH@invalid?5vector?$DMbool?$DO?5subscript?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MHAC@?$CFp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CFAI@0123456789abcdefABCDEF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KFAL@E?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KMAE@?0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MMAA@missing?5locale?5facet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __tcscmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcscoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextWindow@@YAPAUHWND__@@PAU1@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawState@@YGHPAUHDC__@@PAUHBRUSH__@@P6GH0JIHH@ZJIHHHHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextPtr@CSimpleList@@QBEPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CByteArray@@QBEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CByteArray@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CWordArray@@QBEGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CWordArray@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CDWordArray@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CDWordArray@@QAEAAKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CUIntArray@@QBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CUIntArray@@QAEAAIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ACPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CObArray@@QBEPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CObArray@@QAEAAPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CStringArray@@QBE?AVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CStringArray@@QAEAAVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSimpleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSimpleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMemoryException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemoryException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNotSupportedException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNotSupportedException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCArchiveException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFileException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFileException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFilePath@CFile@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CString@@IBEPAUCStringData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CString@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@CString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmpty@CString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YG_NABVCString@@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YG_NPBDABVCString@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDays@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalHours@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalMinutes@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalSeconds@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopLeft@CRect@@QAEAAVCPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CenterPoint@CRect@@QBE?AVCPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwapLeftRight@CRect@@SAXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ZCRect@@QAEXUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCResourceException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CResourceException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCUserException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CUserException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPen@@SGPAV1@PAUHPEN__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBrush@@SGPAV1@PAUHBRUSH__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPalette@@SGPAV1@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHmenu@CMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BringWindowToTop@CWnd@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateWindow@CWnd@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnChar@CWnd@@IAEXIII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CListBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCheckListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCheckListBox@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComboBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemData@CComboBox@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CComboBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEdit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCommonDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCommonDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintSelection@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintRange@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorders@CStatusBar@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRectTracker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmapButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmapButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualGUID@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCOleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1COleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleCurrency@@QAEXW4CurrencyStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4COleDateTime@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTime@@QAEXW4DateTimeStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0COleDateTimeSpan@@QAE@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTimeSpan@@QAEXW4DateTimeSpanStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@COleSafeArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDateTimeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonthCalCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDragListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatusBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListCtrl@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHotKeyCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpinButtonCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSliderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAnimateCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRichEditCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLineCount@CRichEditCtrl@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LimitText@CRichEditCtrl@@QAEXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLimitText@CRichEditCtrl@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RequestResize@CRichEditCtrl@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetEventMask@CRichEditCtrl@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTextLength@CRichEditCtrl@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCReBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CReBarCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBoxEx@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIPAddressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2BSTR@@YAPAGPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlTrace2@ATL@@YAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualGUID@ATL@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YAHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReplaceSingleQuote@CComModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@CComBSTR@ATL@@QAE_NPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalClear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlAdvise@ATL@@YGJPAUIUnknown@@0ABU_GUID@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_NextObjectMapEntry@ATL@@YAPAU_ATL_OBJMAP_ENTRY@1@PAU_ATL_MODULE@1@PAU21@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleInit@ATL@@YGJPAU_ATL_MODULE@1@PAU_ATL_OBJMAP_ENTRY@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterClassObjects@ATL@@YGJPAU_ATL_MODULE@1@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRevokeClassObjects@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleGetClassObject@ATL@@YGJPAU_ATL_MODULE@1@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleTerm@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddTermFunc@ATL@@YGJPAU_ATL_MODULE@1@P6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterServer@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServerEx@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServer@ATL@@YGJPAU_ATL_MODULE@1@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUpdateRegistryFromResourceD@ATL@@YGJPAU_ATL_MODULE@1@PBGHPAU_ATL_REGMAP_ENTRY@1@PAUIRegistrar@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleLoadTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBGPAPAGPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddCreateWndData@ATL@@YGXPAU_ATL_MODULE@1@PAU_AtlCreateWndData@1@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleExtractCreateWndData@ATL@@YGPAXPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBDPAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@invalid_argument@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0invalid_argument@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YAGDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@failure@ios_base@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7_bstr_t@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Compare@_bstr_t@@ABEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@Data_t@_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Assign@Data_t@_bstr_t@@QAEXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@Data_t@_bstr_t@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8_variant_t@@QBE_NPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@_variant_t@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonikerFile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDocument@COleServerItem@@QBEPAVCOleServerDoc@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DStringID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_nValue@CSCI_LongInt@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDLo@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDHi@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharInfo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pName@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pProfession@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pBiography@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pLevel@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pStrength@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pDexterity@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pIntelligence@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pEndurance@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pCarry@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pCarryMax@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pExperience@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pBuildPoints@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pArmorRating@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pPvp@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pPvp@CSCI_CharInfo@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAlignment@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pFace@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAttackStance@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAttackWidth@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAttackHeight@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pStand@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pWeaponName@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pWeaponDamageMin@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pWeaponDamageMax@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pWeaponCondition@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAttacksPerRound@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pDodgesPerRound@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pBlocksPerRound@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAttackDamageMin@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAttackDamageMax@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pMovementRate@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pStatusArray@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pNPCKills@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pPKills@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pMeleeMod@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pSpellMod@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pOldLevel@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pUpdateBio@CSCI_CharInfo@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pUpdateTitle@CSCI_CharInfo@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pManaDrain@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pMeleeArmorPierce@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pEvilMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pGoodMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAccountType@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pBillingDate@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAccountID@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pCredits@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pCoppers@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pCastResist@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pSpellResist@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_nRights@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ArmorInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ArmorInfo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pType@CSCI_ArmorInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pRating@CSCI_ArmorInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GroupMember@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProcessEvents@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTransient@CSkinWnd@@IAE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTransient@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Next@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Previous@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLargerThanOne@Ratio@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$vector@_NV?$allocator@I@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPBI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?BVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Zconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Mconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Ziterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Miterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@Vconst_iterator@12@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@_NV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nw@?$vector@_NV?$allocator@I@std@@@std@@KAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Trim@?$vector@_NV?$allocator@I@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$vector@_NV?$allocator@I@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Refresh@CTabDlgBtn@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabDlgBtn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSkinObj@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSkinBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTabDlgBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSkinObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSelectedTab@CTabDlg@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BringTabToTop@CMainPanelWnd@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckBounds@OCArray@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Data@OCArray@@QAEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ByteAt@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetByte@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetByte@CPackedData@@QAEXHE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutByte@CPackedData@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWord@CPackedData@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutWord@CPackedData@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LongAt@CPackedData@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBioLine@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSkinEdit@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBioLine@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCLookAt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CLookAt@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CSkinObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCLookAtFiller@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CLookAtFiller@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPVPAttribute@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSkinAttribute@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPVPAttribute@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCLookAtBtn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CLookAtBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCLookAtItem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPointContainer@@@ATL@@QAEPAPAUIConnectionPointContainer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPointContainer@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPointContainer@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPoint@@@ATL@@QAEPAPAUIConnectionPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPoint@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPoint@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIRegistrar@@@ATL@@QAEPAPAUIRegistrar@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIRegistrar@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIRegistrar@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIRegistrar@@@ATL@@QAEPAUIRegistrar@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInterfacePtr@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QBEPAUIMoniker@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QBEPAUIBinding@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$bitset@$05@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@ABV?$allocator@PAVCLookAtItem@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?front@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAPAVCLookAtItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEAAPAVCLookAtItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@IABIABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_allocator@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$allocator@I@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@IV?$allocator@I@std@@@std@@QAEPAIPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eq@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lt@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@IV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Viterator@?$vector@_NV?$allocator@I@std@@@std@@_NVreference@23@PAV423@H@std@@QAE@Viterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@_N$$CBVreference@23@PBV423@H@std@@QAE@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?test@?$bitset@$05@std@@QBE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLookAtItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Freenode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEXPAU_Node@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Value@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAVCLookAtItem@@PAU_Node@23@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@I@std@@QAEPAIIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@I@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@I@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@IV?$allocator@I@std@@@std@@QAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$bitset@$05@std@@ABEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Charalloc@?$allocator@PAVCLookAtItem@@@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCLookAtItem@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEPAU_Node@23@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@I@std@@QAEXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@I@std@@QAEXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@G@std@@QAEPAGIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@G@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXViterator@?$vector@_NV?$allocator@I@std@@@1@0AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@Vconst_iterator@31@0V231@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YADDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@GU?$char_traits@G@std@@@1@0IPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@std@@YA_NPBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lexicographical_compare@std@@YA_NPBI000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@I@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?isdigit@std@@YA_NDABVlocale@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAIHPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAI0ABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAPAVCLookAtItem@@ABQAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCLookAtItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@G@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@D@std@@@std@@SAPAV?$ctype@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@G@std@@@std@@SAPAV?$ctype@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAPAV?$numpunct@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAPAV?$numpunct@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Iter_cat@std@@YA?AUrandom_access_iterator_tag@1@ABU?$iterator@Urandom_access_iterator_tag@std@@_NH@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAIUrandom_access_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?mismatch@std@@YA?AU?$pair@PBIPBI@1@PBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPADPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPAGPBDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@PBIPBI@std@@QAE@ABQBI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECBioLine@@WGA@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECBioLine@@WHE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_eab22ac1_30c1_11cf_a7eb_0000c05bae0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d66d6f98_cdaa_11d0_b822_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9860_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000117_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000113_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d8_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBioLine@@6BCRichEditCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1f8352c0_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CLookAt@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMonthCalCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f220_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f208_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTabDlgBtn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc9_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa5_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000192_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000128_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000140_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CEdit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000122_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_920ff31f_ca25_451a_9738_3444fc206bcc
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b283_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CScrollBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bcc7_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CTabCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b3e7c340_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d49_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_85cb6900_4d95_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4f7ae600_0142_11d3_9dcf_89be4efb591e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBoxEx@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f203_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1ac3d9f0_175c_11d1_95be_00609797ea4f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_012dd920_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHotKeyCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020403_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f311_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1008c4a0_7613_11cf_9af1_0020af6e72f4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020410_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020404_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVoverflow_error@std@@@8??0overflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f23b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b15b8dc1_c7e1_11d0_8680_00aa00bdcb71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f52e2b61_18a1_11d1_b105_00805f49916b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3d7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2aa_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1de_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9d5_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000025_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000019_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d8_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_948c5ad3_c58d_11d0_9c0b_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020406_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_bc40bec1_c493_11d0_831b_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd21_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ee11629b_36df_11d3_9dd0_89d6dbbba800
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9bfbbc02_eff1_101a_84ed_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f03340_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_63cdbcb0_c1b1_11d0_9336_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_bb1a2ae1_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0c733a30_2a1c_11ce_ade5_00aa0044773d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65ce_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cb5bdc81_93c1_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f218_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f230_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ef_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSimpleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f377_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_000214e1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0e6d4d92_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ca478da0_3920_11d3_9dd0_8067e4a06603
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eae1ba61_a4ed_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9eb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55882_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVrange_error@std@@@8??0range_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f35f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3fd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd23_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a3ccedf3_2de2_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d10f6761_83e9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0002e011_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28d_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1ff_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f240_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1da_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCommonDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000129_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88a05c00_f000_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ee_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d5f56b60_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CLookAtFiller@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToolBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_08ec3e00_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af280b6_cb3f_11d0_891e_00c04fb6bfc4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9e7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020d03_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_85bd8e82_0fba_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CNotSupportedException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3fc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d40_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_359f3441_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f28b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_afa0dc11_c313_11d0_831a_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000023_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e0e270c1_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVbad_typeid@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c9_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_1c2056cc_5ef4_101b_8bc8_00aa003e3b29
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CLookAtBtn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2c2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fbf23b80_e3f0_101b_8488_00aa003e56f8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d9_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f1_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_b722bcc5_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSliderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_618736e0_3c3d_11cf_810c_00aa00389b71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000190_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CDragListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3af24292_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020d00_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000191_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_f77459a0_bf9a_11cf_ba4e_00c04fd70816
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f322_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f266_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a41_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4425_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9cb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$ctype@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@D@std@@@std@@0PAV?$numpunct@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@G@std@@@std@@0PAV?$numpunct@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@D@std@@@std@@0PAV?$ctype@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@G@std@@@std@@0PAV?$ctype@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f29c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_359f3443_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc8_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CBioLine@@6BCSkinCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e003_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f206_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f212_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020402_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ed_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f490eb00_1240_11d1_9888_006097deacf9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_typeid@std@@@8??0bad_typeid@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CBitmapButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1dd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f373_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214ea_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d7_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ed_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000112_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3f7f31ac_e15f_11d0_9c25_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000118_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f25f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fac32c80_cbe4_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7bf80980_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBioLine@@6BCScrollable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000002b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eb0fe172_1a3a_11d0_89b3_00a0c90a90ac
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_729fe2f8_1ea8_11d1_8f85_00c04fc2fbe1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f202_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ac60f6a0_0fd9_11d0_99cb_00c04fd64497
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bccb_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f216_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_04598fc6_866c_11cf_ab7c_00aa00c08fcf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7COleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_332c4426_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28c_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ee_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e013_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_594f31d0_7f19_11d0_b194_00a0c90dc8bf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_6d5140c1_7436_11ce_8034_00aa006009fa
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f313_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88e39e80_3578_11cf_ae69_08002b2e1262
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_742b0e01_14e6_101b_914e_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAnimateCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f37e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVunderflow_error@std@@@8??0underflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9c7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e7a1af80_4d96_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpinButtonCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ca04b7e6_0d21_11d1_8cc5_00c04fc2b085
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b288_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000126_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_163bb1e0_6e00_11cf_837a_48dc04c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_2a342fc2_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d8f015c0_c278_11ce_a49e_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd3f23c0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_df0b3d60_548f_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a7aba9c1_8983_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_744129e0_cbe5_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_68284faa_6a48_11d0_8c78_00c04fd918b4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000010_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CStatusBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3d5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_626fc520_a41e_11cf_a731_00a0c9082637
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_91a565c1_e38f_11d0_94bf_00a0c9055cbf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2ad_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d31_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56a34_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000012a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af24290_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1e0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f35c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a9d758a0_4617_11cf_95fc_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b8da6310_e19b_11d0_933c_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_db01a1e3_a42b_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_65725580_9b5d_11d0_9bfe_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_539698a0_cdca_11cf_a5eb_00aa0047a063
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d30c1661_cdaf_11d0_8a3e_00c04fc9e26e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3dc39d1d_c030_11d0_b81b_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d46_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_37deb787_2d9b_11d3_9dd0_c423e6542e10
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_922eada0_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_69d14c80_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFileException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CReBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000011c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_9c2cad80_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_70bdde00_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f3cf_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBioLine@@6BCMouseWheelable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CArchiveException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000121_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CResourceException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_d9f1e15a_ccdb_11d0_9c0c_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa2_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002df05_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRectTracker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f209_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000020_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f319_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f375_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f369_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cf51ed10_62fe_11cf_bf86_00a0c9034836
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_894ad3b0_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_baa342a0_2ded_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f29f6bc0_5021_11ce_aa15_00006901293f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e8_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f315_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f265_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMemoryException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cd_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d001f200_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e002_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_085fb2c0_0df8_11d1_8f4b_00a0c905413f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9e4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55dd814e_a1b7_4808_9625_4f75a3fad8a7
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f569d0_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CLookAtItem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ec_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214ee_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fa_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b285_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f361_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214eb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0c6c4200_c589_11d0_999a_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000139_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55881_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4ef6100a_af88_11d0_9846_00c04fc29993
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000002_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000138_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f7_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f372_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f5be2ee1_bfd7_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020411_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020405_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRichEditCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CPVPAttribute@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDateTimeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f376_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f401_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d9e89500_30fa_11d0_b724_00aa006c1a01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_376bd3aa_3845_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f357_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f360_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a1_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c01387a_6ac2_4ef1_bda2_ec5d26e3b065
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_37d84f60_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_322982e0_0855_11d3_9dcf_ddfb3ab09e18
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cabb0da0_da57_11cf_9974_0020afd79762
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_c04d65d2_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7d688a70_c613_11d0_999b_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f378_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f383_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1cff0050_6fdd_11d0_9328_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bb1a2ae2_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_01e44665_24ac_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_6cfc9ba1_fe87_11d2_9dcf_ed29fafe371d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9ba05970_f6a8_11cf_a442_00a0c90a8f39
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcca_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_83c2d7a0_0de6_11d3_9dcf_9423f1b2561c
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonikerFile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e3_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVdomain_error@std@@@8??0domain_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28f_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000104_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000110_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f207_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d4c_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_25b15600_0115_11d0_bf0d_00aa00b8dfd2
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000127_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000022_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000016_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c6_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCheckListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000026_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55272a00_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28b_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4427_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_aa5b6a80_b834_11d0_932f_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_e0e270c0_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e6_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000101_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000029_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3127ca40_446e_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_55980ba0_35aa_11cf_b671_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a1faf330_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a4c65425_0f82_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CIPAddressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CUserException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a6ef9861_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9862_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000018_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000193_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000024_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f200_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_dce47f78_8a6c_4c6d_a6f7_8be4427127c4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f204_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSkinObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000002a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ea_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd1ae5e0_a6ae_11ce_bd37_504200c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000102_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f0_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a42_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f24f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000001d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000194_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHeaderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_99caf010_415e_11cf_8814_00aa00b569f5
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_47d2657a_7b27_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ec_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f211_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f205_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0e6d4d90_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00021500_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc6_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_89bcb740_6119_101a_bcb7_00dd010655af
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bcfce0a0_ec17_11d0_8d10_00a0c90f2719
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d6_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000119_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000111_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000105_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000125_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7bf80981_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b289_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65d0_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_972de6c1_8b09_11d2_b652_a1fd6cc34260
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f244_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56afc_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000103_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000013e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e1_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000003_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f1db8392_7331_11d0_8c99_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_c4d244b0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2eb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?OnChar@CBioLine@@QAEXIII@Z			; CBioLine::OnChar
PUBLIC	?_messageEntries@CBioLine@@0QBUAFX_MSGMAP_ENTRY@@B ; CBioLine::_messageEntries
PUBLIC	?messageMap@CBioLine@@1UAFX_MSGMAP@@B		; CBioLine::messageMap
PUBLIC	?_GetBaseMessageMap@CBioLine@@KGPBUAFX_MSGMAP@@XZ ; CBioLine::_GetBaseMessageMap
PUBLIC	?m_pChar@CLookAt@@1VCSCI_CharInfo@@A		; CLookAt::m_pChar
PUBLIC	_IID_IInternalConnection
PUBLIC	?g_pLookAtScreen@@3PAPAVCLookAt@@A		; g_pLookAtScreen
PUBLIC	?LookAtScreenNames@@3PAY0DC@DA			; LookAtScreenNames
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?GUID_ATLVer30@ATL@@3U_GUID@@A			; ATL::GUID_ATLVer30
PUBLIC	?m_libid@CComModule@ATL@@2U_GUID@@A		; ATL::CComModule::m_libid
PUBLIC	_LIBID_ATLLib
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A ; CLookAtItem::m_VisibleLookAts
PUBLIC	?Months@@3PAY03DA				; Months
PUBLIC	?g_pLookAtFiller@@3PAVCLookAtFiller@@A		; g_pLookAtFiller
PUBLIC	?gNormalAffectTbl@@3PAY0DC@DA			; gNormalAffectTbl
PUBLIC	?gResistanceAffectTbl@@3PAY0DC@DA		; gResistanceAffectTbl
PUBLIC	?gWeaknessAffectTbl@@3PAY0DC@DA			; gWeaknessAffectTbl
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?OnResize@CLookAtItem@@QAEXPAUtagNMHDR@@PAJ@Z	; CLookAtItem::OnResize
PUBLIC	?_messageEntries@CLookAtItem@@0QBUAFX_MSGMAP_ENTRY@@B ; CLookAtItem::_messageEntries
PUBLIC	?messageMap@CLookAtItem@@1UAFX_MSGMAP@@B	; CLookAtItem::messageMap
PUBLIC	?_GetBaseMessageMap@CLookAtItem@@KGPBUAFX_MSGMAP@@XZ ; CLookAtItem::_GetBaseMessageMap
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_LIBID_ACTIVESKINLib
PUBLIC	_IID_ISkinForm
PUBLIC	_IID_ISkinObjectDisp
PUBLIC	_IID_ISkinSource
PUBLIC	_DIID__ISkinFormEvents
PUBLIC	_IID_ISkinFormEvents_Sink
PUBLIC	_CLSID_SkinForm
PUBLIC	_DIID__ISkinObjectDispEvents
PUBLIC	_IID_ICOMScript
PUBLIC	_IID_IComMorph
PUBLIC	_IID_IComMoveSize
PUBLIC	_IID_ISkinButton
PUBLIC	_CLSID_SkinObject
PUBLIC	_CLSID_COMScript
PUBLIC	_CLSID_ComMorph
PUBLIC	_CLSID_ComMoveSize
PUBLIC	_DIID__ISkinButtonEvents
PUBLIC	_CLSID_SkinButton
PUBLIC	_IID_ISkinPanel
PUBLIC	_DIID__ISkinPanelEvents
PUBLIC	_IID_ISkinLabel
PUBLIC	_CLSID_SkinPanel
PUBLIC	_DIID__ISkinLabelEvents
PUBLIC	_IID_ISkinScrollBar
PUBLIC	_CLSID_SkinLabel
PUBLIC	_DIID__ISkinScrollBarEvents
PUBLIC	_CLSID_SkinScrollBar
PUBLIC	_DIID__ISkinSourceEvents
PUBLIC	_IID_ISkinStorage
PUBLIC	_IID_ISkinPopup
PUBLIC	_IID_IComTransitions
PUBLIC	_IID_ISkinEvent
PUBLIC	_IID_IComProcTextures
PUBLIC	_IID_IComFilters
PUBLIC	_CLSID_SkinSource
PUBLIC	_CLSID_SkinStorage
PUBLIC	_CLSID_SkinPopup
PUBLIC	_CLSID_ComTransitions
PUBLIC	_CLSID_SkinEvent
PUBLIC	_CLSID_ComProcTextures
PUBLIC	_CLSID_ComFilters
_BSS	SEGMENT
?m_pChar@CLookAt@@1VCSCI_CharInfo@@A DW 01H DUP (?)	; CLookAt::m_pChar
	ALIGN	4

?g_pLookAtScreen@@3PAPAVCLookAt@@A DD 09H DUP (?)	; g_pLookAtScreen
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CComModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CComModule::m_libid
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
_BSS	SEGMENT
?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A DB 0cH DUP (?) ; CLookAtItem::m_VisibleLookAts
?g_pLookAtFiller@@3PAVCLookAtFiller@@A DD 01H DUP (?)	; g_pLookAtFiller
_BSS	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT
?GUID_ATLVer30@ATL@@3U_GUID@@A DD 0b62f5910H		; ATL::GUID_ATLVer30
	DW	06528H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT
_LIBID_ACTIVESKINLib DD 0972de6b5H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT
_IID_ISkinForm DD 0972de6c1H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT
_IID_ISkinObjectDisp DD 06cfc9ba1H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT
_IID_ISkinSource DD 037deb787H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT
_DIID__ISkinFormEvents DD 0972de6c3H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT
_IID_ISkinFormEvents_Sink DD 053fa8d31H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT
_CLSID_SkinForm DD 0972de6c2H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT
_DIID__ISkinObjectDispEvents DD 06cfc9ba3H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT
_IID_ICOMScript DD 04f7ae600H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT
_IID_IComMorph DD 0322982e0H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT
_IID_IComMoveSize DD 083c2d7a0H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT
_IID_ISkinButton DD 053fa8d40H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT
_CLSID_SkinObject DD 06cfc9ba2H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT
_CLSID_COMScript DD 04f7ae601H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT
_CLSID_ComMorph DD 0322982e1H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT
_CLSID_ComMoveSize DD 083c2d7a1H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT
_DIID__ISkinButtonEvents DD 053fa8d42H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT
_CLSID_SkinButton DD 053fa8d41H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT
_IID_ISkinPanel DD 053fa8d46H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT
_DIID__ISkinPanelEvents DD 053fa8d48H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT
_IID_ISkinLabel DD 053fa8d49H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT
_CLSID_SkinPanel DD 053fa8d47H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT
_DIID__ISkinLabelEvents DD 053fa8d4bH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT
_IID_ISkinScrollBar DD 053fa8d4cH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT
_CLSID_SkinLabel DD 053fa8d4aH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT
_DIID__ISkinScrollBarEvents DD 053fa8d4eH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT
_CLSID_SkinScrollBar DD 053fa8d4dH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT
_DIID__ISkinSourceEvents DD 037deb788H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT
_IID_ISkinStorage DD 0ee11629bH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT
_IID_ISkinPopup DD 0ca478da0H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT
_IID_IComTransitions DD 03c01387aH
	DW	06ac2H
	DW	04ef1H
	DB	0bdH
	DB	0a2H
	DB	0ecH
	DB	05dH
	DB	026H
	DB	0e3H
	DB	0b0H
	DB	065H
CONST	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT
_IID_ISkinEvent DD 055dd814eH
	DW	0a1b7H
	DW	04808H
	DB	096H
	DB	025H
	DB	04fH
	DB	075H
	DB	0a3H
	DB	0faH
	DB	0d8H
	DB	0a7H
CONST	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT
_IID_IComProcTextures DD 0dce47f78H
	DW	08a6cH
	DW	04c6dH
	DB	0a6H
	DB	0f7H
	DB	08bH
	DB	0e4H
	DB	042H
	DB	071H
	DB	027H
	DB	0c4H
CONST	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT
_IID_IComFilters DD 0920ff31fH
	DW	0ca25H
	DW	0451aH
	DB	097H
	DB	038H
	DB	034H
	DB	044H
	DB	0fcH
	DB	020H
	DB	06bH
	DB	0ccH
CONST	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT
_CLSID_SkinSource DD 053fa8d44H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT
_CLSID_SkinStorage DD 0ee11629cH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT
_CLSID_SkinPopup DD 0ca478da1H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT
_CLSID_ComTransitions DD 03c6d21d6H
	DW	07470H
	DW	04555H
	DB	0a8H
	DB	0fbH
	DB	06cH
	DB	022H
	DB	092H
	DB	0b3H
	DB	09cH
	DB	046H
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT
_CLSID_SkinEvent DD 08f59c2a4H
	DW	04c01H
	DW	04451H
	DB	0beH
	DB	05bH
	DB	09H
	DB	078H
	DB	07bH
	DB	012H
	DB	03aH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT
_CLSID_ComProcTextures DD 0bf1b5d50H
	DW	03c5cH
	DW	048ceH
	DB	0b9H
	DB	091H
	DB	0eH
	DB	086H
	DB	0d2H
	DB	06fH
	DB	06fH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT
_CLSID_ComFilters DD 0c4d7e3c7H
	DW	03c26H
	DW	04052H
	DB	0a9H
	DB	093H
	DB	071H
	DB	0e5H
	DB	00H
	DB	0eaH
	DB	08cH
	DB	05H
CONST	ENDS
_DATA	SEGMENT
?LookAtScreenNames@@3PAY0DC@DA DB 'la_1.skn', 00H	; LookAtScreenNames
	ORG $+41
	DB	'la_2.skn', 00H
	ORG $+41
	DB	'la_3.skn', 00H
	ORG $+41
	DB	'la_4.skn', 00H
	ORG $+41
	DB	'la_5.skn', 00H
	ORG $+41
	DB	'la_6.skn', 00H
	ORG $+41
	DB	'la_7.skn', 00H
	ORG $+41
	DB	'la_8.skn', 00H
	ORG $+41
	DB	'la_9.skn', 00H
	ORG $+41
	ORG $+2
?Months@@3PAY03DA DB 'Jan', 00H				; Months
	DB	'Feb', 00H
	DB	'Mar', 00H
	DB	'Apr', 00H
	DB	'May', 00H
	DB	'Jun', 00H
	DB	'Jul', 00H
	DB	'Aug', 00H
	DB	'Sep', 00H
	DB	'Oct', 00H
	DB	'Nov', 00H
	DB	'Dec', 00H
?gNormalAffectTbl@@3PAY0DC@DA DB 00H			; gNormalAffectTbl
	ORG $+49
	DB	'Unarmed Attack + Fire', 00H
	ORG $+28
	DB	'Unarmed Attack + Cold', 00H
	ORG $+28
	DB	'Unarmed Attack + Lightning', 00H
	ORG $+23
	DB	'Unarmed Attack + Acid', 00H
	ORG $+28
	DB	'Unarmed Attack + Poison', 00H
	ORG $+26
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Unarmed Attack + Exp. Drain', 00H
	ORG $+22
	DB	'Unarmed Attack + Exp. Steal', 00H
	ORG $+22
	DB	'Unarmed Attack + Life Steal', 00H
	ORG $+22
	DB	'Unarmed Attack + Rust', 00H
	ORG $+28
	DB	'Can Hit Ethereal', 00H
	ORG $+33
	DB	'Unarmed Attack + Stun', 00H
	ORG $+28
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Improved Unarmed Attack Damage', 00H
	ORG $+19
	DB	'Can See Invisible', 00H
	ORG $+32
	DB	'Invisible', 00H
	ORG $+40
	DB	00H
	ORG $+49
	DB	'Defenseless', 00H
	ORG $+38
	DB	'Invisible', 00H
	ORG $+40
	DB	00H
	ORG $+49
	DB	'Fire Immolated', 00H
	ORG $+35
	DB	'Cold Immolated', 00H
	ORG $+35
	DB	'Acid Immolated', 00H
	ORG $+35
	DB	'Poison Immolated', 00H
	ORG $+33
	DB	'Lightning Immolated', 00H
	ORG $+30
	DB	'Frozen', 00H
	ORG $+43
	DB	'Held', 00H
	ORG $+45
	DB	'Confused', 00H
	ORG $+41
	DB	'Unable to Flee Combat', 00H
	ORG $+28
	DB	00H
	ORG $+49
	DB	'Berserked', 00H
	ORG $+40
	DB	'Stunned', 00H
	ORG $+42
	DB	00H
	ORG $+49
	DB	'Scared', 00H
	ORG $+43
	DB	'Quickened', 00H
	ORG $+40
	DB	'Slowed', 00H
	ORG $+43
	DB	'Empowered', 00H
	ORG $+40
	DB	'Enfeebled', 00H
	ORG $+40
	DB	'Shielded', 00H
	ORG $+41
	DB	'Shielded', 00H
	ORG $+41
	DB	'Invulnerable', 00H
	ORG $+37
	DB	'Regenerating', 00H
	ORG $+37
	DB	00H
	ORG $+49
	DB	'Cursed', 00H
	ORG $+43
	DB	'Rotting in Jail', 00H
	ORG $+34
	DB	'Resistant to Magic', 00H
	ORG $+31
	DB	'Immune to Magic', 00H
	ORG $+34
	DB	'Rust Immolated', 00H
	ORG $+35
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Resurrecting (25%)', 00H
	ORG $+31
	DB	'Resurrecting (50%)', 00H
	ORG $+31
	DB	'Resurrecting (100%)', 00H
	ORG $+30
	DB	'Extra Attack', 00H
	ORG $+37
	DB	'Extra Dodge', 00H
	ORG $+38
	DB	'Spell Memory Protected', 00H
	ORG $+27
	DB	'Heightened Dexterity', 00H
	ORG $+29
	DB	'Lowered Dexterity', 00H
	ORG $+32
	DB	'Heightened Intelligence', 00H
	ORG $+26
	DB	'Lowered Intelligence', 00H
	ORG $+29
	DB	'Heightened Endurance', 00H
	ORG $+29
	DB	'Lowered Endurance', 00H
	ORG $+32
	DB	'Retention', 00H
	ORG $+40
	DB	'Vulnerable', 00H
	ORG $+39
	DB	'Nourished', 00H
	ORG $+40
	DB	'Changed Gender', 00H
	ORG $+35
	DB	'Naked', 00H
	ORG $+44
	DB	'Ugly', 00H
	ORG $+45
	DB	'Disguised', 00H
	ORG $+40
	DB	'Encumbrance Bonus', 00H
	ORG $+32
	DB	'Encumbrance Penalty', 00H
	ORG $+30
	DB	00H
	ORG $+49
	DB	'Shifting', 00H
	ORG $+41
	DB	'Spell Extension', 00H
	ORG $+34
	DB	'Poisoned', 00H
	ORG $+41
	DB	'Acid Burned', 00H
	ORG $+38
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Protected from Death Magic', 00H
	ORG $+23
	DB	'Magical Will Increase', 00H
	ORG $+28
	DB	00H
	ORG $+49
?gResistanceAffectTbl@@3PAY0DC@DA DB 00H		; gResistanceAffectTbl
	ORG $+49
	DB	'Fire Resistant', 00H
	ORG $+35
	DB	'Cold Resistant', 00H
	ORG $+35
	DB	'Lightning Resistant', 00H
	ORG $+30
	DB	'Acid Resistant', 00H
	ORG $+35
	DB	'Poison Resistant', 00H
	ORG $+33
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Experience Drain Resistant', 00H
	ORG $+23
	DB	'Experience Steal Resistant', 00H
	ORG $+23
	DB	'Life Steal Resistant', 00H
	ORG $+29
	DB	'Rust Resistant', 00H
	ORG $+35
	DB	'Etherial Attack Resistant', 00H
	ORG $+24
	DB	'Stun Resistant', 00H
	ORG $+35
	DB	'Missile Resistant', 00H
	ORG $+32
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Protected from Holding', 00H
	ORG $+27
	DB	'Protected from Confusion', 00H
	ORG $+25
	DB	'Protected from Shackle', 00H
	ORG $+27
	DB	'Protected from Identification', 00H
	ORG $+20
	DB	'Protected from Berserking', 00H
	ORG $+24
	DB	'Protected from Stunning', 00H
	ORG $+26
	DB	00H
	ORG $+49
	DB	'Protected from Fear', 00H
	ORG $+30
	DB	00H
	ORG $+49
	DB	'Protected from Slow', 00H
	ORG $+30
	DB	00H
	ORG $+49
	DB	'Protected from Enfeeble', 00H
	ORG $+26
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Protected from Cursing', 00H
	ORG $+27
	DB	'Protected from Jailing', 00H
	ORG $+27
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Protected from Clumsiness', 00H
	ORG $+24
	DB	00H
	ORG $+49
	DB	'Protected from Stupidity', 00H
	ORG $+25
	DB	00H
	ORG $+49
	DB	'Protected from Sickness', 00H
	ORG $+26
	DB	00H
	ORG $+49
	DB	'Protected from Vulnerability', 00H
	ORG $+21
	DB	00H
	ORG $+49
	DB	'Protected from Gender-Switching', 00H
	ORG $+18
	DB	'Protected from Nakedness', 00H
	ORG $+25
	DB	'Protected from Ugliness', 00H
	ORG $+26
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
?gWeaknessAffectTbl@@3PAY0DC@DA DB 00H			; gWeaknessAffectTbl
	ORG $+49
	DB	'Fire Cursed', 00H
	ORG $+38
	DB	'Cold Cursed', 00H
	ORG $+38
	DB	'Lightning Cursed', 00H
	ORG $+33
	DB	'Acid Cursed', 00H
	ORG $+38
	DB	'Poison Cursed', 00H
	ORG $+36
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Experience Drain Cursed', 00H
	ORG $+26
	DB	'Experience Steal Cursed', 00H
	ORG $+26
	DB	'Life Steal Curse', 00H
	ORG $+33
	DB	'Rust Curse', 00H
	ORG $+39
	DB	00H
	ORG $+49
	DB	'Stun Curse', 00H
	ORG $+39
	DB	'Missile Curse', 00H
	ORG $+36
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Holding Curse', 00H
	ORG $+36
	DB	'Confusion Curse', 00H
	ORG $+34
	DB	'Shackle Curse', 00H
	ORG $+36
	DB	'Identification Curse', 00H
	ORG $+29
	DB	'Berserking Curse', 00H
	ORG $+33
	DB	'Stunning Curse', 00H
	ORG $+35
	DB	00H
	ORG $+49
	DB	'Fear Curse', 00H
	ORG $+39
	DB	00H
	ORG $+49
	DB	'Slow Curse', 00H
	ORG $+39
	DB	00H
	ORG $+49
	DB	'Enfeeble Curse', 00H
	ORG $+35
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Cursed Curse', 00H
	ORG $+37
	DB	'Jail Curse', 00H
	ORG $+39
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	'Clumsiness Curse', 00H
	ORG $+33
	DB	00H
	ORG $+49
	DB	'Stupidness Curse', 00H
	ORG $+33
	DB	00H
	ORG $+49
	DB	'Lethargy Curse', 00H
	ORG $+35
	DB	00H
	ORG $+49
	DB	'Vulnerability Curse', 00H
	ORG $+30
	DB	00H
	ORG $+49
	DB	'Gender-Switching Curse', 00H
	ORG $+27
	DB	'Nakedness Curse', 00H
	ORG $+34
	DB	'Curse of Ugliness', 00H
	ORG $+32
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
	DB	00H
	ORG $+49
_DATA	ENDS
CONST	SEGMENT
?messageMap@CBioLine@@1UAFX_MSGMAP@@B DD FLAT:?_GetBaseMessageMap@CBioLine@@KGPBUAFX_MSGMAP@@XZ ; CBioLine::messageMap
	DD	FLAT:?_messageEntries@CBioLine@@0QBUAFX_MSGMAP_ENTRY@@B
?_messageEntries@CBioLine@@0QBUAFX_MSGMAP_ENTRY@@B DD 0102H ; CBioLine::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	FLAT:?OnChar@CBioLine@@QAEXIII@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
CRT$XCU	SEGMENT
_$S346	DD	FLAT:_$E345
CRT$XCU	ENDS
_DATA	SEGMENT
_?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA DD 029aH
_DATA	ENDS
CRT$XCU	SEGMENT
_$S352	DD	FLAT:_$E351
CRT$XCU	ENDS
CONST	SEGMENT
?messageMap@CLookAtItem@@1UAFX_MSGMAP@@B DD FLAT:?_GetBaseMessageMap@CLookAtItem@@KGPBUAFX_MSGMAP@@XZ ; CLookAtItem::messageMap
	DD	FLAT:?_messageEntries@CLookAtItem@@0QBUAFX_MSGMAP_ENTRY@@B
?_messageEntries@CLookAtItem@@0QBUAFX_MSGMAP_ENTRY@@B DD 04eH ; CLookAtItem::_messageEntries
	DD	0701H
	DD	02bcH
	DD	02bcH
	DD	026H
	DD	FLAT:?OnResize@CLookAtItem@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
EXTRN	?messageMap@CSkinEdit@@1UAFX_MSGMAP@@B:QWORD	; CSkinEdit::messageMap
_TEXT	SEGMENT
?_GetBaseMessageMap@CBioLine@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CBioLine::_GetBaseMessageMap

; 333  : BEGIN_MESSAGE_MAP ( CBioLine, CSkinEdit )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CSkinEdit@@1UAFX_MSGMAP@@B ; CSkinEdit::messageMap
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_GetBaseMessageMap@CBioLine@@KGPBUAFX_MSGMAP@@XZ ENDP	; CBioLine::_GetBaseMessageMap
_TEXT	ENDS
PUBLIC	?GetMessageMap@CBioLine@@MBEPBUAFX_MSGMAP@@XZ	; CBioLine::GetMessageMap
_TEXT	SEGMENT
_this$ = -4
?GetMessageMap@CBioLine@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR	; CBioLine::GetMessageMap

; 333  : BEGIN_MESSAGE_MAP ( CBioLine, CSkinEdit )

  0000a	55		 push	 ebp
  0000b	8b ec		 mov	 ebp, esp
  0000d	51		 push	 ecx
  0000e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CBioLine@@1UAFX_MSGMAP@@B ; CBioLine::messageMap
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetMessageMap@CBioLine@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CBioLine::GetMessageMap
_TEXT	ENDS
PUBLIC	??_7CBioLine@@6BCRichEditCtrl@@@		; CBioLine::`vftable'
PUBLIC	??_7CBioLine@@6BCScrollable@@@			; CBioLine::`vftable'
PUBLIC	??_7CBioLine@@6BCSkinCtrl@@@			; CBioLine::`vftable'
PUBLIC	??_7CBioLine@@6BCMouseWheelable@@@		; CBioLine::`vftable'
PUBLIC	??_GCBioLine@@UAEPAXI@Z				; CBioLine::`scalar deleting destructor'
PUBLIC	??_ECBioLine@@UAEPAXI@Z				; CBioLine::`vector deleting destructor'
PUBLIC	??_ECBioLine@@WGA@AEPAXI@Z			; CBioLine::`vector deleting destructor'
PUBLIC	??_ECBioLine@@WHE@AEPAXI@Z			; CBioLine::`vector deleting destructor'
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??0CSkinObj@@QAE@ABV0@@Z			; CSkinObj::CSkinObj
PUBLIC	??0CBioLine@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ; CBioLine::CBioLine
EXTRN	?OnMouseOut@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseOut
EXTRN	?OnMouseDown@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseDown
EXTRN	?OnMouseUp@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseUp
EXTRN	?OnActivate@CSkinCtrl@@UAEXFF@Z:NEAR		; CSkinCtrl::OnActivate
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::WinHelpA
EXTRN	?ContinueModal@CWnd@@UAEHXZ:NEAR		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:NEAR		; CWnd::EndModalLoop
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:NEAR			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:NEAR		; CWnd::OnNotify
EXTRN	?SetLocation@CScrollable@@UAEXM@Z:NEAR		; CScrollable::SetLocation
EXTRN	?ChangeLocation@CScrollable@@UAEXH@Z:NEAR	; CScrollable::ChangeLocation
EXTRN	?ChangePage@CScrollable@@UAEXH@Z:NEAR		; CScrollable::ChangePage
EXTRN	?UpdateScrollBar@CScrollable@@UAEXXZ:NEAR	; CScrollable::UpdateScrollBar
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CCmdTarget::OnCmdMsg
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CCmdTarget::GetInterfaceMap
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; CWnd::GetSuperWndProcAddr
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:NEAR ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:NEAR ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:NEAR		; CWnd::PostNcDestroy
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnChildNotify
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:NEAR		; CWnd::CheckAutoCenter
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:NEAR			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:NEAR		; CWnd::OnFinalRelease
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:NEAR ; CWnd::SetOccDialogInfo
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:NEAR		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:NEAR ; CWnd::Create
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:NEAR		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:NEAR ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:NEAR	; CWnd::CalcWindowRect
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??0CSkinEdit@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z:NEAR ; CSkinEdit::CSkinEdit
EXTRN	??1CSkinObj@@UAE@XZ:NEAR			; CSkinObj::~CSkinObj
EXTRN	?UpdateMe@CSkinEdit@@UAEXXZ:NEAR		; CSkinEdit::UpdateMe
EXTRN	?SetRange@CSkinEdit@@UAEXHH@Z:NEAR		; CSkinEdit::SetRange
EXTRN	?OnReturn@CSkinEdit@@UAEXXZ:NEAR		; CSkinEdit::OnReturn
EXTRN	?OnEscape@CSkinEdit@@UAEXXZ:NEAR		; CSkinEdit::OnEscape
EXTRN	?OnMouseWheel@CSkinEdit@@UAEXIF@Z:NEAR		; CSkinEdit::OnMouseWheel
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:NEAR ; CWnd::OnToolHitTest
EXTRN	?GetRuntimeClass@CRichEditCtrl@@UBEPAUCRuntimeClass@@XZ:NEAR ; CRichEditCtrl::GetRuntimeClass
EXTRN	?UpdateTracking@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::UpdateTracking
EXTRN	?Refresh@CSkinCtrl@@UAEXXZ:NEAR			; CSkinCtrl::Refresh
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:NEAR ; CWnd::GetScrollBarCtrl
EXTRN	?Disable@CSkinCtrl@@UAEHXZ:NEAR			; CSkinCtrl::Disable
EXTRN	?IsDisabled@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::IsDisabled
EXTRN	?Enable@CSkinCtrl@@UAEHXZ:NEAR			; CSkinCtrl::Enable
EXTRN	?Activate@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Activate
EXTRN	?Deactivate@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Deactivate
EXTRN	?Highlight@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Highlight
EXTRN	?Unhighlight@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Unhighlight
EXTRN	?ShowNormal@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowNormal
EXTRN	?ShowDisabled@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowDisabled
EXTRN	?ShowPressed@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowPressed
EXTRN	?ShowHighlighted@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowHighlighted
EXTRN	?OnMouseMove@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseMove
EXTRN	?OnMouseIn@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseIn
;	COMDAT ??_7CBioLine@@6BCRichEditCtrl@@@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\LookAt.cpp
CONST	SEGMENT
??_7CBioLine@@6BCRichEditCtrl@@@ DD FLAT:?GetRuntimeClass@CRichEditCtrl@@UBEPAUCRuntimeClass@@XZ ; CBioLine::`vftable'
	DD	FLAT:??_ECBioLine@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CBioLine@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?OnReturn@CSkinEdit@@UAEXXZ
	DD	FLAT:?OnEscape@CSkinEdit@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CBioLine@@6BCScrollable@@@
CONST	SEGMENT
??_7CBioLine@@6BCScrollable@@@ DD FLAT:?UpdateMe@CSkinEdit@@UAEXXZ ; CBioLine::`vftable'
	DD	FLAT:?SetLocation@CScrollable@@UAEXM@Z
	DD	FLAT:?ChangeLocation@CScrollable@@UAEXH@Z
	DD	FLAT:?ChangePage@CScrollable@@UAEXH@Z
	DD	FLAT:?SetRange@CSkinEdit@@UAEXHH@Z
	DD	FLAT:?UpdateScrollBar@CScrollable@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CBioLine@@6BCSkinCtrl@@@
CONST	SEGMENT
??_7CBioLine@@6BCSkinCtrl@@@ DD FLAT:??_ECBioLine@@WGA@AEPAXI@Z ; CBioLine::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinCtrl@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CSkinCtrl@@UAEXFF@Z
CONST	ENDS
;	COMDAT ??_7CBioLine@@6BCMouseWheelable@@@
CONST	SEGMENT
??_7CBioLine@@6BCMouseWheelable@@@ DD FLAT:??_ECBioLine@@WHE@AEPAXI@Z ; CBioLine::`vftable'
	DD	FLAT:?OnMouseWheel@CSkinEdit@@UAEXIF@Z
CONST	ENDS
xdata$x	SEGMENT
$T160513 DD	019930520H
	DD	01H
	DD	FLAT:$T160516
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160516 DD	0ffffffffH
	DD	FLAT:$L160507
xdata$x	ENDS
_TEXT	SEGMENT
_linkObj$ = 8
_pParent$ = 16
_nID$ = 20
_dwStyle$ = 24
_bEmotes$ = 28
_bHiliteOnFocus$ = 32
_bCloseFocusLost$ = 36
_this$ = -20
$T160506 = -16
__$EHRec$ = -12
??0CBioLine@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z PROC NEAR ; CBioLine::CBioLine

; 338  : 	CSkinEdit( linkObj, pParent, nID, dwStyle, bEmotes, bHiliteOnFocus, bCloseFocusLost ) {}

  0001a	55		 push	 ebp
  0001b	8b ec		 mov	 ebp, esp
  0001d	6a ff		 push	 -1
  0001f	68 00 00 00 00	 push	 $L160514
  00024	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0002a	50		 push	 eax
  0002b	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00032	83 ec 10	 sub	 esp, 16			; 00000010H
  00035	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	8a 45 24	 mov	 al, BYTE PTR _bCloseFocusLost$[ebp]
  00042	50		 push	 eax
  00043	8a 4d 20	 mov	 cl, BYTE PTR _bHiliteOnFocus$[ebp]
  00046	51		 push	 ecx
  00047	8a 55 1c	 mov	 dl, BYTE PTR _bEmotes$[ebp]
  0004a	52		 push	 edx
  0004b	8b 45 18	 mov	 eax, DWORD PTR _dwStyle$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d 14	 mov	 ecx, DWORD PTR _nID$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 10	 mov	 edx, DWORD PTR _pParent$[ebp]
  00056	52		 push	 edx
  00057	83 ec 08	 sub	 esp, 8
  0005a	8b cc		 mov	 ecx, esp
  0005c	89 65 f0	 mov	 DWORD PTR $T160506[ebp], esp
  0005f	8d 45 08	 lea	 eax, DWORD PTR _linkObj$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00068	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  0006b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0CSkinEdit@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ; CSkinEdit::CSkinEdit
  00073	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00076	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CBioLine@@6BCRichEditCtrl@@@ ; CBioLine::`vftable'
  0007f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00082	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], OFFSET FLAT:??_7CBioLine@@6BCScrollable@@@ ; CBioLine::`vftable'
  00089	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], OFFSET FLAT:??_7CBioLine@@6BCSkinCtrl@@@ ; CBioLine::`vftable'
  00093	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], OFFSET FLAT:??_7CBioLine@@6BCMouseWheelable@@@ ; CBioLine::`vftable'
  0009d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a4	8d 4d 08	 lea	 ecx, DWORD PTR _linkObj$[ebp]
  000a7	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  000ac	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
text$x	SEGMENT
$L160507:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _linkObj$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00008	c3		 ret	 0
$L160514:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160513
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CBioLine@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ENDP	; CBioLine::CBioLine
PUBLIC	??1CBioLine@@UAE@XZ				; CBioLine::~CBioLine
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
;	COMDAT ??_GCBioLine@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCBioLine@@UAEPAXI@Z PROC NEAR			; CBioLine::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBioLine@@UAE@XZ	; CBioLine::~CBioLine
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L153093
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L153093:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCBioLine@@UAEPAXI@Z ENDP				; CBioLine::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CSkinEdit@@UAE@XZ				; CSkinEdit::~CSkinEdit
;	COMDAT ??1CBioLine@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CBioLine@@UAE@XZ PROC NEAR				; CBioLine::~CBioLine, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinEdit@@UAE@XZ	; CSkinEdit::~CSkinEdit
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CBioLine@@UAE@XZ ENDP				; CBioLine::~CBioLine
_TEXT	ENDS
EXTRN	??1CRichEditCtrl@@UAE@XZ:NEAR			; CRichEditCtrl::~CRichEditCtrl
EXTRN	??1CMouseWheelable@@UAE@XZ:NEAR			; CMouseWheelable::~CMouseWheelable
EXTRN	??1CSkinCtrl@@UAE@XZ:NEAR			; CSkinCtrl::~CSkinCtrl
;	COMDAT xdata$x
xdata$x	SEGMENT
$T160534 DD	019930520H
	DD	02H
	DD	FLAT:$T160536
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160536 DD	0ffffffffH
	DD	FLAT:$L160526
	DD	00H
	DD	FLAT:$L160529
xdata$x	ENDS
;	COMDAT ??1CSkinEdit@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1CSkinEdit@@UAE@XZ PROC NEAR				; CSkinEdit::~CSkinEdit, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L160535
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00025	83 7d f0 00	 cmp	 DWORD PTR _this$[ebp], 0
  00029	74 0b		 je	 SHORT $L160524
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 74	 add	 eax, 116		; 00000074H
  00031	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00034	eb 07		 jmp	 SHORT $L160525
$L160524:
  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L160525:
  0003d	8b 4d ec	 mov	 ecx, DWORD PTR -20+[ebp]
  00040	e8 00 00 00 00	 call	 ??1CMouseWheelable@@UAE@XZ ; CMouseWheelable::~CMouseWheelable
  00045	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00049	83 7d f0 00	 cmp	 DWORD PTR _this$[ebp], 0
  0004d	74 0b		 je	 SHORT $L160522
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 60	 add	 ecx, 96			; 00000060H
  00055	89 4d e8	 mov	 DWORD PTR -24+[ebp], ecx
  00058	eb 07		 jmp	 SHORT $L160523
$L160522:
  0005a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR -24+[ebp], 0
$L160523:
  00061	8b 4d e8	 mov	 ecx, DWORD PTR -24+[ebp]
  00064	e8 00 00 00 00	 call	 ??1CSkinCtrl@@UAE@XZ	; CSkinCtrl::~CSkinCtrl
  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ??1CRichEditCtrl@@UAE@XZ ; CRichEditCtrl::~CRichEditCtrl
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160526:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CRichEditCtrl@@UAE@XZ ; CRichEditCtrl::~CRichEditCtrl
  00008	c3		 ret	 0
$L160529:
  00009	83 7d f0 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	0f 84 0e 00 00
	00		 je	 $L160527
  00013	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00016	83 c0 60	 add	 eax, 96			; 00000060H
  00019	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  0001c	e9 07 00 00 00	 jmp	 $L160528
$L160527:
  00021	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR -24+[ebp], 0
$L160528:
  00028	8b 4d e8	 mov	 ecx, DWORD PTR -24+[ebp]
  0002b	e8 00 00 00 00	 call	 ??1CSkinCtrl@@UAE@XZ	; CSkinCtrl::~CSkinCtrl
  00030	c3		 ret	 0
$L160535:
  00031	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160534
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CSkinEdit@@UAE@XZ ENDP				; CSkinEdit::~CSkinEdit
PUBLIC	?GetTextLength@CRichEditCtrl@@QBEJXZ		; CRichEditCtrl::GetTextLength
PUBLIC	?OnChar@CWnd@@IAEXIII@Z				; CWnd::OnChar
PUBLIC	??BCString@@QBEPBDXZ				; CString::operator char const *
PUBLIC	?GetLineCount@CRichEditCtrl@@QBEHXZ		; CRichEditCtrl::GetLineCount
PUBLIC	?GetLimitText@CRichEditCtrl@@QBEJXZ		; CRichEditCtrl::GetLimitText
EXTRN	??0CString@@QAE@XZ:NEAR				; CString::CString
EXTRN	??YCString@@QAEABV0@D@Z:NEAR			; CString::operator+=
EXTRN	??1CString@@QAE@XZ:NEAR				; CString::~CString
EXTRN	__imp__isalnum:NEAR
EXTRN	__imp__isprint:NEAR
EXTRN	?AddText@CSkinEdit@@QAEHPBD@Z:NEAR		; CSkinEdit::AddText
EXTRN	__imp__MessageBeep@4:NEAR
EXTRN	?SkinMessage@@YA_NPAD0H@Z:NEAR			; SkinMessage
_DATA	SEGMENT
$SG153132 DB	'If you wish to format the text in your biography.  You m'
	DB	'ust use spaces to advance to the end of the line and start ty'
	DB	'ping on the next line.', 00H
$SG153133 DB	'Info', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T160542 DD	019930520H
	DD	01H
	DD	FLAT:$T160546
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160546 DD	0ffffffffH
	DD	FLAT:$L160540
xdata$x	ENDS
_TEXT	SEGMENT
_nChar$ = 8
_nRepCnt$ = 12
_nFlags$ = 16
_this$ = -32
_nLimit$153107 = -28
_nLength$153108 = -16
_string$153109 = -20
_i$153110 = -24
__$EHRec$ = -12
?OnChar@CBioLine@@QAEXIII@Z PROC NEAR			; CBioLine::OnChar

; 340  : void CBioLine::OnChar( UINT nChar, UINT nRepCnt, UINT nFlags ) {

  000bf	55		 push	 ebp
  000c0	8b ec		 mov	 ebp, esp
  000c2	6a ff		 push	 -1
  000c4	68 00 00 00 00	 push	 $L160543
  000c9	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  000cf	50		 push	 eax
  000d0	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  000d7	83 ec 18	 sub	 esp, 24			; 00000018H
  000da	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 341  : 	if ( m_dwStyle & READONLY ) {

  000dd	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000e3	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  000e9	85 c9		 test	 ecx, ecx
  000eb	74 0d		 je	 SHORT $L153104

; 342  : 		MessageBeep ( 0 );

  000ed	6a 00		 push	 0
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4

; 343  : 		return;

  000f5	e9 b0 01 00 00	 jmp	 $L153103
$L153104:

; 345  : 
; 346  : 	if ( isprint ( nChar ) ) {

  000fa	8b 55 08	 mov	 edx, DWORD PTR _nChar$[ebp]
  000fd	52		 push	 edx
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isprint
  00104	83 c4 04	 add	 esp, 4
  00107	85 c0		 test	 eax, eax
  00109	0f 84 11 01 00
	00		 je	 $L153105

; 347  : 		if ( nChar == '|' ) {

  0010f	83 7d 08 7c	 cmp	 DWORD PTR _nChar$[ebp], 124 ; 0000007cH
  00113	75 0d		 jne	 SHORT $L153106

; 348  : 			MessageBeep( 0 );

  00115	6a 00		 push	 0
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4

; 349  : 			return;

  0011d	e9 88 01 00 00	 jmp	 $L153103
$L153106:

; 351  : 
; 352  : 		int nLimit = GetLimitText();

  00122	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	e8 00 00 00 00	 call	 ?GetLimitText@CRichEditCtrl@@QBEJXZ ; CRichEditCtrl::GetLimitText
  0012a	89 45 e4	 mov	 DWORD PTR _nLimit$153107[ebp], eax

; 353  : 		int nLength = GetTextLength();

  0012d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00130	e8 00 00 00 00	 call	 ?GetTextLength@CRichEditCtrl@@QBEJXZ ; CRichEditCtrl::GetTextLength
  00135	89 45 f0	 mov	 DWORD PTR _nLength$153108[ebp], eax

; 354  : 
; 355  : 		CString string;

  00138	8d 4d ec	 lea	 ecx, DWORD PTR _string$153109[ebp]
  0013b	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  00140	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 356  : 
; 357  : 		for (int i = 0;i < nRepCnt;i++) {

  00147	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$153110[ebp], 0
  0014e	eb 09		 jmp	 SHORT $L153111
$L153112:
  00150	8b 45 e8	 mov	 eax, DWORD PTR _i$153110[ebp]
  00153	83 c0 01	 add	 eax, 1
  00156	89 45 e8	 mov	 DWORD PTR _i$153110[ebp], eax
$L153111:
  00159	8b 4d e8	 mov	 ecx, DWORD PTR _i$153110[ebp]
  0015c	3b 4d 0c	 cmp	 ecx, DWORD PTR _nRepCnt$[ebp]
  0015f	0f 83 96 00 00
	00		 jae	 $L153113

; 358  : 			if ( nLength >= nLimit ) 

  00165	8b 55 f0	 mov	 edx, DWORD PTR _nLength$153108[ebp]
  00168	3b 55 e4	 cmp	 edx, DWORD PTR _nLimit$153107[ebp]
  0016b	7c 05		 jl	 SHORT $L153114

; 359  : 				break;

  0016d	e9 89 00 00 00	 jmp	 $L153113
$L153114:

; 360  : 
; 361  : 			if ( m_bIsAlnum ) {

  00172	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00175	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0017c	74 3a		 je	 SHORT $L153115

; 362  : 				if ( isalnum ( nChar ) || ( m_bIsSpace && nChar == ' ' ) ) {

  0017e	8b 4d 08	 mov	 ecx, DWORD PTR _nChar$[ebp]
  00181	51		 push	 ecx
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isalnum
  00188	83 c4 04	 add	 esp, 4
  0018b	85 c0		 test	 eax, eax
  0018d	75 12		 jne	 SHORT $L153117
  0018f	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00192	83 ba 90 00 00
	00 00		 cmp	 DWORD PTR [edx+144], 0
  00199	74 1b		 je	 SHORT $L153116
  0019b	83 7d 08 20	 cmp	 DWORD PTR _nChar$[ebp], 32 ; 00000020H
  0019f	75 15		 jne	 SHORT $L153116
$L153117:

; 363  : 					string += (char)nChar;

  001a1	8a 45 08	 mov	 al, BYTE PTR _nChar$[ebp]
  001a4	50		 push	 eax
  001a5	8d 4d ec	 lea	 ecx, DWORD PTR _string$153109[ebp]
  001a8	e8 00 00 00 00	 call	 ??YCString@@QAEABV0@D@Z	; CString::operator+=

; 364  : 					nLength++;

  001ad	8b 4d f0	 mov	 ecx, DWORD PTR _nLength$153108[ebp]
  001b0	83 c1 01	 add	 ecx, 1
  001b3	89 4d f0	 mov	 DWORD PTR _nLength$153108[ebp], ecx
$L153116:

; 366  : 			} else {

  001b6	eb 3e		 jmp	 SHORT $L153123
$L153115:

; 367  : 				if (  nChar == ' ' ) {

  001b8	83 7d 08 20	 cmp	 DWORD PTR _nChar$[ebp], 32 ; 00000020H
  001bc	75 23		 jne	 SHORT $L153120

; 368  : 					if ( m_bIsSpace ) {

  001be	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  001c1	83 ba 90 00 00
	00 00		 cmp	 DWORD PTR [edx+144], 0
  001c8	74 15		 je	 SHORT $L153121

; 369  : 						string += (char)nChar;

  001ca	8a 45 08	 mov	 al, BYTE PTR _nChar$[ebp]
  001cd	50		 push	 eax
  001ce	8d 4d ec	 lea	 ecx, DWORD PTR _string$153109[ebp]
  001d1	e8 00 00 00 00	 call	 ??YCString@@QAEABV0@D@Z	; CString::operator+=

; 370  : 						nLength++;

  001d6	8b 4d f0	 mov	 ecx, DWORD PTR _nLength$153108[ebp]
  001d9	83 c1 01	 add	 ecx, 1
  001dc	89 4d f0	 mov	 DWORD PTR _nLength$153108[ebp], ecx
$L153121:

; 372  : 				} else {

  001df	eb 15		 jmp	 SHORT $L153123
$L153120:

; 373  : 					string += (char)nChar;

  001e1	8a 55 08	 mov	 dl, BYTE PTR _nChar$[ebp]
  001e4	52		 push	 edx
  001e5	8d 4d ec	 lea	 ecx, DWORD PTR _string$153109[ebp]
  001e8	e8 00 00 00 00	 call	 ??YCString@@QAEABV0@D@Z	; CString::operator+=

; 374  : 					nLength++;

  001ed	8b 45 f0	 mov	 eax, DWORD PTR _nLength$153108[ebp]
  001f0	83 c0 01	 add	 eax, 1
  001f3	89 45 f0	 mov	 DWORD PTR _nLength$153108[ebp], eax
$L153123:

; 377  : 		}

  001f6	e9 55 ff ff ff	 jmp	 $L153112
$L153113:

; 378  : 
; 379  : 		AddText ( string );

  001fb	8d 4d ec	 lea	 ecx, DWORD PTR _string$153109[ebp]
  001fe	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  00203	50		 push	 eax
  00204	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00207	e8 00 00 00 00	 call	 ?AddText@CSkinEdit@@QAEHPBD@Z ; CSkinEdit::AddText

; 380  : 	} else {

  0020c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00213	8d 4d ec	 lea	 ecx, DWORD PTR _string$153109[ebp]
  00216	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0021b	e9 8a 00 00 00	 jmp	 $L153125
$L153105:

; 381  : 		switch ( nChar ) {

  00220	8b 4d 08	 mov	 ecx, DWORD PTR _nChar$[ebp]
  00223	89 4d dc	 mov	 DWORD PTR -36+[ebp], ecx
  00226	8b 55 dc	 mov	 edx, DWORD PTR -36+[ebp]
  00229	83 ea 01	 sub	 edx, 1
  0022c	89 55 dc	 mov	 DWORD PTR -36+[ebp], edx
  0022f	83 7d dc 1a	 cmp	 DWORD PTR -36+[ebp], 26	; 0000001aH
  00233	77 4e		 ja	 SHORT $L153135
  00235	8b 4d dc	 mov	 ecx, DWORD PTR -36+[ebp]
  00238	33 c0		 xor	 eax, eax
  0023a	8a 81 00 00 00
	00		 mov	 al, BYTE PTR $L160544[ecx]
  00240	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L160545[eax*4]
$L153130:

; 382  : 			case 0x1b:			//	Escape
; 383  : 				OnEscape();

  00247	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0024a	8b 02		 mov	 eax, DWORD PTR [edx]
  0024c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0024f	ff 90 c4 00 00
	00		 call	 DWORD PTR [eax+196]

; 384  : 				break;

  00255	eb 36		 jmp	 SHORT $L153127
$L153131:

; 385  : 			case 0x0d:			//	Return
; 386  : 				SkinMessage( "Info", "If you wish to format the text in your biography.  You must use spaces to advance to the end of the line and start typing on the next line." );

  00257	6a 00		 push	 0
  00259	68 00 00 00 00	 push	 OFFSET FLAT:$SG153132
  0025e	68 00 00 00 00	 push	 OFFSET FLAT:$SG153133
  00263	e8 00 00 00 00	 call	 ?SkinMessage@@YA_NPAD0H@Z ; SkinMessage
  00268	83 c4 0c	 add	 esp, 12			; 0000000cH

; 387  : 				break;

  0026b	eb 20		 jmp	 SHORT $L153127
$L153134:

; 388  : 			case 0x01:
; 389  : 			case 0x03:
; 390  : 			case 0x08:
; 391  : 			case 0x16:
; 392  : 			case 0x18:
; 393  : 				CRichEditCtrl::OnChar ( nChar, nRepCnt, nFlags );

  0026d	8b 4d 10	 mov	 ecx, DWORD PTR _nFlags$[ebp]
  00270	51		 push	 ecx
  00271	8b 55 0c	 mov	 edx, DWORD PTR _nRepCnt$[ebp]
  00274	52		 push	 edx
  00275	8b 45 08	 mov	 eax, DWORD PTR _nChar$[ebp]
  00278	50		 push	 eax
  00279	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0027c	e8 00 00 00 00	 call	 ?OnChar@CWnd@@IAEXIII@Z	; CWnd::OnChar

; 394  : 
; 395  : 				break;

  00281	eb 0a		 jmp	 SHORT $L153127
$L153135:

; 396  : 			default:
; 397  : 				MessageBeep( 0 );

  00283	6a 00		 push	 0
  00285	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4

; 398  : 				return;

  0028b	eb 1d		 jmp	 SHORT $L153103
$L153127:

; 400  : 
; 401  : 		SetRange( 0, GetLineCount() - 1 );

  0028d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00290	e8 00 00 00 00	 call	 ?GetLineCount@CRichEditCtrl@@QBEHXZ ; CRichEditCtrl::GetLineCount
  00295	83 e8 01	 sub	 eax, 1
  00298	50		 push	 eax
  00299	6a 00		 push	 0
  0029b	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0029e	83 c1 40	 add	 ecx, 64			; 00000040H
  002a1	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  002a4	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  002a7	ff 50 10	 call	 DWORD PTR [eax+16]
$L153125:
$L153103:

; 403  : }

  002aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002b4	8b e5		 mov	 esp, ebp
  002b6	5d		 pop	 ebp
  002b7	c2 0c 00	 ret	 12			; 0000000cH
$L160545:
  002ba	00 00 00 00	 DD	 $L153134
  002be	00 00 00 00	 DD	 $L153131
  002c2	00 00 00 00	 DD	 $L153130
  002c6	00 00 00 00	 DD	 $L153135
$L160544:
  002ca	00		 DB	 0
  002cb	03		 DB	 3
  002cc	00		 DB	 0
  002cd	03		 DB	 3
  002ce	03		 DB	 3
  002cf	03		 DB	 3
  002d0	03		 DB	 3
  002d1	00		 DB	 0
  002d2	03		 DB	 3
  002d3	03		 DB	 3
  002d4	03		 DB	 3
  002d5	03		 DB	 3
  002d6	01		 DB	 1
  002d7	03		 DB	 3
  002d8	03		 DB	 3
  002d9	03		 DB	 3
  002da	03		 DB	 3
  002db	03		 DB	 3
  002dc	03		 DB	 3
  002dd	03		 DB	 3
  002de	03		 DB	 3
  002df	00		 DB	 0
  002e0	03		 DB	 3
  002e1	00		 DB	 0
  002e2	03		 DB	 3
  002e3	03		 DB	 3
  002e4	02		 DB	 2
_TEXT	ENDS
text$x	SEGMENT
$L160540:
  00013	8d 4d ec	 lea	 ecx, DWORD PTR _string$153109[ebp]
  00016	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0001b	c3		 ret	 0
$L160543:
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160542
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnChar@CBioLine@@QAEXIII@Z ENDP			; CBioLine::OnChar
PUBLIC	?MakeString@@YA?AVCString@@H@Z			; MakeString
EXTRN	??0CString@@QAE@ABV0@@Z:NEAR			; CString::CString
EXTRN	?Format@CString@@QAAXPBDZZ:NEAR			; CString::Format
_DATA	SEGMENT
	ORG $+3
$SG153142 DB	'Terrible (%d)', 00H
	ORG $+2
$SG153145 DB	'Poor (%d)', 00H
	ORG $+2
$SG153148 DB	'Average (%d)', 00H
	ORG $+3
$SG153151 DB	'Good (%d)', 00H
	ORG $+2
$SG153154 DB	'Excellent (%d)', 00H
	ORG $+1
$SG153157 DB	'Fantastic (%d)', 00H
	ORG $+1
$SG153159 DB	'Godlike (%d)', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T160553 DD	019930520H
	DD	02H
	DD	FLAT:$T160555
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160555 DD	0ffffffffH
	DD	FLAT:$L160549
	DD	00H
	DD	FLAT:$L160548
xdata$x	ENDS
_TEXT	SEGMENT
_nValue$ = 12
___$ReturnUdt$ = 8
_str$ = -16
$T160550 = -20
__$EHRec$ = -12
?MakeString@@YA?AVCString@@H@Z PROC NEAR		; MakeString

; 405  : CString MakeString( int nValue ) {

  002e5	55		 push	 ebp
  002e6	8b ec		 mov	 ebp, esp
  002e8	6a ff		 push	 -1
  002ea	68 00 00 00 00	 push	 $L160554
  002ef	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  002f5	50		 push	 eax
  002f6	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  002fd	83 ec 08	 sub	 esp, 8
  00300	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T160550[ebp], 0

; 406  : 	CString str;

  00307	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  0030a	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  0030f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 407  : 
; 408  : 	if ( nValue <= 5 ) {

  00316	83 7d 0c 05	 cmp	 DWORD PTR _nValue$[ebp], 5
  0031a	7f 1a		 jg	 SHORT $L153141

; 409  : 		str.Format( "Terrible (%d)", nValue );

  0031c	8b 45 0c	 mov	 eax, DWORD PTR _nValue$[ebp]
  0031f	50		 push	 eax
  00320	68 00 00 00 00	 push	 OFFSET FLAT:$SG153142
  00325	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00328	51		 push	 ecx
  00329	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  0032e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 410  : 	} else if ( nValue <= 8 ) {

  00331	e9 a9 00 00 00	 jmp	 $L153158
$L153141:
  00336	83 7d 0c 08	 cmp	 DWORD PTR _nValue$[ebp], 8
  0033a	7f 1a		 jg	 SHORT $L153144

; 411  : 		str.Format( "Poor (%d)", nValue );

  0033c	8b 55 0c	 mov	 edx, DWORD PTR _nValue$[ebp]
  0033f	52		 push	 edx
  00340	68 00 00 00 00	 push	 OFFSET FLAT:$SG153145
  00345	8d 45 f0	 lea	 eax, DWORD PTR _str$[ebp]
  00348	50		 push	 eax
  00349	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  0034e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 412  : 	} else if ( nValue <= 13 ) {

  00351	e9 89 00 00 00	 jmp	 $L153158
$L153144:
  00356	83 7d 0c 0d	 cmp	 DWORD PTR _nValue$[ebp], 13 ; 0000000dH
  0035a	7f 17		 jg	 SHORT $L153147

; 413  : 		str.Format( "Average (%d)", nValue );

  0035c	8b 4d 0c	 mov	 ecx, DWORD PTR _nValue$[ebp]
  0035f	51		 push	 ecx
  00360	68 00 00 00 00	 push	 OFFSET FLAT:$SG153148
  00365	8d 55 f0	 lea	 edx, DWORD PTR _str$[ebp]
  00368	52		 push	 edx
  00369	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  0036e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 414  : 	} else if ( nValue <= 17 ) {

  00371	eb 6c		 jmp	 SHORT $L153158
$L153147:
  00373	83 7d 0c 11	 cmp	 DWORD PTR _nValue$[ebp], 17 ; 00000011H
  00377	7f 17		 jg	 SHORT $L153150

; 415  : 		str.Format( "Good (%d)", nValue );

  00379	8b 45 0c	 mov	 eax, DWORD PTR _nValue$[ebp]
  0037c	50		 push	 eax
  0037d	68 00 00 00 00	 push	 OFFSET FLAT:$SG153151
  00382	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00385	51		 push	 ecx
  00386	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  0038b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 	} else if ( nValue <= 21 ) {

  0038e	eb 4f		 jmp	 SHORT $L153158
$L153150:
  00390	83 7d 0c 15	 cmp	 DWORD PTR _nValue$[ebp], 21 ; 00000015H
  00394	7f 17		 jg	 SHORT $L153153

; 417  : 		str.Format( "Excellent (%d)", nValue );

  00396	8b 55 0c	 mov	 edx, DWORD PTR _nValue$[ebp]
  00399	52		 push	 edx
  0039a	68 00 00 00 00	 push	 OFFSET FLAT:$SG153154
  0039f	8d 45 f0	 lea	 eax, DWORD PTR _str$[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  003a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 418  : 	} else if ( nValue <= 25 ) {

  003ab	eb 32		 jmp	 SHORT $L153158
$L153153:
  003ad	83 7d 0c 19	 cmp	 DWORD PTR _nValue$[ebp], 25 ; 00000019H
  003b1	7f 17		 jg	 SHORT $L153156

; 419  : 		str.Format( "Fantastic (%d)", nValue );

  003b3	8b 4d 0c	 mov	 ecx, DWORD PTR _nValue$[ebp]
  003b6	51		 push	 ecx
  003b7	68 00 00 00 00	 push	 OFFSET FLAT:$SG153157
  003bc	8d 55 f0	 lea	 edx, DWORD PTR _str$[ebp]
  003bf	52		 push	 edx
  003c0	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  003c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 420  : 	} else {

  003c8	eb 15		 jmp	 SHORT $L153158
$L153156:

; 421  : 		str.Format( "Godlike (%d)", nValue );

  003ca	8b 45 0c	 mov	 eax, DWORD PTR _nValue$[ebp]
  003cd	50		 push	 eax
  003ce	68 00 00 00 00	 push	 OFFSET FLAT:$SG153159
  003d3	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  003d6	51		 push	 ecx
  003d7	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  003dc	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153158:

; 423  : 
; 424  : 	return CString ( str );

  003df	8d 55 f0	 lea	 edx, DWORD PTR _str$[ebp]
  003e2	52		 push	 edx
  003e3	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  003e6	e8 00 00 00 00	 call	 ??0CString@@QAE@ABV0@@Z	; CString::CString
  003eb	8b 45 ec	 mov	 eax, DWORD PTR $T160550[ebp]
  003ee	0c 01		 or	 al, 1
  003f0	89 45 ec	 mov	 DWORD PTR $T160550[ebp], eax
  003f3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003f7	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  003fa	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  003ff	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 425  : }

  00402	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00405	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0040c	8b e5		 mov	 esp, ebp
  0040e	5d		 pop	 ebp
  0040f	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L160548:
  00026	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00029	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0002e	c3		 ret	 0
$L160549:
  0002f	8b 45 ec	 mov	 eax, DWORD PTR $T160550[ebp]
  00032	83 e0 01	 and	 eax, 1
  00035	85 c0		 test	 eax, eax
  00037	0f 84 08 00 00
	00		 je	 $L160551
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00040	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
$L160551:
  00045	c3		 ret	 0
$L160554:
  00046	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160553
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeString@@YA?AVCString@@H@Z ENDP			; MakeString
_TEXT	SEGMENT
_$E345	PROC NEAR
  00410	55		 push	 ebp
  00411	8b ec		 mov	 ebp, esp
  00413	e8 00 00 00 00	 call	 _$E344
  00418	5d		 pop	 ebp
  00419	c3		 ret	 0
_$E345	ENDP
_TEXT	ENDS
PUBLIC	??0CSCI_CharInfo@@QAE@XZ			; CSCI_CharInfo::CSCI_CharInfo
_TEXT	SEGMENT
_$E344	PROC NEAR

; 428  : CSCI_CharInfo	CLookAt::m_pChar;

  0041a	55		 push	 ebp
  0041b	8b ec		 mov	 ebp, esp
  0041d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00422	e8 00 00 00 00	 call	 ??0CSCI_CharInfo@@QAE@XZ ; CSCI_CharInfo::CSCI_CharInfo
  00427	5d		 pop	 ebp
  00428	c3		 ret	 0
_$E344	ENDP
_TEXT	ENDS
PUBLIC	??0CLookAt@@QAE@H@Z				; CLookAt::CLookAt
PUBLIC	?CloseSelf@CLookAt@@UAEX_N@Z			; CLookAt::CloseSelf
PUBLIC	?MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CLookAt::MakeSkinCtrl
PUBLIC	?Hide@CLookAt@@UAEXXZ				; CLookAt::Hide
PUBLIC	?Show@CLookAt@@UAEXXZ				; CLookAt::Show
PUBLIC	??_7CLookAt@@6B@				; CLookAt::`vftable'
PUBLIC	??_GCLookAt@@UAEPAXI@Z				; CLookAt::`scalar deleting destructor'
PUBLIC	??_ECLookAt@@UAEPAXI@Z				; CLookAt::`vector deleting destructor'
PUBLIC	??0CPoint@@QAE@XZ				; CPoint::CPoint
PUBLIC	?Next@CSkinWnd@@UAEXXZ				; CSkinWnd::Next
PUBLIC	?Previous@CSkinWnd@@UAEXXZ			; CSkinWnd::Previous
EXTRN	?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ:NEAR ; CWnd::GetRuntimeClass
EXTRN	?GetProcessEvents@CSkinWnd@@MAE_NXZ:NEAR	; CSkinWnd::GetProcessEvents
EXTRN	??0CSkinWnd@@QAE@XZ:NEAR			; CSkinWnd::CSkinWnd
EXTRN	??1CSkinWnd@@UAE@XZ:NEAR			; CSkinWnd::~CSkinWnd
EXTRN	?Disable@CSkinWnd@@UAEXXZ:NEAR			; CSkinWnd::Disable
EXTRN	?Enable@CSkinWnd@@UAEXXZ:NEAR			; CSkinWnd::Enable
EXTRN	?EnableGameModal@CSkinWnd@@UAEXHPAH@Z:NEAR	; CSkinWnd::EnableGameModal
EXTRN	?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z:NEAR	; CSkinWnd::DisableGameModal
EXTRN	?ProcessRefreshList@CSkinWnd@@UAEHXZ:NEAR	; CSkinWnd::ProcessRefreshList
EXTRN	?UpdateTracking@CSkinWnd@@UAEXXZ:NEAR		; CSkinWnd::UpdateTracking
EXTRN	?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CSkinWnd::GetEventSinkMap
EXTRN	?GetMessageMap@CSkinWnd@@MBEPBUAFX_MSGMAP@@XZ:NEAR ; CSkinWnd::GetMessageMap
EXTRN	??0CSkinObj@@QAE@XZ:NEAR			; CSkinObj::CSkinObj
;	COMDAT ??_7CLookAt@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\LookAt.cpp
CONST	SEGMENT
??_7CLookAt@@6B@ DD FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ ; CLookAt::`vftable'
	DD	FLAT:??_ECLookAt@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CSkinWnd@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetProcessEvents@CSkinWnd@@MAE_NXZ
	DD	FLAT:?CloseSelf@CLookAt@@UAEX_N@Z
	DD	FLAT:?Disable@CSkinWnd@@UAEXXZ
	DD	FLAT:?Enable@CSkinWnd@@UAEXXZ
	DD	FLAT:?EnableGameModal@CSkinWnd@@UAEXHPAH@Z
	DD	FLAT:?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z
	DD	FLAT:?MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z
	DD	FLAT:?ProcessRefreshList@CSkinWnd@@UAEHXZ
	DD	FLAT:?UpdateTracking@CSkinWnd@@UAEXXZ
	DD	FLAT:?Next@CSkinWnd@@UAEXXZ
	DD	FLAT:?Previous@CSkinWnd@@UAEXXZ
	DD	FLAT:?Hide@CLookAt@@UAEXXZ
	DD	FLAT:?Show@CLookAt@@UAEXXZ
CONST	ENDS
xdata$x	SEGMENT
$T160562 DD	019930520H
	DD	02H
	DD	FLAT:$T160564
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160564 DD	0ffffffffH
	DD	FLAT:$L160559
	DD	00H
	DD	FLAT:$L160560
xdata$x	ENDS
_TEXT	SEGMENT
_nPage$ = 8
_this$ = -16
__$EHRec$ = -12
??0CLookAt@@QAE@H@Z PROC NEAR				; CLookAt::CLookAt

; 430  : CLookAt::CLookAt( int nPage ) {

  00429	55		 push	 ebp
  0042a	8b ec		 mov	 ebp, esp
  0042c	6a ff		 push	 -1
  0042e	68 00 00 00 00	 push	 $L160563
  00433	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00439	50		 push	 eax
  0043a	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00441	51		 push	 ecx
  00442	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00445	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00448	e8 00 00 00 00	 call	 ??0CSkinWnd@@QAE@XZ	; CSkinWnd::CSkinWnd
  0044d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00454	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00457	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0045d	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@XZ	; CSkinObj::CSkinObj
  00462	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00466	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00469	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  0046f	e8 00 00 00 00	 call	 ??0CPoint@@QAE@XZ	; CPoint::CPoint
  00474	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00477	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CLookAt@@6B@ ; CLookAt::`vftable'

; 431  : 	assert ( NULL != m_pChar );
; 432  : 
; 433  : 	g_pLookAtScreen[ nPage ] = this;

  0047d	8b 4d 08	 mov	 ecx, DWORD PTR _nPage$[ebp]
  00480	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00483	89 14 8d 00 00
	00 00		 mov	 DWORD PTR ?g_pLookAtScreen@@3PAPAVCLookAt@@A[ecx*4], edx

; 434  : 
; 435  : 	m_pTitle = NULL;

  0048a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0048d	c7 80 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+164], 0

; 436  : 	m_pBio = NULL;

  00497	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0049a	c7 81 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+168], 0

; 437  : 
; 438  : 	//	P V P control
; 439  : 	m_pPVP = NULL;

  004a4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  004a7	c7 82 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+172], 0

; 440  : 
; 441  : 	//	Banner of privilegde
; 442  : 	m_pBanner = NULL;

  004b1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  004b4	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 443  : }

  004be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004c5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  004c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  004d2	8b e5		 mov	 esp, ebp
  004d4	5d		 pop	 ebp
  004d5	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L160559:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  00058	c3		 ret	 0
$L160560:
  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00062	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00067	c3		 ret	 0
$L160563:
  00068	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160562
  0006d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CLookAt@@QAE@H@Z ENDP				; CLookAt::CLookAt
PUBLIC	??1CLookAt@@UAE@XZ				; CLookAt::~CLookAt
;	COMDAT ??_GCLookAt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCLookAt@@UAEPAXI@Z PROC NEAR			; CLookAt::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CLookAt@@UAE@XZ	; CLookAt::~CLookAt
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L153179
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L153179:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCLookAt@@UAEPAXI@Z ENDP				; CLookAt::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T160570 DD	019930520H
	DD	01H
	DD	FLAT:$T160572
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160572 DD	0ffffffffH
	DD	FLAT:$L160567
xdata$x	ENDS
;	COMDAT ??1CLookAt@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1CLookAt@@UAE@XZ PROC NEAR				; CLookAt::~CLookAt, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L160571
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00023	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0002c	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00031	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160567:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  00008	c3		 ret	 0
$L160571:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160570
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CLookAt@@UAE@XZ ENDP					; CLookAt::~CLookAt
PUBLIC	?SaveName@CLookAt@@QAEXXZ			; CLookAt::SaveName
PUBLIC	??0CSCI_CharInfo@@QAE@G@Z			; CSCI_CharInfo::CSCI_CharInfo
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
EXTRN	?g_pCharSelWnd@@3PAVCCharSelectWnd@@A:DWORD	; g_pCharSelWnd
EXTRN	?dispose@CSCI_Object@@QAEXXZ:NEAR		; CSCI_Object::dispose
EXTRN	?CloseSelf@CSkinWnd@@UAEX_N@Z:NEAR		; CSkinWnd::CloseSelf
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
EXTRN	?g_pSCIWnd@@3PAVCSCIWnd@@A:DWORD		; g_pSCIWnd
_TEXT	SEGMENT
_bTransient$ = 8
_this$ = -16
_nScreen$ = -4
_pScreen$153198 = -8
$T160576 = -12
?CloseSelf@CLookAt@@UAEX_N@Z PROC NEAR			; CLookAt::CloseSelf

; 446  : void CLookAt::CloseSelf( bool bTransient ) {

  004d8	55		 push	 ebp
  004d9	8b ec		 mov	 ebp, esp
  004db	83 ec 10	 sub	 esp, 16			; 00000010H
  004de	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 447  : 	if ( m_pChar ) {

  004e1	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  004e6	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  004eb	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  004f0	85 c0		 test	 eax, eax
  004f2	74 61		 je	 SHORT $L153191

; 448  : 		if ( !bTransient )

  004f4	8b 45 08	 mov	 eax, DWORD PTR _bTransient$[ebp]
  004f7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004fc	85 c0		 test	 eax, eax
  004fe	75 08		 jne	 SHORT $L153187

; 449  : 			SaveName();

  00500	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00503	e8 00 00 00 00	 call	 ?SaveName@CLookAt@@QAEXXZ ; CLookAt::SaveName
$L153187:

; 450  : 
; 451  : 		m_pChar.dispose();

  00508	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0050d	e8 00 00 00 00	 call	 ?dispose@CSCI_Object@@QAEXXZ ; CSCI_Object::dispose

; 452  : 
; 453  : 		m_pChar = NULL;

  00512	6a 00		 push	 0
  00514	8d 4d f4	 lea	 ecx, DWORD PTR $T160576[ebp]
  00517	e8 00 00 00 00	 call	 ??0CSCI_CharInfo@@QAE@G@Z ; CSCI_CharInfo::CSCI_CharInfo
  0051c	66 8b 4d f4	 mov	 cx, WORD PTR $T160576[ebp]
  00520	66 89 0d 00 00
	00 00		 mov	 WORD PTR ?m_pChar@CLookAt@@1VCSCI_CharInfo@@A, cx

; 454  : 
; 455  : 		if ( g_pCharSelWnd ) {

  00527	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, 0 ; g_pCharSelWnd
  0052e	74 0f		 je	 SHORT $L153189

; 456  : 			g_pCharSelWnd->ShowWindow( SW_SHOW );

  00530	6a 05		 push	 5
  00532	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  00538	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 457  : 		} else if ( g_pSCIWnd ) {

  0053d	eb 16		 jmp	 SHORT $L153191
$L153189:
  0053f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A, 0 ; g_pSCIWnd
  00546	74 0d		 je	 SHORT $L153191

; 458  : 			g_pSCIWnd->ShowWindow( SW_SHOW );

  00548	6a 05		 push	 5
  0054a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A ; g_pSCIWnd
  00550	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L153191:

; 461  : 
; 462  : 	if ( g_pLookAtFiller )

  00555	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pLookAtFiller@@3PAVCLookAtFiller@@A, 0 ; g_pLookAtFiller
  0055c	74 17		 je	 SHORT $L153192

; 463  : 		g_pLookAtFiller->CloseSelf( bTransient );

  0055e	8a 55 08	 mov	 dl, BYTE PTR _bTransient$[ebp]
  00561	52		 push	 edx
  00562	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pLookAtFiller@@3PAVCLookAtFiller@@A ; g_pLookAtFiller
  00567	8b 10		 mov	 edx, DWORD PTR [eax]
  00569	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLookAtFiller@@3PAVCLookAtFiller@@A ; g_pLookAtFiller
  0056f	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L153192:

; 464  : 
; 465  : 	for (int nScreen = 0;nScreen < MAX_SCREEN_PAGES;nScreen++) {

  00575	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nScreen$[ebp], 0
  0057c	eb 09		 jmp	 SHORT $L153194
$L153195:
  0057e	8b 45 fc	 mov	 eax, DWORD PTR _nScreen$[ebp]
  00581	83 c0 01	 add	 eax, 1
  00584	89 45 fc	 mov	 DWORD PTR _nScreen$[ebp], eax
$L153194:
  00587	83 7d fc 09	 cmp	 DWORD PTR _nScreen$[ebp], 9
  0058b	7d 3c		 jge	 SHORT $L153196

; 466  : 		if ( g_pLookAtScreen[ nScreen ] ) {

  0058d	8b 4d fc	 mov	 ecx, DWORD PTR _nScreen$[ebp]
  00590	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR ?g_pLookAtScreen@@3PAPAVCLookAt@@A[ecx*4], 0
  00598	74 2d		 je	 SHORT $L153197

; 467  : 			CLookAt* pScreen = g_pLookAtScreen[ nScreen ];

  0059a	8b 55 fc	 mov	 edx, DWORD PTR _nScreen$[ebp]
  0059d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?g_pLookAtScreen@@3PAPAVCLookAt@@A[edx*4]
  005a4	89 45 f8	 mov	 DWORD PTR _pScreen$153198[ebp], eax

; 468  : 			g_pLookAtScreen[ nScreen ] = NULL;

  005a7	8b 4d fc	 mov	 ecx, DWORD PTR _nScreen$[ebp]
  005aa	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?g_pLookAtScreen@@3PAPAVCLookAt@@A[ecx*4], 0

; 469  : 			pScreen->CloseSelf( bTransient );

  005b5	8a 55 08	 mov	 dl, BYTE PTR _bTransient$[ebp]
  005b8	52		 push	 edx
  005b9	8b 45 f8	 mov	 eax, DWORD PTR _pScreen$153198[ebp]
  005bc	8b 10		 mov	 edx, DWORD PTR [eax]
  005be	8b 4d f8	 mov	 ecx, DWORD PTR _pScreen$153198[ebp]
  005c1	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L153197:

; 471  : 	}

  005c7	eb b5		 jmp	 SHORT $L153195
$L153196:

; 472  : 
; 473  : 	CSkinWnd::CloseSelf( bTransient );

  005c9	8a 45 08	 mov	 al, BYTE PTR _bTransient$[ebp]
  005cc	50		 push	 eax
  005cd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  005d0	e8 00 00 00 00	 call	 ?CloseSelf@CSkinWnd@@UAEX_N@Z ; CSkinWnd::CloseSelf

; 474  : }

  005d5	8b e5		 mov	 esp, ebp
  005d7	5d		 pop	 ebp
  005d8	c2 04 00	 ret	 4
?CloseSelf@CLookAt@@UAEX_N@Z ENDP			; CLookAt::CloseSelf
_TEXT	ENDS
PUBLIC	?Create@CLookAt@@QAEHPBD@Z			; CLookAt::Create
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
PUBLIC	??1CelObjMem@@UAE@XZ				; CelObjMem::~CelObjMem
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	??0CRect@@QAE@HHHH@Z				; CRect::CRect
PUBLIC	?get_pFace@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pFace
PUBLIC	?get_pAttackStance@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pAttackStance
PUBLIC	?get_pAttackWidth@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pAttackWidth
PUBLIC	?get_pAttackHeight@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pAttackHeight
PUBLIC	??BCRect@@QAEPAUtagRECT@@XZ			; CRect::operator tagRECT *
PUBLIC	?get_pStand@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pStand
PUBLIC	?AfxGetApp@@YGPAVCWinApp@@XZ			; AfxGetApp
PUBLIC	?get_pOldLevel@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pOldLevel
PUBLIC	?get_nRights@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_nRights
PUBLIC	??0Ratio@@QAE@HH@Z				; Ratio::Ratio
PUBLIC	?SetTransient@CSkinWnd@@IAEX_N@Z		; CSkinWnd::SetTransient
PUBLIC	?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z		; CWnd::MoveWindow
PUBLIC	?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetWindowRect
PUBLIC	??4CSkinObj@@QAEAAV0@ABV0@@Z			; CSkinObj::operator=
PUBLIC	?BringTabToTop@CMainPanelWnd@@QAEXXZ		; CMainPanelWnd::BringTabToTop
EXTRN	?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A:DWORD	; g_pMainPanelWnd
EXTRN	??0CelObjMem@@QAE@VMemID@@@Z:NEAR		; CelObjMem::CelObjMem
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	?getAffectedState@CSCI_CharInfo@@QAEFF@Z:NEAR	; CSCI_CharInfo::getAffectedState
EXTRN	?Normalize@Ratio@@QAEXXZ:NEAR			; Ratio::Normalize
EXTRN	??0CSkinBitmap@@QAE@PAVCelObj@@@Z:NEAR		; CSkinBitmap::CSkinBitmap
EXTRN	??0CSkinBitmap@@QAE@PAVCelObj@@NAAVRatio@@1@Z:NEAR ; CSkinBitmap::CSkinBitmap
EXTRN	?CreateChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@H@Z:NEAR ; CSkinWnd::CreateChild
EXTRN	?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z:NEAR ; CSkinWnd::FindObject
EXTRN	?SetPriority@CSkinWnd@@QAEXH@Z:NEAR		; CSkinWnd::SetPriority
EXTRN	?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z:NEAR	; CWnd::ScreenToClient
EXTRN	?IsValid@CSkinObj@@QAEHXZ:NEAR			; CSkinObj::IsValid
EXTRN	?GetCenterPoint@CSkinObj@@QAEHAAVCPoint@@@Z:NEAR ; CSkinObj::GetCenterPoint
EXTRN	__fltused:NEAR
EXTRN	?ExecuteScript@CSkinObj@@QAEHPBD@Z:NEAR		; CSkinObj::ExecuteScript
EXTRN	?SetTransparency@CSkinObj@@QAEHH@Z:NEAR		; CSkinObj::SetTransparency
EXTRN	?DrawBitmap@CSkinObj@@QAEHPAVCSkinBitmap@@HH@Z:NEAR ; CSkinObj::DrawBitmap
_DATA	SEGMENT
	ORG $+3
$SG153207 DB	'center', 00H
	ORG $+1
$SG153210 DB	'face', 00H
	ORG $+3
$SG153223 DB	'toon', 00H
	ORG $+3
$SG153240 DB	'combat', 00H
	ORG $+1
$SG153259 DB	'goto - Norseman', 00H
$SG153262 DB	'goto - GameStaff', 00H
	ORG $+3
$SG153265 DB	'goto - Veteran', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T160621 DD	019930520H
	DD	0aH
	DD	FLAT:$T160624
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160624 DD	0ffffffffH
	DD	FLAT:$L160610
	DD	00H
	DD	FLAT:$L160611
	DD	00H
	DD	FLAT:$L160612
	DD	02H
	DD	FLAT:$L160613
	DD	00H
	DD	FLAT:$L160614
	DD	00H
	DD	FLAT:$L160615
	DD	05H
	DD	FLAT:$L160616
	DD	00H
	DD	FLAT:$L160617
	DD	00H
	DD	FLAT:$L160618
	DD	08H
	DD	FLAT:$L160619
xdata$x	ENDS
_TEXT	SEGMENT
_pSkinPath$ = 8
_this$ = -432
_created$ = -16
_toonPosn$ = -24
_bitmapToon$153212 = -108
_pToonBitmap$153214 = -28
_bitmapToon$153225 = -200
_scaleX$153227 = -208
_scaleY$153228 = -116
_pToonBitmap$153229 = -120
_bitmapToon$153242 = -300
_scaleX$153244 = -308
_scaleY$153245 = -216
_pToonBitmap$153246 = -220
_rRect$153267 = -324
$T160578 = -340
$T160579 = -348
$T160580 = -352
$T160581 = -356
$T160582 = -360
$T160585 = -364
$T160586 = -368
$T160589 = -376
$T160590 = -380
$T160591 = -384
$T160592 = -388
$T160595 = -392
$T160596 = -396
$T160599 = -404
$T160600 = -408
$T160601 = -412
$T160602 = -416
$T160605 = -420
$T160606 = -424
$T160609 = -428
__$EHRec$ = -12
?Create@CLookAt@@QAEHPBD@Z PROC NEAR			; CLookAt::Create

; 477  : BOOL CLookAt::Create ( LPCTSTR pSkinPath ) {

  005db	55		 push	 ebp
  005dc	8b ec		 mov	 ebp, esp
  005de	6a ff		 push	 -1
  005e0	68 00 00 00 00	 push	 $L160622
  005e5	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  005eb	50		 push	 eax
  005ec	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  005f3	81 ec d4 01 00
	00		 sub	 esp, 468		; 000001d4H
  005f9	89 8d 50 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 478  : 	SetTransient( true );

  005ff	6a 01		 push	 1
  00601	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00607	e8 00 00 00 00	 call	 ?SetTransient@CSkinWnd@@IAEX_N@Z ; CSkinWnd::SetTransient

; 479  : 	SetPriority( swPriGameModal );

  0060c	6a 07		 push	 7
  0060e	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00614	e8 00 00 00 00	 call	 ?SetPriority@CSkinWnd@@QAEXH@Z ; CSkinWnd::SetPriority

; 480  : 	
; 481  : 	BOOL created = CreateChild ( pSkinPath, NULL, CRect ( 0, 0, 0, 0 ), AfxGetApp()->m_pMainWnd );

  00619	6a 01		 push	 1
  0061b	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  00620	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00623	50		 push	 eax
  00624	6a 00		 push	 0
  00626	6a 00		 push	 0
  00628	6a 00		 push	 0
  0062a	6a 00		 push	 0
  0062c	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T160578[ebp]
  00632	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  00637	50		 push	 eax
  00638	6a 00		 push	 0
  0063a	8b 4d 08	 mov	 ecx, DWORD PTR _pSkinPath$[ebp]
  0063d	51		 push	 ecx
  0063e	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00644	e8 00 00 00 00	 call	 ?CreateChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@H@Z ; CSkinWnd::CreateChild
  00649	89 45 f0	 mov	 DWORD PTR _created$[ebp], eax

; 482  : 
; 483  : 	// get the point for the toon
; 484  : 	CSkinObj toonPosn = FindObject ( "center" );

  0064c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153207
  00651	8d 55 e8	 lea	 edx, DWORD PTR _toonPosn$[ebp]
  00654	52		 push	 edx
  00655	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0065b	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  00660	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 485  : 	if ( toonPosn.IsValid() ) {

  00667	8d 4d e8	 lea	 ecx, DWORD PTR _toonPosn$[ebp]
  0066a	e8 00 00 00 00	 call	 ?IsValid@CSkinObj@@QAEHXZ ; CSkinObj::IsValid
  0066f	85 c0		 test	 eax, eax
  00671	0f 84 a8 05 00
	00		 je	 $L153208

; 486  : 		toonPosn.GetCenterPoint ( m_toonPoint );

  00677	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0067d	05 9c 00 00 00	 add	 eax, 156		; 0000009cH
  00682	50		 push	 eax
  00683	8d 4d e8	 lea	 ecx, DWORD PTR _toonPosn$[ebp]
  00686	e8 00 00 00 00	 call	 ?GetCenterPoint@CSkinObj@@QAEHAAVCPoint@@@Z ; CSkinObj::GetCenterPoint

; 487  : 
; 488  : 		// get the toon skin object
; 489  : 		m_toonObj = FindObject ( "face" );

  0068b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153210
  00690	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T160579[ebp]
  00696	51		 push	 ecx
  00697	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0069d	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  006a2	89 85 4c fe ff
	ff		 mov	 DWORD PTR -436+[ebp], eax
  006a8	8b 95 4c fe ff
	ff		 mov	 edx, DWORD PTR -436+[ebp]
  006ae	89 95 48 fe ff
	ff		 mov	 DWORD PTR -440+[ebp], edx
  006b4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  006b8	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR -440+[ebp]
  006be	50		 push	 eax
  006bf	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006c5	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  006cb	e8 00 00 00 00	 call	 ??4CSkinObj@@QAEAAV0@ABV0@@Z ; CSkinObj::operator=
  006d0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  006d4	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T160579[ebp]
  006da	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj

; 490  : 
; 491  : 		if ( m_toonObj.IsValid() ) {

  006df	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006e5	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  006eb	e8 00 00 00 00	 call	 ?IsValid@CSkinObj@@QAEHXZ ; CSkinObj::IsValid
  006f0	85 c0		 test	 eax, eax
  006f2	0f 84 fe 00 00
	00		 je	 $L153211

; 492  : 			CelObjMem bitmapToon ( m_pChar.get_pFace() );

  006f8	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  006fd	e8 00 00 00 00	 call	 ?get_pFace@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pFace
  00702	51		 push	 ecx
  00703	8b cc		 mov	 ecx, esp
  00705	89 a5 a0 fe ff
	ff		 mov	 DWORD PTR $T160580[ebp], esp
  0070b	50		 push	 eax
  0070c	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00711	8d 4d 94	 lea	 ecx, DWORD PTR _bitmapToon$153212[ebp]
  00714	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  00719	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 493  : 
; 494  : 			CSkinBitmap* pToonBitmap = new CSkinBitmap( &bitmapToon );

  0071d	6a 1c		 push	 28			; 0000001cH
  0071f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00724	83 c4 04	 add	 esp, 4
  00727	89 85 98 fe ff
	ff		 mov	 DWORD PTR $T160582[ebp], eax
  0072d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00731	83 bd 98 fe ff
	ff 00		 cmp	 DWORD PTR $T160582[ebp], 0
  00738	74 17		 je	 SHORT $L160583
  0073a	8d 4d 94	 lea	 ecx, DWORD PTR _bitmapToon$153212[ebp]
  0073d	51		 push	 ecx
  0073e	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR $T160582[ebp]
  00744	e8 00 00 00 00	 call	 ??0CSkinBitmap@@QAE@PAVCelObj@@@Z ; CSkinBitmap::CSkinBitmap
  00749	89 85 44 fe ff
	ff		 mov	 DWORD PTR -444+[ebp], eax
  0074f	eb 0a		 jmp	 SHORT $L160584
$L160583:
  00751	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -444+[ebp], 0
$L160584:
  0075b	8b 95 44 fe ff
	ff		 mov	 edx, DWORD PTR -444+[ebp]
  00761	89 95 9c fe ff
	ff		 mov	 DWORD PTR $T160581[ebp], edx
  00767	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0076b	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR $T160581[ebp]
  00771	89 45 e4	 mov	 DWORD PTR _pToonBitmap$153214[ebp], eax

; 495  : 
; 496  : 			// draw the stance on the hot spot bitmap
; 497  : 			m_toonObj.DrawBitmap ( pToonBitmap, m_toonPoint.x, m_toonPoint.y );

  00774	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0077a	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00780	52		 push	 edx
  00781	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00787	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0078d	51		 push	 ecx
  0078e	8b 55 e4	 mov	 edx, DWORD PTR _pToonBitmap$153214[ebp]
  00791	52		 push	 edx
  00792	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00798	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0079e	e8 00 00 00 00	 call	 ?DrawBitmap@CSkinObj@@QAEHPAVCSkinBitmap@@HH@Z ; CSkinObj::DrawBitmap

; 498  : 
; 499  : 			delete pToonBitmap;

  007a3	8b 45 e4	 mov	 eax, DWORD PTR _pToonBitmap$153214[ebp]
  007a6	89 85 90 fe ff
	ff		 mov	 DWORD PTR $T160586[ebp], eax
  007ac	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR $T160586[ebp]
  007b2	89 8d 94 fe ff
	ff		 mov	 DWORD PTR $T160585[ebp], ecx
  007b8	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR $T160585[ebp], 0
  007bf	74 1a		 je	 SHORT $L160587
  007c1	6a 01		 push	 1
  007c3	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR $T160585[ebp]
  007c9	8b 02		 mov	 eax, DWORD PTR [edx]
  007cb	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR $T160585[ebp]
  007d1	ff 10		 call	 DWORD PTR [eax]
  007d3	89 85 40 fe ff
	ff		 mov	 DWORD PTR -448+[ebp], eax
  007d9	eb 0a		 jmp	 SHORT $L160588
$L160587:
  007db	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -448+[ebp], 0
$L160588:

; 500  : 		} else {

  007e5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  007e9	8d 4d 94	 lea	 ecx, DWORD PTR _bitmapToon$153212[ebp]
  007ec	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  007f1	e9 29 04 00 00	 jmp	 $L153241
$L153211:

; 501  : 			m_toonObj = FindObject ( "toon" );

  007f6	68 00 00 00 00	 push	 OFFSET FLAT:$SG153223
  007fb	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T160589[ebp]
  00801	51		 push	 ecx
  00802	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00808	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  0080d	89 85 3c fe ff
	ff		 mov	 DWORD PTR -452+[ebp], eax
  00813	8b 95 3c fe ff
	ff		 mov	 edx, DWORD PTR -452+[ebp]
  00819	89 95 38 fe ff
	ff		 mov	 DWORD PTR -456+[ebp], edx
  0081f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00823	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR -456+[ebp]
  00829	50		 push	 eax
  0082a	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00830	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00836	e8 00 00 00 00	 call	 ??4CSkinObj@@QAEAAV0@ABV0@@Z ; CSkinObj::operator=
  0083b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0083f	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T160589[ebp]
  00845	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj

; 502  : 
; 503  : 			if ( m_toonObj.IsValid() ) {

  0084a	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00850	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00856	e8 00 00 00 00	 call	 ?IsValid@CSkinObj@@QAEHXZ ; CSkinObj::IsValid
  0085b	85 c0		 test	 eax, eax
  0085d	0f 84 a1 01 00
	00		 je	 $L153224

; 504  : 				CelObjMem bitmapToon ( m_pChar.get_pStand() );

  00863	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00868	e8 00 00 00 00	 call	 ?get_pStand@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pStand
  0086d	51		 push	 ecx
  0086e	8b cc		 mov	 ecx, esp
  00870	89 a5 84 fe ff
	ff		 mov	 DWORD PTR $T160590[ebp], esp
  00876	50		 push	 eax
  00877	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0087c	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapToon$153225[ebp]
  00882	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  00887	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 505  : 
; 506  : 				// get the scaling information from the object
; 507  : 				Ratio scaleX ( m_pChar.get_pAttackWidth() - 15, 100 );

  0088b	6a 64		 push	 100			; 00000064H
  0088d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00892	e8 00 00 00 00	 call	 ?get_pAttackWidth@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pAttackWidth
  00897	0f bf c8	 movsx	 ecx, ax
  0089a	83 e9 0f	 sub	 ecx, 15			; 0000000fH
  0089d	51		 push	 ecx
  0089e	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _scaleX$153227[ebp]
  008a4	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio

; 508  : 				Ratio scaleY ( m_pChar.get_pAttackHeight() - 15, 100 );

  008a9	6a 64		 push	 100			; 00000064H
  008ab	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  008b0	e8 00 00 00 00	 call	 ?get_pAttackHeight@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pAttackHeight
  008b5	0f bf d0	 movsx	 edx, ax
  008b8	83 ea 0f	 sub	 edx, 15			; 0000000fH
  008bb	52		 push	 edx
  008bc	8d 4d 8c	 lea	 ecx, DWORD PTR _scaleY$153228[ebp]
  008bf	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio

; 509  : 				scaleX.Normalize();

  008c4	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _scaleX$153227[ebp]
  008ca	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 510  : 				scaleY.Normalize();

  008cf	8d 4d 8c	 lea	 ecx, DWORD PTR _scaleY$153228[ebp]
  008d2	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 511  : 
; 512  : 				CSkinBitmap* pToonBitmap = new CSkinBitmap( &bitmapToon, 1.0, scaleX, scaleY );

  008d7	6a 1c		 push	 28			; 0000001cH
  008d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  008de	83 c4 04	 add	 esp, 4
  008e1	89 85 7c fe ff
	ff		 mov	 DWORD PTR $T160592[ebp], eax
  008e7	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  008eb	83 bd 7c fe ff
	ff 00		 cmp	 DWORD PTR $T160592[ebp], 0
  008f2	74 2c		 je	 SHORT $L160593
  008f4	8d 45 8c	 lea	 eax, DWORD PTR _scaleY$153228[ebp]
  008f7	50		 push	 eax
  008f8	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _scaleX$153227[ebp]
  008fe	51		 push	 ecx
  008ff	68 00 00 f0 3f	 push	 1072693248		; 3ff00000H
  00904	6a 00		 push	 0
  00906	8d 95 38 ff ff
	ff		 lea	 edx, DWORD PTR _bitmapToon$153225[ebp]
  0090c	52		 push	 edx
  0090d	8b 8d 7c fe ff
	ff		 mov	 ecx, DWORD PTR $T160592[ebp]
  00913	e8 00 00 00 00	 call	 ??0CSkinBitmap@@QAE@PAVCelObj@@NAAVRatio@@1@Z ; CSkinBitmap::CSkinBitmap
  00918	89 85 34 fe ff
	ff		 mov	 DWORD PTR -460+[ebp], eax
  0091e	eb 0a		 jmp	 SHORT $L160594
$L160593:
  00920	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -460+[ebp], 0
$L160594:
  0092a	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR -460+[ebp]
  00930	89 85 80 fe ff
	ff		 mov	 DWORD PTR $T160591[ebp], eax
  00936	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0093a	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR $T160591[ebp]
  00940	89 4d 88	 mov	 DWORD PTR _pToonBitmap$153229[ebp], ecx

; 513  : 
; 514  : 				// draw the stance on the hot spot bitmap
; 515  : 				m_toonObj.DrawBitmap ( pToonBitmap, m_toonPoint.x, m_toonPoint.y );

  00943	8b 95 50 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00949	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  0094f	50		 push	 eax
  00950	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00956	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  0095c	52		 push	 edx
  0095d	8b 45 88	 mov	 eax, DWORD PTR _pToonBitmap$153229[ebp]
  00960	50		 push	 eax
  00961	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00967	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0096d	e8 00 00 00 00	 call	 ?DrawBitmap@CSkinObj@@QAEHPAVCSkinBitmap@@HH@Z ; CSkinObj::DrawBitmap

; 516  : 
; 517  : 				if ( m_pChar.getAffectedState( CSCI_WorldActor::_AFF_INVISIBILITY ) || m_pChar.getAffectedState(CSCI_WorldActor:: _AFF_IMPROVED_INVISIBILITY ) )

  00972	6a 12		 push	 18			; 00000012H
  00974	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00979	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_CharInfo@@QAEFF@Z ; CSCI_CharInfo::getAffectedState
  0097e	0f bf c8	 movsx	 ecx, ax
  00981	85 c9		 test	 ecx, ecx
  00983	75 13		 jne	 SHORT $L153235
  00985	6a 15		 push	 21			; 00000015H
  00987	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0098c	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_CharInfo@@QAEFF@Z ; CSCI_CharInfo::getAffectedState
  00991	0f bf d0	 movsx	 edx, ax
  00994	85 d2		 test	 edx, edx
  00996	74 16		 je	 SHORT $L153234
$L153235:

; 518  : 					m_toonObj.SetTransparency( 192 );

  00998	68 c0 00 00 00	 push	 192			; 000000c0H
  0099d	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  009a3	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  009a9	e8 00 00 00 00	 call	 ?SetTransparency@CSkinObj@@QAEHH@Z ; CSkinObj::SetTransparency
$L153234:

; 519  : 
; 520  : 				delete pToonBitmap;

  009ae	8b 45 88	 mov	 eax, DWORD PTR _pToonBitmap$153229[ebp]
  009b1	89 85 74 fe ff
	ff		 mov	 DWORD PTR $T160596[ebp], eax
  009b7	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR $T160596[ebp]
  009bd	89 8d 78 fe ff
	ff		 mov	 DWORD PTR $T160595[ebp], ecx
  009c3	83 bd 78 fe ff
	ff 00		 cmp	 DWORD PTR $T160595[ebp], 0
  009ca	74 1a		 je	 SHORT $L160597
  009cc	6a 01		 push	 1
  009ce	8b 95 78 fe ff
	ff		 mov	 edx, DWORD PTR $T160595[ebp]
  009d4	8b 02		 mov	 eax, DWORD PTR [edx]
  009d6	8b 8d 78 fe ff
	ff		 mov	 ecx, DWORD PTR $T160595[ebp]
  009dc	ff 10		 call	 DWORD PTR [eax]
  009de	89 85 30 fe ff
	ff		 mov	 DWORD PTR -464+[ebp], eax
  009e4	eb 0a		 jmp	 SHORT $L160598
$L160597:
  009e6	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -464+[ebp], 0
$L160598:

; 521  : 			} else {

  009f0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  009f4	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapToon$153225[ebp]
  009fa	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  009ff	e9 1b 02 00 00	 jmp	 $L153241
$L153224:

; 522  : 				m_toonObj = FindObject ( "combat" );

  00a04	68 00 00 00 00	 push	 OFFSET FLAT:$SG153240
  00a09	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T160599[ebp]
  00a0f	51		 push	 ecx
  00a10	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00a16	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  00a1b	89 85 2c fe ff
	ff		 mov	 DWORD PTR -468+[ebp], eax
  00a21	8b 95 2c fe ff
	ff		 mov	 edx, DWORD PTR -468+[ebp]
  00a27	89 95 28 fe ff
	ff		 mov	 DWORD PTR -472+[ebp], edx
  00a2d	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00a31	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR -472+[ebp]
  00a37	50		 push	 eax
  00a38	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00a3e	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00a44	e8 00 00 00 00	 call	 ??4CSkinObj@@QAEAAV0@ABV0@@Z ; CSkinObj::operator=
  00a49	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00a4d	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T160599[ebp]
  00a53	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj

; 523  : 
; 524  : 				if ( m_toonObj.IsValid() ) {

  00a58	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00a5e	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00a64	e8 00 00 00 00	 call	 ?IsValid@CSkinObj@@QAEHXZ ; CSkinObj::IsValid
  00a69	85 c0		 test	 eax, eax
  00a6b	0f 84 ae 01 00
	00		 je	 $L153241

; 525  : 					CelObjMem bitmapToon ( m_pChar.get_pAttackStance() );

  00a71	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00a76	e8 00 00 00 00	 call	 ?get_pAttackStance@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pAttackStance
  00a7b	51		 push	 ecx
  00a7c	8b cc		 mov	 ecx, esp
  00a7e	89 a5 68 fe ff
	ff		 mov	 DWORD PTR $T160600[ebp], esp
  00a84	50		 push	 eax
  00a85	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00a8a	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _bitmapToon$153242[ebp]
  00a90	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  00a95	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 526  : 
; 527  : 					// get the scaling information from the object
; 528  : 					Ratio scaleX ( m_pChar.get_pAttackWidth() - 15, 100 );

  00a99	6a 64		 push	 100			; 00000064H
  00a9b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00aa0	e8 00 00 00 00	 call	 ?get_pAttackWidth@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pAttackWidth
  00aa5	0f bf c8	 movsx	 ecx, ax
  00aa8	83 e9 0f	 sub	 ecx, 15			; 0000000fH
  00aab	51		 push	 ecx
  00aac	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _scaleX$153244[ebp]
  00ab2	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio

; 529  : 					Ratio scaleY ( m_pChar.get_pAttackHeight() - 15, 100 );

  00ab7	6a 64		 push	 100			; 00000064H
  00ab9	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00abe	e8 00 00 00 00	 call	 ?get_pAttackHeight@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pAttackHeight
  00ac3	0f bf d0	 movsx	 edx, ax
  00ac6	83 ea 0f	 sub	 edx, 15			; 0000000fH
  00ac9	52		 push	 edx
  00aca	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _scaleY$153245[ebp]
  00ad0	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio

; 530  : 					scaleX.Normalize();

  00ad5	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _scaleX$153244[ebp]
  00adb	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 531  : 					scaleY.Normalize();

  00ae0	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _scaleY$153245[ebp]
  00ae6	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 532  : 
; 533  : 					CSkinBitmap* pToonBitmap = new CSkinBitmap( &bitmapToon, 1.0, scaleX, scaleY );

  00aeb	6a 1c		 push	 28			; 0000001cH
  00aed	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00af2	83 c4 04	 add	 esp, 4
  00af5	89 85 60 fe ff
	ff		 mov	 DWORD PTR $T160602[ebp], eax
  00afb	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00aff	83 bd 60 fe ff
	ff 00		 cmp	 DWORD PTR $T160602[ebp], 0
  00b06	74 2f		 je	 SHORT $L160603
  00b08	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _scaleY$153245[ebp]
  00b0e	50		 push	 eax
  00b0f	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _scaleX$153244[ebp]
  00b15	51		 push	 ecx
  00b16	68 00 00 f0 3f	 push	 1072693248		; 3ff00000H
  00b1b	6a 00		 push	 0
  00b1d	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _bitmapToon$153242[ebp]
  00b23	52		 push	 edx
  00b24	8b 8d 60 fe ff
	ff		 mov	 ecx, DWORD PTR $T160602[ebp]
  00b2a	e8 00 00 00 00	 call	 ??0CSkinBitmap@@QAE@PAVCelObj@@NAAVRatio@@1@Z ; CSkinBitmap::CSkinBitmap
  00b2f	89 85 24 fe ff
	ff		 mov	 DWORD PTR -476+[ebp], eax
  00b35	eb 0a		 jmp	 SHORT $L160604
$L160603:
  00b37	c7 85 24 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -476+[ebp], 0
$L160604:
  00b41	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR -476+[ebp]
  00b47	89 85 64 fe ff
	ff		 mov	 DWORD PTR $T160601[ebp], eax
  00b4d	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00b51	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR $T160601[ebp]
  00b57	89 8d 24 ff ff
	ff		 mov	 DWORD PTR _pToonBitmap$153246[ebp], ecx

; 534  : 
; 535  : 					// draw the stance on the hot spot bitmap
; 536  : 					m_toonObj.DrawBitmap ( pToonBitmap, m_toonPoint.x, m_toonPoint.y );

  00b5d	8b 95 50 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00b63	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00b69	50		 push	 eax
  00b6a	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00b70	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  00b76	52		 push	 edx
  00b77	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _pToonBitmap$153246[ebp]
  00b7d	50		 push	 eax
  00b7e	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00b84	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00b8a	e8 00 00 00 00	 call	 ?DrawBitmap@CSkinObj@@QAEHPAVCSkinBitmap@@HH@Z ; CSkinObj::DrawBitmap

; 537  : 
; 538  : 					if ( m_pChar.getAffectedState( CSCI_WorldActor::_AFF_INVISIBILITY ) || m_pChar.getAffectedState(CSCI_WorldActor:: _AFF_IMPROVED_INVISIBILITY ) )

  00b8f	6a 12		 push	 18			; 00000012H
  00b91	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00b96	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_CharInfo@@QAEFF@Z ; CSCI_CharInfo::getAffectedState
  00b9b	0f bf c8	 movsx	 ecx, ax
  00b9e	85 c9		 test	 ecx, ecx
  00ba0	75 13		 jne	 SHORT $L153252
  00ba2	6a 15		 push	 21			; 00000015H
  00ba4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00ba9	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_CharInfo@@QAEFF@Z ; CSCI_CharInfo::getAffectedState
  00bae	0f bf d0	 movsx	 edx, ax
  00bb1	85 d2		 test	 edx, edx
  00bb3	74 16		 je	 SHORT $L153251
$L153252:

; 539  : 						m_toonObj.SetTransparency( 192 );

  00bb5	68 c0 00 00 00	 push	 192			; 000000c0H
  00bba	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00bc0	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00bc6	e8 00 00 00 00	 call	 ?SetTransparency@CSkinObj@@QAEHH@Z ; CSkinObj::SetTransparency
$L153251:

; 540  : 
; 541  : 					delete pToonBitmap;

  00bcb	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _pToonBitmap$153246[ebp]
  00bd1	89 85 58 fe ff
	ff		 mov	 DWORD PTR $T160606[ebp], eax
  00bd7	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR $T160606[ebp]
  00bdd	89 8d 5c fe ff
	ff		 mov	 DWORD PTR $T160605[ebp], ecx
  00be3	83 bd 5c fe ff
	ff 00		 cmp	 DWORD PTR $T160605[ebp], 0
  00bea	74 1a		 je	 SHORT $L160607
  00bec	6a 01		 push	 1
  00bee	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR $T160605[ebp]
  00bf4	8b 02		 mov	 eax, DWORD PTR [edx]
  00bf6	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR $T160605[ebp]
  00bfc	ff 10		 call	 DWORD PTR [eax]
  00bfe	89 85 20 fe ff
	ff		 mov	 DWORD PTR -480+[ebp], eax
  00c04	eb 0a		 jmp	 SHORT $L160608
$L160607:
  00c06	c7 85 20 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -480+[ebp], 0
$L160608:

; 542  : 				}

  00c10	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00c14	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _bitmapToon$153242[ebp]
  00c1a	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
$L153241:
$L153208:

; 548  : 
; 549  : 	// Display the banner
; 550  : 	if ( m_pBanner ) {

  00c1f	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00c25	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00c2c	74 7c		 je	 SHORT $L153264

; 551  : 		if ( m_pChar.get_nRights() == 1 ) {

  00c2e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00c33	e8 00 00 00 00	 call	 ?get_nRights@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_nRights
  00c38	0f bf d0	 movsx	 edx, ax
  00c3b	83 fa 01	 cmp	 edx, 1
  00c3e	75 18		 jne	 SHORT $L153258

; 552  : 			m_pBanner->ExecuteScript ( "goto - Norseman" );

  00c40	68 00 00 00 00	 push	 OFFSET FLAT:$SG153259
  00c45	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00c4b	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00c51	e8 00 00 00 00	 call	 ?ExecuteScript@CSkinObj@@QAEHPBD@Z ; CSkinObj::ExecuteScript

; 553  : 		} else if ( m_pChar.get_nRights() == 2 ) {

  00c56	eb 52		 jmp	 SHORT $L153264
$L153258:
  00c58	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00c5d	e8 00 00 00 00	 call	 ?get_nRights@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_nRights
  00c62	0f bf c8	 movsx	 ecx, ax
  00c65	83 f9 02	 cmp	 ecx, 2
  00c68	75 18		 jne	 SHORT $L153261

; 554  : 			m_pBanner->ExecuteScript ( "goto - GameStaff" );

  00c6a	68 00 00 00 00	 push	 OFFSET FLAT:$SG153262
  00c6f	8b 95 50 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00c75	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  00c7b	e8 00 00 00 00	 call	 ?ExecuteScript@CSkinObj@@QAEHPBD@Z ; CSkinObj::ExecuteScript

; 555  : 		} else if ( m_pChar.get_pOldLevel() > 3 ) {

  00c80	eb 28		 jmp	 SHORT $L153264
$L153261:
  00c82	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00c87	e8 00 00 00 00	 call	 ?get_pOldLevel@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pOldLevel
  00c8c	0f bf c0	 movsx	 eax, ax
  00c8f	83 f8 03	 cmp	 eax, 3
  00c92	7e 16		 jle	 SHORT $L153264

; 556  : 			m_pBanner->ExecuteScript ( "goto - Veteran" );

  00c94	68 00 00 00 00	 push	 OFFSET FLAT:$SG153265
  00c99	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00c9f	8b 89 b0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+176]
  00ca5	e8 00 00 00 00	 call	 ?ExecuteScript@CSkinObj@@QAEHPBD@Z ; CSkinObj::ExecuteScript
$L153264:

; 559  : 
; 560  :     // If the character select window is open then make this child window 1 pixel smaller
; 561  :     // To remove the black line
; 562  :     if ( g_pCharSelWnd ) {

  00caa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, 0 ; g_pCharSelWnd
  00cb1	74 57		 je	 SHORT $L153266

; 563  :         CRect rRect;

  00cb3	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _rRect$153267[ebp]
  00cb9	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 564  :         GetWindowRect( &rRect );

  00cbe	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR _rRect$153267[ebp]
  00cc4	52		 push	 edx
  00cc5	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00ccb	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 565  :         ScreenToClient( &rRect );

  00cd0	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _rRect$153267[ebp]
  00cd6	50		 push	 eax
  00cd7	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00cdd	e8 00 00 00 00	 call	 ?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::ScreenToClient

; 566  :         rRect.bottom--;

  00ce2	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _rRect$153267[ebp+12]
  00ce8	83 e9 01	 sub	 ecx, 1
  00ceb	89 8d c8 fe ff
	ff		 mov	 DWORD PTR _rRect$153267[ebp+12], ecx

; 567  :         MoveWindow( rRect, false );

  00cf1	6a 00		 push	 0
  00cf3	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _rRect$153267[ebp]
  00cf9	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00cfe	50		 push	 eax
  00cff	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00d05	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::MoveWindow
$L153266:

; 569  : 
; 570  : 	if ( g_pMainPanelWnd ) 

  00d0a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  00d11	74 0b		 je	 SHORT $L153268

; 571  : 		g_pMainPanelWnd->BringTabToTop();

  00d13	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  00d19	e8 00 00 00 00	 call	 ?BringTabToTop@CMainPanelWnd@@QAEXXZ ; CMainPanelWnd::BringTabToTop
$L153268:

; 572  : 
; 573  : 	ShowWindow( SW_SHOW );

  00d1e	6a 05		 push	 5
  00d20	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00d26	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 574  : 
; 575  : 	return created;

  00d2b	8b 55 f0	 mov	 edx, DWORD PTR _created$[ebp]
  00d2e	89 95 54 fe ff
	ff		 mov	 DWORD PTR $T160609[ebp], edx
  00d34	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00d3b	8d 4d e8	 lea	 ecx, DWORD PTR _toonPosn$[ebp]
  00d3e	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00d43	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR $T160609[ebp]

; 576  : }

  00d49	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00d4c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00d53	8b e5		 mov	 esp, ebp
  00d55	5d		 pop	 ebp
  00d56	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L160610:
  00072	8d 4d e8	 lea	 ecx, DWORD PTR _toonPosn$[ebp]
  00075	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0007a	c3		 ret	 0
$L160611:
  0007b	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T160579[ebp]
  00081	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00086	c3		 ret	 0
$L160612:
  00087	8d 4d 94	 lea	 ecx, DWORD PTR _bitmapToon$153212[ebp]
  0008a	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  0008f	c3		 ret	 0
$L160613:
  00090	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR $T160582[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009c	59		 pop	 ecx
  0009d	c3		 ret	 0
$L160614:
  0009e	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T160589[ebp]
  000a4	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  000a9	c3		 ret	 0
$L160615:
  000aa	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapToon$153225[ebp]
  000b0	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  000b5	c3		 ret	 0
$L160616:
  000b6	8b 85 7c fe ff
	ff		 mov	 eax, DWORD PTR $T160592[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c2	59		 pop	 ecx
  000c3	c3		 ret	 0
$L160617:
  000c4	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T160599[ebp]
  000ca	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  000cf	c3		 ret	 0
$L160618:
  000d0	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _bitmapToon$153242[ebp]
  000d6	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  000db	c3		 ret	 0
$L160619:
  000dc	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR $T160602[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e8	59		 pop	 ecx
  000e9	c3		 ret	 0
$L160622:
  000ea	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160621
  000ef	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Create@CLookAt@@QAEHPBD@Z ENDP				; CLookAt::Create
;	COMDAT ??4CSkinObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4CSkinObj@@QAEAAV0@ABV0@@Z PROC NEAR			; CSkinObj::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??4CSkinObj@@QAEAAV0@ABV0@@Z ENDP			; CSkinObj::operator=
_TEXT	ENDS
PUBLIC	??0CLookAtBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@H@Z	; CLookAtBtn::CLookAtBtn
PUBLIC	??0CPVPAttribute@@QAE@VCSkinObj@@PAVCSkinWnd@@_N@Z ; CPVPAttribute::CPVPAttribute
PUBLIC	?get_pIsSelf@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pIsSelf
PUBLIC	?get_pName@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pName
PUBLIC	?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ	; CSCI_CharInfo::get_pTitle
PUBLIC	?get_pProfession@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pProfession
PUBLIC	?get_pBiography@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pBiography
PUBLIC	?get_pLevel@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pLevel
PUBLIC	?get_pStrength@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pStrength
PUBLIC	?get_pDexterity@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pDexterity
PUBLIC	?get_pIntelligence@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pIntelligence
PUBLIC	?get_pEndurance@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pEndurance
PUBLIC	?get_pCarry@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pCarry
PUBLIC	?get_pCarryMax@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pCarryMax
PUBLIC	?get_pExperience@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pExperience
PUBLIC	?get_pBuildPoints@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pBuildPoints
PUBLIC	?get_pArmorRating@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pArmorRating
PUBLIC	?get_pPvp@CSCI_CharInfo@@QAEFXZ			; CSCI_CharInfo::get_pPvp
PUBLIC	?get_pAlignment@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pAlignment
PUBLIC	?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pArmorInfoList
PUBLIC	?get_pWeaponName@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pWeaponName
PUBLIC	?get_pWeaponDamageMin@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pWeaponDamageMin
PUBLIC	?get_pWeaponDamageMax@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pWeaponDamageMax
PUBLIC	?get_pWeaponCondition@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pWeaponCondition
PUBLIC	?get_pAttacksPerRound@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pAttacksPerRound
PUBLIC	?get_pDodgesPerRound@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pDodgesPerRound
PUBLIC	?get_pBlocksPerRound@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pBlocksPerRound
PUBLIC	?get_pAttackDamageMin@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pAttackDamageMin
PUBLIC	?get_pAttackDamageMax@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pAttackDamageMax
PUBLIC	?get_pMovementRate@CSCI_CharInfo@@QAEFXZ	; CSCI_CharInfo::get_pMovementRate
PUBLIC	?get_pSkillArray@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pSkillArray
PUBLIC	?get_pStatusArray@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pStatusArray
PUBLIC	?get_pNPCKills@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pNPCKills
PUBLIC	?get_pPKills@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pPKills
PUBLIC	?get_pMeleeMod@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pMeleeMod
PUBLIC	?get_pSpellMod@CSCI_CharInfo@@QAEFXZ		; CSCI_CharInfo::get_pSpellMod
PUBLIC	__real@4@4005c800000000000000
PUBLIC	?get_pManaDrain@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pManaDrain
PUBLIC	?get_pMeleeArmorPierce@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pMeleeArmorPierce
PUBLIC	?get_pEvilMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pEvilMDM
PUBLIC	?get_pGoodMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pGoodMDM
PUBLIC	?get_pAccountType@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pAccountType
PUBLIC	?get_pBillingDate@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pBillingDate
PUBLIC	?get_pAccountID@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pAccountID
PUBLIC	?get_pCredits@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pCredits
PUBLIC	?get_pCoppers@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pCoppers
PUBLIC	?get_pCastResist@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pCastResist
PUBLIC	?get_pSpellResist@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pSpellResist
PUBLIC	?IsEmpty@CString@@QBEHXZ			; CString::IsEmpty
PUBLIC	??0CSCI_ByteArray@@QAE@G@Z			; CSCI_ByteArray::CSCI_ByteArray
PUBLIC	??0StringID@@QAE@ABVMemID@@@Z			; StringID::StringID
PUBLIC	??DStringID@@QAEPADXZ				; StringID::operator*
PUBLIC	??0StringID@@QAE@ABV0@@Z			; StringID::StringID
PUBLIC	??8@YG_NABVCString@@PBD@Z			; operator==
PUBLIC	??8@YG_NPBDABVCString@@@Z			; operator==
PUBLIC	??0CSCI_ArmorInfo@@QAE@XZ			; CSCI_ArmorInfo::CSCI_ArmorInfo
PUBLIC	??0CSCI_ArmorInfo@@QAE@G@Z			; CSCI_ArmorInfo::CSCI_ArmorInfo
PUBLIC	?get_pType@CSCI_ArmorInfo@@QAEFXZ		; CSCI_ArmorInfo::get_pType
PUBLIC	?get_pRating@CSCI_ArmorInfo@@QAEFXZ		; CSCI_ArmorInfo::get_pRating
PUBLIC	?get_pCondition@CSCI_ArmorInfo@@QAEFXZ		; CSCI_ArmorInfo::get_pCondition
PUBLIC	??2CObject@@SGPAXI@Z				; CObject::operator new
PUBLIC	??0CSCI_List@@QAE@G@Z				; CSCI_List::CSCI_List
PUBLIC	??0CSCI_LongInt@@QAE@G@Z			; CSCI_LongInt::CSCI_LongInt
PUBLIC	?get_nValue@CSCI_LongInt@@QAEHXZ		; CSCI_LongInt::get_nValue
PUBLIC	??0CSCI_LongInt@@QAE@ABV0@@Z			; CSCI_LongInt::CSCI_LongInt
PUBLIC	?LimitText@CRichEditCtrl@@QAEXJ@Z		; CRichEditCtrl::LimitText
EXTRN	__imp__localtime:NEAR
EXTRN	?at@CSCI_Array@@QAEFF@Z:NEAR			; CSCI_Array::at
EXTRN	??4CString@@QAEABV0@PBD@Z:NEAR			; CString::operator=
EXTRN	?Left@CString@@QBE?AV1@H@Z:NEAR			; CString::Left
EXTRN	?Right@CString@@QBE?AV1@H@Z:NEAR		; CString::Right
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	?Find@CString@@QBEHPBDH@Z:NEAR			; CString::Find
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	?at@CSCI_List@@QAEFF@Z:NEAR			; CSCI_List::at
EXTRN	?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z:NEAR ; CSkinWnd::MakeSkinCtrl
EXTRN	?GetSkinName@CSkinWnd@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:NEAR ; CSkinWnd::GetSkinName
EXTRN	?Fatal@MsgMgr@@QAAXPADZZ:NEAR			; MsgMgr::Fatal
EXTRN	__imp__atoi:NEAR
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
EXTRN	?SetText@CSkinEdit@@QAEHPBD@Z:NEAR		; CSkinEdit::SetText
EXTRN	?GetName@CSkinObj@@QAE?AVCString@@XZ:NEAR	; CSkinObj::GetName
EXTRN	?SetText@CSkinObj@@QAEHAAVCString@@@Z:NEAR	; CSkinObj::SetText
EXTRN	?SetText@CSkinObj@@QAAHPADZZ:NEAR		; CSkinObj::SetText
EXTRN	?SetHint@CSkinObj@@QAEHPBD@Z:NEAR		; CSkinObj::SetHint
EXTRN	?SetFocus@CWnd@@QAEPAV1@XZ:NEAR			; CWnd::SetFocus
EXTRN	?SetColor@CSkinObj@@QAEHK@Z:NEAR		; CSkinObj::SetColor
EXTRN	??0CSkinChangeButton@@QAE@VCSkinObj@@PAVCSkinWnd@@H@Z:NEAR ; CSkinChangeButton::CSkinChangeButton
EXTRN	??0CSkinCtrl@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z:NEAR ; CSkinCtrl::CSkinCtrl
_DATA	SEGMENT
	ORG $+1
$SG153283 DB	'_', 00H
	ORG $+2
$SG153285 DB	'ed', 00H
	ORG $+1
$SG153303 DB	'priv', 00H
	ORG $+3
$SG153311 DB	'ef', 00H
	ORG $+1
$SG153337 DB	'ref', 00H
$SG153352 DB	'lvl', 00H
$SG153361 DB	'%d', 00H
	ORG $+1
$SG153363 DB	'???', 00H
$SG153366 DB	'btn', 00H
$SG153371 DB	'There is an invalid control in this User Skin ''%s''.  N'
	DB	'ame = ''%s''. Can not be a field without a 1 digit number or '
	DB	'a field with the number 0.', 00H
$SG153379 DB	'tf', 00H
	ORG $+1
$SG153396 DB	'There is an invalid control in this User Skin ''%s''.  N'
	DB	'ame = ''%s''. Can not be a field without a 3 digit number or '
	DB	'a field with the number 000.', 00H
	ORG $+2
$SG153423 DB	'%s', 00H
	ORG $+1
$SG153426 DB	'%s', 00H
	ORG $+1
$SG153429 DB	'%s', 00H
	ORG $+1
$SG153432 DB	'%s', 00H
	ORG $+1
$SG153436 DB	'Demonic', 00H
$SG153439 DB	'Evil', 00H
	ORG $+3
$SG153442 DB	'Malevolent', 00H
	ORG $+1
$SG153445 DB	'Malignant', 00H
	ORG $+2
$SG153448 DB	'Neutral', 00H
$SG153451 DB	'Benign', 00H
	ORG $+1
$SG153454 DB	'Benevolent', 00H
	ORG $+1
$SG153457 DB	'Good', 00H
	ORG $+3
$SG153459 DB	'Beatific', 00H
	ORG $+3
$SG153461 DB	'%d', 00H
	ORG $+1
$SG153463 DB	'%d%%', 00H
	ORG $+3
$SG153466 DB	'%s', 00H
	ORG $+1
$SG153469 DB	'%s', 00H
	ORG $+1
$SG153471 DB	'%d%%', 00H
	ORG $+3
$SG153474 DB	'%d', 00H
	ORG $+1
$SG153476 DB	'%d', 00H
	ORG $+1
$SG153478 DB	'%d', 00H
	ORG $+1
$SG153480 DB	'%d', 00H
	ORG $+1
$SG153482 DB	'%d - %d', 00H
$SG153484 DB	'%d%%', 00H
	ORG $+3
$SG153487 DB	'%d', 00H
	ORG $+1
$SG153490 DB	'%d', 00H
	ORG $+1
$SG153495 DB	'Short Sword', 00H
$SG153502 DB	'%d', 00H
	ORG $+1
$SG153507 DB	'Long Sword', 00H
	ORG $+1
$SG153514 DB	'%d', 00H
	ORG $+1
$SG153519 DB	'2-Handed Sword', 00H
	ORG $+1
$SG153526 DB	'%d', 00H
	ORG $+1
$SG153531 DB	'Dagger', 00H
	ORG $+1
$SG153538 DB	'%d', 00H
	ORG $+1
$SG153543 DB	'Axe', 00H
$SG153550 DB	'%d', 00H
	ORG $+1
$SG153555 DB	'Club', 00H
	ORG $+3
$SG153562 DB	'%d', 00H
	ORG $+1
$SG153567 DB	'Mace', 00H
	ORG $+3
$SG153574 DB	'%d', 00H
	ORG $+1
$SG153579 DB	'Unarmed Combat', 00H
	ORG $+1
$SG153586 DB	'%d', 00H
	ORG $+1
$SG153591 DB	'Throwing', 00H
	ORG $+3
$SG153598 DB	'%d', 00H
	ORG $+1
$SG153603 DB	'Acrobatics', 00H
	ORG $+1
$SG153610 DB	'%d', 00H
	ORG $+1
$SG153615 DB	'Maul', 00H
	ORG $+3
$SG153622 DB	'%d', 00H
	ORG $+1
$SG153627 DB	'Sorcery', 00H
$SG153634 DB	'%d', 00H
	ORG $+1
$SG153639 DB	'Elementalism', 00H
	ORG $+3
$SG153646 DB	'%d', 00H
	ORG $+1
$SG153651 DB	'Mysticism', 00H
	ORG $+2
$SG153658 DB	'%d', 00H
	ORG $+1
$SG153663 DB	'Thaumaturgy', 00H
$SG153670 DB	'%d', 00H
	ORG $+1
$SG153675 DB	'Necromancy', 00H
	ORG $+1
$SG153682 DB	'%d', 00H
	ORG $+1
$SG153687 DB	'Theurgism', 00H
	ORG $+2
$SG153694 DB	'%d', 00H
	ORG $+1
$SG153699 DB	'Alchemy', 00H
$SG153706 DB	'%d', 00H
	ORG $+1
$SG153711 DB	'Weaponsmith', 00H
$SG153718 DB	'%d', 00H
	ORG $+1
$SG153723 DB	'Armorsmith', 00H
	ORG $+1
$SG153730 DB	'%d', 00H
	ORG $+1
$SG153735 DB	'Pickpocketing', 00H
	ORG $+2
$SG153742 DB	'%d', 00H
	ORG $+1
$SG153747 DB	'Disarm Traps', 00H
	ORG $+3
$SG153754 DB	'%d', 00H
	ORG $+1
$SG153759 DB	'Lockpicking', 00H
$SG153766 DB	'%d', 00H
	ORG $+1
$SG153771 DB	'Meditation', 00H
	ORG $+1
$SG153778 DB	'%d', 00H
	ORG $+1
$SG153783 DB	'Critical Strike', 00H
$SG153790 DB	'%d', 00H
	ORG $+1
$SG153795 DB	'Shield Usage', 00H
	ORG $+3
$SG153802 DB	'%d', 00H
	ORG $+1
$SG153811 DB	'%s', 00H
	ORG $+1
$SG153820 DB	'%d', 00H
	ORG $+1
$SG153826 DB	'%d%%', 00H
	ORG $+3
$SG153835 DB	'%s', 00H
	ORG $+1
$SG153844 DB	'%d', 00H
	ORG $+1
$SG153850 DB	'%d%%', 00H
	ORG $+3
$SG153859 DB	'%s', 00H
	ORG $+1
$SG153868 DB	'%d', 00H
	ORG $+1
$SG153874 DB	'%d%%', 00H
	ORG $+3
$SG153883 DB	'%s', 00H
	ORG $+1
$SG153892 DB	'%d', 00H
	ORG $+1
$SG153898 DB	'%d%%', 00H
	ORG $+3
$SG153907 DB	'%s', 00H
	ORG $+1
$SG153916 DB	'%d', 00H
	ORG $+1
$SG153922 DB	'%d%%', 00H
	ORG $+3
$SG153931 DB	'%s', 00H
	ORG $+1
$SG153940 DB	'%d', 00H
	ORG $+1
$SG153946 DB	'%d%%', 00H
	ORG $+3
$SG153955 DB	'%s', 00H
	ORG $+1
$SG153964 DB	'%d', 00H
	ORG $+1
$SG153970 DB	'%d%%', 00H
	ORG $+3
$SG153975 DB	'%s', 00H
	ORG $+1
$SG153980 DB	'%d-%d', 00H
	ORG $+2
$SG153982 DB	'%d%%', 00H
	ORG $+3
$SG153985 DB	'%s', 00H
	ORG $+1
$SG153990 DB	'%s %02d %04d', 00H
	ORG $+3
$SG153993 DB	'%d', 00H
	ORG $+1
$SG153999 DB	'%s %02d %04d', 00H
	ORG $+3
$SG154002 DB	'%s', 00H
	ORG $+1
$SG154005 DB	'%d', 00H
	ORG $+1
$SG154010 DB	'%d', 00H
	ORG $+1
$SG154015 DB	'Max Level', 00H
	ORG $+2
$SG154017 DB	'%d', 00H
	ORG $+1
$SG154019 DB	'%d', 00H
	ORG $+1
$SG154025 DB	'%d / %d', 00H
$SG154028 DB	'%d / %d %d%%', 00H
	ORG $+3
$SG154033 DB	'%f', 00H
	ORG $+1
$SG154036 DB	'%s', 00H
	ORG $+1
$SG154041 DB	'Broadsword', 00H
	ORG $+1
$SG154048 DB	'%d', 00H
	ORG $+1
$SG154056 DB	'There is an invalid control in this User Skin ''%s''.  N'
	DB	'ame = ''%s''. Can not be a field without a 3 digit number or '
	DB	'a field with the number 000.', 00H
	ORG $+2
$SG154065 DB	'%s', 00H
	ORG $+1
$SG154074 DB	'%d', 00H
	ORG $+1
$SG154080 DB	'%d%%', 00H
	ORG $+3
$SG154089 DB	'%s', 00H
	ORG $+1
$SG154098 DB	'%d', 00H
	ORG $+1
$SG154104 DB	'%d%%', 00H
	ORG $+3
$SG154113 DB	'%s', 00H
	ORG $+1
$SG154122 DB	'%d', 00H
	ORG $+1
$SG154128 DB	'%d%%', 00H
	ORG $+3
$SG154137 DB	'%s', 00H
	ORG $+1
$SG154146 DB	'%d', 00H
	ORG $+1
$SG154152 DB	'%d%%', 00H
	ORG $+3
$SG154161 DB	'%s', 00H
	ORG $+1
$SG154170 DB	'%d', 00H
	ORG $+1
$SG154176 DB	'%d%%', 00H
	ORG $+3
$SG154185 DB	'%s', 00H
	ORG $+1
$SG154194 DB	'%d', 00H
	ORG $+1
$SG154200 DB	'%d%%', 00H
	ORG $+3
$SG154209 DB	'%s', 00H
	ORG $+1
$SG154218 DB	'%d', 00H
	ORG $+1
$SG154224 DB	'%d%%', 00H
	ORG $+3
$SG154229 DB	'%s', 00H
	ORG $+1
$SG154234 DB	'%d-%d', 00H
	ORG $+2
$SG154236 DB	'%d%%', 00H
	ORG $+3
$SG154239 DB	'at', 00H
	ORG $+1
$SG154248 DB	'inc', 00H
$SG154259 DB	'dec', 00H
_DATA	ENDS
;	COMDAT __real@4@4005c800000000000000
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\LookAt.cpp
CONST	SEGMENT
__real@4@4005c800000000000000 DD 042c80000r	; 100
CONST	ENDS
xdata$x	SEGMENT
$T161015 DD	019930520H
	DD	019H
	DD	FLAT:$T161022
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161022 DD	0ffffffffH
	DD	FLAT:$L160976
	DD	00H
	DD	FLAT:$L160977
	DD	01H
	DD	FLAT:$L160978
	DD	02H
	DD	FLAT:$L160979
	DD	02H
	DD	FLAT:$L160981
	DD	02H
	DD	FLAT:$L160983
	DD	02H
	DD	FLAT:$L160985
	DD	02H
	DD	FLAT:$L160987
	DD	02H
	DD	FLAT:$L160989
	DD	02H
	DD	FLAT:$L160991
	DD	02H
	DD	FLAT:$L160993
	DD	02H
	DD	FLAT:$L160994
	DD	02H
	DD	FLAT:$L160995
	DD	02H
	DD	FLAT:$L160996
	DD	02H
	DD	FLAT:$L160998
	DD	02H
	DD	FLAT:$L161000
	DD	02H
	DD	FLAT:$L161001
	DD	02H
	DD	FLAT:$L161002
	DD	02H
	DD	FLAT:$L161003
	DD	02H
	DD	FLAT:$L161004
	DD	02H
	DD	FLAT:$L161005
	DD	02H
	DD	FLAT:$L161006
	DD	02H
	DD	FLAT:$L161007
	DD	02H
	DD	FLAT:$L161009
	DD	02H
	DD	FLAT:$L161011
xdata$x	ENDS
_TEXT	SEGMENT
$T160768 = -604
$T160769 = -608
$T160770 = -612
$T160771 = -616
$T160772 = -620
$T160773 = -624
$T160774 = -628
$T160775 = -632
$T160776 = -636
$T160777 = -640
$T160778 = -644
$T160779 = -648
$T160780 = -652
$T160781 = -656
$T160782 = -660
$T160783 = -664
$T160784 = -668
$T160785 = -672
$T160786 = -676
$T160787 = -680
$T160788 = -684
$T160789 = -688
$T160790 = -692
$T160791 = -696
$T160792 = -700
$T160793 = -704
$T160794 = -708
$T160795 = -712
$T160796 = -716
$T160797 = -720
$T160798 = -724
$T160799 = -728
$T160800 = -732
$T160801 = -736
$T160802 = -740
$T160803 = -744
$T160804 = -748
$T160805 = -752
$T160806 = -756
$T160807 = -760
$T160808 = -764
$T160809 = -768
$T160810 = -772
$T160811 = -776
$T160812 = -780
$T160813 = -784
$T160814 = -788
$T160815 = -792
$T160816 = -796
$T160817 = -800
$T160818 = -804
$T160819 = -808
$T160820 = -812
$T160821 = -816
$T160822 = -820
$T160823 = -824
$T160824 = -828
$T160825 = -832
$T160826 = -836
$T160827 = -840
$T160828 = -844
$T160829 = -848
$T160830 = -852
$T160831 = -856
$T160832 = -860
$T160833 = -864
$T160834 = -868
$T160835 = -872
$T160836 = -876
$T160837 = -880
$T160838 = -884
$T160839 = -888
$T160840 = -892
$T160841 = -896
$T160842 = -900
$T160843 = -904
$T160844 = -908
$T160845 = -912
$T160846 = -916
$T160847 = -920
$T160848 = -924
$T160849 = -928
$T160850 = -932
$T160851 = -936
$T160852 = -940
$T160853 = -944
$T160854 = -948
$T160855 = -952
$T160856 = -956
$T160857 = -960
$T160858 = -964
$T160859 = -968
$T160860 = -972
$T160861 = -976
$T160862 = -980
$T160863 = -984
$T160864 = -988
$T160865 = -992
$T160866 = -996
$T160867 = -1000
$T160868 = -1004
$T160869 = -1008
$T160870 = -1012
$T160871 = -1016
$T160872 = -1020
$T160873 = -1024
$T160874 = -1028
$T160875 = -1032
$T160876 = -1036
$T160877 = -1040
$T160878 = -1044
$T160879 = -1048
$T160880 = -1064
$T160881 = -1068
$T160882 = -1072
$T160883 = -1076
$T160884 = -1080
$T160885 = -1084
$T160886 = -1088
$T160887 = -1092
$T160888 = -1096
$T160889 = -1100
$T160890 = -1104
$T160891 = -1108
$T160892 = -1112
$T160893 = -1116
$T160894 = -1120
$T160895 = -1124
$T160896 = -1128
$T160897 = -1132
$T160898 = -1136
$T160899 = -1140
$T160900 = -1144
$T160901 = -1148
$T160902 = -1152
$T160903 = -1156
$T160904 = -1160
$T160905 = -1164
$T160906 = -1168
$T160907 = -1172
$T160908 = -1176
$T160909 = -1180
$T160910 = -1184
$T160911 = -1188
$T160912 = -1192
$T160913 = -1196
$T160914 = -1200
$T160915 = -1204
$T160916 = -1208
$T160917 = -1212
$T160918 = -1216
$T160919 = -1220
$T160920 = -1224
$T160921 = -1228
$T160922 = -1232
$T160923 = -1236
$T160924 = -1240
$T160925 = -1244
$T160926 = -1248
$T160927 = -1252
$T160928 = -1256
$T160929 = -1260
$T160930 = -1264
$T160931 = -1268
$T160932 = -1272
$T160933 = -1276
$T160934 = -1280
$T160935 = -1284
$T160936 = -1288
$T160937 = -1292
$T160938 = -1296
$T160939 = -1300
$T160940 = -1304
$T160941 = -1308
$T160942 = -1312
$T160943 = -1316
$T160944 = -1320
$T160945 = -1324
$T160946 = -1328
$T160947 = -1332
$T160948 = -1336
$T160949 = -1340
$T160950 = -1344
$T160951 = -1348
$T160952 = -1352
$T160953 = -1356
$T160954 = -1360
$T160955 = -1364
$T160956 = -1368
$T160957 = -1372
$T160958 = -1376
$T160959 = -1380
$T160962 = -1384
$T160963 = -1388
$T160964 = -1392
$T160967 = -1396
$T160968 = -1400
$T160969 = -1404
$T160970 = -1408
$T160973 = -1412
$T160974 = -1416
$T160975 = -1420
__$EHRec$ = -12
_expireTime$153987 = -80
_expire$153989 = -76
_expireTime$153995 = -88
_expire$153998 = -84
_nNextLevel$154012 = -92
_pBtn$154249 = -96
_pBtn$154260 = -100
_obj$ = 8
_this$ = -1424
_name$ = -16
_id$ = -20
_pTemp$153323 = -24
_pName$153338 = -28
_pEdit$153353 = -32
_sLevel$153359 = -36
_nPos$153367 = -40
_pArmor$153380 = -52
_pEdit$153381 = -44
_nControl$153387 = -48
_nPos$153399 = -64
_nText$153400 = -56
_pList$153401 = -60
_nValue$153405 = -68
_nAlign$153434 = -72
$T160627 = -104
$T160628 = -108
$T160629 = -112
$T160632 = -116
$T160633 = -120
$T160634 = -124
$T160637 = -128
$T160638 = -132
$T160639 = -136
$T160642 = -140
$T160643 = -144
$T160644 = -148
$T160645 = -152
$T160648 = -156
$T160649 = -160
$T160650 = -164
$T160653 = -168
$T160654 = -172
$T160655 = -176
$T160658 = -180
$T160659 = -184
$T160660 = -188
$T160663 = -192
$T160664 = -196
$T160665 = -200
$T160666 = -204
$T160667 = -208
$T160668 = -212
$T160669 = -216
$T160670 = -220
$T160673 = -224
$T160674 = -228
$T160675 = -232
$T160676 = -236
$T160677 = -240
$T160678 = -244
$T160679 = -248
$T160680 = -252
$T160683 = -256
$T160684 = -260
$T160685 = -276
$T160686 = -280
$T160687 = -284
$T160688 = -288
$T160689 = -292
$T160692 = -296
$T160693 = -300
$T160694 = -304
$T160697 = -308
$T160698 = -324
$T160699 = -328
$T160700 = -332
$T160701 = -336
$T160702 = -340
$T160703 = -344
$T160704 = -348
$T160705 = -352
$T160706 = -356
$T160707 = -360
$T160708 = -364
$T160709 = -368
$T160710 = -372
$T160711 = -376
$T160712 = -380
$T160713 = -384
$T160714 = -388
$T160715 = -392
$T160716 = -396
$T160717 = -400
$T160718 = -404
$T160719 = -408
$T160720 = -412
$T160721 = -416
$T160722 = -420
$T160723 = -424
$T160724 = -428
$T160725 = -432
$T160726 = -436
$T160727 = -440
$T160728 = -444
$T160729 = -448
$T160730 = -452
$T160731 = -456
$T160732 = -460
$T160733 = -464
$T160734 = -468
$T160735 = -472
$T160736 = -476
$T160737 = -480
$T160738 = -484
$T160739 = -488
$T160740 = -492
$T160741 = -496
$T160742 = -500
$T160743 = -504
$T160744 = -508
$T160745 = -512
$T160746 = -516
$T160747 = -520
$T160748 = -524
$T160749 = -528
$T160750 = -532
$T160751 = -536
$T160752 = -540
$T160753 = -544
$T160754 = -548
$T160755 = -552
$T160756 = -556
$T160757 = -560
$T160758 = -564
$T160759 = -568
$T160760 = -572
$T160761 = -576
$T160762 = -580
$T160763 = -584
$T160764 = -588
$T160765 = -592
$T160766 = -596
$T160767 = -600
?MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z PROC NEAR ; CLookAt::MakeSkinCtrl

; 579  : CSkinCtrl *CLookAt::MakeSkinCtrl ( CSkinObj obj ) {

  00d59	55		 push	 ebp
  00d5a	8b ec		 mov	 ebp, esp
  00d5c	6a ff		 push	 -1
  00d5e	68 00 00 00 00	 push	 $L161018
  00d63	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00d69	50		 push	 eax
  00d6a	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00d71	81 ec 84 06 00
	00		 sub	 esp, 1668		; 00000684H
  00d77	56		 push	 esi
  00d78	89 8d 70 fa ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  00d7e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 580  : 	static int nEditID = 666;
; 581  : 
; 582  : 	// the type of the control is specified by the left characters of the name up to the _
; 583  : 	CString name = obj.GetName();

  00d85	8d 45 f0	 lea	 eax, DWORD PTR _name$[ebp]
  00d88	50		 push	 eax
  00d89	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00d8c	e8 00 00 00 00	 call	 ?GetName@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetName
  00d91	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 584  : 	CString id = name.Left ( name.Find ( "_", 0 ) );

  00d95	6a 00		 push	 0
  00d97	68 00 00 00 00	 push	 OFFSET FLAT:$SG153283
  00d9c	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  00d9f	e8 00 00 00 00	 call	 ?Find@CString@@QBEHPBDH@Z ; CString::Find
  00da4	50		 push	 eax
  00da5	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  00da8	51		 push	 ecx
  00da9	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  00dac	e8 00 00 00 00	 call	 ?Left@CString@@QBE?AV1@H@Z ; CString::Left
  00db1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 585  : 
; 586  : 	// Biography
; 587  : 	if ( "ed" == id ) {

  00db5	8d 55 ec	 lea	 edx, DWORD PTR _id$[ebp]
  00db8	52		 push	 edx
  00db9	68 00 00 00 00	 push	 OFFSET FLAT:$SG153285
  00dbe	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  00dc3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00dc8	85 c0		 test	 eax, eax
  00dca	0f 84 16 02 00
	00		 je	 $L153284

; 588  : 		if ( m_pChar.get_pIsSelf() ) {

  00dd0	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00dd5	e8 00 00 00 00	 call	 ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pIsSelf
  00dda	0f bf c0	 movsx	 eax, ax
  00ddd	85 c0		 test	 eax, eax
  00ddf	0f 84 bd 00 00
	00		 je	 $L153286

; 589  : 			m_pBio = new CBioLine ( obj, this, nEditID++, CSkinEdit::MULTILINE | CSkinEdit::TABSTOP, false, true );

  00de5	68 d8 00 00 00	 push	 216			; 000000d8H
  00dea	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00def	89 45 94	 mov	 DWORD PTR $T160628[ebp], eax
  00df2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00df6	83 7d 94 00	 cmp	 DWORD PTR $T160628[ebp], 0
  00dfa	74 65		 je	 SHORT $L160630
  00dfc	6a 00		 push	 0
  00dfe	6a 01		 push	 1
  00e00	6a 00		 push	 0
  00e02	68 04 00 01 00	 push	 65540			; 00010004H
  00e07	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA
  00e0d	89 8d 6c fa ff
	ff		 mov	 DWORD PTR -1428+[ebp], ecx
  00e13	8b 95 6c fa ff
	ff		 mov	 edx, DWORD PTR -1428+[ebp]
  00e19	52		 push	 edx
  00e1a	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00e20	50		 push	 eax
  00e21	83 ec 08	 sub	 esp, 8
  00e24	8b cc		 mov	 ecx, esp
  00e26	89 65 90	 mov	 DWORD PTR $T160629[ebp], esp
  00e29	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  00e2c	52		 push	 edx
  00e2d	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00e32	89 85 68 fa ff
	ff		 mov	 DWORD PTR -1432+[ebp], eax
  00e38	a1 00 00 00 00	 mov	 eax, DWORD PTR _?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA
  00e3d	83 c0 01	 add	 eax, 1
  00e40	a3 00 00 00 00	 mov	 DWORD PTR _?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA, eax
  00e45	8b 4d 94	 mov	 ecx, DWORD PTR $T160628[ebp]
  00e48	e8 00 00 00 00	 call	 ??0CBioLine@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ; CBioLine::CBioLine
  00e4d	89 85 64 fa ff
	ff		 mov	 DWORD PTR -1436+[ebp], eax
  00e53	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR -1436+[ebp]
  00e59	89 8d 60 fa ff
	ff		 mov	 DWORD PTR -1440+[ebp], ecx
  00e5f	eb 0a		 jmp	 SHORT $L160631
$L160630:
  00e61	c7 85 60 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1440+[ebp], 0
$L160631:
  00e6b	8b 95 60 fa ff
	ff		 mov	 edx, DWORD PTR -1440+[ebp]
  00e71	89 55 98	 mov	 DWORD PTR $T160627[ebp], edx
  00e74	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00e78	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00e7e	8b 4d 98	 mov	 ecx, DWORD PTR $T160627[ebp]
  00e81	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx

; 590  : 			m_pBio->LimitText( 511 );

  00e87	68 ff 01 00 00	 push	 511			; 000001ffH
  00e8c	8b 95 70 fa ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00e92	8b 8a a8 00 00
	00		 mov	 ecx, DWORD PTR [edx+168]
  00e98	e8 00 00 00 00	 call	 ?LimitText@CRichEditCtrl@@QAEXJ@Z ; CRichEditCtrl::LimitText

; 591  : 		} else {

  00e9d	e9 a3 00 00 00	 jmp	 $L153292
$L153286:

; 592  : 			m_pBio = new CBioLine ( obj, this, nEditID++, CSkinEdit::READONLY | CSkinEdit::MULTILINE, false, true );

  00ea2	68 d8 00 00 00	 push	 216			; 000000d8H
  00ea7	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00eac	89 45 88	 mov	 DWORD PTR $T160633[ebp], eax
  00eaf	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00eb3	83 7d 88 00	 cmp	 DWORD PTR $T160633[ebp], 0
  00eb7	74 66		 je	 SHORT $L160635
  00eb9	6a 00		 push	 0
  00ebb	6a 01		 push	 1
  00ebd	6a 00		 push	 0
  00ebf	68 04 08 00 00	 push	 2052			; 00000804H
  00ec4	a1 00 00 00 00	 mov	 eax, DWORD PTR _?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA
  00ec9	89 85 5c fa ff
	ff		 mov	 DWORD PTR -1444+[ebp], eax
  00ecf	8b 8d 5c fa ff
	ff		 mov	 ecx, DWORD PTR -1444+[ebp]
  00ed5	51		 push	 ecx
  00ed6	8b 95 70 fa ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00edc	52		 push	 edx
  00edd	83 ec 08	 sub	 esp, 8
  00ee0	8b cc		 mov	 ecx, esp
  00ee2	89 65 84	 mov	 DWORD PTR $T160634[ebp], esp
  00ee5	8d 45 08	 lea	 eax, DWORD PTR _obj$[ebp]
  00ee8	50		 push	 eax
  00ee9	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00eee	89 85 58 fa ff
	ff		 mov	 DWORD PTR -1448+[ebp], eax
  00ef4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA
  00efa	83 c1 01	 add	 ecx, 1
  00efd	89 0d 00 00 00
	00		 mov	 DWORD PTR _?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA, ecx
  00f03	8b 4d 88	 mov	 ecx, DWORD PTR $T160633[ebp]
  00f06	e8 00 00 00 00	 call	 ??0CBioLine@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ; CBioLine::CBioLine
  00f0b	89 85 54 fa ff
	ff		 mov	 DWORD PTR -1452+[ebp], eax
  00f11	8b 95 54 fa ff
	ff		 mov	 edx, DWORD PTR -1452+[ebp]
  00f17	89 95 50 fa ff
	ff		 mov	 DWORD PTR -1456+[ebp], edx
  00f1d	eb 0a		 jmp	 SHORT $L160636
$L160635:
  00f1f	c7 85 50 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1456+[ebp], 0
$L160636:
  00f29	8b 85 50 fa ff
	ff		 mov	 eax, DWORD PTR -1456+[ebp]
  00f2f	89 45 8c	 mov	 DWORD PTR $T160632[ebp], eax
  00f32	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00f36	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f3c	8b 55 8c	 mov	 edx, DWORD PTR $T160632[ebp]
  00f3f	89 91 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], edx
$L153292:

; 594  : 
; 595  : 		m_pBio->SetText( *((StringID) m_pChar.get_pBiography()) );

  00f45	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T160638[ebp]
  00f4b	50		 push	 eax
  00f4c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  00f51	e8 00 00 00 00	 call	 ?get_pBiography@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pBiography
  00f56	50		 push	 eax
  00f57	8d 4d 80	 lea	 ecx, DWORD PTR $T160637[ebp]
  00f5a	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  00f5f	8b c8		 mov	 ecx, eax
  00f61	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  00f66	50		 push	 eax
  00f67	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f6d	8b 89 a8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+168]
  00f73	e8 00 00 00 00	 call	 ?SetText@CSkinEdit@@QAEHPBD@Z ; CSkinEdit::SetText

; 596  : 		return m_pBio;

  00f78	8b 95 70 fa ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00f7e	83 ba a8 00 00
	00 00		 cmp	 DWORD PTR [edx+168], 0
  00f85	74 17		 je	 SHORT $L160640
  00f87	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00f8d	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00f93	83 c1 60	 add	 ecx, 96			; 00000060H
  00f96	89 8d 4c fa ff
	ff		 mov	 DWORD PTR -1460+[ebp], ecx
  00f9c	eb 0a		 jmp	 SHORT $L160641
$L160640:
  00f9e	c7 85 4c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1460+[ebp], 0
$L160641:
  00fa8	8b 95 4c fa ff
	ff		 mov	 edx, DWORD PTR -1460+[ebp]
  00fae	89 95 78 ff ff
	ff		 mov	 DWORD PTR $T160639[ebp], edx
  00fb4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00fb8	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  00fbb	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00fc0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00fc4	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  00fc7	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00fcc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00fd3	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00fd6	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00fdb	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T160639[ebp]
  00fe1	e9 8a 40 00 00	 jmp	 $L153276
$L153284:

; 598  : 
; 599  : 	// Privledge banner
; 600  : 	if ("priv" == id ) {

  00fe6	8d 45 ec	 lea	 eax, DWORD PTR _id$[ebp]
  00fe9	50		 push	 eax
  00fea	68 00 00 00 00	 push	 OFFSET FLAT:$SG153303
  00fef	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  00ff4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00ff9	85 c0		 test	 eax, eax
  00ffb	0f 84 c7 00 00
	00		 je	 $L153302

; 601  : 		return m_pBanner = new CSkinCtrl( obj, this );

  01001	6a 14		 push	 20			; 00000014H
  01003	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01008	83 c4 04	 add	 esp, 4
  0100b	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T160644[ebp], eax
  01011	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  01015	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR $T160644[ebp], 0
  0101c	74 40		 je	 SHORT $L160646
  0101e	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01024	51		 push	 ecx
  01025	83 ec 08	 sub	 esp, 8
  01028	8b cc		 mov	 ecx, esp
  0102a	89 a5 68 ff ff
	ff		 mov	 DWORD PTR $T160645[ebp], esp
  01030	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  01033	52		 push	 edx
  01034	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01039	89 85 48 fa ff
	ff		 mov	 DWORD PTR -1464+[ebp], eax
  0103f	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR $T160644[ebp]
  01045	e8 00 00 00 00	 call	 ??0CSkinCtrl@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinCtrl::CSkinCtrl
  0104a	89 85 44 fa ff
	ff		 mov	 DWORD PTR -1468+[ebp], eax
  01050	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR -1468+[ebp]
  01056	89 85 40 fa ff
	ff		 mov	 DWORD PTR -1472+[ebp], eax
  0105c	eb 0a		 jmp	 SHORT $L160647
$L160646:
  0105e	c7 85 40 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1472+[ebp], 0
$L160647:
  01068	8b 8d 40 fa ff
	ff		 mov	 ecx, DWORD PTR -1472+[ebp]
  0106e	89 8d 70 ff ff
	ff		 mov	 DWORD PTR $T160643[ebp], ecx
  01074	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01078	8b 95 70 fa ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0107e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T160643[ebp]
  01084	89 82 b0 00 00
	00		 mov	 DWORD PTR [edx+176], eax
  0108a	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T160643[ebp]
  01090	89 8d 74 ff ff
	ff		 mov	 DWORD PTR $T160642[ebp], ecx
  01096	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0109a	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0109d	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  010a2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  010a6	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  010a9	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  010ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  010b5	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  010b8	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  010bd	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T160642[ebp]
  010c3	e9 a8 3f 00 00	 jmp	 $L153276
$L153302:

; 603  : 
; 604  : 	// handle the edit fields (Title)
; 605  : 	if ( "ef" == id ) {

  010c8	8d 55 ec	 lea	 edx, DWORD PTR _id$[ebp]
  010cb	52		 push	 edx
  010cc	68 00 00 00 00	 push	 OFFSET FLAT:$SG153311
  010d1	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  010d6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  010db	85 c0		 test	 eax, eax
  010dd	0f 84 d0 02 00
	00		 je	 $L153322

; 606  : 		if ( m_pChar.get_pIsSelf() ) {

  010e3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  010e8	e8 00 00 00 00	 call	 ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pIsSelf
  010ed	0f bf c0	 movsx	 eax, ax
  010f0	85 c0		 test	 eax, eax
  010f2	0f 84 a2 01 00
	00		 je	 $L153312

; 607  : 			m_pTitle = new CSkinEdit ( obj, this, nEditID++, CSkinEdit::TABSTOP | ES_AUTOHSCROLL, false, true );

  010f8	68 d8 00 00 00	 push	 216			; 000000d8H
  010fd	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  01102	89 85 60 ff ff
	ff		 mov	 DWORD PTR $T160649[ebp], eax
  01108	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0110c	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR $T160649[ebp], 0
  01113	74 6b		 je	 SHORT $L160651
  01115	6a 00		 push	 0
  01117	6a 01		 push	 1
  01119	6a 00		 push	 0
  0111b	68 80 00 01 00	 push	 65664			; 00010080H
  01120	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA
  01126	89 8d 3c fa ff
	ff		 mov	 DWORD PTR -1476+[ebp], ecx
  0112c	8b 95 3c fa ff
	ff		 mov	 edx, DWORD PTR -1476+[ebp]
  01132	52		 push	 edx
  01133	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01139	50		 push	 eax
  0113a	83 ec 08	 sub	 esp, 8
  0113d	8b cc		 mov	 ecx, esp
  0113f	89 a5 5c ff ff
	ff		 mov	 DWORD PTR $T160650[ebp], esp
  01145	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  01148	52		 push	 edx
  01149	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0114e	89 85 38 fa ff
	ff		 mov	 DWORD PTR -1480+[ebp], eax
  01154	a1 00 00 00 00	 mov	 eax, DWORD PTR _?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA
  01159	83 c0 01	 add	 eax, 1
  0115c	a3 00 00 00 00	 mov	 DWORD PTR _?nEditID@?1??MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z@4HA, eax
  01161	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR $T160649[ebp]
  01167	e8 00 00 00 00	 call	 ??0CSkinEdit@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ; CSkinEdit::CSkinEdit
  0116c	89 85 34 fa ff
	ff		 mov	 DWORD PTR -1484+[ebp], eax
  01172	8b 8d 34 fa ff
	ff		 mov	 ecx, DWORD PTR -1484+[ebp]
  01178	89 8d 30 fa ff
	ff		 mov	 DWORD PTR -1488+[ebp], ecx
  0117e	eb 0a		 jmp	 SHORT $L160652
$L160651:
  01180	c7 85 30 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1488+[ebp], 0
$L160652:
  0118a	8b 95 30 fa ff
	ff		 mov	 edx, DWORD PTR -1488+[ebp]
  01190	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T160648[ebp], edx
  01196	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0119a	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  011a0	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T160648[ebp]
  011a6	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 608  : 
; 609  : 			m_pTitle->ShowWindow ( SW_HIDE );

  011ac	6a 00		 push	 0
  011ae	8b 95 70 fa ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  011b4	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  011ba	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 610  : 			m_pTitle->SetFocus();

  011bf	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  011c5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  011cb	e8 00 00 00 00	 call	 ?SetFocus@CWnd@@QAEPAV1@XZ ; CWnd::SetFocus

; 611  : 			m_pTitle->ShowWindow ( SW_SHOW );

  011d0	6a 05		 push	 5
  011d2	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  011d8	8b 89 a4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+164]
  011de	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 612  : 			m_pTitle->LimitText( 24 );

  011e3	6a 18		 push	 24			; 00000018H
  011e5	8b 95 70 fa ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  011eb	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  011f1	e8 00 00 00 00	 call	 ?LimitText@CRichEditCtrl@@QAEXJ@Z ; CRichEditCtrl::LimitText

; 613  : 
; 614  : 			m_pTitle->SetText( *((StringID) m_pChar.get_pTitle()) );

  011f6	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR $T160654[ebp]
  011fc	50		 push	 eax
  011fd	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01202	e8 00 00 00 00	 call	 ?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pTitle
  01207	50		 push	 eax
  01208	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T160653[ebp]
  0120e	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  01213	8b c8		 mov	 ecx, eax
  01215	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0121a	50		 push	 eax
  0121b	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01221	8b 89 a4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+164]
  01227	e8 00 00 00 00	 call	 ?SetText@CSkinEdit@@QAEHPBD@Z ; CSkinEdit::SetText

; 615  : 			return m_pTitle;

  0122c	8b 95 70 fa ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01232	83 ba a4 00 00
	00 00		 cmp	 DWORD PTR [edx+164], 0
  01239	74 17		 je	 SHORT $L160656
  0123b	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01241	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  01247	83 c1 60	 add	 ecx, 96			; 00000060H
  0124a	89 8d 2c fa ff
	ff		 mov	 DWORD PTR -1492+[ebp], ecx
  01250	eb 0a		 jmp	 SHORT $L160657
$L160656:
  01252	c7 85 2c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1492+[ebp], 0
$L160657:
  0125c	8b 95 2c fa ff
	ff		 mov	 edx, DWORD PTR -1492+[ebp]
  01262	89 95 50 ff ff
	ff		 mov	 DWORD PTR $T160655[ebp], edx
  01268	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0126c	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0126f	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01274	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01278	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  0127b	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01280	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01287	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  0128a	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0128f	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR $T160655[ebp]
  01295	e9 d6 3d 00 00	 jmp	 $L153276
$L153312:

; 617  : 			CSkinCtrl* pTemp = new CSkinCtrl ( obj, this );

  0129a	6a 14		 push	 20			; 00000014H
  0129c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  012a1	83 c4 04	 add	 esp, 4
  012a4	89 85 48 ff ff
	ff		 mov	 DWORD PTR $T160659[ebp], eax
  012aa	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  012ae	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR $T160659[ebp], 0
  012b5	74 40		 je	 SHORT $L160661
  012b7	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  012bd	50		 push	 eax
  012be	83 ec 08	 sub	 esp, 8
  012c1	8b cc		 mov	 ecx, esp
  012c3	89 a5 44 ff ff
	ff		 mov	 DWORD PTR $T160660[ebp], esp
  012c9	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  012cc	52		 push	 edx
  012cd	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  012d2	89 85 28 fa ff
	ff		 mov	 DWORD PTR -1496+[ebp], eax
  012d8	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR $T160659[ebp]
  012de	e8 00 00 00 00	 call	 ??0CSkinCtrl@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinCtrl::CSkinCtrl
  012e3	89 85 24 fa ff
	ff		 mov	 DWORD PTR -1500+[ebp], eax
  012e9	8b 85 24 fa ff
	ff		 mov	 eax, DWORD PTR -1500+[ebp]
  012ef	89 85 20 fa ff
	ff		 mov	 DWORD PTR -1504+[ebp], eax
  012f5	eb 0a		 jmp	 SHORT $L160662
$L160661:
  012f7	c7 85 20 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1504+[ebp], 0
$L160662:
  01301	8b 8d 20 fa ff
	ff		 mov	 ecx, DWORD PTR -1504+[ebp]
  01307	89 8d 4c ff ff
	ff		 mov	 DWORD PTR $T160658[ebp], ecx
  0130d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01311	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR $T160658[ebp]
  01317	89 55 e8	 mov	 DWORD PTR _pTemp$153323[ebp], edx

; 618  : 			pTemp->SetText( *((StringID) m_pChar.get_pTitle()) );

  0131a	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR $T160664[ebp]
  01320	50		 push	 eax
  01321	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01326	e8 00 00 00 00	 call	 ?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pTitle
  0132b	50		 push	 eax
  0132c	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T160663[ebp]
  01332	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  01337	8b c8		 mov	 ecx, eax
  01339	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0133e	50		 push	 eax
  0133f	8b 4d e8	 mov	 ecx, DWORD PTR _pTemp$153323[ebp]
  01342	51		 push	 ecx
  01343	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01348	83 c4 08	 add	 esp, 8

; 619  : 			pTemp->SetHint( *((StringID) m_pChar.get_pTitle()) );

  0134b	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR $T160666[ebp]
  01351	52		 push	 edx
  01352	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01357	e8 00 00 00 00	 call	 ?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pTitle
  0135c	50		 push	 eax
  0135d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T160665[ebp]
  01363	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  01368	8b c8		 mov	 ecx, eax
  0136a	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0136f	50		 push	 eax
  01370	8b 4d e8	 mov	 ecx, DWORD PTR _pTemp$153323[ebp]
  01373	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint

; 620  : 
; 621  : 			return pTemp;

  01378	8b 45 e8	 mov	 eax, DWORD PTR _pTemp$153323[ebp]
  0137b	89 85 30 ff ff
	ff		 mov	 DWORD PTR $T160667[ebp], eax
  01381	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01385	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  01388	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0138d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01391	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  01394	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01399	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  013a0	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  013a3	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  013a8	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR $T160667[ebp]
  013ae	e9 bd 3c 00 00	 jmp	 $L153276
$L153322:

; 624  : 
; 625  : 	// handle the READONLY edit fields (Name)
; 626  : 	if ( "ref" == id ) {

  013b3	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  013b6	51		 push	 ecx
  013b7	68 00 00 00 00	 push	 OFFSET FLAT:$SG153337
  013bc	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  013c1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  013c6	85 c0		 test	 eax, eax
  013c8	0f 84 2f 01 00
	00		 je	 $L153336

; 627  : 		CSkinCtrl* pName = new CSkinCtrl ( obj, this );

  013ce	6a 14		 push	 20			; 00000014H
  013d0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  013d5	83 c4 04	 add	 esp, 4
  013d8	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T160669[ebp], eax
  013de	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  013e2	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR $T160669[ebp], 0
  013e9	74 40		 je	 SHORT $L160671
  013eb	8b 95 70 fa ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  013f1	52		 push	 edx
  013f2	83 ec 08	 sub	 esp, 8
  013f5	8b cc		 mov	 ecx, esp
  013f7	89 a5 24 ff ff
	ff		 mov	 DWORD PTR $T160670[ebp], esp
  013fd	8d 45 08	 lea	 eax, DWORD PTR _obj$[ebp]
  01400	50		 push	 eax
  01401	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01406	89 85 1c fa ff
	ff		 mov	 DWORD PTR -1508+[ebp], eax
  0140c	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR $T160669[ebp]
  01412	e8 00 00 00 00	 call	 ??0CSkinCtrl@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinCtrl::CSkinCtrl
  01417	89 85 18 fa ff
	ff		 mov	 DWORD PTR -1512+[ebp], eax
  0141d	8b 8d 18 fa ff
	ff		 mov	 ecx, DWORD PTR -1512+[ebp]
  01423	89 8d 14 fa ff
	ff		 mov	 DWORD PTR -1516+[ebp], ecx
  01429	eb 0a		 jmp	 SHORT $L160672
$L160671:
  0142b	c7 85 14 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1516+[ebp], 0
$L160672:
  01435	8b 95 14 fa ff
	ff		 mov	 edx, DWORD PTR -1516+[ebp]
  0143b	89 95 2c ff ff
	ff		 mov	 DWORD PTR $T160668[ebp], edx
  01441	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01445	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T160668[ebp]
  0144b	89 45 e4	 mov	 DWORD PTR _pName$153338[ebp], eax

; 628  : 
; 629  : 		pName->SetText( *((StringID) m_pChar.get_pName()) );

  0144e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01453	e8 00 00 00 00	 call	 ?get_pName@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pName
  01458	50		 push	 eax
  01459	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T160674[ebp]
  0145f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  01464	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T160674[ebp]
  0146a	51		 push	 ecx
  0146b	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T160673[ebp]
  01471	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  01476	8b c8		 mov	 ecx, eax
  01478	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0147d	50		 push	 eax
  0147e	8b 55 e4	 mov	 edx, DWORD PTR _pName$153338[ebp]
  01481	52		 push	 edx
  01482	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01487	83 c4 08	 add	 esp, 8

; 630  : 		pName->SetHint( *((StringID) m_pChar.get_pName()) );

  0148a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0148f	e8 00 00 00 00	 call	 ?get_pName@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pName
  01494	50		 push	 eax
  01495	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T160676[ebp]
  0149b	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  014a0	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T160676[ebp]
  014a6	50		 push	 eax
  014a7	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T160675[ebp]
  014ad	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  014b2	8b c8		 mov	 ecx, eax
  014b4	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  014b9	50		 push	 eax
  014ba	8b 4d e4	 mov	 ecx, DWORD PTR _pName$153338[ebp]
  014bd	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint

; 631  : 		return pName;

  014c2	8b 4d e4	 mov	 ecx, DWORD PTR _pName$153338[ebp]
  014c5	89 8d 10 ff ff
	ff		 mov	 DWORD PTR $T160677[ebp], ecx
  014cb	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  014cf	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  014d2	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  014d7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  014db	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  014de	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  014e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  014ea	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  014ed	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  014f2	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR $T160677[ebp]
  014f8	e9 73 3b 00 00	 jmp	 $L153276
$L153336:

; 633  : 
; 634  : 	// handle the Level edit field
; 635  : 	if ( "lvl" == id ) {

  014fd	8d 55 ec	 lea	 edx, DWORD PTR _id$[ebp]
  01500	52		 push	 edx
  01501	68 00 00 00 00	 push	 OFFSET FLAT:$SG153352
  01506	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  0150b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01510	85 c0		 test	 eax, eax
  01512	0f 84 1e 01 00
	00		 je	 $L153351

; 636  : 		CSkinCtrl* pEdit = new CSkinCtrl ( obj, this );

  01518	6a 14		 push	 20			; 00000014H
  0151a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0151f	83 c4 04	 add	 esp, 4
  01522	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T160679[ebp], eax
  01528	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0152c	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR $T160679[ebp], 0
  01533	74 40		 je	 SHORT $L160681
  01535	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0153b	50		 push	 eax
  0153c	83 ec 08	 sub	 esp, 8
  0153f	8b cc		 mov	 ecx, esp
  01541	89 a5 04 ff ff
	ff		 mov	 DWORD PTR $T160680[ebp], esp
  01547	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  0154a	52		 push	 edx
  0154b	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01550	89 85 10 fa ff
	ff		 mov	 DWORD PTR -1520+[ebp], eax
  01556	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR $T160679[ebp]
  0155c	e8 00 00 00 00	 call	 ??0CSkinCtrl@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinCtrl::CSkinCtrl
  01561	89 85 0c fa ff
	ff		 mov	 DWORD PTR -1524+[ebp], eax
  01567	8b 85 0c fa ff
	ff		 mov	 eax, DWORD PTR -1524+[ebp]
  0156d	89 85 08 fa ff
	ff		 mov	 DWORD PTR -1528+[ebp], eax
  01573	eb 0a		 jmp	 SHORT $L160682
$L160681:
  01575	c7 85 08 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1528+[ebp], 0
$L160682:
  0157f	8b 8d 08 fa ff
	ff		 mov	 ecx, DWORD PTR -1528+[ebp]
  01585	89 8d 0c ff ff
	ff		 mov	 DWORD PTR $T160678[ebp], ecx
  0158b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0158f	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR $T160678[ebp]
  01595	89 55 e0	 mov	 DWORD PTR _pEdit$153353[ebp], edx

; 637  : 
; 638  : 		CString sLevel;

  01598	8d 4d dc	 lea	 ecx, DWORD PTR _sLevel$153359[ebp]
  0159b	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  015a0	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH

; 639  : 
; 640  : 		if ( m_pChar.get_pIsSelf() ) {

  015a4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  015a9	e8 00 00 00 00	 call	 ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pIsSelf
  015ae	0f bf c0	 movsx	 eax, ax
  015b1	85 c0		 test	 eax, eax
  015b3	74 21		 je	 SHORT $L153360

; 641  : 			sLevel.Format( "%d", m_pChar.get_pLevel() );

  015b5	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  015ba	e8 00 00 00 00	 call	 ?get_pLevel@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pLevel
  015bf	0f bf c8	 movsx	 ecx, ax
  015c2	51		 push	 ecx
  015c3	68 00 00 00 00	 push	 OFFSET FLAT:$SG153361
  015c8	8d 55 dc	 lea	 edx, DWORD PTR _sLevel$153359[ebp]
  015cb	52		 push	 edx
  015cc	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  015d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 642  : 		} else {

  015d4	eb 0d		 jmp	 SHORT $L153362
$L153360:

; 643  : 			sLevel = "???";

  015d6	68 00 00 00 00	 push	 OFFSET FLAT:$SG153363
  015db	8d 4d dc	 lea	 ecx, DWORD PTR _sLevel$153359[ebp]
  015de	e8 00 00 00 00	 call	 ??4CString@@QAEABV0@PBD@Z ; CString::operator=
$L153362:

; 645  : 
; 646  : 		pEdit->SetText( sLevel );

  015e3	8d 45 dc	 lea	 eax, DWORD PTR _sLevel$153359[ebp]
  015e6	50		 push	 eax
  015e7	8b 4d e0	 mov	 ecx, DWORD PTR _pEdit$153353[ebp]
  015ea	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAEHAAVCString@@@Z ; CSkinObj::SetText

; 647  : 
; 648  : 		return pEdit;

  015ef	8b 4d e0	 mov	 ecx, DWORD PTR _pEdit$153353[ebp]
  015f2	89 8d 00 ff ff
	ff		 mov	 DWORD PTR $T160683[ebp], ecx
  015f8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  015fc	8d 4d dc	 lea	 ecx, DWORD PTR _sLevel$153359[ebp]
  015ff	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01604	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01608	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0160b	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01610	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01614	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  01617	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0161c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01623	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01626	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0162b	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR $T160683[ebp]
  01631	e9 3a 3a 00 00	 jmp	 $L153276
$L153351:

; 650  : 
; 651  : 	// handle the page switching buttons
; 652  : 	if ( "btn" == id ) {

  01636	8d 55 ec	 lea	 edx, DWORD PTR _id$[ebp]
  01639	52		 push	 edx
  0163a	68 00 00 00 00	 push	 OFFSET FLAT:$SG153366
  0163f	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  01644	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01649	85 c0		 test	 eax, eax
  0164b	0f 84 6d 01 00
	00		 je	 $L153365

; 653  : 		int nPos = atoi( name.Right( 1 ) );

  01651	6a 01		 push	 1
  01653	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T160684[ebp]
  01659	50		 push	 eax
  0165a	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  0165d	e8 00 00 00 00	 call	 ?Right@CString@@QBE?AV1@H@Z ; CString::Right
  01662	89 85 04 fa ff
	ff		 mov	 DWORD PTR -1532+[ebp], eax
  01668	8b 8d 04 fa ff
	ff		 mov	 ecx, DWORD PTR -1532+[ebp]
  0166e	89 8d 00 fa ff
	ff		 mov	 DWORD PTR -1536+[ebp], ecx
  01674	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  01678	8b 8d 00 fa ff
	ff		 mov	 ecx, DWORD PTR -1536+[ebp]
  0167e	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01683	50		 push	 eax
  01684	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0168a	83 c4 04	 add	 esp, 4
  0168d	89 45 d8	 mov	 DWORD PTR _nPos$153367[ebp], eax
  01690	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01694	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T160684[ebp]
  0169a	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 654  : 
; 655  : 		// Zero is an invalid value
; 656  : 		if ( !nPos )

  0169f	83 7d d8 00	 cmp	 DWORD PTR _nPos$153367[ebp], 0
  016a3	75 5d		 jne	 SHORT $L153369

; 657  : 			msgMgr->Fatal( "There is an invalid control in this User Skin '%s'.  Name = '%s'. Can not be a field without a 1 digit number or a field with the number 0.", GetSkinName().c_str(), name );

  016a5	8b 55 f0	 mov	 edx, DWORD PTR _name$[ebp]
  016a8	52		 push	 edx
  016a9	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T160685[ebp]
  016af	50		 push	 eax
  016b0	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  016b6	e8 00 00 00 00	 call	 ?GetSkinName@CSkinWnd@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CSkinWnd::GetSkinName
  016bb	89 85 fc f9 ff
	ff		 mov	 DWORD PTR -1540+[ebp], eax
  016c1	8b 8d fc f9 ff
	ff		 mov	 ecx, DWORD PTR -1540+[ebp]
  016c7	89 8d f8 f9 ff
	ff		 mov	 DWORD PTR -1544+[ebp], ecx
  016cd	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  016d1	8b 8d f8 f9 ff
	ff		 mov	 ecx, DWORD PTR -1544+[ebp]
  016d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  016dd	50		 push	 eax
  016de	68 00 00 00 00	 push	 OFFSET FLAT:$SG153371
  016e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  016e9	52		 push	 edx
  016ea	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  016ef	83 c4 10	 add	 esp, 16			; 00000010H
  016f2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  016f6	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T160685[ebp]
  016fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$L153369:

; 658  : 
; 659  : 		return new CLookAtBtn( obj, this, ( nPos - 1 ) );

  01702	6a 18		 push	 24			; 00000018H
  01704	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01709	83 c4 04	 add	 esp, 4
  0170c	89 85 e0 fe ff
	ff		 mov	 DWORD PTR $T160688[ebp], eax
  01712	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  01716	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR $T160688[ebp], 0
  0171d	74 47		 je	 SHORT $L160690
  0171f	8b 45 d8	 mov	 eax, DWORD PTR _nPos$153367[ebp]
  01722	83 e8 01	 sub	 eax, 1
  01725	50		 push	 eax
  01726	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0172c	51		 push	 ecx
  0172d	83 ec 08	 sub	 esp, 8
  01730	8b cc		 mov	 ecx, esp
  01732	89 a5 dc fe ff
	ff		 mov	 DWORD PTR $T160689[ebp], esp
  01738	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  0173b	52		 push	 edx
  0173c	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01741	89 85 f4 f9 ff
	ff		 mov	 DWORD PTR -1548+[ebp], eax
  01747	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR $T160688[ebp]
  0174d	e8 00 00 00 00	 call	 ??0CLookAtBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@H@Z ; CLookAtBtn::CLookAtBtn
  01752	89 85 f0 f9 ff
	ff		 mov	 DWORD PTR -1552+[ebp], eax
  01758	8b 85 f0 f9 ff
	ff		 mov	 eax, DWORD PTR -1552+[ebp]
  0175e	89 85 ec f9 ff
	ff		 mov	 DWORD PTR -1556+[ebp], eax
  01764	eb 0a		 jmp	 SHORT $L160691
$L160690:
  01766	c7 85 ec f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1556+[ebp], 0
$L160691:
  01770	8b 8d ec f9 ff
	ff		 mov	 ecx, DWORD PTR -1556+[ebp]
  01776	89 8d e4 fe ff
	ff		 mov	 DWORD PTR $T160687[ebp], ecx
  0177c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01780	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR $T160687[ebp]
  01786	89 95 e8 fe ff
	ff		 mov	 DWORD PTR $T160686[ebp], edx
  0178c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01790	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  01793	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01798	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0179c	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  0179f	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  017a4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  017ab	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  017ae	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  017b3	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T160686[ebp]
  017b9	e9 b2 38 00 00	 jmp	 $L153276
$L153365:

; 661  : 
; 662  : 	if ( "tf" == id ) {

  017be	8d 45 ec	 lea	 eax, DWORD PTR _id$[ebp]
  017c1	50		 push	 eax
  017c2	68 00 00 00 00	 push	 OFFSET FLAT:$SG153379
  017c7	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  017cc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  017d1	85 c0		 test	 eax, eax
  017d3	0f 84 48 35 00
	00		 je	 $L153378

; 663  : 		CSCI_ArmorInfo pArmor;

  017d9	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  017dc	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@XZ ; CSCI_ArmorInfo::CSCI_ArmorInfo

; 664  : 		CSkinCtrl* pEdit = new CSkinCtrl ( obj, this );

  017e1	6a 14		 push	 20			; 00000014H
  017e3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  017e8	83 c4 04	 add	 esp, 4
  017eb	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T160693[ebp], eax
  017f1	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  017f5	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR $T160693[ebp], 0
  017fc	74 40		 je	 SHORT $L160695
  017fe	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01804	51		 push	 ecx
  01805	83 ec 08	 sub	 esp, 8
  01808	8b cc		 mov	 ecx, esp
  0180a	89 a5 d0 fe ff
	ff		 mov	 DWORD PTR $T160694[ebp], esp
  01810	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  01813	52		 push	 edx
  01814	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01819	89 85 e8 f9 ff
	ff		 mov	 DWORD PTR -1560+[ebp], eax
  0181f	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR $T160693[ebp]
  01825	e8 00 00 00 00	 call	 ??0CSkinCtrl@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinCtrl::CSkinCtrl
  0182a	89 85 e4 f9 ff
	ff		 mov	 DWORD PTR -1564+[ebp], eax
  01830	8b 85 e4 f9 ff
	ff		 mov	 eax, DWORD PTR -1564+[ebp]
  01836	89 85 e0 f9 ff
	ff		 mov	 DWORD PTR -1568+[ebp], eax
  0183c	eb 0a		 jmp	 SHORT $L160696
$L160695:
  0183e	c7 85 e0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1568+[ebp], 0
$L160696:
  01848	8b 8d e0 f9 ff
	ff		 mov	 ecx, DWORD PTR -1568+[ebp]
  0184e	89 8d d8 fe ff
	ff		 mov	 DWORD PTR $T160692[ebp], ecx
  01854	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01858	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR $T160692[ebp]
  0185e	89 55 d4	 mov	 DWORD PTR _pEdit$153381[ebp], edx

; 665  : 
; 666  : 		int nControl = atoi ( name.Right( 3 ) );

  01861	6a 03		 push	 3
  01863	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T160697[ebp]
  01869	50		 push	 eax
  0186a	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  0186d	e8 00 00 00 00	 call	 ?Right@CString@@QBE?AV1@H@Z ; CString::Right
  01872	89 85 dc f9 ff
	ff		 mov	 DWORD PTR -1572+[ebp], eax
  01878	8b 8d dc f9 ff
	ff		 mov	 ecx, DWORD PTR -1572+[ebp]
  0187e	89 8d d8 f9 ff
	ff		 mov	 DWORD PTR -1576+[ebp], ecx
  01884	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  01888	8b 8d d8 f9 ff
	ff		 mov	 ecx, DWORD PTR -1576+[ebp]
  0188e	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01893	50		 push	 eax
  01894	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0189a	83 c4 04	 add	 esp, 4
  0189d	89 45 d0	 mov	 DWORD PTR _nControl$153387[ebp], eax
  018a0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  018a4	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T160697[ebp]
  018aa	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 667  : 
; 668  : 		if ( m_pChar.get_pIsSelf() ) {

  018af	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  018b4	e8 00 00 00 00	 call	 ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pIsSelf
  018b9	0f bf d0	 movsx	 edx, ax
  018bc	85 d2		 test	 edx, edx
  018be	0f 84 f1 27 00
	00		 je	 $L153389

; 669  : 			switch ( nControl ) {

  018c4	8b 45 d0	 mov	 eax, DWORD PTR _nControl$153387[ebp]
  018c7	89 85 d4 f9 ff
	ff		 mov	 DWORD PTR -1580+[ebp], eax
  018cd	83 bd d4 f9 ff
	ff 7f		 cmp	 DWORD PTR -1580+[ebp], 127 ; 0000007fH
  018d4	0f 87 d6 27 00
	00		 ja	 $L153391
  018da	8b 8d d4 f9 ff
	ff		 mov	 ecx, DWORD PTR -1580+[ebp]
  018e0	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L161019[ecx*4]
$L153394:

; 670  : 				case 0:
; 671  : 					msgMgr->Fatal( "There is an invalid control in this User Skin '%s'.  Name = '%s'. Can not be a field without a 3 digit number or a field with the number 000.", GetSkinName().c_str(), name );

  018e7	8b 55 f0	 mov	 edx, DWORD PTR _name$[ebp]
  018ea	52		 push	 edx
  018eb	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T160698[ebp]
  018f1	50		 push	 eax
  018f2	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  018f8	e8 00 00 00 00	 call	 ?GetSkinName@CSkinWnd@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CSkinWnd::GetSkinName
  018fd	89 85 d0 f9 ff
	ff		 mov	 DWORD PTR -1584+[ebp], eax
  01903	8b 8d d0 f9 ff
	ff		 mov	 ecx, DWORD PTR -1584+[ebp]
  01909	89 8d cc f9 ff
	ff		 mov	 DWORD PTR -1588+[ebp], ecx
  0190f	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  01913	8b 8d cc f9 ff
	ff		 mov	 ecx, DWORD PTR -1588+[ebp]
  01919	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0191f	50		 push	 eax
  01920	68 00 00 00 00	 push	 OFFSET FLAT:$SG153396
  01925	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0192b	52		 push	 edx
  0192c	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  01931	83 c4 10	 add	 esp, 16			; 00000010H
  01934	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01938	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T160698[ebp]
  0193e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 672  : 					break;

  01944	e9 67 27 00 00	 jmp	 $L153391
$L153397:

; 673  : 				case 1:		//	Status 1
; 674  : 				case 2:		//	Status 2
; 675  : 				case 3:		//	Status 3
; 676  : 				case 4:		//	Status 4
; 677  : 				case 5:		//	Status 5
; 678  : 				case 6:		//	Status 6
; 679  : 				case 7:		//	Status 7
; 680  : 				case 8:		//	Status 8
; 681  : 				case 9:		//	Status 9
; 682  : 				case 10:	//	Status 10
; 683  : 				case 11:	//	Status 11
; 684  : 				case 12:	//	Status 12
; 685  : 				case 13:	//	Status 13
; 686  : 				case 14:	//	Status 14
; 687  : 				case 15:	//	Status 15
; 688  : 				case 16:	//	Status 16
; 689  : 				case 17:	//	Status 17
; 690  : 				case 18:	//	Status 18
; 691  : 					if ( m_pChar.get_pIsSelf() ) {

  01949	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0194e	e8 00 00 00 00	 call	 ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pIsSelf
  01953	0f bf c0	 movsx	 eax, ax
  01956	85 c0		 test	 eax, eax
  01958	0f 84 cb 01 00
	00		 je	 $L153404

; 692  : 						int nPos = 0;

  0195e	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _nPos$153399[ebp], 0

; 693  : 						int nText = 1;

  01965	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _nText$153400[ebp], 1

; 694  : 
; 695  : 						CSCI_ByteArray pList = m_pChar.get_pStatusArray();

  0196c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01971	e8 00 00 00 00	 call	 ?get_pStatusArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pStatusArray
  01976	50		 push	 eax
  01977	8d 4d c4	 lea	 ecx, DWORD PTR _pList$153401[ebp]
  0197a	e8 00 00 00 00	 call	 ??0CSCI_ByteArray@@QAE@G@Z ; CSCI_ByteArray::CSCI_ByteArray
$L153403:

; 696  : 
; 697  : 						while ( nPos < 87 ) {

  0197f	83 7d c0 57	 cmp	 DWORD PTR _nPos$153399[ebp], 87 ; 00000057H
  01983	0f 8d a0 01 00
	00		 jge	 $L153404

; 698  : 							int nValue = pList.at( nPos );

  01989	66 8b 4d c0	 mov	 cx, WORD PTR _nPos$153399[ebp]
  0198d	51		 push	 ecx
  0198e	8d 4d c4	 lea	 ecx, DWORD PTR _pList$153401[ebp]
  01991	e8 00 00 00 00	 call	 ?at@CSCI_Array@@QAEFF@Z	; CSCI_Array::at
  01996	0f bf d0	 movsx	 edx, ax
  01999	89 55 bc	 mov	 DWORD PTR _nValue$153405[ebp], edx

; 699  : 
; 700  : 							if ( nValue & 1 ) {

  0199c	8b 45 bc	 mov	 eax, DWORD PTR _nValue$153405[ebp]
  0199f	83 e0 01	 and	 eax, 1
  019a2	85 c0		 test	 eax, eax
  019a4	74 76		 je	 SHORT $L153410

; 701  : 								if ( gNormalAffectTbl[ nPos ][ 0 ] ) {

  019a6	8b 4d c0	 mov	 ecx, DWORD PTR _nPos$153399[ebp]
  019a9	6b c9 32	 imul	 ecx, 50			; 00000032H
  019ac	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR ?gNormalAffectTbl@@3PAY0DC@DA[ecx]
  019b3	85 d2		 test	 edx, edx
  019b5	74 65		 je	 SHORT $L153410

; 702  : 									if ( nText == nControl ) {

  019b7	8b 45 c8	 mov	 eax, DWORD PTR _nText$153400[ebp]
  019ba	3b 45 d0	 cmp	 eax, DWORD PTR _nControl$153387[ebp]
  019bd	75 54		 jne	 SHORT $L153408

; 703  : 										pEdit->SetText( gNormalAffectTbl[ nPos ] );

  019bf	8b 4d c0	 mov	 ecx, DWORD PTR _nPos$153399[ebp]
  019c2	6b c9 32	 imul	 ecx, 50			; 00000032H
  019c5	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:?gNormalAffectTbl@@3PAY0DC@DA ; gNormalAffectTbl
  019cb	51		 push	 ecx
  019cc	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  019cf	52		 push	 edx
  019d0	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  019d5	83 c4 08	 add	 esp, 8

; 704  : 
; 705  : 										return pEdit;

  019d8	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  019db	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T160699[ebp], eax
  019e1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  019e5	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  019e8	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  019ed	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  019f1	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  019f4	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  019f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01a00	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01a03	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01a08	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T160699[ebp]
  01a0e	e9 5d 36 00 00	 jmp	 $L153276
$L153408:

; 707  : 										nText++;

  01a13	8b 4d c8	 mov	 ecx, DWORD PTR _nText$153400[ebp]
  01a16	83 c1 01	 add	 ecx, 1
  01a19	89 4d c8	 mov	 DWORD PTR _nText$153400[ebp], ecx
$L153410:

; 711  : 
; 712  : 							if ( nValue & 4 ) {

  01a1c	8b 55 bc	 mov	 edx, DWORD PTR _nValue$153405[ebp]
  01a1f	83 e2 04	 and	 edx, 4
  01a22	85 d2		 test	 edx, edx
  01a24	74 75		 je	 SHORT $L153415

; 713  : 								if ( gResistanceAffectTbl[ nPos ][ 0 ] ) {

  01a26	8b 45 c0	 mov	 eax, DWORD PTR _nPos$153399[ebp]
  01a29	6b c0 32	 imul	 eax, 50			; 00000032H
  01a2c	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR ?gResistanceAffectTbl@@3PAY0DC@DA[eax]
  01a33	85 c9		 test	 ecx, ecx
  01a35	74 64		 je	 SHORT $L153415

; 714  : 									if ( nText == nControl ) {

  01a37	8b 55 c8	 mov	 edx, DWORD PTR _nText$153400[ebp]
  01a3a	3b 55 d0	 cmp	 edx, DWORD PTR _nControl$153387[ebp]
  01a3d	75 53		 jne	 SHORT $L153413

; 715  : 										pEdit->SetText( gResistanceAffectTbl[ nPos ] );

  01a3f	8b 45 c0	 mov	 eax, DWORD PTR _nPos$153399[ebp]
  01a42	6b c0 32	 imul	 eax, 50			; 00000032H
  01a45	05 00 00 00 00	 add	 eax, OFFSET FLAT:?gResistanceAffectTbl@@3PAY0DC@DA ; gResistanceAffectTbl
  01a4a	50		 push	 eax
  01a4b	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01a4e	51		 push	 ecx
  01a4f	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01a54	83 c4 08	 add	 esp, 8

; 716  : 
; 717  : 										return pEdit;

  01a57	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  01a5a	89 95 b4 fe ff
	ff		 mov	 DWORD PTR $T160700[ebp], edx
  01a60	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01a64	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  01a67	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01a6c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01a70	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  01a73	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01a78	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01a7f	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01a82	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01a87	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR $T160700[ebp]
  01a8d	e9 de 35 00 00	 jmp	 $L153276
$L153413:

; 719  : 										nText++;

  01a92	8b 45 c8	 mov	 eax, DWORD PTR _nText$153400[ebp]
  01a95	83 c0 01	 add	 eax, 1
  01a98	89 45 c8	 mov	 DWORD PTR _nText$153400[ebp], eax
$L153415:

; 723  : 
; 724  : 							if ( nValue & 8 ) {

  01a9b	8b 4d bc	 mov	 ecx, DWORD PTR _nValue$153405[ebp]
  01a9e	83 e1 08	 and	 ecx, 8
  01aa1	85 c9		 test	 ecx, ecx
  01aa3	74 76		 je	 SHORT $L153420

; 725  : 								if ( gWeaknessAffectTbl[ nPos ][ 0 ] ) {

  01aa5	8b 55 c0	 mov	 edx, DWORD PTR _nPos$153399[ebp]
  01aa8	6b d2 32	 imul	 edx, 50			; 00000032H
  01aab	0f be 82 00 00
	00 00		 movsx	 eax, BYTE PTR ?gWeaknessAffectTbl@@3PAY0DC@DA[edx]
  01ab2	85 c0		 test	 eax, eax
  01ab4	74 65		 je	 SHORT $L153420

; 726  : 									if ( nText == nControl ) {

  01ab6	8b 4d c8	 mov	 ecx, DWORD PTR _nText$153400[ebp]
  01ab9	3b 4d d0	 cmp	 ecx, DWORD PTR _nControl$153387[ebp]
  01abc	75 54		 jne	 SHORT $L153418

; 727  : 										pEdit->SetText( gWeaknessAffectTbl[ nPos ] );

  01abe	8b 55 c0	 mov	 edx, DWORD PTR _nPos$153399[ebp]
  01ac1	6b d2 32	 imul	 edx, 50			; 00000032H
  01ac4	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:?gWeaknessAffectTbl@@3PAY0DC@DA ; gWeaknessAffectTbl
  01aca	52		 push	 edx
  01acb	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01ace	50		 push	 eax
  01acf	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01ad4	83 c4 08	 add	 esp, 8

; 728  : 
; 729  : 										return pEdit;

  01ad7	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01ada	89 8d b0 fe ff
	ff		 mov	 DWORD PTR $T160701[ebp], ecx
  01ae0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01ae4	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  01ae7	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01aec	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01af0	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  01af3	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01af8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01aff	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01b02	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01b07	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T160701[ebp]
  01b0d	e9 5e 35 00 00	 jmp	 $L153276
$L153418:

; 731  : 										nText++;

  01b12	8b 55 c8	 mov	 edx, DWORD PTR _nText$153400[ebp]
  01b15	83 c2 01	 add	 edx, 1
  01b18	89 55 c8	 mov	 DWORD PTR _nText$153400[ebp], edx
$L153420:

; 735  : 
; 736  : 							nPos++;

  01b1b	8b 45 c0	 mov	 eax, DWORD PTR _nPos$153399[ebp]
  01b1e	83 c0 01	 add	 eax, 1
  01b21	89 45 c0	 mov	 DWORD PTR _nPos$153399[ebp], eax

; 737  : 						}

  01b24	e9 56 fe ff ff	 jmp	 $L153403
$L153404:

; 739  : 
; 740  : 					break;

  01b29	e9 82 25 00 00	 jmp	 $L153391
$L153421:

; 741  : 				case 19:	//	Strength
; 742  : 					pEdit->SetText( "%s", MakeString( m_pChar.get_pStrength() ) );

  01b2e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01b33	e8 00 00 00 00	 call	 ?get_pStrength@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pStrength
  01b38	0f bf c8	 movsx	 ecx, ax
  01b3b	51		 push	 ecx
  01b3c	8d 95 ac fe ff
	ff		 lea	 edx, DWORD PTR $T160702[ebp]
  01b42	52		 push	 edx
  01b43	e8 00 00 00 00	 call	 ?MakeString@@YA?AVCString@@H@Z ; MakeString
  01b48	83 c4 08	 add	 esp, 8
  01b4b	89 85 c8 f9 ff
	ff		 mov	 DWORD PTR -1592+[ebp], eax
  01b51	8b 85 c8 f9 ff
	ff		 mov	 eax, DWORD PTR -1592+[ebp]
  01b57	89 85 c4 f9 ff
	ff		 mov	 DWORD PTR -1596+[ebp], eax
  01b5d	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  01b61	8b 8d c4 f9 ff
	ff		 mov	 ecx, DWORD PTR -1596+[ebp]
  01b67	8b 11		 mov	 edx, DWORD PTR [ecx]
  01b69	52		 push	 edx
  01b6a	68 00 00 00 00	 push	 OFFSET FLAT:$SG153423
  01b6f	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01b72	50		 push	 eax
  01b73	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01b78	83 c4 0c	 add	 esp, 12			; 0000000cH
  01b7b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01b7f	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T160702[ebp]
  01b85	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 743  : 					break;

  01b8a	e9 21 25 00 00	 jmp	 $L153391
$L153424:

; 744  : 				case 20:	//	Dexterity
; 745  : 					pEdit->SetText( "%s", MakeString( m_pChar.get_pDexterity() ) );

  01b8f	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01b94	e8 00 00 00 00	 call	 ?get_pDexterity@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pDexterity
  01b99	0f bf c8	 movsx	 ecx, ax
  01b9c	51		 push	 ecx
  01b9d	8d 95 a8 fe ff
	ff		 lea	 edx, DWORD PTR $T160703[ebp]
  01ba3	52		 push	 edx
  01ba4	e8 00 00 00 00	 call	 ?MakeString@@YA?AVCString@@H@Z ; MakeString
  01ba9	83 c4 08	 add	 esp, 8
  01bac	89 85 c0 f9 ff
	ff		 mov	 DWORD PTR -1600+[ebp], eax
  01bb2	8b 85 c0 f9 ff
	ff		 mov	 eax, DWORD PTR -1600+[ebp]
  01bb8	89 85 bc f9 ff
	ff		 mov	 DWORD PTR -1604+[ebp], eax
  01bbe	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  01bc2	8b 8d bc f9 ff
	ff		 mov	 ecx, DWORD PTR -1604+[ebp]
  01bc8	8b 11		 mov	 edx, DWORD PTR [ecx]
  01bca	52		 push	 edx
  01bcb	68 00 00 00 00	 push	 OFFSET FLAT:$SG153426
  01bd0	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01bd3	50		 push	 eax
  01bd4	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01bd9	83 c4 0c	 add	 esp, 12			; 0000000cH
  01bdc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01be0	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T160703[ebp]
  01be6	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 746  : 					break;

  01beb	e9 c0 24 00 00	 jmp	 $L153391
$L153427:

; 747  : 				case 21:	//	Intelligence
; 748  : 					pEdit->SetText( "%s", MakeString( m_pChar.get_pIntelligence() ) );

  01bf0	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01bf5	e8 00 00 00 00	 call	 ?get_pIntelligence@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pIntelligence
  01bfa	0f bf c8	 movsx	 ecx, ax
  01bfd	51		 push	 ecx
  01bfe	8d 95 a4 fe ff
	ff		 lea	 edx, DWORD PTR $T160704[ebp]
  01c04	52		 push	 edx
  01c05	e8 00 00 00 00	 call	 ?MakeString@@YA?AVCString@@H@Z ; MakeString
  01c0a	83 c4 08	 add	 esp, 8
  01c0d	89 85 b8 f9 ff
	ff		 mov	 DWORD PTR -1608+[ebp], eax
  01c13	8b 85 b8 f9 ff
	ff		 mov	 eax, DWORD PTR -1608+[ebp]
  01c19	89 85 b4 f9 ff
	ff		 mov	 DWORD PTR -1612+[ebp], eax
  01c1f	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  01c23	8b 8d b4 f9 ff
	ff		 mov	 ecx, DWORD PTR -1612+[ebp]
  01c29	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c2b	52		 push	 edx
  01c2c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153429
  01c31	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01c34	50		 push	 eax
  01c35	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01c3a	83 c4 0c	 add	 esp, 12			; 0000000cH
  01c3d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01c41	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T160704[ebp]
  01c47	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 749  : 					break;

  01c4c	e9 5f 24 00 00	 jmp	 $L153391
$L153430:

; 750  : 				case 22:	//	Endurance
; 751  : 					pEdit->SetText( "%s", MakeString( m_pChar.get_pEndurance() ) );

  01c51	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01c56	e8 00 00 00 00	 call	 ?get_pEndurance@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pEndurance
  01c5b	0f bf c8	 movsx	 ecx, ax
  01c5e	51		 push	 ecx
  01c5f	8d 95 a0 fe ff
	ff		 lea	 edx, DWORD PTR $T160705[ebp]
  01c65	52		 push	 edx
  01c66	e8 00 00 00 00	 call	 ?MakeString@@YA?AVCString@@H@Z ; MakeString
  01c6b	83 c4 08	 add	 esp, 8
  01c6e	89 85 b0 f9 ff
	ff		 mov	 DWORD PTR -1616+[ebp], eax
  01c74	8b 85 b0 f9 ff
	ff		 mov	 eax, DWORD PTR -1616+[ebp]
  01c7a	89 85 ac f9 ff
	ff		 mov	 DWORD PTR -1620+[ebp], eax
  01c80	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  01c84	8b 8d ac f9 ff
	ff		 mov	 ecx, DWORD PTR -1620+[ebp]
  01c8a	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c8c	52		 push	 edx
  01c8d	68 00 00 00 00	 push	 OFFSET FLAT:$SG153432
  01c92	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01c95	50		 push	 eax
  01c96	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01c9b	83 c4 0c	 add	 esp, 12			; 0000000cH
  01c9e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01ca2	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T160705[ebp]
  01ca8	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 752  : 					break;

  01cad	e9 fe 23 00 00	 jmp	 $L153391
$L153433:

; 754  : 						int nAlign = m_pChar.get_pAlignment();

  01cb2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01cb7	e8 00 00 00 00	 call	 ?get_pAlignment@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pAlignment
  01cbc	0f bf c8	 movsx	 ecx, ax
  01cbf	89 4d b8	 mov	 DWORD PTR _nAlign$153434[ebp], ecx

; 755  : 
; 756  : 						if ( nAlign <= 28 )

  01cc2	83 7d b8 1c	 cmp	 DWORD PTR _nAlign$153434[ebp], 28 ; 0000001cH
  01cc6	7f 16		 jg	 SHORT $L153435

; 757  : 							pEdit->SetText( "Demonic" );

  01cc8	68 00 00 00 00	 push	 OFFSET FLAT:$SG153436
  01ccd	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  01cd0	52		 push	 edx
  01cd1	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01cd6	83 c4 08	 add	 esp, 8

; 758  : 						else if ( nAlign <= 56 )

  01cd9	e9 d5 00 00 00	 jmp	 $L153458
$L153435:
  01cde	83 7d b8 38	 cmp	 DWORD PTR _nAlign$153434[ebp], 56 ; 00000038H
  01ce2	7f 16		 jg	 SHORT $L153438

; 759  : 							pEdit->SetText( "Evil" );

  01ce4	68 00 00 00 00	 push	 OFFSET FLAT:$SG153439
  01ce9	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01cec	50		 push	 eax
  01ced	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01cf2	83 c4 08	 add	 esp, 8

; 760  : 						else if ( nAlign <= 84 )

  01cf5	e9 b9 00 00 00	 jmp	 $L153458
$L153438:
  01cfa	83 7d b8 54	 cmp	 DWORD PTR _nAlign$153434[ebp], 84 ; 00000054H
  01cfe	7f 16		 jg	 SHORT $L153441

; 761  : 							pEdit->SetText( "Malevolent" );

  01d00	68 00 00 00 00	 push	 OFFSET FLAT:$SG153442
  01d05	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01d08	51		 push	 ecx
  01d09	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01d0e	83 c4 08	 add	 esp, 8

; 762  : 						else if ( nAlign <= 112 )

  01d11	e9 9d 00 00 00	 jmp	 $L153458
$L153441:
  01d16	83 7d b8 70	 cmp	 DWORD PTR _nAlign$153434[ebp], 112 ; 00000070H
  01d1a	7f 16		 jg	 SHORT $L153444

; 763  : 							pEdit->SetText( "Malignant" );

  01d1c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153445
  01d21	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  01d24	52		 push	 edx
  01d25	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01d2a	83 c4 08	 add	 esp, 8

; 764  : 						else if ( nAlign <= 142 )

  01d2d	e9 81 00 00 00	 jmp	 $L153458
$L153444:
  01d32	81 7d b8 8e 00
	00 00		 cmp	 DWORD PTR _nAlign$153434[ebp], 142 ; 0000008eH
  01d39	7f 13		 jg	 SHORT $L153447

; 765  : 							pEdit->SetText( "Neutral" );

  01d3b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153448
  01d40	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01d43	50		 push	 eax
  01d44	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01d49	83 c4 08	 add	 esp, 8

; 766  : 						else if ( nAlign <= 170 )

  01d4c	eb 65		 jmp	 SHORT $L153458
$L153447:
  01d4e	81 7d b8 aa 00
	00 00		 cmp	 DWORD PTR _nAlign$153434[ebp], 170 ; 000000aaH
  01d55	7f 13		 jg	 SHORT $L153450

; 767  : 							pEdit->SetText( "Benign" );

  01d57	68 00 00 00 00	 push	 OFFSET FLAT:$SG153451
  01d5c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01d5f	51		 push	 ecx
  01d60	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01d65	83 c4 08	 add	 esp, 8

; 768  : 						else if ( nAlign <= 198 )

  01d68	eb 49		 jmp	 SHORT $L153458
$L153450:
  01d6a	81 7d b8 c6 00
	00 00		 cmp	 DWORD PTR _nAlign$153434[ebp], 198 ; 000000c6H
  01d71	7f 13		 jg	 SHORT $L153453

; 769  : 							pEdit->SetText( "Benevolent" );

  01d73	68 00 00 00 00	 push	 OFFSET FLAT:$SG153454
  01d78	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  01d7b	52		 push	 edx
  01d7c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01d81	83 c4 08	 add	 esp, 8

; 770  : 						else if ( nAlign <= 226 )

  01d84	eb 2d		 jmp	 SHORT $L153458
$L153453:
  01d86	81 7d b8 e2 00
	00 00		 cmp	 DWORD PTR _nAlign$153434[ebp], 226 ; 000000e2H
  01d8d	7f 13		 jg	 SHORT $L153456

; 771  : 							pEdit->SetText( "Good" );

  01d8f	68 00 00 00 00	 push	 OFFSET FLAT:$SG153457
  01d94	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01d97	50		 push	 eax
  01d98	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01d9d	83 c4 08	 add	 esp, 8

; 772  : 						else

  01da0	eb 11		 jmp	 SHORT $L153458
$L153456:

; 773  : 							pEdit->SetText( "Beatific" );

  01da2	68 00 00 00 00	 push	 OFFSET FLAT:$SG153459
  01da7	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01daa	51		 push	 ecx
  01dab	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01db0	83 c4 08	 add	 esp, 8
$L153458:

; 775  : 					break;

  01db3	e9 f8 22 00 00	 jmp	 $L153391
$L153460:

; 776  : 				case 24:	//	Variable: Combat Movement Rate
; 777  : 					pEdit->SetText( "%d", m_pChar.get_pMovementRate() );

  01db8	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01dbd	e8 00 00 00 00	 call	 ?get_pMovementRate@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pMovementRate
  01dc2	0f bf d0	 movsx	 edx, ax
  01dc5	52		 push	 edx
  01dc6	68 00 00 00 00	 push	 OFFSET FLAT:$SG153461
  01dcb	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01dce	50		 push	 eax
  01dcf	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01dd4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 778  : 					break;

  01dd7	e9 d4 22 00 00	 jmp	 $L153391
$L153462:

; 779  : 				case 25:	//	Variable: Spell Damage Modifier
; 780  : 					pEdit->SetText( "%d%%", m_pChar.get_pSpellMod() );

  01ddc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01de1	e8 00 00 00 00	 call	 ?get_pSpellMod@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSpellMod
  01de6	0f bf c8	 movsx	 ecx, ax
  01de9	51		 push	 ecx
  01dea	68 00 00 00 00	 push	 OFFSET FLAT:$SG153463
  01def	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  01df2	52		 push	 edx
  01df3	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01df8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 781  : 					break;

  01dfb	e9 b0 22 00 00	 jmp	 $L153391
$L153464:

; 782  : 				case 26:	//	Variable: Spell Resistance
; 783  : 					pEdit->SetText( "%s", *m_pChar.get_pSpellResist() );

  01e00	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR $T160706[ebp]
  01e06	50		 push	 eax
  01e07	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01e0c	e8 00 00 00 00	 call	 ?get_pSpellResist@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pSpellResist
  01e11	8b c8		 mov	 ecx, eax
  01e13	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  01e18	50		 push	 eax
  01e19	68 00 00 00 00	 push	 OFFSET FLAT:$SG153466
  01e1e	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01e21	51		 push	 ecx
  01e22	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01e27	83 c4 0c	 add	 esp, 12			; 0000000cH

; 784  : 					break;

  01e2a	e9 81 22 00 00	 jmp	 $L153391
$L153467:

; 785  : 				case 27:	//	Variable: Casting Resistance
; 786  : 					pEdit->SetText( "%s", *m_pChar.get_pCastResist() );

  01e2f	8d 95 98 fe ff
	ff		 lea	 edx, DWORD PTR $T160707[ebp]
  01e35	52		 push	 edx
  01e36	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01e3b	e8 00 00 00 00	 call	 ?get_pCastResist@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pCastResist
  01e40	8b c8		 mov	 ecx, eax
  01e42	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  01e47	50		 push	 eax
  01e48	68 00 00 00 00	 push	 OFFSET FLAT:$SG153469
  01e4d	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01e50	50		 push	 eax
  01e51	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01e56	83 c4 0c	 add	 esp, 12			; 0000000cH

; 787  : 					break;

  01e59	e9 52 22 00 00	 jmp	 $L153391
$L153470:

; 788  : 				case 28:	//	Variable: Armor Rating
; 789  : 					pEdit->SetText( "%d%%", m_pChar.get_pArmorRating() );

  01e5e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01e63	e8 00 00 00 00	 call	 ?get_pArmorRating@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorRating
  01e68	0f bf c8	 movsx	 ecx, ax
  01e6b	51		 push	 ecx
  01e6c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153471
  01e71	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  01e74	52		 push	 edx
  01e75	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01e7a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 790  : 					break;

  01e7d	e9 2e 22 00 00	 jmp	 $L153391
$L153472:

; 791  : 				case 29:	//	Variable: Armor Piercing
; 792  : 					pEdit->SetText( "%d", m_pChar.get_pMeleeArmorPierce().get_nValue() );

  01e82	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR $T160708[ebp]
  01e88	50		 push	 eax
  01e89	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01e8e	e8 00 00 00 00	 call	 ?get_pMeleeArmorPierce@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pMeleeArmorPierce
  01e93	8b c8		 mov	 ecx, eax
  01e95	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  01e9a	50		 push	 eax
  01e9b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153474
  01ea0	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01ea3	51		 push	 ecx
  01ea4	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01ea9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 793  : 					break;

  01eac	e9 ff 21 00 00	 jmp	 $L153391
$L153475:

; 794  : 				case 30:	//	Variable: Attacks per Round
; 795  : 					pEdit->SetText( "%d", m_pChar.get_pAttacksPerRound() );

  01eb1	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01eb6	e8 00 00 00 00	 call	 ?get_pAttacksPerRound@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pAttacksPerRound
  01ebb	0f bf d0	 movsx	 edx, ax
  01ebe	52		 push	 edx
  01ebf	68 00 00 00 00	 push	 OFFSET FLAT:$SG153476
  01ec4	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01ec7	50		 push	 eax
  01ec8	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01ecd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 796  : 					break;

  01ed0	e9 db 21 00 00	 jmp	 $L153391
$L153477:

; 797  : 				case 31:	//	Variable: Dodges per Round
; 798  : 					pEdit->SetText( "%d", m_pChar.get_pDodgesPerRound() );

  01ed5	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01eda	e8 00 00 00 00	 call	 ?get_pDodgesPerRound@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pDodgesPerRound
  01edf	0f bf c8	 movsx	 ecx, ax
  01ee2	51		 push	 ecx
  01ee3	68 00 00 00 00	 push	 OFFSET FLAT:$SG153478
  01ee8	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  01eeb	52		 push	 edx
  01eec	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01ef1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 799  : 					break;

  01ef4	e9 b7 21 00 00	 jmp	 $L153391
$L153479:

; 800  : 				case 32:	//	Variable: Blocks per Round
; 801  : 					pEdit->SetText( "%d", m_pChar.get_pBlocksPerRound() );

  01ef9	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01efe	e8 00 00 00 00	 call	 ?get_pBlocksPerRound@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pBlocksPerRound
  01f03	0f bf c0	 movsx	 eax, ax
  01f06	50		 push	 eax
  01f07	68 00 00 00 00	 push	 OFFSET FLAT:$SG153480
  01f0c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01f0f	51		 push	 ecx
  01f10	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01f15	83 c4 0c	 add	 esp, 12			; 0000000cH

; 802  : 					break;

  01f18	e9 93 21 00 00	 jmp	 $L153391
$L153481:

; 803  : 				case 33:	//	Variable: Damage per Attack
; 804  : 					pEdit->SetText( "%d - %d", m_pChar.get_pAttackDamageMin(), m_pChar.get_pAttackDamageMax() );

  01f1d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01f22	e8 00 00 00 00	 call	 ?get_pAttackDamageMax@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pAttackDamageMax
  01f27	0f bf d0	 movsx	 edx, ax
  01f2a	52		 push	 edx
  01f2b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01f30	e8 00 00 00 00	 call	 ?get_pAttackDamageMin@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pAttackDamageMin
  01f35	0f bf c0	 movsx	 eax, ax
  01f38	50		 push	 eax
  01f39	68 00 00 00 00	 push	 OFFSET FLAT:$SG153482
  01f3e	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01f41	51		 push	 ecx
  01f42	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01f47	83 c4 10	 add	 esp, 16			; 00000010H

; 805  : 					break;

  01f4a	e9 61 21 00 00	 jmp	 $L153391
$L153483:

; 806  : 				case 34:	//	Variable: Melee Damage Modifier (Base)
; 807  : 					pEdit->SetText( "%d%%", m_pChar.get_pMeleeMod() );

  01f4f	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01f54	e8 00 00 00 00	 call	 ?get_pMeleeMod@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pMeleeMod
  01f59	0f bf d0	 movsx	 edx, ax
  01f5c	52		 push	 edx
  01f5d	68 00 00 00 00	 push	 OFFSET FLAT:$SG153484
  01f62	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  01f65	50		 push	 eax
  01f66	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01f6b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 808  : 					break;

  01f6e	e9 3d 21 00 00	 jmp	 $L153391
$L153485:

; 809  : 				case 35:	//	Variable: Melee Damage Modifier (vs. Good Alignment)
; 810  : 					pEdit->SetText( "%d", m_pChar.get_pGoodMDM().get_nValue() );

  01f73	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T160709[ebp]
  01f79	51		 push	 ecx
  01f7a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01f7f	e8 00 00 00 00	 call	 ?get_pGoodMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pGoodMDM
  01f84	8b c8		 mov	 ecx, eax
  01f86	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  01f8b	50		 push	 eax
  01f8c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153487
  01f91	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  01f94	52		 push	 edx
  01f95	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01f9a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 811  : 					break;

  01f9d	e9 0e 21 00 00	 jmp	 $L153391
$L153488:

; 812  : 				case 36:	//	Variable: Melee Damage Modifier (vs. Evil Alignment)
; 813  : 					pEdit->SetText( "%d", m_pChar.get_pEvilMDM().get_nValue() );

  01fa2	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR $T160710[ebp]
  01fa8	50		 push	 eax
  01fa9	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01fae	e8 00 00 00 00	 call	 ?get_pEvilMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pEvilMDM
  01fb3	8b c8		 mov	 ecx, eax
  01fb5	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  01fba	50		 push	 eax
  01fbb	68 00 00 00 00	 push	 OFFSET FLAT:$SG153490
  01fc0	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01fc3	51		 push	 ecx
  01fc4	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01fc9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 814  : 					break;

  01fcc	e9 df 20 00 00	 jmp	 $L153391
$L153491:

; 815  : 				case 37:	//	Short Sword
; 816  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 0 ) )

  01fd1	6a 00		 push	 0
  01fd3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  01fd8	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  01fdd	50		 push	 eax
  01fde	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T160711[ebp]
  01fe4	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  01fe9	8b c8		 mov	 ecx, eax
  01feb	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  01ff0	0f bf d0	 movsx	 edx, ax
  01ff3	85 d2		 test	 edx, edx
  01ff5	75 0d		 jne	 SHORT $L153494

; 817  : 						pEdit->SetColor( 0x00808080 );

  01ff7	68 80 80 80 00	 push	 8421504			; 00808080H
  01ffc	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  01fff	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153494:

; 818  : 
; 819  : 					pEdit->SetText( "Short Sword" );

  02004	68 00 00 00 00	 push	 OFFSET FLAT:$SG153495
  02009	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  0200c	50		 push	 eax
  0200d	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02012	83 c4 08	 add	 esp, 8

; 820  : 					break;

  02015	e9 96 20 00 00	 jmp	 $L153391
$L153496:

; 821  : 				case 38:	//	Short Sword Level
; 822  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 0 ) )

  0201a	6a 00		 push	 0
  0201c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02021	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02026	50		 push	 eax
  02027	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR $T160712[ebp]
  0202d	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02032	8b c8		 mov	 ecx, eax
  02034	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02039	0f bf c8	 movsx	 ecx, ax
  0203c	85 c9		 test	 ecx, ecx
  0203e	74 34		 je	 SHORT $L153499

; 823  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 0 ) );

  02040	6a 00		 push	 0
  02042	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02047	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0204c	50		 push	 eax
  0204d	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T160713[ebp]
  02053	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02058	8b c8		 mov	 ecx, eax
  0205a	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0205f	0f bf d0	 movsx	 edx, ax
  02062	52		 push	 edx
  02063	68 00 00 00 00	 push	 OFFSET FLAT:$SG153502
  02068	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  0206b	50		 push	 eax
  0206c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02071	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153499:

; 824  : 					break;

  02074	e9 37 20 00 00	 jmp	 $L153391
$L153503:

; 825  : 				case 39:	//	Long Sword
; 826  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 1 ) )

  02079	6a 01		 push	 1
  0207b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02080	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02085	50		 push	 eax
  02086	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T160714[ebp]
  0208c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02091	8b c8		 mov	 ecx, eax
  02093	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02098	0f bf c8	 movsx	 ecx, ax
  0209b	85 c9		 test	 ecx, ecx
  0209d	75 0d		 jne	 SHORT $L153506

; 827  : 						pEdit->SetColor( 0x00808080 );

  0209f	68 80 80 80 00	 push	 8421504			; 00808080H
  020a4	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  020a7	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153506:

; 828  : 
; 829  : 					pEdit->SetText( "Long Sword" );

  020ac	68 00 00 00 00	 push	 OFFSET FLAT:$SG153507
  020b1	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  020b4	52		 push	 edx
  020b5	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  020ba	83 c4 08	 add	 esp, 8

; 830  : 					break;

  020bd	e9 ee 1f 00 00	 jmp	 $L153391
$L153508:

; 831  : 				case 40:	//	Long Sword Level
; 832  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 1 ) )

  020c2	6a 01		 push	 1
  020c4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  020c9	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  020ce	50		 push	 eax
  020cf	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR $T160715[ebp]
  020d5	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  020da	8b c8		 mov	 ecx, eax
  020dc	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  020e1	0f bf c0	 movsx	 eax, ax
  020e4	85 c0		 test	 eax, eax
  020e6	74 34		 je	 SHORT $L153511

; 833  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 1 ) );

  020e8	6a 01		 push	 1
  020ea	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  020ef	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  020f4	50		 push	 eax
  020f5	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR $T160716[ebp]
  020fb	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02100	8b c8		 mov	 ecx, eax
  02102	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02107	0f bf c8	 movsx	 ecx, ax
  0210a	51		 push	 ecx
  0210b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153514
  02110	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  02113	52		 push	 edx
  02114	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02119	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153511:

; 834  : 					break;

  0211c	e9 8f 1f 00 00	 jmp	 $L153391
$L153515:

; 835  : 				case 41:	//	2-Handed Sword
; 836  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 2 ) )

  02121	6a 02		 push	 2
  02123	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02128	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0212d	50		 push	 eax
  0212e	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T160717[ebp]
  02134	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02139	8b c8		 mov	 ecx, eax
  0213b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02140	0f bf c0	 movsx	 eax, ax
  02143	85 c0		 test	 eax, eax
  02145	75 0d		 jne	 SHORT $L153518

; 837  : 						pEdit->SetColor( 0x00808080 );

  02147	68 80 80 80 00	 push	 8421504			; 00808080H
  0214c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0214f	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153518:

; 838  : 
; 839  : 					pEdit->SetText( "2-Handed Sword" );

  02154	68 00 00 00 00	 push	 OFFSET FLAT:$SG153519
  02159	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0215c	51		 push	 ecx
  0215d	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02162	83 c4 08	 add	 esp, 8

; 840  : 					break;

  02165	e9 46 1f 00 00	 jmp	 $L153391
$L153520:

; 841  : 				case 42:	//	2-Handed Sword Level
; 842  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 2 ) )

  0216a	6a 02		 push	 2
  0216c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02171	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02176	50		 push	 eax
  02177	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T160718[ebp]
  0217d	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02182	8b c8		 mov	 ecx, eax
  02184	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02189	0f bf d0	 movsx	 edx, ax
  0218c	85 d2		 test	 edx, edx
  0218e	74 34		 je	 SHORT $L153523

; 843  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 2 ) );

  02190	6a 02		 push	 2
  02192	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02197	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0219c	50		 push	 eax
  0219d	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T160719[ebp]
  021a3	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  021a8	8b c8		 mov	 ecx, eax
  021aa	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  021af	0f bf c0	 movsx	 eax, ax
  021b2	50		 push	 eax
  021b3	68 00 00 00 00	 push	 OFFSET FLAT:$SG153526
  021b8	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  021bb	51		 push	 ecx
  021bc	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  021c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153523:

; 844  : 					break;

  021c4	e9 e7 1e 00 00	 jmp	 $L153391
$L153527:

; 845  : 				case 43:
; 846  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 3 ) )

  021c9	6a 03		 push	 3
  021cb	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  021d0	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  021d5	50		 push	 eax
  021d6	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T160720[ebp]
  021dc	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  021e1	8b c8		 mov	 ecx, eax
  021e3	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  021e8	0f bf d0	 movsx	 edx, ax
  021eb	85 d2		 test	 edx, edx
  021ed	75 0d		 jne	 SHORT $L153530

; 847  : 						pEdit->SetColor( 0x00808080 );

  021ef	68 80 80 80 00	 push	 8421504			; 00808080H
  021f4	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  021f7	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153530:

; 848  : 
; 849  : 					pEdit->SetText( "Dagger" );

  021fc	68 00 00 00 00	 push	 OFFSET FLAT:$SG153531
  02201	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  02204	50		 push	 eax
  02205	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0220a	83 c4 08	 add	 esp, 8

; 850  : 					break;

  0220d	e9 9e 1e 00 00	 jmp	 $L153391
$L153532:

; 851  : 				case 44:
; 852  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 3 ) )

  02212	6a 03		 push	 3
  02214	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02219	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0221e	50		 push	 eax
  0221f	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T160721[ebp]
  02225	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0222a	8b c8		 mov	 ecx, eax
  0222c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02231	0f bf c8	 movsx	 ecx, ax
  02234	85 c9		 test	 ecx, ecx
  02236	74 34		 je	 SHORT $L153535

; 853  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 3 ) );

  02238	6a 03		 push	 3
  0223a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0223f	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02244	50		 push	 eax
  02245	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T160722[ebp]
  0224b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02250	8b c8		 mov	 ecx, eax
  02252	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02257	0f bf d0	 movsx	 edx, ax
  0225a	52		 push	 edx
  0225b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153538
  02260	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  02263	50		 push	 eax
  02264	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02269	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153535:

; 854  : 					break;

  0226c	e9 3f 1e 00 00	 jmp	 $L153391
$L153539:

; 855  : 				case 45:
; 856  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 4 ) )

  02271	6a 04		 push	 4
  02273	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02278	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0227d	50		 push	 eax
  0227e	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T160723[ebp]
  02284	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02289	8b c8		 mov	 ecx, eax
  0228b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02290	0f bf c8	 movsx	 ecx, ax
  02293	85 c9		 test	 ecx, ecx
  02295	75 0d		 jne	 SHORT $L153542

; 857  : 						pEdit->SetColor( 0x00808080 );

  02297	68 80 80 80 00	 push	 8421504			; 00808080H
  0229c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0229f	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153542:

; 858  : 
; 859  : 					pEdit->SetText( "Axe" );

  022a4	68 00 00 00 00	 push	 OFFSET FLAT:$SG153543
  022a9	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  022ac	52		 push	 edx
  022ad	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  022b2	83 c4 08	 add	 esp, 8

; 860  : 					break;

  022b5	e9 f6 1d 00 00	 jmp	 $L153391
$L153544:

; 861  : 				case 46:
; 862  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 4 ) )

  022ba	6a 04		 push	 4
  022bc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  022c1	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  022c6	50		 push	 eax
  022c7	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T160724[ebp]
  022cd	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  022d2	8b c8		 mov	 ecx, eax
  022d4	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  022d9	0f bf c0	 movsx	 eax, ax
  022dc	85 c0		 test	 eax, eax
  022de	74 34		 je	 SHORT $L153547

; 863  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 4 ) );

  022e0	6a 04		 push	 4
  022e2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  022e7	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  022ec	50		 push	 eax
  022ed	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T160725[ebp]
  022f3	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  022f8	8b c8		 mov	 ecx, eax
  022fa	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  022ff	0f bf c8	 movsx	 ecx, ax
  02302	51		 push	 ecx
  02303	68 00 00 00 00	 push	 OFFSET FLAT:$SG153550
  02308	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  0230b	52		 push	 edx
  0230c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02311	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153547:

; 864  : 					break;

  02314	e9 97 1d 00 00	 jmp	 $L153391
$L153551:

; 865  : 				case 47:
; 866  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 5 ) )

  02319	6a 05		 push	 5
  0231b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02320	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02325	50		 push	 eax
  02326	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR $T160726[ebp]
  0232c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02331	8b c8		 mov	 ecx, eax
  02333	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02338	0f bf c0	 movsx	 eax, ax
  0233b	85 c0		 test	 eax, eax
  0233d	75 0d		 jne	 SHORT $L153554

; 867  : 						pEdit->SetColor( 0x00808080 );

  0233f	68 80 80 80 00	 push	 8421504			; 00808080H
  02344	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02347	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153554:

; 868  : 
; 869  : 					pEdit->SetText( "Club" );

  0234c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153555
  02351	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02354	51		 push	 ecx
  02355	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0235a	83 c4 08	 add	 esp, 8

; 870  : 					break;

  0235d	e9 4e 1d 00 00	 jmp	 $L153391
$L153556:

; 871  : 				case 48:
; 872  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 5 ) )

  02362	6a 05		 push	 5
  02364	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02369	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0236e	50		 push	 eax
  0236f	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T160727[ebp]
  02375	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0237a	8b c8		 mov	 ecx, eax
  0237c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02381	0f bf d0	 movsx	 edx, ax
  02384	85 d2		 test	 edx, edx
  02386	74 34		 je	 SHORT $L153559

; 873  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 5 ) );

  02388	6a 05		 push	 5
  0238a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0238f	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02394	50		 push	 eax
  02395	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR $T160728[ebp]
  0239b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  023a0	8b c8		 mov	 ecx, eax
  023a2	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  023a7	0f bf c0	 movsx	 eax, ax
  023aa	50		 push	 eax
  023ab	68 00 00 00 00	 push	 OFFSET FLAT:$SG153562
  023b0	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  023b3	51		 push	 ecx
  023b4	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  023b9	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153559:

; 874  : 					break;

  023bc	e9 ef 1c 00 00	 jmp	 $L153391
$L153563:

; 875  : 				case 49:
; 876  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 6 ) )

  023c1	6a 06		 push	 6
  023c3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  023c8	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  023cd	50		 push	 eax
  023ce	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR $T160729[ebp]
  023d4	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  023d9	8b c8		 mov	 ecx, eax
  023db	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  023e0	0f bf d0	 movsx	 edx, ax
  023e3	85 d2		 test	 edx, edx
  023e5	75 0d		 jne	 SHORT $L153566

; 877  : 						pEdit->SetColor( 0x00808080 );

  023e7	68 80 80 80 00	 push	 8421504			; 00808080H
  023ec	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  023ef	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153566:

; 878  : 
; 879  : 					pEdit->SetText( "Mace" );

  023f4	68 00 00 00 00	 push	 OFFSET FLAT:$SG153567
  023f9	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  023fc	50		 push	 eax
  023fd	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02402	83 c4 08	 add	 esp, 8

; 880  : 					break;

  02405	e9 a6 1c 00 00	 jmp	 $L153391
$L153568:

; 881  : 				case 50:
; 882  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 6 ) )

  0240a	6a 06		 push	 6
  0240c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02411	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02416	50		 push	 eax
  02417	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR $T160730[ebp]
  0241d	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02422	8b c8		 mov	 ecx, eax
  02424	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02429	0f bf c8	 movsx	 ecx, ax
  0242c	85 c9		 test	 ecx, ecx
  0242e	74 34		 je	 SHORT $L153571

; 883  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 6 ) );

  02430	6a 06		 push	 6
  02432	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02437	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0243c	50		 push	 eax
  0243d	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T160731[ebp]
  02443	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02448	8b c8		 mov	 ecx, eax
  0244a	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0244f	0f bf d0	 movsx	 edx, ax
  02452	52		 push	 edx
  02453	68 00 00 00 00	 push	 OFFSET FLAT:$SG153574
  02458	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  0245b	50		 push	 eax
  0245c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02461	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153571:

; 884  : 					break;

  02464	e9 47 1c 00 00	 jmp	 $L153391
$L153575:

; 885  : 				case 51:
; 886  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 7 ) )

  02469	6a 07		 push	 7
  0246b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02470	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02475	50		 push	 eax
  02476	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T160732[ebp]
  0247c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02481	8b c8		 mov	 ecx, eax
  02483	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02488	0f bf c8	 movsx	 ecx, ax
  0248b	85 c9		 test	 ecx, ecx
  0248d	75 0d		 jne	 SHORT $L153578

; 887  : 						pEdit->SetColor( 0x00808080 );

  0248f	68 80 80 80 00	 push	 8421504			; 00808080H
  02494	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02497	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153578:

; 888  : 
; 889  : 					pEdit->SetText( "Unarmed Combat" );

  0249c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153579
  024a1	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  024a4	52		 push	 edx
  024a5	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  024aa	83 c4 08	 add	 esp, 8

; 890  : 					break;

  024ad	e9 fe 1b 00 00	 jmp	 $L153391
$L153580:

; 891  : 				case 52:
; 892  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 7 ) )

  024b2	6a 07		 push	 7
  024b4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  024b9	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  024be	50		 push	 eax
  024bf	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T160733[ebp]
  024c5	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  024ca	8b c8		 mov	 ecx, eax
  024cc	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  024d1	0f bf c0	 movsx	 eax, ax
  024d4	85 c0		 test	 eax, eax
  024d6	74 34		 je	 SHORT $L153583

; 893  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 7 ) );

  024d8	6a 07		 push	 7
  024da	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  024df	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  024e4	50		 push	 eax
  024e5	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR $T160734[ebp]
  024eb	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  024f0	8b c8		 mov	 ecx, eax
  024f2	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  024f7	0f bf c8	 movsx	 ecx, ax
  024fa	51		 push	 ecx
  024fb	68 00 00 00 00	 push	 OFFSET FLAT:$SG153586
  02500	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  02503	52		 push	 edx
  02504	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02509	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153583:

; 894  : 					break;

  0250c	e9 9f 1b 00 00	 jmp	 $L153391
$L153587:

; 895  : 				case 53:
; 896  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 8 ) )

  02511	6a 08		 push	 8
  02513	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02518	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0251d	50		 push	 eax
  0251e	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR $T160735[ebp]
  02524	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02529	8b c8		 mov	 ecx, eax
  0252b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02530	0f bf c0	 movsx	 eax, ax
  02533	85 c0		 test	 eax, eax
  02535	75 0d		 jne	 SHORT $L153590

; 897  : 						pEdit->SetColor( 0x00808080 );

  02537	68 80 80 80 00	 push	 8421504			; 00808080H
  0253c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0253f	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153590:

; 898  : 
; 899  : 					pEdit->SetText( "Throwing" );

  02544	68 00 00 00 00	 push	 OFFSET FLAT:$SG153591
  02549	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0254c	51		 push	 ecx
  0254d	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02552	83 c4 08	 add	 esp, 8

; 900  : 					break;

  02555	e9 56 1b 00 00	 jmp	 $L153391
$L153592:

; 901  : 				case 54:
; 902  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 8 ) )

  0255a	6a 08		 push	 8
  0255c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02561	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02566	50		 push	 eax
  02567	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR $T160736[ebp]
  0256d	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02572	8b c8		 mov	 ecx, eax
  02574	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02579	0f bf d0	 movsx	 edx, ax
  0257c	85 d2		 test	 edx, edx
  0257e	74 34		 je	 SHORT $L153595

; 903  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 8 ) );

  02580	6a 08		 push	 8
  02582	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02587	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0258c	50		 push	 eax
  0258d	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T160737[ebp]
  02593	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02598	8b c8		 mov	 ecx, eax
  0259a	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0259f	0f bf c0	 movsx	 eax, ax
  025a2	50		 push	 eax
  025a3	68 00 00 00 00	 push	 OFFSET FLAT:$SG153598
  025a8	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  025ab	51		 push	 ecx
  025ac	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  025b1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153595:

; 904  : 					break;

  025b4	e9 f7 1a 00 00	 jmp	 $L153391
$L153599:

; 905  : 				case 55:
; 906  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 9 ) )

  025b9	6a 09		 push	 9
  025bb	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  025c0	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  025c5	50		 push	 eax
  025c6	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR $T160738[ebp]
  025cc	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  025d1	8b c8		 mov	 ecx, eax
  025d3	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  025d8	0f bf d0	 movsx	 edx, ax
  025db	85 d2		 test	 edx, edx
  025dd	75 0d		 jne	 SHORT $L153602

; 907  : 						pEdit->SetColor( 0x00808080 );

  025df	68 80 80 80 00	 push	 8421504			; 00808080H
  025e4	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  025e7	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153602:

; 908  : 
; 909  : 					pEdit->SetText( "Acrobatics" );

  025ec	68 00 00 00 00	 push	 OFFSET FLAT:$SG153603
  025f1	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  025f4	50		 push	 eax
  025f5	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  025fa	83 c4 08	 add	 esp, 8

; 910  : 					break;

  025fd	e9 ae 1a 00 00	 jmp	 $L153391
$L153604:

; 911  : 				case 56:
; 912  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 9 ) )

  02602	6a 09		 push	 9
  02604	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02609	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0260e	50		 push	 eax
  0260f	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T160739[ebp]
  02615	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0261a	8b c8		 mov	 ecx, eax
  0261c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02621	0f bf c8	 movsx	 ecx, ax
  02624	85 c9		 test	 ecx, ecx
  02626	74 34		 je	 SHORT $L153607

; 913  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 9 ) );

  02628	6a 09		 push	 9
  0262a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0262f	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02634	50		 push	 eax
  02635	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T160740[ebp]
  0263b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02640	8b c8		 mov	 ecx, eax
  02642	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02647	0f bf d0	 movsx	 edx, ax
  0264a	52		 push	 edx
  0264b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153610
  02650	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  02653	50		 push	 eax
  02654	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02659	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153607:

; 914  : 					break;

  0265c	e9 4f 1a 00 00	 jmp	 $L153391
$L153611:

; 915  : 				case 57:
; 916  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 10 ) )

  02661	6a 0a		 push	 10			; 0000000aH
  02663	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02668	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0266d	50		 push	 eax
  0266e	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T160741[ebp]
  02674	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02679	8b c8		 mov	 ecx, eax
  0267b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02680	0f bf c8	 movsx	 ecx, ax
  02683	85 c9		 test	 ecx, ecx
  02685	75 0d		 jne	 SHORT $L153614

; 917  : 						pEdit->SetColor( 0x00808080 );

  02687	68 80 80 80 00	 push	 8421504			; 00808080H
  0268c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0268f	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153614:

; 918  : 
; 919  : 					pEdit->SetText( "Maul" );

  02694	68 00 00 00 00	 push	 OFFSET FLAT:$SG153615
  02699	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  0269c	52		 push	 edx
  0269d	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  026a2	83 c4 08	 add	 esp, 8

; 920  : 					break;

  026a5	e9 06 1a 00 00	 jmp	 $L153391
$L153616:

; 921  : 				case 58:
; 922  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 10 ) )

  026aa	6a 0a		 push	 10			; 0000000aH
  026ac	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  026b1	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  026b6	50		 push	 eax
  026b7	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR $T160742[ebp]
  026bd	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  026c2	8b c8		 mov	 ecx, eax
  026c4	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  026c9	0f bf c0	 movsx	 eax, ax
  026cc	85 c0		 test	 eax, eax
  026ce	74 34		 je	 SHORT $L153619

; 923  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 10 ) );

  026d0	6a 0a		 push	 10			; 0000000aH
  026d2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  026d7	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  026dc	50		 push	 eax
  026dd	8d 8d 08 fe ff
	ff		 lea	 ecx, DWORD PTR $T160743[ebp]
  026e3	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  026e8	8b c8		 mov	 ecx, eax
  026ea	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  026ef	0f bf c8	 movsx	 ecx, ax
  026f2	51		 push	 ecx
  026f3	68 00 00 00 00	 push	 OFFSET FLAT:$SG153622
  026f8	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  026fb	52		 push	 edx
  026fc	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02701	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153619:

; 924  : 					break;

  02704	e9 a7 19 00 00	 jmp	 $L153391
$L153623:

; 925  : 				case 59:
; 926  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 11 ) )

  02709	6a 0b		 push	 11			; 0000000bH
  0270b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02710	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02715	50		 push	 eax
  02716	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T160744[ebp]
  0271c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02721	8b c8		 mov	 ecx, eax
  02723	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02728	0f bf c0	 movsx	 eax, ax
  0272b	85 c0		 test	 eax, eax
  0272d	75 0d		 jne	 SHORT $L153626

; 927  : 						pEdit->SetColor( 0x00808080 );

  0272f	68 80 80 80 00	 push	 8421504			; 00808080H
  02734	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02737	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153626:

; 928  : 
; 929  : 					pEdit->SetText( "Sorcery" );

  0273c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153627
  02741	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02744	51		 push	 ecx
  02745	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0274a	83 c4 08	 add	 esp, 8

; 930  : 					break;

  0274d	e9 5e 19 00 00	 jmp	 $L153391
$L153628:

; 931  : 				case 60:
; 932  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 11 ) )

  02752	6a 0b		 push	 11			; 0000000bH
  02754	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02759	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0275e	50		 push	 eax
  0275f	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR $T160745[ebp]
  02765	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0276a	8b c8		 mov	 ecx, eax
  0276c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02771	0f bf d0	 movsx	 edx, ax
  02774	85 d2		 test	 edx, edx
  02776	74 34		 je	 SHORT $L153631

; 933  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 11 ) );

  02778	6a 0b		 push	 11			; 0000000bH
  0277a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0277f	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02784	50		 push	 eax
  02785	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR $T160746[ebp]
  0278b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02790	8b c8		 mov	 ecx, eax
  02792	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02797	0f bf c0	 movsx	 eax, ax
  0279a	50		 push	 eax
  0279b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153634
  027a0	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  027a3	51		 push	 ecx
  027a4	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  027a9	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153631:

; 934  : 					break;

  027ac	e9 ff 18 00 00	 jmp	 $L153391
$L153635:

; 935  : 				case 61:
; 936  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 12 ) )

  027b1	6a 0c		 push	 12			; 0000000cH
  027b3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  027b8	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  027bd	50		 push	 eax
  027be	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR $T160747[ebp]
  027c4	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  027c9	8b c8		 mov	 ecx, eax
  027cb	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  027d0	0f bf d0	 movsx	 edx, ax
  027d3	85 d2		 test	 edx, edx
  027d5	75 0d		 jne	 SHORT $L153638

; 937  : 						pEdit->SetColor( 0x00808080 );

  027d7	68 80 80 80 00	 push	 8421504			; 00808080H
  027dc	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  027df	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153638:

; 938  : 
; 939  : 					pEdit->SetText( "Elementalism" );

  027e4	68 00 00 00 00	 push	 OFFSET FLAT:$SG153639
  027e9	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  027ec	50		 push	 eax
  027ed	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  027f2	83 c4 08	 add	 esp, 8

; 940  : 					break;

  027f5	e9 b6 18 00 00	 jmp	 $L153391
$L153640:

; 941  : 				case 62:
; 942  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 12 ) )

  027fa	6a 0c		 push	 12			; 0000000cH
  027fc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02801	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02806	50		 push	 eax
  02807	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR $T160748[ebp]
  0280d	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02812	8b c8		 mov	 ecx, eax
  02814	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02819	0f bf c8	 movsx	 ecx, ax
  0281c	85 c9		 test	 ecx, ecx
  0281e	74 34		 je	 SHORT $L153643

; 943  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 12 ) );

  02820	6a 0c		 push	 12			; 0000000cH
  02822	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02827	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0282c	50		 push	 eax
  0282d	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR $T160749[ebp]
  02833	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02838	8b c8		 mov	 ecx, eax
  0283a	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0283f	0f bf d0	 movsx	 edx, ax
  02842	52		 push	 edx
  02843	68 00 00 00 00	 push	 OFFSET FLAT:$SG153646
  02848	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  0284b	50		 push	 eax
  0284c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02851	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153643:

; 944  : 					break;

  02854	e9 57 18 00 00	 jmp	 $L153391
$L153647:

; 945  : 				case 63:
; 946  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 13 ) )

  02859	6a 0d		 push	 13			; 0000000dH
  0285b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02860	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02865	50		 push	 eax
  02866	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T160750[ebp]
  0286c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02871	8b c8		 mov	 ecx, eax
  02873	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02878	0f bf c8	 movsx	 ecx, ax
  0287b	85 c9		 test	 ecx, ecx
  0287d	75 0d		 jne	 SHORT $L153650

; 947  : 						pEdit->SetColor( 0x00808080 );

  0287f	68 80 80 80 00	 push	 8421504			; 00808080H
  02884	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02887	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153650:

; 948  : 
; 949  : 					pEdit->SetText( "Mysticism" );

  0288c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153651
  02891	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  02894	52		 push	 edx
  02895	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0289a	83 c4 08	 add	 esp, 8

; 950  : 					break;

  0289d	e9 0e 18 00 00	 jmp	 $L153391
$L153652:

; 951  : 				case 64:
; 952  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 13 ) )

  028a2	6a 0d		 push	 13			; 0000000dH
  028a4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  028a9	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  028ae	50		 push	 eax
  028af	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR $T160751[ebp]
  028b5	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  028ba	8b c8		 mov	 ecx, eax
  028bc	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  028c1	0f bf c0	 movsx	 eax, ax
  028c4	85 c0		 test	 eax, eax
  028c6	74 34		 je	 SHORT $L153655

; 953  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 13 ) );

  028c8	6a 0d		 push	 13			; 0000000dH
  028ca	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  028cf	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  028d4	50		 push	 eax
  028d5	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T160752[ebp]
  028db	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  028e0	8b c8		 mov	 ecx, eax
  028e2	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  028e7	0f bf c8	 movsx	 ecx, ax
  028ea	51		 push	 ecx
  028eb	68 00 00 00 00	 push	 OFFSET FLAT:$SG153658
  028f0	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  028f3	52		 push	 edx
  028f4	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  028f9	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153655:

; 954  : 					break;

  028fc	e9 af 17 00 00	 jmp	 $L153391
$L153659:

; 955  : 				case 65:
; 956  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 14 ) )

  02901	6a 0e		 push	 14			; 0000000eH
  02903	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02908	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0290d	50		 push	 eax
  0290e	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR $T160753[ebp]
  02914	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02919	8b c8		 mov	 ecx, eax
  0291b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02920	0f bf c0	 movsx	 eax, ax
  02923	85 c0		 test	 eax, eax
  02925	75 0d		 jne	 SHORT $L153662

; 957  : 						pEdit->SetColor( 0x00808080 );

  02927	68 80 80 80 00	 push	 8421504			; 00808080H
  0292c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0292f	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153662:

; 958  : 
; 959  : 					pEdit->SetText( "Thaumaturgy" );

  02934	68 00 00 00 00	 push	 OFFSET FLAT:$SG153663
  02939	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0293c	51		 push	 ecx
  0293d	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02942	83 c4 08	 add	 esp, 8

; 960  : 					break;

  02945	e9 66 17 00 00	 jmp	 $L153391
$L153664:

; 961  : 				case 66:
; 962  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 14 ) )

  0294a	6a 0e		 push	 14			; 0000000eH
  0294c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02951	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02956	50		 push	 eax
  02957	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T160754[ebp]
  0295d	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02962	8b c8		 mov	 ecx, eax
  02964	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02969	0f bf d0	 movsx	 edx, ax
  0296c	85 d2		 test	 edx, edx
  0296e	74 34		 je	 SHORT $L153667

; 963  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 14 ) );

  02970	6a 0e		 push	 14			; 0000000eH
  02972	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02977	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0297c	50		 push	 eax
  0297d	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR $T160755[ebp]
  02983	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02988	8b c8		 mov	 ecx, eax
  0298a	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0298f	0f bf c0	 movsx	 eax, ax
  02992	50		 push	 eax
  02993	68 00 00 00 00	 push	 OFFSET FLAT:$SG153670
  02998	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0299b	51		 push	 ecx
  0299c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  029a1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153667:

; 964  : 					break;

  029a4	e9 07 17 00 00	 jmp	 $L153391
$L153671:

; 965  : 				case 67:
; 966  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 15 ) )

  029a9	6a 0f		 push	 15			; 0000000fH
  029ab	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  029b0	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  029b5	50		 push	 eax
  029b6	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR $T160756[ebp]
  029bc	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  029c1	8b c8		 mov	 ecx, eax
  029c3	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  029c8	0f bf d0	 movsx	 edx, ax
  029cb	85 d2		 test	 edx, edx
  029cd	75 0d		 jne	 SHORT $L153674

; 967  : 						pEdit->SetColor( 0x00808080 );

  029cf	68 80 80 80 00	 push	 8421504			; 00808080H
  029d4	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  029d7	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153674:

; 968  : 
; 969  : 					pEdit->SetText( "Necromancy" );

  029dc	68 00 00 00 00	 push	 OFFSET FLAT:$SG153675
  029e1	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  029e4	50		 push	 eax
  029e5	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  029ea	83 c4 08	 add	 esp, 8

; 970  : 					break;

  029ed	e9 be 16 00 00	 jmp	 $L153391
$L153676:

; 971  : 				case 68:
; 972  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 15 ) )

  029f2	6a 0f		 push	 15			; 0000000fH
  029f4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  029f9	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  029fe	50		 push	 eax
  029ff	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T160757[ebp]
  02a05	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02a0a	8b c8		 mov	 ecx, eax
  02a0c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02a11	0f bf c8	 movsx	 ecx, ax
  02a14	85 c9		 test	 ecx, ecx
  02a16	74 34		 je	 SHORT $L153679

; 973  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 15 ) );

  02a18	6a 0f		 push	 15			; 0000000fH
  02a1a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02a1f	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02a24	50		 push	 eax
  02a25	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T160758[ebp]
  02a2b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02a30	8b c8		 mov	 ecx, eax
  02a32	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02a37	0f bf d0	 movsx	 edx, ax
  02a3a	52		 push	 edx
  02a3b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153682
  02a40	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  02a43	50		 push	 eax
  02a44	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02a49	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153679:

; 974  : 					break;

  02a4c	e9 5f 16 00 00	 jmp	 $L153391
$L153683:

; 975  : 				case 69:
; 976  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 16 ) )

  02a51	6a 10		 push	 16			; 00000010H
  02a53	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02a58	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02a5d	50		 push	 eax
  02a5e	8d 8d c8 fd ff
	ff		 lea	 ecx, DWORD PTR $T160759[ebp]
  02a64	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02a69	8b c8		 mov	 ecx, eax
  02a6b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02a70	0f bf c8	 movsx	 ecx, ax
  02a73	85 c9		 test	 ecx, ecx
  02a75	75 0d		 jne	 SHORT $L153686

; 977  : 						pEdit->SetColor( 0x00808080 );

  02a77	68 80 80 80 00	 push	 8421504			; 00808080H
  02a7c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02a7f	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153686:

; 978  : 
; 979  : 					pEdit->SetText( "Theurgism" );

  02a84	68 00 00 00 00	 push	 OFFSET FLAT:$SG153687
  02a89	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  02a8c	52		 push	 edx
  02a8d	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02a92	83 c4 08	 add	 esp, 8

; 980  : 					break;

  02a95	e9 16 16 00 00	 jmp	 $L153391
$L153688:

; 981  : 				case 70:
; 982  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 16 ) )

  02a9a	6a 10		 push	 16			; 00000010H
  02a9c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02aa1	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02aa6	50		 push	 eax
  02aa7	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR $T160760[ebp]
  02aad	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02ab2	8b c8		 mov	 ecx, eax
  02ab4	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02ab9	0f bf c0	 movsx	 eax, ax
  02abc	85 c0		 test	 eax, eax
  02abe	74 34		 je	 SHORT $L153691

; 983  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 16 ) );

  02ac0	6a 10		 push	 16			; 00000010H
  02ac2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02ac7	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02acc	50		 push	 eax
  02acd	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T160761[ebp]
  02ad3	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02ad8	8b c8		 mov	 ecx, eax
  02ada	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02adf	0f bf c8	 movsx	 ecx, ax
  02ae2	51		 push	 ecx
  02ae3	68 00 00 00 00	 push	 OFFSET FLAT:$SG153694
  02ae8	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  02aeb	52		 push	 edx
  02aec	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02af1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153691:

; 984  : 					break;

  02af4	e9 b7 15 00 00	 jmp	 $L153391
$L153695:

; 985  : 				case 71:
; 986  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 17 ) )

  02af9	6a 11		 push	 17			; 00000011H
  02afb	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02b00	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02b05	50		 push	 eax
  02b06	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR $T160762[ebp]
  02b0c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02b11	8b c8		 mov	 ecx, eax
  02b13	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02b18	0f bf c0	 movsx	 eax, ax
  02b1b	85 c0		 test	 eax, eax
  02b1d	75 0d		 jne	 SHORT $L153698

; 987  : 						pEdit->SetColor( 0x00808080 );

  02b1f	68 80 80 80 00	 push	 8421504			; 00808080H
  02b24	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02b27	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153698:

; 988  : 
; 989  : 					pEdit->SetText( "Alchemy" );

  02b2c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153699
  02b31	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02b34	51		 push	 ecx
  02b35	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02b3a	83 c4 08	 add	 esp, 8

; 990  : 					break;

  02b3d	e9 6e 15 00 00	 jmp	 $L153391
$L153700:

; 991  : 				case 72:
; 992  : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 17 ) )

  02b42	6a 11		 push	 17			; 00000011H
  02b44	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02b49	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02b4e	50		 push	 eax
  02b4f	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR $T160763[ebp]
  02b55	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02b5a	8b c8		 mov	 ecx, eax
  02b5c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02b61	0f bf d0	 movsx	 edx, ax
  02b64	85 d2		 test	 edx, edx
  02b66	74 34		 je	 SHORT $L153703

; 993  : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 17 ) );

  02b68	6a 11		 push	 17			; 00000011H
  02b6a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02b6f	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02b74	50		 push	 eax
  02b75	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T160764[ebp]
  02b7b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02b80	8b c8		 mov	 ecx, eax
  02b82	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02b87	0f bf c0	 movsx	 eax, ax
  02b8a	50		 push	 eax
  02b8b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153706
  02b90	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02b93	51		 push	 ecx
  02b94	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02b99	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153703:

; 994  : 					break;

  02b9c	e9 0f 15 00 00	 jmp	 $L153391
$L153707:

; 995  : 				case 73:
; 996  : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 18 ) )

  02ba1	6a 12		 push	 18			; 00000012H
  02ba3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02ba8	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02bad	50		 push	 eax
  02bae	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T160765[ebp]
  02bb4	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02bb9	8b c8		 mov	 ecx, eax
  02bbb	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02bc0	0f bf d0	 movsx	 edx, ax
  02bc3	85 d2		 test	 edx, edx
  02bc5	75 0d		 jne	 SHORT $L153710

; 997  : 						pEdit->SetColor( 0x00808080 );

  02bc7	68 80 80 80 00	 push	 8421504			; 00808080H
  02bcc	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02bcf	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153710:

; 998  : 
; 999  : 					pEdit->SetText( "Weaponsmith" );

  02bd4	68 00 00 00 00	 push	 OFFSET FLAT:$SG153711
  02bd9	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  02bdc	50		 push	 eax
  02bdd	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02be2	83 c4 08	 add	 esp, 8

; 1000 : 					break;

  02be5	e9 c6 14 00 00	 jmp	 $L153391
$L153712:

; 1001 : 				case 74:
; 1002 : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 18 ) )

  02bea	6a 12		 push	 18			; 00000012H
  02bec	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02bf1	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02bf6	50		 push	 eax
  02bf7	8d 8d ac fd ff
	ff		 lea	 ecx, DWORD PTR $T160766[ebp]
  02bfd	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02c02	8b c8		 mov	 ecx, eax
  02c04	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02c09	0f bf c8	 movsx	 ecx, ax
  02c0c	85 c9		 test	 ecx, ecx
  02c0e	74 34		 je	 SHORT $L153715

; 1003 : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 18 ) );

  02c10	6a 12		 push	 18			; 00000012H
  02c12	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02c17	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02c1c	50		 push	 eax
  02c1d	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR $T160767[ebp]
  02c23	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02c28	8b c8		 mov	 ecx, eax
  02c2a	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02c2f	0f bf d0	 movsx	 edx, ax
  02c32	52		 push	 edx
  02c33	68 00 00 00 00	 push	 OFFSET FLAT:$SG153718
  02c38	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  02c3b	50		 push	 eax
  02c3c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02c41	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153715:

; 1004 : 					break;

  02c44	e9 67 14 00 00	 jmp	 $L153391
$L153719:

; 1005 : 				case 75:
; 1006 : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 19 ) )

  02c49	6a 13		 push	 19			; 00000013H
  02c4b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02c50	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02c55	50		 push	 eax
  02c56	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T160768[ebp]
  02c5c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02c61	8b c8		 mov	 ecx, eax
  02c63	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02c68	0f bf c8	 movsx	 ecx, ax
  02c6b	85 c9		 test	 ecx, ecx
  02c6d	75 0d		 jne	 SHORT $L153722

; 1007 : 						pEdit->SetColor( 0x00808080 );

  02c6f	68 80 80 80 00	 push	 8421504			; 00808080H
  02c74	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02c77	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153722:

; 1008 : 
; 1009 : 					pEdit->SetText( "Armorsmith" );

  02c7c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153723
  02c81	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  02c84	52		 push	 edx
  02c85	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02c8a	83 c4 08	 add	 esp, 8

; 1010 : 					break;

  02c8d	e9 1e 14 00 00	 jmp	 $L153391
$L153724:

; 1011 : 				case 76:
; 1012 : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 19 ) )

  02c92	6a 13		 push	 19			; 00000013H
  02c94	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02c99	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02c9e	50		 push	 eax
  02c9f	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR $T160769[ebp]
  02ca5	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02caa	8b c8		 mov	 ecx, eax
  02cac	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02cb1	0f bf c0	 movsx	 eax, ax
  02cb4	85 c0		 test	 eax, eax
  02cb6	74 34		 je	 SHORT $L153727

; 1013 : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 19 ) );

  02cb8	6a 13		 push	 19			; 00000013H
  02cba	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02cbf	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02cc4	50		 push	 eax
  02cc5	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T160770[ebp]
  02ccb	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02cd0	8b c8		 mov	 ecx, eax
  02cd2	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02cd7	0f bf c8	 movsx	 ecx, ax
  02cda	51		 push	 ecx
  02cdb	68 00 00 00 00	 push	 OFFSET FLAT:$SG153730
  02ce0	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  02ce3	52		 push	 edx
  02ce4	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02ce9	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153727:

; 1014 : 					break;

  02cec	e9 bf 13 00 00	 jmp	 $L153391
$L153731:

; 1015 : 				case 77:
; 1016 : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 25 ) )

  02cf1	6a 19		 push	 25			; 00000019H
  02cf3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02cf8	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02cfd	50		 push	 eax
  02cfe	8d 8d 98 fd ff
	ff		 lea	 ecx, DWORD PTR $T160771[ebp]
  02d04	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02d09	8b c8		 mov	 ecx, eax
  02d0b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02d10	0f bf c0	 movsx	 eax, ax
  02d13	85 c0		 test	 eax, eax
  02d15	75 0d		 jne	 SHORT $L153734

; 1017 : 						pEdit->SetColor( 0x00808080 );

  02d17	68 80 80 80 00	 push	 8421504			; 00808080H
  02d1c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02d1f	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153734:

; 1018 : 
; 1019 : 					pEdit->SetText( "Pickpocketing" );

  02d24	68 00 00 00 00	 push	 OFFSET FLAT:$SG153735
  02d29	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02d2c	51		 push	 ecx
  02d2d	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02d32	83 c4 08	 add	 esp, 8

; 1020 : 					break;

  02d35	e9 76 13 00 00	 jmp	 $L153391
$L153736:

; 1021 : 				case 78:
; 1022 : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 25 ) )

  02d3a	6a 19		 push	 25			; 00000019H
  02d3c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02d41	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02d46	50		 push	 eax
  02d47	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR $T160772[ebp]
  02d4d	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02d52	8b c8		 mov	 ecx, eax
  02d54	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02d59	0f bf d0	 movsx	 edx, ax
  02d5c	85 d2		 test	 edx, edx
  02d5e	74 34		 je	 SHORT $L153739

; 1023 : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 25 ) );

  02d60	6a 19		 push	 25			; 00000019H
  02d62	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02d67	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02d6c	50		 push	 eax
  02d6d	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR $T160773[ebp]
  02d73	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02d78	8b c8		 mov	 ecx, eax
  02d7a	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02d7f	0f bf c0	 movsx	 eax, ax
  02d82	50		 push	 eax
  02d83	68 00 00 00 00	 push	 OFFSET FLAT:$SG153742
  02d88	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02d8b	51		 push	 ecx
  02d8c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02d91	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153739:

; 1024 : 					break;

  02d94	e9 17 13 00 00	 jmp	 $L153391
$L153743:

; 1025 : 				case 79:
; 1026 : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 26 ) )

  02d99	6a 1a		 push	 26			; 0000001aH
  02d9b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02da0	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02da5	50		 push	 eax
  02da6	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR $T160774[ebp]
  02dac	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02db1	8b c8		 mov	 ecx, eax
  02db3	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02db8	0f bf d0	 movsx	 edx, ax
  02dbb	85 d2		 test	 edx, edx
  02dbd	75 0d		 jne	 SHORT $L153746

; 1027 : 						pEdit->SetColor( 0x00808080 );

  02dbf	68 80 80 80 00	 push	 8421504			; 00808080H
  02dc4	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02dc7	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153746:

; 1028 : 
; 1029 : 					pEdit->SetText( "Disarm Traps" );

  02dcc	68 00 00 00 00	 push	 OFFSET FLAT:$SG153747
  02dd1	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  02dd4	50		 push	 eax
  02dd5	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02dda	83 c4 08	 add	 esp, 8

; 1030 : 					break;

  02ddd	e9 ce 12 00 00	 jmp	 $L153391
$L153748:

; 1031 : 				case 80:
; 1032 : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 26 ) )

  02de2	6a 1a		 push	 26			; 0000001aH
  02de4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02de9	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02dee	50		 push	 eax
  02def	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T160775[ebp]
  02df5	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02dfa	8b c8		 mov	 ecx, eax
  02dfc	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02e01	0f bf c8	 movsx	 ecx, ax
  02e04	85 c9		 test	 ecx, ecx
  02e06	74 34		 je	 SHORT $L153751

; 1033 : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 26 ) );

  02e08	6a 1a		 push	 26			; 0000001aH
  02e0a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02e0f	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02e14	50		 push	 eax
  02e15	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR $T160776[ebp]
  02e1b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02e20	8b c8		 mov	 ecx, eax
  02e22	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02e27	0f bf d0	 movsx	 edx, ax
  02e2a	52		 push	 edx
  02e2b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153754
  02e30	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  02e33	50		 push	 eax
  02e34	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02e39	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153751:

; 1034 : 					break;

  02e3c	e9 6f 12 00 00	 jmp	 $L153391
$L153755:

; 1035 : 				case 81:
; 1036 : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 27 ) )

  02e41	6a 1b		 push	 27			; 0000001bH
  02e43	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02e48	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02e4d	50		 push	 eax
  02e4e	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T160777[ebp]
  02e54	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02e59	8b c8		 mov	 ecx, eax
  02e5b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02e60	0f bf c8	 movsx	 ecx, ax
  02e63	85 c9		 test	 ecx, ecx
  02e65	75 0d		 jne	 SHORT $L153758

; 1037 : 						pEdit->SetColor( 0x00808080 );

  02e67	68 80 80 80 00	 push	 8421504			; 00808080H
  02e6c	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02e6f	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153758:

; 1038 : 
; 1039 : 					pEdit->SetText( "Lockpicking" );

  02e74	68 00 00 00 00	 push	 OFFSET FLAT:$SG153759
  02e79	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  02e7c	52		 push	 edx
  02e7d	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02e82	83 c4 08	 add	 esp, 8

; 1040 : 					break;

  02e85	e9 26 12 00 00	 jmp	 $L153391
$L153760:

; 1041 : 				case 82:
; 1042 : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 27 ) )

  02e8a	6a 1b		 push	 27			; 0000001bH
  02e8c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02e91	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02e96	50		 push	 eax
  02e97	8d 8d 7c fd ff
	ff		 lea	 ecx, DWORD PTR $T160778[ebp]
  02e9d	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02ea2	8b c8		 mov	 ecx, eax
  02ea4	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02ea9	0f bf c0	 movsx	 eax, ax
  02eac	85 c0		 test	 eax, eax
  02eae	74 34		 je	 SHORT $L153763

; 1043 : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 27 ) );

  02eb0	6a 1b		 push	 27			; 0000001bH
  02eb2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02eb7	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02ebc	50		 push	 eax
  02ebd	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR $T160779[ebp]
  02ec3	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02ec8	8b c8		 mov	 ecx, eax
  02eca	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02ecf	0f bf c8	 movsx	 ecx, ax
  02ed2	51		 push	 ecx
  02ed3	68 00 00 00 00	 push	 OFFSET FLAT:$SG153766
  02ed8	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  02edb	52		 push	 edx
  02edc	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02ee1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153763:

; 1044 : 					break;

  02ee4	e9 c7 11 00 00	 jmp	 $L153391
$L153767:

; 1045 : 				case 83:
; 1046 : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 28 ) )

  02ee9	6a 1c		 push	 28			; 0000001cH
  02eeb	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02ef0	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02ef5	50		 push	 eax
  02ef6	8d 8d 74 fd ff
	ff		 lea	 ecx, DWORD PTR $T160780[ebp]
  02efc	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02f01	8b c8		 mov	 ecx, eax
  02f03	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02f08	0f bf c0	 movsx	 eax, ax
  02f0b	85 c0		 test	 eax, eax
  02f0d	75 0d		 jne	 SHORT $L153770

; 1047 : 						pEdit->SetColor( 0x00808080 );

  02f0f	68 80 80 80 00	 push	 8421504			; 00808080H
  02f14	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02f17	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153770:

; 1048 : 
; 1049 : 					pEdit->SetText( "Meditation" );

  02f1c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153771
  02f21	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02f24	51		 push	 ecx
  02f25	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02f2a	83 c4 08	 add	 esp, 8

; 1050 : 					break;

  02f2d	e9 7e 11 00 00	 jmp	 $L153391
$L153772:

; 1051 : 				case 84:
; 1052 : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 28 ) )

  02f32	6a 1c		 push	 28			; 0000001cH
  02f34	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02f39	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02f3e	50		 push	 eax
  02f3f	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR $T160781[ebp]
  02f45	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02f4a	8b c8		 mov	 ecx, eax
  02f4c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02f51	0f bf d0	 movsx	 edx, ax
  02f54	85 d2		 test	 edx, edx
  02f56	74 34		 je	 SHORT $L153775

; 1053 : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 28 ) );

  02f58	6a 1c		 push	 28			; 0000001cH
  02f5a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02f5f	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02f64	50		 push	 eax
  02f65	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR $T160782[ebp]
  02f6b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02f70	8b c8		 mov	 ecx, eax
  02f72	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02f77	0f bf c0	 movsx	 eax, ax
  02f7a	50		 push	 eax
  02f7b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153778
  02f80	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02f83	51		 push	 ecx
  02f84	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02f89	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153775:

; 1054 : 					break;

  02f8c	e9 1f 11 00 00	 jmp	 $L153391
$L153779:

; 1055 : 				case 85:
; 1056 : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 29 ) )

  02f91	6a 1d		 push	 29			; 0000001dH
  02f93	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02f98	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02f9d	50		 push	 eax
  02f9e	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR $T160783[ebp]
  02fa4	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02fa9	8b c8		 mov	 ecx, eax
  02fab	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02fb0	0f bf d0	 movsx	 edx, ax
  02fb3	85 d2		 test	 edx, edx
  02fb5	75 0d		 jne	 SHORT $L153782

; 1057 : 						pEdit->SetColor( 0x00808080 );

  02fb7	68 80 80 80 00	 push	 8421504			; 00808080H
  02fbc	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  02fbf	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153782:

; 1058 : 
; 1059 : 					pEdit->SetText( "Critical Strike" );

  02fc4	68 00 00 00 00	 push	 OFFSET FLAT:$SG153783
  02fc9	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  02fcc	50		 push	 eax
  02fcd	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  02fd2	83 c4 08	 add	 esp, 8

; 1060 : 					break;

  02fd5	e9 d6 10 00 00	 jmp	 $L153391
$L153784:

; 1061 : 				case 86:
; 1062 : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 29 ) )

  02fda	6a 1d		 push	 29			; 0000001dH
  02fdc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  02fe1	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  02fe6	50		 push	 eax
  02fe7	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR $T160784[ebp]
  02fed	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  02ff2	8b c8		 mov	 ecx, eax
  02ff4	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  02ff9	0f bf c8	 movsx	 ecx, ax
  02ffc	85 c9		 test	 ecx, ecx
  02ffe	74 34		 je	 SHORT $L153787

; 1063 : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 29 ) );

  03000	6a 1d		 push	 29			; 0000001dH
  03002	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03007	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0300c	50		 push	 eax
  0300d	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR $T160785[ebp]
  03013	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03018	8b c8		 mov	 ecx, eax
  0301a	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0301f	0f bf d0	 movsx	 edx, ax
  03022	52		 push	 edx
  03023	68 00 00 00 00	 push	 OFFSET FLAT:$SG153790
  03028	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  0302b	50		 push	 eax
  0302c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03031	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153787:

; 1064 : 					break;

  03034	e9 77 10 00 00	 jmp	 $L153391
$L153791:

; 1065 : 				case 87:
; 1066 : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 30 ) )

  03039	6a 1e		 push	 30			; 0000001eH
  0303b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03040	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  03045	50		 push	 eax
  03046	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR $T160786[ebp]
  0304c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03051	8b c8		 mov	 ecx, eax
  03053	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03058	0f bf c8	 movsx	 ecx, ax
  0305b	85 c9		 test	 ecx, ecx
  0305d	75 0d		 jne	 SHORT $L153794

; 1067 : 						pEdit->SetColor( 0x00808080 );

  0305f	68 80 80 80 00	 push	 8421504			; 00808080H
  03064	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03067	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L153794:

; 1068 : 
; 1069 : 					pEdit->SetText( "Shield Usage" );

  0306c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153795
  03071	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  03074	52		 push	 edx
  03075	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0307a	83 c4 08	 add	 esp, 8

; 1070 : 					break;

  0307d	e9 2e 10 00 00	 jmp	 $L153391
$L153796:

; 1071 : 				case 88:
; 1072 : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 30 ) )

  03082	6a 1e		 push	 30			; 0000001eH
  03084	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03089	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0308e	50		 push	 eax
  0308f	8d 8d 58 fd ff
	ff		 lea	 ecx, DWORD PTR $T160787[ebp]
  03095	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0309a	8b c8		 mov	 ecx, eax
  0309c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  030a1	0f bf c0	 movsx	 eax, ax
  030a4	85 c0		 test	 eax, eax
  030a6	74 34		 je	 SHORT $L153799

; 1073 : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 30 ) );

  030a8	6a 1e		 push	 30			; 0000001eH
  030aa	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  030af	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  030b4	50		 push	 eax
  030b5	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T160788[ebp]
  030bb	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  030c0	8b c8		 mov	 ecx, eax
  030c2	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  030c7	0f bf c8	 movsx	 ecx, ax
  030ca	51		 push	 ecx
  030cb	68 00 00 00 00	 push	 OFFSET FLAT:$SG153802
  030d0	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  030d3	52		 push	 edx
  030d4	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  030d9	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153799:

; 1074 : 					break;

  030dc	e9 cf 0f 00 00	 jmp	 $L153391
$L153803:

; 1075 : //				case 89:
; 1076 : //					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 31 ) )
; 1077 : //						pEdit->SetColor( 0x00808080 );
; 1078 : //
; 1079 : //					pEdit->SetText( "Broadsword" );
; 1080 : //					break;
; 1081 : //				case 90:
; 1082 : //					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 31 ) )
; 1083 : //						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 31 ) );
; 1084 : //					break;
; 1085 : 				case 89:	//	Helm Type
; 1086 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 0 ) ).get_pCondition() ) {

  030e1	6a 00		 push	 0
  030e3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  030e8	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  030ed	50		 push	 eax
  030ee	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR $T160790[ebp]
  030f4	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  030f9	8b c8		 mov	 ecx, eax
  030fb	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03100	50		 push	 eax
  03101	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T160789[ebp]
  03107	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  0310c	66 8b 85 50 fd
	ff ff		 mov	 ax, WORD PTR $T160789[ebp]
  03113	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  03117	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0311a	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0311f	0f bf c8	 movsx	 ecx, ax
  03122	85 c9		 test	 ecx, ecx
  03124	74 75		 je	 SHORT $L153807

; 1087 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  03126	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03129	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  0312e	50		 push	 eax
  0312f	8d 8d 44 fd ff
	ff		 lea	 ecx, DWORD PTR $T160792[ebp]
  03135	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0313a	8d 95 44 fd ff
	ff		 lea	 edx, DWORD PTR $T160792[ebp]
  03140	52		 push	 edx
  03141	8d 8d 48 fd ff
	ff		 lea	 ecx, DWORD PTR $T160791[ebp]
  03147	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0314c	8b c8		 mov	 ecx, eax
  0314e	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03153	50		 push	 eax
  03154	68 00 00 00 00	 push	 OFFSET FLAT:$SG153811
  03159	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  0315c	50		 push	 eax
  0315d	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03162	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1088 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  03165	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03168	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  0316d	50		 push	 eax
  0316e	8d 8d 3c fd ff
	ff		 lea	 ecx, DWORD PTR $T160794[ebp]
  03174	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03179	8d 8d 3c fd ff
	ff		 lea	 ecx, DWORD PTR $T160794[ebp]
  0317f	51		 push	 ecx
  03180	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T160793[ebp]
  03186	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0318b	8b c8		 mov	 ecx, eax
  0318d	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03192	50		 push	 eax
  03193	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03196	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L153807:

; 1090 : 					break;

  0319b	e9 10 0f 00 00	 jmp	 $L153391
$L153815:

; 1091 : 				case 90:	//	Helm Rating
; 1092 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 0 ) ).get_pCondition() ) {

  031a0	6a 00		 push	 0
  031a2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  031a7	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  031ac	50		 push	 eax
  031ad	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR $T160796[ebp]
  031b3	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  031b8	8b c8		 mov	 ecx, eax
  031ba	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  031bf	50		 push	 eax
  031c0	8d 8d 38 fd ff
	ff		 lea	 ecx, DWORD PTR $T160795[ebp]
  031c6	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  031cb	66 8b 95 38 fd
	ff ff		 mov	 dx, WORD PTR $T160795[ebp]
  031d2	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  031d6	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  031d9	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  031de	0f bf c0	 movsx	 eax, ax
  031e1	85 c0		 test	 eax, eax
  031e3	74 1d		 je	 SHORT $L153819

; 1093 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  031e5	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  031e8	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  031ed	0f bf c8	 movsx	 ecx, ax
  031f0	51		 push	 ecx
  031f1	68 00 00 00 00	 push	 OFFSET FLAT:$SG153820
  031f6	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  031f9	52		 push	 edx
  031fa	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  031ff	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153819:

; 1095 : 					break;

  03202	e9 a9 0e 00 00	 jmp	 $L153391
$L153821:

; 1096 : 				case 91:	//	Helm Condition
; 1097 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 0 ) ).get_pCondition() ) {

  03207	6a 00		 push	 0
  03209	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0320e	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03213	50		 push	 eax
  03214	8d 8d 2c fd ff
	ff		 lea	 ecx, DWORD PTR $T160798[ebp]
  0321a	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0321f	8b c8		 mov	 ecx, eax
  03221	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03226	50		 push	 eax
  03227	8d 8d 30 fd ff
	ff		 lea	 ecx, DWORD PTR $T160797[ebp]
  0322d	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03232	66 8b 85 30 fd
	ff ff		 mov	 ax, WORD PTR $T160797[ebp]
  03239	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  0323d	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03240	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03245	0f bf c8	 movsx	 ecx, ax
  03248	85 c9		 test	 ecx, ecx
  0324a	74 1d		 je	 SHORT $L153825

; 1098 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  0324c	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0324f	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03254	0f bf d0	 movsx	 edx, ax
  03257	52		 push	 edx
  03258	68 00 00 00 00	 push	 OFFSET FLAT:$SG153826
  0325d	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03260	50		 push	 eax
  03261	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03266	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153825:

; 1100 : 					break;

  03269	e9 42 0e 00 00	 jmp	 $L153391
$L153827:

; 1101 : 				case 92:	//	Cowl Type
; 1102 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 1 ) ).get_pCondition() ) {

  0326e	6a 01		 push	 1
  03270	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03275	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  0327a	50		 push	 eax
  0327b	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR $T160800[ebp]
  03281	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03286	8b c8		 mov	 ecx, eax
  03288	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0328d	50		 push	 eax
  0328e	8d 8d 28 fd ff
	ff		 lea	 ecx, DWORD PTR $T160799[ebp]
  03294	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03299	66 8b 8d 28 fd
	ff ff		 mov	 cx, WORD PTR $T160799[ebp]
  032a0	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  032a4	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  032a7	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  032ac	0f bf d0	 movsx	 edx, ax
  032af	85 d2		 test	 edx, edx
  032b1	74 75		 je	 SHORT $L153831

; 1103 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  032b3	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  032b6	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  032bb	50		 push	 eax
  032bc	8d 8d 1c fd ff
	ff		 lea	 ecx, DWORD PTR $T160802[ebp]
  032c2	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  032c7	8d 85 1c fd ff
	ff		 lea	 eax, DWORD PTR $T160802[ebp]
  032cd	50		 push	 eax
  032ce	8d 8d 20 fd ff
	ff		 lea	 ecx, DWORD PTR $T160801[ebp]
  032d4	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  032d9	8b c8		 mov	 ecx, eax
  032db	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  032e0	50		 push	 eax
  032e1	68 00 00 00 00	 push	 OFFSET FLAT:$SG153835
  032e6	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  032e9	51		 push	 ecx
  032ea	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  032ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1104 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  032f2	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  032f5	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  032fa	50		 push	 eax
  032fb	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR $T160804[ebp]
  03301	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03306	8d 95 14 fd ff
	ff		 lea	 edx, DWORD PTR $T160804[ebp]
  0330c	52		 push	 edx
  0330d	8d 8d 18 fd ff
	ff		 lea	 ecx, DWORD PTR $T160803[ebp]
  03313	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03318	8b c8		 mov	 ecx, eax
  0331a	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0331f	50		 push	 eax
  03320	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03323	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L153831:

; 1106 : 					break;

  03328	e9 83 0d 00 00	 jmp	 $L153391
$L153839:

; 1107 : 				case 93:	//	Cowl Rating
; 1108 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 1 ) ).get_pCondition() ) {

  0332d	6a 01		 push	 1
  0332f	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03334	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03339	50		 push	 eax
  0333a	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T160806[ebp]
  03340	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03345	8b c8		 mov	 ecx, eax
  03347	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0334c	50		 push	 eax
  0334d	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T160805[ebp]
  03353	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03358	66 8b 85 10 fd
	ff ff		 mov	 ax, WORD PTR $T160805[ebp]
  0335f	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  03363	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03366	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0336b	0f bf c8	 movsx	 ecx, ax
  0336e	85 c9		 test	 ecx, ecx
  03370	74 1d		 je	 SHORT $L153843

; 1109 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  03372	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03375	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  0337a	0f bf d0	 movsx	 edx, ax
  0337d	52		 push	 edx
  0337e	68 00 00 00 00	 push	 OFFSET FLAT:$SG153844
  03383	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03386	50		 push	 eax
  03387	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0338c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153843:

; 1111 : 					break;

  0338f	e9 1c 0d 00 00	 jmp	 $L153391
$L153845:

; 1112 : 				case 94:	//	Cowl Condition
; 1113 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 1 ) ).get_pCondition() ) {

  03394	6a 01		 push	 1
  03396	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0339b	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  033a0	50		 push	 eax
  033a1	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR $T160808[ebp]
  033a7	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  033ac	8b c8		 mov	 ecx, eax
  033ae	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  033b3	50		 push	 eax
  033b4	8d 8d 08 fd ff
	ff		 lea	 ecx, DWORD PTR $T160807[ebp]
  033ba	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  033bf	66 8b 8d 08 fd
	ff ff		 mov	 cx, WORD PTR $T160807[ebp]
  033c6	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  033ca	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  033cd	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  033d2	0f bf d0	 movsx	 edx, ax
  033d5	85 d2		 test	 edx, edx
  033d7	74 1d		 je	 SHORT $L153849

; 1114 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  033d9	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  033dc	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  033e1	0f bf c0	 movsx	 eax, ax
  033e4	50		 push	 eax
  033e5	68 00 00 00 00	 push	 OFFSET FLAT:$SG153850
  033ea	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  033ed	51		 push	 ecx
  033ee	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  033f3	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153849:

; 1116 : 					break;

  033f6	e9 b5 0c 00 00	 jmp	 $L153391
$L153851:

; 1117 : 				case 95:	//	Chest Type
; 1118 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 2 ) ).get_pCondition() ) {

  033fb	6a 02		 push	 2
  033fd	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03402	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03407	50		 push	 eax
  03408	8d 8d fc fc ff
	ff		 lea	 ecx, DWORD PTR $T160810[ebp]
  0340e	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03413	8b c8		 mov	 ecx, eax
  03415	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0341a	50		 push	 eax
  0341b	8d 8d 00 fd ff
	ff		 lea	 ecx, DWORD PTR $T160809[ebp]
  03421	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03426	66 8b 95 00 fd
	ff ff		 mov	 dx, WORD PTR $T160809[ebp]
  0342d	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  03431	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03434	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03439	0f bf c0	 movsx	 eax, ax
  0343c	85 c0		 test	 eax, eax
  0343e	74 75		 je	 SHORT $L153855

; 1119 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  03440	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03443	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  03448	50		 push	 eax
  03449	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR $T160812[ebp]
  0344f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03454	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR $T160812[ebp]
  0345a	51		 push	 ecx
  0345b	8d 8d f8 fc ff
	ff		 lea	 ecx, DWORD PTR $T160811[ebp]
  03461	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03466	8b c8		 mov	 ecx, eax
  03468	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0346d	50		 push	 eax
  0346e	68 00 00 00 00	 push	 OFFSET FLAT:$SG153859
  03473	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  03476	52		 push	 edx
  03477	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0347c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1120 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  0347f	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03482	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  03487	50		 push	 eax
  03488	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T160814[ebp]
  0348e	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03493	8d 85 ec fc ff
	ff		 lea	 eax, DWORD PTR $T160814[ebp]
  03499	50		 push	 eax
  0349a	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T160813[ebp]
  034a0	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  034a5	8b c8		 mov	 ecx, eax
  034a7	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  034ac	50		 push	 eax
  034ad	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  034b0	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L153855:

; 1122 : 					break;

  034b5	e9 f6 0b 00 00	 jmp	 $L153391
$L153863:

; 1123 : 				case 96:	//	Chest Rating
; 1124 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 2 ) ).get_pCondition() ) {

  034ba	6a 02		 push	 2
  034bc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  034c1	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  034c6	50		 push	 eax
  034c7	8d 8d e4 fc ff
	ff		 lea	 ecx, DWORD PTR $T160816[ebp]
  034cd	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  034d2	8b c8		 mov	 ecx, eax
  034d4	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  034d9	50		 push	 eax
  034da	8d 8d e8 fc ff
	ff		 lea	 ecx, DWORD PTR $T160815[ebp]
  034e0	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  034e5	66 8b 8d e8 fc
	ff ff		 mov	 cx, WORD PTR $T160815[ebp]
  034ec	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  034f0	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  034f3	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  034f8	0f bf d0	 movsx	 edx, ax
  034fb	85 d2		 test	 edx, edx
  034fd	74 1d		 je	 SHORT $L153867

; 1125 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  034ff	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03502	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  03507	0f bf c0	 movsx	 eax, ax
  0350a	50		 push	 eax
  0350b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153868
  03510	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03513	51		 push	 ecx
  03514	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03519	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153867:

; 1127 : 					break;

  0351c	e9 8f 0b 00 00	 jmp	 $L153391
$L153869:

; 1128 : 				case 97:	//	Chest Condition
; 1129 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 2 ) ).get_pCondition() ) {

  03521	6a 02		 push	 2
  03523	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03528	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  0352d	50		 push	 eax
  0352e	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T160818[ebp]
  03534	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03539	8b c8		 mov	 ecx, eax
  0353b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03540	50		 push	 eax
  03541	8d 8d e0 fc ff
	ff		 lea	 ecx, DWORD PTR $T160817[ebp]
  03547	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  0354c	66 8b 95 e0 fc
	ff ff		 mov	 dx, WORD PTR $T160817[ebp]
  03553	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  03557	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0355a	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0355f	0f bf c0	 movsx	 eax, ax
  03562	85 c0		 test	 eax, eax
  03564	74 1d		 je	 SHORT $L153873

; 1130 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  03566	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03569	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0356e	0f bf c8	 movsx	 ecx, ax
  03571	51		 push	 ecx
  03572	68 00 00 00 00	 push	 OFFSET FLAT:$SG153874
  03577	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  0357a	52		 push	 edx
  0357b	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03580	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153873:

; 1132 : 					break;

  03583	e9 28 0b 00 00	 jmp	 $L153391
$L153875:

; 1133 : 				case 98:	//	Wrists Type
; 1134 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 3 ) ).get_pCondition() ) {

  03588	6a 03		 push	 3
  0358a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0358f	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03594	50		 push	 eax
  03595	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T160820[ebp]
  0359b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  035a0	8b c8		 mov	 ecx, eax
  035a2	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  035a7	50		 push	 eax
  035a8	8d 8d d8 fc ff
	ff		 lea	 ecx, DWORD PTR $T160819[ebp]
  035ae	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  035b3	66 8b 85 d8 fc
	ff ff		 mov	 ax, WORD PTR $T160819[ebp]
  035ba	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  035be	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  035c1	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  035c6	0f bf c8	 movsx	 ecx, ax
  035c9	85 c9		 test	 ecx, ecx
  035cb	74 75		 je	 SHORT $L153879

; 1135 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  035cd	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  035d0	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  035d5	50		 push	 eax
  035d6	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T160822[ebp]
  035dc	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  035e1	8d 95 cc fc ff
	ff		 lea	 edx, DWORD PTR $T160822[ebp]
  035e7	52		 push	 edx
  035e8	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T160821[ebp]
  035ee	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  035f3	8b c8		 mov	 ecx, eax
  035f5	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  035fa	50		 push	 eax
  035fb	68 00 00 00 00	 push	 OFFSET FLAT:$SG153883
  03600	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03603	50		 push	 eax
  03604	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03609	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1136 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  0360c	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0360f	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  03614	50		 push	 eax
  03615	8d 8d c4 fc ff
	ff		 lea	 ecx, DWORD PTR $T160824[ebp]
  0361b	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03620	8d 8d c4 fc ff
	ff		 lea	 ecx, DWORD PTR $T160824[ebp]
  03626	51		 push	 ecx
  03627	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR $T160823[ebp]
  0362d	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03632	8b c8		 mov	 ecx, eax
  03634	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03639	50		 push	 eax
  0363a	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0363d	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L153879:

; 1138 : 					break;

  03642	e9 69 0a 00 00	 jmp	 $L153391
$L153887:

; 1139 : 				case 99:	//	Wrists Rating
; 1140 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 3 ) ).get_pCondition() ) {

  03647	6a 03		 push	 3
  03649	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0364e	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03653	50		 push	 eax
  03654	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T160826[ebp]
  0365a	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0365f	8b c8		 mov	 ecx, eax
  03661	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03666	50		 push	 eax
  03667	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR $T160825[ebp]
  0366d	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03672	66 8b 95 c0 fc
	ff ff		 mov	 dx, WORD PTR $T160825[ebp]
  03679	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  0367d	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03680	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03685	0f bf c0	 movsx	 eax, ax
  03688	85 c0		 test	 eax, eax
  0368a	74 1d		 je	 SHORT $L153891

; 1141 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  0368c	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0368f	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  03694	0f bf c8	 movsx	 ecx, ax
  03697	51		 push	 ecx
  03698	68 00 00 00 00	 push	 OFFSET FLAT:$SG153892
  0369d	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  036a0	52		 push	 edx
  036a1	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  036a6	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153891:

; 1143 : 					break;

  036a9	e9 02 0a 00 00	 jmp	 $L153391
$L153893:

; 1144 : 				case 100:	//	Wrists Condition
; 1145 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 3 ) ).get_pCondition() ) {

  036ae	6a 03		 push	 3
  036b0	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  036b5	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  036ba	50		 push	 eax
  036bb	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T160828[ebp]
  036c1	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  036c6	8b c8		 mov	 ecx, eax
  036c8	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  036cd	50		 push	 eax
  036ce	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T160827[ebp]
  036d4	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  036d9	66 8b 85 b8 fc
	ff ff		 mov	 ax, WORD PTR $T160827[ebp]
  036e0	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  036e4	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  036e7	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  036ec	0f bf c8	 movsx	 ecx, ax
  036ef	85 c9		 test	 ecx, ecx
  036f1	74 1d		 je	 SHORT $L153897

; 1146 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  036f3	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  036f6	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  036fb	0f bf d0	 movsx	 edx, ax
  036fe	52		 push	 edx
  036ff	68 00 00 00 00	 push	 OFFSET FLAT:$SG153898
  03704	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03707	50		 push	 eax
  03708	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0370d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153897:

; 1148 : 					break;

  03710	e9 9b 09 00 00	 jmp	 $L153391
$L153899:

; 1149 : 				case 101:	//	Legs Type
; 1150 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 4 ) ).get_pCondition() ) {

  03715	6a 04		 push	 4
  03717	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0371c	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03721	50		 push	 eax
  03722	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR $T160830[ebp]
  03728	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0372d	8b c8		 mov	 ecx, eax
  0372f	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03734	50		 push	 eax
  03735	8d 8d b0 fc ff
	ff		 lea	 ecx, DWORD PTR $T160829[ebp]
  0373b	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03740	66 8b 8d b0 fc
	ff ff		 mov	 cx, WORD PTR $T160829[ebp]
  03747	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  0374b	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0374e	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03753	0f bf d0	 movsx	 edx, ax
  03756	85 d2		 test	 edx, edx
  03758	74 75		 je	 SHORT $L153903

; 1151 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  0375a	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0375d	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  03762	50		 push	 eax
  03763	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T160832[ebp]
  03769	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0376e	8d 85 a4 fc ff
	ff		 lea	 eax, DWORD PTR $T160832[ebp]
  03774	50		 push	 eax
  03775	8d 8d a8 fc ff
	ff		 lea	 ecx, DWORD PTR $T160831[ebp]
  0377b	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03780	8b c8		 mov	 ecx, eax
  03782	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03787	50		 push	 eax
  03788	68 00 00 00 00	 push	 OFFSET FLAT:$SG153907
  0378d	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03790	51		 push	 ecx
  03791	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03796	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1152 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  03799	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0379c	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  037a1	50		 push	 eax
  037a2	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T160834[ebp]
  037a8	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  037ad	8d 95 9c fc ff
	ff		 lea	 edx, DWORD PTR $T160834[ebp]
  037b3	52		 push	 edx
  037b4	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR $T160833[ebp]
  037ba	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  037bf	8b c8		 mov	 ecx, eax
  037c1	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  037c6	50		 push	 eax
  037c7	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  037ca	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L153903:

; 1154 : 					break;

  037cf	e9 dc 08 00 00	 jmp	 $L153391
$L153911:

; 1155 : 				case 102:	//	Legs Rating
; 1156 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 4 ) ).get_pCondition() ) {

  037d4	6a 04		 push	 4
  037d6	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  037db	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  037e0	50		 push	 eax
  037e1	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR $T160836[ebp]
  037e7	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  037ec	8b c8		 mov	 ecx, eax
  037ee	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  037f3	50		 push	 eax
  037f4	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T160835[ebp]
  037fa	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  037ff	66 8b 85 98 fc
	ff ff		 mov	 ax, WORD PTR $T160835[ebp]
  03806	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  0380a	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0380d	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03812	0f bf c8	 movsx	 ecx, ax
  03815	85 c9		 test	 ecx, ecx
  03817	74 1d		 je	 SHORT $L153915

; 1157 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  03819	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0381c	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  03821	0f bf d0	 movsx	 edx, ax
  03824	52		 push	 edx
  03825	68 00 00 00 00	 push	 OFFSET FLAT:$SG153916
  0382a	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  0382d	50		 push	 eax
  0382e	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03833	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153915:

; 1159 : 					break;

  03836	e9 75 08 00 00	 jmp	 $L153391
$L153917:

; 1160 : 				case 103:	//	Legs Condition
; 1161 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 4 ) ).get_pCondition() ) {

  0383b	6a 04		 push	 4
  0383d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03842	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03847	50		 push	 eax
  03848	8d 8d 8c fc ff
	ff		 lea	 ecx, DWORD PTR $T160838[ebp]
  0384e	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03853	8b c8		 mov	 ecx, eax
  03855	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0385a	50		 push	 eax
  0385b	8d 8d 90 fc ff
	ff		 lea	 ecx, DWORD PTR $T160837[ebp]
  03861	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03866	66 8b 8d 90 fc
	ff ff		 mov	 cx, WORD PTR $T160837[ebp]
  0386d	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  03871	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03874	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03879	0f bf d0	 movsx	 edx, ax
  0387c	85 d2		 test	 edx, edx
  0387e	74 1d		 je	 SHORT $L153921

; 1162 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  03880	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03883	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03888	0f bf c0	 movsx	 eax, ax
  0388b	50		 push	 eax
  0388c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153922
  03891	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03894	51		 push	 ecx
  03895	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0389a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153921:

; 1164 : 					break;

  0389d	e9 0e 08 00 00	 jmp	 $L153391
$L153923:

; 1165 : 				case 104:	//	Feet Type
; 1166 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 5 ) ).get_pCondition() ) {

  038a2	6a 05		 push	 5
  038a4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  038a9	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  038ae	50		 push	 eax
  038af	8d 8d 84 fc ff
	ff		 lea	 ecx, DWORD PTR $T160840[ebp]
  038b5	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  038ba	8b c8		 mov	 ecx, eax
  038bc	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  038c1	50		 push	 eax
  038c2	8d 8d 88 fc ff
	ff		 lea	 ecx, DWORD PTR $T160839[ebp]
  038c8	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  038cd	66 8b 95 88 fc
	ff ff		 mov	 dx, WORD PTR $T160839[ebp]
  038d4	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  038d8	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  038db	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  038e0	0f bf c0	 movsx	 eax, ax
  038e3	85 c0		 test	 eax, eax
  038e5	74 75		 je	 SHORT $L153927

; 1167 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  038e7	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  038ea	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  038ef	50		 push	 eax
  038f0	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T160842[ebp]
  038f6	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  038fb	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T160842[ebp]
  03901	51		 push	 ecx
  03902	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T160841[ebp]
  03908	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0390d	8b c8		 mov	 ecx, eax
  0390f	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03914	50		 push	 eax
  03915	68 00 00 00 00	 push	 OFFSET FLAT:$SG153931
  0391a	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  0391d	52		 push	 edx
  0391e	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03923	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1168 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  03926	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03929	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  0392e	50		 push	 eax
  0392f	8d 8d 74 fc ff
	ff		 lea	 ecx, DWORD PTR $T160844[ebp]
  03935	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0393a	8d 85 74 fc ff
	ff		 lea	 eax, DWORD PTR $T160844[ebp]
  03940	50		 push	 eax
  03941	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR $T160843[ebp]
  03947	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0394c	8b c8		 mov	 ecx, eax
  0394e	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03953	50		 push	 eax
  03954	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03957	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L153927:

; 1170 : 					break;

  0395c	e9 4f 07 00 00	 jmp	 $L153391
$L153935:

; 1171 : 				case 105:	//	Feet Rating
; 1172 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 5 ) ).get_pCondition() ) {

  03961	6a 05		 push	 5
  03963	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03968	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  0396d	50		 push	 eax
  0396e	8d 8d 6c fc ff
	ff		 lea	 ecx, DWORD PTR $T160846[ebp]
  03974	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03979	8b c8		 mov	 ecx, eax
  0397b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03980	50		 push	 eax
  03981	8d 8d 70 fc ff
	ff		 lea	 ecx, DWORD PTR $T160845[ebp]
  03987	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  0398c	66 8b 8d 70 fc
	ff ff		 mov	 cx, WORD PTR $T160845[ebp]
  03993	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  03997	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0399a	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0399f	0f bf d0	 movsx	 edx, ax
  039a2	85 d2		 test	 edx, edx
  039a4	74 1d		 je	 SHORT $L153939

; 1173 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  039a6	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  039a9	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  039ae	0f bf c0	 movsx	 eax, ax
  039b1	50		 push	 eax
  039b2	68 00 00 00 00	 push	 OFFSET FLAT:$SG153940
  039b7	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  039ba	51		 push	 ecx
  039bb	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  039c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153939:

; 1175 : 					break;

  039c3	e9 e8 06 00 00	 jmp	 $L153391
$L153941:

; 1176 : 				case 106:	//	Feet Condition
; 1177 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 5 ) ).get_pCondition() ) {

  039c8	6a 05		 push	 5
  039ca	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  039cf	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  039d4	50		 push	 eax
  039d5	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T160848[ebp]
  039db	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  039e0	8b c8		 mov	 ecx, eax
  039e2	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  039e7	50		 push	 eax
  039e8	8d 8d 68 fc ff
	ff		 lea	 ecx, DWORD PTR $T160847[ebp]
  039ee	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  039f3	66 8b 95 68 fc
	ff ff		 mov	 dx, WORD PTR $T160847[ebp]
  039fa	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  039fe	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03a01	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03a06	0f bf c0	 movsx	 eax, ax
  03a09	85 c0		 test	 eax, eax
  03a0b	74 1d		 je	 SHORT $L153945

; 1178 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  03a0d	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03a10	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03a15	0f bf c8	 movsx	 ecx, ax
  03a18	51		 push	 ecx
  03a19	68 00 00 00 00	 push	 OFFSET FLAT:$SG153946
  03a1e	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  03a21	52		 push	 edx
  03a22	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03a27	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153945:

; 1180 : 					break;

  03a2a	e9 81 06 00 00	 jmp	 $L153391
$L153947:

; 1181 : 				case 107:	//	Shield Type
; 1182 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 6 ) ).get_pCondition() ) {

  03a2f	6a 06		 push	 6
  03a31	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03a36	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03a3b	50		 push	 eax
  03a3c	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR $T160850[ebp]
  03a42	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03a47	8b c8		 mov	 ecx, eax
  03a49	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03a4e	50		 push	 eax
  03a4f	8d 8d 60 fc ff
	ff		 lea	 ecx, DWORD PTR $T160849[ebp]
  03a55	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03a5a	66 8b 85 60 fc
	ff ff		 mov	 ax, WORD PTR $T160849[ebp]
  03a61	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  03a65	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03a68	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03a6d	0f bf c8	 movsx	 ecx, ax
  03a70	85 c9		 test	 ecx, ecx
  03a72	74 75		 je	 SHORT $L153951

; 1183 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  03a74	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03a77	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  03a7c	50		 push	 eax
  03a7d	8d 8d 54 fc ff
	ff		 lea	 ecx, DWORD PTR $T160852[ebp]
  03a83	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03a88	8d 95 54 fc ff
	ff		 lea	 edx, DWORD PTR $T160852[ebp]
  03a8e	52		 push	 edx
  03a8f	8d 8d 58 fc ff
	ff		 lea	 ecx, DWORD PTR $T160851[ebp]
  03a95	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03a9a	8b c8		 mov	 ecx, eax
  03a9c	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03aa1	50		 push	 eax
  03aa2	68 00 00 00 00	 push	 OFFSET FLAT:$SG153955
  03aa7	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03aaa	50		 push	 eax
  03aab	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03ab0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1184 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  03ab3	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03ab6	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  03abb	50		 push	 eax
  03abc	8d 8d 4c fc ff
	ff		 lea	 ecx, DWORD PTR $T160854[ebp]
  03ac2	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03ac7	8d 8d 4c fc ff
	ff		 lea	 ecx, DWORD PTR $T160854[ebp]
  03acd	51		 push	 ecx
  03ace	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T160853[ebp]
  03ad4	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03ad9	8b c8		 mov	 ecx, eax
  03adb	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03ae0	50		 push	 eax
  03ae1	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03ae4	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L153951:

; 1186 : 					break;

  03ae9	e9 c2 05 00 00	 jmp	 $L153391
$L153959:

; 1187 : 				case 108:	//	Shield Rating
; 1188 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 6 ) ).get_pCondition() ) {

  03aee	6a 06		 push	 6
  03af0	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03af5	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03afa	50		 push	 eax
  03afb	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR $T160856[ebp]
  03b01	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03b06	8b c8		 mov	 ecx, eax
  03b08	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03b0d	50		 push	 eax
  03b0e	8d 8d 48 fc ff
	ff		 lea	 ecx, DWORD PTR $T160855[ebp]
  03b14	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03b19	66 8b 95 48 fc
	ff ff		 mov	 dx, WORD PTR $T160855[ebp]
  03b20	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  03b24	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03b27	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03b2c	0f bf c0	 movsx	 eax, ax
  03b2f	85 c0		 test	 eax, eax
  03b31	74 1d		 je	 SHORT $L153963

; 1189 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  03b33	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03b36	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  03b3b	0f bf c8	 movsx	 ecx, ax
  03b3e	51		 push	 ecx
  03b3f	68 00 00 00 00	 push	 OFFSET FLAT:$SG153964
  03b44	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  03b47	52		 push	 edx
  03b48	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03b4d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153963:

; 1191 : 					break;

  03b50	e9 5b 05 00 00	 jmp	 $L153391
$L153965:

; 1192 : 				case 109:	//	Shield Condition
; 1193 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 6 ) ).get_pCondition() ) {

  03b55	6a 06		 push	 6
  03b57	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03b5c	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  03b61	50		 push	 eax
  03b62	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR $T160858[ebp]
  03b68	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  03b6d	8b c8		 mov	 ecx, eax
  03b6f	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  03b74	50		 push	 eax
  03b75	8d 8d 40 fc ff
	ff		 lea	 ecx, DWORD PTR $T160857[ebp]
  03b7b	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  03b80	66 8b 85 40 fc
	ff ff		 mov	 ax, WORD PTR $T160857[ebp]
  03b87	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  03b8b	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03b8e	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03b93	0f bf c8	 movsx	 ecx, ax
  03b96	85 c9		 test	 ecx, ecx
  03b98	74 1d		 je	 SHORT $L153969

; 1194 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  03b9a	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  03b9d	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  03ba2	0f bf d0	 movsx	 edx, ax
  03ba5	52		 push	 edx
  03ba6	68 00 00 00 00	 push	 OFFSET FLAT:$SG153970
  03bab	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03bae	50		 push	 eax
  03baf	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03bb4	83 c4 0c	 add	 esp, 12			; 0000000cH
$L153969:

; 1196 : 					break;

  03bb7	e9 f4 04 00 00	 jmp	 $L153391
$L153971:

; 1197 : 				case 110:	//	Weapon Type
; 1198 : 					pEdit->SetText( "%s", *((StringID) m_pChar.get_pWeaponName()) );

  03bbc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03bc1	e8 00 00 00 00	 call	 ?get_pWeaponName@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponName
  03bc6	50		 push	 eax
  03bc7	8d 8d 34 fc ff
	ff		 lea	 ecx, DWORD PTR $T160860[ebp]
  03bcd	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03bd2	8d 8d 34 fc ff
	ff		 lea	 ecx, DWORD PTR $T160860[ebp]
  03bd8	51		 push	 ecx
  03bd9	8d 8d 38 fc ff
	ff		 lea	 ecx, DWORD PTR $T160859[ebp]
  03bdf	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03be4	8b c8		 mov	 ecx, eax
  03be6	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03beb	50		 push	 eax
  03bec	68 00 00 00 00	 push	 OFFSET FLAT:$SG153975
  03bf1	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  03bf4	52		 push	 edx
  03bf5	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03bfa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1199 : 					pEdit->SetHint( *((StringID) m_pChar.get_pWeaponName() ) );

  03bfd	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03c02	e8 00 00 00 00	 call	 ?get_pWeaponName@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponName
  03c07	50		 push	 eax
  03c08	8d 8d 2c fc ff
	ff		 lea	 ecx, DWORD PTR $T160862[ebp]
  03c0e	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03c13	8d 85 2c fc ff
	ff		 lea	 eax, DWORD PTR $T160862[ebp]
  03c19	50		 push	 eax
  03c1a	8d 8d 30 fc ff
	ff		 lea	 ecx, DWORD PTR $T160861[ebp]
  03c20	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03c25	8b c8		 mov	 ecx, eax
  03c27	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03c2c	50		 push	 eax
  03c2d	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03c30	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint

; 1200 : 					break;

  03c35	e9 76 04 00 00	 jmp	 $L153391
$L153979:

; 1201 : 				case 111:	//	Weapon Rating
; 1202 : 					pEdit->SetText( "%d-%d", m_pChar.get_pWeaponDamageMin(), m_pChar.get_pWeaponDamageMax() );

  03c3a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03c3f	e8 00 00 00 00	 call	 ?get_pWeaponDamageMax@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponDamageMax
  03c44	0f bf c8	 movsx	 ecx, ax
  03c47	51		 push	 ecx
  03c48	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03c4d	e8 00 00 00 00	 call	 ?get_pWeaponDamageMin@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponDamageMin
  03c52	0f bf d0	 movsx	 edx, ax
  03c55	52		 push	 edx
  03c56	68 00 00 00 00	 push	 OFFSET FLAT:$SG153980
  03c5b	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03c5e	50		 push	 eax
  03c5f	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03c64	83 c4 10	 add	 esp, 16			; 00000010H

; 1203 : 					break;

  03c67	e9 44 04 00 00	 jmp	 $L153391
$L153981:

; 1204 : 				case 112:	//	Weapon Condition
; 1205 : 					pEdit->SetText( "%d%%", m_pChar.get_pWeaponCondition() );

  03c6c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03c71	e8 00 00 00 00	 call	 ?get_pWeaponCondition@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponCondition
  03c76	0f bf c8	 movsx	 ecx, ax
  03c79	51		 push	 ecx
  03c7a	68 00 00 00 00	 push	 OFFSET FLAT:$SG153982
  03c7f	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  03c82	52		 push	 edx
  03c83	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03c88	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1206 : 					break;

  03c8b	e9 20 04 00 00	 jmp	 $L153391
$L153983:

; 1207 : 				case 113:	//	Account Type: Monthly or Annual
; 1208 : 					pEdit->SetText( "%s", *m_pChar.get_pAccountType() );

  03c90	8d 85 28 fc ff
	ff		 lea	 eax, DWORD PTR $T160863[ebp]
  03c96	50		 push	 eax
  03c97	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03c9c	e8 00 00 00 00	 call	 ?get_pAccountType@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pAccountType
  03ca1	8b c8		 mov	 ecx, eax
  03ca3	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03ca8	50		 push	 eax
  03ca9	68 00 00 00 00	 push	 OFFSET FLAT:$SG153985
  03cae	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03cb1	51		 push	 ecx
  03cb2	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03cb7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1209 : 					break;

  03cba	e9 f1 03 00 00	 jmp	 $L153391
$L153986:

; 1211 : 					time_t expireTime = m_pChar.get_pBillingDate().get_nValue();

  03cbf	8d 95 24 fc ff
	ff		 lea	 edx, DWORD PTR $T160864[ebp]
  03cc5	52		 push	 edx
  03cc6	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03ccb	e8 00 00 00 00	 call	 ?get_pBillingDate@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pBillingDate
  03cd0	8b c8		 mov	 ecx, eax
  03cd2	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03cd7	89 45 b0	 mov	 DWORD PTR _expireTime$153987[ebp], eax

; 1212 : 					tm* expire = localtime( &expireTime );

  03cda	8d 45 b0	 lea	 eax, DWORD PTR _expireTime$153987[ebp]
  03cdd	50		 push	 eax
  03cde	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__localtime
  03ce4	83 c4 04	 add	 esp, 4
  03ce7	89 45 b4	 mov	 DWORD PTR _expire$153989[ebp], eax

; 1213 : 					pEdit->SetText( "%s %02d %04d", Months[ expire->tm_mon ], expire->tm_mday, ( expire->tm_year + 1900 ) );

  03cea	8b 4d b4	 mov	 ecx, DWORD PTR _expire$153989[ebp]
  03ced	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  03cf0	81 c2 6c 07 00
	00		 add	 edx, 1900		; 0000076cH
  03cf6	52		 push	 edx
  03cf7	8b 45 b4	 mov	 eax, DWORD PTR _expire$153989[ebp]
  03cfa	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  03cfd	51		 push	 ecx
  03cfe	8b 55 b4	 mov	 edx, DWORD PTR _expire$153989[ebp]
  03d01	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  03d04	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR ?Months@@3PAY03DA[eax*4]
  03d0b	51		 push	 ecx
  03d0c	68 00 00 00 00	 push	 OFFSET FLAT:$SG153990
  03d11	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  03d14	52		 push	 edx
  03d15	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03d1a	83 c4 14	 add	 esp, 20			; 00000014H

; 1215 : 
; 1216 : 					break;

  03d1d	e9 8e 03 00 00	 jmp	 $L153391
$L153991:

; 1217 : 				case 115:	//	Free Time Earned
; 1218 : 					pEdit->SetText( "%d", m_pChar.get_pCredits().get_nValue() );

  03d22	8d 85 20 fc ff
	ff		 lea	 eax, DWORD PTR $T160865[ebp]
  03d28	50		 push	 eax
  03d29	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03d2e	e8 00 00 00 00	 call	 ?get_pCredits@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pCredits
  03d33	8b c8		 mov	 ecx, eax
  03d35	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03d3a	50		 push	 eax
  03d3b	68 00 00 00 00	 push	 OFFSET FLAT:$SG153993
  03d40	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03d43	51		 push	 ecx
  03d44	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03d49	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1219 : 					break;

  03d4c	e9 5f 03 00 00	 jmp	 $L153391
$L153994:

; 1221 : 					time_t expireTime = m_pChar.get_pBillingDate().get_nValue() + m_pChar.get_pCredits().get_nValue() * 86400;

  03d51	8d 95 1c fc ff
	ff		 lea	 edx, DWORD PTR $T160866[ebp]
  03d57	52		 push	 edx
  03d58	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03d5d	e8 00 00 00 00	 call	 ?get_pBillingDate@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pBillingDate
  03d62	8b c8		 mov	 ecx, eax
  03d64	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03d69	8b f0		 mov	 esi, eax
  03d6b	8d 85 18 fc ff
	ff		 lea	 eax, DWORD PTR $T160867[ebp]
  03d71	50		 push	 eax
  03d72	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03d77	e8 00 00 00 00	 call	 ?get_pCredits@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pCredits
  03d7c	8b c8		 mov	 ecx, eax
  03d7e	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03d83	69 c0 80 51 01
	00		 imul	 eax, 86400		; 00015180H
  03d89	03 f0		 add	 esi, eax
  03d8b	89 75 a8	 mov	 DWORD PTR _expireTime$153995[ebp], esi

; 1222 : 					tm* expire = localtime( &expireTime );

  03d8e	8d 4d a8	 lea	 ecx, DWORD PTR _expireTime$153995[ebp]
  03d91	51		 push	 ecx
  03d92	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__localtime
  03d98	83 c4 04	 add	 esp, 4
  03d9b	89 45 ac	 mov	 DWORD PTR _expire$153998[ebp], eax

; 1223 : 					pEdit->SetText( "%s %02d %04d", Months[ expire->tm_mon ], expire->tm_mday, ( expire->tm_year + 1900 ) );

  03d9e	8b 55 ac	 mov	 edx, DWORD PTR _expire$153998[ebp]
  03da1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  03da4	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  03da9	50		 push	 eax
  03daa	8b 4d ac	 mov	 ecx, DWORD PTR _expire$153998[ebp]
  03dad	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  03db0	52		 push	 edx
  03db1	8b 45 ac	 mov	 eax, DWORD PTR _expire$153998[ebp]
  03db4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  03db7	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR ?Months@@3PAY03DA[ecx*4]
  03dbe	52		 push	 edx
  03dbf	68 00 00 00 00	 push	 OFFSET FLAT:$SG153999
  03dc4	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03dc7	50		 push	 eax
  03dc8	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03dcd	83 c4 14	 add	 esp, 20			; 00000014H

; 1225 : 
; 1226 : 					break;

  03dd0	e9 db 02 00 00	 jmp	 $L153391
$L154000:

; 1227 : 				case 117:	//	Player Referral Code
; 1228 : 					pEdit->SetText( "%s", *m_pChar.get_pAccountID() );

  03dd5	8d 8d 14 fc ff
	ff		 lea	 ecx, DWORD PTR $T160868[ebp]
  03ddb	51		 push	 ecx
  03ddc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03de1	e8 00 00 00 00	 call	 ?get_pAccountID@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pAccountID
  03de6	8b c8		 mov	 ecx, eax
  03de8	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03ded	50		 push	 eax
  03dee	68 00 00 00 00	 push	 OFFSET FLAT:$SG154002
  03df3	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  03df6	52		 push	 edx
  03df7	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03dfc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1229 : 					break;

  03dff	e9 ac 02 00 00	 jmp	 $L153391
$L154003:

; 1230 : 				case 118:	//	Event Coppers
; 1231 : 					pEdit->SetText( "%d", m_pChar.get_pCoppers().get_nValue() );

  03e04	8d 85 10 fc ff
	ff		 lea	 eax, DWORD PTR $T160869[ebp]
  03e0a	50		 push	 eax
  03e0b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03e10	e8 00 00 00 00	 call	 ?get_pCoppers@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pCoppers
  03e15	8b c8		 mov	 ecx, eax
  03e17	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03e1c	50		 push	 eax
  03e1d	68 00 00 00 00	 push	 OFFSET FLAT:$SG154005
  03e22	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03e25	51		 push	 ecx
  03e26	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03e2b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 					break;

  03e2e	e9 7d 02 00 00	 jmp	 $L153391
$L154006:

; 1233 : 				case 119:	//	Character's Earned Experience
; 1234 : 					pEdit->SetText( "%d", ((CSCI_LongInt) m_pChar.get_pExperience()).get_nValue() );

  03e33	8d 95 08 fc ff
	ff		 lea	 edx, DWORD PTR $T160871[ebp]
  03e39	52		 push	 edx
  03e3a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03e3f	e8 00 00 00 00	 call	 ?get_pExperience@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pExperience
  03e44	50		 push	 eax
  03e45	8d 8d 0c fc ff
	ff		 lea	 ecx, DWORD PTR $T160870[ebp]
  03e4b	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@ABV0@@Z ; CSCI_LongInt::CSCI_LongInt
  03e50	8b c8		 mov	 ecx, eax
  03e52	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03e57	50		 push	 eax
  03e58	68 00 00 00 00	 push	 OFFSET FLAT:$SG154010
  03e5d	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03e60	50		 push	 eax
  03e61	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03e66	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1235 : 					break;

  03e69	e9 42 02 00 00	 jmp	 $L153391
$L154011:

; 1237 : 					int nNextLevel = m_pChar.get_pExperience().get_nValue() / 10000;

  03e6e	8d 8d 04 fc ff
	ff		 lea	 ecx, DWORD PTR $T160872[ebp]
  03e74	51		 push	 ecx
  03e75	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03e7a	e8 00 00 00 00	 call	 ?get_pExperience@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pExperience
  03e7f	8b c8		 mov	 ecx, eax
  03e81	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03e86	99		 cdq
  03e87	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  03e8c	f7 f9		 idiv	 ecx
  03e8e	89 45 a4	 mov	 DWORD PTR _nNextLevel$154012[ebp], eax

; 1238 : 
; 1239 : 					if ( nNextLevel >= 999 ) 

  03e91	81 7d a4 e7 03
	00 00		 cmp	 DWORD PTR _nNextLevel$154012[ebp], 999 ; 000003e7H
  03e98	7c 13		 jl	 SHORT $L154014

; 1240 : 						pEdit->SetText( "Max Level" );

  03e9a	68 00 00 00 00	 push	 OFFSET FLAT:$SG154015
  03e9f	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  03ea2	52		 push	 edx
  03ea3	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03ea8	83 c4 08	 add	 esp, 8

; 1241 : 					else

  03eab	eb 1e		 jmp	 SHORT $L154016
$L154014:

; 1242 : 						pEdit->SetText( "%d", ( ( nNextLevel + 1 ) * 10000 ) );

  03ead	8b 45 a4	 mov	 eax, DWORD PTR _nNextLevel$154012[ebp]
  03eb0	83 c0 01	 add	 eax, 1
  03eb3	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H
  03eb9	50		 push	 eax
  03eba	68 00 00 00 00	 push	 OFFSET FLAT:$SG154017
  03ebf	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03ec2	51		 push	 ecx
  03ec3	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03ec8	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154016:

; 1244 : 
; 1245 : 					break;

  03ecb	e9 e0 01 00 00	 jmp	 $L153391
$L154018:

; 1246 : 				case 121:	//	Unspent Skill Build Points
; 1247 : 					pEdit->SetText( "%d", m_pChar.get_pBuildPoints() );

  03ed0	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03ed5	e8 00 00 00 00	 call	 ?get_pBuildPoints@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pBuildPoints
  03eda	0f bf d0	 movsx	 edx, ax
  03edd	52		 push	 edx
  03ede	68 00 00 00 00	 push	 OFFSET FLAT:$SG154019
  03ee3	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03ee6	50		 push	 eax
  03ee7	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03eec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1248 : 					break;

  03eef	e9 bc 01 00 00	 jmp	 $L153391
$L154020:

; 1249 : 				case 122:	//	Number of Opponents Killed by Character (NPC/Player)
; 1250 : 					pEdit->SetText( "%d / %d", ((CSCI_LongInt) m_pChar.get_pNPCKills()).get_nValue(), ((CSCI_LongInt) m_pChar.get_pPKills()).get_nValue() );

  03ef4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03ef9	e8 00 00 00 00	 call	 ?get_pPKills@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pPKills
  03efe	50		 push	 eax
  03eff	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR $T160873[ebp]
  03f05	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  03f0a	8b c8		 mov	 ecx, eax
  03f0c	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03f11	50		 push	 eax
  03f12	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03f17	e8 00 00 00 00	 call	 ?get_pNPCKills@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pNPCKills
  03f1c	50		 push	 eax
  03f1d	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR $T160874[ebp]
  03f23	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  03f28	8b c8		 mov	 ecx, eax
  03f2a	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03f2f	50		 push	 eax
  03f30	68 00 00 00 00	 push	 OFFSET FLAT:$SG154025
  03f35	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03f38	51		 push	 ecx
  03f39	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03f3e	83 c4 10	 add	 esp, 16			; 00000010H

; 1251 : 					break;

  03f41	e9 6a 01 00 00	 jmp	 $L153391
$L154026:

; 1252 : 				case 123:	//	Effect of Weight Carried
; 1253 : 					pEdit->SetText( "%d / %d %d%%", m_pChar.get_pCarry(), m_pChar.get_pCarryMax(), (int) ( ( m_pChar.get_pCarry() * 100 ) / m_pChar.get_pCarryMax() ) );

  03f46	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03f4b	e8 00 00 00 00	 call	 ?get_pCarry@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pCarry
  03f50	0f bf f0	 movsx	 esi, ax
  03f53	6b f6 64	 imul	 esi, 100		; 00000064H
  03f56	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03f5b	e8 00 00 00 00	 call	 ?get_pCarryMax@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pCarryMax
  03f60	0f bf c8	 movsx	 ecx, ax
  03f63	8b c6		 mov	 eax, esi
  03f65	99		 cdq
  03f66	f7 f9		 idiv	 ecx
  03f68	50		 push	 eax
  03f69	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03f6e	e8 00 00 00 00	 call	 ?get_pCarryMax@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pCarryMax
  03f73	0f bf d0	 movsx	 edx, ax
  03f76	52		 push	 edx
  03f77	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03f7c	e8 00 00 00 00	 call	 ?get_pCarry@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pCarry
  03f81	0f bf c0	 movsx	 eax, ax
  03f84	50		 push	 eax
  03f85	68 00 00 00 00	 push	 OFFSET FLAT:$SG154028
  03f8a	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  03f8d	51		 push	 ecx
  03f8e	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03f93	83 c4 14	 add	 esp, 20			; 00000014H

; 1254 : 					break;

  03f96	e9 15 01 00 00	 jmp	 $L153391
$L154029:

; 1255 : 				case 124:	//	Amount of Mana Drained by Equipped Items
; 1256 : 					pEdit->SetText( "%f", (float) ( (float) m_pChar.get_pManaDrain().get_nValue() / 100 ) );

  03f9b	8d 95 f8 fb ff
	ff		 lea	 edx, DWORD PTR $T160875[ebp]
  03fa1	52		 push	 edx
  03fa2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03fa7	e8 00 00 00 00	 call	 ?get_pManaDrain@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ; CSCI_CharInfo::get_pManaDrain
  03fac	8b c8		 mov	 ecx, eax
  03fae	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03fb3	89 85 a8 f9 ff
	ff		 mov	 DWORD PTR -1624+[ebp], eax
  03fb9	db 85 a8 f9 ff
	ff		 fild	 DWORD PTR -1624+[ebp]
  03fbf	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@4@4005c800000000000000
  03fc5	83 ec 08	 sub	 esp, 8
  03fc8	dd 1c 24	 fstp	 QWORD PTR [esp]
  03fcb	68 00 00 00 00	 push	 OFFSET FLAT:$SG154033
  03fd0	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  03fd3	50		 push	 eax
  03fd4	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  03fd9	83 c4 10	 add	 esp, 16			; 00000010H

; 1257 : 					break;

  03fdc	e9 cf 00 00 00	 jmp	 $L153391
$L154034:

; 1258 : 				case 125:	//	Profession
; 1259 : 					pEdit->SetText( "%s", *m_pChar.get_pProfession() );

  03fe1	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR $T160876[ebp]
  03fe7	51		 push	 ecx
  03fe8	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  03fed	e8 00 00 00 00	 call	 ?get_pProfession@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pProfession
  03ff2	8b c8		 mov	 ecx, eax
  03ff4	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03ff9	50		 push	 eax
  03ffa	68 00 00 00 00	 push	 OFFSET FLAT:$SG154036
  03fff	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  04002	52		 push	 edx
  04003	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04008	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1260 : 					break;

  0400b	e9 a0 00 00 00	 jmp	 $L153391
$L154037:

; 1261 : 				case 126:
; 1262 : 					if ( !((CSCI_List) m_pChar.get_pSkillArray()).at( 31 ) )

  04010	6a 1f		 push	 31			; 0000001fH
  04012	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04017	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  0401c	50		 push	 eax
  0401d	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T160877[ebp]
  04023	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04028	8b c8		 mov	 ecx, eax
  0402a	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0402f	0f bf c0	 movsx	 eax, ax
  04032	85 c0		 test	 eax, eax
  04034	75 0d		 jne	 SHORT $L154040

; 1263 : 						pEdit->SetColor( 0x00808080 );

  04036	68 80 80 80 00	 push	 8421504			; 00808080H
  0403b	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0403e	e8 00 00 00 00	 call	 ?SetColor@CSkinObj@@QAEHK@Z ; CSkinObj::SetColor
$L154040:

; 1264 : 
; 1265 : 					pEdit->SetText( "Broadsword" );

  04043	68 00 00 00 00	 push	 OFFSET FLAT:$SG154041
  04048	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0404b	51		 push	 ecx
  0404c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04051	83 c4 08	 add	 esp, 8

; 1266 : 					break;

  04054	eb 5a		 jmp	 SHORT $L153391
$L154042:

; 1267 : 				case 127:
; 1268 : 					if ( ((CSCI_List) m_pChar.get_pSkillArray()).at( 31 ) )

  04056	6a 1f		 push	 31			; 0000001fH
  04058	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0405d	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  04062	50		 push	 eax
  04063	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR $T160878[ebp]
  04069	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0406e	8b c8		 mov	 ecx, eax
  04070	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04075	0f bf d0	 movsx	 edx, ax
  04078	85 d2		 test	 edx, edx
  0407a	74 34		 je	 SHORT $L154045

; 1269 : 						pEdit->SetText( "%d", ((CSCI_List) m_pChar.get_pSkillArray()).at( 31 ) );

  0407c	6a 1f		 push	 31			; 0000001fH
  0407e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04083	e8 00 00 00 00	 call	 ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pSkillArray
  04088	50		 push	 eax
  04089	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR $T160879[ebp]
  0408f	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04094	8b c8		 mov	 ecx, eax
  04096	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0409b	0f bf c0	 movsx	 eax, ax
  0409e	50		 push	 eax
  0409f	68 00 00 00 00	 push	 OFFSET FLAT:$SG154048
  040a4	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  040a7	51		 push	 ecx
  040a8	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  040ad	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154045:
$L153391:

; 1272 : 		} else {

  040b0	e9 31 0c 00 00	 jmp	 $L154051
$L153389:

; 1273 : 			switch ( nControl ) {

  040b5	8b 55 d0	 mov	 edx, DWORD PTR _nControl$153387[ebp]
  040b8	89 95 a4 f9 ff
	ff		 mov	 DWORD PTR -1628+[ebp], edx
  040be	83 bd a4 f9 ff
	ff 70		 cmp	 DWORD PTR -1628+[ebp], 112 ; 00000070H
  040c5	0f 87 1b 0c 00
	00		 ja	 $L154051
  040cb	8b 8d a4 f9 ff
	ff		 mov	 ecx, DWORD PTR -1628+[ebp]
  040d1	33 c0		 xor	 eax, eax
  040d3	8a 81 00 00 00
	00		 mov	 al, BYTE PTR $L161020[ecx]
  040d9	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L161021[eax*4]
$L154054:

; 1274 : 				case 0:
; 1275 : 					msgMgr->Fatal( "There is an invalid control in this User Skin '%s'.  Name = '%s'. Can not be a field without a 3 digit number or a field with the number 000.", GetSkinName().c_str(), name );

  040e0	8b 55 f0	 mov	 edx, DWORD PTR _name$[ebp]
  040e3	52		 push	 edx
  040e4	8d 85 d8 fb ff
	ff		 lea	 eax, DWORD PTR $T160880[ebp]
  040ea	50		 push	 eax
  040eb	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  040f1	e8 00 00 00 00	 call	 ?GetSkinName@CSkinWnd@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CSkinWnd::GetSkinName
  040f6	89 85 a0 f9 ff
	ff		 mov	 DWORD PTR -1632+[ebp], eax
  040fc	8b 8d a0 f9 ff
	ff		 mov	 ecx, DWORD PTR -1632+[ebp]
  04102	89 8d 9c f9 ff
	ff		 mov	 DWORD PTR -1636+[ebp], ecx
  04108	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  0410c	8b 8d 9c f9 ff
	ff		 mov	 ecx, DWORD PTR -1636+[ebp]
  04112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  04118	50		 push	 eax
  04119	68 00 00 00 00	 push	 OFFSET FLAT:$SG154056
  0411e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  04124	52		 push	 edx
  04125	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  0412a	83 c4 10	 add	 esp, 16			; 00000010H
  0412d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  04131	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T160880[ebp]
  04137	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1276 : 					break;

  0413d	e9 a4 0b 00 00	 jmp	 $L154051
$L154057:

; 1277 : 				case 89:	//	Helm Type
; 1278 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 0 ) ).get_pCondition() ) {

  04142	6a 00		 push	 0
  04144	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04149	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  0414e	50		 push	 eax
  0414f	8d 8d d0 fb ff
	ff		 lea	 ecx, DWORD PTR $T160882[ebp]
  04155	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0415a	8b c8		 mov	 ecx, eax
  0415c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04161	50		 push	 eax
  04162	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR $T160881[ebp]
  04168	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  0416d	66 8b 85 d4 fb
	ff ff		 mov	 ax, WORD PTR $T160881[ebp]
  04174	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  04178	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0417b	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04180	0f bf c8	 movsx	 ecx, ax
  04183	85 c9		 test	 ecx, ecx
  04185	74 75		 je	 SHORT $L154061

; 1279 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  04187	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0418a	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  0418f	50		 push	 eax
  04190	8d 8d c8 fb ff
	ff		 lea	 ecx, DWORD PTR $T160884[ebp]
  04196	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0419b	8d 95 c8 fb ff
	ff		 lea	 edx, DWORD PTR $T160884[ebp]
  041a1	52		 push	 edx
  041a2	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR $T160883[ebp]
  041a8	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  041ad	8b c8		 mov	 ecx, eax
  041af	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  041b4	50		 push	 eax
  041b5	68 00 00 00 00	 push	 OFFSET FLAT:$SG154065
  041ba	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  041bd	50		 push	 eax
  041be	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  041c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1280 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  041c6	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  041c9	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  041ce	50		 push	 eax
  041cf	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T160886[ebp]
  041d5	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  041da	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T160886[ebp]
  041e0	51		 push	 ecx
  041e1	8d 8d c4 fb ff
	ff		 lea	 ecx, DWORD PTR $T160885[ebp]
  041e7	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  041ec	8b c8		 mov	 ecx, eax
  041ee	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  041f3	50		 push	 eax
  041f4	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  041f7	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L154061:

; 1282 : 					break;

  041fc	e9 e5 0a 00 00	 jmp	 $L154051
$L154069:

; 1283 : 				case 90:	//	Helm Rating
; 1284 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 0 ) ).get_pCondition() ) {

  04201	6a 00		 push	 0
  04203	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04208	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  0420d	50		 push	 eax
  0420e	8d 8d b8 fb ff
	ff		 lea	 ecx, DWORD PTR $T160888[ebp]
  04214	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04219	8b c8		 mov	 ecx, eax
  0421b	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04220	50		 push	 eax
  04221	8d 8d bc fb ff
	ff		 lea	 ecx, DWORD PTR $T160887[ebp]
  04227	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  0422c	66 8b 95 bc fb
	ff ff		 mov	 dx, WORD PTR $T160887[ebp]
  04233	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  04237	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0423a	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0423f	0f bf c0	 movsx	 eax, ax
  04242	85 c0		 test	 eax, eax
  04244	74 1d		 je	 SHORT $L154073

; 1285 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  04246	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04249	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  0424e	0f bf c8	 movsx	 ecx, ax
  04251	51		 push	 ecx
  04252	68 00 00 00 00	 push	 OFFSET FLAT:$SG154074
  04257	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  0425a	52		 push	 edx
  0425b	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04260	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154073:

; 1287 : 					break;

  04263	e9 7e 0a 00 00	 jmp	 $L154051
$L154075:

; 1288 : 				case 91:	//	Helm Condition
; 1289 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 0 ) ).get_pCondition() ) {

  04268	6a 00		 push	 0
  0426a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0426f	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04274	50		 push	 eax
  04275	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T160890[ebp]
  0427b	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04280	8b c8		 mov	 ecx, eax
  04282	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04287	50		 push	 eax
  04288	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T160889[ebp]
  0428e	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04293	66 8b 85 b4 fb
	ff ff		 mov	 ax, WORD PTR $T160889[ebp]
  0429a	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  0429e	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  042a1	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  042a6	0f bf c8	 movsx	 ecx, ax
  042a9	85 c9		 test	 ecx, ecx
  042ab	74 1d		 je	 SHORT $L154079

; 1290 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  042ad	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  042b0	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  042b5	0f bf d0	 movsx	 edx, ax
  042b8	52		 push	 edx
  042b9	68 00 00 00 00	 push	 OFFSET FLAT:$SG154080
  042be	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  042c1	50		 push	 eax
  042c2	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  042c7	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154079:

; 1292 : 					break;

  042ca	e9 17 0a 00 00	 jmp	 $L154051
$L154081:

; 1293 : 				case 92:	//	Cowl Type
; 1294 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 1 ) ).get_pCondition() ) {

  042cf	6a 01		 push	 1
  042d1	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  042d6	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  042db	50		 push	 eax
  042dc	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR $T160892[ebp]
  042e2	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  042e7	8b c8		 mov	 ecx, eax
  042e9	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  042ee	50		 push	 eax
  042ef	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR $T160891[ebp]
  042f5	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  042fa	66 8b 8d ac fb
	ff ff		 mov	 cx, WORD PTR $T160891[ebp]
  04301	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  04305	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04308	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0430d	0f bf d0	 movsx	 edx, ax
  04310	85 d2		 test	 edx, edx
  04312	74 75		 je	 SHORT $L154085

; 1295 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  04314	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04317	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  0431c	50		 push	 eax
  0431d	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR $T160894[ebp]
  04323	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04328	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR $T160894[ebp]
  0432e	50		 push	 eax
  0432f	8d 8d a4 fb ff
	ff		 lea	 ecx, DWORD PTR $T160893[ebp]
  04335	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0433a	8b c8		 mov	 ecx, eax
  0433c	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04341	50		 push	 eax
  04342	68 00 00 00 00	 push	 OFFSET FLAT:$SG154089
  04347	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0434a	51		 push	 ecx
  0434b	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04350	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1296 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  04353	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04356	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  0435b	50		 push	 eax
  0435c	8d 8d 98 fb ff
	ff		 lea	 ecx, DWORD PTR $T160896[ebp]
  04362	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04367	8d 95 98 fb ff
	ff		 lea	 edx, DWORD PTR $T160896[ebp]
  0436d	52		 push	 edx
  0436e	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T160895[ebp]
  04374	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04379	8b c8		 mov	 ecx, eax
  0437b	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04380	50		 push	 eax
  04381	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  04384	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L154085:

; 1298 : 					break;

  04389	e9 58 09 00 00	 jmp	 $L154051
$L154093:

; 1299 : 				case 93:	//	Cowl Rating
; 1300 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 1 ) ).get_pCondition() ) {

  0438e	6a 01		 push	 1
  04390	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04395	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  0439a	50		 push	 eax
  0439b	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR $T160898[ebp]
  043a1	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  043a6	8b c8		 mov	 ecx, eax
  043a8	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  043ad	50		 push	 eax
  043ae	8d 8d 94 fb ff
	ff		 lea	 ecx, DWORD PTR $T160897[ebp]
  043b4	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  043b9	66 8b 85 94 fb
	ff ff		 mov	 ax, WORD PTR $T160897[ebp]
  043c0	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  043c4	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  043c7	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  043cc	0f bf c8	 movsx	 ecx, ax
  043cf	85 c9		 test	 ecx, ecx
  043d1	74 1d		 je	 SHORT $L154097

; 1301 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  043d3	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  043d6	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  043db	0f bf d0	 movsx	 edx, ax
  043de	52		 push	 edx
  043df	68 00 00 00 00	 push	 OFFSET FLAT:$SG154098
  043e4	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  043e7	50		 push	 eax
  043e8	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  043ed	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154097:

; 1303 : 					break;

  043f0	e9 f1 08 00 00	 jmp	 $L154051
$L154099:

; 1304 : 				case 94:	//	Cowl Condition
; 1305 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 1 ) ).get_pCondition() ) {

  043f5	6a 01		 push	 1
  043f7	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  043fc	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04401	50		 push	 eax
  04402	8d 8d 88 fb ff
	ff		 lea	 ecx, DWORD PTR $T160900[ebp]
  04408	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0440d	8b c8		 mov	 ecx, eax
  0440f	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04414	50		 push	 eax
  04415	8d 8d 8c fb ff
	ff		 lea	 ecx, DWORD PTR $T160899[ebp]
  0441b	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04420	66 8b 8d 8c fb
	ff ff		 mov	 cx, WORD PTR $T160899[ebp]
  04427	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  0442b	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0442e	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04433	0f bf d0	 movsx	 edx, ax
  04436	85 d2		 test	 edx, edx
  04438	74 1d		 je	 SHORT $L154103

; 1306 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  0443a	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0443d	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04442	0f bf c0	 movsx	 eax, ax
  04445	50		 push	 eax
  04446	68 00 00 00 00	 push	 OFFSET FLAT:$SG154104
  0444b	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0444e	51		 push	 ecx
  0444f	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04454	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154103:

; 1308 : 					break;

  04457	e9 8a 08 00 00	 jmp	 $L154051
$L154105:

; 1309 : 				case 95:	//	Chest Type
; 1310 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 2 ) ).get_pCondition() ) {

  0445c	6a 02		 push	 2
  0445e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04463	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04468	50		 push	 eax
  04469	8d 8d 80 fb ff
	ff		 lea	 ecx, DWORD PTR $T160902[ebp]
  0446f	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04474	8b c8		 mov	 ecx, eax
  04476	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0447b	50		 push	 eax
  0447c	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T160901[ebp]
  04482	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04487	66 8b 95 84 fb
	ff ff		 mov	 dx, WORD PTR $T160901[ebp]
  0448e	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  04492	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04495	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0449a	0f bf c0	 movsx	 eax, ax
  0449d	85 c0		 test	 eax, eax
  0449f	74 75		 je	 SHORT $L154109

; 1311 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  044a1	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  044a4	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  044a9	50		 push	 eax
  044aa	8d 8d 78 fb ff
	ff		 lea	 ecx, DWORD PTR $T160904[ebp]
  044b0	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  044b5	8d 8d 78 fb ff
	ff		 lea	 ecx, DWORD PTR $T160904[ebp]
  044bb	51		 push	 ecx
  044bc	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR $T160903[ebp]
  044c2	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  044c7	8b c8		 mov	 ecx, eax
  044c9	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  044ce	50		 push	 eax
  044cf	68 00 00 00 00	 push	 OFFSET FLAT:$SG154113
  044d4	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  044d7	52		 push	 edx
  044d8	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  044dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1312 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  044e0	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  044e3	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  044e8	50		 push	 eax
  044e9	8d 8d 70 fb ff
	ff		 lea	 ecx, DWORD PTR $T160906[ebp]
  044ef	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  044f4	8d 85 70 fb ff
	ff		 lea	 eax, DWORD PTR $T160906[ebp]
  044fa	50		 push	 eax
  044fb	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR $T160905[ebp]
  04501	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04506	8b c8		 mov	 ecx, eax
  04508	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0450d	50		 push	 eax
  0450e	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  04511	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L154109:

; 1314 : 					break;

  04516	e9 cb 07 00 00	 jmp	 $L154051
$L154117:

; 1315 : 				case 96:	//	Chest Rating
; 1316 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 2 ) ).get_pCondition() ) {

  0451b	6a 02		 push	 2
  0451d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04522	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04527	50		 push	 eax
  04528	8d 8d 68 fb ff
	ff		 lea	 ecx, DWORD PTR $T160908[ebp]
  0452e	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04533	8b c8		 mov	 ecx, eax
  04535	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0453a	50		 push	 eax
  0453b	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR $T160907[ebp]
  04541	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04546	66 8b 8d 6c fb
	ff ff		 mov	 cx, WORD PTR $T160907[ebp]
  0454d	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  04551	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04554	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04559	0f bf d0	 movsx	 edx, ax
  0455c	85 d2		 test	 edx, edx
  0455e	74 1d		 je	 SHORT $L154121

; 1317 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  04560	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04563	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  04568	0f bf c0	 movsx	 eax, ax
  0456b	50		 push	 eax
  0456c	68 00 00 00 00	 push	 OFFSET FLAT:$SG154122
  04571	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  04574	51		 push	 ecx
  04575	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0457a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154121:

; 1319 : 					break;

  0457d	e9 64 07 00 00	 jmp	 $L154051
$L154123:

; 1320 : 				case 97:	//	Chest Condition
; 1321 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 2 ) ).get_pCondition() ) {

  04582	6a 02		 push	 2
  04584	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04589	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  0458e	50		 push	 eax
  0458f	8d 8d 60 fb ff
	ff		 lea	 ecx, DWORD PTR $T160910[ebp]
  04595	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0459a	8b c8		 mov	 ecx, eax
  0459c	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  045a1	50		 push	 eax
  045a2	8d 8d 64 fb ff
	ff		 lea	 ecx, DWORD PTR $T160909[ebp]
  045a8	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  045ad	66 8b 95 64 fb
	ff ff		 mov	 dx, WORD PTR $T160909[ebp]
  045b4	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  045b8	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  045bb	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  045c0	0f bf c0	 movsx	 eax, ax
  045c3	85 c0		 test	 eax, eax
  045c5	74 1d		 je	 SHORT $L154127

; 1322 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  045c7	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  045ca	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  045cf	0f bf c8	 movsx	 ecx, ax
  045d2	51		 push	 ecx
  045d3	68 00 00 00 00	 push	 OFFSET FLAT:$SG154128
  045d8	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  045db	52		 push	 edx
  045dc	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  045e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154127:

; 1324 : 					break;

  045e4	e9 fd 06 00 00	 jmp	 $L154051
$L154129:

; 1325 : 				case 98:	//	Wrists Type
; 1326 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 3 ) ).get_pCondition() ) {

  045e9	6a 03		 push	 3
  045eb	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  045f0	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  045f5	50		 push	 eax
  045f6	8d 8d 58 fb ff
	ff		 lea	 ecx, DWORD PTR $T160912[ebp]
  045fc	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04601	8b c8		 mov	 ecx, eax
  04603	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04608	50		 push	 eax
  04609	8d 8d 5c fb ff
	ff		 lea	 ecx, DWORD PTR $T160911[ebp]
  0460f	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04614	66 8b 85 5c fb
	ff ff		 mov	 ax, WORD PTR $T160911[ebp]
  0461b	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  0461f	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04622	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04627	0f bf c8	 movsx	 ecx, ax
  0462a	85 c9		 test	 ecx, ecx
  0462c	74 75		 je	 SHORT $L154133

; 1327 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  0462e	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04631	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  04636	50		 push	 eax
  04637	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR $T160914[ebp]
  0463d	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04642	8d 95 50 fb ff
	ff		 lea	 edx, DWORD PTR $T160914[ebp]
  04648	52		 push	 edx
  04649	8d 8d 54 fb ff
	ff		 lea	 ecx, DWORD PTR $T160913[ebp]
  0464f	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04654	8b c8		 mov	 ecx, eax
  04656	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0465b	50		 push	 eax
  0465c	68 00 00 00 00	 push	 OFFSET FLAT:$SG154137
  04661	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  04664	50		 push	 eax
  04665	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0466a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1328 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  0466d	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04670	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  04675	50		 push	 eax
  04676	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR $T160916[ebp]
  0467c	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04681	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR $T160916[ebp]
  04687	51		 push	 ecx
  04688	8d 8d 4c fb ff
	ff		 lea	 ecx, DWORD PTR $T160915[ebp]
  0468e	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04693	8b c8		 mov	 ecx, eax
  04695	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0469a	50		 push	 eax
  0469b	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0469e	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L154133:

; 1330 : 					break;

  046a3	e9 3e 06 00 00	 jmp	 $L154051
$L154141:

; 1331 : 				case 99:	//	Wrists Rating
; 1332 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 3 ) ).get_pCondition() ) {

  046a8	6a 03		 push	 3
  046aa	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  046af	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  046b4	50		 push	 eax
  046b5	8d 8d 40 fb ff
	ff		 lea	 ecx, DWORD PTR $T160918[ebp]
  046bb	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  046c0	8b c8		 mov	 ecx, eax
  046c2	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  046c7	50		 push	 eax
  046c8	8d 8d 44 fb ff
	ff		 lea	 ecx, DWORD PTR $T160917[ebp]
  046ce	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  046d3	66 8b 95 44 fb
	ff ff		 mov	 dx, WORD PTR $T160917[ebp]
  046da	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  046de	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  046e1	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  046e6	0f bf c0	 movsx	 eax, ax
  046e9	85 c0		 test	 eax, eax
  046eb	74 1d		 je	 SHORT $L154145

; 1333 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  046ed	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  046f0	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  046f5	0f bf c8	 movsx	 ecx, ax
  046f8	51		 push	 ecx
  046f9	68 00 00 00 00	 push	 OFFSET FLAT:$SG154146
  046fe	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  04701	52		 push	 edx
  04702	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04707	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154145:

; 1335 : 					break;

  0470a	e9 d7 05 00 00	 jmp	 $L154051
$L154147:

; 1336 : 				case 100:	//	Wrists Condition
; 1337 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 3 ) ).get_pCondition() ) {

  0470f	6a 03		 push	 3
  04711	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04716	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  0471b	50		 push	 eax
  0471c	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR $T160920[ebp]
  04722	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04727	8b c8		 mov	 ecx, eax
  04729	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  0472e	50		 push	 eax
  0472f	8d 8d 3c fb ff
	ff		 lea	 ecx, DWORD PTR $T160919[ebp]
  04735	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  0473a	66 8b 85 3c fb
	ff ff		 mov	 ax, WORD PTR $T160919[ebp]
  04741	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  04745	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04748	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0474d	0f bf c8	 movsx	 ecx, ax
  04750	85 c9		 test	 ecx, ecx
  04752	74 1d		 je	 SHORT $L154151

; 1338 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  04754	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04757	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  0475c	0f bf d0	 movsx	 edx, ax
  0475f	52		 push	 edx
  04760	68 00 00 00 00	 push	 OFFSET FLAT:$SG154152
  04765	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  04768	50		 push	 eax
  04769	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  0476e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154151:

; 1340 : 					break;

  04771	e9 70 05 00 00	 jmp	 $L154051
$L154153:

; 1341 : 				case 101:	//	Legs Type
; 1342 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 4 ) ).get_pCondition() ) {

  04776	6a 04		 push	 4
  04778	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0477d	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04782	50		 push	 eax
  04783	8d 8d 30 fb ff
	ff		 lea	 ecx, DWORD PTR $T160922[ebp]
  04789	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0478e	8b c8		 mov	 ecx, eax
  04790	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04795	50		 push	 eax
  04796	8d 8d 34 fb ff
	ff		 lea	 ecx, DWORD PTR $T160921[ebp]
  0479c	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  047a1	66 8b 8d 34 fb
	ff ff		 mov	 cx, WORD PTR $T160921[ebp]
  047a8	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  047ac	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  047af	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  047b4	0f bf d0	 movsx	 edx, ax
  047b7	85 d2		 test	 edx, edx
  047b9	74 75		 je	 SHORT $L154157

; 1343 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  047bb	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  047be	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  047c3	50		 push	 eax
  047c4	8d 8d 28 fb ff
	ff		 lea	 ecx, DWORD PTR $T160924[ebp]
  047ca	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  047cf	8d 85 28 fb ff
	ff		 lea	 eax, DWORD PTR $T160924[ebp]
  047d5	50		 push	 eax
  047d6	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T160923[ebp]
  047dc	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  047e1	8b c8		 mov	 ecx, eax
  047e3	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  047e8	50		 push	 eax
  047e9	68 00 00 00 00	 push	 OFFSET FLAT:$SG154161
  047ee	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  047f1	51		 push	 ecx
  047f2	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  047f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1344 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  047fa	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  047fd	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  04802	50		 push	 eax
  04803	8d 8d 20 fb ff
	ff		 lea	 ecx, DWORD PTR $T160926[ebp]
  04809	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0480e	8d 95 20 fb ff
	ff		 lea	 edx, DWORD PTR $T160926[ebp]
  04814	52		 push	 edx
  04815	8d 8d 24 fb ff
	ff		 lea	 ecx, DWORD PTR $T160925[ebp]
  0481b	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04820	8b c8		 mov	 ecx, eax
  04822	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04827	50		 push	 eax
  04828	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  0482b	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L154157:

; 1346 : 					break;

  04830	e9 b1 04 00 00	 jmp	 $L154051
$L154165:

; 1347 : 				case 102:	//	Legs Rating
; 1348 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 4 ) ).get_pCondition() ) {

  04835	6a 04		 push	 4
  04837	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0483c	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04841	50		 push	 eax
  04842	8d 8d 18 fb ff
	ff		 lea	 ecx, DWORD PTR $T160928[ebp]
  04848	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0484d	8b c8		 mov	 ecx, eax
  0484f	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04854	50		 push	 eax
  04855	8d 8d 1c fb ff
	ff		 lea	 ecx, DWORD PTR $T160927[ebp]
  0485b	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04860	66 8b 85 1c fb
	ff ff		 mov	 ax, WORD PTR $T160927[ebp]
  04867	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  0486b	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0486e	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04873	0f bf c8	 movsx	 ecx, ax
  04876	85 c9		 test	 ecx, ecx
  04878	74 1d		 je	 SHORT $L154169

; 1349 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  0487a	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0487d	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  04882	0f bf d0	 movsx	 edx, ax
  04885	52		 push	 edx
  04886	68 00 00 00 00	 push	 OFFSET FLAT:$SG154170
  0488b	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  0488e	50		 push	 eax
  0488f	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04894	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154169:

; 1351 : 					break;

  04897	e9 4a 04 00 00	 jmp	 $L154051
$L154171:

; 1352 : 				case 103:	//	Legs Condition
; 1353 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 4 ) ).get_pCondition() ) {

  0489c	6a 04		 push	 4
  0489e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  048a3	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  048a8	50		 push	 eax
  048a9	8d 8d 10 fb ff
	ff		 lea	 ecx, DWORD PTR $T160930[ebp]
  048af	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  048b4	8b c8		 mov	 ecx, eax
  048b6	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  048bb	50		 push	 eax
  048bc	8d 8d 14 fb ff
	ff		 lea	 ecx, DWORD PTR $T160929[ebp]
  048c2	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  048c7	66 8b 8d 14 fb
	ff ff		 mov	 cx, WORD PTR $T160929[ebp]
  048ce	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  048d2	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  048d5	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  048da	0f bf d0	 movsx	 edx, ax
  048dd	85 d2		 test	 edx, edx
  048df	74 1d		 je	 SHORT $L154175

; 1354 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  048e1	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  048e4	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  048e9	0f bf c0	 movsx	 eax, ax
  048ec	50		 push	 eax
  048ed	68 00 00 00 00	 push	 OFFSET FLAT:$SG154176
  048f2	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  048f5	51		 push	 ecx
  048f6	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  048fb	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154175:

; 1356 : 					break;

  048fe	e9 e3 03 00 00	 jmp	 $L154051
$L154177:

; 1357 : 				case 104:	//	Feet Type
; 1358 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 5 ) ).get_pCondition() ) {

  04903	6a 05		 push	 5
  04905	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0490a	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  0490f	50		 push	 eax
  04910	8d 8d 08 fb ff
	ff		 lea	 ecx, DWORD PTR $T160932[ebp]
  04916	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  0491b	8b c8		 mov	 ecx, eax
  0491d	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04922	50		 push	 eax
  04923	8d 8d 0c fb ff
	ff		 lea	 ecx, DWORD PTR $T160931[ebp]
  04929	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  0492e	66 8b 95 0c fb
	ff ff		 mov	 dx, WORD PTR $T160931[ebp]
  04935	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  04939	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0493c	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04941	0f bf c0	 movsx	 eax, ax
  04944	85 c0		 test	 eax, eax
  04946	74 75		 je	 SHORT $L154181

; 1359 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  04948	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0494b	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  04950	50		 push	 eax
  04951	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR $T160934[ebp]
  04957	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0495c	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR $T160934[ebp]
  04962	51		 push	 ecx
  04963	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR $T160933[ebp]
  04969	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0496e	8b c8		 mov	 ecx, eax
  04970	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04975	50		 push	 eax
  04976	68 00 00 00 00	 push	 OFFSET FLAT:$SG154185
  0497b	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  0497e	52		 push	 edx
  0497f	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04984	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1360 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  04987	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  0498a	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  0498f	50		 push	 eax
  04990	8d 8d f8 fa ff
	ff		 lea	 ecx, DWORD PTR $T160936[ebp]
  04996	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0499b	8d 85 f8 fa ff
	ff		 lea	 eax, DWORD PTR $T160936[ebp]
  049a1	50		 push	 eax
  049a2	8d 8d fc fa ff
	ff		 lea	 ecx, DWORD PTR $T160935[ebp]
  049a8	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  049ad	8b c8		 mov	 ecx, eax
  049af	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  049b4	50		 push	 eax
  049b5	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  049b8	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L154181:

; 1362 : 					break;

  049bd	e9 24 03 00 00	 jmp	 $L154051
$L154189:

; 1363 : 				case 105:	//	Feet Rating
; 1364 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 5 ) ).get_pCondition() ) {

  049c2	6a 05		 push	 5
  049c4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  049c9	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  049ce	50		 push	 eax
  049cf	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR $T160938[ebp]
  049d5	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  049da	8b c8		 mov	 ecx, eax
  049dc	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  049e1	50		 push	 eax
  049e2	8d 8d f4 fa ff
	ff		 lea	 ecx, DWORD PTR $T160937[ebp]
  049e8	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  049ed	66 8b 8d f4 fa
	ff ff		 mov	 cx, WORD PTR $T160937[ebp]
  049f4	66 89 4d cc	 mov	 WORD PTR _pArmor$153380[ebp], cx
  049f8	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  049fb	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04a00	0f bf d0	 movsx	 edx, ax
  04a03	85 d2		 test	 edx, edx
  04a05	74 1d		 je	 SHORT $L154193

; 1365 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  04a07	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04a0a	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  04a0f	0f bf c0	 movsx	 eax, ax
  04a12	50		 push	 eax
  04a13	68 00 00 00 00	 push	 OFFSET FLAT:$SG154194
  04a18	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  04a1b	51		 push	 ecx
  04a1c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04a21	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154193:

; 1367 : 					break;

  04a24	e9 bd 02 00 00	 jmp	 $L154051
$L154195:

; 1368 : 				case 106:	//	Feet Condition
; 1369 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 5 ) ).get_pCondition() ) {

  04a29	6a 05		 push	 5
  04a2b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04a30	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04a35	50		 push	 eax
  04a36	8d 8d e8 fa ff
	ff		 lea	 ecx, DWORD PTR $T160940[ebp]
  04a3c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04a41	8b c8		 mov	 ecx, eax
  04a43	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04a48	50		 push	 eax
  04a49	8d 8d ec fa ff
	ff		 lea	 ecx, DWORD PTR $T160939[ebp]
  04a4f	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04a54	66 8b 95 ec fa
	ff ff		 mov	 dx, WORD PTR $T160939[ebp]
  04a5b	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  04a5f	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04a62	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04a67	0f bf c0	 movsx	 eax, ax
  04a6a	85 c0		 test	 eax, eax
  04a6c	74 1d		 je	 SHORT $L154199

; 1370 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  04a6e	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04a71	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04a76	0f bf c8	 movsx	 ecx, ax
  04a79	51		 push	 ecx
  04a7a	68 00 00 00 00	 push	 OFFSET FLAT:$SG154200
  04a7f	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  04a82	52		 push	 edx
  04a83	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04a88	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154199:

; 1372 : 					break;

  04a8b	e9 56 02 00 00	 jmp	 $L154051
$L154201:

; 1373 : 				case 107:	//	Shield Type
; 1374 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 6 ) ).get_pCondition() ) {

  04a90	6a 06		 push	 6
  04a92	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04a97	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04a9c	50		 push	 eax
  04a9d	8d 8d e0 fa ff
	ff		 lea	 ecx, DWORD PTR $T160942[ebp]
  04aa3	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04aa8	8b c8		 mov	 ecx, eax
  04aaa	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04aaf	50		 push	 eax
  04ab0	8d 8d e4 fa ff
	ff		 lea	 ecx, DWORD PTR $T160941[ebp]
  04ab6	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04abb	66 8b 85 e4 fa
	ff ff		 mov	 ax, WORD PTR $T160941[ebp]
  04ac2	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  04ac6	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04ac9	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04ace	0f bf c8	 movsx	 ecx, ax
  04ad1	85 c9		 test	 ecx, ecx
  04ad3	74 75		 je	 SHORT $L154205

; 1375 : 						pEdit->SetText( "%s", *((StringID) pArmor.get_pType() ) );

  04ad5	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04ad8	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  04add	50		 push	 eax
  04ade	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR $T160944[ebp]
  04ae4	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04ae9	8d 95 d8 fa ff
	ff		 lea	 edx, DWORD PTR $T160944[ebp]
  04aef	52		 push	 edx
  04af0	8d 8d dc fa ff
	ff		 lea	 ecx, DWORD PTR $T160943[ebp]
  04af6	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04afb	8b c8		 mov	 ecx, eax
  04afd	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04b02	50		 push	 eax
  04b03	68 00 00 00 00	 push	 OFFSET FLAT:$SG154209
  04b08	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  04b0b	50		 push	 eax
  04b0c	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04b11	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1376 : 						pEdit->SetHint( *((StringID) pArmor.get_pType() ) );

  04b14	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04b17	e8 00 00 00 00	 call	 ?get_pType@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pType
  04b1c	50		 push	 eax
  04b1d	8d 8d d0 fa ff
	ff		 lea	 ecx, DWORD PTR $T160946[ebp]
  04b23	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04b28	8d 8d d0 fa ff
	ff		 lea	 ecx, DWORD PTR $T160946[ebp]
  04b2e	51		 push	 ecx
  04b2f	8d 8d d4 fa ff
	ff		 lea	 ecx, DWORD PTR $T160945[ebp]
  04b35	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04b3a	8b c8		 mov	 ecx, eax
  04b3c	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04b41	50		 push	 eax
  04b42	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  04b45	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint
$L154205:

; 1378 : 					break;

  04b4a	e9 97 01 00 00	 jmp	 $L154051
$L154213:

; 1379 : 				case 108:	//	Shield Rating
; 1380 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 6 ) ).get_pCondition() ) {

  04b4f	6a 06		 push	 6
  04b51	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04b56	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04b5b	50		 push	 eax
  04b5c	8d 8d c8 fa ff
	ff		 lea	 ecx, DWORD PTR $T160948[ebp]
  04b62	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04b67	8b c8		 mov	 ecx, eax
  04b69	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04b6e	50		 push	 eax
  04b6f	8d 8d cc fa ff
	ff		 lea	 ecx, DWORD PTR $T160947[ebp]
  04b75	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04b7a	66 8b 95 cc fa
	ff ff		 mov	 dx, WORD PTR $T160947[ebp]
  04b81	66 89 55 cc	 mov	 WORD PTR _pArmor$153380[ebp], dx
  04b85	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04b88	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04b8d	0f bf c0	 movsx	 eax, ax
  04b90	85 c0		 test	 eax, eax
  04b92	74 1d		 je	 SHORT $L154217

; 1381 : 						pEdit->SetText( "%d", pArmor.get_pRating() );

  04b94	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04b97	e8 00 00 00 00	 call	 ?get_pRating@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pRating
  04b9c	0f bf c8	 movsx	 ecx, ax
  04b9f	51		 push	 ecx
  04ba0	68 00 00 00 00	 push	 OFFSET FLAT:$SG154218
  04ba5	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  04ba8	52		 push	 edx
  04ba9	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04bae	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154217:

; 1383 : 					break;

  04bb1	e9 30 01 00 00	 jmp	 $L154051
$L154219:

; 1384 : 				case 109:	//	Shield Condition
; 1385 : 					if ( ( pArmor = ((CSCI_List) m_pChar.get_pArmorInfoList()).at( 6 ) ).get_pCondition() ) {

  04bb6	6a 06		 push	 6
  04bb8	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04bbd	e8 00 00 00 00	 call	 ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pArmorInfoList
  04bc2	50		 push	 eax
  04bc3	8d 8d c0 fa ff
	ff		 lea	 ecx, DWORD PTR $T160950[ebp]
  04bc9	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04bce	8b c8		 mov	 ecx, eax
  04bd0	e8 00 00 00 00	 call	 ?at@CSCI_List@@QAEFF@Z	; CSCI_List::at
  04bd5	50		 push	 eax
  04bd6	8d 8d c4 fa ff
	ff		 lea	 ecx, DWORD PTR $T160949[ebp]
  04bdc	e8 00 00 00 00	 call	 ??0CSCI_ArmorInfo@@QAE@G@Z ; CSCI_ArmorInfo::CSCI_ArmorInfo
  04be1	66 8b 85 c4 fa
	ff ff		 mov	 ax, WORD PTR $T160949[ebp]
  04be8	66 89 45 cc	 mov	 WORD PTR _pArmor$153380[ebp], ax
  04bec	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04bef	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04bf4	0f bf c8	 movsx	 ecx, ax
  04bf7	85 c9		 test	 ecx, ecx
  04bf9	74 1d		 je	 SHORT $L154223

; 1386 : 						pEdit->SetText( "%d%%", pArmor.get_pCondition() );

  04bfb	8d 4d cc	 lea	 ecx, DWORD PTR _pArmor$153380[ebp]
  04bfe	e8 00 00 00 00	 call	 ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ; CSCI_ArmorInfo::get_pCondition
  04c03	0f bf d0	 movsx	 edx, ax
  04c06	52		 push	 edx
  04c07	68 00 00 00 00	 push	 OFFSET FLAT:$SG154224
  04c0c	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  04c0f	50		 push	 eax
  04c10	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04c15	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154223:

; 1388 : 					break;

  04c18	e9 c9 00 00 00	 jmp	 $L154051
$L154225:

; 1389 : 				case 110:	//	Weapon Type
; 1390 : 					pEdit->SetText( "%s", *((StringID) m_pChar.get_pWeaponName()) );

  04c1d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04c22	e8 00 00 00 00	 call	 ?get_pWeaponName@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponName
  04c27	50		 push	 eax
  04c28	8d 8d b8 fa ff
	ff		 lea	 ecx, DWORD PTR $T160952[ebp]
  04c2e	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04c33	8d 8d b8 fa ff
	ff		 lea	 ecx, DWORD PTR $T160952[ebp]
  04c39	51		 push	 ecx
  04c3a	8d 8d bc fa ff
	ff		 lea	 ecx, DWORD PTR $T160951[ebp]
  04c40	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04c45	8b c8		 mov	 ecx, eax
  04c47	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04c4c	50		 push	 eax
  04c4d	68 00 00 00 00	 push	 OFFSET FLAT:$SG154229
  04c52	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  04c55	52		 push	 edx
  04c56	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04c5b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1391 : 					pEdit->SetHint( *((StringID) m_pChar.get_pWeaponName() ) );

  04c5e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04c63	e8 00 00 00 00	 call	 ?get_pWeaponName@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponName
  04c68	50		 push	 eax
  04c69	8d 8d b0 fa ff
	ff		 lea	 ecx, DWORD PTR $T160954[ebp]
  04c6f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04c74	8d 85 b0 fa ff
	ff		 lea	 eax, DWORD PTR $T160954[ebp]
  04c7a	50		 push	 eax
  04c7b	8d 8d b4 fa ff
	ff		 lea	 ecx, DWORD PTR $T160953[ebp]
  04c81	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04c86	8b c8		 mov	 ecx, eax
  04c88	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04c8d	50		 push	 eax
  04c8e	8b 4d d4	 mov	 ecx, DWORD PTR _pEdit$153381[ebp]
  04c91	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint

; 1392 : 					break;

  04c96	eb 4e		 jmp	 SHORT $L154051
$L154233:

; 1393 : 				case 111:	//	Weapon Rating
; 1394 : 					pEdit->SetText( "%d-%d", m_pChar.get_pWeaponDamageMin(), m_pChar.get_pWeaponDamageMax() );

  04c98	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04c9d	e8 00 00 00 00	 call	 ?get_pWeaponDamageMax@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponDamageMax
  04ca2	0f bf c8	 movsx	 ecx, ax
  04ca5	51		 push	 ecx
  04ca6	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04cab	e8 00 00 00 00	 call	 ?get_pWeaponDamageMin@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponDamageMin
  04cb0	0f bf d0	 movsx	 edx, ax
  04cb3	52		 push	 edx
  04cb4	68 00 00 00 00	 push	 OFFSET FLAT:$SG154234
  04cb9	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  04cbc	50		 push	 eax
  04cbd	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04cc2	83 c4 10	 add	 esp, 16			; 00000010H

; 1395 : 					break;

  04cc5	eb 1f		 jmp	 SHORT $L154051
$L154235:

; 1396 : 				case 112:	//	Weapon Condition
; 1397 : 					pEdit->SetText( "%d%%", m_pChar.get_pWeaponCondition() );

  04cc7	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04ccc	e8 00 00 00 00	 call	 ?get_pWeaponCondition@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pWeaponCondition
  04cd1	0f bf c8	 movsx	 ecx, ax
  04cd4	51		 push	 ecx
  04cd5	68 00 00 00 00	 push	 OFFSET FLAT:$SG154236
  04cda	8b 55 d4	 mov	 edx, DWORD PTR _pEdit$153381[ebp]
  04cdd	52		 push	 edx
  04cde	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  04ce3	83 c4 0c	 add	 esp, 12			; 0000000cH
$L154051:

; 1401 : 
; 1402 : 		return pEdit;

  04ce6	8b 45 d4	 mov	 eax, DWORD PTR _pEdit$153381[ebp]
  04ce9	89 85 ac fa ff
	ff		 mov	 DWORD PTR $T160955[ebp], eax
  04cef	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  04cf3	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04cf6	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  04cfb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  04cff	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  04d02	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  04d07	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04d0e	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  04d11	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  04d16	8b 85 ac fa ff
	ff		 mov	 eax, DWORD PTR $T160955[ebp]
  04d1c	e9 4f 03 00 00	 jmp	 $L153276
$L153378:

; 1404 : 
; 1405 : 	//	The PVP switch control
; 1406 : 	if ( "at" == id ) {

  04d21	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04d24	51		 push	 ecx
  04d25	68 00 00 00 00	 push	 OFFSET FLAT:$SG154239
  04d2a	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  04d2f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  04d34	85 c0		 test	 eax, eax
  04d36	0f 84 c9 00 00
	00		 je	 $L154238

; 1407 : 		return new CPVPAttribute( obj, this, m_pChar.get_pPvp() );

  04d3c	6a 28		 push	 40			; 00000028H
  04d3e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  04d43	83 c4 04	 add	 esp, 4
  04d46	89 85 a0 fa ff
	ff		 mov	 DWORD PTR $T160958[ebp], eax
  04d4c	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
  04d50	83 bd a0 fa ff
	ff 00		 cmp	 DWORD PTR $T160958[ebp], 0
  04d57	74 54		 je	 SHORT $L160960
  04d59	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04d5e	e8 00 00 00 00	 call	 ?get_pPvp@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pPvp
  04d63	0f bf d0	 movsx	 edx, ax
  04d66	f7 da		 neg	 edx
  04d68	1b d2		 sbb	 edx, edx
  04d6a	f7 da		 neg	 edx
  04d6c	52		 push	 edx
  04d6d	8b 85 70 fa ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  04d73	50		 push	 eax
  04d74	83 ec 08	 sub	 esp, 8
  04d77	8b cc		 mov	 ecx, esp
  04d79	89 a5 9c fa ff
	ff		 mov	 DWORD PTR $T160959[ebp], esp
  04d7f	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  04d82	52		 push	 edx
  04d83	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  04d88	89 85 98 f9 ff
	ff		 mov	 DWORD PTR -1640+[ebp], eax
  04d8e	8b 8d a0 fa ff
	ff		 mov	 ecx, DWORD PTR $T160958[ebp]
  04d94	e8 00 00 00 00	 call	 ??0CPVPAttribute@@QAE@VCSkinObj@@PAVCSkinWnd@@_N@Z ; CPVPAttribute::CPVPAttribute
  04d99	89 85 94 f9 ff
	ff		 mov	 DWORD PTR -1644+[ebp], eax
  04d9f	8b 85 94 f9 ff
	ff		 mov	 eax, DWORD PTR -1644+[ebp]
  04da5	89 85 90 f9 ff
	ff		 mov	 DWORD PTR -1648+[ebp], eax
  04dab	eb 0a		 jmp	 SHORT $L160961
$L160960:
  04dad	c7 85 90 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1648+[ebp], 0
$L160961:
  04db7	8b 8d 90 f9 ff
	ff		 mov	 ecx, DWORD PTR -1648+[ebp]
  04dbd	89 8d a4 fa ff
	ff		 mov	 DWORD PTR $T160957[ebp], ecx
  04dc3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  04dc7	8b 95 a4 fa ff
	ff		 mov	 edx, DWORD PTR $T160957[ebp]
  04dcd	89 95 a8 fa ff
	ff		 mov	 DWORD PTR $T160956[ebp], edx
  04dd3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  04dd7	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04dda	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  04ddf	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  04de3	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  04de6	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  04deb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04df2	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  04df5	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  04dfa	8b 85 a8 fa ff
	ff		 mov	 eax, DWORD PTR $T160956[ebp]
  04e00	e9 6b 02 00 00	 jmp	 $L153276
$L154238:

; 1409 : 
; 1410 : 	//	The PVP inc/dec buttons
; 1411 : 	if ( id.IsEmpty() ) {

  04e05	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04e08	e8 00 00 00 00	 call	 ?IsEmpty@CString@@QBEHXZ ; CString::IsEmpty
  04e0d	85 c0		 test	 eax, eax
  04e0f	0f 84 f7 01 00
	00		 je	 $L154258

; 1412 : 		// handle up button
; 1413 : 		if ( name == "inc" ) {

  04e15	68 00 00 00 00	 push	 OFFSET FLAT:$SG154248
  04e1a	8d 45 f0	 lea	 eax, DWORD PTR _name$[ebp]
  04e1d	50		 push	 eax
  04e1e	e8 00 00 00 00	 call	 ??8@YG_NABVCString@@PBD@Z ; operator==
  04e23	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  04e28	85 c0		 test	 eax, eax
  04e2a	0f 84 e2 00 00
	00		 je	 $L154247

; 1414 : 			CSkinChangeButton* pBtn = new CSkinChangeButton ( obj, this, 1 );

  04e30	6a 1c		 push	 28			; 0000001cH
  04e32	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  04e37	83 c4 04	 add	 esp, 4
  04e3a	89 85 94 fa ff
	ff		 mov	 DWORD PTR $T160963[ebp], eax
  04e40	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  04e44	83 bd 94 fa ff
	ff 00		 cmp	 DWORD PTR $T160963[ebp], 0
  04e4b	74 42		 je	 SHORT $L160965
  04e4d	6a 01		 push	 1
  04e4f	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  04e55	51		 push	 ecx
  04e56	83 ec 08	 sub	 esp, 8
  04e59	8b cc		 mov	 ecx, esp
  04e5b	89 a5 90 fa ff
	ff		 mov	 DWORD PTR $T160964[ebp], esp
  04e61	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  04e64	52		 push	 edx
  04e65	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  04e6a	89 85 8c f9 ff
	ff		 mov	 DWORD PTR -1652+[ebp], eax
  04e70	8b 8d 94 fa ff
	ff		 mov	 ecx, DWORD PTR $T160963[ebp]
  04e76	e8 00 00 00 00	 call	 ??0CSkinChangeButton@@QAE@VCSkinObj@@PAVCSkinWnd@@H@Z ; CSkinChangeButton::CSkinChangeButton
  04e7b	89 85 88 f9 ff
	ff		 mov	 DWORD PTR -1656+[ebp], eax
  04e81	8b 85 88 f9 ff
	ff		 mov	 eax, DWORD PTR -1656+[ebp]
  04e87	89 85 84 f9 ff
	ff		 mov	 DWORD PTR -1660+[ebp], eax
  04e8d	eb 0a		 jmp	 SHORT $L160966
$L160965:
  04e8f	c7 85 84 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1660+[ebp], 0
$L160966:
  04e99	8b 8d 84 f9 ff
	ff		 mov	 ecx, DWORD PTR -1660+[ebp]
  04e9f	89 8d 98 fa ff
	ff		 mov	 DWORD PTR $T160962[ebp], ecx
  04ea5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  04ea9	8b 95 98 fa ff
	ff		 mov	 edx, DWORD PTR $T160962[ebp]
  04eaf	89 55 a0	 mov	 DWORD PTR _pBtn$154249[ebp], edx

; 1415 : 	
; 1416 : 			if ( !m_pChar.get_pIsSelf() || g_pCharSelWnd ) {

  04eb2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04eb7	e8 00 00 00 00	 call	 ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pIsSelf
  04ebc	0f bf c0	 movsx	 eax, ax
  04ebf	85 c0		 test	 eax, eax
  04ec1	74 09		 je	 SHORT $L154256
  04ec3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, 0 ; g_pCharSelWnd
  04eca	74 0b		 je	 SHORT $L154255
$L154256:

; 1417 : 				pBtn->Disable();

  04ecc	8b 4d a0	 mov	 ecx, DWORD PTR _pBtn$154249[ebp]
  04ecf	8b 11		 mov	 edx, DWORD PTR [ecx]
  04ed1	8b 4d a0	 mov	 ecx, DWORD PTR _pBtn$154249[ebp]
  04ed4	ff 52 0c	 call	 DWORD PTR [edx+12]
$L154255:

; 1419 : 
; 1420 : 			return pBtn;

  04ed7	8b 45 a0	 mov	 eax, DWORD PTR _pBtn$154249[ebp]
  04eda	89 85 8c fa ff
	ff		 mov	 DWORD PTR $T160967[ebp], eax
  04ee0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  04ee4	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04ee7	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  04eec	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  04ef0	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  04ef3	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  04ef8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04eff	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  04f02	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  04f07	8b 85 8c fa ff
	ff		 mov	 eax, DWORD PTR $T160967[ebp]
  04f0d	e9 5e 01 00 00	 jmp	 $L153276
$L154247:

; 1422 : 
; 1423 : 		// handle down button
; 1424 : 		if ( name == "dec" ) {

  04f12	68 00 00 00 00	 push	 OFFSET FLAT:$SG154259
  04f17	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  04f1a	51		 push	 ecx
  04f1b	e8 00 00 00 00	 call	 ??8@YG_NABVCString@@PBD@Z ; operator==
  04f20	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  04f25	85 c0		 test	 eax, eax
  04f27	0f 84 df 00 00
	00		 je	 $L154258

; 1425 : 			CSkinChangeButton* pBtn = new CSkinChangeButton ( obj, this, 1 );

  04f2d	6a 1c		 push	 28			; 0000001cH
  04f2f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  04f34	83 c4 04	 add	 esp, 4
  04f37	89 85 84 fa ff
	ff		 mov	 DWORD PTR $T160969[ebp], eax
  04f3d	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  04f41	83 bd 84 fa ff
	ff 00		 cmp	 DWORD PTR $T160969[ebp], 0
  04f48	74 42		 je	 SHORT $L160971
  04f4a	6a 01		 push	 1
  04f4c	8b 95 70 fa ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  04f52	52		 push	 edx
  04f53	83 ec 08	 sub	 esp, 8
  04f56	8b cc		 mov	 ecx, esp
  04f58	89 a5 80 fa ff
	ff		 mov	 DWORD PTR $T160970[ebp], esp
  04f5e	8d 45 08	 lea	 eax, DWORD PTR _obj$[ebp]
  04f61	50		 push	 eax
  04f62	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  04f67	89 85 80 f9 ff
	ff		 mov	 DWORD PTR -1664+[ebp], eax
  04f6d	8b 8d 84 fa ff
	ff		 mov	 ecx, DWORD PTR $T160969[ebp]
  04f73	e8 00 00 00 00	 call	 ??0CSkinChangeButton@@QAE@VCSkinObj@@PAVCSkinWnd@@H@Z ; CSkinChangeButton::CSkinChangeButton
  04f78	89 85 7c f9 ff
	ff		 mov	 DWORD PTR -1668+[ebp], eax
  04f7e	8b 8d 7c f9 ff
	ff		 mov	 ecx, DWORD PTR -1668+[ebp]
  04f84	89 8d 78 f9 ff
	ff		 mov	 DWORD PTR -1672+[ebp], ecx
  04f8a	eb 0a		 jmp	 SHORT $L160972
$L160971:
  04f8c	c7 85 78 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1672+[ebp], 0
$L160972:
  04f96	8b 95 78 f9 ff
	ff		 mov	 edx, DWORD PTR -1672+[ebp]
  04f9c	89 95 88 fa ff
	ff		 mov	 DWORD PTR $T160968[ebp], edx
  04fa2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  04fa6	8b 85 88 fa ff
	ff		 mov	 eax, DWORD PTR $T160968[ebp]
  04fac	89 45 9c	 mov	 DWORD PTR _pBtn$154260[ebp], eax

; 1426 : 
; 1427 : 			if ( !m_pChar.get_pIsSelf() || g_pCharSelWnd ) {

  04faf	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  04fb4	e8 00 00 00 00	 call	 ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pIsSelf
  04fb9	0f bf c8	 movsx	 ecx, ax
  04fbc	85 c9		 test	 ecx, ecx
  04fbe	74 09		 je	 SHORT $L154267
  04fc0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, 0 ; g_pCharSelWnd
  04fc7	74 0b		 je	 SHORT $L154266
$L154267:

; 1428 : 				pBtn->Disable();

  04fc9	8b 55 9c	 mov	 edx, DWORD PTR _pBtn$154260[ebp]
  04fcc	8b 02		 mov	 eax, DWORD PTR [edx]
  04fce	8b 4d 9c	 mov	 ecx, DWORD PTR _pBtn$154260[ebp]
  04fd1	ff 50 0c	 call	 DWORD PTR [eax+12]
$L154266:

; 1430 : 
; 1431 : 			return pBtn;

  04fd4	8b 4d 9c	 mov	 ecx, DWORD PTR _pBtn$154260[ebp]
  04fd7	89 8d 7c fa ff
	ff		 mov	 DWORD PTR $T160973[ebp], ecx
  04fdd	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  04fe1	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  04fe4	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  04fe9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  04fed	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  04ff0	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  04ff5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04ffc	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  04fff	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  05004	8b 85 7c fa ff
	ff		 mov	 eax, DWORD PTR $T160973[ebp]
  0500a	eb 64		 jmp	 SHORT $L153276
$L154258:

; 1434 : 
; 1435 : 	// default to normal behavior
; 1436 : 	return CSkinWnd::MakeSkinCtrl ( obj );

  0500c	83 ec 08	 sub	 esp, 8
  0500f	8b cc		 mov	 ecx, esp
  05011	89 a5 74 fa ff
	ff		 mov	 DWORD PTR $T160975[ebp], esp
  05017	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  0501a	52		 push	 edx
  0501b	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  05020	89 85 74 f9 ff
	ff		 mov	 DWORD PTR -1676+[ebp], eax
  05026	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0502c	e8 00 00 00 00	 call	 ?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CSkinWnd::MakeSkinCtrl
  05031	89 85 70 f9 ff
	ff		 mov	 DWORD PTR -1680+[ebp], eax
  05037	8b 85 70 f9 ff
	ff		 mov	 eax, DWORD PTR -1680+[ebp]
  0503d	89 85 78 fa ff
	ff		 mov	 DWORD PTR $T160974[ebp], eax
  05043	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  05047	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0504a	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0504f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  05053	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  05056	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0505b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05062	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  05065	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0506a	8b 85 78 fa ff
	ff		 mov	 eax, DWORD PTR $T160974[ebp]
$L153276:

; 1437 : }

  05070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0507a	5e		 pop	 esi
  0507b	8b e5		 mov	 esp, ebp
  0507d	5d		 pop	 ebp
  0507e	c2 08 00	 ret	 8
$L161019:
  05081	00 00 00 00	 DD	 $L153394
  05085	00 00 00 00	 DD	 $L153397
  05089	00 00 00 00	 DD	 $L153397
  0508d	00 00 00 00	 DD	 $L153397
  05091	00 00 00 00	 DD	 $L153397
  05095	00 00 00 00	 DD	 $L153397
  05099	00 00 00 00	 DD	 $L153397
  0509d	00 00 00 00	 DD	 $L153397
  050a1	00 00 00 00	 DD	 $L153397
  050a5	00 00 00 00	 DD	 $L153397
  050a9	00 00 00 00	 DD	 $L153397
  050ad	00 00 00 00	 DD	 $L153397
  050b1	00 00 00 00	 DD	 $L153397
  050b5	00 00 00 00	 DD	 $L153397
  050b9	00 00 00 00	 DD	 $L153397
  050bd	00 00 00 00	 DD	 $L153397
  050c1	00 00 00 00	 DD	 $L153397
  050c5	00 00 00 00	 DD	 $L153397
  050c9	00 00 00 00	 DD	 $L153397
  050cd	00 00 00 00	 DD	 $L153421
  050d1	00 00 00 00	 DD	 $L153424
  050d5	00 00 00 00	 DD	 $L153427
  050d9	00 00 00 00	 DD	 $L153430
  050dd	00 00 00 00	 DD	 $L153433
  050e1	00 00 00 00	 DD	 $L153460
  050e5	00 00 00 00	 DD	 $L153462
  050e9	00 00 00 00	 DD	 $L153464
  050ed	00 00 00 00	 DD	 $L153467
  050f1	00 00 00 00	 DD	 $L153470
  050f5	00 00 00 00	 DD	 $L153472
  050f9	00 00 00 00	 DD	 $L153475
  050fd	00 00 00 00	 DD	 $L153477
  05101	00 00 00 00	 DD	 $L153479
  05105	00 00 00 00	 DD	 $L153481
  05109	00 00 00 00	 DD	 $L153483
  0510d	00 00 00 00	 DD	 $L153485
  05111	00 00 00 00	 DD	 $L153488
  05115	00 00 00 00	 DD	 $L153491
  05119	00 00 00 00	 DD	 $L153496
  0511d	00 00 00 00	 DD	 $L153503
  05121	00 00 00 00	 DD	 $L153508
  05125	00 00 00 00	 DD	 $L153515
  05129	00 00 00 00	 DD	 $L153520
  0512d	00 00 00 00	 DD	 $L153527
  05131	00 00 00 00	 DD	 $L153532
  05135	00 00 00 00	 DD	 $L153539
  05139	00 00 00 00	 DD	 $L153544
  0513d	00 00 00 00	 DD	 $L153551
  05141	00 00 00 00	 DD	 $L153556
  05145	00 00 00 00	 DD	 $L153563
  05149	00 00 00 00	 DD	 $L153568
  0514d	00 00 00 00	 DD	 $L153575
  05151	00 00 00 00	 DD	 $L153580
  05155	00 00 00 00	 DD	 $L153587
  05159	00 00 00 00	 DD	 $L153592
  0515d	00 00 00 00	 DD	 $L153599
  05161	00 00 00 00	 DD	 $L153604
  05165	00 00 00 00	 DD	 $L153611
  05169	00 00 00 00	 DD	 $L153616
  0516d	00 00 00 00	 DD	 $L153623
  05171	00 00 00 00	 DD	 $L153628
  05175	00 00 00 00	 DD	 $L153635
  05179	00 00 00 00	 DD	 $L153640
  0517d	00 00 00 00	 DD	 $L153647
  05181	00 00 00 00	 DD	 $L153652
  05185	00 00 00 00	 DD	 $L153659
  05189	00 00 00 00	 DD	 $L153664
  0518d	00 00 00 00	 DD	 $L153671
  05191	00 00 00 00	 DD	 $L153676
  05195	00 00 00 00	 DD	 $L153683
  05199	00 00 00 00	 DD	 $L153688
  0519d	00 00 00 00	 DD	 $L153695
  051a1	00 00 00 00	 DD	 $L153700
  051a5	00 00 00 00	 DD	 $L153707
  051a9	00 00 00 00	 DD	 $L153712
  051ad	00 00 00 00	 DD	 $L153719
  051b1	00 00 00 00	 DD	 $L153724
  051b5	00 00 00 00	 DD	 $L153731
  051b9	00 00 00 00	 DD	 $L153736
  051bd	00 00 00 00	 DD	 $L153743
  051c1	00 00 00 00	 DD	 $L153748
  051c5	00 00 00 00	 DD	 $L153755
  051c9	00 00 00 00	 DD	 $L153760
  051cd	00 00 00 00	 DD	 $L153767
  051d1	00 00 00 00	 DD	 $L153772
  051d5	00 00 00 00	 DD	 $L153779
  051d9	00 00 00 00	 DD	 $L153784
  051dd	00 00 00 00	 DD	 $L153791
  051e1	00 00 00 00	 DD	 $L153796
  051e5	00 00 00 00	 DD	 $L153803
  051e9	00 00 00 00	 DD	 $L153815
  051ed	00 00 00 00	 DD	 $L153821
  051f1	00 00 00 00	 DD	 $L153827
  051f5	00 00 00 00	 DD	 $L153839
  051f9	00 00 00 00	 DD	 $L153845
  051fd	00 00 00 00	 DD	 $L153851
  05201	00 00 00 00	 DD	 $L153863
  05205	00 00 00 00	 DD	 $L153869
  05209	00 00 00 00	 DD	 $L153875
  0520d	00 00 00 00	 DD	 $L153887
  05211	00 00 00 00	 DD	 $L153893
  05215	00 00 00 00	 DD	 $L153899
  05219	00 00 00 00	 DD	 $L153911
  0521d	00 00 00 00	 DD	 $L153917
  05221	00 00 00 00	 DD	 $L153923
  05225	00 00 00 00	 DD	 $L153935
  05229	00 00 00 00	 DD	 $L153941
  0522d	00 00 00 00	 DD	 $L153947
  05231	00 00 00 00	 DD	 $L153959
  05235	00 00 00 00	 DD	 $L153965
  05239	00 00 00 00	 DD	 $L153971
  0523d	00 00 00 00	 DD	 $L153979
  05241	00 00 00 00	 DD	 $L153981
  05245	00 00 00 00	 DD	 $L153983
  05249	00 00 00 00	 DD	 $L153986
  0524d	00 00 00 00	 DD	 $L153991
  05251	00 00 00 00	 DD	 $L153994
  05255	00 00 00 00	 DD	 $L154000
  05259	00 00 00 00	 DD	 $L154003
  0525d	00 00 00 00	 DD	 $L154006
  05261	00 00 00 00	 DD	 $L154011
  05265	00 00 00 00	 DD	 $L154018
  05269	00 00 00 00	 DD	 $L154020
  0526d	00 00 00 00	 DD	 $L154026
  05271	00 00 00 00	 DD	 $L154029
  05275	00 00 00 00	 DD	 $L154034
  05279	00 00 00 00	 DD	 $L154037
  0527d	00 00 00 00	 DD	 $L154042
$L161021:
  05281	00 00 00 00	 DD	 $L154054
  05285	00 00 00 00	 DD	 $L154057
  05289	00 00 00 00	 DD	 $L154069
  0528d	00 00 00 00	 DD	 $L154075
  05291	00 00 00 00	 DD	 $L154081
  05295	00 00 00 00	 DD	 $L154093
  05299	00 00 00 00	 DD	 $L154099
  0529d	00 00 00 00	 DD	 $L154105
  052a1	00 00 00 00	 DD	 $L154117
  052a5	00 00 00 00	 DD	 $L154123
  052a9	00 00 00 00	 DD	 $L154129
  052ad	00 00 00 00	 DD	 $L154141
  052b1	00 00 00 00	 DD	 $L154147
  052b5	00 00 00 00	 DD	 $L154153
  052b9	00 00 00 00	 DD	 $L154165
  052bd	00 00 00 00	 DD	 $L154171
  052c1	00 00 00 00	 DD	 $L154177
  052c5	00 00 00 00	 DD	 $L154189
  052c9	00 00 00 00	 DD	 $L154195
  052cd	00 00 00 00	 DD	 $L154201
  052d1	00 00 00 00	 DD	 $L154213
  052d5	00 00 00 00	 DD	 $L154219
  052d9	00 00 00 00	 DD	 $L154225
  052dd	00 00 00 00	 DD	 $L154233
  052e1	00 00 00 00	 DD	 $L154235
  052e5	00 00 00 00	 DD	 $L154051
$L161020:
  052e9	00		 DB	 0
  052ea	19		 DB	 25			; 00000019H
  052eb	19		 DB	 25			; 00000019H
  052ec	19		 DB	 25			; 00000019H
  052ed	19		 DB	 25			; 00000019H
  052ee	19		 DB	 25			; 00000019H
  052ef	19		 DB	 25			; 00000019H
  052f0	19		 DB	 25			; 00000019H
  052f1	19		 DB	 25			; 00000019H
  052f2	19		 DB	 25			; 00000019H
  052f3	19		 DB	 25			; 00000019H
  052f4	19		 DB	 25			; 00000019H
  052f5	19		 DB	 25			; 00000019H
  052f6	19		 DB	 25			; 00000019H
  052f7	19		 DB	 25			; 00000019H
  052f8	19		 DB	 25			; 00000019H
  052f9	19		 DB	 25			; 00000019H
  052fa	19		 DB	 25			; 00000019H
  052fb	19		 DB	 25			; 00000019H
  052fc	19		 DB	 25			; 00000019H
  052fd	19		 DB	 25			; 00000019H
  052fe	19		 DB	 25			; 00000019H
  052ff	19		 DB	 25			; 00000019H
  05300	19		 DB	 25			; 00000019H
  05301	19		 DB	 25			; 00000019H
  05302	19		 DB	 25			; 00000019H
  05303	19		 DB	 25			; 00000019H
  05304	19		 DB	 25			; 00000019H
  05305	19		 DB	 25			; 00000019H
  05306	19		 DB	 25			; 00000019H
  05307	19		 DB	 25			; 00000019H
  05308	19		 DB	 25			; 00000019H
  05309	19		 DB	 25			; 00000019H
  0530a	19		 DB	 25			; 00000019H
  0530b	19		 DB	 25			; 00000019H
  0530c	19		 DB	 25			; 00000019H
  0530d	19		 DB	 25			; 00000019H
  0530e	19		 DB	 25			; 00000019H
  0530f	19		 DB	 25			; 00000019H
  05310	19		 DB	 25			; 00000019H
  05311	19		 DB	 25			; 00000019H
  05312	19		 DB	 25			; 00000019H
  05313	19		 DB	 25			; 00000019H
  05314	19		 DB	 25			; 00000019H
  05315	19		 DB	 25			; 00000019H
  05316	19		 DB	 25			; 00000019H
  05317	19		 DB	 25			; 00000019H
  05318	19		 DB	 25			; 00000019H
  05319	19		 DB	 25			; 00000019H
  0531a	19		 DB	 25			; 00000019H
  0531b	19		 DB	 25			; 00000019H
  0531c	19		 DB	 25			; 00000019H
  0531d	19		 DB	 25			; 00000019H
  0531e	19		 DB	 25			; 00000019H
  0531f	19		 DB	 25			; 00000019H
  05320	19		 DB	 25			; 00000019H
  05321	19		 DB	 25			; 00000019H
  05322	19		 DB	 25			; 00000019H
  05323	19		 DB	 25			; 00000019H
  05324	19		 DB	 25			; 00000019H
  05325	19		 DB	 25			; 00000019H
  05326	19		 DB	 25			; 00000019H
  05327	19		 DB	 25			; 00000019H
  05328	19		 DB	 25			; 00000019H
  05329	19		 DB	 25			; 00000019H
  0532a	19		 DB	 25			; 00000019H
  0532b	19		 DB	 25			; 00000019H
  0532c	19		 DB	 25			; 00000019H
  0532d	19		 DB	 25			; 00000019H
  0532e	19		 DB	 25			; 00000019H
  0532f	19		 DB	 25			; 00000019H
  05330	19		 DB	 25			; 00000019H
  05331	19		 DB	 25			; 00000019H
  05332	19		 DB	 25			; 00000019H
  05333	19		 DB	 25			; 00000019H
  05334	19		 DB	 25			; 00000019H
  05335	19		 DB	 25			; 00000019H
  05336	19		 DB	 25			; 00000019H
  05337	19		 DB	 25			; 00000019H
  05338	19		 DB	 25			; 00000019H
  05339	19		 DB	 25			; 00000019H
  0533a	19		 DB	 25			; 00000019H
  0533b	19		 DB	 25			; 00000019H
  0533c	19		 DB	 25			; 00000019H
  0533d	19		 DB	 25			; 00000019H
  0533e	19		 DB	 25			; 00000019H
  0533f	19		 DB	 25			; 00000019H
  05340	19		 DB	 25			; 00000019H
  05341	19		 DB	 25			; 00000019H
  05342	01		 DB	 1
  05343	02		 DB	 2
  05344	03		 DB	 3
  05345	04		 DB	 4
  05346	05		 DB	 5
  05347	06		 DB	 6
  05348	07		 DB	 7
  05349	08		 DB	 8
  0534a	09		 DB	 9
  0534b	0a		 DB	 10			; 0000000aH
  0534c	0b		 DB	 11			; 0000000bH
  0534d	0c		 DB	 12			; 0000000cH
  0534e	0d		 DB	 13			; 0000000dH
  0534f	0e		 DB	 14			; 0000000eH
  05350	0f		 DB	 15			; 0000000fH
  05351	10		 DB	 16			; 00000010H
  05352	11		 DB	 17			; 00000011H
  05353	12		 DB	 18			; 00000012H
  05354	13		 DB	 19			; 00000013H
  05355	14		 DB	 20			; 00000014H
  05356	15		 DB	 21			; 00000015H
  05357	16		 DB	 22			; 00000016H
  05358	17		 DB	 23			; 00000017H
  05359	18		 DB	 24			; 00000018H
_TEXT	ENDS
text$x	SEGMENT
$L160976:
  000f4	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  000f7	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  000fc	c3		 ret	 0
$L160977:
  000fd	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  00100	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00105	c3		 ret	 0
$L160978:
  00106	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  00109	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0010e	c3		 ret	 0
$L160979:
  0010f	8b 45 94	 mov	 eax, DWORD PTR $T160628[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00118	c3		 ret	 0
$L160981:
  00119	8b 45 88	 mov	 eax, DWORD PTR $T160633[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00122	c3		 ret	 0
$L160983:
  00123	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T160644[ebp]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012f	59		 pop	 ecx
  00130	c3		 ret	 0
$L160985:
  00131	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T160649[ebp]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0013d	c3		 ret	 0
$L160987:
  0013e	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR $T160659[ebp]
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0014a	59		 pop	 ecx
  0014b	c3		 ret	 0
$L160989:
  0014c	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR $T160669[ebp]
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00158	59		 pop	 ecx
  00159	c3		 ret	 0
$L160991:
  0015a	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR $T160679[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00166	59		 pop	 ecx
  00167	c3		 ret	 0
$L160993:
  00168	8d 4d dc	 lea	 ecx, DWORD PTR _sLevel$153359[ebp]
  0016b	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00170	c3		 ret	 0
$L160994:
  00171	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T160684[ebp]
  00177	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0017c	c3		 ret	 0
$L160995:
  0017d	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T160685[ebp]
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00189	c3		 ret	 0
$L160996:
  0018a	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR $T160688[ebp]
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00196	59		 pop	 ecx
  00197	c3		 ret	 0
$L160998:
  00198	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR $T160693[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001a4	59		 pop	 ecx
  001a5	c3		 ret	 0
$L161000:
  001a6	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T160697[ebp]
  001ac	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  001b1	c3		 ret	 0
$L161001:
  001b2	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T160698[ebp]
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001be	c3		 ret	 0
$L161002:
  001bf	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T160702[ebp]
  001c5	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  001ca	c3		 ret	 0
$L161003:
  001cb	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T160703[ebp]
  001d1	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  001d6	c3		 ret	 0
$L161004:
  001d7	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T160704[ebp]
  001dd	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  001e2	c3		 ret	 0
$L161005:
  001e3	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T160705[ebp]
  001e9	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  001ee	c3		 ret	 0
$L161006:
  001ef	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR $T160880[ebp]
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  001fb	c3		 ret	 0
$L161007:
  001fc	8b 85 a0 fa ff
	ff		 mov	 eax, DWORD PTR $T160958[ebp]
  00202	50		 push	 eax
  00203	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00208	59		 pop	 ecx
  00209	c3		 ret	 0
$L161009:
  0020a	8b 85 94 fa ff
	ff		 mov	 eax, DWORD PTR $T160963[ebp]
  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00216	59		 pop	 ecx
  00217	c3		 ret	 0
$L161011:
  00218	8b 85 84 fa ff
	ff		 mov	 eax, DWORD PTR $T160969[ebp]
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00224	59		 pop	 ecx
  00225	c3		 ret	 0
$L161018:
  00226	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161015
  0022b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeSkinCtrl@CLookAt@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ENDP ; CLookAt::MakeSkinCtrl
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT

; 21   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 27   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8
??2CObject@@SGPAXI@Z PROC NEAR				; CObject::operator new, COMDAT

; 33   : 	{ return ::operator new(nSize); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nSize$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??2CObject@@SGPAXI@Z ENDP				; CObject::operator new
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT

; 37   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT

; 39   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
PUBLIC	?GetData@CString@@IBEPAUCStringData@@XZ		; CString::GetData
;	COMDAT ?IsEmpty@CString@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsEmpty@CString@@QBEHXZ PROC NEAR			; CString::IsEmpty, COMDAT

; 149  : 	{ return GetData()->nDataLength == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetData@CString@@IBEPAUCStringData@@XZ ; CString::GetData
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00015	0f 94 c1	 sete	 cl
  00018	8b c1		 mov	 eax, ecx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?IsEmpty@CString@@QBEHXZ ENDP				; CString::IsEmpty
_TEXT	ENDS
;	COMDAT ?GetData@CString@@IBEPAUCStringData@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetData@CString@@IBEPAUCStringData@@XZ PROC NEAR	; CString::GetData, COMDAT

; 122  : 	{ ASSERT(m_pchData != NULL); return ((CStringData*)m_pchData)-1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetData@CString@@IBEPAUCStringData@@XZ ENDP		; CString::GetData
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4
??BCString@@QBEPBDXZ PROC NEAR				; CString::operator char const *, COMDAT

; 151  : 	{ return m_pchData; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??BCString@@QBEPBDXZ ENDP				; CString::operator char const *
_TEXT	ENDS
PUBLIC	?Compare@CString@@QBEHPBD@Z			; CString::Compare
;	COMDAT ??8@YG_NABVCString@@PBD@Z
_TEXT	SEGMENT
_s1$ = 8
_s2$ = 12
??8@YG_NABVCString@@PBD@Z PROC NEAR			; operator==, COMDAT

; 183  : 	{ return s1.Compare(s2) == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _s2$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _s1$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Compare@CString@@QBEHPBD@Z ; CString::Compare
  0000f	f7 d8		 neg	 eax
  00011	1b c0		 sbb	 eax, eax
  00013	40		 inc	 eax
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??8@YG_NABVCString@@PBD@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	__tcscmp
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT
_lpsz$ = 8
_this$ = -4
?Compare@CString@@QBEHPBD@Z PROC NEAR			; CString::Compare, COMDAT

; 157  : 	{ ASSERT(AfxIsValidString(lpsz)); return _tcscmp(m_pchData, lpsz); }    // MBCS/Unicode aware

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpsz$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 __tcscmp
  00016	83 c4 08	 add	 esp, 8
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?Compare@CString@@QBEHPBD@Z ENDP			; CString::Compare
_TEXT	ENDS
EXTRN	__imp___mbscmp:NEAR
;	COMDAT __tcscmp
_TEXT	SEGMENT
__s1$ = 8
__s2$ = 12
__tcscmp PROC NEAR					; COMDAT

; 797  : __inline int _tcscmp(_CPC _s1,_CPC _s2) {return _mbscmp((_CPUC)_s1,(_CPUC)_s2);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __s2$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbscmp
  00011	83 c4 08	 add	 esp, 8
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
__tcscmp ENDP
_TEXT	ENDS
;	COMDAT ??8@YG_NPBDABVCString@@@Z
_TEXT	SEGMENT
_s1$ = 8
_s2$ = 12
??8@YG_NPBDABVCString@@@Z PROC NEAR			; operator==, COMDAT

; 185  : 	{ return s2.Compare(s1) == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _s2$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Compare@CString@@QBEHPBD@Z ; CString::Compare
  0000f	f7 d8		 neg	 eax
  00011	1b c0		 sbb	 eax, eax
  00013	40		 inc	 eax
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??8@YG_NPBDABVCString@@@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
;	COMDAT ??0StringID@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0StringID@@QAE@ABV0@@Z PROC NEAR			; StringID::StringID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0StringID@@QAE@ABV0@@Z ENDP				; StringID::StringID
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@ABV0@@Z			; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_LongInt@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_LongInt@@QAE@ABV0@@Z PROC NEAR			; CSCI_LongInt::CSCI_LongInt, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABV0@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_LongInt@@QAE@ABV0@@Z ENDP			; CSCI_LongInt::CSCI_LongInt
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@ABV0@@Z			; ObjectID::ObjectID
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Object@@QAE@ABV0@@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@ABV0@@Z ENDP			; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	?set_pUpdateBio@CSCI_CharInfo@@QAEXF@Z		; CSCI_CharInfo::set_pUpdateBio
PUBLIC	?set_pUpdateTitle@CSCI_CharInfo@@QAEXF@Z	; CSCI_CharInfo::set_pUpdateTitle
EXTRN	??4StringID@@QAEAAV0@PBD@Z:NEAR			; StringID::operator=
EXTRN	?GetText@CSkinEdit@@QAEXAAVCString@@@Z:NEAR	; CSkinEdit::GetText
xdata$x	SEGMENT
$T161043 DD	019930520H
	DD	01H
	DD	FLAT:$T161045
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161045 DD	0ffffffffH
	DD	FLAT:$L161041
xdata$x	ENDS
_TEXT	SEGMENT
$T161039 = -28
$T161040 = -32
__$EHRec$ = -12
_this$ = -36
_str$ = -16
_hTitle$154286 = -20
_hBio$154290 = -24
?SaveName@CLookAt@@QAEXXZ PROC NEAR			; CLookAt::SaveName

; 1439 : void CLookAt::SaveName() {

  0535a	55		 push	 ebp
  0535b	8b ec		 mov	 ebp, esp
  0535d	6a ff		 push	 -1
  0535f	68 00 00 00 00	 push	 $L161044
  05364	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0536a	50		 push	 eax
  0536b	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05372	83 ec 18	 sub	 esp, 24			; 00000018H
  05375	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 1440 : 	CString str;

  05378	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  0537b	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  05380	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1441 : 
; 1442 : 	if ( m_pChar.get_pIsSelf() ) {

  05387	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0538c	e8 00 00 00 00	 call	 ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pIsSelf
  05391	0f bf c0	 movsx	 eax, ax
  05394	85 c0		 test	 eax, eax
  05396	0f 84 ce 00 00
	00		 je	 $L154292

; 1443 : 		if ( m_pTitle ) {

  0539c	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0539f	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  053a6	74 5b		 je	 SHORT $L154288

; 1444 : 			m_pTitle->GetText( str );

  053a8	8d 55 f0	 lea	 edx, DWORD PTR _str$[ebp]
  053ab	52		 push	 edx
  053ac	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  053af	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  053b5	e8 00 00 00 00	 call	 ?GetText@CSkinEdit@@QAEXAAVCString@@@Z ; CSkinEdit::GetText

; 1445 : 
; 1446 : 			StringID hTitle = m_pChar.get_pTitle();

  053ba	8d 4d e4	 lea	 ecx, DWORD PTR $T161039[ebp]
  053bd	51		 push	 ecx
  053be	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  053c3	e8 00 00 00 00	 call	 ?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pTitle
  053c8	50		 push	 eax
  053c9	8d 4d ec	 lea	 ecx, DWORD PTR _hTitle$154286[ebp]
  053cc	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID

; 1447 : 
; 1448 : 			if ( str.Compare( *hTitle ) ) {

  053d1	8d 4d ec	 lea	 ecx, DWORD PTR _hTitle$154286[ebp]
  053d4	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  053d9	50		 push	 eax
  053da	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  053dd	e8 00 00 00 00	 call	 ?Compare@CString@@QBEHPBD@Z ; CString::Compare
  053e2	85 c0		 test	 eax, eax
  053e4	74 1d		 je	 SHORT $L154288

; 1449 : 				hTitle = str;

  053e6	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  053e9	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  053ee	50		 push	 eax
  053ef	8d 4d ec	 lea	 ecx, DWORD PTR _hTitle$154286[ebp]
  053f2	e8 00 00 00 00	 call	 ??4StringID@@QAEAAV0@PBD@Z ; StringID::operator=

; 1450 : 				m_pChar.set_pUpdateTitle( 1 );

  053f7	6a 01		 push	 1
  053f9	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  053fe	e8 00 00 00 00	 call	 ?set_pUpdateTitle@CSCI_CharInfo@@QAEXF@Z ; CSCI_CharInfo::set_pUpdateTitle
$L154288:

; 1453 : 
; 1454 : 		if ( m_pBio ) {

  05403	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  05406	83 ba a8 00 00
	00 00		 cmp	 DWORD PTR [edx+168], 0
  0540d	74 5b		 je	 SHORT $L154292

; 1455 : 			m_pBio->GetText( str );

  0540f	8d 45 f0	 lea	 eax, DWORD PTR _str$[ebp]
  05412	50		 push	 eax
  05413	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  05416	8b 89 a8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+168]
  0541c	e8 00 00 00 00	 call	 ?GetText@CSkinEdit@@QAEXAAVCString@@@Z ; CSkinEdit::GetText

; 1456 : 
; 1457 : 			StringID hBio = m_pChar.get_pBiography();

  05421	8d 55 e0	 lea	 edx, DWORD PTR $T161040[ebp]
  05424	52		 push	 edx
  05425	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0542a	e8 00 00 00 00	 call	 ?get_pBiography@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pBiography
  0542f	50		 push	 eax
  05430	8d 4d e8	 lea	 ecx, DWORD PTR _hBio$154290[ebp]
  05433	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID

; 1458 : 
; 1459 : 			if ( str.Compare( *hBio ) ) {

  05438	8d 4d e8	 lea	 ecx, DWORD PTR _hBio$154290[ebp]
  0543b	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05440	50		 push	 eax
  05441	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  05444	e8 00 00 00 00	 call	 ?Compare@CString@@QBEHPBD@Z ; CString::Compare
  05449	85 c0		 test	 eax, eax
  0544b	74 1d		 je	 SHORT $L154292

; 1460 : 				hBio = str;

  0544d	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  05450	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  05455	50		 push	 eax
  05456	8d 4d e8	 lea	 ecx, DWORD PTR _hBio$154290[ebp]
  05459	e8 00 00 00 00	 call	 ??4StringID@@QAEAAV0@PBD@Z ; StringID::operator=

; 1461 : 				m_pChar.set_pUpdateBio( 1 );

  0545e	6a 01		 push	 1
  05460	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  05465	e8 00 00 00 00	 call	 ?set_pUpdateBio@CSCI_CharInfo@@QAEXF@Z ; CSCI_CharInfo::set_pUpdateBio
$L154292:

; 1465 : }

  0546a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05471	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  05474	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  05479	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0547c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05483	8b e5		 mov	 esp, ebp
  05485	5d		 pop	 ebp
  05486	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L161041:
  00230	8d 4d f0	 lea	 ecx, DWORD PTR _str$[ebp]
  00233	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00238	c3		 ret	 0
$L161044:
  00239	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161043
  0023e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SaveName@CLookAt@@QAEXXZ ENDP				; CLookAt::SaveName
_TEXT	SEGMENT
_this$ = -4
?Hide@CLookAt@@UAEXXZ PROC NEAR				; CLookAt::Hide

; 1468 : void CLookAt::Hide() {

  05487	55		 push	 ebp
  05488	8b ec		 mov	 ebp, esp
  0548a	51		 push	 ecx
  0548b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1469 : 	SaveName();

  0548e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05491	e8 00 00 00 00	 call	 ?SaveName@CLookAt@@QAEXXZ ; CLookAt::SaveName

; 1470 : 
; 1471 : 	ShowWindow( SW_HIDE );

  05496	6a 00		 push	 0
  05498	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0549b	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 1472 : }

  054a0	8b e5		 mov	 esp, ebp
  054a2	5d		 pop	 ebp
  054a3	c3		 ret	 0
?Hide@CLookAt@@UAEXXZ ENDP				; CLookAt::Hide
$T161048 = -4
$T161049 = -8
_this$ = -12
?Show@CLookAt@@UAEXXZ PROC NEAR				; CLookAt::Show

; 1475 : void CLookAt::Show() {

  054a4	55		 push	 ebp
  054a5	8b ec		 mov	 ebp, esp
  054a7	83 ec 0c	 sub	 esp, 12			; 0000000cH
  054aa	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1476 : 	if ( m_pTitle )

  054ad	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  054b0	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  054b7	74 2d		 je	 SHORT $L154299

; 1477 : 		m_pTitle->SetText( *((StringID) m_pChar.get_pTitle()) );

  054b9	8d 4d f8	 lea	 ecx, DWORD PTR $T161049[ebp]
  054bc	51		 push	 ecx
  054bd	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  054c2	e8 00 00 00 00	 call	 ?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ ; CSCI_CharInfo::get_pTitle
  054c7	50		 push	 eax
  054c8	8d 4d fc	 lea	 ecx, DWORD PTR $T161048[ebp]
  054cb	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  054d0	8b c8		 mov	 ecx, eax
  054d2	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  054d7	50		 push	 eax
  054d8	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  054db	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  054e1	e8 00 00 00 00	 call	 ?SetText@CSkinEdit@@QAEHPBD@Z ; CSkinEdit::SetText
$L154299:

; 1478 : 
; 1479 : 	ShowWindow( SW_SHOW );

  054e6	6a 05		 push	 5
  054e8	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  054eb	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 1480 : }

  054f0	8b e5		 mov	 esp, ebp
  054f2	5d		 pop	 ebp
  054f3	c3		 ret	 0
?Show@CLookAt@@UAEXXZ ENDP				; CLookAt::Show
_TEXT	ENDS
PUBLIC	?TogglePVP@CLookAt@@QAE_NXZ			; CLookAt::TogglePVP
PUBLIC	?set_pPvp@CSCI_CharInfo@@QAEXF@Z		; CSCI_CharInfo::set_pPvp
EXTRN	?MsgSendChat@@YAXPADZZ:NEAR			; MsgSendChat
_DATA	SEGMENT
$SG154307 DB	'/nocombat', 00H
	ORG $+2
$SG154308 DB	'/yescombat', 00H
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4
?TogglePVP@CLookAt@@QAE_NXZ PROC NEAR			; CLookAt::TogglePVP

; 1482 : bool CLookAt::TogglePVP() {

  054f4	55		 push	 ebp
  054f5	8b ec		 mov	 ebp, esp
  054f7	51		 push	 ecx
  054f8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1483 : 	if ( m_pChar.get_pPvp() ) {

  054fb	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  05500	e8 00 00 00 00	 call	 ?get_pPvp@CSCI_CharInfo@@QAEFXZ ; CSCI_CharInfo::get_pPvp
  05505	0f bf c0	 movsx	 eax, ax
  05508	85 c0		 test	 eax, eax
  0550a	74 1d		 je	 SHORT $L154306

; 1484 : 		m_pChar.set_pPvp( 0 );

  0550c	6a 00		 push	 0
  0550e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  05513	e8 00 00 00 00	 call	 ?set_pPvp@CSCI_CharInfo@@QAEXF@Z ; CSCI_CharInfo::set_pPvp

; 1485 : 		MsgSendChat( "/nocombat" );

  05518	68 00 00 00 00	 push	 OFFSET FLAT:$SG154307
  0551d	e8 00 00 00 00	 call	 ?MsgSendChat@@YAXPADZZ	; MsgSendChat
  05522	83 c4 04	 add	 esp, 4

; 1486 : 		return 0;

  05525	32 c0		 xor	 al, al
  05527	eb 1b		 jmp	 SHORT $L154305
$L154306:

; 1488 : 
; 1489 : 	MsgSendChat( "/yescombat" );

  05529	68 00 00 00 00	 push	 OFFSET FLAT:$SG154308
  0552e	e8 00 00 00 00	 call	 ?MsgSendChat@@YAXPADZZ	; MsgSendChat
  05533	83 c4 04	 add	 esp, 4

; 1490 : 	m_pChar.set_pPvp( 1 );

  05536	6a 01		 push	 1
  05538	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_pChar@CLookAt@@1VCSCI_CharInfo@@A ; CLookAt::m_pChar
  0553d	e8 00 00 00 00	 call	 ?set_pPvp@CSCI_CharInfo@@QAEXF@Z ; CSCI_CharInfo::set_pPvp

; 1491 : 	return 1;

  05542	b0 01		 mov	 al, 1
$L154305:

; 1492 : }

  05544	8b e5		 mov	 esp, ebp
  05546	5d		 pop	 ebp
  05547	c3		 ret	 0
?TogglePVP@CLookAt@@QAE_NXZ ENDP			; CLookAt::TogglePVP
_TEXT	ENDS
PUBLIC	??0CLookAtFiller@@QAE@XZ			; CLookAtFiller::CLookAtFiller
PUBLIC	?CloseSelf@CLookAtFiller@@UAEX_N@Z		; CLookAtFiller::CloseSelf
PUBLIC	??_7CLookAtFiller@@6B@				; CLookAtFiller::`vftable'
PUBLIC	??_GCLookAtFiller@@UAEPAXI@Z			; CLookAtFiller::`scalar deleting destructor'
PUBLIC	??_ECLookAtFiller@@UAEPAXI@Z			; CLookAtFiller::`vector deleting destructor'
;	COMDAT ??_7CLookAtFiller@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\LookAt.cpp
CONST	SEGMENT
??_7CLookAtFiller@@6B@ DD FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ ; CLookAtFiller::`vftable'
	DD	FLAT:??_ECLookAtFiller@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CSkinWnd@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetProcessEvents@CSkinWnd@@MAE_NXZ
	DD	FLAT:?CloseSelf@CLookAtFiller@@UAEX_N@Z
	DD	FLAT:?Disable@CSkinWnd@@UAEXXZ
	DD	FLAT:?Enable@CSkinWnd@@UAEXXZ
	DD	FLAT:?EnableGameModal@CSkinWnd@@UAEXHPAH@Z
	DD	FLAT:?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z
	DD	FLAT:?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z
	DD	FLAT:?ProcessRefreshList@CSkinWnd@@UAEHXZ
	DD	FLAT:?UpdateTracking@CSkinWnd@@UAEXXZ
	DD	FLAT:?Next@CSkinWnd@@UAEXXZ
	DD	FLAT:?Previous@CSkinWnd@@UAEXXZ
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4
??0CLookAtFiller@@QAE@XZ PROC NEAR			; CLookAtFiller::CLookAtFiller

; 1495 : {

  05548	55		 push	 ebp
  05549	8b ec		 mov	 ebp, esp
  0554b	51		 push	 ecx
  0554c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0554f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05552	e8 00 00 00 00	 call	 ??0CSkinWnd@@QAE@XZ	; CSkinWnd::CSkinWnd
  05557	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0555a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CLookAtFiller@@6B@ ; CLookAtFiller::`vftable'

; 1496 : 	g_pLookAtFiller = this;

  05560	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05563	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_pLookAtFiller@@3PAVCLookAtFiller@@A, ecx ; g_pLookAtFiller

; 1497 : }

  05569	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0556c	8b e5		 mov	 esp, ebp
  0556e	5d		 pop	 ebp
  0556f	c3		 ret	 0
??0CLookAtFiller@@QAE@XZ ENDP				; CLookAtFiller::CLookAtFiller
_TEXT	ENDS
PUBLIC	??1CLookAtFiller@@UAE@XZ			; CLookAtFiller::~CLookAtFiller
;	COMDAT ??_GCLookAtFiller@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCLookAtFiller@@UAEPAXI@Z PROC NEAR			; CLookAtFiller::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CLookAtFiller@@UAE@XZ ; CLookAtFiller::~CLookAtFiller
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L154315
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L154315:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCLookAtFiller@@UAEPAXI@Z ENDP			; CLookAtFiller::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ:NEAR ; AfxGetModuleState
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT
?AfxGetApp@@YGPAVCWinApp@@XZ PROC NEAR			; AfxGetApp, COMDAT

; 17   : 	{ return afxCurrentWinApp; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState
  00008	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?AfxGetApp@@YGPAVCWinApp@@XZ ENDP			; AfxGetApp
_TEXT	ENDS
;	COMDAT ??1CLookAtFiller@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CLookAtFiller@@UAE@XZ PROC NEAR			; CLookAtFiller::~CLookAtFiller, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CLookAtFiller@@UAE@XZ ENDP				; CLookAtFiller::~CLookAtFiller
_TEXT	ENDS
_TEXT	SEGMENT
_bTransient$ = 8
_this$ = -4
?CloseSelf@CLookAtFiller@@UAEX_N@Z PROC NEAR		; CLookAtFiller::CloseSelf

; 1500 : {

  05570	55		 push	 ebp
  05571	8b ec		 mov	 ebp, esp
  05573	51		 push	 ecx
  05574	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1501 : 	g_pLookAtFiller = NULL;

  05577	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pLookAtFiller@@3PAVCLookAtFiller@@A, 0 ; g_pLookAtFiller

; 1502 : 
; 1503 : 	CSkinWnd::CloseSelf( bTransient );

  05581	8a 45 08	 mov	 al, BYTE PTR _bTransient$[ebp]
  05584	50		 push	 eax
  05585	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  05588	e8 00 00 00 00	 call	 ?CloseSelf@CSkinWnd@@UAEX_N@Z ; CSkinWnd::CloseSelf

; 1504 : }

  0558d	8b e5		 mov	 esp, ebp
  0558f	5d		 pop	 ebp
  05590	c2 04 00	 ret	 4
?CloseSelf@CLookAtFiller@@UAEX_N@Z ENDP			; CLookAtFiller::CloseSelf
_TEXT	ENDS
PUBLIC	?Create@CLookAtFiller@@QAEHPAVCWnd@@@Z		; CLookAtFiller::Create
EXTRN	?MoveToBottom@CSkinWnd@@QAEHXZ:NEAR		; CSkinWnd::MoveToBottom
_DATA	SEGMENT
	ORG $+1
$SG154328 DB	'bkg_lookat.skn', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T161059 = -20
_pParentWnd$ = 8
_this$ = -24
_bCreated$ = -4
?Create@CLookAtFiller@@QAEHPAVCWnd@@@Z PROC NEAR	; CLookAtFiller::Create

; 1508 : {

  05593	55		 push	 ebp
  05594	8b ec		 mov	 ebp, esp
  05596	83 ec 18	 sub	 esp, 24			; 00000018H
  05599	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1509 : 	BOOL bCreated = CreateChild ( "bkg_lookat.skn", NULL, CRect ( 0, 0, 0, 0 ), pParentWnd );

  0559c	6a 01		 push	 1
  0559e	8b 45 08	 mov	 eax, DWORD PTR _pParentWnd$[ebp]
  055a1	50		 push	 eax
  055a2	6a 00		 push	 0
  055a4	6a 00		 push	 0
  055a6	6a 00		 push	 0
  055a8	6a 00		 push	 0
  055aa	8d 4d ec	 lea	 ecx, DWORD PTR $T161059[ebp]
  055ad	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  055b2	50		 push	 eax
  055b3	6a 00		 push	 0
  055b5	68 00 00 00 00	 push	 OFFSET FLAT:$SG154328
  055ba	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  055bd	e8 00 00 00 00	 call	 ?CreateChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@H@Z ; CSkinWnd::CreateChild
  055c2	89 45 fc	 mov	 DWORD PTR _bCreated$[ebp], eax

; 1510 : 
; 1511 : 	if ( bCreated ) {

  055c5	83 7d fc 00	 cmp	 DWORD PTR _bCreated$[ebp], 0
  055c9	74 12		 je	 SHORT $L154329

; 1512 : 		MoveToBottom();

  055cb	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  055ce	e8 00 00 00 00	 call	 ?MoveToBottom@CSkinWnd@@QAEHXZ ; CSkinWnd::MoveToBottom

; 1513 : 		ShowWindow( SW_SHOW );

  055d3	6a 05		 push	 5
  055d5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  055d8	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L154329:

; 1515 : 
; 1516 : 	return bCreated;

  055dd	8b 45 fc	 mov	 eax, DWORD PTR _bCreated$[ebp]

; 1517 : }

  055e0	8b e5		 mov	 esp, ebp
  055e2	5d		 pop	 ebp
  055e3	c2 04 00	 ret	 4
?Create@CLookAtFiller@@QAEHPAVCWnd@@@Z ENDP		; CLookAtFiller::Create
_TEXT	ENDS
PUBLIC	?ChangeValue@CPVPAttribute@@UAEXH@Z		; CPVPAttribute::ChangeValue
PUBLIC	??_7CPVPAttribute@@6B@				; CPVPAttribute::`vftable'
PUBLIC	??_GCPVPAttribute@@UAEPAXI@Z			; CPVPAttribute::`scalar deleting destructor'
PUBLIC	??_ECPVPAttribute@@UAEPAXI@Z			; CPVPAttribute::`vector deleting destructor'
PUBLIC	??1CSkinAttribute@@UAE@XZ			; CSkinAttribute::~CSkinAttribute
EXTRN	??0CSkinAttribute@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z:NEAR ; CSkinAttribute::CSkinAttribute
EXTRN	?Refresh@CSkinAttribute@@UAEXXZ:NEAR		; CSkinAttribute::Refresh
;	COMDAT ??_7CPVPAttribute@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\LookAt.cpp
CONST	SEGMENT
??_7CPVPAttribute@@6B@ DD FLAT:??_ECPVPAttribute@@UAEPAXI@Z ; CPVPAttribute::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinAttribute@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinCtrl@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CSkinCtrl@@UAEXFF@Z
	DD	FLAT:?ChangeValue@CPVPAttribute@@UAEXH@Z
CONST	ENDS
_DATA	SEGMENT
	ORG $+1
$SG154337 DB	'goto - On', 00H
	ORG $+2
$SG154338 DB	'goto - Off', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T161068 DD	019930520H
	DD	02H
	DD	FLAT:$T161070
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161070 DD	0ffffffffH
	DD	FLAT:$L161064
	DD	00H
	DD	FLAT:$L161066
xdata$x	ENDS
_TEXT	SEGMENT
$T161061 = -16
__$EHRec$ = -12
_obj$ = 8
_pParent$ = 16
_bPvp$ = 20
_this$ = -20
??0CPVPAttribute@@QAE@VCSkinObj@@PAVCSkinWnd@@_N@Z PROC NEAR ; CPVPAttribute::CPVPAttribute

; 1522 : CPVPAttribute::CPVPAttribute ( CSkinObj obj, CSkinWnd *pParent, bool bPvp ) : CSkinAttribute ( obj, pParent ) {

  055e6	55		 push	 ebp
  055e7	8b ec		 mov	 ebp, esp
  055e9	6a ff		 push	 -1
  055eb	68 00 00 00 00	 push	 $L161069
  055f0	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  055f6	50		 push	 eax
  055f7	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  055fe	83 ec 14	 sub	 esp, 20			; 00000014H
  05601	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  05604	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0560b	8b 45 10	 mov	 eax, DWORD PTR _pParent$[ebp]
  0560e	50		 push	 eax
  0560f	83 ec 08	 sub	 esp, 8
  05612	8b cc		 mov	 ecx, esp
  05614	89 65 f0	 mov	 DWORD PTR $T161061[ebp], esp
  05617	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  0561a	52		 push	 edx
  0561b	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  05620	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  05623	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  05626	e8 00 00 00 00	 call	 ??0CSkinAttribute@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinAttribute::CSkinAttribute
  0562b	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  0562e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  05632	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  05635	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPVPAttribute@@6B@ ; CPVPAttribute::`vftable'

; 1523 : 	ExecuteScript( bPvp ? "goto - On" : "goto - Off" );

  0563b	8b 4d 14	 mov	 ecx, DWORD PTR _bPvp$[ebp]
  0563e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  05644	85 c9		 test	 ecx, ecx
  05646	74 09		 je	 SHORT $L161062
  05648	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], OFFSET FLAT:$SG154337
  0564f	eb 07		 jmp	 SHORT $L161063
$L161062:
  05651	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], OFFSET FLAT:$SG154338
$L161063:
  05658	8b 55 e0	 mov	 edx, DWORD PTR -32+[ebp]
  0565b	52		 push	 edx
  0565c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0565f	e8 00 00 00 00	 call	 ?ExecuteScript@CSkinObj@@QAEHPBD@Z ; CSkinObj::ExecuteScript

; 1524 : }

  05664	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0566b	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  0566e	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  05673	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  05676	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05679	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05680	8b e5		 mov	 esp, ebp
  05682	5d		 pop	 ebp
  05683	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L161064:
  00243	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00246	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0024b	c3		 ret	 0
$L161066:
  0024c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0024f	e8 00 00 00 00	 call	 ??1CSkinAttribute@@UAE@XZ ; CSkinAttribute::~CSkinAttribute
  00254	c3		 ret	 0
$L161069:
  00255	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161068
  0025a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CPVPAttribute@@QAE@VCSkinObj@@PAVCSkinWnd@@_N@Z ENDP	; CPVPAttribute::CPVPAttribute
PUBLIC	??1CPVPAttribute@@UAE@XZ			; CPVPAttribute::~CPVPAttribute
;	COMDAT ??_GCPVPAttribute@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCPVPAttribute@@UAEPAXI@Z PROC NEAR			; CPVPAttribute::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPVPAttribute@@UAE@XZ ; CPVPAttribute::~CPVPAttribute
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L154342
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L154342:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCPVPAttribute@@UAEPAXI@Z ENDP			; CPVPAttribute::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CSkinAttribute@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSkinAttribute@@UAE@XZ PROC NEAR			; CSkinAttribute::~CSkinAttribute, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinCtrl@@UAE@XZ	; CSkinCtrl::~CSkinCtrl
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CSkinAttribute@@UAE@XZ ENDP				; CSkinAttribute::~CSkinAttribute
_TEXT	ENDS
;	COMDAT ??1CPVPAttribute@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CPVPAttribute@@UAE@XZ PROC NEAR			; CPVPAttribute::~CPVPAttribute, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinAttribute@@UAE@XZ ; CSkinAttribute::~CSkinAttribute
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CPVPAttribute@@UAE@XZ ENDP				; CPVPAttribute::~CPVPAttribute
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+1
$SG154353 DB	'goto - On', 00H
	ORG $+2
$SG154354 DB	'goto - Off', 00H
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -4
?ChangeValue@CPVPAttribute@@UAEXH@Z PROC NEAR		; CPVPAttribute::ChangeValue

; 1526 : void CPVPAttribute::ChangeValue ( int zDelta ) {

  05686	55		 push	 ebp
  05687	8b ec		 mov	 ebp, esp
  05689	83 ec 08	 sub	 esp, 8
  0568c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1527 : 	if ( m_pParentWnd ) {

  0568f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  05692	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  05696	74 30		 je	 SHORT $L154351

; 1528 : 		ExecuteScript ( ((CLookAt*) m_pParentWnd)->TogglePVP() ? "goto - On" : "goto - Off" );

  05698	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0569b	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0569e	e8 00 00 00 00	 call	 ?TogglePVP@CLookAt@@QAE_NXZ ; CLookAt::TogglePVP
  056a3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  056a8	85 c0		 test	 eax, eax
  056aa	74 09		 je	 SHORT $L161077
  056ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], OFFSET FLAT:$SG154353
  056b3	eb 07		 jmp	 SHORT $L161078
$L161077:
  056b5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], OFFSET FLAT:$SG154354
$L161078:
  056bc	8b 55 f8	 mov	 edx, DWORD PTR -8+[ebp]
  056bf	52		 push	 edx
  056c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  056c3	e8 00 00 00 00	 call	 ?ExecuteScript@CSkinObj@@QAEHPBD@Z ; CSkinObj::ExecuteScript
$L154351:

; 1530 : }

  056c8	8b e5		 mov	 esp, ebp
  056ca	5d		 pop	 ebp
  056cb	c2 04 00	 ret	 4
?ChangeValue@CPVPAttribute@@UAEXH@Z ENDP		; CPVPAttribute::ChangeValue
_TEXT	ENDS
PUBLIC	?OnActivate@CLookAtBtn@@UAEXFF@Z		; CLookAtBtn::OnActivate
PUBLIC	??_7CLookAtBtn@@6B@				; CLookAtBtn::`vftable'
PUBLIC	??_GCLookAtBtn@@UAEPAXI@Z			; CLookAtBtn::`scalar deleting destructor'
PUBLIC	??_ECLookAtBtn@@UAEPAXI@Z			; CLookAtBtn::`vector deleting destructor'
EXTRN	??0CSkinBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z:NEAR ; CSkinBtn::CSkinBtn
EXTRN	?OnMouseDown@CSkinBtn@@UAEXHFF@Z:NEAR		; CSkinBtn::OnMouseDown
EXTRN	?OnMouseUp@CSkinBtn@@UAEXHFF@Z:NEAR		; CSkinBtn::OnMouseUp
EXTRN	?Refresh@CSkinBtn@@UAEXXZ:NEAR			; CSkinBtn::Refresh
;	COMDAT ??_7CLookAtBtn@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\LookAt.cpp
CONST	SEGMENT
??_7CLookAtBtn@@6B@ DD FLAT:??_ECLookAtBtn@@UAEPAXI@Z	; CLookAtBtn::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinBtn@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinCtrl@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CLookAtBtn@@UAEXFF@Z
CONST	ENDS
xdata$x	SEGMENT
$T161085 DD	019930520H
	DD	01H
	DD	FLAT:$T161087
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161087 DD	0ffffffffH
	DD	FLAT:$L161081
xdata$x	ENDS
_TEXT	SEGMENT
$T161080 = -16
__$EHRec$ = -12
_obj$ = 8
_pParent$ = 16
_nPage$ = 20
_this$ = -20
??0CLookAtBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@H@Z PROC NEAR ; CLookAtBtn::CLookAtBtn

; 1536 : CLookAtBtn::CLookAtBtn ( CSkinObj obj, CSkinWnd *pParent, int nPage ) : CSkinBtn( obj, pParent ) {

  056ce	55		 push	 ebp
  056cf	8b ec		 mov	 ebp, esp
  056d1	6a ff		 push	 -1
  056d3	68 00 00 00 00	 push	 $L161086
  056d8	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  056de	50		 push	 eax
  056df	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  056e6	83 ec 10	 sub	 esp, 16			; 00000010H
  056e9	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  056ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  056f3	8b 45 10	 mov	 eax, DWORD PTR _pParent$[ebp]
  056f6	50		 push	 eax
  056f7	83 ec 08	 sub	 esp, 8
  056fa	8b cc		 mov	 ecx, esp
  056fc	89 65 f0	 mov	 DWORD PTR $T161080[ebp], esp
  056ff	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  05702	52		 push	 edx
  05703	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  05708	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  0570b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0570e	e8 00 00 00 00	 call	 ??0CSkinBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinBtn::CSkinBtn
  05713	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  05716	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  05719	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CLookAtBtn@@6B@ ; CLookAtBtn::`vftable'

; 1537 : 	m_nPage = nPage;

  0571f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  05722	8b 55 14	 mov	 edx, DWORD PTR _nPage$[ebp]
  05725	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1538 : }

  05728	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0572f	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  05732	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  05737	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0573a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0573d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05744	8b e5		 mov	 esp, ebp
  05746	5d		 pop	 ebp
  05747	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L161081:
  0025f	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00262	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00267	c3		 ret	 0
$L161086:
  00268	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161085
  0026d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CLookAtBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@H@Z ENDP	; CLookAtBtn::CLookAtBtn
PUBLIC	??1CLookAtBtn@@UAE@XZ				; CLookAtBtn::~CLookAtBtn
;	COMDAT ??_GCLookAtBtn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCLookAtBtn@@UAEPAXI@Z PROC NEAR			; CLookAtBtn::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CLookAtBtn@@UAE@XZ	; CLookAtBtn::~CLookAtBtn
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L154365
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L154365:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCLookAtBtn@@UAEPAXI@Z ENDP				; CLookAtBtn::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CSkinBtn@@UAE@XZ				; CSkinBtn::~CSkinBtn
;	COMDAT ??1CLookAtBtn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CLookAtBtn@@UAE@XZ PROC NEAR				; CLookAtBtn::~CLookAtBtn, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinBtn@@UAE@XZ	; CSkinBtn::~CSkinBtn
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CLookAtBtn@@UAE@XZ ENDP				; CLookAtBtn::~CLookAtBtn
_TEXT	ENDS
xdata$x	SEGMENT
$T161098 DD	019930520H
	DD	01H
	DD	FLAT:$T161100
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161100 DD	0ffffffffH
	DD	FLAT:$L161096
xdata$x	ENDS
_TEXT	SEGMENT
$T161092 = -16
$T161093 = -20
__$EHRec$ = -12
_this$ = -24
?OnActivate@CLookAtBtn@@UAEXFF@Z PROC NEAR		; CLookAtBtn::OnActivate

; 1541 : void CLookAtBtn::OnActivate ( short x, short y ) {

  0574a	55		 push	 ebp
  0574b	8b ec		 mov	 ebp, esp
  0574d	6a ff		 push	 -1
  0574f	68 00 00 00 00	 push	 $L161099
  05754	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0575a	50		 push	 eax
  0575b	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05762	83 ec 10	 sub	 esp, 16			; 00000010H
  05765	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1542 : 	if ( g_pLookAtScreen[ m_nPage ] ) {

  05768	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0576b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0576e	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR ?g_pLookAtScreen@@3PAPAVCLookAt@@A[ecx*4], 0
  05776	74 24		 je	 SHORT $L154373

; 1543 : 		g_pLookAtScreen[ m_nPage ]->Show();

  05778	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0577b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0577e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_pLookAtScreen@@3PAPAVCLookAt@@A[eax*4]
  05785	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  05788	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0578b	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?g_pLookAtScreen@@3PAPAVCLookAt@@A[eax*4]
  05792	8b 02		 mov	 eax, DWORD PTR [edx]
  05794	ff 90 f0 00 00
	00		 call	 DWORD PTR [eax+240]

; 1544 : 	} else {

  0579a	eb 5a		 jmp	 SHORT $L154374
$L154373:

; 1545 : 		(new CLookAt( m_nPage ))->Create( LookAtScreenNames[ m_nPage ] );

  0579c	68 b4 00 00 00	 push	 180			; 000000b4H
  057a1	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  057a6	89 45 ec	 mov	 DWORD PTR $T161093[ebp], eax
  057a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  057b0	83 7d ec 00	 cmp	 DWORD PTR $T161093[ebp], 0
  057b4	74 14		 je	 SHORT $L161094
  057b6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  057b9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  057bc	52		 push	 edx
  057bd	8b 4d ec	 mov	 ecx, DWORD PTR $T161093[ebp]
  057c0	e8 00 00 00 00	 call	 ??0CLookAt@@QAE@H@Z	; CLookAt::CLookAt
  057c5	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  057c8	eb 07		 jmp	 SHORT $L161095
$L161094:
  057ca	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L161095:
  057d1	8b 45 e4	 mov	 eax, DWORD PTR -28+[ebp]
  057d4	89 45 f0	 mov	 DWORD PTR $T161092[ebp], eax
  057d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  057de	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  057e1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  057e4	6b d2 32	 imul	 edx, 50			; 00000032H
  057e7	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:?LookAtScreenNames@@3PAY0DC@DA ; LookAtScreenNames
  057ed	52		 push	 edx
  057ee	8b 4d f0	 mov	 ecx, DWORD PTR $T161092[ebp]
  057f1	e8 00 00 00 00	 call	 ?Create@CLookAt@@QAEHPBD@Z ; CLookAt::Create
$L154374:

; 1547 : 
; 1548 : 	((CLookAt*) m_pParentWnd)->Hide();

  057f6	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  057f9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  057fc	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  057ff	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  05802	8b 10		 mov	 edx, DWORD PTR [eax]
  05804	ff 92 ec 00 00
	00		 call	 DWORD PTR [edx+236]

; 1549 : }

  0580a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0580d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05814	8b e5		 mov	 esp, ebp
  05816	5d		 pop	 ebp
  05817	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L161096:
  00272	8b 45 ec	 mov	 eax, DWORD PTR $T161093[ebp]
  00275	50		 push	 eax
  00276	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0027b	c3		 ret	 0
$L161099:
  0027c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161098
  00281	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnActivate@CLookAtBtn@@UAEXFF@Z ENDP			; CLookAtBtn::OnActivate
_TEXT	SEGMENT
_$E351	PROC NEAR
  0581a	55		 push	 ebp
  0581b	8b ec		 mov	 ebp, esp
  0581d	e8 00 00 00 00	 call	 _$E347
  05822	e8 00 00 00 00	 call	 _$E350
  05827	5d		 pop	 ebp
  05828	c3		 ret	 0
_$E351	ENDP
_TEXT	ENDS
PUBLIC	??0?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@ABV?$allocator@PAVCLookAtItem@@@1@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::list<CLookAtItem *,std::allocator<CLookAtItem *> >
_TEXT	SEGMENT
$T161103 = -4
_$E347	PROC NEAR

; 1554 : std::list<CLookAtItem*> CLookAtItem::m_VisibleLookAts;

  05829	55		 push	 ebp
  0582a	8b ec		 mov	 ebp, esp
  0582c	51		 push	 ecx
  0582d	8d 45 fc	 lea	 eax, DWORD PTR $T161103[ebp]
  05830	50		 push	 eax
  05831	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A
  05836	e8 00 00 00 00	 call	 ??0?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@ABV?$allocator@PAVCLookAtItem@@@1@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::list<CLookAtItem *,std::allocator<CLookAtItem *> >
  0583b	8b e5		 mov	 esp, ebp
  0583d	5d		 pop	 ebp
  0583e	c3		 ret	 0
_$E347	ENDP
_TEXT	ENDS
EXTRN	_atexit:NEAR
_TEXT	SEGMENT
_$E350	PROC NEAR
  0583f	55		 push	 ebp
  05840	8b ec		 mov	 ebp, esp
  05842	68 00 00 00 00	 push	 OFFSET FLAT:_$E348
  05847	e8 00 00 00 00	 call	 _atexit
  0584c	83 c4 04	 add	 esp, 4
  0584f	5d		 pop	 ebp
  05850	c3		 ret	 0
_$E350	ENDP
_TEXT	ENDS
PUBLIC	??1?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::~list<CLookAtItem *,std::allocator<CLookAtItem *> >
_BSS	SEGMENT
_$S349	DB	01H DUP (?)
_BSS	ENDS
_TEXT	SEGMENT
_$E348	PROC NEAR
  05851	55		 push	 ebp
  05852	8b ec		 mov	 ebp, esp
  05854	33 c0		 xor	 eax, eax
  05856	a0 00 00 00 00	 mov	 al, BYTE PTR _$S349
  0585b	83 e0 01	 and	 eax, 1
  0585e	85 c0		 test	 eax, eax
  05860	75 19		 jne	 SHORT $L154388
  05862	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _$S349
  05868	80 c9 01	 or	 cl, 1
  0586b	88 0d 00 00 00
	00		 mov	 BYTE PTR _$S349, cl
  05871	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A
  05876	e8 00 00 00 00	 call	 ??1?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::~list<CLookAtItem *,std::allocator<CLookAtItem *> >
$L154388:
  0587b	5d		 pop	 ebp
  0587c	c3		 ret	 0
_$E348	ENDP
_TEXT	ENDS
EXTRN	?messageMap@CSkinWnd@@1UAFX_MSGMAP@@B:QWORD	; CSkinWnd::messageMap
_TEXT	SEGMENT
?_GetBaseMessageMap@CLookAtItem@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CLookAtItem::_GetBaseMessageMap

; 1557 : BEGIN_MESSAGE_MAP ( CLookAtItem, CSkinWnd )

  0587d	55		 push	 ebp
  0587e	8b ec		 mov	 ebp, esp
  05880	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CSkinWnd@@1UAFX_MSGMAP@@B ; CSkinWnd::messageMap
  05885	5d		 pop	 ebp
  05886	c3		 ret	 0
?_GetBaseMessageMap@CLookAtItem@@KGPBUAFX_MSGMAP@@XZ ENDP ; CLookAtItem::_GetBaseMessageMap
_TEXT	ENDS
PUBLIC	?GetMessageMap@CLookAtItem@@MBEPBUAFX_MSGMAP@@XZ ; CLookAtItem::GetMessageMap
_TEXT	SEGMENT
_this$ = -4
?GetMessageMap@CLookAtItem@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR ; CLookAtItem::GetMessageMap

; 1557 : BEGIN_MESSAGE_MAP ( CLookAtItem, CSkinWnd )

  05887	55		 push	 ebp
  05888	8b ec		 mov	 ebp, esp
  0588a	51		 push	 ecx
  0588b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0588e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CLookAtItem@@1UAFX_MSGMAP@@B ; CLookAtItem::messageMap
  05893	8b e5		 mov	 esp, ebp
  05895	5d		 pop	 ebp
  05896	c3		 ret	 0
?GetMessageMap@CLookAtItem@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CLookAtItem::GetMessageMap
_TEXT	ENDS
PUBLIC	??0CSCI_WorldObject@@QAE@XZ			; CSCI_WorldObject::CSCI_WorldObject
PUBLIC	?push_back@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::push_back
PUBLIC	??0CLookAtItem@@QAE@XZ				; CLookAtItem::CLookAtItem
PUBLIC	?MakeSkinCtrl@CLookAtItem@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CLookAtItem::MakeSkinCtrl
PUBLIC	??_7CLookAtItem@@6B@				; CLookAtItem::`vftable'
PUBLIC	??_GCLookAtItem@@UAEPAXI@Z			; CLookAtItem::`scalar deleting destructor'
PUBLIC	??_ECLookAtItem@@UAEPAXI@Z			; CLookAtItem::`vector deleting destructor'
;	COMDAT ??_7CLookAtItem@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\LookAt.cpp
CONST	SEGMENT
??_7CLookAtItem@@6B@ DD FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ ; CLookAtItem::`vftable'
	DD	FLAT:??_ECLookAtItem@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CLookAtItem@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetProcessEvents@CSkinWnd@@MAE_NXZ
	DD	FLAT:?CloseSelf@CSkinWnd@@UAEX_N@Z
	DD	FLAT:?Disable@CSkinWnd@@UAEXXZ
	DD	FLAT:?Enable@CSkinWnd@@UAEXXZ
	DD	FLAT:?EnableGameModal@CSkinWnd@@UAEXHPAH@Z
	DD	FLAT:?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z
	DD	FLAT:?MakeSkinCtrl@CLookAtItem@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z
	DD	FLAT:?ProcessRefreshList@CSkinWnd@@UAEHXZ
	DD	FLAT:?UpdateTracking@CSkinWnd@@UAEXXZ
	DD	FLAT:?Next@CSkinWnd@@UAEXXZ
	DD	FLAT:?Previous@CSkinWnd@@UAEXXZ
CONST	ENDS
xdata$x	SEGMENT
$T161113 DD	019930520H
	DD	02H
	DD	FLAT:$T161115
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161115 DD	0ffffffffH
	DD	FLAT:$L161110
	DD	00H
	DD	FLAT:$L161111
xdata$x	ENDS
_TEXT	SEGMENT
$T161109 = -16
__$EHRec$ = -12
_this$ = -20
??0CLookAtItem@@QAE@XZ PROC NEAR			; CLookAtItem::CLookAtItem

; 1562 : {

  05897	55		 push	 ebp
  05898	8b ec		 mov	 ebp, esp
  0589a	6a ff		 push	 -1
  0589c	68 00 00 00 00	 push	 $L161114
  058a1	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  058a7	50		 push	 eax
  058a8	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  058af	83 ec 08	 sub	 esp, 8
  058b2	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  058b5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  058b8	e8 00 00 00 00	 call	 ??0CSkinWnd@@QAE@XZ	; CSkinWnd::CSkinWnd
  058bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  058c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  058c7	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  058cd	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@XZ ; CSCI_WorldObject::CSCI_WorldObject
  058d2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  058d5	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  058db	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@XZ	; CSkinObj::CSkinObj
  058e0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  058e4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  058e7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CLookAtItem@@6B@ ; CLookAtItem::`vftable'

; 1563 : 	m_pPrompt = NULL;

  058ed	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  058f0	c7 81 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+152], 0

; 1564 : 
; 1565 : 	m_VisibleLookAts.push_back( this );

  058fa	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  058fd	89 55 f0	 mov	 DWORD PTR $T161109[ebp], edx
  05900	8d 45 f0	 lea	 eax, DWORD PTR $T161109[ebp]
  05903	50		 push	 eax
  05904	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A
  05909	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::push_back

; 1566 : }

  0590e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05915	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  05918	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0591b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05922	8b e5		 mov	 esp, ebp
  05924	5d		 pop	 ebp
  05925	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L161110:
  00286	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00289	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  0028e	c3		 ret	 0
$L161111:
  0028f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00292	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00298	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0029d	c3		 ret	 0
$L161114:
  0029e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161113
  002a3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CLookAtItem@@QAE@XZ ENDP				; CLookAtItem::CLookAtItem
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CPoint@@QAE@XZ PROC NEAR				; CPoint::CPoint, COMDAT

; 83   : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CPoint@@QAE@XZ ENDP					; CPoint::CPoint
_TEXT	ENDS
PUBLIC	??1CLookAtItem@@UAE@XZ				; CLookAtItem::~CLookAtItem
;	COMDAT ??_GCLookAtItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCLookAtItem@@UAEPAXI@Z PROC NEAR			; CLookAtItem::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CLookAtItem@@UAE@XZ	; CLookAtItem::~CLookAtItem
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L154415
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L154415:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCLookAtItem@@UAEPAXI@Z ENDP				; CLookAtItem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?remove@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::remove
xdata$x	SEGMENT
$T161123 DD	019930520H
	DD	02H
	DD	FLAT:$T161125
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161125 DD	0ffffffffH
	DD	FLAT:$L161120
	DD	00H
	DD	FLAT:$L161121
xdata$x	ENDS
_TEXT	SEGMENT
$T161119 = -16
__$EHRec$ = -12
_this$ = -20
??1CLookAtItem@@UAE@XZ PROC NEAR			; CLookAtItem::~CLookAtItem

; 1569 : {

  05926	55		 push	 ebp
  05927	8b ec		 mov	 ebp, esp
  05929	6a ff		 push	 -1
  0592b	68 00 00 00 00	 push	 $L161124
  05930	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05936	50		 push	 eax
  05937	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0593e	83 ec 08	 sub	 esp, 8
  05941	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  05944	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  05947	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CLookAtItem@@6B@ ; CLookAtItem::`vftable'
  0594d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1570 : 	m_VisibleLookAts.remove( this );

  05954	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  05957	89 4d f0	 mov	 DWORD PTR $T161119[ebp], ecx
  0595a	8d 55 f0	 lea	 edx, DWORD PTR $T161119[ebp]
  0595d	52		 push	 edx
  0595e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A
  05963	e8 00 00 00 00	 call	 ?remove@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::remove

; 1571 : }

  05968	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0596c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0596f	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  05975	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0597a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05981	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  05984	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  05989	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0598c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05993	8b e5		 mov	 esp, ebp
  05995	5d		 pop	 ebp
  05996	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L161120:
  002a8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002ab	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  002b0	c3		 ret	 0
$L161121:
  002b1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002b4	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  002ba	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  002bf	c3		 ret	 0
$L161124:
  002c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161123
  002c5	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CLookAtItem@@UAE@XZ ENDP				; CLookAtItem::~CLookAtItem
PUBLIC	?RequestResize@CRichEditCtrl@@QAEXXZ		; CRichEditCtrl::RequestResize
PUBLIC	?IsObject@ObjectID@@QBEHXZ			; ObjectID::IsObject
PUBLIC	?Width@CRect@@QBEHXZ				; CRect::Width
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	?TopLeft@CRect@@QAEAAVCPoint@@XZ		; CRect::TopLeft
PUBLIC	?CenterPoint@CRect@@QBE?AVCPoint@@XZ		; CRect::CenterPoint
PUBLIC	?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ	; CSCI_WorldObject::get_pName
PUBLIC	??ZCRect@@QAEXUtagPOINT@@@Z			; CRect::operator-=
PUBLIC	?IsLargerThanOne@Ratio@@QBEHXZ			; Ratio::IsLargerThanOne
PUBLIC	?Create@CLookAtItem@@QAEHVCSCI_WorldObject@@VStringID@@@Z ; CLookAtItem::Create
PUBLIC	??0SOL_Rect@@QAE@XZ				; SOL_Rect::SOL_Rect
PUBLIC	??4SOL_Rect@@QAEAAV0@ABV0@@Z			; SOL_Rect::operator=
PUBLIC	?SetEventMask@CRichEditCtrl@@QAEKK@Z		; CRichEditCtrl::SetEventMask
EXTRN	?g_pMainWindow@@3PAVCMainWindow@@A:DWORD	; g_pMainWindow
EXTRN	??0CString@@QAE@PBD@Z:NEAR			; CString::CString
EXTRN	?g_MouseLocation@@3UtagPOINT@@A:QWORD		; g_MouseLocation
EXTRN	??ORatio@@QBEHABV0@@Z:NEAR			; Ratio::operator>
EXTRN	?Replace@CString@@QAEHDD@Z:NEAR			; CString::Replace
EXTRN	?getBitmap@CSCI_WorldObject@@QAE?AVObjectID@@XZ:NEAR ; CSCI_WorldObject::getBitmap
EXTRN	?CreatePopupChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@HH@Z:NEAR ; CSkinWnd::CreatePopupChild
EXTRN	?CenterOnPoint@CSkinWnd@@QAEXHH_N@Z:NEAR	; CSkinWnd::CenterOnPoint
EXTRN	?ReadLineSpan@CelObj@@QAE?AVSOL_Rect@@H@Z:NEAR	; CelObj::ReadLineSpan
EXTRN	?GetRect@CSkinObj@@QAEHPAUtagRECT@@@Z:NEAR	; CSkinObj::GetRect
_DATA	SEGMENT
	ORG $+1
$SG154426 DB	'Look at me..', 00H
	ORG $+3
$SG154434 DB	'Dlg_LookAt.skn', 00H
	ORG $+1
$SG154439 DB	'graphic', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T161150 DD	019930520H
	DD	04H
	DD	FLAT:$T161152
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161152 DD	0ffffffffH
	DD	FLAT:$L161145
	DD	00H
	DD	FLAT:$L161146
	DD	00H
	DD	FLAT:$L161147
	DD	02H
	DD	FLAT:$L161148
xdata$x	ENDS
_TEXT	SEGMENT
$T161127 = -192
$T161128 = -196
$T161129 = -212
$T161130 = -220
$T161131 = -224
$T161132 = -228
$T161133 = -236
$T161134 = -252
$T161135 = -260
$T161136 = -264
$T161137 = -268
$T161140 = -276
$T161141 = -280
$T161142 = -284
__$EHRec$ = -12
_hObject$ = 8
_hText$ = 12
_this$ = -288
_pName$ = -16
_hName$154428 = -24
_bCreated$ = -20
_text$154437 = -28
_bitmapObject$154443 = -168
_oRect$154445 = -88
_bRect$154446 = -188
_tRect$154448 = -60
_hHeight$154449 = -172
_scaleX$154459 = -68
_scaleY$154460 = -44
_pCenter$154461 = -36
_pObjectBitmap$154465 = -72
?Create@CLookAtItem@@QAEHVCSCI_WorldObject@@VStringID@@@Z PROC NEAR ; CLookAtItem::Create

; 1575 : {

  05997	55		 push	 ebp
  05998	8b ec		 mov	 ebp, esp
  0599a	6a ff		 push	 -1
  0599c	68 00 00 00 00	 push	 $L161151
  059a1	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  059a7	50		 push	 eax
  059a8	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  059af	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  059b5	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1576 : 	// get the name of the target object
; 1577 : 	char *pName = "Look at me..";

  059bb	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pName$[ebp], OFFSET FLAT:$SG154426

; 1578 : 
; 1579 : 	if ( hObject.IsObject() ) {

  059c2	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  059c5	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  059ca	85 c0		 test	 eax, eax
  059cc	74 2f		 je	 SHORT $L154427

; 1580 : 		StringID hName = (StringID) hObject.get_pName();

  059ce	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR $T161128[ebp]
  059d4	50		 push	 eax
  059d5	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  059d8	e8 00 00 00 00	 call	 ?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ ; CSCI_WorldObject::get_pName
  059dd	50		 push	 eax
  059de	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T161127[ebp]
  059e4	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  059e9	50		 push	 eax
  059ea	8d 4d e8	 lea	 ecx, DWORD PTR _hName$154428[ebp]
  059ed	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID

; 1581 : 		pName = *hName;

  059f2	8d 4d e8	 lea	 ecx, DWORD PTR _hName$154428[ebp]
  059f5	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  059fa	89 45 f0	 mov	 DWORD PTR _pName$[ebp], eax
$L154427:

; 1583 : 
; 1584 : 	// set the priority of this window
; 1585 : 	SetPriority ( swPriVerbDialog );

  059fd	6a 05		 push	 5
  059ff	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05a05	e8 00 00 00 00	 call	 ?SetPriority@CSkinWnd@@QAEXH@Z ; CSkinWnd::SetPriority

; 1586 : 
; 1587 : 	// set that the window should go away
; 1588 : 	SetTransient( true );

  05a0a	6a 01		 push	 1
  05a0c	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05a12	e8 00 00 00 00	 call	 ?SetTransient@CSkinWnd@@IAEX_N@Z ; CSkinWnd::SetTransient

; 1589 : 
; 1590 : 	BOOL bCreated = CreatePopupChild ( "Dlg_LookAt.skn", pName, CRect ( 0, 0, 0, 0 ), g_pMainWindow, FALSE );

  05a17	6a 01		 push	 1
  05a19	6a 00		 push	 0
  05a1b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainWindow@@3PAVCMainWindow@@A ; g_pMainWindow
  05a21	51		 push	 ecx
  05a22	6a 00		 push	 0
  05a24	6a 00		 push	 0
  05a26	6a 00		 push	 0
  05a28	6a 00		 push	 0
  05a2a	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T161129[ebp]
  05a30	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  05a35	50		 push	 eax
  05a36	8b 55 f0	 mov	 edx, DWORD PTR _pName$[ebp]
  05a39	52		 push	 edx
  05a3a	68 00 00 00 00	 push	 OFFSET FLAT:$SG154434
  05a3f	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05a45	e8 00 00 00 00	 call	 ?CreatePopupChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@HH@Z ; CSkinWnd::CreatePopupChild
  05a4a	89 45 ec	 mov	 DWORD PTR _bCreated$[ebp], eax

; 1591 : 
; 1592 : 	if ( TRUE == bCreated ) {

  05a4d	83 7d ec 01	 cmp	 DWORD PTR _bCreated$[ebp], 1
  05a51	0f 85 5c 04 00
	00		 jne	 $L154435

; 1593 : 		m_hObject = hObject;

  05a57	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  05a5d	66 8b 4d 08	 mov	 cx, WORD PTR _hObject$[ebp]
  05a61	66 89 88 94 00
	00 00		 mov	 WORD PTR [eax+148], cx

; 1594 : 
; 1595 : 		assert( m_pPrompt != NULL );
; 1596 : 		CString text = *hText;

  05a68	8d 4d 0c	 lea	 ecx, DWORD PTR _hText$[ebp]
  05a6b	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05a70	50		 push	 eax
  05a71	8d 4d e4	 lea	 ecx, DWORD PTR _text$154437[ebp]
  05a74	e8 00 00 00 00	 call	 ??0CString@@QAE@PBD@Z	; CString::CString
  05a79	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1597 : 
; 1598 : 		text.Replace( 0x0d, 0x0a );

  05a80	6a 0a		 push	 10			; 0000000aH
  05a82	6a 0d		 push	 13			; 0000000dH
  05a84	8d 4d e4	 lea	 ecx, DWORD PTR _text$154437[ebp]
  05a87	e8 00 00 00 00	 call	 ?Replace@CString@@QAEHDD@Z ; CString::Replace

; 1599 : 
; 1600 : 		m_pPrompt->SetText( text );

  05a8c	8d 4d e4	 lea	 ecx, DWORD PTR _text$154437[ebp]
  05a8f	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  05a94	50		 push	 eax
  05a95	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  05a9b	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  05aa1	e8 00 00 00 00	 call	 ?SetText@CSkinEdit@@QAEHPBD@Z ; CSkinEdit::SetText

; 1601 : 
; 1602 : 		m_pPrompt->SetEventMask( ENM_REQUESTRESIZE ); 

  05aa6	68 00 00 04 00	 push	 262144			; 00040000H
  05aab	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  05ab1	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  05ab7	e8 00 00 00 00	 call	 ?SetEventMask@CRichEditCtrl@@QAEKK@Z ; CRichEditCtrl::SetEventMask

; 1603 : 		m_pPrompt->RequestResize();

  05abc	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05ac2	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  05ac8	e8 00 00 00 00	 call	 ?RequestResize@CRichEditCtrl@@QAEXXZ ; CRichEditCtrl::RequestResize

; 1604 : 
; 1605 : 		m_BitmapHolder = FindObject( "graphic" );

  05acd	68 00 00 00 00	 push	 OFFSET FLAT:$SG154439
  05ad2	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR $T161130[ebp]
  05ad8	52		 push	 edx
  05ad9	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05adf	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  05ae4	89 85 dc fe ff
	ff		 mov	 DWORD PTR -292+[ebp], eax
  05aea	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR -292+[ebp]
  05af0	89 85 d8 fe ff
	ff		 mov	 DWORD PTR -296+[ebp], eax
  05af6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  05afa	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR -296+[ebp]
  05b00	51		 push	 ecx
  05b01	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05b07	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  05b0d	e8 00 00 00 00	 call	 ??4CSkinObj@@QAEAAV0@ABV0@@Z ; CSkinObj::operator=
  05b12	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  05b16	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T161130[ebp]
  05b1c	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj

; 1606 : 
; 1607 : 		// set the hint for this object...
; 1608 : 		if ( m_BitmapHolder.IsValid() ) {

  05b21	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05b27	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  05b2d	e8 00 00 00 00	 call	 ?IsValid@CSkinObj@@QAEHXZ ; CSkinObj::IsValid
  05b32	85 c0		 test	 eax, eax
  05b34	0f 84 42 03 00
	00		 je	 $L154441

; 1609 : 			m_BitmapHolder.SetHint ( pName );

  05b3a	8b 55 f0	 mov	 edx, DWORD PTR _pName$[ebp]
  05b3d	52		 push	 edx
  05b3e	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05b44	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  05b4a	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint

; 1610 : 
; 1611 : 			if ( m_hObject.IsObject() ) {

  05b4f	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05b55	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  05b5b	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  05b60	85 c0		 test	 eax, eax
  05b62	0f 84 14 03 00
	00		 je	 $L154441

; 1612 : 				// draw the target object's bitmap to the bitmap holder
; 1613 : 				CelObjMem bitmapObject ( m_hObject.getBitmap() );

  05b68	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR $T161132[ebp]
  05b6e	50		 push	 eax
  05b6f	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05b75	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  05b7b	e8 00 00 00 00	 call	 ?getBitmap@CSCI_WorldObject@@QAE?AVObjectID@@XZ ; CSCI_WorldObject::getBitmap
  05b80	51		 push	 ecx
  05b81	8b cc		 mov	 ecx, esp
  05b83	89 a5 20 ff ff
	ff		 mov	 DWORD PTR $T161131[ebp], esp
  05b89	50		 push	 eax
  05b8a	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  05b8f	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapObject$154443[ebp]
  05b95	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  05b9a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1614 : 			
; 1615 : 				// temp rects...											
; 1616 : 				CRect oRect, bRect;

  05b9e	8d 4d a8	 lea	 ecx, DWORD PTR _oRect$154445[ebp]
  05ba1	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect
  05ba6	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _bRect$154446[ebp]
  05bac	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1617 : 			
; 1618 : 				m_BitmapHolder.GetRect( &oRect );		//	Window rect and put in local coords.

  05bb1	8d 4d a8	 lea	 ecx, DWORD PTR _oRect$154445[ebp]
  05bb4	51		 push	 ecx
  05bb5	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05bbb	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  05bc1	e8 00 00 00 00	 call	 ?GetRect@CSkinObj@@QAEHPAUtagRECT@@@Z ; CSkinObj::GetRect

; 1619 : 				oRect -= oRect.TopLeft();

  05bc6	8d 4d a8	 lea	 ecx, DWORD PTR _oRect$154445[ebp]
  05bc9	e8 00 00 00 00	 call	 ?TopLeft@CRect@@QAEAAVCPoint@@XZ ; CRect::TopLeft
  05bce	8b 10		 mov	 edx, DWORD PTR [eax]
  05bd0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  05bd3	89 95 14 ff ff
	ff		 mov	 DWORD PTR $T161133[ebp], edx
  05bd9	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T161133[ebp+4], eax
  05bdf	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR $T161133[ebp+4]
  05be5	51		 push	 ecx
  05be6	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR $T161133[ebp]
  05bec	52		 push	 edx
  05bed	8d 4d a8	 lea	 ecx, DWORD PTR _oRect$154445[ebp]
  05bf0	e8 00 00 00 00	 call	 ??ZCRect@@QAEXUtagPOINT@@@Z ; CRect::operator-=

; 1620 : 			
; 1621 : 				bRect.left = 65000;					//	Make an inverse rect to hold the valid bitmap area.

  05bf5	c7 85 44 ff ff
	ff e8 fd 00 00	 mov	 DWORD PTR _bRect$154446[ebp], 65000 ; 0000fde8H

; 1622 : 				bRect.top = 65000;

  05bff	c7 85 48 ff ff
	ff e8 fd 00 00	 mov	 DWORD PTR _bRect$154446[ebp+4], 65000 ; 0000fde8H

; 1623 : 				bRect.bottom = -1;

  05c09	c7 85 50 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _bRect$154446[ebp+12], -1

; 1624 : 				bRect.right = -1;

  05c13	c7 85 4c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _bRect$154446[ebp+8], -1

; 1625 : 			
; 1626 : 				SOL_Rect tRect;

  05c1d	8d 4d c4	 lea	 ecx, DWORD PTR _tRect$154448[ebp]
  05c20	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 1627 : 			
; 1628 : 				for (int hHeight = 0;hHeight < bitmapObject.height;hHeight++) {

  05c25	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _hHeight$154449[ebp], 0
  05c2f	eb 0f		 jmp	 SHORT $L154450
$L154451:
  05c31	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _hHeight$154449[ebp]
  05c37	83 c0 01	 add	 eax, 1
  05c3a	89 85 54 ff ff
	ff		 mov	 DWORD PTR _hHeight$154449[ebp], eax
$L154450:
  05c40	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _hHeight$154449[ebp]
  05c46	3b 8d 7c ff ff
	ff		 cmp	 ecx, DWORD PTR _bitmapObject$154443[ebp+36]
  05c4c	0f 8d 89 00 00
	00		 jge	 $L154452

; 1629 : 					tRect = bitmapObject.ReadLineSpan( hHeight );

  05c52	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _hHeight$154449[ebp]
  05c58	52		 push	 edx
  05c59	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T161134[ebp]
  05c5f	50		 push	 eax
  05c60	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapObject$154443[ebp]
  05c66	e8 00 00 00 00	 call	 ?ReadLineSpan@CelObj@@QAE?AVSOL_Rect@@H@Z ; CelObj::ReadLineSpan
  05c6b	50		 push	 eax
  05c6c	8d 4d c4	 lea	 ecx, DWORD PTR _tRect$154448[ebp]
  05c6f	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 1630 : 			
; 1631 : 					if ( tRect.A.x != -1 ) {

  05c74	83 7d c4 ff	 cmp	 DWORD PTR _tRect$154448[ebp], -1
  05c78	74 5c		 je	 SHORT $L154458

; 1632 : 						if ( hHeight < bRect.top ) 

  05c7a	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _hHeight$154449[ebp]
  05c80	3b 8d 48 ff ff
	ff		 cmp	 ecx, DWORD PTR _bRect$154446[ebp+4]
  05c86	7d 0c		 jge	 SHORT $L154455

; 1633 : 							bRect.top = hHeight;

  05c88	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _hHeight$154449[ebp]
  05c8e	89 95 48 ff ff
	ff		 mov	 DWORD PTR _bRect$154446[ebp+4], edx
$L154455:

; 1634 : 			
; 1635 : 						if ( hHeight > bRect.bottom ) 

  05c94	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _hHeight$154449[ebp]
  05c9a	3b 85 50 ff ff
	ff		 cmp	 eax, DWORD PTR _bRect$154446[ebp+12]
  05ca0	7e 0c		 jle	 SHORT $L154456

; 1636 : 							bRect.bottom = hHeight;

  05ca2	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _hHeight$154449[ebp]
  05ca8	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _bRect$154446[ebp+12], ecx
$L154456:

; 1637 : 			
; 1638 : 						if ( tRect.A.x < bRect.left ) 

  05cae	8b 55 c4	 mov	 edx, DWORD PTR _tRect$154448[ebp]
  05cb1	3b 95 44 ff ff
	ff		 cmp	 edx, DWORD PTR _bRect$154446[ebp]
  05cb7	7d 09		 jge	 SHORT $L154457

; 1639 : 							bRect.left = tRect.A.x;

  05cb9	8b 45 c4	 mov	 eax, DWORD PTR _tRect$154448[ebp]
  05cbc	89 85 44 ff ff
	ff		 mov	 DWORD PTR _bRect$154446[ebp], eax
$L154457:

; 1640 : 			
; 1641 : 						if ( tRect.B.x > bRect.right ) 

  05cc2	8b 4d cc	 mov	 ecx, DWORD PTR _tRect$154448[ebp+8]
  05cc5	3b 8d 4c ff ff
	ff		 cmp	 ecx, DWORD PTR _bRect$154446[ebp+8]
  05ccb	7e 09		 jle	 SHORT $L154458

; 1642 : 							bRect.right = tRect.B.x;

  05ccd	8b 55 cc	 mov	 edx, DWORD PTR _tRect$154448[ebp+8]
  05cd0	89 95 4c ff ff
	ff		 mov	 DWORD PTR _bRect$154446[ebp+8], edx
$L154458:

; 1644 : 				}

  05cd6	e9 56 ff ff ff	 jmp	 $L154451
$L154452:

; 1645 : 			
; 1646 : 				Ratio scaleX ( oRect.Width(), bRect.Width() );

  05cdb	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _bRect$154446[ebp]
  05ce1	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  05ce6	50		 push	 eax
  05ce7	8d 4d a8	 lea	 ecx, DWORD PTR _oRect$154445[ebp]
  05cea	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  05cef	50		 push	 eax
  05cf0	8d 4d bc	 lea	 ecx, DWORD PTR _scaleX$154459[ebp]
  05cf3	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio

; 1647 : 				Ratio scaleY ( oRect.Height(), bRect.Height() );

  05cf8	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _bRect$154446[ebp]
  05cfe	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  05d03	50		 push	 eax
  05d04	8d 4d a8	 lea	 ecx, DWORD PTR _oRect$154445[ebp]
  05d07	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  05d0c	50		 push	 eax
  05d0d	8d 4d d4	 lea	 ecx, DWORD PTR _scaleY$154460[ebp]
  05d10	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio

; 1648 : 			
; 1649 : 				scaleX.Normalize();

  05d15	8d 4d bc	 lea	 ecx, DWORD PTR _scaleX$154459[ebp]
  05d18	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 1650 : 				scaleY.Normalize();

  05d1d	8d 4d d4	 lea	 ecx, DWORD PTR _scaleY$154460[ebp]
  05d20	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 1651 : 			
; 1652 : 				CPoint pCenter;

  05d25	8d 4d dc	 lea	 ecx, DWORD PTR _pCenter$154461[ebp]
  05d28	e8 00 00 00 00	 call	 ??0CPoint@@QAE@XZ	; CPoint::CPoint

; 1653 : 				pCenter = bRect.CenterPoint();

  05d2d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T161135[ebp]
  05d33	50		 push	 eax
  05d34	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _bRect$154446[ebp]
  05d3a	e8 00 00 00 00	 call	 ?CenterPoint@CRect@@QBE?AVCPoint@@XZ ; CRect::CenterPoint
  05d3f	8b 08		 mov	 ecx, DWORD PTR [eax]
  05d41	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  05d44	89 4d dc	 mov	 DWORD PTR _pCenter$154461[ebp], ecx
  05d47	89 55 e0	 mov	 DWORD PTR _pCenter$154461[ebp+4], edx

; 1654 : 			
; 1655 : 				//	Set origin to center of rectangle.
; 1656 : 				bitmapObject.xorg = pCenter.x;

  05d4a	8b 45 dc	 mov	 eax, DWORD PTR _pCenter$154461[ebp]
  05d4d	89 45 80	 mov	 DWORD PTR _bitmapObject$154443[ebp+40], eax

; 1657 : 				bitmapObject.yorg = pCenter.y;

  05d50	8b 4d e0	 mov	 ecx, DWORD PTR _pCenter$154461[ebp+4]
  05d53	89 4d 84	 mov	 DWORD PTR _bitmapObject$154443[ebp+44], ecx

; 1658 : 			
; 1659 : 				//	Select the greater scale factor of the x or y.
; 1660 : 				if ( scaleX > scaleY )

  05d56	8d 55 d4	 lea	 edx, DWORD PTR _scaleY$154460[ebp]
  05d59	52		 push	 edx
  05d5a	8d 4d bc	 lea	 ecx, DWORD PTR _scaleX$154459[ebp]
  05d5d	e8 00 00 00 00	 call	 ??ORatio@@QBEHABV0@@Z	; Ratio::operator>
  05d62	85 c0		 test	 eax, eax
  05d64	74 0c		 je	 SHORT $L154463

; 1661 : 					scaleX = scaleY;

  05d66	8b 45 d4	 mov	 eax, DWORD PTR _scaleY$154460[ebp]
  05d69	89 45 bc	 mov	 DWORD PTR _scaleX$154459[ebp], eax
  05d6c	8b 4d d8	 mov	 ecx, DWORD PTR _scaleY$154460[ebp+4]
  05d6f	89 4d c0	 mov	 DWORD PTR _scaleX$154459[ebp+4], ecx
$L154463:

; 1662 : 			
; 1663 : 				if ( scaleX.IsLargerThanOne() )			// Do NOT scale up!

  05d72	8d 4d bc	 lea	 ecx, DWORD PTR _scaleX$154459[ebp]
  05d75	e8 00 00 00 00	 call	 ?IsLargerThanOne@Ratio@@QBEHXZ ; Ratio::IsLargerThanOne
  05d7a	85 c0		 test	 eax, eax
  05d7c	74 0d		 je	 SHORT $L154464

; 1664 : 					scaleX.numer = scaleX.denom = 1;

  05d7e	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR _scaleX$154459[ebp+4], 1
  05d85	8b 55 c0	 mov	 edx, DWORD PTR _scaleX$154459[ebp+4]
  05d88	89 55 bc	 mov	 DWORD PTR _scaleX$154459[ebp], edx
$L154464:

; 1665 : 			
; 1666 : 				CSkinBitmap* pObjectBitmap = new CSkinBitmap ( &bitmapObject, 1.0, scaleX, scaleX );

  05d8b	6a 1c		 push	 28			; 0000001cH
  05d8d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  05d92	83 c4 04	 add	 esp, 4
  05d95	89 85 f4 fe ff
	ff		 mov	 DWORD PTR $T161137[ebp], eax
  05d9b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  05d9f	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR $T161137[ebp], 0
  05da6	74 29		 je	 SHORT $L161138
  05da8	8d 45 bc	 lea	 eax, DWORD PTR _scaleX$154459[ebp]
  05dab	50		 push	 eax
  05dac	8d 4d bc	 lea	 ecx, DWORD PTR _scaleX$154459[ebp]
  05daf	51		 push	 ecx
  05db0	68 00 00 f0 3f	 push	 1072693248		; 3ff00000H
  05db5	6a 00		 push	 0
  05db7	8d 95 58 ff ff
	ff		 lea	 edx, DWORD PTR _bitmapObject$154443[ebp]
  05dbd	52		 push	 edx
  05dbe	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR $T161137[ebp]
  05dc4	e8 00 00 00 00	 call	 ??0CSkinBitmap@@QAE@PAVCelObj@@NAAVRatio@@1@Z ; CSkinBitmap::CSkinBitmap
  05dc9	89 85 d4 fe ff
	ff		 mov	 DWORD PTR -300+[ebp], eax
  05dcf	eb 0a		 jmp	 SHORT $L161139
$L161138:
  05dd1	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -300+[ebp], 0
$L161139:
  05ddb	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR -300+[ebp]
  05de1	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T161136[ebp], eax
  05de7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05deb	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR $T161136[ebp]
  05df1	89 4d b8	 mov	 DWORD PTR _pObjectBitmap$154465[ebp], ecx

; 1667 : 			
; 1668 : 				//	Set draw location to center of window
; 1669 : 				pCenter = oRect.CenterPoint();

  05df4	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR $T161140[ebp]
  05dfa	52		 push	 edx
  05dfb	8d 4d a8	 lea	 ecx, DWORD PTR _oRect$154445[ebp]
  05dfe	e8 00 00 00 00	 call	 ?CenterPoint@CRect@@QBE?AVCPoint@@XZ ; CRect::CenterPoint
  05e03	8b 08		 mov	 ecx, DWORD PTR [eax]
  05e05	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  05e08	89 4d dc	 mov	 DWORD PTR _pCenter$154461[ebp], ecx
  05e0b	89 55 e0	 mov	 DWORD PTR _pCenter$154461[ebp+4], edx

; 1670 : 			
; 1671 : 				// draw the stance on the hot spot bitmap
; 1672 : 				m_BitmapHolder.DrawBitmap ( pObjectBitmap, pCenter.x, pCenter.y );

  05e0e	8b 45 e0	 mov	 eax, DWORD PTR _pCenter$154461[ebp+4]
  05e11	50		 push	 eax
  05e12	8b 4d dc	 mov	 ecx, DWORD PTR _pCenter$154461[ebp]
  05e15	51		 push	 ecx
  05e16	8b 55 b8	 mov	 edx, DWORD PTR _pObjectBitmap$154465[ebp]
  05e19	52		 push	 edx
  05e1a	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05e20	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  05e26	e8 00 00 00 00	 call	 ?DrawBitmap@CSkinObj@@QAEHPAVCSkinBitmap@@HH@Z ; CSkinObj::DrawBitmap

; 1673 : 			
; 1674 : 				delete pObjectBitmap;

  05e2b	8b 45 b8	 mov	 eax, DWORD PTR _pObjectBitmap$154465[ebp]
  05e2e	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T161142[ebp], eax
  05e34	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR $T161142[ebp]
  05e3a	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T161141[ebp], ecx
  05e40	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR $T161141[ebp], 0
  05e47	74 1a		 je	 SHORT $L161143
  05e49	6a 01		 push	 1
  05e4b	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR $T161141[ebp]
  05e51	8b 02		 mov	 eax, DWORD PTR [edx]
  05e53	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR $T161141[ebp]
  05e59	ff 10		 call	 DWORD PTR [eax]
  05e5b	89 85 d0 fe ff
	ff		 mov	 DWORD PTR -304+[ebp], eax
  05e61	eb 0a		 jmp	 SHORT $L161144
$L161143:
  05e63	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -304+[ebp], 0
$L161144:

; 1675 : 			}

  05e6d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  05e71	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapObject$154443[ebp]
  05e77	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
$L154441:

; 1677 : 
; 1678 : 		// center the dialog on the given point...
; 1679 : 		CenterOnPoint ( g_MouseLocation.x, g_MouseLocation.y );

  05e7c	6a 01		 push	 1
  05e7e	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?g_MouseLocation@@3UtagPOINT@@A+4
  05e84	51		 push	 ecx
  05e85	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_MouseLocation@@3UtagPOINT@@A
  05e8b	52		 push	 edx
  05e8c	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05e92	e8 00 00 00 00	 call	 ?CenterOnPoint@CSkinWnd@@QAEXHH_N@Z ; CSkinWnd::CenterOnPoint

; 1680 : 
; 1681 : 		ShowWindow( SW_SHOW );

  05e97	6a 05		 push	 5
  05e99	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  05e9f	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 1682 : 	}

  05ea4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05eab	8d 4d e4	 lea	 ecx, DWORD PTR _text$154437[ebp]
  05eae	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
$L154435:

; 1683 : 
; 1684 : 	return bCreated;

  05eb3	8b 45 ec	 mov	 eax, DWORD PTR _bCreated$[ebp]

; 1685 : }

  05eb6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  05eb9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  05ec0	8b e5		 mov	 esp, ebp
  05ec2	5d		 pop	 ebp
  05ec3	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L161145:
  002ca	8d 4d e4	 lea	 ecx, DWORD PTR _text$154437[ebp]
  002cd	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  002d2	c3		 ret	 0
$L161146:
  002d3	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T161130[ebp]
  002d9	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  002de	c3		 ret	 0
$L161147:
  002df	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _bitmapObject$154443[ebp]
  002e5	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  002ea	c3		 ret	 0
$L161148:
  002eb	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR $T161137[ebp]
  002f1	50		 push	 eax
  002f2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002f7	59		 pop	 ecx
  002f8	c3		 ret	 0
$L161151:
  002f9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161150
  002fe	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Create@CLookAtItem@@QAEHVCSCI_WorldObject@@VStringID@@@Z ENDP ; CLookAtItem::Create
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CRect@@QAE@XZ PROC NEAR				; CRect::CRect, COMDAT

; 132  : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT
_l$ = 8
_t$ = 12
_r$ = 16
_b$ = 20
_this$ = -4
??0CRect@@QAE@HHHH@Z PROC NEAR				; CRect::CRect, COMDAT

; 134  : 	{ left = l; top = t; right = r; bottom = b; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _l$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _r$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _b$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
??0CRect@@QAE@HHHH@Z ENDP				; CRect::CRect
_TEXT	ENDS
PUBLIC	??4SOL_Point@@QAEAAV0@ABV0@@Z			; SOL_Point::operator=
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4SOL_Rect@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Rect::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??4SOL_Rect@@QAEAAV0@ABV0@@Z ENDP			; SOL_Rect::operator=
_TEXT	ENDS
_DATA	SEGMENT
$SG154484 DB	'_', 00H
	ORG $+2
$SG154486 DB	'rmtf', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T161174 DD	019930520H
	DD	04H
	DD	FLAT:$T161176
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161176 DD	0ffffffffH
	DD	FLAT:$L161167
	DD	00H
	DD	FLAT:$L161168
	DD	01H
	DD	FLAT:$L161169
	DD	02H
	DD	FLAT:$L161170
xdata$x	ENDS
_TEXT	SEGMENT
$T161157 = -24
$T161158 = -28
$T161159 = -32
$T161160 = -36
$T161165 = -40
$T161166 = -44
__$EHRec$ = -12
_obj$ = 8
_this$ = -48
_name$ = -16
_id$ = -20
?MakeSkinCtrl@CLookAtItem@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z PROC NEAR ; CLookAtItem::MakeSkinCtrl

; 1689 : {

  05ec6	55		 push	 ebp
  05ec7	8b ec		 mov	 ebp, esp
  05ec9	6a ff		 push	 -1
  05ecb	68 00 00 00 00	 push	 $L161175
  05ed0	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  05ed6	50		 push	 eax
  05ed7	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  05ede	83 ec 3c	 sub	 esp, 60			; 0000003cH
  05ee1	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  05ee4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1690 : 	// the type of the control is specified by the left characters of the name up to the _
; 1691 : 	CString name = obj.GetName();

  05eeb	8d 45 f0	 lea	 eax, DWORD PTR _name$[ebp]
  05eee	50		 push	 eax
  05eef	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  05ef2	e8 00 00 00 00	 call	 ?GetName@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetName
  05ef7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1692 : 	CString id = name.Left ( name.Find ( "_", 0 ) );

  05efb	6a 00		 push	 0
  05efd	68 00 00 00 00	 push	 OFFSET FLAT:$SG154484
  05f02	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  05f05	e8 00 00 00 00	 call	 ?Find@CString@@QBEHPBDH@Z ; CString::Find
  05f0a	50		 push	 eax
  05f0b	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  05f0e	51		 push	 ecx
  05f0f	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  05f12	e8 00 00 00 00	 call	 ?Left@CString@@QBE?AV1@H@Z ; CString::Left
  05f17	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1693 : 
; 1694 : 	// handle read only multiline text fields
; 1695 : 	if ( id == "rmtf" ) {

  05f1b	68 00 00 00 00	 push	 OFFSET FLAT:$SG154486
  05f20	8d 55 ec	 lea	 edx, DWORD PTR _id$[ebp]
  05f23	52		 push	 edx
  05f24	e8 00 00 00 00	 call	 ??8@YG_NABVCString@@PBD@Z ; operator==
  05f29	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  05f2e	85 c0		 test	 eax, eax
  05f30	0f 84 b9 00 00
	00		 je	 $L154485

; 1696 : 		return m_pPrompt = new CSkinEdit ( obj, this, 700, CSkinEdit::CENTER | CSkinEdit::MULTILINE | CSkinEdit::READONLY, false, true );

  05f36	68 d8 00 00 00	 push	 216			; 000000d8H
  05f3b	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  05f40	89 45 e0	 mov	 DWORD PTR $T161159[ebp], eax
  05f43	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  05f47	83 7d e0 00	 cmp	 DWORD PTR $T161159[ebp], 0
  05f4b	74 3b		 je	 SHORT $L161161
  05f4d	6a 00		 push	 0
  05f4f	6a 01		 push	 1
  05f51	6a 00		 push	 0
  05f53	68 05 08 00 00	 push	 2053			; 00000805H
  05f58	68 bc 02 00 00	 push	 700			; 000002bcH
  05f5d	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  05f60	50		 push	 eax
  05f61	83 ec 08	 sub	 esp, 8
  05f64	8b cc		 mov	 ecx, esp
  05f66	89 65 dc	 mov	 DWORD PTR $T161160[ebp], esp
  05f69	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  05f6c	52		 push	 edx
  05f6d	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  05f72	89 45 cc	 mov	 DWORD PTR -52+[ebp], eax
  05f75	8b 4d e0	 mov	 ecx, DWORD PTR $T161159[ebp]
  05f78	e8 00 00 00 00	 call	 ??0CSkinEdit@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ; CSkinEdit::CSkinEdit
  05f7d	89 45 c8	 mov	 DWORD PTR -56+[ebp], eax
  05f80	8b 45 c8	 mov	 eax, DWORD PTR -56+[ebp]
  05f83	89 45 c4	 mov	 DWORD PTR -60+[ebp], eax
  05f86	eb 07		 jmp	 SHORT $L161162
$L161161:
  05f88	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR -60+[ebp], 0
$L161162:
  05f8f	8b 4d c4	 mov	 ecx, DWORD PTR -60+[ebp]
  05f92	89 4d e4	 mov	 DWORD PTR $T161158[ebp], ecx
  05f95	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05f99	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  05f9c	8b 45 e4	 mov	 eax, DWORD PTR $T161158[ebp]
  05f9f	89 82 98 00 00
	00		 mov	 DWORD PTR [edx+152], eax
  05fa5	83 7d e4 00	 cmp	 DWORD PTR $T161158[ebp], 0
  05fa9	74 0b		 je	 SHORT $L161163
  05fab	8b 4d e4	 mov	 ecx, DWORD PTR $T161158[ebp]
  05fae	83 c1 60	 add	 ecx, 96			; 00000060H
  05fb1	89 4d c0	 mov	 DWORD PTR -64+[ebp], ecx
  05fb4	eb 07		 jmp	 SHORT $L161164
$L161163:
  05fb6	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR -64+[ebp], 0
$L161164:
  05fbd	8b 55 c0	 mov	 edx, DWORD PTR -64+[ebp]
  05fc0	89 55 e8	 mov	 DWORD PTR $T161157[ebp], edx
  05fc3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  05fc7	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  05fca	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  05fcf	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  05fd3	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  05fd6	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  05fdb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05fe2	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  05fe5	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  05fea	8b 45 e8	 mov	 eax, DWORD PTR $T161157[ebp]
  05fed	eb 4f		 jmp	 SHORT $L154479
$L154485:

; 1698 : 
; 1699 : 	return CSkinWnd::MakeSkinCtrl( obj );

  05fef	83 ec 08	 sub	 esp, 8
  05ff2	8b cc		 mov	 ecx, esp
  05ff4	89 65 d4	 mov	 DWORD PTR $T161166[ebp], esp
  05ff7	8d 45 08	 lea	 eax, DWORD PTR _obj$[ebp]
  05ffa	50		 push	 eax
  05ffb	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  06000	89 45 bc	 mov	 DWORD PTR -68+[ebp], eax
  06003	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  06006	e8 00 00 00 00	 call	 ?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CSkinWnd::MakeSkinCtrl
  0600b	89 45 b8	 mov	 DWORD PTR -72+[ebp], eax
  0600e	8b 4d b8	 mov	 ecx, DWORD PTR -72+[ebp]
  06011	89 4d d8	 mov	 DWORD PTR $T161165[ebp], ecx
  06014	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  06018	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0601b	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  06020	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  06024	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  06027	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0602c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06033	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  06036	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0603b	8b 45 d8	 mov	 eax, DWORD PTR $T161165[ebp]
$L154479:

; 1700 : }

  0603e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  06048	8b e5		 mov	 esp, ebp
  0604a	5d		 pop	 ebp
  0604b	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L161167:
  00303	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00306	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0030b	c3		 ret	 0
$L161168:
  0030c	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  0030f	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00314	c3		 ret	 0
$L161169:
  00315	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  00318	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0031d	c3		 ret	 0
$L161170:
  0031e	8b 45 e0	 mov	 eax, DWORD PTR $T161159[ebp]
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00327	c3		 ret	 0
$L161175:
  00328	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161174
  0032d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeSkinCtrl@CLookAtItem@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ENDP ; CLookAtItem::MakeSkinCtrl
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Width@CRect@@QBEHXZ PROC NEAR				; CRect::Width, COMDAT

; 145  : 	{ return right - left; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Width@CRect@@QBEHXZ ENDP				; CRect::Width
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Height@CRect@@QBEHXZ PROC NEAR				; CRect::Height, COMDAT

; 147  : 	{ return bottom - top; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
_TEXT	ENDS
;	COMDAT ?TopLeft@CRect@@QAEAAVCPoint@@XZ
_TEXT	SEGMENT
_this$ = -4
?TopLeft@CRect@@QAEAAVCPoint@@XZ PROC NEAR		; CRect::TopLeft, COMDAT

; 151  : 	{ return *((CPoint*)this); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?TopLeft@CRect@@QAEAAVCPoint@@XZ ENDP			; CRect::TopLeft
_TEXT	ENDS
PUBLIC	?Update@CLookAtItem@@QAEXVStringID@@@Z		; CLookAtItem::Update
xdata$x	SEGMENT
$T161183 DD	019930520H
	DD	01H
	DD	FLAT:$T161185
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161185 DD	0ffffffffH
	DD	FLAT:$L161181
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_hText$ = 8
_this$ = -20
_text$ = -16
?Update@CLookAtItem@@QAEXVStringID@@@Z PROC NEAR	; CLookAtItem::Update

; 1703 : {

  0604e	55		 push	 ebp
  0604f	8b ec		 mov	 ebp, esp
  06051	6a ff		 push	 -1
  06053	68 00 00 00 00	 push	 $L161184
  06058	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0605e	50		 push	 eax
  0605f	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  06066	83 ec 08	 sub	 esp, 8
  06069	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1704 : 	assert( m_pPrompt != NULL );
; 1705 : 	CString text = *hText;

  0606c	8d 4d 08	 lea	 ecx, DWORD PTR _hText$[ebp]
  0606f	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  06074	50		 push	 eax
  06075	8d 4d f0	 lea	 ecx, DWORD PTR _text$[ebp]
  06078	e8 00 00 00 00	 call	 ??0CString@@QAE@PBD@Z	; CString::CString
  0607d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1706 : 
; 1707 : 	text.Replace( 0x0d, 0x0a );

  06084	6a 0a		 push	 10			; 0000000aH
  06086	6a 0d		 push	 13			; 0000000dH
  06088	8d 4d f0	 lea	 ecx, DWORD PTR _text$[ebp]
  0608b	e8 00 00 00 00	 call	 ?Replace@CString@@QAEHDD@Z ; CString::Replace

; 1708 : 
; 1709 : 	m_pPrompt->SetText( text );

  06090	8d 4d f0	 lea	 ecx, DWORD PTR _text$[ebp]
  06093	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  06098	50		 push	 eax
  06099	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0609c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  060a2	e8 00 00 00 00	 call	 ?SetText@CSkinEdit@@QAEHPBD@Z ; CSkinEdit::SetText

; 1710 : 
; 1711 : 	m_pPrompt->RequestResize();

  060a7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  060aa	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  060b0	e8 00 00 00 00	 call	 ?RequestResize@CRichEditCtrl@@QAEXXZ ; CRichEditCtrl::RequestResize

; 1712 : }

  060b5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  060bc	8d 4d f0	 lea	 ecx, DWORD PTR _text$[ebp]
  060bf	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  060c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  060c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  060ce	8b e5		 mov	 esp, ebp
  060d0	5d		 pop	 ebp
  060d1	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L161181:
  00332	8d 4d f0	 lea	 ecx, DWORD PTR _text$[ebp]
  00335	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0033a	c3		 ret	 0
$L161184:
  0033b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161183
  00340	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Update@CLookAtItem@@QAEXVStringID@@@Z ENDP		; CLookAtItem::Update
PUBLIC	??0CPoint@@QAE@HH@Z				; CPoint::CPoint
;	COMDAT ?CenterPoint@CRect@@QBE?AVCPoint@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
$T161187 = -8
?CenterPoint@CRect@@QBE?AVCPoint@@XZ PROC NEAR		; CRect::CenterPoint, COMDAT

; 159  : 	{ return CPoint((left+right)/2, (top+bottom)/2); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  00015	99		 cdq
  00016	2b c2		 sub	 eax, edx
  00018	d1 f8		 sar	 eax, 1
  0001a	50		 push	 eax
  0001b	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00026	99		 cdq
  00027	2b c2		 sub	 eax, edx
  00029	d1 f8		 sar	 eax, 1
  0002b	50		 push	 eax
  0002c	8d 4d f8	 lea	 ecx, DWORD PTR $T161187[ebp]
  0002f	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	89 11		 mov	 DWORD PTR [ecx], edx
  0003e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00041	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?CenterPoint@CRect@@QBE?AVCPoint@@XZ ENDP		; CRect::CenterPoint
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT
_initX$ = 8
_initY$ = 12
_this$ = -4
??0CPoint@@QAE@HH@Z PROC NEAR				; CPoint::CPoint, COMDAT

; 85   : 	{ x = initX; y = initY; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _initX$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _initY$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0CPoint@@QAE@HH@Z ENDP				; CPoint::CPoint
_TEXT	ENDS
PUBLIC	??8MemID@@QBEHABV0@@Z				; MemID::operator==
PUBLIC	?Match@CLookAtItem@@QAEHVCSCI_WorldObject@@@Z	; CLookAtItem::Match
_TEXT	SEGMENT
_hObject$ = 8
_this$ = -4
?Match@CLookAtItem@@QAEHVCSCI_WorldObject@@@Z PROC NEAR	; CLookAtItem::Match

; 1716 : {

  060d4	55		 push	 ebp
  060d5	8b ec		 mov	 ebp, esp
  060d7	51		 push	 ecx
  060d8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1717 : 	return hObject == m_hObject;

  060db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  060de	05 94 00 00 00	 add	 eax, 148		; 00000094H
  060e3	50		 push	 eax
  060e4	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  060e7	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==

; 1718 : }

  060ec	8b e5		 mov	 esp, ebp
  060ee	5d		 pop	 ebp
  060ef	c2 04 00	 ret	 4
?Match@CLookAtItem@@QAEHVCSCI_WorldObject@@@Z ENDP	; CLookAtItem::Match
_TEXT	ENDS
PUBLIC	??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator
PUBLIC	??Diterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEAAPAVCLookAtItem@@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator*
PUBLIC	??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AV012@H@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++
PUBLIC	??9iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator!=
PUBLIC	?begin@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::begin
PUBLIC	?end@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::end
PUBLIC	?size@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEIXZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::size
PUBLIC	?front@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAPAVCLookAtItem@@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::front
PUBLIC	?Look@CLookAtItem@@SAXVCSCI_WorldObject@@VStringID@@@Z ; CLookAtItem::Look
PUBLIC	??0CSCI_WorldObject@@QAE@ABV0@@Z		; CSCI_WorldObject::CSCI_WorldObject
xdata$x	SEGMENT
$T161208 DD	019930520H
	DD	01H
	DD	FLAT:$T161210
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161210 DD	0ffffffffH
	DD	FLAT:$L161206
xdata$x	ENDS
_TEXT	SEGMENT
$T161191 = -28
$T161192 = -32
$T161193 = -36
$T161194 = -40
$T161195 = -44
$T161196 = -48
$T161197 = -52
$T161200 = -56
$T161201 = -60
$T161204 = -64
$T161205 = -68
__$EHRec$ = -12
_hObject$ = 8
_hText$ = 12
_listI$ = -16
_pItem$154517 = -20
_pItem$154522 = -24
?Look@CLookAtItem@@SAXVCSCI_WorldObject@@VStringID@@@Z PROC NEAR ; CLookAtItem::Look

; 1721 : {

  060f2	55		 push	 ebp
  060f3	8b ec		 mov	 ebp, esp
  060f5	6a ff		 push	 -1
  060f7	68 00 00 00 00	 push	 $L161209
  060fc	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  06102	50		 push	 eax
  06103	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0610a	83 ec 40	 sub	 esp, 64			; 00000040H

; 1722 : 	std::list<CLookAtItem*>::iterator listI;

  0610d	8d 4d f0	 lea	 ecx, DWORD PTR _listI$[ebp]
  06110	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator

; 1723 : 	
; 1724 : 	for (listI = m_VisibleLookAts.begin();listI != m_VisibleLookAts.end();listI++) {

  06115	8d 45 e4	 lea	 eax, DWORD PTR $T161191[ebp]
  06118	50		 push	 eax
  06119	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A
  0611e	e8 00 00 00 00	 call	 ?begin@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::begin
  06123	8b 08		 mov	 ecx, DWORD PTR [eax]
  06125	89 4d f0	 mov	 DWORD PTR _listI$[ebp], ecx
  06128	eb 0e		 jmp	 SHORT $L154514
$L154515:
  0612a	6a 00		 push	 0
  0612c	8d 55 e0	 lea	 edx, DWORD PTR $T161192[ebp]
  0612f	52		 push	 edx
  06130	8d 4d f0	 lea	 ecx, DWORD PTR _listI$[ebp]
  06133	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AV012@H@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++
$L154514:
  06138	8d 45 dc	 lea	 eax, DWORD PTR $T161193[ebp]
  0613b	50		 push	 eax
  0613c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A
  06141	e8 00 00 00 00	 call	 ?end@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::end
  06146	50		 push	 eax
  06147	8d 4d f0	 lea	 ecx, DWORD PTR _listI$[ebp]
  0614a	e8 00 00 00 00	 call	 ??9iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator!=
  0614f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  06154	85 c0		 test	 eax, eax
  06156	74 4e		 je	 SHORT $L154516

; 1725 : 		CLookAtItem* pItem = *listI;

  06158	8d 4d f0	 lea	 ecx, DWORD PTR _listI$[ebp]
  0615b	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEAAPAVCLookAtItem@@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator*
  06160	8b 08		 mov	 ecx, DWORD PTR [eax]
  06162	89 4d ec	 mov	 DWORD PTR _pItem$154517[ebp], ecx

; 1726 : 
; 1727 : 		if ( pItem->Match( hObject ) ) {

  06165	51		 push	 ecx
  06166	8b cc		 mov	 ecx, esp
  06168	89 65 d8	 mov	 DWORD PTR $T161194[ebp], esp
  0616b	8d 55 08	 lea	 edx, DWORD PTR _hObject$[ebp]
  0616e	52		 push	 edx
  0616f	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  06174	8b 4d ec	 mov	 ecx, DWORD PTR _pItem$154517[ebp]
  06177	e8 00 00 00 00	 call	 ?Match@CLookAtItem@@QAEHVCSCI_WorldObject@@@Z ; CLookAtItem::Match
  0617c	85 c0		 test	 eax, eax
  0617e	74 24		 je	 SHORT $L154519

; 1728 : 			pItem->Update( hText );

  06180	51		 push	 ecx
  06181	8b cc		 mov	 ecx, esp
  06183	89 65 d4	 mov	 DWORD PTR $T161195[ebp], esp
  06186	8d 45 0c	 lea	 eax, DWORD PTR _hText$[ebp]
  06189	50		 push	 eax
  0618a	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  0618f	8b 4d ec	 mov	 ecx, DWORD PTR _pItem$154517[ebp]
  06192	e8 00 00 00 00	 call	 ?Update@CLookAtItem@@QAEXVStringID@@@Z ; CLookAtItem::Update

; 1729 : 			pItem->SetFocus();

  06197	8b 4d ec	 mov	 ecx, DWORD PTR _pItem$154517[ebp]
  0619a	e8 00 00 00 00	 call	 ?SetFocus@CWnd@@QAEPAV1@XZ ; CWnd::SetFocus

; 1730 : 			return;

  0619f	e9 ac 00 00 00	 jmp	 $L154508
$L154519:

; 1732 : 	}

  061a4	eb 84		 jmp	 SHORT $L154515
$L154516:

; 1733 : 
; 1734 : 	if ( m_VisibleLookAts.size() == MaxLookAts ) {

  061a6	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A
  061ab	e8 00 00 00 00	 call	 ?size@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEIXZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::size
  061b0	83 f8 03	 cmp	 eax, 3
  061b3	75 3a		 jne	 SHORT $L161199

; 1735 : 		CLookAtItem* pItem = m_VisibleLookAts.front();

  061b5	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_VisibleLookAts@CLookAtItem@@1V?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@A
  061ba	e8 00 00 00 00	 call	 ?front@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAPAVCLookAtItem@@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::front
  061bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  061c1	89 4d e8	 mov	 DWORD PTR _pItem$154522[ebp], ecx

; 1736 : 
; 1737 : 		delete pItem;

  061c4	8b 55 e8	 mov	 edx, DWORD PTR _pItem$154522[ebp]
  061c7	89 55 cc	 mov	 DWORD PTR $T161197[ebp], edx
  061ca	8b 45 cc	 mov	 eax, DWORD PTR $T161197[ebp]
  061cd	89 45 d0	 mov	 DWORD PTR $T161196[ebp], eax
  061d0	83 7d d0 00	 cmp	 DWORD PTR $T161196[ebp], 0
  061d4	74 12		 je	 SHORT $L161198
  061d6	6a 01		 push	 1
  061d8	8b 4d d0	 mov	 ecx, DWORD PTR $T161196[ebp]
  061db	8b 11		 mov	 edx, DWORD PTR [ecx]
  061dd	8b 4d d0	 mov	 ecx, DWORD PTR $T161196[ebp]
  061e0	ff 52 04	 call	 DWORD PTR [edx+4]
  061e3	89 45 b8	 mov	 DWORD PTR -72+[ebp], eax
  061e6	eb 07		 jmp	 SHORT $L161199
$L161198:
  061e8	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR -72+[ebp], 0
$L161199:

; 1739 : 
; 1740 : 	(new CLookAtItem())->Create( hObject, hText );

  061ef	68 a4 00 00 00	 push	 164			; 000000a4H
  061f4	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  061f9	89 45 c4	 mov	 DWORD PTR $T161201[ebp], eax
  061fc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  06203	83 7d c4 00	 cmp	 DWORD PTR $T161201[ebp], 0
  06207	74 0d		 je	 SHORT $L161202
  06209	8b 4d c4	 mov	 ecx, DWORD PTR $T161201[ebp]
  0620c	e8 00 00 00 00	 call	 ??0CLookAtItem@@QAE@XZ	; CLookAtItem::CLookAtItem
  06211	89 45 b4	 mov	 DWORD PTR -76+[ebp], eax
  06214	eb 07		 jmp	 SHORT $L161203
$L161202:
  06216	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR -76+[ebp], 0
$L161203:
  0621d	8b 45 b4	 mov	 eax, DWORD PTR -76+[ebp]
  06220	89 45 c8	 mov	 DWORD PTR $T161200[ebp], eax
  06223	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0622a	51		 push	 ecx
  0622b	8b cc		 mov	 ecx, esp
  0622d	89 65 c0	 mov	 DWORD PTR $T161204[ebp], esp
  06230	8d 55 0c	 lea	 edx, DWORD PTR _hText$[ebp]
  06233	52		 push	 edx
  06234	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  06239	51		 push	 ecx
  0623a	8b cc		 mov	 ecx, esp
  0623c	89 65 bc	 mov	 DWORD PTR $T161205[ebp], esp
  0623f	8d 45 08	 lea	 eax, DWORD PTR _hObject$[ebp]
  06242	50		 push	 eax
  06243	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  06248	8b 4d c8	 mov	 ecx, DWORD PTR $T161200[ebp]
  0624b	e8 00 00 00 00	 call	 ?Create@CLookAtItem@@QAEHVCSCI_WorldObject@@VStringID@@@Z ; CLookAtItem::Create
$L154508:

; 1741 : }

  06250	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06253	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0625a	8b e5		 mov	 esp, ebp
  0625c	5d		 pop	 ebp
  0625d	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L161206:
  00345	8b 45 c4	 mov	 eax, DWORD PTR $T161201[ebp]
  00348	50		 push	 eax
  00349	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0034e	c3		 ret	 0
$L161209:
  0034f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161208
  00354	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Look@CLookAtItem@@SAXVCSCI_WorldObject@@VStringID@@@Z ENDP ; CLookAtItem::Look
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4
??BCRect@@QAEPAUtagRECT@@XZ PROC NEAR			; CRect::operator tagRECT *, COMDAT

; 165  : 	{ return this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??BCRect@@QAEPAUtagRECT@@XZ ENDP			; CRect::operator tagRECT *
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@ABV0@@Z			; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_WorldObject@@QAE@ABV0@@Z PROC NEAR		; CSCI_WorldObject::CSCI_WorldObject, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@ABV0@@Z ; CSCI_Actor::CSCI_Actor
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_WorldObject@@QAE@ABV0@@Z ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@ABV0@@Z			; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Actor@@QAE@ABV0@@Z PROC NEAR			; CSCI_Actor::CSCI_Actor, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@ABV0@@Z ; CSCI_Prop::CSCI_Prop
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Actor@@QAE@ABV0@@Z ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@ABV0@@Z			; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Prop@@QAE@ABV0@@Z PROC NEAR			; CSCI_Prop::CSCI_Prop, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@ABV0@@Z ; CSCI_View::CSCI_View
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Prop@@QAE@ABV0@@Z ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@ABV0@@Z			; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_View@@QAE@ABV0@@Z PROC NEAR			; CSCI_View::CSCI_View, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@ABV0@@Z ; CSCI_Feature::CSCI_Feature
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_View@@QAE@ABV0@@Z ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@ABV0@@Z			; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Feature@@QAE@ABV0@@Z PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@ABV0@@Z ; CSCI_BitMap::CSCI_BitMap
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Feature@@QAE@ABV0@@Z ENDP			; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@ABV0@@Z			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_BitMap@@QAE@ABV0@@Z PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@ABV0@@Z ; CSCI_Rectangle::CSCI_Rectangle
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_BitMap@@QAE@ABV0@@Z ENDP			; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Rectangle@@QAE@ABV0@@Z PROC NEAR		; CSCI_Rectangle::CSCI_Rectangle, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABV0@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Rectangle@@QAE@ABV0@@Z ENDP			; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
_TEXT	SEGMENT
_pNMHDR$ = 8
_this$ = -44
_prr$ = -40
_promptRect$ = -16
_myRect$ = -32
_nAdjust$ = -36
?OnResize@CLookAtItem@@QAEXPAUtagNMHDR@@PAJ@Z PROC NEAR	; CLookAtItem::OnResize

; 1744 : {

  0625e	55		 push	 ebp
  0625f	8b ec		 mov	 ebp, esp
  06261	83 ec 2c	 sub	 esp, 44			; 0000002cH
  06264	56		 push	 esi
  06265	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 1745 : 	REQRESIZE* prr = (REQRESIZE*)pNMHDR;

  06268	8b 45 08	 mov	 eax, DWORD PTR _pNMHDR$[ebp]
  0626b	89 45 d8	 mov	 DWORD PTR _prr$[ebp], eax

; 1746 : 
; 1747 : 	CRect	promptRect;

  0626e	8d 4d f0	 lea	 ecx, DWORD PTR _promptRect$[ebp]
  06271	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1748 : 	CRect	myRect;

  06276	8d 4d e0	 lea	 ecx, DWORD PTR _myRect$[ebp]
  06279	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 1749 : 	int		nAdjust;
; 1750 : 
; 1751 : 	m_pPrompt->GetWindowRect( &promptRect );

  0627e	8d 4d f0	 lea	 ecx, DWORD PTR _promptRect$[ebp]
  06281	51		 push	 ecx
  06282	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  06285	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  0628b	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 1752 : 	ScreenToClient( &promptRect );

  06290	8d 45 f0	 lea	 eax, DWORD PTR _promptRect$[ebp]
  06293	50		 push	 eax
  06294	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  06297	e8 00 00 00 00	 call	 ?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::ScreenToClient

; 1753 : 
; 1754 : 	CWnd::GetWindowRect( &myRect );

  0629c	8d 4d e0	 lea	 ecx, DWORD PTR _myRect$[ebp]
  0629f	51		 push	 ecx
  062a0	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  062a3	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 1755 : 
; 1756 : 	nAdjust = ( prr->rc.bottom - prr->rc.top ) - promptRect.Height();

  062a8	8b 55 d8	 mov	 edx, DWORD PTR _prr$[ebp]
  062ab	8b 45 d8	 mov	 eax, DWORD PTR _prr$[ebp]
  062ae	8b 72 18	 mov	 esi, DWORD PTR [edx+24]
  062b1	2b 70 10	 sub	 esi, DWORD PTR [eax+16]
  062b4	8d 4d f0	 lea	 ecx, DWORD PTR _promptRect$[ebp]
  062b7	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  062bc	2b f0		 sub	 esi, eax
  062be	89 75 dc	 mov	 DWORD PTR _nAdjust$[ebp], esi

; 1757 : 
; 1758 : 	promptRect.bottom += nAdjust;

  062c1	8b 4d fc	 mov	 ecx, DWORD PTR _promptRect$[ebp+12]
  062c4	03 4d dc	 add	 ecx, DWORD PTR _nAdjust$[ebp]
  062c7	89 4d fc	 mov	 DWORD PTR _promptRect$[ebp+12], ecx

; 1759 : 
; 1760 : 	m_pPrompt->MoveWindow( &promptRect, false );

  062ca	6a 00		 push	 0
  062cc	8d 55 f0	 lea	 edx, DWORD PTR _promptRect$[ebp]
  062cf	52		 push	 edx
  062d0	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  062d3	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  062d9	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::MoveWindow

; 1761 : 
; 1762 : 	myRect.bottom += nAdjust;

  062de	8b 4d ec	 mov	 ecx, DWORD PTR _myRect$[ebp+12]
  062e1	03 4d dc	 add	 ecx, DWORD PTR _nAdjust$[ebp]
  062e4	89 4d ec	 mov	 DWORD PTR _myRect$[ebp+12], ecx

; 1763 : 
; 1764 : 	MoveWindow( &myRect, true );

  062e7	6a 01		 push	 1
  062e9	8d 55 e0	 lea	 edx, DWORD PTR _myRect$[ebp]
  062ec	52		 push	 edx
  062ed	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  062f0	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::MoveWindow

; 1765 : }

  062f5	5e		 pop	 esi
  062f6	8b e5		 mov	 esp, ebp
  062f8	5d		 pop	 ebp
  062f9	c2 08 00	 ret	 8
?OnResize@CLookAtItem@@QAEXPAUtagNMHDR@@PAJ@Z ENDP	; CLookAtItem::OnResize
_TEXT	ENDS
EXTRN	__imp__OffsetRect@12:NEAR
;	COMDAT ??ZCRect@@QAEXUtagPOINT@@@Z
_TEXT	SEGMENT
_point$ = 8
_this$ = -4
??ZCRect@@QAEXUtagPOINT@@@Z PROC NEAR			; CRect::operator-=, COMDAT

; 215  : 	{ ::OffsetRect(this, -point.x, -point.y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp+4]
  0000a	f7 d8		 neg	 eax
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  00010	f7 d9		 neg	 ecx
  00012	51		 push	 ecx
  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	52		 push	 edx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OffsetRect@12
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??ZCRect@@QAEXUtagPOINT@@@Z ENDP			; CRect::operator-=
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Buynode
;	COMDAT ??0?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@ABV?$allocator@PAVCLookAtItem@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8
_this$ = -4
??0?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@ABV?$allocator@PAVCLookAtItem@@@1@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::list<CLookAtItem *,std::allocator<CLookAtItem *> >, COMDAT

; 131  : 		_Head(_Buynode()), _Size(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000a	8a 08		 mov	 cl, BYTE PTR [eax]
  0000c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0000f	88 0a		 mov	 BYTE PTR [edx], cl
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Buynode
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@ABV?$allocator@PAVCLookAtItem@@@1@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::list<CLookAtItem *,std::allocator<CLookAtItem *> >
_TEXT	ENDS
PUBLIC	?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::erase
PUBLIC	?_Freenode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEXPAU_Node@12@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Freenode
;	COMDAT ??1?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T161223 = -4
$T161224 = -8
$T161225 = -12
_this$ = -16
??1?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::~list<CLookAtItem *,std::allocator<CLookAtItem *> >, COMDAT

; 151  : 		{erase(begin(), end());

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T161223[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?end@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::end
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	51		 push	 ecx
  00018	8d 55 f8	 lea	 edx, DWORD PTR $T161224[ebp]
  0001b	52		 push	 edx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?begin@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::begin
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	50		 push	 eax
  00027	8d 4d f4	 lea	 ecx, DWORD PTR $T161225[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::erase

; 152  : 		_Freenode(_Head);

  00033	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00039	50		 push	 eax
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Freenode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEXPAU_Node@12@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Freenode

; 153  : 		_Head = 0, _Size = 0; }

  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0004c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??1?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::~list<CLookAtItem *,std::allocator<CLookAtItem *> >
_TEXT	ENDS
PUBLIC	?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next
PUBLIC	??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator
;	COMDAT ?begin@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
$T161227 = -4
___$ReturnUdt$ = 8
_this$ = -8
?begin@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::begin, COMDAT

; 166  : 		{return (iterator(_Acc::_Next(_Head))); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next
  00015	83 c4 04	 add	 esp, 4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	52		 push	 edx
  0001b	8d 4d fc	 lea	 ecx, DWORD PTR $T161227[ebp]
  0001e	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
  00025	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00028	89 01		 mov	 DWORD PTR [ecx], eax
  0002a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?begin@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::begin
_TEXT	ENDS
;	COMDAT ?end@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
$T161229 = -4
___$ReturnUdt$ = 8
_this$ = -8
?end@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::end, COMDAT

; 170  : 		{return (iterator(_Head)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	51		 push	 ecx
  00010	8d 4d fc	 lea	 ecx, DWORD PTR $T161229[ebp]
  00013	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	89 10		 mov	 DWORD PTR [eax], edx
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?end@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::end
_TEXT	ENDS
;	COMDAT ?size@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4
?size@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEIXZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::size, COMDAT

; 188  : 		{return (_Size); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?size@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEIXZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::size
_TEXT	ENDS
;	COMDAT ?front@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAPAVCLookAtItem@@XZ
_TEXT	SEGMENT
_this$ = -8
$T161232 = -4
?front@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAPAVCLookAtItem@@XZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::front, COMDAT

; 196  : 		{return (*begin()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T161232[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?begin@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::begin
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEAAPAVCLookAtItem@@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator*
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?front@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAPAVCLookAtItem@@XZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::front
_TEXT	ENDS
PUBLIC	?insert@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLookAtItem@@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::insert
;	COMDAT ?push_back@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z
_TEXT	SEGMENT
_this$ = -12
__X$ = 8
$T161234 = -4
$T161235 = -8
?push_back@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::push_back, COMDAT

; 208  : 		{insert(end(), _X); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d fc	 lea	 ecx, DWORD PTR $T161234[ebp]
  00010	51		 push	 ecx
  00011	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?end@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::end
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	52		 push	 edx
  0001c	8d 45 f8	 lea	 eax, DWORD PTR $T161235[ebp]
  0001f	50		 push	 eax
  00020	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?insert@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLookAtItem@@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::insert
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?push_back@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::push_back
_TEXT	ENDS
PUBLIC	??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAV012@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++
PUBLIC	?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::erase
;	COMDAT ?remove@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z
_TEXT	SEGMENT
_this$ = -28
__L$ = -8
__F$ = -4
__V$ = 8
$T161237 = -12
$T161238 = -16
$T161239 = -20
$T161240 = -24
?remove@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::remove, COMDAT

; 278  : 		{iterator _L = end();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 45 f4	 lea	 eax, DWORD PTR $T161237[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?end@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::end
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	89 4d f8	 mov	 DWORD PTR __L$[ebp], ecx

; 279  : 		for (iterator _F = begin(); _F != _L; )

  0001a	8d 55 f0	 lea	 edx, DWORD PTR $T161238[ebp]
  0001d	52		 push	 edx
  0001e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?begin@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::begin
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	89 45 fc	 mov	 DWORD PTR __F$[ebp], eax
$L155664:
  0002b	8d 4d f8	 lea	 ecx, DWORD PTR __L$[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d fc	 lea	 ecx, DWORD PTR __F$[ebp]
  00032	e8 00 00 00 00	 call	 ??9iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator!=
  00037	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0003c	85 c0		 test	 eax, eax
  0003e	74 3a		 je	 SHORT $L155665

; 280  : 			if (*_F == _V)

  00040	8d 4d fc	 lea	 ecx, DWORD PTR __F$[ebp]
  00043	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEAAPAVCLookAtItem@@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator*
  00048	8b 55 08	 mov	 edx, DWORD PTR __V$[ebp]
  0004b	8b 00		 mov	 eax, DWORD PTR [eax]
  0004d	3b 02		 cmp	 eax, DWORD PTR [edx]
  0004f	75 1f		 jne	 SHORT $L155666

; 281  : 				erase(_F++);

  00051	6a 00		 push	 0
  00053	8d 4d ec	 lea	 ecx, DWORD PTR $T161239[ebp]
  00056	51		 push	 ecx
  00057	8d 4d fc	 lea	 ecx, DWORD PTR __F$[ebp]
  0005a	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AV012@H@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	52		 push	 edx
  00062	8d 45 e8	 lea	 eax, DWORD PTR $T161240[ebp]
  00065	50		 push	 eax
  00066	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::erase

; 282  : 			else

  0006e	eb 08		 jmp	 SHORT $L155669
$L155666:

; 283  : 				++_F; }

  00070	8d 4d fc	 lea	 ecx, DWORD PTR __F$[ebp]
  00073	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAV012@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++
$L155669:
  00078	eb b1		 jmp	 SHORT $L155664
$L155665:
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?remove@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEXABQAVCLookAtItem@@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::remove
_TEXT	ENDS
PUBLIC	??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::const_iterator
;	COMDAT ??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator, COMDAT

; 96   : 		iterator()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::const_iterator
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?_Value@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAVCLookAtItem@@PAU_Node@23@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Value
;	COMDAT ??Diterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEAAPAVCLookAtItem@@XZ
_TEXT	SEGMENT
_this$ = -4
??Diterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEAAPAVCLookAtItem@@XZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator*, COMDAT

; 101  : 			{return (_Acc::_Value(_Ptr)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?_Value@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAVCLookAtItem@@PAU_Node@23@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Value
  00012	83 c4 04	 add	 esp, 4
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??Diterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEAAPAVCLookAtItem@@XZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator*
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
__Tmp$ = -4
??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++, COMDAT

; 108  : 			{iterator _Tmp = *this;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 109  : 			++*this;

  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAV012@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++

; 110  : 			return (_Tmp); }

  00019	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR __Tmp$[ebp]
  0001f	89 02		 mov	 DWORD PTR [edx], eax
  00021	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??8iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator==
;	COMDAT ??9iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
??9iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator!=, COMDAT

; 121  : 			{return (!(*this == _X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??8iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator==
  00013	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00018	f7 d8		 neg	 eax
  0001a	1b c0		 sbb	 eax, eax
  0001c	40		 inc	 eax
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??9iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator!=
_TEXT	ENDS
EXTRN	?MoveWindow@CWnd@@QAEXHHHHH@Z:NEAR		; CWnd::MoveWindow
;	COMDAT ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z
_TEXT	SEGMENT
_lpRect$ = 8
_bRepaint$ = 12
_this$ = -4
?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z PROC NEAR		; CWnd::MoveWindow, COMDAT

; 80   : 	{ MoveWindow(lpRect->left, lpRect->top, lpRect->right - lpRect->left,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 		lpRect->bottom - lpRect->top, bRepaint); }

  00007	8b 45 0c	 mov	 eax, DWORD PTR _bRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _lpRect$[ebp]
  00011	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00014	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _lpRect$[ebp]
  0001e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00021	2b 02		 sub	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  00027	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXHHHHH@Z ; CWnd::MoveWindow
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ENDP		; CWnd::MoveWindow
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_lpRect$ = 8
_this$ = -4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z PROC NEAR	; CWnd::GetWindowRect, COMDAT

; 96   : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetWindowRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetWindowRect
_TEXT	ENDS
EXTRN	?Default@CWnd@@IAEJXZ:NEAR			; CWnd::Default
;	COMDAT ?OnChar@CWnd@@IAEXIII@Z
_TEXT	SEGMENT
_this$ = -4
?OnChar@CWnd@@IAEXIII@Z PROC NEAR			; CWnd::OnChar, COMDAT

; 436  : 	{ Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?OnChar@CWnd@@IAEXIII@Z ENDP				; CWnd::OnChar
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
_this$ = -4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC NEAR ; CWnd::DoDataExchange, COMDAT

; 519  : 	{ } // default does nothing

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
EXTRN	__imp__EnableWindow@8:NEAR
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?BeginModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::BeginModalState, COMDAT

; 523  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?EndModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::EndModalState, COMDAT

; 525  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@ABQAV3@@Z ; std::allocator<CLookAtItem *>::construct
PUBLIC	?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
PUBLIC	?_Mynode@const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEPAU_Node@23@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::_Mynode
;	COMDAT ?insert@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLookAtItem@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
__S$ = -4
__P$ = 12
__X$ = 16
$T161252 = -8
?insert@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLookAtItem@@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::insert, COMDAT

; 218  : 		{_Nodeptr _S = _P._Mynode();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	8d 4d 0c	 lea	 ecx, DWORD PTR __P$[ebp]
  0000d	e8 00 00 00 00	 call	 ?_Mynode@const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEPAU_Node@23@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::_Mynode
  00012	89 45 fc	 mov	 DWORD PTR __S$[ebp], eax

; 219  : 		_Acc::_Prev(_S) = _Buynode(_S, _Acc::_Prev(_S));

  00015	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
  0001e	83 c4 04	 add	 esp, 4
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	51		 push	 ecx
  00024	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  00027	52		 push	 edx
  00028	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Buynode
  00030	8b f0		 mov	 esi, eax
  00032	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 30		 mov	 DWORD PTR [eax], esi

; 220  : 		_S = _Acc::_Prev(_S);

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 10		 mov	 edx, DWORD PTR [eax]
  0004e	89 55 fc	 mov	 DWORD PTR __S$[ebp], edx

; 221  : 		_Acc::_Next(_Acc::_Prev(_S)) = _S;

  00051	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
  0005a	83 c4 04	 add	 esp, 4
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next
  00065	83 c4 04	 add	 esp, 4
  00068	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  0006b	89 10		 mov	 DWORD PTR [eax], edx

; 222  : 		allocator.construct(&_Acc::_Value(_S), _X);

  0006d	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  00070	50		 push	 eax
  00071	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ?_Value@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAVCLookAtItem@@PAU_Node@23@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Value
  0007a	83 c4 04	 add	 esp, 4
  0007d	50		 push	 eax
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	e8 00 00 00 00	 call	 ?construct@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@ABQAV3@@Z ; std::allocator<CLookAtItem *>::construct

; 223  : 		++_Size;

  00086	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00089	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008c	83 c0 01	 add	 eax, 1
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 224  : 		return (iterator(_S)); }

  00095	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  00098	52		 push	 edx
  00099	8d 4d f8	 lea	 ecx, DWORD PTR $T161252[ebp]
  0009c	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator
  000a1	8b 00		 mov	 eax, DWORD PTR [eax]
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a6	89 01		 mov	 DWORD PTR [ecx], eax
  000a8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLookAtItem@@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::insert
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@@Z ; std::allocator<CLookAtItem *>::destroy
;	COMDAT ?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
__S$ = -4
__P$ = 12
$T161254 = -8
?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::erase, COMDAT

; 235  : 		{_Nodeptr _S = (_P++)._Mynode();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	6a 00		 push	 0
  0000c	8d 45 f8	 lea	 eax, DWORD PTR $T161254[ebp]
  0000f	50		 push	 eax
  00010	8d 4d 0c	 lea	 ecx, DWORD PTR __P$[ebp]
  00013	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AV012@H@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 ?_Mynode@const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEPAU_Node@23@XZ ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::_Mynode
  0001f	89 45 fc	 mov	 DWORD PTR __S$[ebp], eax

; 236  : 		_Acc::_Next(_Acc::_Prev(_S)) = _Acc::_Next(_S);

  00022	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next
  0002b	83 c4 04	 add	 esp, 4
  0002e	8b f0		 mov	 esi, eax
  00030	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
  00039	83 c4 04	 add	 esp, 4
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next
  00044	83 c4 04	 add	 esp, 4
  00047	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00049	89 08		 mov	 DWORD PTR [eax], ecx

; 237  : 		_Acc::_Prev(_Acc::_Next(_S)) = _Acc::_Prev(_S);

  0004b	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
  00054	83 c4 04	 add	 esp, 4
  00057	8b f0		 mov	 esi, eax
  00059	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next
  00062	83 c4 04	 add	 esp, 4
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
  0006d	83 c4 04	 add	 esp, 4
  00070	8b 16		 mov	 edx, DWORD PTR [esi]
  00072	89 10		 mov	 DWORD PTR [eax], edx

; 238  : 		allocator.destroy(&_Acc::_Value(_S));

  00074	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?_Value@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAVCLookAtItem@@PAU_Node@23@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Value
  0007d	83 c4 04	 add	 esp, 4
  00080	50		 push	 eax
  00081	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?destroy@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@@Z ; std::allocator<CLookAtItem *>::destroy

; 239  : 		_Freenode(_S);

  00089	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ?_Freenode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEXPAU_Node@12@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Freenode

; 240  : 		--_Size;

  00095	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00098	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0009b	83 e8 01	 sub	 eax, 1
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 241  : 		return (_P); }

  000a4	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  000a7	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  000aa	89 02		 mov	 DWORD PTR [edx], eax
  000ac	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000af	5e		 pop	 esi
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::erase
_TEXT	ENDS
;	COMDAT ?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
__F$ = 12
__L$ = 16
$T161256 = -4
$T161257 = -8
?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::erase, COMDAT

; 243  : 		{while (_F != _L)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
$L156920:
  00009	8d 45 10	 lea	 eax, DWORD PTR __L$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d 0c	 lea	 ecx, DWORD PTR __F$[ebp]
  00010	e8 00 00 00 00	 call	 ??9iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator!=
  00015	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001a	85 c0		 test	 eax, eax
  0001c	74 1f		 je	 SHORT $L156921

; 244  : 			erase(_F++);

  0001e	6a 00		 push	 0
  00020	8d 4d fc	 lea	 ecx, DWORD PTR $T161256[ebp]
  00023	51		 push	 ecx
  00024	8d 4d 0c	 lea	 ecx, DWORD PTR __F$[ebp]
  00027	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AV012@H@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++
  0002c	8b 10		 mov	 edx, DWORD PTR [eax]
  0002e	52		 push	 edx
  0002f	8d 45 f8	 lea	 eax, DWORD PTR $T161257[ebp]
  00032	50		 push	 eax
  00033	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::erase
  0003b	eb cc		 jmp	 SHORT $L156920
$L156921:

; 245  : 		return (_F); }

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00040	8b 55 0c	 mov	 edx, DWORD PTR __F$[ebp]
  00043	89 11		 mov	 DWORD PTR [ecx], edx
  00045	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::erase
_TEXT	ENDS
PUBLIC	?_Charalloc@?$allocator@PAVCLookAtItem@@@std@@QAEPADI@Z ; std::allocator<CLookAtItem *>::_Charalloc
;	COMDAT ?_Buynode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z
_TEXT	SEGMENT
_this$ = -8
__S$ = -4
__Narg$ = 8
__Parg$ = 12
?_Buynode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Buynode, COMDAT

; 386  : 		{_Nodeptr _S = (_Nodeptr)allocator._Charalloc(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 387  : 			1 * sizeof (_Node));

  00009	6a 0c		 push	 12			; 0000000cH
  0000b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?_Charalloc@?$allocator@PAVCLookAtItem@@@std@@QAEPADI@Z ; std::allocator<CLookAtItem *>::_Charalloc
  00013	89 45 fc	 mov	 DWORD PTR __S$[ebp], eax

; 388  : 		_Acc::_Next(_S) = _Narg != 0 ? _Narg : _S;

  00016	83 7d 08 00	 cmp	 DWORD PTR __Narg$[ebp], 0
  0001a	74 08		 je	 SHORT $L161259
  0001c	8b 45 08	 mov	 eax, DWORD PTR __Narg$[ebp]
  0001f	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  00022	eb 06		 jmp	 SHORT $L161260
$L161259:
  00024	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00027	89 4d f4	 mov	 DWORD PTR -12+[ebp], ecx
$L161260:
  0002a	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next
  00033	83 c4 04	 add	 esp, 4
  00036	8b 4d f4	 mov	 ecx, DWORD PTR -12+[ebp]
  00039	89 08		 mov	 DWORD PTR [eax], ecx

; 389  : 		_Acc::_Prev(_S) = _Parg != 0 ? _Parg : _S;

  0003b	83 7d 0c 00	 cmp	 DWORD PTR __Parg$[ebp], 0
  0003f	74 08		 je	 SHORT $L161261
  00041	8b 55 0c	 mov	 edx, DWORD PTR __Parg$[ebp]
  00044	89 55 f0	 mov	 DWORD PTR -16+[ebp], edx
  00047	eb 06		 jmp	 SHORT $L161262
$L161261:
  00049	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  0004c	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
$L161262:
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
  00058	83 c4 04	 add	 esp, 4
  0005b	8b 55 f0	 mov	 edx, DWORD PTR -16+[ebp]
  0005e	89 10		 mov	 DWORD PTR [eax], edx

; 390  : 		return (_S); }

  00060	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
?_Buynode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Buynode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCLookAtItem@@@std@@QAEXPAXI@Z ; std::allocator<CLookAtItem *>::deallocate
;	COMDAT ?_Freenode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEXPAU_Node@12@@Z
_TEXT	SEGMENT
_this$ = -4
__S$ = 8
?_Freenode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEXPAU_Node@12@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Freenode, COMDAT

; 392  : 		{allocator.deallocate(_S, 1); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 08	 mov	 eax, DWORD PTR __S$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCLookAtItem@@@std@@QAEXPAXI@Z ; std::allocator<CLookAtItem *>::deallocate
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Freenode@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@IAEXPAU_Node@12@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Freenode
_TEXT	ENDS
;	COMDAT ?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z
_TEXT	SEGMENT
__P$ = 8
?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next, COMDAT

; 37   : 			{return ((_Nodepref)(*_P)._Next); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next
_TEXT	ENDS
;	COMDAT ?_Value@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAVCLookAtItem@@PAU_Node@23@@Z
_TEXT	SEGMENT
__P$ = 8
?_Value@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAVCLookAtItem@@PAU_Node@23@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Value, COMDAT

; 41   : 			{return ((_Vref)(*_P)._Value); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00006	83 c0 08	 add	 eax, 8
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Value@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAVCLookAtItem@@PAU_Node@23@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Value
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::const_iterator, COMDAT

; 59   : 		const_iterator()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@XZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::const_iterator
;	COMDAT ??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator, COMDAT

; 98   : 		iterator(_Nodeptr _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::const_iterator
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::iterator
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4
??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++, COMDAT

; 105  : 			{_Ptr = _Acc::_Next(_Ptr);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Next
  00012	83 c4 04	 add	 esp, 4
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 00		 mov	 eax, DWORD PTR [eax]
  0001a	89 02		 mov	 DWORD PTR [edx], eax

; 106  : 			return (*this); }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??Eiterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator++
_TEXT	ENDS
;	COMDAT ??8iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__X$ = 8
_this$ = -4
??8iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator==, COMDAT

; 119  : 			{return (_Ptr == _X._Ptr); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __X$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	33 c0		 xor	 eax, eax
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	0f 94 c0	 sete	 al
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??8iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::iterator::operator==
_TEXT	ENDS
;	COMDAT ?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z
_TEXT	SEGMENT
__P$ = 8
?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev, COMDAT

; 39   : 			{return ((_Nodepref)(*_P)._Prev); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00006	83 c0 04	 add	 eax, 4
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prev@_Acc@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::_Acc::_Prev
_TEXT	ENDS
PUBLIC	?_Allocate@std@@YAPADHPAD@Z			; std::_Allocate
;	COMDAT ?_Charalloc@?$allocator@PAVCLookAtItem@@@std@@QAEPADI@Z
_TEXT	SEGMENT
__N$ = 8
_this$ = -4
?_Charalloc@?$allocator@PAVCLookAtItem@@@std@@QAEPADI@Z PROC NEAR ; std::allocator<CLookAtItem *>::_Charalloc, COMDAT

; 61   : 		{return (_Allocate((difference_type)_N,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 			(char _FARQ *)0)); }

  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPADHPAD@Z ; std::_Allocate
  00012	83 c4 08	 add	 esp, 8
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Charalloc@?$allocator@PAVCLookAtItem@@@std@@QAEPADI@Z ENDP ; std::allocator<CLookAtItem *>::_Charalloc
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCLookAtItem@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
?deallocate@?$allocator@PAVCLookAtItem@@@std@@QAEXPAXI@Z PROC NEAR ; std::allocator<CLookAtItem *>::deallocate, COMDAT

; 64   : 		{operator delete(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCLookAtItem@@@std@@QAEXPAXI@Z ENDP ; std::allocator<CLookAtItem *>::deallocate
_TEXT	ENDS
PUBLIC	?_Construct@std@@YAXPAPAVCLookAtItem@@ABQAV2@@Z	; std::_Construct
;	COMDAT ?construct@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@ABQAV3@@Z
_TEXT	SEGMENT
__P$ = 8
__V$ = 12
_this$ = -4
?construct@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@ABQAV3@@Z PROC NEAR ; std::allocator<CLookAtItem *>::construct, COMDAT

; 66   : 		{_Construct(_P, _V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __V$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?_Construct@std@@YAXPAPAVCLookAtItem@@ABQAV2@@Z ; std::_Construct
  00014	83 c4 08	 add	 esp, 8
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?construct@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@ABQAV3@@Z ENDP ; std::allocator<CLookAtItem *>::construct
_TEXT	ENDS
PUBLIC	?_Destroy@std@@YAXPAPAVCLookAtItem@@@Z		; std::_Destroy
;	COMDAT ?destroy@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
?destroy@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@@Z PROC NEAR ; std::allocator<CLookAtItem *>::destroy, COMDAT

; 68   : 		{_Destroy(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?_Destroy@std@@YAXPAPAVCLookAtItem@@@Z ; std::_Destroy
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?destroy@?$allocator@PAVCLookAtItem@@@std@@QAEXPAPAVCLookAtItem@@@Z ENDP ; std::allocator<CLookAtItem *>::destroy
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::const_iterator, COMDAT

; 61   : 		const_iterator(_Nodeptr _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QAE@PAU_Node@12@@Z ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::const_iterator
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEPAU_Node@23@XZ
_TEXT	SEGMENT
_this$ = -4
?_Mynode@const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEPAU_Node@23@XZ PROC NEAR ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::_Mynode, COMDAT

; 88   : 			{return (_Ptr); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?_Mynode@const_iterator@?$list@PAVCLookAtItem@@V?$allocator@PAVCLookAtItem@@@std@@@std@@QBEPAU_Node@23@XZ ENDP ; std::list<CLookAtItem *,std::allocator<CLookAtItem *> >::const_iterator::_Mynode
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT
__N$ = 8
?_Allocate@std@@YAPADHPAD@Z PROC NEAR			; std::_Allocate, COMDAT

; 27   : 	{if (_N < 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR __N$[ebp], 0
  00007	7d 07		 jge	 SHORT $L157786

; 28   : 		_N = 0;

  00009	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __N$[ebp], 0
$L157786:

; 30   : 		(_SIZT)_N * sizeof (_Ty))); }

  00010	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Allocate@std@@YAPADHPAD@Z ENDP			; std::_Allocate
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT ?_Construct@std@@YAXPAPAVCLookAtItem@@ABQAV2@@Z
_TEXT	SEGMENT
$T161279 = -4
__P$ = 8
__V$ = 12
?_Construct@std@@YAXPAPAVCLookAtItem@@ABQAV2@@Z PROC NEAR ; std::_Construct, COMDAT

; 34   : 	{new ((void _FARQ *)_P) _T1(_V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00009	50		 push	 eax
  0000a	6a 04		 push	 4
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR $T161279[ebp], eax
  00017	83 7d fc 00	 cmp	 DWORD PTR $T161279[ebp], 0
  0001b	74 12		 je	 SHORT $L161280
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR $T161279[ebp]
  00020	8b 55 0c	 mov	 edx, DWORD PTR __V$[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	89 01		 mov	 DWORD PTR [ecx], eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR $T161279[ebp]
  0002a	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
  0002d	eb 07		 jmp	 SHORT $L161281
$L161280:
  0002f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L161281:
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?_Construct@std@@YAXPAPAVCLookAtItem@@ABQAV2@@Z ENDP	; std::_Construct
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCLookAtItem@@@Z
_TEXT	SEGMENT
?_Destroy@std@@YAXPAPAVCLookAtItem@@@Z PROC NEAR	; std::_Destroy, COMDAT

; 38   : 	{_DESTRUCTOR(_Ty, _P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?_Destroy@std@@YAXPAPAVCLookAtItem@@@Z ENDP		; std::_Destroy
_TEXT	ENDS
;	COMDAT ??_ECBioLine@@WGA@AEPAXI@Z
_TEXT	SEGMENT
??_ECBioLine@@WGA@AEPAXI@Z PROC NEAR			; CBioLine::`vector deleting destructor', COMDAT
  00000	83 e9 60	 sub	 ecx, 96			; 00000060H
  00003	e9 00 00 00 00	 jmp	 ??_ECBioLine@@UAEPAXI@Z	; CBioLine::`vector deleting destructor'
??_ECBioLine@@WGA@AEPAXI@Z ENDP				; CBioLine::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT ??_ECBioLine@@WHE@AEPAXI@Z
_TEXT	SEGMENT
??_ECBioLine@@WHE@AEPAXI@Z PROC NEAR			; CBioLine::`vector deleting destructor', COMDAT
  00000	83 e9 74	 sub	 ecx, 116		; 00000074H
  00003	e9 00 00 00 00	 jmp	 ??_ECBioLine@@UAEPAXI@Z	; CBioLine::`vector deleting destructor'
??_ECBioLine@@WHE@AEPAXI@Z ENDP				; CBioLine::`vector deleting destructor'
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
;	COMDAT ?GetLineCount@CRichEditCtrl@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetLineCount@CRichEditCtrl@@QBEHXZ PROC NEAR		; CRichEditCtrl::GetLineCount, COMDAT

; 605  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int)::SendMessage(m_hWnd, EM_GETLINECOUNT, 0, 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 ba 00 00 00	 push	 186			; 000000baH
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetLineCount@CRichEditCtrl@@QBEHXZ ENDP		; CRichEditCtrl::GetLineCount
_TEXT	ENDS
;	COMDAT ?LimitText@CRichEditCtrl@@QAEXJ@Z
_TEXT	SEGMENT
_nChars$ = 8
_this$ = -4
?LimitText@CRichEditCtrl@@QAEXJ@Z PROC NEAR		; CRichEditCtrl::LimitText, COMDAT

; 642  : 	{ ASSERT(::IsWindow(m_hWnd)); ::SendMessage(m_hWnd, EM_EXLIMITTEXT, 0, nChars); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nChars$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 35 04 00 00	 push	 1077			; 00000435H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?LimitText@CRichEditCtrl@@QAEXJ@Z ENDP			; CRichEditCtrl::LimitText
_TEXT	ENDS
;	COMDAT ?GetLimitText@CRichEditCtrl@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?GetLimitText@CRichEditCtrl@@QBEJXZ PROC NEAR		; CRichEditCtrl::GetLimitText, COMDAT

; 660  : 	{ ASSERT(::IsWindow(m_hWnd)); return (long)::SendMessage(m_hWnd, EM_GETLIMITTEXT, 0, 0L); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 d5 00 00 00	 push	 213			; 000000d5H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetLimitText@CRichEditCtrl@@QBEJXZ ENDP		; CRichEditCtrl::GetLimitText
_TEXT	ENDS
;	COMDAT ?RequestResize@CRichEditCtrl@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?RequestResize@CRichEditCtrl@@QAEXXZ PROC NEAR		; CRichEditCtrl::RequestResize, COMDAT

; 669  : 	{ ASSERT(::IsWindow(m_hWnd)); ::SendMessage(m_hWnd, EM_REQUESTRESIZE, 0, 0L); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 41 04 00 00	 push	 1089			; 00000441H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?RequestResize@CRichEditCtrl@@QAEXXZ ENDP		; CRichEditCtrl::RequestResize
_TEXT	ENDS
;	COMDAT ?SetEventMask@CRichEditCtrl@@QAEKK@Z
_TEXT	SEGMENT
_dwEventMask$ = 8
_this$ = -4
?SetEventMask@CRichEditCtrl@@QAEKK@Z PROC NEAR		; CRichEditCtrl::SetEventMask, COMDAT

; 678  : 	{ ASSERT(::IsWindow(m_hWnd)); return (DWORD)::SendMessage(m_hWnd, EM_SETEVENTMASK, 0, dwEventMask); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _dwEventMask$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 45 04 00 00	 push	 1093			; 00000445H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetEventMask@CRichEditCtrl@@QAEKK@Z ENDP		; CRichEditCtrl::SetEventMask
_TEXT	ENDS
;	COMDAT ?GetTextLength@CRichEditCtrl@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?GetTextLength@CRichEditCtrl@@QBEJXZ PROC NEAR		; CRichEditCtrl::GetTextLength, COMDAT

; 696  : 	{ ASSERT(::IsWindow(m_hWnd)); return (long)::SendMessage(m_hWnd, WM_GETTEXTLENGTH, NULL, NULL); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 0e		 push	 14			; 0000000eH
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00013	51		 push	 ecx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?GetTextLength@CRichEditCtrl@@QBEJXZ ENDP		; CRichEditCtrl::GetTextLength
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__P$ = 12
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 42   : 	{return (_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??8MemID@@QBEHABV0@@Z PROC NEAR				; MemID::operator==, COMDAT

; 108  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 		return handle == id.handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _id$[ebp]
  00012	33 c0		 xor	 eax, eax
  00014	66 8b 02	 mov	 ax, WORD PTR [edx]
  00017	33 d2		 xor	 edx, edx
  00019	3b c8		 cmp	 ecx, eax
  0001b	0f 94 c2	 sete	 dl
  0001e	8b c2		 mov	 eax, edx

; 110  : 	}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??8MemID@@QBEHABV0@@Z ENDP				; MemID::operator==
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@ABVMemID@@@Z		; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ObjectID@@QAE@ABV0@@Z PROC NEAR			; ObjectID::ObjectID, COMDAT

; 229  : 	ObjectID(const ObjectID& id) : FakeObjectID((MemID&) id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@ABVMemID@@@Z ; FakeObjectID::FakeObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ObjectID@@QAE@ABV0@@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0FakeObjectID@@QAE@ABVMemID@@@Z PROC NEAR		; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@ABVMemID@@@Z ENDP			; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	?IsValid@MemID@@QBEHXZ				; MemID::IsValid
EXTRN	?GetMemType@MemID@@QBE?AW4MemType@@XZ:NEAR	; MemID::GetMemType
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsObject@ObjectID@@QBEHXZ PROC NEAR			; ObjectID::IsObject, COMDAT

; 247  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 		return IsValid() && GetMemType() == MemObject;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00011	85 c0		 test	 eax, eax
  00013	74 16		 je	 SHORT $L161299
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0001d	83 f8 34	 cmp	 eax, 52			; 00000034H
  00020	75 09		 jne	 SHORT $L161299
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  00029	eb 07		 jmp	 SHORT $L161300
$L161299:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L161300:
  00032	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 249  : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?IsObject@ObjectID@@QBEHXZ ENDP				; ObjectID::IsObject
_TEXT	ENDS
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
EXTRN	_memMgr:DWORD
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@MemID@@QBEHXZ PROC NEAR			; MemID::IsValid, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return memMgr->IsValid(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid

; 64   : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IsValid@MemID@@QBEHXZ ENDP				; MemID::IsValid
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L161303
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L161303
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L161303
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L161303
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L161304
$L161303:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L161304:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0StringID@@QAE@ABVMemID@@@Z PROC NEAR			; StringID::StringID, COMDAT

; 58   : 	StringID ( const MemID &id ) : MemID ( id ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0StringID@@QAE@ABVMemID@@@Z ENDP			; StringID::StringID
_TEXT	ENDS
PUBLIC	??CFakeObjectID@@QBEPAUObject@@XZ		; FakeObjectID::operator->
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
PUBLIC	??DTextID@@QAEPADXZ				; TextID::operator*
PUBLIC	?GetProperty@Object@@QAEFG@Z			; Object::GetProperty
EXTRN	??0TextID@@QAE@G@Z:NEAR				; TextID::TextID
;	COMDAT ??DStringID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -16
_obj$ = -4
$T161307 = -8
$T161308 = -12
??DStringID@@QAEPADXZ PROC NEAR				; StringID::operator*, COMDAT

; 63   : 	char * operator *() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 		ObjectID obj ( handle );

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	51		 push	 ecx
  00010	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  00013	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 65   : 
; 66   : 		if ( obj.IsObject() ) {

  00018	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  0001b	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  00020	85 c0		 test	 eax, eax
  00022	74 23		 je	 SHORT $L117151

; 67   : 			return *(TextID)obj->GetProperty ( s_data );

  00024	6a 71		 push	 113			; 00000071H
  00026	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  00029	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0002e	8b c8		 mov	 ecx, eax
  00030	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty
  00035	50		 push	 eax
  00036	8d 4d f8	 lea	 ecx, DWORD PTR $T161307[ebp]
  00039	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00045	eb 16		 jmp	 SHORT $L117149
$L117151:

; 69   : 
; 70   : 		return *(TextID)handle;

  00047	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	66 8b 02	 mov	 ax, WORD PTR [edx]
  0004d	50		 push	 eax
  0004e	8d 4d f4	 lea	 ecx, DWORD PTR $T161308[ebp]
  00051	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
$L117149:

; 71   : 	}

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??DStringID@@QAEPADXZ ENDP				; StringID::operator*
_TEXT	ENDS
PUBLIC	?GetPropAddrCheck@Object@@QAEPAFG@Z		; Object::GetPropAddrCheck
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT
_this$ = -4
_selector$ = 8
?GetProperty@Object@@QAEFG@Z PROC NEAR			; Object::GetProperty, COMDAT

; 170  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		//	get a property given a selector
; 172  : 		return *GetPropAddrCheck(selector);

  00007	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00014	66 8b 00	 mov	 ax, WORD PTR [eax]

; 173  : 	}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetProperty@Object@@QAEFG@Z ENDP			; Object::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddr@Object@@QAEPAFG@Z			; Object::GetPropAddr
EXTRN	?Fatal@MsgMgr@@QAAXHZZ:NEAR			; MsgMgr::Fatal
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_this$ = -8
_property$ = -4
_selector$ = 8
?GetPropAddrCheck@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddrCheck, COMDAT

; 153  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 		//	get a property's address, checking for valid property
; 155  : 		Property* property = GetPropAddr(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddr@Object@@QAEPAFG@Z ; Object::GetPropAddr
  00016	89 45 fc	 mov	 DWORD PTR _property$[ebp], eax

; 156  : 		if (!property)

  00019	83 7d fc 00	 cmp	 DWORD PTR _property$[ebp], 0
  0001d	75 1b		 jne	 SHORT $L116767

; 157  : 			msgMgr->Fatal(Msg_InvalidProperty, selector);

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _selector$[ebp]
  00022	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00028	51		 push	 ecx
  00029	6a 29		 push	 41			; 00000029H
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
$L116767:

; 158  : 		return property;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _property$[ebp]

; 159  : 	}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetPropAddrCheck@Object@@QAEPAFG@Z ENDP		; Object::GetPropAddrCheck
_TEXT	ENDS
PUBLIC	?selectorDict@Object@@QAEPAVSelectorDict@@XZ	; Object::selectorDict
PUBLIC	??AObject@@QAEAAFH@Z				; Object::operator[]
EXTRN	?get@SelectorDict@@QAEHG@Z:NEAR			; SelectorDict::get
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_this$ = -8
_index$ = -4
_selector$ = 8
?GetPropAddr@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddr, COMDAT

; 127  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 		int index = selectorDict()->get ( selector );

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?get@SelectorDict@@QAEHG@Z ; SelectorDict::get
  0001d	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 129  : 
; 130  : 		if ( index != -1 && !selectorDict()->script )

  00020	83 7d fc ff	 cmp	 DWORD PTR _index$[ebp], -1
  00024	74 2b		 je	 SHORT $L116758
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  0002e	33 c9		 xor	 ecx, ecx
  00030	66 8b 48 16	 mov	 cx, WORD PTR [eax+22]
  00034	85 c9		 test	 ecx, ecx
  00036	75 19		 jne	 SHORT $L116758

; 131  : 			return &(*this)[selectorDict()->offset]; 

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00040	33 d2		 xor	 edx, edx
  00042	66 8b 50 14	 mov	 dx, WORD PTR [eax+20]
  00046	52		 push	 edx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ??AObject@@QAEAAFH@Z	; Object::operator[]
  0004f	eb 02		 jmp	 SHORT $L116756
$L116758:

; 132  : 
; 133  : 		return 0;

  00051	33 c0		 xor	 eax, eax
$L116756:

; 134  : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?GetPropAddr@Object@@QAEPAFG@Z ENDP			; Object::GetPropAddr
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT
_this$ = -4
?selectorDict@Object@@QAEPAVSelectorDict@@XZ PROC NEAR	; Object::selectorDict, COMDAT

; 102  : 	SelectorDict *selectorDict ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 		return _selectorDict;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 104  : 	};

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?selectorDict@Object@@QAEPAVSelectorDict@@XZ ENDP	; Object::selectorDict
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT
_this$ = -4
_index$ = 8
??AObject@@QAEAAFH@Z PROC NEAR				; Object::operator[], COMDAT

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		//	get a reference to a property given the number of the property
; 119  : 		return ((Property*) this)[index];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 120  : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??AObject@@QAEAAFH@Z ENDP				; Object::operator[]
_TEXT	ENDS
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeObjectID@@QBEPAUObject@@XZ PROC NEAR		; FakeObjectID::operator->, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeObjectID@@QBEPAUObject@@XZ ENDP			; FakeObjectID::operator->
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\textid.hpp
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4
??DTextID@@QAEPADXZ PROC NEAR				; TextID::operator*, COMDAT

; 24   : 	char	*operator *() { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return handle ? (char *)MemID::operator*() : ""; 

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	33 c9		 xor	 ecx, ecx
  0000e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0d		 je	 SHORT $L161320
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0001d	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00020	eb 07		 jmp	 SHORT $L161321
$L161320:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L161321:
  00029	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 26   : 	}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??DTextID@@QAEPADXZ ENDP				; TextID::operator*
_TEXT	ENDS
PUBLIC	??0CSCI_Collection@@QAE@G@Z			; CSCI_Collection::CSCI_Collection
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_List@@QAE@G@Z PROC NEAR				; CSCI_List::CSCI_List, COMDAT

; 117  : 	CSCI_List(SOL_Handle h) : CSCI_Collection(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Collection@@QAE@G@Z ; CSCI_Collection::CSCI_Collection
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_List@@QAE@G@Z ENDP				; CSCI_List::CSCI_List
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@G@Z				; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Collection@@QAE@G@Z PROC NEAR			; CSCI_Collection::CSCI_Collection, COMDAT

; 84   : 	CSCI_Collection(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Collection@@QAE@G@Z ENDP			; CSCI_Collection::CSCI_Collection
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Object@@QAE@G@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 13   : 	CSCI_Object(SOL_Handle h) : ObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@G@Z ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	??0CSCI_Array@@QAE@G@Z				; CSCI_Array::CSCI_Array
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_ByteArray@@QAE@G@Z PROC NEAR			; CSCI_ByteArray::CSCI_ByteArray, COMDAT

; 508  : 	CSCI_ByteArray(SOL_Handle h) : CSCI_Array(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Array@@QAE@G@Z	; CSCI_Array::CSCI_Array
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_ByteArray@@QAE@G@Z ENDP				; CSCI_ByteArray::CSCI_ByteArray
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Array@@QAE@G@Z PROC NEAR			; CSCI_Array::CSCI_Array, COMDAT

; 460  : 	CSCI_Array(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Array@@QAE@G@Z ENDP				; CSCI_Array::CSCI_Array
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_LongInt@@QAE@G@Z PROC NEAR			; CSCI_LongInt::CSCI_LongInt, COMDAT

; 724  : 	CSCI_LongInt(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_LongInt@@QAE@G@Z ENDP				; CSCI_LongInt::CSCI_LongInt
_TEXT	ENDS
PUBLIC	?get_lowWord@CSCI_LongInt@@QAEFXZ		; CSCI_LongInt::get_lowWord
PUBLIC	?get_hiWord@CSCI_LongInt@@QAEFXZ		; CSCI_LongInt::get_hiWord
;	COMDAT ?get_nValue@CSCI_LongInt@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?get_nValue@CSCI_LongInt@@QAEHXZ PROC NEAR		; CSCI_LongInt::get_nValue, COMDAT

; 732  : 	int get_nValue() { return ( ( ((int) get_hiWord()) << 16) + ( (int) get_lowWord() & 0x0000ffff ) ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?get_hiWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_hiWord
  00010	0f bf f0	 movsx	 esi, ax
  00013	c1 e6 10	 shl	 esi, 16			; 00000010H
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?get_lowWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_lowWord
  0001e	0f bf c0	 movsx	 eax, ax
  00021	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00026	03 c6		 add	 eax, esi
  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?get_nValue@CSCI_LongInt@@QAEHXZ ENDP			; CSCI_LongInt::get_nValue
_TEXT	ENDS
PUBLIC	?GetProperty@ObjectID@@QBEFG@Z			; ObjectID::GetProperty
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_lowWord@CSCI_LongInt@@QAEFXZ PROC NEAR		; CSCI_LongInt::get_lowWord, COMDAT

; 726  : 	Property get_lowWord() { return GetProperty ( s_lowWord ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0d 01 00 00	 push	 269			; 0000010dH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_lowWord@CSCI_LongInt@@QAEFXZ ENDP			; CSCI_LongInt::get_lowWord
_TEXT	ENDS
PUBLIC	?AssureValid@ObjectID@@QBEXXZ			; ObjectID::AssureValid
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@ObjectID@@QBEFG@Z PROC NEAR		; ObjectID::GetProperty, COMDAT

; 290  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 		//	get a property given a selector
; 292  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 293  : 		return (*this)->GetProperty(selector);

  0000f	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty

; 294  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetProperty@ObjectID@@QBEFG@Z ENDP			; ObjectID::GetProperty
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssureValid@ObjectID@@QBEXXZ PROC NEAR			; ObjectID::AssureValid, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 239  : 		if (!IsObject())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  0000f	85 c0		 test	 eax, eax
  00011	75 1e		 jne	 SHORT $L116926

; 240  : 			msgMgr->Fatal(Msg_NotObject, (int) *this);

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0001b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00020	50		 push	 eax
  00021	6a 2f		 push	 47			; 0000002fH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L116926:

; 241  : 	}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?AssureValid@ObjectID@@QBEXXZ ENDP			; ObjectID::AssureValid
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_hiWord@CSCI_LongInt@@QAEFXZ PROC NEAR		; CSCI_LongInt::get_hiWord, COMDAT

; 729  : 	Property get_hiWord() { return GetProperty ( s_hiWord ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0e 01 00 00	 push	 270			; 0000010eH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_hiWord@CSCI_LongInt@@QAEFXZ ENDP			; CSCI_LongInt::get_hiWord
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@XZ				; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_WorldObject@@QAE@XZ PROC NEAR			; CSCI_WorldObject::CSCI_WorldObject, COMDAT

; 4472 : 	CSCI_WorldObject() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@XZ	; CSCI_Actor::CSCI_Actor
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_WorldObject@@QAE@XZ ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@XZ				; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Actor@@QAE@XZ PROC NEAR				; CSCI_Actor::CSCI_Actor, COMDAT

; 1593 : 	CSCI_Actor() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@XZ	; CSCI_Prop::CSCI_Prop
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Actor@@QAE@XZ ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@XZ				; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Prop@@QAE@XZ PROC NEAR				; CSCI_Prop::CSCI_Prop, COMDAT

; 1557 : 	CSCI_Prop() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@XZ	; CSCI_View::CSCI_View
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Prop@@QAE@XZ ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@XZ				; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_View@@QAE@XZ PROC NEAR				; CSCI_View::CSCI_View, COMDAT

; 1512 : 	CSCI_View() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@XZ	; CSCI_Feature::CSCI_Feature
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_View@@QAE@XZ ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@XZ				; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Feature@@QAE@XZ PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT

; 1434 : 	CSCI_Feature() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@XZ	; CSCI_BitMap::CSCI_BitMap
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Feature@@QAE@XZ ENDP				; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@XZ			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_BitMap@@QAE@XZ PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT

; 1355 : 	CSCI_BitMap() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@XZ ; CSCI_Rectangle::CSCI_Rectangle
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_BitMap@@QAE@XZ ENDP				; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@XZ				; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Rectangle@@QAE@XZ PROC NEAR			; CSCI_Rectangle::CSCI_Rectangle, COMDAT

; 514  : 	CSCI_Rectangle() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@XZ	; CSCI_Object::CSCI_Object
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Rectangle@@QAE@XZ ENDP				; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@XZ				; ObjectID::ObjectID
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Object@@QAE@XZ PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 10   : 	CSCI_Object() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@XZ	; ObjectID::ObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Object@@QAE@XZ ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@XZ				; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ObjectID@@QAE@XZ PROC NEAR				; ObjectID::ObjectID, COMDAT

; 227  : 	ObjectID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@XZ	; FakeObjectID::FakeObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ObjectID@@QAE@XZ ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeObjectID@@QAE@XZ PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeObjectID@@QAE@XZ ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
$T161346 = -4
___$ReturnUdt$ = 8
_this$ = -8
?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_WorldObject::get_pName, COMDAT

; 4477 : 	StringID get_pName() { return GetProperty ( s_pName ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 15 03 00 00	 push	 789			; 00000315H
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T161346[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T161346[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ ENDP	; CSCI_WorldObject::get_pName
_TEXT	ENDS
;	COMDAT ??0CSCI_CharInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_CharInfo@@QAE@XZ PROC NEAR			; CSCI_CharInfo::CSCI_CharInfo, COMDAT

; 6382 : 	CSCI_CharInfo() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@XZ	; CSCI_Object::CSCI_Object
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_CharInfo@@QAE@XZ ENDP				; CSCI_CharInfo::CSCI_CharInfo
_TEXT	ENDS
;	COMDAT ??0CSCI_CharInfo@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_CharInfo@@QAE@G@Z PROC NEAR			; CSCI_CharInfo::CSCI_CharInfo, COMDAT

; 6385 : 	CSCI_CharInfo(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_CharInfo@@QAE@G@Z ENDP				; CSCI_CharInfo::CSCI_CharInfo
_TEXT	ENDS
;	COMDAT ?get_pIsSelf@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pIsSelf@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pIsSelf, COMDAT

; 6387 : 	Property get_pIsSelf() { return GetProperty ( s_pIsSelf ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 ec 05 00 00	 push	 1516			; 000005ecH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pIsSelf@CSCI_CharInfo@@QAEFXZ ENDP			; CSCI_CharInfo::get_pIsSelf
_TEXT	ENDS
;	COMDAT ?get_pName@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pName@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pName, COMDAT

; 6390 : 	Property get_pName() { return GetProperty ( s_pName ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 15 03 00 00	 push	 789			; 00000315H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pName@CSCI_CharInfo@@QAEFXZ ENDP			; CSCI_CharInfo::get_pName
_TEXT	ENDS
;	COMDAT ?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
$T161352 = -4
?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ PROC NEAR	; CSCI_CharInfo::get_pTitle, COMDAT

; 6393 : 	StringID get_pTitle() { return GetProperty ( s_pTitle ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 c7 04 00 00	 push	 1223			; 000004c7H
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T161352[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T161352[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pTitle@CSCI_CharInfo@@QAE?AVStringID@@XZ ENDP	; CSCI_CharInfo::get_pTitle
_TEXT	ENDS
;	COMDAT ?get_pProfession@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
$T161354 = -4
?get_pProfession@CSCI_CharInfo@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_CharInfo::get_pProfession, COMDAT

; 6396 : 	StringID get_pProfession() { return GetProperty ( s_pProfession ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 c5 04 00 00	 push	 1221			; 000004c5H
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T161354[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T161354[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pProfession@CSCI_CharInfo@@QAE?AVStringID@@XZ ENDP	; CSCI_CharInfo::get_pProfession
_TEXT	ENDS
;	COMDAT ?get_pBiography@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
$T161356 = -4
?get_pBiography@CSCI_CharInfo@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_CharInfo::get_pBiography, COMDAT

; 6399 : 	StringID get_pBiography() { return GetProperty ( s_pBiography ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 c8 04 00 00	 push	 1224			; 000004c8H
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T161356[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T161356[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pBiography@CSCI_CharInfo@@QAE?AVStringID@@XZ ENDP	; CSCI_CharInfo::get_pBiography
_TEXT	ENDS
;	COMDAT ?get_pLevel@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pLevel@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pLevel, COMDAT

; 6402 : 	Property get_pLevel() { return GetProperty ( s_pLevel ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 03 04 00 00	 push	 1027			; 00000403H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pLevel@CSCI_CharInfo@@QAEFXZ ENDP			; CSCI_CharInfo::get_pLevel
_TEXT	ENDS
;	COMDAT ?get_pStrength@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pStrength@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pStrength, COMDAT

; 6405 : 	Property get_pStrength() { return GetProperty ( s_pStrength ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 fc 03 00 00	 push	 1020			; 000003fcH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pStrength@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pStrength
_TEXT	ENDS
;	COMDAT ?get_pDexterity@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pDexterity@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pDexterity, COMDAT

; 6408 : 	Property get_pDexterity() { return GetProperty ( s_pDexterity ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 fd 03 00 00	 push	 1021			; 000003fdH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pDexterity@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pDexterity
_TEXT	ENDS
;	COMDAT ?get_pIntelligence@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pIntelligence@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pIntelligence, COMDAT

; 6411 : 	Property get_pIntelligence() { return GetProperty ( s_pIntelligence ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 fe 03 00 00	 push	 1022			; 000003feH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pIntelligence@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pIntelligence
_TEXT	ENDS
;	COMDAT ?get_pEndurance@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pEndurance@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pEndurance, COMDAT

; 6414 : 	Property get_pEndurance() { return GetProperty ( s_pEndurance ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 00 04 00 00	 push	 1024			; 00000400H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pEndurance@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pEndurance
_TEXT	ENDS
;	COMDAT ?get_pCarry@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pCarry@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pCarry, COMDAT

; 6429 : 	Property get_pCarry() { return GetProperty ( s_pCarry ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 8c 05 00 00	 push	 1420			; 0000058cH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pCarry@CSCI_CharInfo@@QAEFXZ ENDP			; CSCI_CharInfo::get_pCarry
_TEXT	ENDS
;	COMDAT ?get_pCarryMax@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pCarryMax@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pCarryMax, COMDAT

; 6432 : 	Property get_pCarryMax() { return GetProperty ( s_pCarryMax ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 8d 05 00 00	 push	 1421			; 0000058dH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pCarryMax@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pCarryMax
_TEXT	ENDS
;	COMDAT ?get_pExperience@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pExperience@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_CharInfo::get_pExperience, COMDAT

; 6435 : 	CSCI_LongInt get_pExperience() { return GetProperty ( s_pExperience ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 2b 04 00 00	 push	 1067			; 0000042bH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pExperience@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ENDP ; CSCI_CharInfo::get_pExperience
_TEXT	ENDS
;	COMDAT ?get_pBuildPoints@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pBuildPoints@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pBuildPoints, COMDAT

; 6438 : 	Property get_pBuildPoints() { return GetProperty ( s_pBuildPoints ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 32 04 00 00	 push	 1074			; 00000432H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pBuildPoints@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pBuildPoints
_TEXT	ENDS
;	COMDAT ?get_pArmorRating@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pArmorRating@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pArmorRating, COMDAT

; 6441 : 	Property get_pArmorRating() { return GetProperty ( s_pArmorRating ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 ef 05 00 00	 push	 1519			; 000005efH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pArmorRating@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pArmorRating
_TEXT	ENDS
;	COMDAT ?get_pPvp@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pPvp@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pPvp, COMDAT

; 6444 : 	Property get_pPvp() { return GetProperty ( s_pPvp ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 f0 05 00 00	 push	 1520			; 000005f0H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pPvp@CSCI_CharInfo@@QAEFXZ ENDP			; CSCI_CharInfo::get_pPvp
_TEXT	ENDS
PUBLIC	?SetProperty@ObjectID@@QBEXGF@Z			; ObjectID::SetProperty
;	COMDAT ?set_pPvp@CSCI_CharInfo@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_pPvp@CSCI_CharInfo@@QAEXF@Z PROC NEAR		; CSCI_CharInfo::set_pPvp, COMDAT

; 6445 : 	void set_pPvp( Property value ) { SetProperty ( s_pPvp, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 f0 05 00 00	 push	 1520			; 000005f0H
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_pPvp@CSCI_CharInfo@@QAEXF@Z ENDP			; CSCI_CharInfo::set_pPvp
_TEXT	ENDS
PUBLIC	?SetProperty@Object@@QAEXGF@Z			; Object::SetProperty
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT
_selector$ = 8
_value$ = 12
_this$ = -4
?SetProperty@ObjectID@@QBEXGF@Z PROC NEAR		; ObjectID::SetProperty, COMDAT

; 340  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 341  : 		//	set a property given a selector
; 342  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 343  : 		(*this)->SetProperty(selector, value);

  0000f	66 8b 45 0c	 mov	 ax, WORD PTR _value$[ebp]
  00013	50		 push	 eax
  00014	66 8b 4d 08	 mov	 cx, WORD PTR _selector$[ebp]
  00018	51		 push	 ecx
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ?SetProperty@Object@@QAEXGF@Z ; Object::SetProperty

; 344  : 	}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?SetProperty@ObjectID@@QBEXGF@Z ENDP			; ObjectID::SetProperty
_TEXT	ENDS
PUBLIC	?SetGraphicsUpdate@Object@@QAEXXZ		; Object::SetGraphicsUpdate
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT
_this$ = -12
_property$ = -8
_index$ = -4
_selector$ = 8
_value$ = 12
?SetProperty@Object@@QAEXGF@Z PROC NEAR			; Object::SetProperty, COMDAT

; 206  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		//	set a property given a selector
; 208  : 		Property* property = GetPropAddrCheck(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00016	89 45 f8	 mov	 DWORD PTR _property$[ebp], eax

; 209  : 		int index = property - (Property*) this;

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _property$[ebp]
  0001c	2b 4d f4	 sub	 ecx, DWORD PTR _this$[ebp]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4d fc	 mov	 DWORD PTR _index$[ebp], ecx

; 210  : 		if (index <= MaxGraphUpdateIndex && index >= MinGraphUpdateIndex)

  00024	83 7d fc 2b	 cmp	 DWORD PTR _index$[ebp], 43 ; 0000002bH
  00028	7f 0e		 jg	 SHORT $L116791
  0002a	83 7d fc 18	 cmp	 DWORD PTR _index$[ebp], 24 ; 00000018H
  0002e	7c 08		 jl	 SHORT $L116791

; 211  : 			SetGraphicsUpdate();

  00030	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?SetGraphicsUpdate@Object@@QAEXXZ ; Object::SetGraphicsUpdate
$L116791:

; 212  : 		*property = value;

  00038	8b 55 f8	 mov	 edx, DWORD PTR _property$[ebp]
  0003b	66 8b 45 0c	 mov	 ax, WORD PTR _value$[ebp]
  0003f	66 89 02	 mov	 WORD PTR [edx], ax

; 213  : 	}

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?SetProperty@Object@@QAEXGF@Z ENDP			; Object::SetProperty
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?SetGraphicsUpdate@Object@@QAEXXZ PROC NEAR		; Object::SetGraphicsUpdate, COMDAT

; 97   : 	void		SetGraphicsUpdate()		{ info |= GRAPH_UPD; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  0000e	80 c9 08	 or	 cl, 8
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?SetGraphicsUpdate@Object@@QAEXXZ ENDP			; Object::SetGraphicsUpdate
_TEXT	ENDS
;	COMDAT ?get_pAlignment@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pAlignment@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pAlignment, COMDAT

; 6447 : 	Property get_pAlignment() { return GetProperty ( s_pAlignment ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0a 04 00 00	 push	 1034			; 0000040aH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pAlignment@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pAlignment
_TEXT	ENDS
;	COMDAT ?get_pFace@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pFace@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pFace, COMDAT

; 6456 : 	Property get_pFace() { return GetProperty ( s_pFace ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 f1 05 00 00	 push	 1521			; 000005f1H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pFace@CSCI_CharInfo@@QAEFXZ ENDP			; CSCI_CharInfo::get_pFace
_TEXT	ENDS
;	COMDAT ?get_pAttackStance@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pAttackStance@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pAttackStance, COMDAT

; 6465 : 	Property get_pAttackStance() { return GetProperty ( s_pAttackStance ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 f4 05 00 00	 push	 1524			; 000005f4H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pAttackStance@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pAttackStance
_TEXT	ENDS
;	COMDAT ?get_pAttackWidth@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pAttackWidth@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pAttackWidth, COMDAT

; 6468 : 	Property get_pAttackWidth() { return GetProperty ( s_pAttackWidth ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 f5 05 00 00	 push	 1525			; 000005f5H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pAttackWidth@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pAttackWidth
_TEXT	ENDS
;	COMDAT ?get_pAttackHeight@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pAttackHeight@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pAttackHeight, COMDAT

; 6471 : 	Property get_pAttackHeight() { return GetProperty ( s_pAttackHeight ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 f6 05 00 00	 push	 1526			; 000005f6H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pAttackHeight@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pAttackHeight
_TEXT	ENDS
;	COMDAT ?get_pStand@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pStand@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pStand, COMDAT

; 6474 : 	Property get_pStand() { return GetProperty ( s_pStand ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 20 06 00 00	 push	 1568			; 00000620H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pStand@CSCI_CharInfo@@QAEFXZ ENDP			; CSCI_CharInfo::get_pStand
_TEXT	ENDS
;	COMDAT ?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pArmorInfoList, COMDAT

; 6477 : 	Property get_pArmorInfoList() { return GetProperty ( s_pArmorInfoList ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 81 05 00 00	 push	 1409			; 00000581H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pArmorInfoList@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pArmorInfoList
_TEXT	ENDS
;	COMDAT ?get_pWeaponName@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pWeaponName@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pWeaponName, COMDAT

; 6480 : 	Property get_pWeaponName() { return GetProperty ( s_pWeaponName ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 82 05 00 00	 push	 1410			; 00000582H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pWeaponName@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pWeaponName
_TEXT	ENDS
;	COMDAT ?get_pWeaponDamageMin@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pWeaponDamageMin@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pWeaponDamageMin, COMDAT

; 6483 : 	Property get_pWeaponDamageMin() { return GetProperty ( s_pWeaponDamageMin ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 83 05 00 00	 push	 1411			; 00000583H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pWeaponDamageMin@CSCI_CharInfo@@QAEFXZ ENDP	; CSCI_CharInfo::get_pWeaponDamageMin
_TEXT	ENDS
;	COMDAT ?get_pWeaponDamageMax@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pWeaponDamageMax@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pWeaponDamageMax, COMDAT

; 6486 : 	Property get_pWeaponDamageMax() { return GetProperty ( s_pWeaponDamageMax ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 84 05 00 00	 push	 1412			; 00000584H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pWeaponDamageMax@CSCI_CharInfo@@QAEFXZ ENDP	; CSCI_CharInfo::get_pWeaponDamageMax
_TEXT	ENDS
;	COMDAT ?get_pWeaponCondition@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pWeaponCondition@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pWeaponCondition, COMDAT

; 6489 : 	Property get_pWeaponCondition() { return GetProperty ( s_pWeaponCondition ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 85 05 00 00	 push	 1413			; 00000585H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pWeaponCondition@CSCI_CharInfo@@QAEFXZ ENDP	; CSCI_CharInfo::get_pWeaponCondition
_TEXT	ENDS
;	COMDAT ?get_pAttacksPerRound@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pAttacksPerRound@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pAttacksPerRound, COMDAT

; 6492 : 	Property get_pAttacksPerRound() { return GetProperty ( s_pAttacksPerRound ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 86 05 00 00	 push	 1414			; 00000586H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pAttacksPerRound@CSCI_CharInfo@@QAEFXZ ENDP	; CSCI_CharInfo::get_pAttacksPerRound
_TEXT	ENDS
;	COMDAT ?get_pDodgesPerRound@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pDodgesPerRound@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pDodgesPerRound, COMDAT

; 6495 : 	Property get_pDodgesPerRound() { return GetProperty ( s_pDodgesPerRound ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 87 05 00 00	 push	 1415			; 00000587H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pDodgesPerRound@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pDodgesPerRound
_TEXT	ENDS
;	COMDAT ?get_pBlocksPerRound@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pBlocksPerRound@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pBlocksPerRound, COMDAT

; 6498 : 	Property get_pBlocksPerRound() { return GetProperty ( s_pBlocksPerRound ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 88 05 00 00	 push	 1416			; 00000588H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pBlocksPerRound@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pBlocksPerRound
_TEXT	ENDS
;	COMDAT ?get_pAttackDamageMin@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pAttackDamageMin@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pAttackDamageMin, COMDAT

; 6501 : 	Property get_pAttackDamageMin() { return GetProperty ( s_pAttackDamageMin ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 89 05 00 00	 push	 1417			; 00000589H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pAttackDamageMin@CSCI_CharInfo@@QAEFXZ ENDP	; CSCI_CharInfo::get_pAttackDamageMin
_TEXT	ENDS
;	COMDAT ?get_pAttackDamageMax@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pAttackDamageMax@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pAttackDamageMax, COMDAT

; 6504 : 	Property get_pAttackDamageMax() { return GetProperty ( s_pAttackDamageMax ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 8a 05 00 00	 push	 1418			; 0000058aH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pAttackDamageMax@CSCI_CharInfo@@QAEFXZ ENDP	; CSCI_CharInfo::get_pAttackDamageMax
_TEXT	ENDS
;	COMDAT ?get_pMovementRate@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pMovementRate@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pMovementRate, COMDAT

; 6507 : 	Property get_pMovementRate() { return GetProperty ( s_pMovementRate ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 8b 05 00 00	 push	 1419			; 0000058bH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pMovementRate@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pMovementRate
_TEXT	ENDS
;	COMDAT ?get_pSkillArray@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pSkillArray@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pSkillArray, COMDAT

; 6510 : 	Property get_pSkillArray() { return GetProperty ( s_pSkillArray ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 30 04 00 00	 push	 1072			; 00000430H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pSkillArray@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pSkillArray
_TEXT	ENDS
;	COMDAT ?get_pStatusArray@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pStatusArray@CSCI_CharInfo@@QAEFXZ PROC NEAR	; CSCI_CharInfo::get_pStatusArray, COMDAT

; 6513 : 	Property get_pStatusArray() { return GetProperty ( s_pStatusArray ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 22 03 00 00	 push	 802			; 00000322H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pStatusArray@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pStatusArray
_TEXT	ENDS
;	COMDAT ?get_pNPCKills@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pNPCKills@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pNPCKills, COMDAT

; 6516 : 	Property get_pNPCKills() { return GetProperty ( s_pNPCKills ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 90 05 00 00	 push	 1424			; 00000590H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pNPCKills@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pNPCKills
_TEXT	ENDS
;	COMDAT ?get_pPKills@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pPKills@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pPKills, COMDAT

; 6519 : 	Property get_pPKills() { return GetProperty ( s_pPKills ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 91 05 00 00	 push	 1425			; 00000591H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pPKills@CSCI_CharInfo@@QAEFXZ ENDP			; CSCI_CharInfo::get_pPKills
_TEXT	ENDS
;	COMDAT ?get_pMeleeMod@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pMeleeMod@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pMeleeMod, COMDAT

; 6522 : 	Property get_pMeleeMod() { return GetProperty ( s_pMeleeMod ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 92 05 00 00	 push	 1426			; 00000592H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pMeleeMod@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pMeleeMod
_TEXT	ENDS
;	COMDAT ?get_pSpellMod@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pSpellMod@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pSpellMod, COMDAT

; 6525 : 	Property get_pSpellMod() { return GetProperty ( s_pSpellMod ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 93 05 00 00	 push	 1427			; 00000593H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pSpellMod@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pSpellMod
_TEXT	ENDS
;	COMDAT ?get_pOldLevel@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pOldLevel@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_pOldLevel, COMDAT

; 6528 : 	Property get_pOldLevel() { return GetProperty ( s_pOldLevel ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 94 05 00 00	 push	 1428			; 00000594H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pOldLevel@CSCI_CharInfo@@QAEFXZ ENDP		; CSCI_CharInfo::get_pOldLevel
_TEXT	ENDS
;	COMDAT ?set_pUpdateBio@CSCI_CharInfo@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_pUpdateBio@CSCI_CharInfo@@QAEXF@Z PROC NEAR	; CSCI_CharInfo::set_pUpdateBio, COMDAT

; 6532 : 	void set_pUpdateBio( Property value ) { SetProperty ( s_pUpdateBio, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 34 06 00 00	 push	 1588			; 00000634H
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_pUpdateBio@CSCI_CharInfo@@QAEXF@Z ENDP		; CSCI_CharInfo::set_pUpdateBio
_TEXT	ENDS
;	COMDAT ?set_pUpdateTitle@CSCI_CharInfo@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_pUpdateTitle@CSCI_CharInfo@@QAEXF@Z PROC NEAR	; CSCI_CharInfo::set_pUpdateTitle, COMDAT

; 6535 : 	void set_pUpdateTitle( Property value ) { SetProperty ( s_pUpdateTitle, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 35 06 00 00	 push	 1589			; 00000635H
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_pUpdateTitle@CSCI_CharInfo@@QAEXF@Z ENDP		; CSCI_CharInfo::set_pUpdateTitle
_TEXT	ENDS
;	COMDAT ?get_pManaDrain@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pManaDrain@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_CharInfo::get_pManaDrain, COMDAT

; 6537 : 	CSCI_LongInt get_pManaDrain() { return GetProperty ( s_pManaDrain ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 39 06 00 00	 push	 1593			; 00000639H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pManaDrain@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ENDP ; CSCI_CharInfo::get_pManaDrain
_TEXT	ENDS
;	COMDAT ?get_pMeleeArmorPierce@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pMeleeArmorPierce@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_CharInfo::get_pMeleeArmorPierce, COMDAT

; 6540 : 	CSCI_LongInt get_pMeleeArmorPierce() { return GetProperty ( s_pMeleeArmorPierce ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 3a 06 00 00	 push	 1594			; 0000063aH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pMeleeArmorPierce@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ENDP ; CSCI_CharInfo::get_pMeleeArmorPierce
_TEXT	ENDS
;	COMDAT ?get_pEvilMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pEvilMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_CharInfo::get_pEvilMDM, COMDAT

; 6543 : 	CSCI_LongInt get_pEvilMDM() { return GetProperty ( s_pEvilMDM ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 3b 06 00 00	 push	 1595			; 0000063bH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pEvilMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ENDP ; CSCI_CharInfo::get_pEvilMDM
_TEXT	ENDS
;	COMDAT ?get_pGoodMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pGoodMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_CharInfo::get_pGoodMDM, COMDAT

; 6546 : 	CSCI_LongInt get_pGoodMDM() { return GetProperty ( s_pGoodMDM ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 3c 06 00 00	 push	 1596			; 0000063cH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pGoodMDM@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ENDP ; CSCI_CharInfo::get_pGoodMDM
_TEXT	ENDS
;	COMDAT ?get_pAccountType@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
$T161403 = -4
?get_pAccountType@CSCI_CharInfo@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_CharInfo::get_pAccountType, COMDAT

; 6549 : 	StringID get_pAccountType() { return GetProperty ( s_pAccountType ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 3d 06 00 00	 push	 1597			; 0000063dH
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T161403[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T161403[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pAccountType@CSCI_CharInfo@@QAE?AVStringID@@XZ ENDP ; CSCI_CharInfo::get_pAccountType
_TEXT	ENDS
;	COMDAT ?get_pBillingDate@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pBillingDate@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_CharInfo::get_pBillingDate, COMDAT

; 6552 : 	CSCI_LongInt get_pBillingDate() { return GetProperty ( s_pBillingDate ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 3e 06 00 00	 push	 1598			; 0000063eH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pBillingDate@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ENDP ; CSCI_CharInfo::get_pBillingDate
_TEXT	ENDS
;	COMDAT ?get_pAccountID@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
$T161406 = -4
?get_pAccountID@CSCI_CharInfo@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_CharInfo::get_pAccountID, COMDAT

; 6555 : 	StringID get_pAccountID() { return GetProperty ( s_pAccountID ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 3f 06 00 00	 push	 1599			; 0000063fH
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T161406[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T161406[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pAccountID@CSCI_CharInfo@@QAE?AVStringID@@XZ ENDP	; CSCI_CharInfo::get_pAccountID
_TEXT	ENDS
;	COMDAT ?get_pCredits@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pCredits@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_CharInfo::get_pCredits, COMDAT

; 6558 : 	CSCI_LongInt get_pCredits() { return GetProperty ( s_pCredits ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 40 06 00 00	 push	 1600			; 00000640H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pCredits@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ENDP ; CSCI_CharInfo::get_pCredits
_TEXT	ENDS
;	COMDAT ?get_pCoppers@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pCoppers@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_CharInfo::get_pCoppers, COMDAT

; 6561 : 	CSCI_LongInt get_pCoppers() { return GetProperty ( s_pCoppers ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 41 06 00 00	 push	 1601			; 00000641H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pCoppers@CSCI_CharInfo@@QAE?AVCSCI_LongInt@@XZ ENDP ; CSCI_CharInfo::get_pCoppers
_TEXT	ENDS
;	COMDAT ?get_pCastResist@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
$T161410 = -4
?get_pCastResist@CSCI_CharInfo@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_CharInfo::get_pCastResist, COMDAT

; 6564 : 	StringID get_pCastResist() { return GetProperty ( s_pCastResist ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 42 06 00 00	 push	 1602			; 00000642H
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T161410[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T161410[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pCastResist@CSCI_CharInfo@@QAE?AVStringID@@XZ ENDP	; CSCI_CharInfo::get_pCastResist
_TEXT	ENDS
;	COMDAT ?get_pSpellResist@CSCI_CharInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
$T161412 = -4
?get_pSpellResist@CSCI_CharInfo@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_CharInfo::get_pSpellResist, COMDAT

; 6567 : 	StringID get_pSpellResist() { return GetProperty ( s_pSpellResist ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 43 06 00 00	 push	 1603			; 00000643H
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T161412[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T161412[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pSpellResist@CSCI_CharInfo@@QAE?AVStringID@@XZ ENDP ; CSCI_CharInfo::get_pSpellResist
_TEXT	ENDS
;	COMDAT ?get_nRights@CSCI_CharInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_nRights@CSCI_CharInfo@@QAEFXZ PROC NEAR		; CSCI_CharInfo::get_nRights, COMDAT

; 6570 : 	Property get_nRights() { return GetProperty ( s_nRights ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 44 06 00 00	 push	 1604			; 00000644H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_nRights@CSCI_CharInfo@@QAEFXZ ENDP			; CSCI_CharInfo::get_nRights
_TEXT	ENDS
;	COMDAT ??0CSCI_ArmorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_ArmorInfo@@QAE@XZ PROC NEAR			; CSCI_ArmorInfo::CSCI_ArmorInfo, COMDAT

; 6580 : 	CSCI_ArmorInfo() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@XZ	; CSCI_Object::CSCI_Object
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_ArmorInfo@@QAE@XZ ENDP				; CSCI_ArmorInfo::CSCI_ArmorInfo
_TEXT	ENDS
;	COMDAT ??0CSCI_ArmorInfo@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_ArmorInfo@@QAE@G@Z PROC NEAR			; CSCI_ArmorInfo::CSCI_ArmorInfo, COMDAT

; 6583 : 	CSCI_ArmorInfo(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_ArmorInfo@@QAE@G@Z ENDP				; CSCI_ArmorInfo::CSCI_ArmorInfo
_TEXT	ENDS
;	COMDAT ?get_pType@CSCI_ArmorInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pType@CSCI_ArmorInfo@@QAEFXZ PROC NEAR		; CSCI_ArmorInfo::get_pType, COMDAT

; 6585 : 	Property get_pType() { return GetProperty ( s_pType ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 bb 02 00 00	 push	 699			; 000002bbH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pType@CSCI_ArmorInfo@@QAEFXZ ENDP			; CSCI_ArmorInfo::get_pType
_TEXT	ENDS
;	COMDAT ?get_pRating@CSCI_ArmorInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pRating@CSCI_ArmorInfo@@QAEFXZ PROC NEAR		; CSCI_ArmorInfo::get_pRating, COMDAT

; 6588 : 	Property get_pRating() { return GetProperty ( s_pRating ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 7f 05 00 00	 push	 1407			; 0000057fH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pRating@CSCI_ArmorInfo@@QAEFXZ ENDP		; CSCI_ArmorInfo::get_pRating
_TEXT	ENDS
;	COMDAT ?get_pCondition@CSCI_ArmorInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pCondition@CSCI_ArmorInfo@@QAEFXZ PROC NEAR	; CSCI_ArmorInfo::get_pCondition, COMDAT

; 6591 : 	Property get_pCondition() { return GetProperty ( s_pCondition ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 80 05 00 00	 push	 1408			; 00000580H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pCondition@CSCI_ArmorInfo@@QAEFXZ ENDP		; CSCI_ArmorInfo::get_pCondition
_TEXT	ENDS
PUBLIC	??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z	; std::bitset<6>::reference::operator=
PUBLIC	??A?$bitset@$05@std@@QAE?AVreference@01@I@Z	; std::bitset<6>::operator[]
;	COMDAT ?SetTransient@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT
_bValue$ = 8
$T161420 = -8
_this$ = -12
?SetTransient@CSkinWnd@@IAEX_N@Z PROC NEAR		; CSkinWnd::SetTransient, COMDAT

; 150  : 	void SetTransient ( bool bValue ) { m_state[sknWndTransient] = bValue; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000c	50		 push	 eax
  0000d	6a 04		 push	 4
  0000f	8d 4d f8	 lea	 ecx, DWORD PTR $T161420[ebp]
  00012	51		 push	 ecx
  00013	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0001c	e8 00 00 00 00	 call	 ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ; std::bitset<6>::operator[]
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ; std::bitset<6>::reference::operator=
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetTransient@CSkinWnd@@IAEX_N@Z ENDP			; CSkinWnd::SetTransient
_TEXT	ENDS
PUBLIC	??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z	; std::bitset<6>::reference::reference
;	COMDAT ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT
__P$ = 12
$T161422 = -8
___$ReturnUdt$ = 8
_this$ = -12
??A?$bitset@$05@std@@QAE?AVreference@01@I@Z PROC NEAR	; std::bitset<6>::operator[], COMDAT

; 54   : 		{return (reference(*this, _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	51		 push	 ecx
  00011	8d 4d f8	 lea	 ecx, DWORD PTR $T161422[ebp]
  00014	e8 00 00 00 00	 call	 ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z ; std::bitset<6>::reference::reference
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	89 11		 mov	 DWORD PTR [ecx], edx
  00023	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ENDP	; std::bitset<6>::operator[]
_TEXT	ENDS
PUBLIC	?set@?$bitset@$05@std@@QAEAAV12@I_N@Z		; std::bitset<6>::set
;	COMDAT ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT
__X$ = 8
_this$ = -4
??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z PROC NEAR	; std::bitset<6>::reference::operator=, COMDAT

; 24   : 			{_Pbs->set(_Off, _X);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 08	 mov	 al, BYTE PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	e8 00 00 00 00	 call	 ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z ; std::bitset<6>::set

; 25   : 			return (*this); }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ENDP	; std::bitset<6>::reference::operator=
_TEXT	ENDS
PUBLIC	?_Xran@?$bitset@$05@std@@ABEXXZ			; std::bitset<6>::_Xran
;	COMDAT ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
__X$ = 12
?set@?$bitset@$05@std@@QAEAAV12@I_N@Z PROC NEAR		; std::bitset<6>::set, COMDAT

; 119  : 		{if (_N <= _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 7d 08 06	 cmp	 DWORD PTR __P$[ebp], 6
  0000c	72 08		 jb	 SHORT $L156895

; 120  : 			_Xran();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Xran@?$bitset@$05@std@@ABEXXZ ; std::bitset<6>::_Xran
$L156895:

; 121  : 		if (_X)

  00016	8b 45 0c	 mov	 eax, DWORD PTR __X$[ebp]
  00019	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001e	85 c0		 test	 eax, eax
  00020	74 31		 je	 SHORT $L156896

; 122  : 			_A[_P / _Nb] |= (_Ty)1 << _P % _Nb;

  00022	8b 75 08	 mov	 esi, DWORD PTR __P$[ebp]
  00025	c1 ee 05	 shr	 esi, 5
  00028	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0002b	33 d2		 xor	 edx, edx
  0002d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00032	f7 f1		 div	 ecx
  00034	8b ca		 mov	 ecx, edx
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	d3 e2		 shl	 edx, cl
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00043	0b ca		 or	 ecx, edx
  00045	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  00048	c1 ea 05	 shr	 edx, 5
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 123  : 		else

  00051	eb 31		 jmp	 SHORT $L156898
$L156896:

; 124  : 			_A[_P / _Nb] &= ~((_Ty)1 << _P % _Nb);

  00053	8b 75 08	 mov	 esi, DWORD PTR __P$[ebp]
  00056	c1 ee 05	 shr	 esi, 5
  00059	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0005c	33 d2		 xor	 edx, edx
  0005e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00063	f7 f1		 div	 ecx
  00065	8b ca		 mov	 ecx, edx
  00067	ba 01 00 00 00	 mov	 edx, 1
  0006c	d3 e2		 shl	 edx, cl
  0006e	f7 d2		 not	 edx
  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00076	23 ca		 and	 ecx, edx
  00078	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  0007b	c1 ea 05	 shr	 edx, 5
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
$L156898:

; 125  : 		return (*this); }

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	5e		 pop	 esi
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
?set@?$bitset@$05@std@@QAEAAV12@I_N@Z ENDP		; std::bitset<6>::set
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
__P$ = 12
??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z PROC NEAR	; std::bitset<6>::reference::reference, COMDAT

; 37   : 		reference(bitset<_N>& _X, size_t _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __X$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z ENDP	; std::bitset<6>::reference::reference
_TEXT	ENDS
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
PUBLIC	??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ ; `string'
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
EXTRN	__imp_??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z:NEAR
EXTRN	??0logic_error@std@@QAE@ABV01@@Z:NEAR		; std::logic_error::logic_error
EXTRN	??1out_of_range@std@@UAE@XZ:NEAR		; std::out_of_range::~out_of_range
EXTRN	??0out_of_range@std@@QAE@ABV01@@Z:NEAR		; std::out_of_range::out_of_range
EXTRN	__CxxThrowException@8:NEAR
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
;	COMDAT ??_R0?AVexception@@@8
; File C:\Program Files (x86)\Microsoft Visual Studio\VC98\INCLUDE\bitset
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@
_DATA	SEGMENT
??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ DB 'invalid bitset'
	DB	'<N> position', 00H				; `string'
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T161433 DD	019930520H
	DD	01H
	DD	FLAT:$T161435
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T161435 DD	0ffffffffH
	DD	FLAT:$L161431
xdata$x	ENDS
;	COMDAT ?_Xran@?$bitset@$05@std@@ABEXXZ
_TEXT	SEGMENT
_this$ = -64
$T161427 = -40
$T161428 = -56
$T161429 = -60
__$EHRec$ = -12
?_Xran@?$bitset@$05@std@@ABEXXZ PROC NEAR		; std::bitset<6>::_Xran, COMDAT

; 250  : 		{_THROW(out_of_range, "invalid bitset<N> position"); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L161434
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8d 45 c4	 lea	 eax, DWORD PTR $T161429[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ ; `string'
  00027	8d 4d c8	 lea	 ecx, DWORD PTR $T161428[ebp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	8d 4d c8	 lea	 ecx, DWORD PTR $T161428[ebp]
  0003a	51		 push	 ecx
  0003b	8d 4d d8	 lea	 ecx, DWORD PTR $T161427[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00044	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00049	8d 55 d8	 lea	 edx, DWORD PTR $T161427[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$L157215:
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L161431:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T161428[ebp]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00009	c3		 ret	 0
$L161434:
  0000a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161433
  0000f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xran@?$bitset@$05@std@@ABEXXZ ENDP			; std::bitset<6>::_Xran
;	COMDAT ?Next@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Next@CSkinWnd@@UAEXXZ PROC NEAR			; CSkinWnd::Next, COMDAT

; 275  : 	virtual void Next ( void ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?Next@CSkinWnd@@UAEXXZ ENDP				; CSkinWnd::Next
_TEXT	ENDS
;	COMDAT ?Previous@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Previous@CSkinWnd@@UAEXXZ PROC NEAR			; CSkinWnd::Previous, COMDAT

; 276  : 	virtual void Previous ( void ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?Previous@CSkinWnd@@UAEXXZ ENDP				; CSkinWnd::Previous
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??4SOL_Point@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Point::operator=, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	x = p.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 119  : 	y = p.y;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 120  : 	return *this;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 121  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4SOL_Point@@QAEAAV0@ABV0@@Z ENDP			; SOL_Point::operator=
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@XZ				; SOL_Point::SOL_Point
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Rect@@QAE@XZ PROC NEAR				; SOL_Rect::SOL_Rect, COMDAT

; 13   : 	SOL_Rect()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Rect@@QAE@XZ ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Point@@QAE@XZ PROC NEAR				; SOL_Point::SOL_Point, COMDAT

; 20   : 	SOL_Point() : x(DefaultCoord), y(DefaultCoord) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 ef cd ab
	89		 mov	 DWORD PTR [eax], -1985229329 ; 89abcdefH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 ef cd
	ab 89		 mov	 DWORD PTR [ecx+4], -1985229329 ; 89abcdefH
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Point@@QAE@XZ ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT
_num$ = 8
_denom$ = 12
_this$ = -4
??0Ratio@@QAE@HH@Z PROC NEAR				; Ratio::Ratio, COMDAT

; 9    : 	Ratio(int num, int denom)	:	numer(num), denom(denom) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _num$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _denom$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0Ratio@@QAE@HH@Z ENDP					; Ratio::Ratio
_TEXT	ENDS
;	COMDAT ?IsLargerThanOne@Ratio@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsLargerThanOne@Ratio@@QBEHXZ PROC NEAR		; Ratio::IsLargerThanOne, COMDAT

; 13   : 	Bool	IsLargerThanOne() const {return numer > denom;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	33 c0		 xor	 eax, eax
  00011	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00014	0f 9f c0	 setg	 al
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?IsLargerThanOne@Ratio@@QBEHXZ ENDP			; Ratio::IsLargerThanOne
_TEXT	ENDS
PUBLIC	??1CelObj@@UAE@XZ				; CelObj::~CelObj
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObjMem@@UAE@XZ PROC NEAR				; CelObjMem::~CelObjMem, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CelObjMem@@UAE@XZ ENDP				; CelObjMem::~CelObjMem
_TEXT	ENDS
PUBLIC	??_7CelObj@@6B@					; CelObj::`vftable'
PUBLIC	??_GCelObj@@UAEPAXI@Z				; CelObj::`scalar deleting destructor'
PUBLIC	??_ECelObj@@UAEPAXI@Z				; CelObj::`vector deleting destructor'
EXTRN	__purecall:NEAR
EXTRN	?ReadPix@CelObj@@UAEEHHH@Z:NEAR			; CelObj::ReadPix
;	COMDAT ??_7CelObj@@6B@
; File \\vboxsrv\vagrant\DnGClientSource\clientwork\Interp\celobj.hpp
CONST	SEGMENT
??_7CelObj@@6B@ DD FLAT:??_ECelObj@@UAEPAXI@Z		; CelObj::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?ReadPix@CelObj@@UAEEHHH@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObj@@UAE@XZ PROC NEAR				; CelObj::~CelObj, COMDAT

; 173  : 	virtual	~CelObj()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CelObj@@6B@ ; CelObj::`vftable'
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1CelObj@@UAE@XZ ENDP					; CelObj::~CelObj
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCelObj@@UAEPAXI@Z PROC NEAR				; CelObj::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L146493
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L146493:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCelObj@@UAEPAXI@Z ENDP				; CelObj::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7CSkinObj@@6B@				; CSkinObj::`vftable'
PUBLIC	??_GCSkinObj@@UAEPAXI@Z				; CSkinObj::`scalar deleting destructor'
PUBLIC	??_ECSkinObj@@UAEPAXI@Z				; CSkinObj::`vector deleting destructor'
;	COMDAT ??_7CSkinObj@@6B@
CONST	SEGMENT
??_7CSkinObj@@6B@ DD FLAT:??_ECSkinObj@@UAEPAXI@Z	; CSkinObj::`vftable'
CONST	ENDS
;	COMDAT ??0CSkinObj@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSkinObj@@QAE@ABV0@@Z PROC NEAR			; CSkinObj::CSkinObj, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSkinObj@@6B@ ; CSkinObj::`vftable'
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0CSkinObj@@QAE@ABV0@@Z ENDP				; CSkinObj::CSkinObj
_TEXT	ENDS
;	COMDAT ??1CSkinBtn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSkinBtn@@UAE@XZ PROC NEAR				; CSkinBtn::~CSkinBtn, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinCtrl@@UAE@XZ	; CSkinCtrl::~CSkinCtrl
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CSkinBtn@@UAE@XZ ENDP				; CSkinBtn::~CSkinBtn
_TEXT	ENDS
;	COMDAT ??_GCSkinObj@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCSkinObj@@UAEPAXI@Z PROC NEAR			; CSkinObj::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L151624
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L151624:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSkinObj@@UAEPAXI@Z ENDP				; CSkinObj::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?BringWindowToTop@CWnd@@QAEXXZ			; CWnd::BringWindowToTop
PUBLIC	?UpdateWindow@CWnd@@QAEXXZ			; CWnd::UpdateWindow
;	COMDAT ?BringTabToTop@CMainPanelWnd@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?BringTabToTop@CMainPanelWnd@@QAEXXZ PROC NEAR		; CMainPanelWnd::BringTabToTop, COMDAT

; 268  :     { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 269  :         if (m_pTabDlg) 

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00011	74 1c		 je	 SHORT $L152606

; 271  :             m_pTabDlg->BringWindowToTop(); 

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8b 89 b0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+176]
  0001c	e8 00 00 00 00	 call	 ?BringWindowToTop@CWnd@@QAEXXZ ; CWnd::BringWindowToTop

; 272  :             m_pTabDlg->UpdateWindow(); 

  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  0002a	e8 00 00 00 00	 call	 ?UpdateWindow@CWnd@@QAEXXZ ; CWnd::UpdateWindow
$L152606:

; 274  :     }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?BringTabToTop@CMainPanelWnd@@QAEXXZ ENDP		; CMainPanelWnd::BringTabToTop
_TEXT	ENDS
EXTRN	__imp__BringWindowToTop@4:NEAR
;	COMDAT ?BringWindowToTop@CWnd@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?BringWindowToTop@CWnd@@QAEXXZ PROC NEAR		; CWnd::BringWindowToTop, COMDAT

; 94   : 	{ ASSERT(::IsWindow(m_hWnd)); ::BringWindowToTop(m_hWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BringWindowToTop@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?BringWindowToTop@CWnd@@QAEXXZ ENDP			; CWnd::BringWindowToTop
_TEXT	ENDS
EXTRN	__imp__UpdateWindow@4:NEAR
;	COMDAT ?UpdateWindow@CWnd@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?UpdateWindow@CWnd@@QAEXXZ PROC NEAR			; CWnd::UpdateWindow, COMDAT

; 118  : 	{ ASSERT(::IsWindow(m_hWnd)); ::UpdateWindow(m_hWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UpdateWindow@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?UpdateWindow@CWnd@@QAEXXZ ENDP				; CWnd::UpdateWindow
_TEXT	ENDS
END

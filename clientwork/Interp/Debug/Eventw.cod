	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Eventw.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1EventMgrWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FlushKeyboard@EventMgrWin@@MAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GEventMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1KbdMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GKbdMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LockStatus@KbdWin@@UAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@KbdMgrWin@@UAEHPAVSOL_Event@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Modifiers@KbdMgrWin@@UAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PointerDevice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPointerDevice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Mouse@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSwiftInfo@SOL_Mouse@@UBEHPAH000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSwift@SOL_Mouse@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Vibrate@SOL_Mouse@@UBEXHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetHotRectangleStatus@SOL_Mouse@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Mouse@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0KbdMgrWin@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GKbdMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0KbdMgr@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0KbdWin@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1KbdMgrWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Kbd@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7PointerDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7EventMgrWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Kbd@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SOL_Mouse@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7KbdWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7KbdMgrWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7KbdMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??0KbdMgrWin@@QAE@XZ				; KbdMgrWin::KbdMgrWin
PUBLIC	??0EventMgrWin@@QAE@XZ				; EventMgrWin::EventMgrWin
PUBLIC	?Get@EventMgrWin@@UAEHPAVSOL_Event@@G@Z		; EventMgrWin::Get
PUBLIC	?FlushKeyboard@EventMgrWin@@MAEXXZ		; EventMgrWin::FlushKeyboard
PUBLIC	?GetModifiers@EventMgrWin@@MAEGXZ		; EventMgrWin::GetModifiers
PUBLIC	?Handle@EventMgrWin@@MAEXPAVSOL_Event@@@Z	; EventMgrWin::Handle
PUBLIC	??_7EventMgrWin@@6B@				; EventMgrWin::`vftable'
PUBLIC	??_GEventMgrWin@@UAEPAXI@Z			; EventMgrWin::`scalar deleting destructor'
PUBLIC	??_EEventMgrWin@@UAEPAXI@Z			; EventMgrWin::`vector deleting destructor'
EXTRN	?kbdMgr@@3PAVKbdMgr@@A:DWORD			; kbdMgr
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??0EventMgr@@QAE@XZ:NEAR			; EventMgr::EventMgr
EXTRN	??1EventMgr@@UAE@XZ:NEAR			; EventMgr::~EventMgr
EXTRN	?Flush@EventMgr@@UAEXG@Z:NEAR			; EventMgr::Flush
EXTRN	?IsAvail@EventMgr@@UBEHPAVSOL_Event@@G@Z:NEAR	; EventMgr::IsAvail
EXTRN	?Post@EventMgr@@UAEXPAVSOL_Event@@@Z:NEAR	; EventMgr::Post
EXTRN	?PostCommand@EventMgr@@UAEXH@Z:NEAR		; EventMgr::PostCommand
EXTRN	?PostWinCommand@EventMgr@@UAEXHH@Z:NEAR		; EventMgr::PostWinCommand
EXTRN	?StillDown@EventMgr@@UBEHXZ:NEAR		; EventMgr::StillDown
EXTRN	?Wait@EventMgr@@UAE?AVSOL_Event@@G@Z:NEAR	; EventMgr::Wait
;	COMDAT ??_7EventMgrWin@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\Eventw.cpp
CONST	SEGMENT
??_7EventMgrWin@@6B@ DD FLAT:??_EEventMgrWin@@UAEPAXI@Z	; EventMgrWin::`vftable'
	DD	FLAT:?Flush@EventMgr@@UAEXG@Z
	DD	FLAT:?Get@EventMgrWin@@UAEHPAVSOL_Event@@G@Z
	DD	FLAT:?GetModifiers@EventMgrWin@@MAEGXZ
	DD	FLAT:?Handle@EventMgrWin@@MAEXPAVSOL_Event@@@Z
	DD	FLAT:?IsAvail@EventMgr@@UBEHPAVSOL_Event@@G@Z
	DD	FLAT:?Post@EventMgr@@UAEXPAVSOL_Event@@@Z
	DD	FLAT:?PostCommand@EventMgr@@UAEXH@Z
	DD	FLAT:?PostWinCommand@EventMgr@@UAEXHH@Z
	DD	FLAT:?StillDown@EventMgr@@UBEHXZ
	DD	FLAT:?Wait@EventMgr@@UAE?AVSOL_Event@@G@Z
	DD	FLAT:?FlushKeyboard@EventMgrWin@@MAEXXZ
CONST	ENDS
xdata$x	SEGMENT
$T58768	DD	019930520H
	DD	02H
	DD	FLAT:$T58771
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T58771	DD	0ffffffffH
	DD	FLAT:$L58763
	DD	00H
	DD	FLAT:$L58764
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24
$T58759 = -16
$T58760 = -20
__$EHRec$ = -12
??0EventMgrWin@@QAE@XZ PROC NEAR			; EventMgrWin::EventMgrWin

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L58769
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??0EventMgr@@QAE@XZ	; EventMgr::EventMgr
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7EventMgrWin@@6B@ ; EventMgrWin::`vftable'

; 16   : 	kbdMgr = New KbdMgrWin;

  00036	6a 08		 push	 8
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 ec	 mov	 DWORD PTR $T58760[ebp], eax
  00043	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00047	83 7d ec 00	 cmp	 DWORD PTR $T58760[ebp], 0
  0004b	74 0d		 je	 SHORT $L58761
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR $T58760[ebp]
  00050	e8 00 00 00 00	 call	 ??0KbdMgrWin@@QAE@XZ	; KbdMgrWin::KbdMgrWin
  00055	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00058	eb 07		 jmp	 SHORT $L58762
$L58761:
  0005a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L58762:
  00061	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  00064	89 4d f0	 mov	 DWORD PTR $T58759[ebp], ecx
  00067	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0006b	8b 55 f0	 mov	 edx, DWORD PTR $T58759[ebp]
  0006e	89 15 00 00 00
	00		 mov	 DWORD PTR ?kbdMgr@@3PAVKbdMgr@@A, edx ; kbdMgr

; 17   : }

  00074	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L58763:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1EventMgr@@UAE@XZ	; EventMgr::~EventMgr
  00008	c3		 ret	 0
$L58764:
  00009	8b 45 ec	 mov	 eax, DWORD PTR $T58760[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	59		 pop	 ecx
  00013	c3		 ret	 0
$L58769:
  00014	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T58768
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0EventMgrWin@@QAE@XZ ENDP				; EventMgrWin::EventMgrWin
PUBLIC	??1KbdMgr@@UAE@XZ				; KbdMgr::~KbdMgr
PUBLIC	??0KbdMgr@@QAE@XZ				; KbdMgr::KbdMgr
PUBLIC	??0KbdWin@@QAE@XZ				; KbdWin::KbdWin
PUBLIC	?Get@KbdMgrWin@@UAEHPAVSOL_Event@@@Z		; KbdMgrWin::Get
PUBLIC	?Modifiers@KbdMgrWin@@UAEGXZ			; KbdMgrWin::Modifiers
PUBLIC	??_7KbdMgrWin@@6B@				; KbdMgrWin::`vftable'
PUBLIC	??_GKbdMgrWin@@UAEPAXI@Z			; KbdMgrWin::`scalar deleting destructor'
PUBLIC	??_EKbdMgrWin@@UAEPAXI@Z			; KbdMgrWin::`vector deleting destructor'
EXTRN	?MapToDir@KbdMgr@@UBEXPAVSOL_Event@@@Z:NEAR	; KbdMgr::MapToDir
;	COMDAT ??_7KbdMgrWin@@6B@
CONST	SEGMENT
??_7KbdMgrWin@@6B@ DD FLAT:??_EKbdMgrWin@@UAEPAXI@Z	; KbdMgrWin::`vftable'
	DD	FLAT:?MapToDir@KbdMgr@@UBEXPAVSOL_Event@@@Z
	DD	FLAT:?Get@KbdMgrWin@@UAEHPAVSOL_Event@@@Z
	DD	FLAT:?Modifiers@KbdMgrWin@@UAEGXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T58776	DD	019930520H
	DD	01H
	DD	FLAT:$T58778
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T58778	DD	0ffffffffH
	DD	FLAT:$L58774
xdata$x	ENDS
;	COMDAT ??0KbdMgrWin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??0KbdMgrWin@@QAE@XZ PROC NEAR				; KbdMgrWin::KbdMgrWin, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L58777
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0KbdMgr@@QAE@XZ	; KbdMgr::KbdMgr
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 04	 add	 ecx, 4
  00031	e8 00 00 00 00	 call	 ??0KbdWin@@QAE@XZ	; KbdWin::KbdWin
  00036	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7KbdMgrWin@@6B@ ; KbdMgrWin::`vftable'
  0003f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L58774:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1KbdMgr@@UAE@XZ	; KbdMgr::~KbdMgr
  00008	c3		 ret	 0
$L58777:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T58776
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0KbdMgrWin@@QAE@XZ ENDP				; KbdMgrWin::KbdMgrWin
PUBLIC	??1KbdMgrWin@@UAE@XZ				; KbdMgrWin::~KbdMgrWin
;	COMDAT ??_GKbdMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GKbdMgrWin@@UAEPAXI@Z PROC NEAR			; KbdMgrWin::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1KbdMgrWin@@UAE@XZ	; KbdMgrWin::~KbdMgrWin
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L58618
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L58618:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GKbdMgrWin@@UAEPAXI@Z ENDP				; KbdMgrWin::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7KbdMgr@@6B@					; KbdMgr::`vftable'
PUBLIC	??_GKbdMgr@@UAEPAXI@Z				; KbdMgr::`scalar deleting destructor'
PUBLIC	??_EKbdMgr@@UAEPAXI@Z				; KbdMgr::`vector deleting destructor'
EXTRN	__purecall:NEAR
;	COMDAT ??_7KbdMgr@@6B@
CONST	SEGMENT
??_7KbdMgr@@6B@ DD FLAT:??_EKbdMgr@@UAEPAXI@Z		; KbdMgr::`vftable'
	DD	FLAT:?MapToDir@KbdMgr@@UBEXPAVSOL_Event@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??0KbdMgr@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0KbdMgr@@QAE@XZ PROC NEAR				; KbdMgr::KbdMgr, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7KbdMgr@@6B@ ; KbdMgr::`vftable'
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0KbdMgr@@QAE@XZ ENDP					; KbdMgr::KbdMgr
_TEXT	ENDS
PUBLIC	?LockStatus@KbdWin@@UAEGXZ			; KbdWin::LockStatus
PUBLIC	??_7KbdWin@@6B@					; KbdWin::`vftable'
PUBLIC	??0Kbd@@QAE@XZ					; Kbd::Kbd
EXTRN	?Get@KbdWin@@UAEGXZ:NEAR			; KbdWin::Get
EXTRN	?Modifiers@KbdWin@@UAEGXZ:NEAR			; KbdWin::Modifiers
EXTRN	?Reset@KbdWin@@UAEXXZ:NEAR			; KbdWin::Reset
;	COMDAT ??_7KbdWin@@6B@
CONST	SEGMENT
??_7KbdWin@@6B@ DD FLAT:?Get@KbdWin@@UAEGXZ		; KbdWin::`vftable'
	DD	FLAT:?Modifiers@KbdWin@@UAEGXZ
	DD	FLAT:?LockStatus@KbdWin@@UAEGXZ
	DD	FLAT:?Reset@KbdWin@@UAEXXZ
CONST	ENDS
;	COMDAT ??0KbdWin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0KbdWin@@QAE@XZ PROC NEAR				; KbdWin::KbdWin, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0Kbd@@QAE@XZ		; Kbd::Kbd
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7KbdWin@@6B@ ; KbdWin::`vftable'
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0KbdWin@@QAE@XZ ENDP					; KbdWin::KbdWin
_TEXT	ENDS
;	COMDAT ??1KbdMgrWin@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1KbdMgrWin@@UAE@XZ PROC NEAR				; KbdMgrWin::~KbdMgrWin, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1KbdMgr@@UAE@XZ	; KbdMgr::~KbdMgr
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1KbdMgrWin@@UAE@XZ ENDP				; KbdMgrWin::~KbdMgrWin
_TEXT	ENDS
PUBLIC	??_7Kbd@@6B@					; Kbd::`vftable'
;	COMDAT ??_7Kbd@@6B@
CONST	SEGMENT
??_7Kbd@@6B@ DD	FLAT:__purecall				; Kbd::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??0Kbd@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Kbd@@QAE@XZ PROC NEAR				; Kbd::Kbd, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7Kbd@@6B@ ; Kbd::`vftable'
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0Kbd@@QAE@XZ ENDP					; Kbd::Kbd
_TEXT	ENDS
EXTRN	?Get@EventMgr@@UAEHPAVSOL_Event@@G@Z:NEAR	; EventMgr::Get
_TEXT	SEGMENT
_event$ = 8
_mask$ = 12
_this$ = -8
_rc$ = -4
?Get@EventMgrWin@@UAEHPAVSOL_Event@@G@Z PROC NEAR	; EventMgrWin::Get

; 21   : {

  0008c	55		 push	 ebp
  0008d	8b ec		 mov	 ebp, esp
  0008f	83 ec 08	 sub	 esp, 8
  00092	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 	//	(poll joystick)
; 23   : 	
; 24   : 	// first, see if anything in Windows' event queue
; 25   : //	AsyncEventCheck();
; 26   : 	Bool rc = EventMgr::Get(event, mask);

  00095	66 8b 45 0c	 mov	 ax, WORD PTR _mask$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _event$[ebp]
  0009d	51		 push	 ecx
  0009e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	e8 00 00 00 00	 call	 ?Get@EventMgr@@UAEHPAVSOL_Event@@G@Z ; EventMgr::Get
  000a6	89 45 fc	 mov	 DWORD PTR _rc$[ebp], eax

; 27   : 	
; 28   : 	return rc;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]

; 29   : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?Get@EventMgrWin@@UAEHPAVSOL_Event@@G@Z ENDP		; EventMgrWin::Get
_TEXT	ENDS
EXTRN	__imp__GetKeyState@4:NEAR
_TEXT	SEGMENT
_this$ = -4
?GetModifiers@EventMgrWin@@MAEGXZ PROC NEAR		; EventMgrWin::GetModifiers

; 33   : {

  000b2	55		 push	 ebp
  000b3	8b ec		 mov	 ebp, esp
  000b5	51		 push	 ecx
  000b6	56		 push	 esi
  000b7	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 34   : 	return ((GetKeyState(VK_MENU)    & 0x8000) ? 8 : 0) |
; 35   : 	       ((GetKeyState(VK_CONTROL) & 0x8000) ? 4 : 0) |
; 36   : 	       ((GetKeyState(VK_SHIFT)   & 0x8000) ? 3 : 0);

  000ba	6a 12		 push	 18			; 00000012H
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  000c2	0f bf f0	 movsx	 esi, ax
  000c5	81 e6 00 80 00
	00		 and	 esi, 32768		; 00008000H
  000cb	f7 de		 neg	 esi
  000cd	1b f6		 sbb	 esi, esi
  000cf	83 e6 08	 and	 esi, 8
  000d2	6a 11		 push	 17			; 00000011H
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  000da	0f bf c0	 movsx	 eax, ax
  000dd	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  000e2	f7 d8		 neg	 eax
  000e4	1b c0		 sbb	 eax, eax
  000e6	83 e0 04	 and	 eax, 4
  000e9	0b f0		 or	 esi, eax
  000eb	6a 10		 push	 16			; 00000010H
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  000f3	0f bf c8	 movsx	 ecx, ax
  000f6	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  000fc	f7 d9		 neg	 ecx
  000fe	1b c9		 sbb	 ecx, ecx
  00100	83 e1 03	 and	 ecx, 3
  00103	0b f1		 or	 esi, ecx
  00105	66 8b c6	 mov	 ax, si

; 37   : }

  00108	5e		 pop	 esi
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
?GetModifiers@EventMgrWin@@MAEGXZ ENDP			; EventMgrWin::GetModifiers
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@HH@Z				; SOL_Point::SOL_Point
PUBLIC	??4SOL_Point@@QAEAAV0@ABV0@@Z			; SOL_Point::operator=
EXTRN	?mouse@@3PAVSOL_Mouse@@A:DWORD			; mouse
EXTRN	?Handle@EventMgr@@UAEXPAVSOL_Event@@@Z:NEAR	; EventMgr::Handle
_TEXT	SEGMENT
_event$ = 8
_this$ = -16
_mods$ = -4
$T58790 = -12
?Handle@EventMgrWin@@MAEXPAVSOL_Event@@@Z PROC NEAR	; EventMgrWin::Handle

; 41   : {

  0010d	55		 push	 ebp
  0010e	8b ec		 mov	 ebp, esp
  00110	83 ec 10	 sub	 esp, 16			; 00000010H
  00113	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	EventMgr::Handle(event);

  00116	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  00119	50		 push	 eax
  0011a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	e8 00 00 00 00	 call	 ?Handle@EventMgr@@UAEXPAVSOL_Event@@@Z ; EventMgr::Handle

; 43   : 
; 44   : 	if (event->type == SOL_Event::Null)

  00122	8b 4d 08	 mov	 ecx, DWORD PTR _event$[ebp]
  00125	33 d2		 xor	 edx, edx
  00127	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0012a	85 d2		 test	 edx, edx
  0012c	75 05		 jne	 SHORT $L58640

; 45   : 		return;

  0012e	e9 91 00 00 00	 jmp	 $L58639
$L58640:

; 46   : 
; 47   : 	if(mouse) {

  00133	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3PAVSOL_Mouse@@A, 0 ; mouse
  0013a	74 47		 je	 SHORT $L58641

; 48   : 		mouse->GlobalPosSci(&(event->where));

  0013c	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  0013f	83 c0 10	 add	 eax, 16			; 00000010H
  00142	50		 push	 eax
  00143	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3PAVSOL_Mouse@@A ; mouse
  00149	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3PAVSOL_Mouse@@A ; mouse
  00151	ff 52 1c	 call	 DWORD PTR [edx+28]

; 49   : 		mouse->GetSwiftInfo(
; 50   : 						&(event->zaxis),
; 51   : 						&(event->pitch),
; 52   : 						&(event->roll),
; 53   : 						&(event->yaw)
; 54   :       );

  00154	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  00157	83 c0 24	 add	 eax, 36			; 00000024H
  0015a	50		 push	 eax
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR _event$[ebp]
  0015e	83 c1 20	 add	 ecx, 32			; 00000020H
  00161	51		 push	 ecx
  00162	8b 55 08	 mov	 edx, DWORD PTR _event$[ebp]
  00165	83 c2 1c	 add	 edx, 28			; 0000001cH
  00168	52		 push	 edx
  00169	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  0016c	83 c0 18	 add	 eax, 24			; 00000018H
  0016f	50		 push	 eax
  00170	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3PAVSOL_Mouse@@A ; mouse
  00176	8b 11		 mov	 edx, DWORD PTR [ecx]
  00178	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3PAVSOL_Mouse@@A ; mouse
  0017e	ff 52 20	 call	 DWORD PTR [edx+32]

; 55   : 	} else

  00181	eb 18		 jmp	 SHORT $L58642
$L58641:

; 56   : 		event->where = SOL_Point(0,0);

  00183	6a 00		 push	 0
  00185	6a 00		 push	 0
  00187	8d 4d f4	 lea	 ecx, DWORD PTR $T58790[ebp]
  0018a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point
  0018f	50		 push	 eax
  00190	8b 4d 08	 mov	 ecx, DWORD PTR _event$[ebp]
  00193	83 c1 10	 add	 ecx, 16			; 00000010H
  00196	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
$L58642:

; 57   : 
; 58   : 	Kbd::Mod mods = GetModifiers();

  0019b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0019e	8b 10		 mov	 edx, DWORD PTR [eax]
  001a0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	ff 52 0c	 call	 DWORD PTR [edx+12]
  001a6	66 89 45 fc	 mov	 WORD PTR _mods$[ebp], ax

; 59   : //	event->modifiers |= mods;
; 60   : 	event->modifiers = mods;

  001aa	8b 45 08	 mov	 eax, DWORD PTR _event$[ebp]
  001ad	66 8b 4d fc	 mov	 cx, WORD PTR _mods$[ebp]
  001b1	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 61   : 
; 62   : #ifdef DEBUG
; 63   : 	if (event->type == SOL_Event::KeyDown && event->message == '`') {
; 64   : 		ToggleDebug();
; 65   : 		return;
; 66   : 	}
; 67   : 
; 68   : 	if (event->type == SOL_Event::KeyDown && event->message == '~') {
; 69   : 		CheckIntegrityRequest();
; 70   : 		return;
; 71   : 	}
; 72   : 
; 73   : 	if (event->type == SOL_Event::KeyDown && event->message == '@') {
; 74   : 		HotkeyRequest();
; 75   : 		return;
; 76   : 	}
; 77   : #endif
; 78   : 
; 79   : 	Post(event);

  001b5	8b 55 08	 mov	 edx, DWORD PTR _event$[ebp]
  001b8	52		 push	 edx
  001b9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001bc	8b 10		 mov	 edx, DWORD PTR [eax]
  001be	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001c1	ff 52 18	 call	 DWORD PTR [edx+24]
$L58639:

; 80   : }

  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 04 00	 ret	 4
?Handle@EventMgrWin@@MAEXPAVSOL_Event@@@Z ENDP		; EventMgrWin::Handle
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_this$ = -4
??0SOL_Point@@QAE@HH@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 21   : 	SOL_Point(Coord x, Coord y) : x(x), y(y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0SOL_Point@@QAE@HH@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??4SOL_Point@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Point::operator=, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	x = p.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 119  : 	y = p.y;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 120  : 	return *this;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 121  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4SOL_Point@@QAEAAV0@ABV0@@Z ENDP			; SOL_Point::operator=
_TEXT	ENDS
;	COMDAT ?FlushKeyboard@EventMgrWin@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4
?FlushKeyboard@EventMgrWin@@MAEXXZ PROC NEAR		; EventMgrWin::FlushKeyboard, COMDAT

; 21   : 	void		FlushKeyboard() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?FlushKeyboard@EventMgrWin@@MAEXXZ ENDP			; EventMgrWin::FlushKeyboard
_TEXT	ENDS
PUBLIC	??1EventMgrWin@@UAE@XZ				; EventMgrWin::~EventMgrWin
;	COMDAT ??_GEventMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GEventMgrWin@@UAEPAXI@Z PROC NEAR			; EventMgrWin::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1EventMgrWin@@UAE@XZ	; EventMgrWin::~EventMgrWin
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L58338
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L58338:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GEventMgrWin@@UAEPAXI@Z ENDP				; EventMgrWin::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1EventMgrWin@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1EventMgrWin@@UAE@XZ PROC NEAR			; EventMgrWin::~EventMgrWin, COMDAT

; 16   : 	~EventMgrWin() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7EventMgrWin@@6B@ ; EventMgrWin::`vftable'
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1EventMgr@@UAE@XZ	; EventMgr::~EventMgr
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1EventMgrWin@@UAE@XZ ENDP				; EventMgrWin::~EventMgrWin
_TEXT	ENDS
;	COMDAT ??1KbdMgr@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1KbdMgr@@UAE@XZ PROC NEAR				; KbdMgr::~KbdMgr, COMDAT

; 14   : 	virtual ~KbdMgr() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7KbdMgr@@6B@ ; KbdMgr::`vftable'
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1KbdMgr@@UAE@XZ ENDP					; KbdMgr::~KbdMgr
_TEXT	ENDS
;	COMDAT ??_GKbdMgr@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GKbdMgr@@UAEPAXI@Z PROC NEAR				; KbdMgr::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1KbdMgr@@UAE@XZ	; KbdMgr::~KbdMgr
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L58449
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L58449:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GKbdMgr@@UAEPAXI@Z ENDP				; KbdMgr::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ?LockStatus@KbdWin@@UAEGXZ
_TEXT	SEGMENT
_this$ = -4
?LockStatus@KbdWin@@UAEGXZ PROC NEAR			; KbdWin::LockStatus, COMDAT

; 11   : 	Lock	LockStatus() { return 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 33 c0	 xor	 ax, ax
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?LockStatus@KbdWin@@UAEGXZ ENDP				; KbdWin::LockStatus
_TEXT	ENDS
;	COMDAT ?Get@KbdMgrWin@@UAEHPAVSOL_Event@@@Z
_TEXT	SEGMENT
_this$ = -4
?Get@KbdMgrWin@@UAEHPAVSOL_Event@@@Z PROC NEAR		; KbdMgrWin::Get, COMDAT

; 21   : 	Bool	Get(SOL_Event*)				{return True;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?Get@KbdMgrWin@@UAEHPAVSOL_Event@@@Z ENDP		; KbdMgrWin::Get
_TEXT	ENDS
;	COMDAT ?Modifiers@KbdMgrWin@@UAEGXZ
_TEXT	SEGMENT
_this$ = -4
?Modifiers@KbdMgrWin@@UAEGXZ PROC NEAR			; KbdMgrWin::Modifiers, COMDAT

; 22   : 	Kbd::Mod	Modifiers()					{return keyboard.Modifiers();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00013	ff 52 04	 call	 DWORD PTR [edx+4]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Modifiers@KbdMgrWin@@UAEGXZ ENDP			; KbdMgrWin::Modifiers
_TEXT	ENDS
END

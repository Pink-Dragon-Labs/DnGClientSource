	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Graphmw.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Area@SOL_Rect@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Offset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ASOLPalette@@QBEABVRgb24F@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?View@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Loop@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cel@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@RectList@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ARectList@@QAEAAVSOL_Rect@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShowList@Screen@@QAEAAVRectList@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Screen@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4Screen@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CycleMap@PaletteMgrIndex@@UBEPBEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPercent@PaletteMgrIndex@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPause@PaletteMgrIndex@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PaletteMgrTrue@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrTrue@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrTrue@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PaletteMgrIWin@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrIWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateHardware@PaletteMgrIWin@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrIWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PaletteMgrTWin@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrTWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateHardware@PaletteMgrTWin@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrTWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Cursor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Cursor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenCount@GraphicsMgrWin@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VisibleScreen@GraphicsMgrWin@@UAEAAVScreen@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShakeScreen@GraphicsMgrWin@@UAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearLastScreen@GraphicsMgrWin@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GPalette@GraphicsMgrWin@@UAEAAVPaletteMgr@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GCursor@GraphicsMgrWin@@UAEAAVSOL_Cursor@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PriMap@GraphicsMgrWin@@UAEAAVBuffer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CalcLists@GraphicsMgrWin@@MAEXPAPAVDrawList@@PAPAVRectList@@AAVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CurrBuffer@GraphicsMgrWin@@MAEPAVBuffer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrueColor@GraphicsMgrWin@@MBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateScreen@GraphicsMgrWin@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PointerDevice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPointerDevice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Mouse@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSwiftInfo@SOL_Mouse@@UBEHPAH000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSwift@SOL_Mouse@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Vibrate@SOL_Mouse@@UBEXHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetHotRectangleStatus@SOL_Mouse@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Mouse@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GGraphicsMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Screen@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7GraphicsMgrWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SOL_Cursor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgrTrue@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PointerDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SOL_Mouse@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgrIWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgrTWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?widthMod4@@3KA					; widthMod4
PUBLIC	?bmiHdr@@3UBMI@@A				; bmiHdr
PUBLIC	?colorUse@@3IA					; colorUse
_BSS	SEGMENT
?widthMod4@@3KA DD 01H DUP (?)				; widthMod4
?bmiHdr@@3UBMI@@A DB 0428H DUP (?)			; bmiHdr
?colorUse@@3IA DD 01H DUP (?)				; colorUse
_BSS	ENDS
PUBLIC	??0PaletteMgrIWin@@QAE@XZ			; PaletteMgrIWin::PaletteMgrIWin
PUBLIC	??0PaletteMgrTWin@@QAE@XZ			; PaletteMgrTWin::PaletteMgrTWin
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
PUBLIC	?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z ; MemID::Get
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
PUBLIC	??0GraphicsMgrWin@@QAE@HH@Z			; GraphicsMgrWin::GraphicsMgrWin
PUBLIC	?ScreenCount@GraphicsMgrWin@@UBEHXZ		; GraphicsMgrWin::ScreenCount
PUBLIC	?UpdateScreen@GraphicsMgrWin@@UAEXXZ		; GraphicsMgrWin::UpdateScreen
PUBLIC	?VisibleScreen@GraphicsMgrWin@@UAEAAVScreen@@XZ	; GraphicsMgrWin::VisibleScreen
PUBLIC	?PlayMovie@GraphicsMgrWin@@UAEXPADHHH@Z		; GraphicsMgrWin::PlayMovie
PUBLIC	?SetVideoForMovies@GraphicsMgrWin@@UAEXXZ	; GraphicsMgrWin::SetVideoForMovies
PUBLIC	?SetVideoForSpeed@GraphicsMgrWin@@UAEXXZ	; GraphicsMgrWin::SetVideoForSpeed
PUBLIC	?ShakeScreen@GraphicsMgrWin@@UAEXHH@Z		; GraphicsMgrWin::ShakeScreen
PUBLIC	?Repaint@GraphicsMgrWin@@UAEXABVSOL_Rect@@@Z	; GraphicsMgrWin::Repaint
PUBLIC	?ClearLastScreen@GraphicsMgrWin@@UAEXXZ		; GraphicsMgrWin::ClearLastScreen
PUBLIC	?GPalette@GraphicsMgrWin@@UAEAAVPaletteMgr@@XZ	; GraphicsMgrWin::GPalette
PUBLIC	?GCursor@GraphicsMgrWin@@UAEAAVSOL_Cursor@@XZ	; GraphicsMgrWin::GCursor
PUBLIC	?PriMap@GraphicsMgrWin@@UAEAAVBuffer@@XZ	; GraphicsMgrWin::PriMap
PUBLIC	?AlterVMAP@GraphicsMgrWin@@UAEXPBVSOLPalette@@0HPAD@Z ; GraphicsMgrWin::AlterVMAP
PUBLIC	?CalcLists@GraphicsMgrWin@@MAEXPAPAVDrawList@@PAPAVRectList@@AAVSOL_Rect@@@Z ; GraphicsMgrWin::CalcLists
PUBLIC	?ResizeVmap@GraphicsMgrWin@@MAEXHH@Z		; GraphicsMgrWin::ResizeVmap
PUBLIC	?ShowBits@GraphicsMgrWin@@MAEXXZ		; GraphicsMgrWin::ShowBits
PUBLIC	?CurrBuffer@GraphicsMgrWin@@MAEPAVBuffer@@XZ	; GraphicsMgrWin::CurrBuffer
PUBLIC	?TrueColor@GraphicsMgrWin@@MBEHXZ		; GraphicsMgrWin::TrueColor
PUBLIC	??0Screen@@QAE@HH@Z				; Screen::Screen
PUBLIC	??_7GraphicsMgrWin@@6B@				; GraphicsMgrWin::`vftable'
PUBLIC	??_GGraphicsMgrWin@@UAEPAXI@Z			; GraphicsMgrWin::`scalar deleting destructor'
PUBLIC	??_EGraphicsMgrWin@@UAEPAXI@Z			; GraphicsMgrWin::`vector deleting destructor'
PUBLIC	??1Screen@@QAE@XZ				; Screen::~Screen
EXTRN	??0GraphicsMgr@@QAE@HH@Z:NEAR			; GraphicsMgr::GraphicsMgr
EXTRN	??1GraphicsMgr@@UAE@XZ:NEAR			; GraphicsMgr::~GraphicsMgr
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	??0BufferWin@@QAE@HHPAE@Z:NEAR			; BufferWin::BufferWin
EXTRN	?FrameOut@GraphicsMgr@@UAEXHVSOL_Rect@@@Z:NEAR	; GraphicsMgr::FrameOut
EXTRN	?MovieFrameOut@GraphicsMgr@@UAEXVSOL_Rect@@@Z:NEAR ; GraphicsMgr::MovieFrameOut
EXTRN	?PalMorphFrameOut@GraphicsMgr@@UAEXPADPAVPlaneShowStyle@@@Z:NEAR ; GraphicsMgr::PalMorphFrameOut
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??0CursorWin@@QAE@XZ:NEAR			; CursorWin::CursorWin
EXTRN	??0CursorWinClr@@QAE@ABVBufferWin@@@Z:NEAR	; CursorWinClr::CursorWinClr
EXTRN	?vmapWidth@@3HA:DWORD				; vmapWidth
EXTRN	?vmapHeight@@3HA:DWORD				; vmapHeight
EXTRN	?TRUECOLOR@@3HA:DWORD				; TRUECOLOR
EXTRN	?COLORCURSOR@@3HA:DWORD				; COLORCURSOR
;	COMDAT ??_7GraphicsMgrWin@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\Graphmw.cpp
CONST	SEGMENT
??_7GraphicsMgrWin@@6B@ DD FLAT:??_EGraphicsMgrWin@@UAEPAXI@Z ; GraphicsMgrWin::`vftable'
	DD	FLAT:?ScreenCount@GraphicsMgrWin@@UBEHXZ
	DD	FLAT:?AlterVMAP@GraphicsMgrWin@@UAEXPBVSOLPalette@@0HPAD@Z
	DD	FLAT:?ClearLastScreen@GraphicsMgrWin@@UAEXXZ
	DD	FLAT:?CurrBuffer@GraphicsMgrWin@@MAEPAVBuffer@@XZ
	DD	FLAT:?FrameOut@GraphicsMgr@@UAEXHVSOL_Rect@@@Z
	DD	FLAT:?GCursor@GraphicsMgrWin@@UAEAAVSOL_Cursor@@XZ
	DD	FLAT:?GPalette@GraphicsMgrWin@@UAEAAVPaletteMgr@@XZ
	DD	FLAT:?MovieFrameOut@GraphicsMgr@@UAEXVSOL_Rect@@@Z
	DD	FLAT:?PalMorphFrameOut@GraphicsMgr@@UAEXPADPAVPlaneShowStyle@@@Z
	DD	FLAT:?PriMap@GraphicsMgrWin@@UAEAAVBuffer@@XZ
	DD	FLAT:?PlayMovie@GraphicsMgrWin@@UAEXPADHHH@Z
	DD	FLAT:?Repaint@GraphicsMgrWin@@UAEXABVSOL_Rect@@@Z
	DD	FLAT:?SetVideoForMovies@GraphicsMgrWin@@UAEXXZ
	DD	FLAT:?SetVideoForSpeed@GraphicsMgrWin@@UAEXXZ
	DD	FLAT:?ShakeScreen@GraphicsMgrWin@@UAEXHH@Z
	DD	FLAT:?ShowBits@GraphicsMgrWin@@MAEXXZ
	DD	FLAT:?VisibleScreen@GraphicsMgrWin@@UAEAAVScreen@@XZ
	DD	FLAT:?CalcLists@GraphicsMgrWin@@MAEXPAPAVDrawList@@PAPAVRectList@@AAVSOL_Rect@@@Z
	DD	FLAT:?ResizeVmap@GraphicsMgrWin@@MAEXHH@Z
	DD	FLAT:?UpdateScreen@GraphicsMgrWin@@UAEXXZ
	DD	FLAT:?TrueColor@GraphicsMgrWin@@MBEHXZ
CONST	ENDS
xdata$x	SEGMENT
$T61044	DD	019930520H
	DD	06H
	DD	FLAT:$T61047
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T61047	DD	0ffffffffH
	DD	FLAT:$L61035
	DD	00H
	DD	FLAT:$L61036
	DD	01H
	DD	FLAT:$L61037
	DD	01H
	DD	FLAT:$L61038
	DD	01H
	DD	FLAT:$L61039
	DD	01H
	DD	FLAT:$L61040
xdata$x	ENDS
_TEXT	SEGMENT
_xdim$ = 8
_ydim$ = 12
_this$ = -52
_i$60590 = -16
$T61019 = -20
$T61020 = -24
$T61023 = -28
$T61024 = -32
$T61027 = -36
$T61028 = -40
$T61031 = -44
$T61032 = -48
__$EHRec$ = -12
??0GraphicsMgrWin@@QAE@HH@Z PROC NEAR			; GraphicsMgrWin::GraphicsMgrWin

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L61045
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 38	 sub	 esp, 56			; 00000038H
  0001b	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _ydim$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _xdim$[ebp]
  00025	51		 push	 ecx
  00026	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0GraphicsMgr@@QAE@HH@Z ; GraphicsMgr::GraphicsMgr
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00035	8b 55 0c	 mov	 edx, DWORD PTR _ydim$[ebp]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR _xdim$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	81 c1 98 11 00
	00		 add	 ecx, 4504		; 00001198H
  00046	e8 00 00 00 00	 call	 ??0Screen@@QAE@HH@Z	; Screen::Screen
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004f	6a 00		 push	 0
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vmapHeight@@3HA ; vmapHeight
  00057	51		 push	 ecx
  00058	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  0005e	83 c2 03	 add	 edx, 3
  00061	c1 fa 02	 sar	 edx, 2
  00064	c1 e2 02	 shl	 edx, 2
  00067	52		 push	 edx
  00068	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	81 c1 e8 22 00
	00		 add	 ecx, 8936		; 000022e8H
  00071	e8 00 00 00 00	 call	 ??0BufferWin@@QAE@HHPAE@Z ; BufferWin::BufferWin
  00076	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	81 c1 0c 23 00
	00		 add	 ecx, 8972		; 0000230cH
  0007f	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00084	6a 00		 push	 0
  00086	8b 45 0c	 mov	 eax, DWORD PTR _ydim$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _xdim$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	81 c1 10 23 00
	00		 add	 ecx, 8976		; 00002310H
  00097	e8 00 00 00 00	 call	 ??0BufferWin@@QAE@HHPAE@Z ; BufferWin::BufferWin
  0009c	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	81 c1 20 23 00
	00		 add	 ecx, 8992		; 00002320H
  000a5	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  000aa	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000ad	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7GraphicsMgrWin@@6B@ ; GraphicsMgrWin::`vftable'

; 31   : 	vmapID.Get(MemBitmap, M4(vmapWidth) * vmapHeight + 1000, VmapHandle);

  000b3	6a 00		 push	 0
  000b5	6a 1b		 push	 27			; 0000001bH
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  000bc	83 c0 03	 add	 eax, 3
  000bf	c1 f8 02	 sar	 eax, 2
  000c2	c1 e0 02	 shl	 eax, 2
  000c5	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?vmapHeight@@3HA ; vmapHeight
  000cc	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  000d1	50		 push	 eax
  000d2	6a 4b		 push	 75			; 0000004bH
  000d4	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	81 c1 0c 23 00
	00		 add	 ecx, 8972		; 0000230cH
  000dd	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z ; MemID::Get

; 32   : 	buffer.start = (uchar*) *vmapID;

  000e2	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	81 c1 0c 23 00
	00		 add	 ecx, 8972		; 0000230cH
  000eb	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  000f0	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	89 81 ec 22 00
	00		 mov	 DWORD PTR [ecx+8940], eax

; 33   :    buffer.Clear(SOL_BLACK);

  000f9	6a 00		 push	 0
  000fb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	81 c1 e8 22 00
	00		 add	 ecx, 8936		; 000022e8H
  00104	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00107	8b 82 e8 22 00
	00		 mov	 eax, DWORD PTR [edx+8936]
  0010d	ff 50 04	 call	 DWORD PTR [eax+4]

; 34   : 
; 35   : 	if (TRUECOLOR)

  00110	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TRUECOLOR@@3HA, 0 ; TRUECOLOR
  00117	74 46		 je	 SHORT $L60564

; 36   : 		palmgr = New PaletteMgrTWin();

  00119	68 60 11 00 00	 push	 4448			; 00001160H
  0011e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00123	83 c4 04	 add	 esp, 4
  00126	89 45 e8	 mov	 DWORD PTR $T61020[ebp], eax
  00129	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0012d	83 7d e8 00	 cmp	 DWORD PTR $T61020[ebp], 0
  00131	74 0d		 je	 SHORT $L61021
  00133	8b 4d e8	 mov	 ecx, DWORD PTR $T61020[ebp]
  00136	e8 00 00 00 00	 call	 ??0PaletteMgrTWin@@QAE@XZ ; PaletteMgrTWin::PaletteMgrTWin
  0013b	89 45 c8	 mov	 DWORD PTR -56+[ebp], eax
  0013e	eb 07		 jmp	 SHORT $L61022
$L61021:
  00140	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR -56+[ebp], 0
$L61022:
  00147	8b 4d c8	 mov	 ecx, DWORD PTR -56+[ebp]
  0014a	89 4d ec	 mov	 DWORD PTR $T61019[ebp], ecx
  0014d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00151	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00154	8b 45 ec	 mov	 eax, DWORD PTR $T61019[ebp]
  00157	89 82 f8 22 00
	00		 mov	 DWORD PTR [edx+8952], eax

; 37   : 	else

  0015d	eb 44		 jmp	 SHORT $L60569
$L60564:

; 38   : 		palmgr = New PaletteMgrIWin();

  0015f	68 60 11 00 00	 push	 4448			; 00001160H
  00164	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00169	83 c4 04	 add	 esp, 4
  0016c	89 45 e0	 mov	 DWORD PTR $T61024[ebp], eax
  0016f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00173	83 7d e0 00	 cmp	 DWORD PTR $T61024[ebp], 0
  00177	74 0d		 je	 SHORT $L61025
  00179	8b 4d e0	 mov	 ecx, DWORD PTR $T61024[ebp]
  0017c	e8 00 00 00 00	 call	 ??0PaletteMgrIWin@@QAE@XZ ; PaletteMgrIWin::PaletteMgrIWin
  00181	89 45 c4	 mov	 DWORD PTR -60+[ebp], eax
  00184	eb 07		 jmp	 SHORT $L61026
$L61025:
  00186	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR -60+[ebp], 0
$L61026:
  0018d	8b 4d c4	 mov	 ecx, DWORD PTR -60+[ebp]
  00190	89 4d e4	 mov	 DWORD PTR $T61023[ebp], ecx
  00193	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00197	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0019a	8b 45 e4	 mov	 eax, DWORD PTR $T61023[ebp]
  0019d	89 82 f8 22 00
	00		 mov	 DWORD PTR [edx+8952], eax
$L60569:

; 39   : 
; 40   : 	clrCursor = (CursorWin *)New CursorWinClr(buffer);

  001a3	68 08 01 00 00	 push	 264			; 00000108H
  001a8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001ad	83 c4 04	 add	 esp, 4
  001b0	89 45 d8	 mov	 DWORD PTR $T61028[ebp], eax
  001b3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001b7	83 7d d8 00	 cmp	 DWORD PTR $T61028[ebp], 0
  001bb	74 17		 je	 SHORT $L61029
  001bd	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c0	81 c1 e8 22 00
	00		 add	 ecx, 8936		; 000022e8H
  001c6	51		 push	 ecx
  001c7	8b 4d d8	 mov	 ecx, DWORD PTR $T61028[ebp]
  001ca	e8 00 00 00 00	 call	 ??0CursorWinClr@@QAE@ABVBufferWin@@@Z ; CursorWinClr::CursorWinClr
  001cf	89 45 c0	 mov	 DWORD PTR -64+[ebp], eax
  001d2	eb 07		 jmp	 SHORT $L61030
$L61029:
  001d4	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR -64+[ebp], 0
$L61030:
  001db	8b 55 c0	 mov	 edx, DWORD PTR -64+[ebp]
  001de	89 55 dc	 mov	 DWORD PTR $T61027[ebp], edx
  001e1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001e5	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  001e8	8b 4d dc	 mov	 ecx, DWORD PTR $T61027[ebp]
  001eb	89 88 00 23 00
	00		 mov	 DWORD PTR [eax+8960], ecx

; 41   : 	winCursor = New CursorWin();

  001f1	6a 40		 push	 64			; 00000040H
  001f3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001f8	83 c4 04	 add	 esp, 4
  001fb	89 45 d0	 mov	 DWORD PTR $T61032[ebp], eax
  001fe	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00202	83 7d d0 00	 cmp	 DWORD PTR $T61032[ebp], 0
  00206	74 0d		 je	 SHORT $L61033
  00208	8b 4d d0	 mov	 ecx, DWORD PTR $T61032[ebp]
  0020b	e8 00 00 00 00	 call	 ??0CursorWin@@QAE@XZ	; CursorWin::CursorWin
  00210	89 45 bc	 mov	 DWORD PTR -68+[ebp], eax
  00213	eb 07		 jmp	 SHORT $L61034
$L61033:
  00215	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR -68+[ebp], 0
$L61034:
  0021c	8b 55 bc	 mov	 edx, DWORD PTR -68+[ebp]
  0021f	89 55 d4	 mov	 DWORD PTR $T61031[ebp], edx
  00222	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00226	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00229	8b 4d d4	 mov	 ecx, DWORD PTR $T61031[ebp]
  0022c	89 88 04 23 00
	00		 mov	 DWORD PTR [eax+8964], ecx

; 42   : 
; 43   : 	if (COLORCURSOR)

  00232	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?COLORCURSOR@@3HA, 0 ; COLORCURSOR
  00239	74 14		 je	 SHORT $L60583

; 44   : 		cursor = clrCursor;

  0023b	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0023e	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00241	8b 88 00 23 00
	00		 mov	 ecx, DWORD PTR [eax+8960]
  00247	89 8a fc 22 00
	00		 mov	 DWORD PTR [edx+8956], ecx

; 45   : 	else

  0024d	eb 12		 jmp	 SHORT $L60584
$L60583:

; 46   : 		cursor = winCursor;

  0024f	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00252	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00255	8b 88 04 23 00
	00		 mov	 ecx, DWORD PTR [eax+8964]
  0025b	89 8a fc 22 00
	00		 mov	 DWORD PTR [edx+8956], ecx
$L60584:

; 47   : 
; 48   : 	// Set up the DIB header
; 49   : 	bmiHdr.bmih.biSize =				(DWORD)sizeof(BITMAPINFOHEADER);

  00261	c7 05 00 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?bmiHdr@@3UBMI@@A, 40 ; 00000028H

; 50   : 	bmiHdr.bmih.biPlanes =			1;

  0026b	66 c7 05 0c 00
	00 00 01 00	 mov	 WORD PTR ?bmiHdr@@3UBMI@@A+12, 1

; 51   : 	bmiHdr.bmih.biBitCount =	 	8;

  00274	66 c7 05 0e 00
	00 00 08 00	 mov	 WORD PTR ?bmiHdr@@3UBMI@@A+14, 8

; 52   : 	bmiHdr.bmih.biCompression = 	0;

  0027d	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bmiHdr@@3UBMI@@A+16, 0

; 53   : 	bmiHdr.bmih.biSizeImage =		0;

  00287	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bmiHdr@@3UBMI@@A+20, 0

; 54   : 	bmiHdr.bmih.biXPelsPerMeter =	0;

  00291	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bmiHdr@@3UBMI@@A+24, 0

; 55   : 	bmiHdr.bmih.biYPelsPerMeter =	0;

  0029b	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bmiHdr@@3UBMI@@A+28, 0

; 56   : 	bmiHdr.bmih.biClrUsed =			MAXPALETTE;

  002a5	c7 05 20 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?bmiHdr@@3UBMI@@A+32, 256 ; 00000100H

; 57   : 	bmiHdr.bmih.biClrImportant =	MAXPALETTE;

  002af	c7 05 24 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?bmiHdr@@3UBMI@@A+36, 256 ; 00000100H

; 58   : 
; 59   : 	widthMod4 =			(DWORD)M4(vmapWidth);

  002b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  002bf	83 c2 03	 add	 edx, 3
  002c2	c1 fa 02	 sar	 edx, 2
  002c5	c1 e2 02	 shl	 edx, 2
  002c8	89 15 00 00 00
	00		 mov	 DWORD PTR ?widthMod4@@3KA, edx ; widthMod4

; 60   : 
; 61   : 	if (TRUECOLOR) {

  002ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TRUECOLOR@@3HA, 0 ; TRUECOLOR
  002d5	74 0c		 je	 SHORT $L60588

; 62   : 		colorUse = DIB_RGB_COLORS;

  002d7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?colorUse@@3IA, 0 ; colorUse

; 63   : 	} else {

  002e1	eb 36		 jmp	 SHORT $L60593
$L60588:

; 64   : 		colorUse = DIB_PAL_COLORS;

  002e3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?colorUse@@3IA, 1 ; colorUse

; 65   : 		// set index values to identity
; 66   : 		for (int i = 0; i < MAXPALETTE; i++)

  002ed	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$60590[ebp], 0
  002f4	eb 09		 jmp	 SHORT $L60591
$L60592:
  002f6	8b 45 f0	 mov	 eax, DWORD PTR _i$60590[ebp]
  002f9	83 c0 01	 add	 eax, 1
  002fc	89 45 f0	 mov	 DWORD PTR _i$60590[ebp], eax
$L60591:
  002ff	81 7d f0 00 01
	00 00		 cmp	 DWORD PTR _i$60590[ebp], 256 ; 00000100H
  00306	7d 11		 jge	 SHORT $L60593

; 67   : 			bmiHdr.colorix [i] = i;

  00308	8b 4d f0	 mov	 ecx, DWORD PTR _i$60590[ebp]
  0030b	66 8b 55 f0	 mov	 dx, WORD PTR _i$60590[ebp]
  0030f	66 89 14 4d 28
	00 00 00	 mov	 WORD PTR ?bmiHdr@@3UBMI@@A[ecx*2+40], dx
  00317	eb dd		 jmp	 SHORT $L60592
$L60593:

; 69   : }

  00319	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00320	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00323	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00326	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0032d	8b e5		 mov	 esp, ebp
  0032f	5d		 pop	 ebp
  00330	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L61035:
  00000	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1GraphicsMgr@@UAE@XZ	; GraphicsMgr::~GraphicsMgr
  00008	c3		 ret	 0
$L61036:
  00009	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 98 11 00
	00		 add	 ecx, 4504		; 00001198H
  00012	e8 00 00 00 00	 call	 ??1Screen@@QAE@XZ	; Screen::~Screen
  00017	c3		 ret	 0
$L61037:
  00018	8b 45 e8	 mov	 eax, DWORD PTR $T61020[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00021	59		 pop	 ecx
  00022	c3		 ret	 0
$L61038:
  00023	8b 45 e0	 mov	 eax, DWORD PTR $T61024[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
$L61039:
  0002e	8b 45 d8	 mov	 eax, DWORD PTR $T61028[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	59		 pop	 ecx
  00038	c3		 ret	 0
$L61040:
  00039	8b 45 d0	 mov	 eax, DWORD PTR $T61032[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	59		 pop	 ecx
  00043	c3		 ret	 0
$L61045:
  00044	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T61044
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0GraphicsMgrWin@@QAE@HH@Z ENDP			; GraphicsMgrWin::GraphicsMgrWin
PUBLIC	??1GraphicsMgrWin@@UAE@XZ			; GraphicsMgrWin::~GraphicsMgrWin
;	COMDAT ??_GGraphicsMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GGraphicsMgrWin@@UAEPAXI@Z PROC NEAR			; GraphicsMgrWin::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1GraphicsMgrWin@@UAE@XZ ; GraphicsMgrWin::~GraphicsMgrWin
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L60597
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L60597:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GGraphicsMgrWin@@UAEPAXI@Z ENDP			; GraphicsMgrWin::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1PlaneList@@QAE@XZ:NEAR			; PlaneList::~PlaneList
EXTRN	??1RectList@@QAE@XZ:NEAR			; RectList::~RectList
;	COMDAT xdata$x
xdata$x	SEGMENT
$T61054	DD	019930520H
	DD	01H
	DD	FLAT:$T61056
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T61056	DD	0ffffffffH
	DD	FLAT:$L61051
xdata$x	ENDS
;	COMDAT ??1Screen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1Screen@@QAE@XZ PROC NEAR				; Screen::~Screen, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L61055
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00023	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 a4 01 00
	00		 add	 ecx, 420		; 000001a4H
  0002c	e8 00 00 00 00	 call	 ??1RectList@@QAE@XZ	; RectList::~RectList
  00031	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ??1PlaneList@@QAE@XZ	; PlaneList::~PlaneList
  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L61051:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1PlaneList@@QAE@XZ	; PlaneList::~PlaneList
  00008	c3		 ret	 0
$L61055:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T61054
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1Screen@@QAE@XZ ENDP					; Screen::~Screen
PUBLIC	?Free@MemID@@QAEXXZ				; MemID::Free
xdata$x	SEGMENT
$T61075	DD	019930520H
	DD	02H
	DD	FLAT:$T61077
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T61077	DD	0ffffffffH
	DD	FLAT:$L61072
	DD	00H
	DD	FLAT:$L61073
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -40
$T61060 = -16
$T61061 = -20
$T61064 = -24
$T61065 = -28
$T61068 = -32
$T61069 = -36
__$EHRec$ = -12
??1GraphicsMgrWin@@UAE@XZ PROC NEAR			; GraphicsMgrWin::~GraphicsMgrWin

; 73   : {

  00333	55		 push	 ebp
  00334	8b ec		 mov	 ebp, esp
  00336	6a ff		 push	 -1
  00338	68 00 00 00 00	 push	 $L61076
  0033d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00343	50		 push	 eax
  00344	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0034b	83 ec 28	 sub	 esp, 40			; 00000028H
  0034e	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  00351	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00354	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7GraphicsMgrWin@@6B@ ; GraphicsMgrWin::`vftable'
  0035a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 74   : 	vmapID.Free();

  00361	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00364	81 c1 0c 23 00
	00		 add	 ecx, 8972		; 0000230cH
  0036a	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 75   : 	delete clrCursor;

  0036f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00372	8b 91 00 23 00
	00		 mov	 edx, DWORD PTR [ecx+8960]
  00378	89 55 ec	 mov	 DWORD PTR $T61061[ebp], edx
  0037b	8b 45 ec	 mov	 eax, DWORD PTR $T61061[ebp]
  0037e	89 45 f0	 mov	 DWORD PTR $T61060[ebp], eax
  00381	83 7d f0 00	 cmp	 DWORD PTR $T61060[ebp], 0
  00385	74 11		 je	 SHORT $L61062
  00387	6a 01		 push	 1
  00389	8b 4d f0	 mov	 ecx, DWORD PTR $T61060[ebp]
  0038c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0038e	8b 4d f0	 mov	 ecx, DWORD PTR $T61060[ebp]
  00391	ff 12		 call	 DWORD PTR [edx]
  00393	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  00396	eb 07		 jmp	 SHORT $L61063
$L61062:
  00398	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR -44+[ebp], 0
$L61063:

; 76   : 	delete winCursor;

  0039f	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  003a2	8b 88 04 23 00
	00		 mov	 ecx, DWORD PTR [eax+8964]
  003a8	89 4d e4	 mov	 DWORD PTR $T61065[ebp], ecx
  003ab	8b 55 e4	 mov	 edx, DWORD PTR $T61065[ebp]
  003ae	89 55 e8	 mov	 DWORD PTR $T61064[ebp], edx
  003b1	83 7d e8 00	 cmp	 DWORD PTR $T61064[ebp], 0
  003b5	74 11		 je	 SHORT $L61066
  003b7	6a 01		 push	 1
  003b9	8b 45 e8	 mov	 eax, DWORD PTR $T61064[ebp]
  003bc	8b 10		 mov	 edx, DWORD PTR [eax]
  003be	8b 4d e8	 mov	 ecx, DWORD PTR $T61064[ebp]
  003c1	ff 12		 call	 DWORD PTR [edx]
  003c3	89 45 d0	 mov	 DWORD PTR -48+[ebp], eax
  003c6	eb 07		 jmp	 SHORT $L61067
$L61066:
  003c8	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR -48+[ebp], 0
$L61067:

; 77   : 	delete palmgr;

  003cf	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  003d2	8b 88 f8 22 00
	00		 mov	 ecx, DWORD PTR [eax+8952]
  003d8	89 4d dc	 mov	 DWORD PTR $T61069[ebp], ecx
  003db	8b 55 dc	 mov	 edx, DWORD PTR $T61069[ebp]
  003de	89 55 e0	 mov	 DWORD PTR $T61068[ebp], edx
  003e1	83 7d e0 00	 cmp	 DWORD PTR $T61068[ebp], 0
  003e5	74 11		 je	 SHORT $L61070
  003e7	6a 01		 push	 1
  003e9	8b 45 e0	 mov	 eax, DWORD PTR $T61068[ebp]
  003ec	8b 10		 mov	 edx, DWORD PTR [eax]
  003ee	8b 4d e0	 mov	 ecx, DWORD PTR $T61068[ebp]
  003f1	ff 12		 call	 DWORD PTR [edx]
  003f3	89 45 cc	 mov	 DWORD PTR -52+[ebp], eax
  003f6	eb 07		 jmp	 SHORT $L61071
$L61070:
  003f8	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR -52+[ebp], 0
$L61071:

; 78   : }

  003ff	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00403	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00406	81 c1 98 11 00
	00		 add	 ecx, 4504		; 00001198H
  0040c	e8 00 00 00 00	 call	 ??1Screen@@QAE@XZ	; Screen::~Screen
  00411	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00418	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0041b	e8 00 00 00 00	 call	 ??1GraphicsMgr@@UAE@XZ	; GraphicsMgr::~GraphicsMgr
  00420	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00423	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0042a	8b e5		 mov	 esp, ebp
  0042c	5d		 pop	 ebp
  0042d	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L61072:
  0004e	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1GraphicsMgr@@UAE@XZ	; GraphicsMgr::~GraphicsMgr
  00056	c3		 ret	 0
$L61073:
  00057	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	81 c1 98 11 00
	00		 add	 ecx, 4504		; 00001198H
  00060	e8 00 00 00 00	 call	 ??1Screen@@QAE@XZ	; Screen::~Screen
  00065	c3		 ret	 0
$L61076:
  00066	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T61075
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1GraphicsMgrWin@@UAE@XZ ENDP				; GraphicsMgrWin::~GraphicsMgrWin
PUBLIC	??0Rgb24@@QAE@XZ				; Rgb24::Rgb24
PUBLIC	??ASOLPalette@@QBEABVRgb24F@@H@Z		; SOLPalette::operator[]
PUBLIC	?Xdim@Screen@@QBEHXZ				; Screen::Xdim
PUBLIC	?Ydim@Screen@@QBEHXZ				; Screen::Ydim
_TEXT	SEGMENT
_myPal$ = 8
_newPal$ = 12
_palIndex$ = 16
_palArray$ = 20
_this$ = -292
_test$ = -264
_oldColor$ = -272
_newColor$ = -284
_pixels$ = -256
_i$ = -268
_j$ = -276
_index$ = -280
_oldVal$ = -288
_newVal$ = -260
?AlterVMAP@GraphicsMgrWin@@UAEXPBVSOLPalette@@0HPAD@Z PROC NEAR ; GraphicsMgrWin::AlterVMAP

; 82   : {

  0042e	55		 push	 ebp
  0042f	8b ec		 mov	 ebp, esp
  00431	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00437	56		 push	 esi
  00438	89 8d dc fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	int test	= palIndex;

  0043e	8b 45 10	 mov	 eax, DWORD PTR _palIndex$[ebp]
  00441	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _test$[ebp], eax

; 84   : 
; 85   : 	Rgb24 oldColor,newColor;

  00447	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _oldColor$[ebp]
  0044d	e8 00 00 00 00	 call	 ??0Rgb24@@QAE@XZ	; Rgb24::Rgb24
  00452	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _newColor$[ebp]
  00458	e8 00 00 00 00	 call	 ??0Rgb24@@QAE@XZ	; Rgb24::Rgb24

; 86   : 	uchar pixels[256];
; 87   : 	int i,j,index;
; 88   : 	long	oldVal, newVal;
; 89   : 
; 90   : 	for(i=0;i<256;i++) {

  0045d	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00467	eb 0f		 jmp	 SHORT $L60625
$L60626:
  00469	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0046f	83 c1 01	 add	 ecx, 1
  00472	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], ecx
$L60625:
  00478	81 bd f4 fe ff
	ff 00 01 00 00	 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00482	0f 8d 3c 03 00
	00		 jge	 $L60627

; 91   : 		pixels[i] = i;

  00488	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  0048e	8a 85 f4 fe ff
	ff		 mov	 al, BYTE PTR _i$[ebp]
  00494	88 84 15 00 ff
	ff ff		 mov	 BYTE PTR _pixels$[ebp+edx], al

; 92   : 		oldColor = (*myPal)[i];

  0049b	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  004a1	51		 push	 ecx
  004a2	8b 4d 08	 mov	 ecx, DWORD PTR _myPal$[ebp]
  004a5	e8 00 00 00 00	 call	 ??ASOLPalette@@QBEABVRgb24F@@H@Z ; SOLPalette::operator[]
  004aa	66 8b 10	 mov	 dx, WORD PTR [eax]
  004ad	66 89 95 f0 fe
	ff ff		 mov	 WORD PTR _oldColor$[ebp], dx
  004b4	8a 40 02	 mov	 al, BYTE PTR [eax+2]
  004b7	88 85 f2 fe ff
	ff		 mov	 BYTE PTR _oldColor$[ebp+2], al

; 93   : 
; 94   : 		if (palArray[i] == palIndex) {

  004bd	8b 4d 14	 mov	 ecx, DWORD PTR _palArray$[ebp]
  004c0	03 8d f4 fe ff
	ff		 add	 ecx, DWORD PTR _i$[ebp]
  004c6	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  004c9	3b 55 10	 cmp	 edx, DWORD PTR _palIndex$[ebp]
  004cc	0f 85 6c 01 00
	00		 jne	 $L60628

; 95   : 			oldVal = 65535 * 4; // get a number larger than we generate

  004d2	c7 85 e0 fe ff
	ff fc ff 03 00	 mov	 DWORD PTR _oldVal$[ebp], 262140 ; 0003fffcH

; 96   : 
; 97   : 			for(j=0;j<236;j++) {

  004dc	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  004e6	eb 0f		 jmp	 SHORT $L60629
$L60630:
  004e8	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  004ee	83 c0 01	 add	 eax, 1
  004f1	89 85 ec fe ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
$L60629:
  004f7	81 bd ec fe ff
	ff ec 00 00 00	 cmp	 DWORD PTR _j$[ebp], 236	; 000000ecH
  00501	0f 8d 24 01 00
	00		 jge	 $L60631

; 98   : 				if ((palArray[j] != palIndex) && (palArray[j] != 0)) {

  00507	8b 4d 14	 mov	 ecx, DWORD PTR _palArray$[ebp]
  0050a	03 8d ec fe ff
	ff		 add	 ecx, DWORD PTR _j$[ebp]
  00510	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00513	3b 55 10	 cmp	 edx, DWORD PTR _palIndex$[ebp]
  00516	0f 84 0a 01 00
	00		 je	 $L60633
  0051c	8b 45 14	 mov	 eax, DWORD PTR _palArray$[ebp]
  0051f	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _j$[ebp]
  00525	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00528	85 c9		 test	 ecx, ecx
  0052a	0f 84 f6 00 00
	00		 je	 $L60633

; 99   : 					newColor = (*myPal)[j];

  00530	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00536	52		 push	 edx
  00537	8b 4d 08	 mov	 ecx, DWORD PTR _myPal$[ebp]
  0053a	e8 00 00 00 00	 call	 ??ASOLPalette@@QBEABVRgb24F@@H@Z ; SOLPalette::operator[]
  0053f	66 8b 08	 mov	 cx, WORD PTR [eax]
  00542	66 89 8d e4 fe
	ff ff		 mov	 WORD PTR _newColor$[ebp], cx
  00549	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0054c	88 95 e6 fe ff
	ff		 mov	 BYTE PTR _newColor$[ebp+2], dl

; 100  : 					newVal   = (oldColor.red-newColor.red)*(oldColor.red-newColor.red) + 
; 101  : 								  (oldColor.blue-newColor.blue)*(oldColor.blue-newColor.blue) +
; 102  : 								  (oldColor.green-newColor.green)*(oldColor.green-newColor.green);

  00552	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _oldColor$[ebp]
  00558	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0055d	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _newColor$[ebp]
  00563	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00569	2b c1		 sub	 eax, ecx
  0056b	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _oldColor$[ebp]
  00571	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00577	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _newColor$[ebp]
  0057d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00583	2b d1		 sub	 edx, ecx
  00585	0f af c2	 imul	 eax, edx
  00588	8b 95 f2 fe ff
	ff		 mov	 edx, DWORD PTR _oldColor$[ebp+2]
  0058e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00594	8b 8d e6 fe ff
	ff		 mov	 ecx, DWORD PTR _newColor$[ebp+2]
  0059a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  005a0	2b d1		 sub	 edx, ecx
  005a2	8b 8d f2 fe ff
	ff		 mov	 ecx, DWORD PTR _oldColor$[ebp+2]
  005a8	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  005ae	8b b5 e6 fe ff
	ff		 mov	 esi, DWORD PTR _newColor$[ebp+2]
  005b4	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  005ba	2b ce		 sub	 ecx, esi
  005bc	0f af d1	 imul	 edx, ecx
  005bf	03 c2		 add	 eax, edx
  005c1	8b 95 f1 fe ff
	ff		 mov	 edx, DWORD PTR _oldColor$[ebp+1]
  005c7	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  005cd	8b 8d e5 fe ff
	ff		 mov	 ecx, DWORD PTR _newColor$[ebp+1]
  005d3	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  005d9	2b d1		 sub	 edx, ecx
  005db	8b 8d f1 fe ff
	ff		 mov	 ecx, DWORD PTR _oldColor$[ebp+1]
  005e1	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  005e7	8b b5 e5 fe ff
	ff		 mov	 esi, DWORD PTR _newColor$[ebp+1]
  005ed	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  005f3	2b ce		 sub	 ecx, esi
  005f5	0f af d1	 imul	 edx, ecx
  005f8	03 c2		 add	 eax, edx
  005fa	89 85 fc fe ff
	ff		 mov	 DWORD PTR _newVal$[ebp], eax

; 103  : 								  // sum of squares difference
; 104  : 					if (newVal < oldVal)	{

  00600	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _newVal$[ebp]
  00606	3b 95 e0 fe ff
	ff		 cmp	 edx, DWORD PTR _oldVal$[ebp]
  0060c	7d 18		 jge	 SHORT $L60633

; 105  : 						oldVal = newVal;

  0060e	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _newVal$[ebp]
  00614	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _oldVal$[ebp], eax

; 106  : 						index  = j;

  0061a	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00620	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _index$[ebp], ecx
$L60633:

; 109  : 			}

  00626	e9 bd fe ff ff	 jmp	 $L60630
$L60631:

; 110  : 			pixels[i] = index;		

  0062b	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  00631	8a 85 e8 fe ff
	ff		 mov	 al, BYTE PTR _index$[ebp]
  00637	88 84 15 00 ff
	ff ff		 mov	 BYTE PTR _pixels$[ebp+edx], al
$L60628:

; 112  : 
; 113  : 		if ((palIndex == 1) && (palArray[i] == 0)) {

  0063e	83 7d 10 01	 cmp	 DWORD PTR _palIndex$[ebp], 1
  00642	0f 85 77 01 00
	00		 jne	 $L60634
  00648	8b 4d 14	 mov	 ecx, DWORD PTR _palArray$[ebp]
  0064b	03 8d f4 fe ff
	ff		 add	 ecx, DWORD PTR _i$[ebp]
  00651	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00654	85 d2		 test	 edx, edx
  00656	0f 85 63 01 00
	00		 jne	 $L60634

; 114  : 			oldColor = (*myPal)[i];

  0065c	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00662	50		 push	 eax
  00663	8b 4d 08	 mov	 ecx, DWORD PTR _myPal$[ebp]
  00666	e8 00 00 00 00	 call	 ??ASOLPalette@@QBEABVRgb24F@@H@Z ; SOLPalette::operator[]
  0066b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0066e	66 89 8d f0 fe
	ff ff		 mov	 WORD PTR _oldColor$[ebp], cx
  00675	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00678	88 95 f2 fe ff
	ff		 mov	 BYTE PTR _oldColor$[ebp+2], dl

; 115  : 			oldVal = 65535 * 4; // get a number larger than we generate

  0067e	c7 85 e0 fe ff
	ff fc ff 03 00	 mov	 DWORD PTR _oldVal$[ebp], 262140 ; 0003fffcH

; 116  : 
; 117  : 			for(j=0;j<236;j++) {

  00688	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  00692	eb 0f		 jmp	 SHORT $L60635
$L60636:
  00694	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  0069a	83 c0 01	 add	 eax, 1
  0069d	89 85 ec fe ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
$L60635:
  006a3	81 bd ec fe ff
	ff ec 00 00 00	 cmp	 DWORD PTR _j$[ebp], 236	; 000000ecH
  006ad	0f 8d f9 00 00
	00		 jge	 $L60637

; 118  : 					newColor = (*newPal)[j];

  006b3	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  006b9	51		 push	 ecx
  006ba	8b 4d 0c	 mov	 ecx, DWORD PTR _newPal$[ebp]
  006bd	e8 00 00 00 00	 call	 ??ASOLPalette@@QBEABVRgb24F@@H@Z ; SOLPalette::operator[]
  006c2	66 8b 10	 mov	 dx, WORD PTR [eax]
  006c5	66 89 95 e4 fe
	ff ff		 mov	 WORD PTR _newColor$[ebp], dx
  006cc	8a 40 02	 mov	 al, BYTE PTR [eax+2]
  006cf	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _newColor$[ebp+2], al

; 119  : 					newVal   = (oldColor.red-newColor.red)*(oldColor.red-newColor.red) + 
; 120  : 								  (oldColor.blue-newColor.blue)*(oldColor.blue-newColor.blue) +
; 121  : 								  (oldColor.green-newColor.green)*(oldColor.green-newColor.green);

  006d5	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _oldColor$[ebp]
  006db	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  006e1	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _newColor$[ebp]
  006e7	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  006ed	2b ca		 sub	 ecx, edx
  006ef	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _oldColor$[ebp]
  006f5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  006fa	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _newColor$[ebp]
  00700	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00706	2b c2		 sub	 eax, edx
  00708	0f af c8	 imul	 ecx, eax
  0070b	8b 85 f2 fe ff
	ff		 mov	 eax, DWORD PTR _oldColor$[ebp+2]
  00711	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00716	8b 95 e6 fe ff
	ff		 mov	 edx, DWORD PTR _newColor$[ebp+2]
  0071c	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00722	2b c2		 sub	 eax, edx
  00724	8b 95 f2 fe ff
	ff		 mov	 edx, DWORD PTR _oldColor$[ebp+2]
  0072a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00730	8b b5 e6 fe ff
	ff		 mov	 esi, DWORD PTR _newColor$[ebp+2]
  00736	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0073c	2b d6		 sub	 edx, esi
  0073e	0f af c2	 imul	 eax, edx
  00741	03 c8		 add	 ecx, eax
  00743	8b 85 f1 fe ff
	ff		 mov	 eax, DWORD PTR _oldColor$[ebp+1]
  00749	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0074e	8b 95 e5 fe ff
	ff		 mov	 edx, DWORD PTR _newColor$[ebp+1]
  00754	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0075a	2b c2		 sub	 eax, edx
  0075c	8b 95 f1 fe ff
	ff		 mov	 edx, DWORD PTR _oldColor$[ebp+1]
  00762	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00768	8b b5 e5 fe ff
	ff		 mov	 esi, DWORD PTR _newColor$[ebp+1]
  0076e	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00774	2b d6		 sub	 edx, esi
  00776	0f af c2	 imul	 eax, edx
  00779	03 c8		 add	 ecx, eax
  0077b	89 8d fc fe ff
	ff		 mov	 DWORD PTR _newVal$[ebp], ecx

; 122  : 								  // sum of squares difference
; 123  : 					if (newVal < oldVal)	{

  00781	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _newVal$[ebp]
  00787	3b 85 e0 fe ff
	ff		 cmp	 eax, DWORD PTR _oldVal$[ebp]
  0078d	7d 18		 jge	 SHORT $L60638

; 124  : 						oldVal = newVal;

  0078f	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _newVal$[ebp]
  00795	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _oldVal$[ebp], ecx

; 125  : 						index  = j;

  0079b	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  007a1	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _index$[ebp], edx
$L60638:

; 127  : 		
; 128  : 			}

  007a7	e9 e8 fe ff ff	 jmp	 $L60636
$L60637:

; 129  : 			pixels[i] = index;		

  007ac	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  007b2	8a 8d e8 fe ff
	ff		 mov	 cl, BYTE PTR _index$[ebp]
  007b8	88 8c 05 00 ff
	ff ff		 mov	 BYTE PTR _pixels$[ebp+eax], cl
$L60634:

; 131  : 	}

  007bf	e9 a5 fc ff ff	 jmp	 $L60626
$L60627:

; 132  : 
; 133  : 	for(i=0;i<next.Xdim()*next.Ydim();i++)	{

  007c4	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  007ce	eb 0f		 jmp	 SHORT $L60639
$L60640:
  007d0	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  007d6	83 c2 01	 add	 edx, 1
  007d9	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], edx
$L60639:
  007df	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  007e5	83 c1 14	 add	 ecx, 20			; 00000014H
  007e8	e8 00 00 00 00	 call	 ?Xdim@Screen@@QBEHXZ	; Screen::Xdim
  007ed	8b f0		 mov	 esi, eax
  007ef	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  007f5	83 c1 14	 add	 ecx, 20			; 00000014H
  007f8	e8 00 00 00 00	 call	 ?Ydim@Screen@@QBEHXZ	; Screen::Ydim
  007fd	0f af f0	 imul	 esi, eax
  00800	39 b5 f4 fe ff
	ff		 cmp	 DWORD PTR _i$[ebp], esi
  00806	0f 8d e5 00 00
	00		 jge	 $L60641

; 134  : 		if ((palArray[buffer.start[i]] == palIndex)&&(palIndex==-1)) 	 // found odd pixel

  0080c	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00812	8b 88 ec 22 00
	00		 mov	 ecx, DWORD PTR [eax+8940]
  00818	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  0081e	33 c0		 xor	 eax, eax
  00820	8a 04 11	 mov	 al, BYTE PTR [ecx+edx]
  00823	8b 4d 14	 mov	 ecx, DWORD PTR _palArray$[ebp]
  00826	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0082a	3b 55 10	 cmp	 edx, DWORD PTR _palIndex$[ebp]
  0082d	75 39		 jne	 SHORT $L60642
  0082f	83 7d 10 ff	 cmp	 DWORD PTR _palIndex$[ebp], -1
  00833	75 33		 jne	 SHORT $L60642

; 135  : 				buffer.start[i] = (uchar) pixels[buffer.start[i]];	

  00835	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0083b	8b 88 ec 22 00
	00		 mov	 ecx, DWORD PTR [eax+8940]
  00841	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  00847	33 c0		 xor	 eax, eax
  00849	8a 04 11	 mov	 al, BYTE PTR [ecx+edx]
  0084c	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00852	8b 91 ec 22 00
	00		 mov	 edx, DWORD PTR [ecx+8940]
  00858	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0085e	8a 84 05 00 ff
	ff ff		 mov	 al, BYTE PTR _pixels$[ebp+eax]
  00865	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
$L60642:

; 138  : 			  ((palArray[buffer.start[i]] == 0)&&(palIndex==1)))	 	 // found odd pixel

  00868	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0086e	8b 91 ec 22 00
	00		 mov	 edx, DWORD PTR [ecx+8940]
  00874	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0087a	33 c9		 xor	 ecx, ecx
  0087c	8a 0c 02	 mov	 cl, BYTE PTR [edx+eax]
  0087f	8b 55 14	 mov	 edx, DWORD PTR _palArray$[ebp]
  00882	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00886	3b 45 10	 cmp	 eax, DWORD PTR _palIndex$[ebp]
  00889	75 06		 jne	 SHORT $L60646
  0088b	83 7d 10 01	 cmp	 DWORD PTR _palIndex$[ebp], 1
  0088f	74 28		 je	 SHORT $L60645
$L60646:
  00891	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00897	8b 91 ec 22 00
	00		 mov	 edx, DWORD PTR [ecx+8940]
  0089d	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  008a3	33 c9		 xor	 ecx, ecx
  008a5	8a 0c 02	 mov	 cl, BYTE PTR [edx+eax]
  008a8	8b 55 14	 mov	 edx, DWORD PTR _palArray$[ebp]
  008ab	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  008af	85 c0		 test	 eax, eax
  008b1	75 39		 jne	 SHORT $L60644
  008b3	83 7d 10 01	 cmp	 DWORD PTR _palIndex$[ebp], 1
  008b7	75 33		 jne	 SHORT $L60644
$L60645:

; 139  : 				buffer.start[i] = (uchar) pixels[buffer.start[i]];	

  008b9	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  008bf	8b 91 ec 22 00
	00		 mov	 edx, DWORD PTR [ecx+8940]
  008c5	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  008cb	33 c9		 xor	 ecx, ecx
  008cd	8a 0c 02	 mov	 cl, BYTE PTR [edx+eax]
  008d0	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  008d6	8b 82 ec 22 00
	00		 mov	 eax, DWORD PTR [edx+8940]
  008dc	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  008e2	8a 8c 0d 00 ff
	ff ff		 mov	 cl, BYTE PTR _pixels$[ebp+ecx]
  008e9	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
$L60644:

; 140  : 	}

  008ec	e9 df fe ff ff	 jmp	 $L60640
$L60641:

; 141  : }

  008f1	5e		 pop	 esi
  008f2	8b e5		 mov	 esp, ebp
  008f4	5d		 pop	 ebp
  008f5	c2 10 00	 ret	 16			; 00000010H
?AlterVMAP@GraphicsMgrWin@@UAEXPBVSOLPalette@@0HPAD@Z ENDP ; GraphicsMgrWin::AlterVMAP
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@ABV0@@Z			; SOL_Rect::SOL_Rect
PUBLIC	?Length@RectList@@QBEHXZ			; RectList::Length
PUBLIC	??ARectList@@QAEAAVSOL_Rect@@H@Z		; RectList::operator[]
PUBLIC	?ShowRect@GraphicsMgrWin@@IAEXPBVSOL_Rect@@PAE@Z ; GraphicsMgrWin::ShowRect
PUBLIC	?ShowList@Screen@@QAEAAVRectList@@XZ		; Screen::ShowList
EXTRN	?Clear@RectList@@QAEXXZ:NEAR			; RectList::Clear
_TEXT	SEGMENT
_this$ = -48
_i$ = -8
_showListSize$ = -4
_rect$60658 = -24
_rect$60663 = -40
?ShowBits@GraphicsMgrWin@@MAEXXZ PROC NEAR		; GraphicsMgrWin::ShowBits

; 145  : {

  008f8	55		 push	 ebp
  008f9	8b ec		 mov	 ebp, esp
  008fb	83 ec 3c	 sub	 esp, 60			; 0000003cH
  008fe	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 146  : int	i;
; 147  : 
; 148  : 	int showListSize = next.ShowList().Length();

  00901	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00904	83 c1 14	 add	 ecx, 20			; 00000014H
  00907	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  0090c	8b c8		 mov	 ecx, eax
  0090e	e8 00 00 00 00	 call	 ?Length@RectList@@QBEHXZ ; RectList::Length
  00913	89 45 fc	 mov	 DWORD PTR _showListSize$[ebp], eax

; 149  : 	if (!showListSize)

  00916	83 7d fc 00	 cmp	 DWORD PTR _showListSize$[ebp], 0
  0091a	75 05		 jne	 SHORT $L60653

; 150  : 		return;

  0091c	e9 90 01 00 00	 jmp	 $L60650
$L60653:

; 151  : 
; 152  : 	if (cursor == clrCursor) {

  00921	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00924	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00927	8b 90 fc 22 00
	00		 mov	 edx, DWORD PTR [eax+8956]
  0092d	3b 91 00 23 00
	00		 cmp	 edx, DWORD PTR [ecx+8960]
  00933	0f 85 21 01 00
	00		 jne	 $L60654

; 153  : 		for (i = 0;i < showListSize; i++)  {

  00939	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00940	eb 09		 jmp	 SHORT $L60655
$L60656:
  00942	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00945	83 c0 01	 add	 eax, 1
  00948	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L60655:
  0094b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0094e	3b 4d fc	 cmp	 ecx, DWORD PTR _showListSize$[ebp]
  00951	7d 5c		 jge	 SHORT $L60657

; 154  : 			SOL_Rect rect = next.ShowList()[i];

  00953	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00956	52		 push	 edx
  00957	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0095a	83 c1 14	 add	 ecx, 20			; 00000014H
  0095d	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00962	8b c8		 mov	 ecx, eax
  00964	e8 00 00 00 00	 call	 ??ARectList@@QAEAAVSOL_Rect@@H@Z ; RectList::operator[]
  00969	50		 push	 eax
  0096a	8d 4d e8	 lea	 ecx, DWORD PTR _rect$60658[ebp]
  0096d	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 155  : 			rect.A.x &= 0x7FFE;

  00972	8b 45 e8	 mov	 eax, DWORD PTR _rect$60658[ebp]
  00975	25 fe 7f 00 00	 and	 eax, 32766		; 00007ffeH
  0097a	89 45 e8	 mov	 DWORD PTR _rect$60658[ebp], eax

; 156  : 			rect.B.x |= 1;

  0097d	8b 4d f0	 mov	 ecx, DWORD PTR _rect$60658[ebp+8]
  00980	83 c9 01	 or	 ecx, 1
  00983	89 4d f0	 mov	 DWORD PTR _rect$60658[ebp+8], ecx

; 157  : 			GCursor().GonnaPaint(rect);

  00986	83 ec 10	 sub	 esp, 16			; 00000010H
  00989	8b cc		 mov	 ecx, esp
  0098b	8d 55 e8	 lea	 edx, DWORD PTR _rect$60658[ebp]
  0098e	52		 push	 edx
  0098f	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  00994	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00997	8b 10		 mov	 edx, DWORD PTR [eax]
  00999	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0099c	ff 52 18	 call	 DWORD PTR [edx+24]
  0099f	89 45 cc	 mov	 DWORD PTR -52+[ebp], eax
  009a2	8b 45 cc	 mov	 eax, DWORD PTR -52+[ebp]
  009a5	8b 10		 mov	 edx, DWORD PTR [eax]
  009a7	8b 4d cc	 mov	 ecx, DWORD PTR -52+[ebp]
  009aa	ff 52 20	 call	 DWORD PTR [edx+32]

; 158  : 		}

  009ad	eb 93		 jmp	 SHORT $L60656
$L60657:

; 159  : 		GCursor().PaintStarting();

  009af	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  009b2	8b 10		 mov	 edx, DWORD PTR [eax]
  009b4	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  009b7	ff 52 18	 call	 DWORD PTR [edx+24]
  009ba	89 45 c8	 mov	 DWORD PTR -56+[ebp], eax
  009bd	8b 45 c8	 mov	 eax, DWORD PTR -56+[ebp]
  009c0	8b 10		 mov	 edx, DWORD PTR [eax]
  009c2	8b 4d c8	 mov	 ecx, DWORD PTR -56+[ebp]
  009c5	ff 52 24	 call	 DWORD PTR [edx+36]

; 160  : 		for (i = 0; i < showListSize; i++)  {

  009c8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  009cf	eb 09		 jmp	 SHORT $L60660
$L60661:
  009d1	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  009d4	83 c0 01	 add	 eax, 1
  009d7	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L60660:
  009da	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  009dd	3b 4d fc	 cmp	 ecx, DWORD PTR _showListSize$[ebp]
  009e0	7d 4b		 jge	 SHORT $L60662

; 161  : 			SOL_Rect rect = next.ShowList()[i];

  009e2	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  009e5	52		 push	 edx
  009e6	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  009e9	83 c1 14	 add	 ecx, 20			; 00000014H
  009ec	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  009f1	8b c8		 mov	 ecx, eax
  009f3	e8 00 00 00 00	 call	 ??ARectList@@QAEAAVSOL_Rect@@H@Z ; RectList::operator[]
  009f8	50		 push	 eax
  009f9	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60663[ebp]
  009fc	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 162  : 			rect.A.x &= 0x7FFE;

  00a01	8b 45 d8	 mov	 eax, DWORD PTR _rect$60663[ebp]
  00a04	25 fe 7f 00 00	 and	 eax, 32766		; 00007ffeH
  00a09	89 45 d8	 mov	 DWORD PTR _rect$60663[ebp], eax

; 163  : 			rect.B.x |= 1;

  00a0c	8b 4d e0	 mov	 ecx, DWORD PTR _rect$60663[ebp+8]
  00a0f	83 c9 01	 or	 ecx, 1
  00a12	89 4d e0	 mov	 DWORD PTR _rect$60663[ebp+8], ecx

; 164  : 			ShowRect(&rect, buffer.start);

  00a15	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  00a18	8b 82 ec 22 00
	00		 mov	 eax, DWORD PTR [edx+8940]
  00a1e	50		 push	 eax
  00a1f	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60663[ebp]
  00a22	51		 push	 ecx
  00a23	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a26	e8 00 00 00 00	 call	 ?ShowRect@GraphicsMgrWin@@IAEXPBVSOL_Rect@@PAE@Z ; GraphicsMgrWin::ShowRect

; 165  : 		}

  00a2b	eb a4		 jmp	 SHORT $L60661
$L60662:

; 166  : 		GCursor().DonePainting();

  00a2d	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  00a30	8b 02		 mov	 eax, DWORD PTR [edx]
  00a32	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a35	ff 50 18	 call	 DWORD PTR [eax+24]
  00a38	89 45 c4	 mov	 DWORD PTR -60+[ebp], eax
  00a3b	8b 4d c4	 mov	 ecx, DWORD PTR -60+[ebp]
  00a3e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a40	8b 4d c4	 mov	 ecx, DWORD PTR -60+[ebp]
  00a43	ff 52 28	 call	 DWORD PTR [edx+40]

; 167  : 		next.ShowList().Clear();

  00a46	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a49	83 c1 14	 add	 ecx, 20			; 00000014H
  00a4c	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00a51	8b c8		 mov	 ecx, eax
  00a53	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear

; 168  : 	} else {

  00a58	eb 57		 jmp	 SHORT $L60664
$L60654:

; 169  : 		for (i = 0; i < showListSize; i++)

  00a5a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00a61	eb 09		 jmp	 SHORT $L60665
$L60666:
  00a63	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00a66	83 c0 01	 add	 eax, 1
  00a69	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L60665:
  00a6c	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00a6f	3b 4d fc	 cmp	 ecx, DWORD PTR _showListSize$[ebp]
  00a72	7d 2b		 jge	 SHORT $L60667

; 170  : 			ShowRect(&next.ShowList()[i], buffer.start);

  00a74	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  00a77	8b 82 ec 22 00
	00		 mov	 eax, DWORD PTR [edx+8940]
  00a7d	50		 push	 eax
  00a7e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00a81	51		 push	 ecx
  00a82	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a85	83 c1 14	 add	 ecx, 20			; 00000014H
  00a88	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00a8d	8b c8		 mov	 ecx, eax
  00a8f	e8 00 00 00 00	 call	 ??ARectList@@QAEAAVSOL_Rect@@H@Z ; RectList::operator[]
  00a94	50		 push	 eax
  00a95	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a98	e8 00 00 00 00	 call	 ?ShowRect@GraphicsMgrWin@@IAEXPBVSOL_Rect@@PAE@Z ; GraphicsMgrWin::ShowRect
  00a9d	eb c4		 jmp	 SHORT $L60666
$L60667:

; 171  : 		next.ShowList().Clear();

  00a9f	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00aa2	83 c1 14	 add	 ecx, 20			; 00000014H
  00aa5	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00aaa	8b c8		 mov	 ecx, eax
  00aac	e8 00 00 00 00	 call	 ?Clear@RectList@@QAEXXZ	; RectList::Clear
$L60664:
$L60650:

; 173  : }

  00ab1	8b e5		 mov	 esp, ebp
  00ab3	5d		 pop	 ebp
  00ab4	c3		 ret	 0
?ShowBits@GraphicsMgrWin@@MAEXXZ ENDP			; GraphicsMgrWin::ShowBits
_TEXT	ENDS
EXTRN	__imp__SetDIBitsToDevice@48:NEAR
EXTRN	?hMyDC@@3PAUHDC__@@A:DWORD			; hMyDC
EXTRN	?gameBorderX@@3HA:DWORD				; gameBorderX
EXTRN	?gameBorderY@@3HA:DWORD				; gameBorderY
_TEXT	SEGMENT
_dims$ = 8
_Buffer$ = 12
_this$ = -20
_top$ = -8
_left$ = -16
_bottom$ = -12
_right$ = -4
?ShowRect@GraphicsMgrWin@@IAEXPBVSOL_Rect@@PAE@Z PROC NEAR ; GraphicsMgrWin::ShowRect

; 178  : {

  00ab5	55		 push	 ebp
  00ab6	8b ec		 mov	 ebp, esp
  00ab8	83 ec 14	 sub	 esp, 20			; 00000014H
  00abb	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 179  : WORD top, left, bottom, right;
; 180  : 
; 181  : 	left = dims->A.x;

  00abe	8b 45 08	 mov	 eax, DWORD PTR _dims$[ebp]
  00ac1	66 8b 08	 mov	 cx, WORD PTR [eax]
  00ac4	66 89 4d f0	 mov	 WORD PTR _left$[ebp], cx

; 182  : 	top = dims->A.y;

  00ac8	8b 55 08	 mov	 edx, DWORD PTR _dims$[ebp]
  00acb	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  00acf	66 89 45 f8	 mov	 WORD PTR _top$[ebp], ax

; 183  : 	right = dims->B.x;

  00ad3	8b 4d 08	 mov	 ecx, DWORD PTR _dims$[ebp]
  00ad6	66 8b 51 08	 mov	 dx, WORD PTR [ecx+8]
  00ada	66 89 55 fc	 mov	 WORD PTR _right$[ebp], dx

; 184  : 	bottom = dims->B.y;

  00ade	8b 45 08	 mov	 eax, DWORD PTR _dims$[ebp]
  00ae1	66 8b 48 0c	 mov	 cx, WORD PTR [eax+12]
  00ae5	66 89 4d f4	 mov	 WORD PTR _bottom$[ebp], cx
$L60678:

; 185  : 
; 186  : 	// adjust left to DWORD boundary
; 187  : 	while (left & 3)

  00ae9	8b 55 f0	 mov	 edx, DWORD PTR _left$[ebp]
  00aec	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00af2	83 e2 03	 and	 edx, 3
  00af5	85 d2		 test	 edx, edx
  00af7	74 0e		 je	 SHORT $L60679

; 188  : 		left--;

  00af9	66 8b 45 f0	 mov	 ax, WORD PTR _left$[ebp]
  00afd	66 2d 01 00	 sub	 ax, 1
  00b01	66 89 45 f0	 mov	 WORD PTR _left$[ebp], ax
  00b05	eb e2		 jmp	 SHORT $L60678
$L60679:

; 189  : 	// adjust right+1 to DWORD boundary
; 190  : //	while ((right + 1) & 3)
; 191  : //		right++;
; 192  : 
; 193  : 
; 194  : 	bmiHdr.bmih.biWidth =			(DWORD)widthMod4;

  00b07	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?widthMod4@@3KA ; widthMod4
  00b0d	89 0d 04 00 00
	00		 mov	 DWORD PTR ?bmiHdr@@3UBMI@@A+4, ecx

; 195  : 	bmiHdr.bmih.biHeight =			(DWORD)vmapHeight;

  00b13	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?vmapHeight@@3HA ; vmapHeight
  00b19	89 15 08 00 00
	00		 mov	 DWORD PTR ?bmiHdr@@3UBMI@@A+8, edx

; 196  : 
; 197  : 	SetDIBitsToDevice (hMyDC,						//device context
; 198  : 							left + gameBorderX,		//destination X
; 199  : 							top + gameBorderY,		//destination Y
; 200  : 							right - left + 1,			//X-extent
; 201  : 							bottom - top + 1,			//Y-extent
; 202  : 							left,							//source X
; 203  : 							vmapHeight - bottom - 1,	//source Y
; 204  : 							0,								//first scan-line number
; 205  : 							vmapHeight,					//number of scan lines
; 206  : 							(LPSTR)Buffer,				//pointer to DIB
; 207  : 							(LPBITMAPINFO)&bmiHdr.bmih,	//pointer to header
; 208  : 							colorUse);					//indexed color table or RGB

  00b1f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?colorUse@@3IA ; colorUse
  00b24	50		 push	 eax
  00b25	68 00 00 00 00	 push	 OFFSET FLAT:?bmiHdr@@3UBMI@@A ; bmiHdr
  00b2a	8b 4d 0c	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  00b2d	51		 push	 ecx
  00b2e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?vmapHeight@@3HA ; vmapHeight
  00b34	52		 push	 edx
  00b35	6a 00		 push	 0
  00b37	8b 45 f4	 mov	 eax, DWORD PTR _bottom$[ebp]
  00b3a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00b3f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?vmapHeight@@3HA ; vmapHeight
  00b45	2b c8		 sub	 ecx, eax
  00b47	83 e9 01	 sub	 ecx, 1
  00b4a	51		 push	 ecx
  00b4b	8b 55 f0	 mov	 edx, DWORD PTR _left$[ebp]
  00b4e	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00b54	52		 push	 edx
  00b55	8b 45 f4	 mov	 eax, DWORD PTR _bottom$[ebp]
  00b58	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00b5d	8b 4d f8	 mov	 ecx, DWORD PTR _top$[ebp]
  00b60	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00b66	2b c1		 sub	 eax, ecx
  00b68	83 c0 01	 add	 eax, 1
  00b6b	50		 push	 eax
  00b6c	8b 55 fc	 mov	 edx, DWORD PTR _right$[ebp]
  00b6f	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00b75	8b 45 f0	 mov	 eax, DWORD PTR _left$[ebp]
  00b78	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00b7d	2b d0		 sub	 edx, eax
  00b7f	83 c2 01	 add	 edx, 1
  00b82	52		 push	 edx
  00b83	8b 4d f8	 mov	 ecx, DWORD PTR _top$[ebp]
  00b86	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00b8c	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gameBorderY@@3HA ; gameBorderY
  00b92	51		 push	 ecx
  00b93	8b 55 f0	 mov	 edx, DWORD PTR _left$[ebp]
  00b96	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00b9c	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gameBorderX@@3HA ; gameBorderX
  00ba2	52		 push	 edx
  00ba3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hMyDC@@3PAUHDC__@@A ; hMyDC
  00ba8	50		 push	 eax
  00ba9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDIBitsToDevice@48

; 209  : }

  00baf	8b e5		 mov	 esp, ebp
  00bb1	5d		 pop	 ebp
  00bb2	c2 08 00	 ret	 8
?ShowRect@GraphicsMgrWin@@IAEXPBVSOL_Rect@@PAE@Z ENDP	; GraphicsMgrWin::ShowRect
_fileName$ = 8
_tickCount$ = 12
_this$ = -12
_x$ = -4
_y$ = -8
?PlayMovie@GraphicsMgrWin@@UAEXPADHHH@Z PROC NEAR	; GraphicsMgrWin::PlayMovie

; 214  : {

  00bb5	55		 push	 ebp
  00bb6	8b ec		 mov	 ebp, esp
  00bb8	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00bbb	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 215  : #ifdef VFW
; 216  : 	char* x = fileName;

  00bbe	8b 45 08	 mov	 eax, DWORD PTR _fileName$[ebp]
  00bc1	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 217  : 	int y = tickCount;

  00bc4	8b 4d 0c	 mov	 ecx, DWORD PTR _tickCount$[ebp]
  00bc7	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 218  : #else
; 219  : 	fileName;
; 220  : 	tickCount;
; 221  : #endif
; 222  : }	

  00bca	8b e5		 mov	 esp, ebp
  00bcc	5d		 pop	 ebp
  00bcd	c2 10 00	 ret	 16			; 00000010H
?PlayMovie@GraphicsMgrWin@@UAEXPADHHH@Z ENDP		; GraphicsMgrWin::PlayMovie
_this$ = -4
?SetVideoForMovies@GraphicsMgrWin@@UAEXXZ PROC NEAR	; GraphicsMgrWin::SetVideoForMovies

; 226  : GraphicsMgrWin::SetVideoForMovies() {

  00bd0	55		 push	 ebp
  00bd1	8b ec		 mov	 ebp, esp
  00bd3	51		 push	 ecx
  00bd4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 227  : }

  00bd7	8b e5		 mov	 esp, ebp
  00bd9	5d		 pop	 ebp
  00bda	c3		 ret	 0
?SetVideoForMovies@GraphicsMgrWin@@UAEXXZ ENDP		; GraphicsMgrWin::SetVideoForMovies
_this$ = -4
?SetVideoForSpeed@GraphicsMgrWin@@UAEXXZ PROC NEAR	; GraphicsMgrWin::SetVideoForSpeed

; 231  : GraphicsMgrWin::SetVideoForSpeed() {

  00bdb	55		 push	 ebp
  00bdc	8b ec		 mov	 ebp, esp
  00bde	51		 push	 ecx
  00bdf	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 232  : }

  00be2	8b e5		 mov	 esp, ebp
  00be4	5d		 pop	 ebp
  00be5	c3		 ret	 0
?SetVideoForSpeed@GraphicsMgrWin@@UAEXXZ ENDP		; GraphicsMgrWin::SetVideoForSpeed
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@HHHH@Z				; SOL_Rect::SOL_Rect
PUBLIC	?Area@SOL_Rect@@QBEJXZ				; SOL_Rect::Area
PUBLIC	?Set@SOL_Rect@@QAEXHHHH@Z			; SOL_Rect::Set
PUBLIC	?Offset@SOL_Rect@@QAEXHH@Z			; SOL_Rect::Offset
PUBLIC	?TimingTest@GraphicsMgrWin@@QAEXXZ		; GraphicsMgrWin::TimingTest
EXTRN	__imp__timeGetTime@0:NEAR
EXTRN	?timeMgr@@3PAVTimeMgr@@A:DWORD			; timeMgr
EXTRN	__imp__ClientToScreen@8:NEAR
EXTRN	?hMyWnd@@3PAUHWND__@@A:DWORD			; hMyWnd
EXTRN	?forcePPC@@3HA:DWORD				; forcePPC
_TEXT	SEGMENT
_this$ = -64
_time1$ = -20
_time2$ = -24
_myPoint$ = -8
_TIMERTRYS$ = -12
_rect$60710 = -40
_timeStart$60711 = -60
_offx$60712 = -48
_i$60713 = -44
_area1$60717 = -52
_area2$60721 = -56
?TimingTest@GraphicsMgrWin@@QAEXXZ PROC NEAR		; GraphicsMgrWin::TimingTest

; 237  : {

  00be6	55		 push	 ebp
  00be7	8b ec		 mov	 ebp, esp
  00be9	83 ec 40	 sub	 esp, 64			; 00000040H
  00bec	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 238  : long time1, time2;
; 239  : POINT	myPoint;
; 240  : int i;
; 241  : 	pixelsPerCall = 0;

  00bef	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00bf2	c7 80 64 11 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4452], 0

; 242  : 	time1 = 0;

  00bfc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _time1$[ebp], 0

; 243  : 	time2 = 0;

  00c03	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _time2$[ebp], 0

; 244  : 	const int TIMERTRYS = 100;

  00c0a	c7 45 f4 64 00
	00 00		 mov	 DWORD PTR _TIMERTRYS$[ebp], 100 ; 00000064H

; 245  : 	if (!forcePPC) {

  00c11	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?forcePPC@@3HA, 0 ; forcePPC
  00c18	0f 85 a4 01 00
	00		 jne	 $L60707

; 246  : 		if (timeMgr)  {

  00c1e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?timeMgr@@3PAVTimeMgr@@A, 0 ; timeMgr
  00c25	0f 84 95 01 00
	00		 je	 $L60708

; 247  : 			myPoint.x = 200;

  00c2b	c7 45 f8 c8 00
	00 00		 mov	 DWORD PTR _myPoint$[ebp], 200 ; 000000c8H

; 248  : 			myPoint.y = 200;

  00c32	c7 45 fc c8 00
	00 00		 mov	 DWORD PTR _myPoint$[ebp+4], 200 ; 000000c8H

; 249  : 			ClientToScreen (hMyWnd, (LPPOINT)&myPoint);

  00c39	8d 4d f8	 lea	 ecx, DWORD PTR _myPoint$[ebp]
  00c3c	51		 push	 ecx
  00c3d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hMyWnd@@3PAUHWND__@@A ; hMyWnd
  00c43	52		 push	 edx
  00c44	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 250  : //			SetCursorPos (myPoint.x, myPoint.y);
; 251  : 			SOL_Rect rect(0, 0, 100, 50);

  00c4a	6a 32		 push	 50			; 00000032H
  00c4c	6a 64		 push	 100			; 00000064H
  00c4e	6a 00		 push	 0
  00c50	6a 00		 push	 0
  00c52	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60710[ebp]
  00c55	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 252  : 			timingFlag = True;

  00c5a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00c5d	66 c7 80 94 11
	00 00 01 00	 mov	 WORD PTR [eax+4500], 1

; 253  : 			ulong timeStart = timeGetTime();

  00c66	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00c6c	89 45 c4	 mov	 DWORD PTR _timeStart$60711[ebp], eax

; 254  : 			int offx = 10;

  00c6f	c7 45 d0 0a 00
	00 00		 mov	 DWORD PTR _offx$60712[ebp], 10 ; 0000000aH

; 255  : 			for (int i = 0;i < TIMERTRYS;i++) {

  00c76	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$60713[ebp], 0
  00c7d	eb 09		 jmp	 SHORT $L60714
$L60715:
  00c7f	8b 4d d4	 mov	 ecx, DWORD PTR _i$60713[ebp]
  00c82	83 c1 01	 add	 ecx, 1
  00c85	89 4d d4	 mov	 DWORD PTR _i$60713[ebp], ecx
$L60714:
  00c88	83 7d d4 64	 cmp	 DWORD PTR _i$60713[ebp], 100 ; 00000064H
  00c8c	7d 2f		 jge	 SHORT $L60716

; 256  : 				ShowRect(&rect, buffer.start);

  00c8e	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00c91	8b 82 ec 22 00
	00		 mov	 eax, DWORD PTR [edx+8940]
  00c97	50		 push	 eax
  00c98	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60710[ebp]
  00c9b	51		 push	 ecx
  00c9c	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00c9f	e8 00 00 00 00	 call	 ?ShowRect@GraphicsMgrWin@@IAEXPBVSOL_Rect@@PAE@Z ; GraphicsMgrWin::ShowRect

; 257  : 				rect.Offset(offx, 0);

  00ca4	6a 00		 push	 0
  00ca6	8b 55 d0	 mov	 edx, DWORD PTR _offx$60712[ebp]
  00ca9	52		 push	 edx
  00caa	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60710[ebp]
  00cad	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 258  : 				offx *= -1;

  00cb2	8b 45 d0	 mov	 eax, DWORD PTR _offx$60712[ebp]
  00cb5	6b c0 ff	 imul	 eax, -1
  00cb8	89 45 d0	 mov	 DWORD PTR _offx$60712[ebp], eax

; 259  : 			}

  00cbb	eb c2		 jmp	 SHORT $L60715
$L60716:

; 260  : 			time1 = timeGetTime() - timeStart;

  00cbd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00cc3	2b 45 c4	 sub	 eax, DWORD PTR _timeStart$60711[ebp]
  00cc6	89 45 ec	 mov	 DWORD PTR _time1$[ebp], eax

; 261  : 			long area1 = rect.Area();

  00cc9	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60710[ebp]
  00ccc	e8 00 00 00 00	 call	 ?Area@SOL_Rect@@QBEJXZ	; SOL_Rect::Area
  00cd1	89 45 cc	 mov	 DWORD PTR _area1$60717[ebp], eax

; 262  : 
; 263  : 
; 264  : 			rect.Set(0, 0, 100, 100);

  00cd4	6a 64		 push	 100			; 00000064H
  00cd6	6a 64		 push	 100			; 00000064H
  00cd8	6a 00		 push	 0
  00cda	6a 00		 push	 0
  00cdc	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60710[ebp]
  00cdf	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 265  : 			offx = 10;

  00ce4	c7 45 d0 0a 00
	00 00		 mov	 DWORD PTR _offx$60712[ebp], 10 ; 0000000aH

; 266  : 			timeStart = timeGetTime();

  00ceb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00cf1	89 45 c4	 mov	 DWORD PTR _timeStart$60711[ebp], eax

; 267  : 			for (i = 0; i < TIMERTRYS; i++) {

  00cf4	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$60713[ebp], 0
  00cfb	eb 09		 jmp	 SHORT $L60718
$L60719:
  00cfd	8b 4d d4	 mov	 ecx, DWORD PTR _i$60713[ebp]
  00d00	83 c1 01	 add	 ecx, 1
  00d03	89 4d d4	 mov	 DWORD PTR _i$60713[ebp], ecx
$L60718:
  00d06	83 7d d4 64	 cmp	 DWORD PTR _i$60713[ebp], 100 ; 00000064H
  00d0a	7d 2f		 jge	 SHORT $L60720

; 268  : 				ShowRect(&rect, buffer.start);

  00d0c	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00d0f	8b 82 ec 22 00
	00		 mov	 eax, DWORD PTR [edx+8940]
  00d15	50		 push	 eax
  00d16	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60710[ebp]
  00d19	51		 push	 ecx
  00d1a	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00d1d	e8 00 00 00 00	 call	 ?ShowRect@GraphicsMgrWin@@IAEXPBVSOL_Rect@@PAE@Z ; GraphicsMgrWin::ShowRect

; 269  : 				rect.Offset(offx, 0);

  00d22	6a 00		 push	 0
  00d24	8b 55 d0	 mov	 edx, DWORD PTR _offx$60712[ebp]
  00d27	52		 push	 edx
  00d28	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60710[ebp]
  00d2b	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 270  : 				offx *= -1;

  00d30	8b 45 d0	 mov	 eax, DWORD PTR _offx$60712[ebp]
  00d33	6b c0 ff	 imul	 eax, -1
  00d36	89 45 d0	 mov	 DWORD PTR _offx$60712[ebp], eax

; 271  : 			}

  00d39	eb c2		 jmp	 SHORT $L60719
$L60720:

; 272  : 			time2 = timeGetTime() - timeStart;

  00d3b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00d41	2b 45 c4	 sub	 eax, DWORD PTR _timeStart$60711[ebp]
  00d44	89 45 e8	 mov	 DWORD PTR _time2$[ebp], eax

; 273  : 			long area2 = rect.Area();

  00d47	8d 4d d8	 lea	 ecx, DWORD PTR _rect$60710[ebp]
  00d4a	e8 00 00 00 00	 call	 ?Area@SOL_Rect@@QBEJXZ	; SOL_Rect::Area
  00d4f	89 45 c8	 mov	 DWORD PTR _area2$60721[ebp], eax

; 274  : 
; 275  : 			if (time2 > time1)  {

  00d52	8b 4d e8	 mov	 ecx, DWORD PTR _time2$[ebp]
  00d55	3b 4d ec	 cmp	 ecx, DWORD PTR _time1$[ebp]
  00d58	7e 3a		 jle	 SHORT $L60722

; 276  : 				pixelsPerCall = (((area2 - area1) * time1) / (time2 - time1)) - area1;

  00d5a	8b 45 c8	 mov	 eax, DWORD PTR _area2$60721[ebp]
  00d5d	2b 45 cc	 sub	 eax, DWORD PTR _area1$60717[ebp]
  00d60	0f af 45 ec	 imul	 eax, DWORD PTR _time1$[ebp]
  00d64	8b 4d e8	 mov	 ecx, DWORD PTR _time2$[ebp]
  00d67	2b 4d ec	 sub	 ecx, DWORD PTR _time1$[ebp]
  00d6a	99		 cdq
  00d6b	f7 f9		 idiv	 ecx
  00d6d	2b 45 cc	 sub	 eax, DWORD PTR _area1$60717[ebp]
  00d70	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00d73	89 82 64 11 00
	00		 mov	 DWORD PTR [edx+4452], eax

; 277  : 				if (pixelsPerCall < 0)

  00d79	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00d7c	83 b8 64 11 00
	00 00		 cmp	 DWORD PTR [eax+4452], 0
  00d83	7d 0d		 jge	 SHORT $L60723

; 278  : 					pixelsPerCall = 0;

  00d85	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00d88	c7 81 64 11 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+4452], 0
$L60723:

; 280  : 			else

  00d92	eb 0d		 jmp	 SHORT $L60724
$L60722:

; 281  : 				pixelsPerCall = 0;

  00d94	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00d97	c7 82 64 11 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+4452], 0
$L60724:

; 282  : 			myPoint.x = 0;

  00da1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _myPoint$[ebp], 0

; 283  : 			myPoint.y = 0;

  00da8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _myPoint$[ebp+4], 0

; 284  : 			ClientToScreen (hMyWnd, (LPPOINT)&myPoint);

  00daf	8d 45 f8	 lea	 eax, DWORD PTR _myPoint$[ebp]
  00db2	50		 push	 eax
  00db3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hMyWnd@@3PAUHWND__@@A ; hMyWnd
  00db9	51		 push	 ecx
  00dba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8
$L60708:

; 287  : 	} else {

  00dc0	eb 0e		 jmp	 SHORT $L60726
$L60707:

; 288  : 		pixelsPerCall = forcePPC;

  00dc2	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00dc5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?forcePPC@@3HA ; forcePPC
  00dca	89 82 64 11 00
	00		 mov	 DWORD PTR [edx+4452], eax
$L60726:

; 290  : 
; 291  : //	if (SHOWMEM) {
; 292  : //		sprintf(mbuff,"ppc:%d t1:%d t2:%d", pixelsPerCall, time1, time2);
; 293  : //		MBox(mbuff,"");
; 294  : //	}
; 295  : }

  00dd0	8b e5		 mov	 esp, ebp
  00dd2	5d		 pop	 ebp
  00dd3	c3		 ret	 0
?TimingTest@GraphicsMgrWin@@QAEXXZ ENDP			; GraphicsMgrWin::TimingTest
_TEXT	ENDS
EXTRN	?Add@RectList@@QAEXABVSOL_Rect@@@Z:NEAR		; RectList::Add
_TEXT	SEGMENT
_theRect$ = 8
_this$ = -4
?Repaint@GraphicsMgrWin@@UAEXABVSOL_Rect@@@Z PROC NEAR	; GraphicsMgrWin::Repaint

; 299  : {

  00dd4	55		 push	 ebp
  00dd5	8b ec		 mov	 ebp, esp
  00dd7	51		 push	 ecx
  00dd8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 300  : 	// Add this rectangle to the showList
; 301  : 	next.ShowList().Add(theRect);

  00ddb	8b 45 08	 mov	 eax, DWORD PTR _theRect$[ebp]
  00dde	50		 push	 eax
  00ddf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00de2	83 c1 14	 add	 ecx, 20			; 00000014H
  00de5	e8 00 00 00 00	 call	 ?ShowList@Screen@@QAEAAVRectList@@XZ ; Screen::ShowList
  00dea	8b c8		 mov	 ecx, eax
  00dec	e8 00 00 00 00	 call	 ?Add@RectList@@QAEXABVSOL_Rect@@@Z ; RectList::Add

; 302  : 	ShowBits();

  00df1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00df4	8b 11		 mov	 edx, DWORD PTR [ecx]
  00df6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00df9	ff 52 40	 call	 DWORD PTR [edx+64]

; 303  : }

  00dfc	8b e5		 mov	 esp, ebp
  00dfe	5d		 pop	 ebp
  00dff	c2 04 00	 ret	 4
?Repaint@GraphicsMgrWin@@UAEXABVSOL_Rect@@@Z ENDP	; GraphicsMgrWin::Repaint
_x$ = 8
_y$ = 12
_this$ = -12
_ax$ = -4
_ay$ = -8
?ResizeVmap@GraphicsMgrWin@@MAEXHH@Z PROC NEAR		; GraphicsMgrWin::ResizeVmap

; 307  : {

  00e02	55		 push	 ebp
  00e03	8b ec		 mov	 ebp, esp
  00e05	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00e08	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 308  : // do-nothing for now - map is 640 x 480
; 309  : 	int ax = x;

  00e0b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00e0e	89 45 fc	 mov	 DWORD PTR _ax$[ebp], eax

; 310  : 	int ay = y;

  00e11	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00e14	89 4d f8	 mov	 DWORD PTR _ay$[ebp], ecx

; 311  : }

  00e17	8b e5		 mov	 esp, ebp
  00e19	5d		 pop	 ebp
  00e1a	c2 08 00	 ret	 8
?ResizeVmap@GraphicsMgrWin@@MAEXHH@Z ENDP		; GraphicsMgrWin::ResizeVmap
_TEXT	ENDS
PUBLIC	?Xdim@GraphicsMgr@@QBEHXZ			; GraphicsMgr::Xdim
PUBLIC	?Ydim@GraphicsMgr@@QBEHXZ			; GraphicsMgr::Ydim
PUBLIC	?KIsHiRes@@YAXPAF@Z				; KIsHiRes
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
_TEXT	SEGMENT
?KIsHiRes@@YAXPAF@Z PROC NEAR				; KIsHiRes

; 316  : {

  00e1d	55		 push	 ebp
  00e1e	8b ec		 mov	 ebp, esp
  00e20	51		 push	 ecx

; 317  : 	pm.acc = (graphMgr->Xdim() >= 640  &&  graphMgr->Ydim() >= 400);

  00e21	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e27	e8 00 00 00 00	 call	 ?Xdim@GraphicsMgr@@QBEHXZ ; GraphicsMgr::Xdim
  00e2c	3d 80 02 00 00	 cmp	 eax, 640		; 00000280H
  00e31	7c 1b		 jl	 SHORT $L61089
  00e33	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00e39	e8 00 00 00 00	 call	 ?Ydim@GraphicsMgr@@QBEHXZ ; GraphicsMgr::Ydim
  00e3e	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  00e43	7c 09		 jl	 SHORT $L61089
  00e45	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR -4+[ebp], 1
  00e4c	eb 07		 jmp	 SHORT $L61090
$L61089:
  00e4e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR -4+[ebp], 0
$L61090:
  00e55	8b 45 fc	 mov	 eax, DWORD PTR -4+[ebp]
  00e58	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 318  : }

  00e5d	8b e5		 mov	 esp, ebp
  00e5f	5d		 pop	 ebp
  00e60	c3		 ret	 0
?KIsHiRes@@YAXPAF@Z ENDP				; KIsHiRes
_TEXT	ENDS
PUBLIC	?View@Bitmap@@QBEHXZ				; Bitmap::View
PUBLIC	?Loop@Bitmap@@QBEHXZ				; Bitmap::Loop
PUBLIC	?Cel@Bitmap@@QBEHXZ				; Bitmap::Cel
PUBLIC	?SCursorClr@GraphicsMgrWin@@QAEXXZ		; GraphicsMgrWin::SCursorClr
EXTRN	?mouse@@3PAVSOL_Mouse@@A:DWORD			; mouse
EXTRN	?clrMouse@@3PAVSOL_Mouse@@A:DWORD		; clrMouse
EXTRN	__imp__ShowCursor@4:NEAR
EXTRN	__imp__SetCursor@4:NEAR
EXTRN	?hCurCur@@3PAUHICON__@@A:DWORD			; hCurCur
EXTRN	?hNullCur@@3PAUHICON__@@A:DWORD			; hNullCur
_TEXT	SEGMENT
_this$ = -16
_v$ = -8
_l$ = -12
_c$ = -4
?SCursorClr@GraphicsMgrWin@@QAEXXZ PROC NEAR		; GraphicsMgrWin::SCursorClr

; 322  : {

  00e61	55		 push	 ebp
  00e62	8b ec		 mov	 ebp, esp
  00e64	83 ec 24	 sub	 esp, 36			; 00000024H
  00e67	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 323  : int	v, l, c;
; 324  : 
; 325  : 	if (cursor != clrCursor) {

  00e6a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00e6d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e70	8b 90 fc 22 00
	00		 mov	 edx, DWORD PTR [eax+8956]
  00e76	3b 91 00 23 00
	00		 cmp	 edx, DWORD PTR [ecx+8960]
  00e7c	0f 84 ec 00 00
	00		 je	 $L60747

; 326  : 		v = GCursor().Get().View();

  00e82	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00e85	8b 10		 mov	 edx, DWORD PTR [eax]
  00e87	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e8a	ff 52 18	 call	 DWORD PTR [edx+24]
  00e8d	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00e90	8b 45 ec	 mov	 eax, DWORD PTR -20+[ebp]
  00e93	8b 10		 mov	 edx, DWORD PTR [eax]
  00e95	8b 4d ec	 mov	 ecx, DWORD PTR -20+[ebp]
  00e98	ff 52 14	 call	 DWORD PTR [edx+20]
  00e9b	8b c8		 mov	 ecx, eax
  00e9d	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  00ea2	89 45 f8	 mov	 DWORD PTR _v$[ebp], eax

; 327  : 		l = GCursor().Get().Loop();

  00ea5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00ea8	8b 10		 mov	 edx, DWORD PTR [eax]
  00eaa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ead	ff 52 18	 call	 DWORD PTR [edx+24]
  00eb0	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00eb3	8b 45 e8	 mov	 eax, DWORD PTR -24+[ebp]
  00eb6	8b 10		 mov	 edx, DWORD PTR [eax]
  00eb8	8b 4d e8	 mov	 ecx, DWORD PTR -24+[ebp]
  00ebb	ff 52 14	 call	 DWORD PTR [edx+20]
  00ebe	8b c8		 mov	 ecx, eax
  00ec0	e8 00 00 00 00	 call	 ?Loop@Bitmap@@QBEHXZ	; Bitmap::Loop
  00ec5	89 45 f4	 mov	 DWORD PTR _l$[ebp], eax

; 328  : 		c = GCursor().Get().Cel();

  00ec8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00ecb	8b 10		 mov	 edx, DWORD PTR [eax]
  00ecd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ed0	ff 52 18	 call	 DWORD PTR [edx+24]
  00ed3	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00ed6	8b 45 e4	 mov	 eax, DWORD PTR -28+[ebp]
  00ed9	8b 10		 mov	 edx, DWORD PTR [eax]
  00edb	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  00ede	ff 52 14	 call	 DWORD PTR [edx+20]
  00ee1	8b c8		 mov	 ecx, eax
  00ee3	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  00ee8	89 45 fc	 mov	 DWORD PTR _c$[ebp], eax

; 329  : 	 	ShowCursor (0);

  00eeb	6a 00		 push	 0
  00eed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowCursor@4

; 330  : 	 	hCurCur = hNullCur;

  00ef3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNullCur@@3PAUHICON__@@A ; hNullCur
  00ef8	a3 00 00 00 00	 mov	 DWORD PTR ?hCurCur@@3PAUHICON__@@A, eax ; hCurCur

; 331  : 	 	SetCursor(hCurCur);

  00efd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurCur@@3PAUHICON__@@A ; hCurCur
  00f03	51		 push	 ecx
  00f04	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 332  : 	 	ShowCursor (1);

  00f0a	6a 01		 push	 1
  00f0c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowCursor@4

; 333  : 		mouse = clrMouse;

  00f12	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?clrMouse@@3PAVSOL_Mouse@@A ; clrMouse
  00f18	89 15 00 00 00
	00		 mov	 DWORD PTR ?mouse@@3PAVSOL_Mouse@@A, edx ; mouse

; 334  : 		cursor = clrCursor;

  00f1e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00f21	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f24	8b 91 00 23 00
	00		 mov	 edx, DWORD PTR [ecx+8960]
  00f2a	89 90 fc 22 00
	00		 mov	 DWORD PTR [eax+8956], edx

; 335  : 		GCursor().Set(v, l, c);

  00f30	8b 45 fc	 mov	 eax, DWORD PTR _c$[ebp]
  00f33	50		 push	 eax
  00f34	8b 4d f4	 mov	 ecx, DWORD PTR _l$[ebp]
  00f37	51		 push	 ecx
  00f38	8b 55 f8	 mov	 edx, DWORD PTR _v$[ebp]
  00f3b	52		 push	 edx
  00f3c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00f3f	8b 10		 mov	 edx, DWORD PTR [eax]
  00f41	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f44	ff 52 18	 call	 DWORD PTR [edx+24]
  00f47	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  00f4a	8b 45 e0	 mov	 eax, DWORD PTR -32+[ebp]
  00f4d	8b 10		 mov	 edx, DWORD PTR [eax]
  00f4f	8b 4d e0	 mov	 ecx, DWORD PTR -32+[ebp]
  00f52	ff 52 10	 call	 DWORD PTR [edx+16]

; 336  : 		GCursor().Show();

  00f55	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00f58	8b 10		 mov	 edx, DWORD PTR [eax]
  00f5a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f5d	ff 52 18	 call	 DWORD PTR [edx+24]
  00f60	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  00f63	8b 45 dc	 mov	 eax, DWORD PTR -36+[ebp]
  00f66	8b 10		 mov	 edx, DWORD PTR [eax]
  00f68	8b 4d dc	 mov	 ecx, DWORD PTR -36+[ebp]
  00f6b	ff 52 0c	 call	 DWORD PTR [edx+12]
$L60747:

; 338  : }

  00f6e	8b e5		 mov	 esp, ebp
  00f70	5d		 pop	 ebp
  00f71	c3		 ret	 0
?SCursorClr@GraphicsMgrWin@@QAEXXZ ENDP			; GraphicsMgrWin::SCursorClr
_TEXT	ENDS
PUBLIC	?SCursorWin@GraphicsMgrWin@@QAEXXZ		; GraphicsMgrWin::SCursorWin
EXTRN	?winMouse@@3PAVSOL_Mouse@@A:DWORD		; winMouse
_TEXT	SEGMENT
_this$ = -16
_v$ = -8
_l$ = -12
_c$ = -4
?SCursorWin@GraphicsMgrWin@@QAEXXZ PROC NEAR		; GraphicsMgrWin::SCursorWin

; 342  : {

  00f72	55		 push	 ebp
  00f73	8b ec		 mov	 ebp, esp
  00f75	83 ec 24	 sub	 esp, 36			; 00000024H
  00f78	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 343  : int	v, l, c;
; 344  : 
; 345  : 	if (cursor != winCursor) {

  00f7b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00f7e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f81	8b 90 fc 22 00
	00		 mov	 edx, DWORD PTR [eax+8956]
  00f87	3b 91 04 23 00
	00		 cmp	 edx, DWORD PTR [ecx+8964]
  00f8d	0f 84 c3 00 00
	00		 je	 $L60754

; 346  : 		v = GCursor().Get().View();

  00f93	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00f96	8b 10		 mov	 edx, DWORD PTR [eax]
  00f98	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f9b	ff 52 18	 call	 DWORD PTR [edx+24]
  00f9e	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00fa1	8b 45 ec	 mov	 eax, DWORD PTR -20+[ebp]
  00fa4	8b 10		 mov	 edx, DWORD PTR [eax]
  00fa6	8b 4d ec	 mov	 ecx, DWORD PTR -20+[ebp]
  00fa9	ff 52 14	 call	 DWORD PTR [edx+20]
  00fac	8b c8		 mov	 ecx, eax
  00fae	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  00fb3	89 45 f8	 mov	 DWORD PTR _v$[ebp], eax

; 347  : 		l = GCursor().Get().Loop();

  00fb6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00fb9	8b 10		 mov	 edx, DWORD PTR [eax]
  00fbb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00fbe	ff 52 18	 call	 DWORD PTR [edx+24]
  00fc1	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00fc4	8b 45 e8	 mov	 eax, DWORD PTR -24+[ebp]
  00fc7	8b 10		 mov	 edx, DWORD PTR [eax]
  00fc9	8b 4d e8	 mov	 ecx, DWORD PTR -24+[ebp]
  00fcc	ff 52 14	 call	 DWORD PTR [edx+20]
  00fcf	8b c8		 mov	 ecx, eax
  00fd1	e8 00 00 00 00	 call	 ?Loop@Bitmap@@QBEHXZ	; Bitmap::Loop
  00fd6	89 45 f4	 mov	 DWORD PTR _l$[ebp], eax

; 348  : 		c = GCursor().Get().Cel();

  00fd9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00fdc	8b 10		 mov	 edx, DWORD PTR [eax]
  00fde	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00fe1	ff 52 18	 call	 DWORD PTR [edx+24]
  00fe4	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00fe7	8b 45 e4	 mov	 eax, DWORD PTR -28+[ebp]
  00fea	8b 10		 mov	 edx, DWORD PTR [eax]
  00fec	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  00fef	ff 52 14	 call	 DWORD PTR [edx+20]
  00ff2	8b c8		 mov	 ecx, eax
  00ff4	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  00ff9	89 45 fc	 mov	 DWORD PTR _c$[ebp], eax

; 349  : 		GCursor().Hide();

  00ffc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00fff	8b 10		 mov	 edx, DWORD PTR [eax]
  01001	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01004	ff 52 18	 call	 DWORD PTR [edx+24]
  01007	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  0100a	8b 45 e0	 mov	 eax, DWORD PTR -32+[ebp]
  0100d	8b 10		 mov	 edx, DWORD PTR [eax]
  0100f	8b 4d e0	 mov	 ecx, DWORD PTR -32+[ebp]
  01012	ff 52 04	 call	 DWORD PTR [edx+4]

; 350  : 		mouse = winMouse;

  01015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?winMouse@@3PAVSOL_Mouse@@A ; winMouse
  0101a	a3 00 00 00 00	 mov	 DWORD PTR ?mouse@@3PAVSOL_Mouse@@A, eax ; mouse

; 351  : 		cursor = winCursor;

  0101f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01022	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01025	8b 82 04 23 00
	00		 mov	 eax, DWORD PTR [edx+8964]
  0102b	89 81 fc 22 00
	00		 mov	 DWORD PTR [ecx+8956], eax

; 352  : 		GCursor().Set(v, l, c);

  01031	8b 4d fc	 mov	 ecx, DWORD PTR _c$[ebp]
  01034	51		 push	 ecx
  01035	8b 55 f4	 mov	 edx, DWORD PTR _l$[ebp]
  01038	52		 push	 edx
  01039	8b 45 f8	 mov	 eax, DWORD PTR _v$[ebp]
  0103c	50		 push	 eax
  0103d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01040	8b 11		 mov	 edx, DWORD PTR [ecx]
  01042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01045	ff 52 18	 call	 DWORD PTR [edx+24]
  01048	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  0104b	8b 45 dc	 mov	 eax, DWORD PTR -36+[ebp]
  0104e	8b 10		 mov	 edx, DWORD PTR [eax]
  01050	8b 4d dc	 mov	 ecx, DWORD PTR -36+[ebp]
  01053	ff 52 10	 call	 DWORD PTR [edx+16]
$L60754:

; 358  : }

  01056	8b e5		 mov	 esp, ebp
  01058	5d		 pop	 ebp
  01059	c3		 ret	 0
?SCursorWin@GraphicsMgrWin@@QAEXXZ ENDP			; GraphicsMgrWin::SCursorWin
_TEXT	ENDS
PUBLIC	?PutMovieRect@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z ; PutMovieRect
PUBLIC	?Xlen@SOL_Rect@@QBEHXZ				; SOL_Rect::Xlen
PUBLIC	?Ylen@SOL_Rect@@QBEHXZ				; SOL_Rect::Ylen
EXTRN	_memcpy:NEAR
_TEXT	SEGMENT
_screen$ = 8
_bitmap$ = 12
_bitmapWidth$ = 16
_rect$ = 20
_screenPos$ = 24
_hRun$ = -12
_vRun$ = -8
_screenOffset$ = -16
_bitmapOffset$ = -4
?PutMovieRect@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z PROC NEAR ; PutMovieRect

; 362  : {

  0105a	55		 push	 ebp
  0105b	8b ec		 mov	 ebp, esp
  0105d	83 ec 10	 sub	 esp, 16			; 00000010H

; 363  : 	// Copy vmd movie bitmap into framebuffer
; 364  : 
; 365  : 	// The screen is the address of the framebuffer
; 366  : 	// The bitmap is the address of the bitmap
; 367  : 	// The bitmapWidth is the width of the bitmap
; 368  : 	// The rect is the bitmap relative rectangle to blit
; 369  : 	// The screenPos is the position of the bitmap within the framebuffer	
; 370  : 
; 371  : 	int hRun = rect->Xlen();

  01060	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  01063	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  01068	89 45 f4	 mov	 DWORD PTR _hRun$[ebp], eax

; 372  : 	int vRun = rect->Ylen();

  0106b	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  0106e	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  01073	89 45 f8	 mov	 DWORD PTR _vRun$[ebp], eax

; 373  : 	int screenOffset = vmapWidth - hRun;

  01076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  0107b	2b 45 f4	 sub	 eax, DWORD PTR _hRun$[ebp]
  0107e	89 45 f0	 mov	 DWORD PTR _screenOffset$[ebp], eax

; 374  : 	int bitmapOffset = bitmapWidth - hRun;

  01081	8b 4d 10	 mov	 ecx, DWORD PTR _bitmapWidth$[ebp]
  01084	2b 4d f4	 sub	 ecx, DWORD PTR _hRun$[ebp]
  01087	89 4d fc	 mov	 DWORD PTR _bitmapOffset$[ebp], ecx

; 375  : 
; 376  : 	// Calculate the screen start
; 377  : 	screen += (screenPos->y + rect->A.y)*vmapWidth + screenPos->x + rect->A.y;

  0108a	8b 55 18	 mov	 edx, DWORD PTR _screenPos$[ebp]
  0108d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01090	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  01093	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  01096	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  0109d	8b 55 18	 mov	 edx, DWORD PTR _screenPos$[ebp]
  010a0	03 02		 add	 eax, DWORD PTR [edx]
  010a2	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  010a5	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  010a8	8b 55 08	 mov	 edx, DWORD PTR _screen$[ebp]
  010ab	03 d0		 add	 edx, eax
  010ad	89 55 08	 mov	 DWORD PTR _screen$[ebp], edx

; 378  : 	// Calculate the bitmap start
; 379  : 	bitmap += rect->A.y*bitmapWidth + rect->A.x;

  010b0	8b 45 14	 mov	 eax, DWORD PTR _rect$[ebp]
  010b3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  010b6	0f af 4d 10	 imul	 ecx, DWORD PTR _bitmapWidth$[ebp]
  010ba	8b 55 14	 mov	 edx, DWORD PTR _rect$[ebp]
  010bd	03 0a		 add	 ecx, DWORD PTR [edx]
  010bf	8b 45 0c	 mov	 eax, DWORD PTR _bitmap$[ebp]
  010c2	03 c1		 add	 eax, ecx
  010c4	89 45 0c	 mov	 DWORD PTR _bitmap$[ebp], eax
$L60767:

; 380  : 
; 381  : 	while (vRun--) {

  010c7	8b 4d f8	 mov	 ecx, DWORD PTR _vRun$[ebp]
  010ca	8b 55 f8	 mov	 edx, DWORD PTR _vRun$[ebp]
  010cd	83 ea 01	 sub	 edx, 1
  010d0	89 55 f8	 mov	 DWORD PTR _vRun$[ebp], edx
  010d3	85 c9		 test	 ecx, ecx
  010d5	74 28		 je	 SHORT $L60768

; 382  : 		memcpy(screen,bitmap,hRun);

  010d7	8b 45 f4	 mov	 eax, DWORD PTR _hRun$[ebp]
  010da	50		 push	 eax
  010db	8b 4d 0c	 mov	 ecx, DWORD PTR _bitmap$[ebp]
  010de	51		 push	 ecx
  010df	8b 55 08	 mov	 edx, DWORD PTR _screen$[ebp]
  010e2	52		 push	 edx
  010e3	e8 00 00 00 00	 call	 _memcpy
  010e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 383  : 		screen += screenOffset;

  010eb	8b 45 08	 mov	 eax, DWORD PTR _screen$[ebp]
  010ee	03 45 f0	 add	 eax, DWORD PTR _screenOffset$[ebp]
  010f1	89 45 08	 mov	 DWORD PTR _screen$[ebp], eax

; 384  : 		bitmap += bitmapOffset;

  010f4	8b 4d 0c	 mov	 ecx, DWORD PTR _bitmap$[ebp]
  010f7	03 4d fc	 add	 ecx, DWORD PTR _bitmapOffset$[ebp]
  010fa	89 4d 0c	 mov	 DWORD PTR _bitmap$[ebp], ecx

; 385  : 	}

  010fd	eb c8		 jmp	 SHORT $L60767
$L60768:

; 386  : }

  010ff	8b e5		 mov	 esp, ebp
  01101	5d		 pop	 ebp
  01102	c3		 ret	 0
?PutMovieRect@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z ENDP ; PutMovieRect
_TEXT	ENDS
PUBLIC	?PutMovieRectBlack@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z ; PutMovieRectBlack
_TEXT	SEGMENT
_screen$ = 8
_bitmap$ = 12
_bitmapWidth$ = 16
_rect$ = 20
_screenPos$ = 24
_hRun$ = -12
_vRun$ = -8
_screenOffset$ = -16
_bitmapOffset$ = -4
?PutMovieRectBlack@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z PROC NEAR ; PutMovieRectBlack

; 389  : {

  01103	55		 push	 ebp
  01104	8b ec		 mov	 ebp, esp
  01106	83 ec 10	 sub	 esp, 16			; 00000010H

; 390  : 	// Copy vmd movie bitmap into framebuffer
; 391  : 
; 392  : 	// The screen is the address of the framebuffer
; 393  : 	// The bitmap is the address of the bitmap
; 394  : 	// The bitmapWidth is the width of the bitmap
; 395  : 	// The rect is the bitmap relative rectangle to blit
; 396  : 	// The screenPos is the position of the bitmap within the framebuffer	
; 397  : 
; 398  : 	// Only do the even numbered lines
; 399  : 	rect->A.y = rect->A.y & -2;

  01109	8b 45 14	 mov	 eax, DWORD PTR _rect$[ebp]
  0110c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0110f	83 e1 fe	 and	 ecx, -2			; fffffffeH
  01112	8b 55 14	 mov	 edx, DWORD PTR _rect$[ebp]
  01115	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 400  : 
; 401  : 	int hRun = rect->Xlen();

  01118	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  0111b	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  01120	89 45 f4	 mov	 DWORD PTR _hRun$[ebp], eax

; 402  : 	int vRun = rect->Ylen() >> 1;

  01123	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  01126	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  0112b	d1 f8		 sar	 eax, 1
  0112d	89 45 f8	 mov	 DWORD PTR _vRun$[ebp], eax

; 403  : 	int screenOffset = (vmapWidth << 1) - hRun;

  01130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  01135	d1 e0		 shl	 eax, 1
  01137	2b 45 f4	 sub	 eax, DWORD PTR _hRun$[ebp]
  0113a	89 45 f0	 mov	 DWORD PTR _screenOffset$[ebp], eax

; 404  : 	int bitmapOffset = (bitmapWidth << 1) - hRun;

  0113d	8b 4d 10	 mov	 ecx, DWORD PTR _bitmapWidth$[ebp]
  01140	d1 e1		 shl	 ecx, 1
  01142	2b 4d f4	 sub	 ecx, DWORD PTR _hRun$[ebp]
  01145	89 4d fc	 mov	 DWORD PTR _bitmapOffset$[ebp], ecx

; 405  : 
; 406  : 	// Calculate the screen start
; 407  : 	screen += (screenPos->y + rect->A.y)*vmapWidth + screenPos->x + rect->A.y;

  01148	8b 55 18	 mov	 edx, DWORD PTR _screenPos$[ebp]
  0114b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0114e	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  01151	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  01154	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  0115b	8b 55 18	 mov	 edx, DWORD PTR _screenPos$[ebp]
  0115e	03 02		 add	 eax, DWORD PTR [edx]
  01160	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  01163	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  01166	8b 55 08	 mov	 edx, DWORD PTR _screen$[ebp]
  01169	03 d0		 add	 edx, eax
  0116b	89 55 08	 mov	 DWORD PTR _screen$[ebp], edx

; 408  : 	// Calculate the bitmap start
; 409  : 	bitmap += rect->A.y*bitmapWidth + rect->A.x;

  0116e	8b 45 14	 mov	 eax, DWORD PTR _rect$[ebp]
  01171	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01174	0f af 4d 10	 imul	 ecx, DWORD PTR _bitmapWidth$[ebp]
  01178	8b 55 14	 mov	 edx, DWORD PTR _rect$[ebp]
  0117b	03 0a		 add	 ecx, DWORD PTR [edx]
  0117d	8b 45 0c	 mov	 eax, DWORD PTR _bitmap$[ebp]
  01180	03 c1		 add	 eax, ecx
  01182	89 45 0c	 mov	 DWORD PTR _bitmap$[ebp], eax
$L60781:

; 410  : 
; 411  : 	while (vRun--) {

  01185	8b 4d f8	 mov	 ecx, DWORD PTR _vRun$[ebp]
  01188	8b 55 f8	 mov	 edx, DWORD PTR _vRun$[ebp]
  0118b	83 ea 01	 sub	 edx, 1
  0118e	89 55 f8	 mov	 DWORD PTR _vRun$[ebp], edx
  01191	85 c9		 test	 ecx, ecx
  01193	74 28		 je	 SHORT $L60782

; 412  : 		memcpy(screen,bitmap,hRun);

  01195	8b 45 f4	 mov	 eax, DWORD PTR _hRun$[ebp]
  01198	50		 push	 eax
  01199	8b 4d 0c	 mov	 ecx, DWORD PTR _bitmap$[ebp]
  0119c	51		 push	 ecx
  0119d	8b 55 08	 mov	 edx, DWORD PTR _screen$[ebp]
  011a0	52		 push	 edx
  011a1	e8 00 00 00 00	 call	 _memcpy
  011a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 413  : 		screen += screenOffset;

  011a9	8b 45 08	 mov	 eax, DWORD PTR _screen$[ebp]
  011ac	03 45 f0	 add	 eax, DWORD PTR _screenOffset$[ebp]
  011af	89 45 08	 mov	 DWORD PTR _screen$[ebp], eax

; 414  : 		bitmap += bitmapOffset;

  011b2	8b 4d 0c	 mov	 ecx, DWORD PTR _bitmap$[ebp]
  011b5	03 4d fc	 add	 ecx, DWORD PTR _bitmapOffset$[ebp]
  011b8	89 4d 0c	 mov	 DWORD PTR _bitmap$[ebp], ecx

; 415  : 	}

  011bb	eb c8		 jmp	 SHORT $L60781
$L60782:

; 416  : }

  011bd	8b e5		 mov	 esp, ebp
  011bf	5d		 pop	 ebp
  011c0	c3		 ret	 0
?PutMovieRectBlack@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z ENDP ; PutMovieRectBlack
_TEXT	ENDS
PUBLIC	?PutMovieRectDbl@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z ; PutMovieRectDbl
_TEXT	SEGMENT
_screen$ = 8
_bitmap$ = 12
_bitmapWidth$ = 16
_rect$ = 20
_screenPos$ = 24
_hRun$ = -12
_vRun$ = -8
_screenOffset$ = -16
_bitmapOffset$ = -4
?PutMovieRectDbl@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z PROC NEAR ; PutMovieRectDbl

; 419  : {

  011c1	55		 push	 ebp
  011c2	8b ec		 mov	 ebp, esp
  011c4	83 ec 10	 sub	 esp, 16			; 00000010H

; 420  : 	// Copy vmd movie bitmap into framebuffer
; 421  : 
; 422  : 	// The screen is the address of the framebuffer
; 423  : 	// The bitmap is the address of the bitmap
; 424  : 	// The bitmapWidth is the width of the bitmap
; 425  : 	// The rect is the bitmap relative rectangle to blit
; 426  : 	// The screenPos is the position of the bitmap within the framebuffer	
; 427  : 
; 428  : // HOOK
; 429  : // The following code will not work
; 430  : 	int hRun = rect->Xlen();

  011c7	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  011ca	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  011cf	89 45 f4	 mov	 DWORD PTR _hRun$[ebp], eax

; 431  : 	int vRun = rect->Ylen();

  011d2	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  011d5	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  011da	89 45 f8	 mov	 DWORD PTR _vRun$[ebp], eax

; 432  : 	int screenOffset = vmapWidth - hRun;

  011dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  011e2	2b 45 f4	 sub	 eax, DWORD PTR _hRun$[ebp]
  011e5	89 45 f0	 mov	 DWORD PTR _screenOffset$[ebp], eax

; 433  : 	int bitmapOffset = bitmapWidth - hRun;

  011e8	8b 4d 10	 mov	 ecx, DWORD PTR _bitmapWidth$[ebp]
  011eb	2b 4d f4	 sub	 ecx, DWORD PTR _hRun$[ebp]
  011ee	89 4d fc	 mov	 DWORD PTR _bitmapOffset$[ebp], ecx

; 434  : 
; 435  : 	// Calculate the screen start
; 436  : 	screen += (screenPos->y + rect->A.y)*vmapWidth + screenPos->x + rect->A.y;

  011f1	8b 55 18	 mov	 edx, DWORD PTR _screenPos$[ebp]
  011f4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  011f7	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  011fa	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  011fd	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  01204	8b 55 18	 mov	 edx, DWORD PTR _screenPos$[ebp]
  01207	03 02		 add	 eax, DWORD PTR [edx]
  01209	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  0120c	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0120f	8b 55 08	 mov	 edx, DWORD PTR _screen$[ebp]
  01212	03 d0		 add	 edx, eax
  01214	89 55 08	 mov	 DWORD PTR _screen$[ebp], edx

; 437  : 	// Calculate the bitmap start
; 438  : 	bitmap += rect->A.y*bitmapWidth + rect->A.x;

  01217	8b 45 14	 mov	 eax, DWORD PTR _rect$[ebp]
  0121a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0121d	0f af 4d 10	 imul	 ecx, DWORD PTR _bitmapWidth$[ebp]
  01221	8b 55 14	 mov	 edx, DWORD PTR _rect$[ebp]
  01224	03 0a		 add	 ecx, DWORD PTR [edx]
  01226	8b 45 0c	 mov	 eax, DWORD PTR _bitmap$[ebp]
  01229	03 c1		 add	 eax, ecx
  0122b	89 45 0c	 mov	 DWORD PTR _bitmap$[ebp], eax
$L60795:

; 439  : 
; 440  : 	while (vRun--) {

  0122e	8b 4d f8	 mov	 ecx, DWORD PTR _vRun$[ebp]
  01231	8b 55 f8	 mov	 edx, DWORD PTR _vRun$[ebp]
  01234	83 ea 01	 sub	 edx, 1
  01237	89 55 f8	 mov	 DWORD PTR _vRun$[ebp], edx
  0123a	85 c9		 test	 ecx, ecx
  0123c	74 28		 je	 SHORT $L60796

; 441  : 		memcpy(screen,bitmap,hRun);

  0123e	8b 45 f4	 mov	 eax, DWORD PTR _hRun$[ebp]
  01241	50		 push	 eax
  01242	8b 4d 0c	 mov	 ecx, DWORD PTR _bitmap$[ebp]
  01245	51		 push	 ecx
  01246	8b 55 08	 mov	 edx, DWORD PTR _screen$[ebp]
  01249	52		 push	 edx
  0124a	e8 00 00 00 00	 call	 _memcpy
  0124f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 442  : 		screen += screenOffset;

  01252	8b 45 08	 mov	 eax, DWORD PTR _screen$[ebp]
  01255	03 45 f0	 add	 eax, DWORD PTR _screenOffset$[ebp]
  01258	89 45 08	 mov	 DWORD PTR _screen$[ebp], eax

; 443  : 		bitmap += bitmapOffset;

  0125b	8b 4d 0c	 mov	 ecx, DWORD PTR _bitmap$[ebp]
  0125e	03 4d fc	 add	 ecx, DWORD PTR _bitmapOffset$[ebp]
  01261	89 4d 0c	 mov	 DWORD PTR _bitmap$[ebp], ecx

; 444  : 	}

  01264	eb c8		 jmp	 SHORT $L60795
$L60796:

; 445  : }

  01266	8b e5		 mov	 esp, ebp
  01268	5d		 pop	 ebp
  01269	c3		 ret	 0
?PutMovieRectDbl@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z ENDP ; PutMovieRectDbl
_TEXT	ENDS
PUBLIC	?PutMovieRectDblBlack@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z ; PutMovieRectDblBlack
_TEXT	SEGMENT
_screen$ = 8
_bitmap$ = 12
_bitmapWidth$ = 16
_rect$ = 20
_screenPos$ = 24
_hRun$ = -12
_vRun$ = -8
_screenOffset$ = -16
_bitmapOffset$ = -4
?PutMovieRectDblBlack@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z PROC NEAR ; PutMovieRectDblBlack

; 448  : {

  0126a	55		 push	 ebp
  0126b	8b ec		 mov	 ebp, esp
  0126d	83 ec 10	 sub	 esp, 16			; 00000010H

; 449  : 	// Copy vmd movie bitmap into framebuffer
; 450  : 
; 451  : 	// The screen is the address of the framebuffer
; 452  : 	// The bitmap is the address of the bitmap
; 453  : 	// The bitmapWidth is the width of the bitmap
; 454  : 	// The rect is the bitmap relative rectangle to blit
; 455  : 	// The screenPos is the position of the bitmap within the framebuffer	
; 456  : 
; 457  : // HOOK
; 458  : // The following code will not work
; 459  : 	// Only do the even numbered lines
; 460  : 	rect->A.y = rect->A.y & -2;

  01270	8b 45 14	 mov	 eax, DWORD PTR _rect$[ebp]
  01273	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01276	83 e1 fe	 and	 ecx, -2			; fffffffeH
  01279	8b 55 14	 mov	 edx, DWORD PTR _rect$[ebp]
  0127c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 461  : 
; 462  : 	int hRun = rect->Xlen();

  0127f	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  01282	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  01287	89 45 f4	 mov	 DWORD PTR _hRun$[ebp], eax

; 463  : 	int vRun = rect->Ylen() >> 1;

  0128a	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  0128d	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  01292	d1 f8		 sar	 eax, 1
  01294	89 45 f8	 mov	 DWORD PTR _vRun$[ebp], eax

; 464  : 	int screenOffset = (vmapWidth << 1) - hRun;

  01297	a1 00 00 00 00	 mov	 eax, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  0129c	d1 e0		 shl	 eax, 1
  0129e	2b 45 f4	 sub	 eax, DWORD PTR _hRun$[ebp]
  012a1	89 45 f0	 mov	 DWORD PTR _screenOffset$[ebp], eax

; 465  : 	int bitmapOffset = (bitmapWidth << 1) - hRun;

  012a4	8b 4d 10	 mov	 ecx, DWORD PTR _bitmapWidth$[ebp]
  012a7	d1 e1		 shl	 ecx, 1
  012a9	2b 4d f4	 sub	 ecx, DWORD PTR _hRun$[ebp]
  012ac	89 4d fc	 mov	 DWORD PTR _bitmapOffset$[ebp], ecx

; 466  : 
; 467  : 	// Calculate the screen start
; 468  : 	screen += (screenPos->y + rect->A.y)*vmapWidth + screenPos->x + rect->A.y;

  012af	8b 55 18	 mov	 edx, DWORD PTR _screenPos$[ebp]
  012b2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  012b5	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  012b8	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  012bb	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?vmapWidth@@3HA ; vmapWidth
  012c2	8b 55 18	 mov	 edx, DWORD PTR _screenPos$[ebp]
  012c5	03 02		 add	 eax, DWORD PTR [edx]
  012c7	8b 4d 14	 mov	 ecx, DWORD PTR _rect$[ebp]
  012ca	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  012cd	8b 55 08	 mov	 edx, DWORD PTR _screen$[ebp]
  012d0	03 d0		 add	 edx, eax
  012d2	89 55 08	 mov	 DWORD PTR _screen$[ebp], edx

; 469  : 	// Calculate the bitmap start
; 470  : 	bitmap += rect->A.y*bitmapWidth + rect->A.x;

  012d5	8b 45 14	 mov	 eax, DWORD PTR _rect$[ebp]
  012d8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  012db	0f af 4d 10	 imul	 ecx, DWORD PTR _bitmapWidth$[ebp]
  012df	8b 55 14	 mov	 edx, DWORD PTR _rect$[ebp]
  012e2	03 0a		 add	 ecx, DWORD PTR [edx]
  012e4	8b 45 0c	 mov	 eax, DWORD PTR _bitmap$[ebp]
  012e7	03 c1		 add	 eax, ecx
  012e9	89 45 0c	 mov	 DWORD PTR _bitmap$[ebp], eax
$L60809:

; 471  : 
; 472  : 	while (vRun--) {

  012ec	8b 4d f8	 mov	 ecx, DWORD PTR _vRun$[ebp]
  012ef	8b 55 f8	 mov	 edx, DWORD PTR _vRun$[ebp]
  012f2	83 ea 01	 sub	 edx, 1
  012f5	89 55 f8	 mov	 DWORD PTR _vRun$[ebp], edx
  012f8	85 c9		 test	 ecx, ecx
  012fa	74 28		 je	 SHORT $L60810

; 473  : 		memcpy(screen,bitmap,hRun);

  012fc	8b 45 f4	 mov	 eax, DWORD PTR _hRun$[ebp]
  012ff	50		 push	 eax
  01300	8b 4d 0c	 mov	 ecx, DWORD PTR _bitmap$[ebp]
  01303	51		 push	 ecx
  01304	8b 55 08	 mov	 edx, DWORD PTR _screen$[ebp]
  01307	52		 push	 edx
  01308	e8 00 00 00 00	 call	 _memcpy
  0130d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 474  : 		screen += screenOffset;

  01310	8b 45 08	 mov	 eax, DWORD PTR _screen$[ebp]
  01313	03 45 f0	 add	 eax, DWORD PTR _screenOffset$[ebp]
  01316	89 45 08	 mov	 DWORD PTR _screen$[ebp], eax

; 475  : 		bitmap += bitmapOffset;

  01319	8b 4d 0c	 mov	 ecx, DWORD PTR _bitmap$[ebp]
  0131c	03 4d fc	 add	 ecx, DWORD PTR _bitmapOffset$[ebp]
  0131f	89 4d 0c	 mov	 DWORD PTR _bitmap$[ebp], ecx

; 476  : 	}

  01322	eb c8		 jmp	 SHORT $L60809
$L60810:

; 477  : }

  01324	8b e5		 mov	 esp, ebp
  01326	5d		 pop	 ebp
  01327	c3		 ret	 0
?PutMovieRectDblBlack@@YAXPAE0HPAVSOL_Rect@@PAVSOL_Point@@@Z ENDP ; PutMovieRectDblBlack
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@XZ				; SOL_Point::SOL_Point
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
??0SOL_Rect@@QAE@HHHH@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 56   : 	A.x = xa;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 	A.y = ya;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00028	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 	B.x = xb;

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  00031	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 59   : 	B.y = yb;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  0003a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 60   : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
??0SOL_Rect@@QAE@HHHH@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Point@@QAE@XZ PROC NEAR				; SOL_Point::SOL_Point, COMDAT

; 20   : 	SOL_Point() : x(DefaultCoord), y(DefaultCoord) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 ef cd ab
	89		 mov	 DWORD PTR [eax], -1985229329 ; 89abcdefH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 ef cd
	ab 89		 mov	 DWORD PTR [ecx+4], -1985229329 ; 89abcdefH
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Point@@QAE@XZ ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
?Set@SOL_Rect@@QAEXHHHH@Z PROC NEAR			; SOL_Rect::Set, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	A.x = xa;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 75   : 	A.y = ya;

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 76   : 	B.x = xb;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 77   : 	B.y = yb;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 78   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
?Set@SOL_Rect@@QAEXHHHH@Z ENDP				; SOL_Rect::Set
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Xlen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Xlen, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	return B.x - A.x + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	83 c0 01	 add	 eax, 1

; 155  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?Xlen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Xlen
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Ylen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Ylen, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 	return B.y - A.y + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	83 c0 01	 add	 eax, 1

; 163  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Ylen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Ylen
_TEXT	ENDS
;	COMDAT ?Area@SOL_Rect@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Area@SOL_Rect@@QBEJXZ PROC NEAR			; SOL_Rect::Area, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 170  : 	return (long) Xlen() * Ylen();

  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  00010	8b f0		 mov	 esi, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  0001a	0f af c6	 imul	 eax, esi

; 171  : }

  0001d	5e		 pop	 esi
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?Area@SOL_Rect@@QBEJXZ ENDP				; SOL_Rect::Area
_TEXT	ENDS
;	COMDAT ?Offset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT
_dx$ = 8
_dy$ = 12
_this$ = -4
?Offset@SOL_Rect@@QAEXHH@Z PROC NEAR			; SOL_Rect::Offset, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 318  : 	A.x += dx;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	03 4d 08	 add	 ecx, DWORD PTR _dx$[ebp]
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx

; 319  : 	B.x += dx;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001a	03 4d 08	 add	 ecx, DWORD PTR _dx$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 320  : 	A.y += dy;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	03 4d 0c	 add	 ecx, DWORD PTR _dy$[ebp]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 321  : 	B.y += dy;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00038	03 4d 0c	 add	 ecx, DWORD PTR _dy$[ebp]
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 322  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?Offset@SOL_Rect@@QAEXHH@Z ENDP				; SOL_Rect::Offset
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
EXTRN	?Free@MemoryMgr@@QAEXG@Z:NEAR			; MemoryMgr::Free
EXTRN	_memMgr:DWORD
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Free@MemID@@QAEXXZ PROC NEAR				; MemID::Free, COMDAT

; 32   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 		if (handle) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 1a		 je	 SHORT $L53023

; 34   : 			memMgr->Free(handle);

  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	66 8b 02	 mov	 ax, WORD PTR [edx]
  00019	50		 push	 eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00020	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 35   : 			handle = 0;

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
$L53023:

; 37   : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?Free@MemID@@QAEXXZ ENDP				; MemID::Free
_TEXT	ENDS
PUBLIC	?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_h$ = 16
_a$ = 20
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z PROC NEAR ; MemID::Get, COMDAT

; 47   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 		Get(type, size, a | PERSIST, 0, 0, 0, h);

  00007	8b 45 10	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	8b 4d 14	 mov	 ecx, DWORD PTR _a$[ebp]
  00014	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  0001a	51		 push	 ecx
  0001b	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 49   : 	}

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 10 00	 ret	 16			; 00000010H
?Get@MemID@@QAEXW4MemType@@IW4ReservedHandle@@I@Z ENDP	; MemID::Get
_TEXT	ENDS
EXTRN	?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z:NEAR ; MemoryMgr::Alloc
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_a$ = 16
_num$ = 20
_client$ = 24
_initChar$ = 28
_h$ = 32
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; MemID::Get, COMDAT

; 42   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		handle = memMgr->Alloc(type | a, size, num, client, initChar, h);

  00007	8b 45 20	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 1c	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0001e	0b 55 10	 or	 edx, DWORD PTR _a$[ebp]
  00021	52		 push	 edx
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00028	e8 00 00 00 00	 call	 ?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemoryMgr::Alloc
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	66 89 01	 mov	 WORD PTR [ecx], ax

; 44   : 	}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 1c 00	 ret	 28			; 0000001cH
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; MemID::Get
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Rgb24@@QAE@XZ PROC NEAR				; Rgb24::Rgb24, COMDAT

; 8    : 	Rgb24() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0Rgb24@@QAE@XZ ENDP					; Rgb24::Rgb24
_TEXT	ENDS
;	COMDAT ??ASOLPalette@@QBEABVRgb24F@@H@Z
_TEXT	SEGMENT
_i$ = 8
_this$ = -4
??ASOLPalette@@QBEABVRgb24F@@H@Z PROC NEAR		; SOLPalette::operator[], COMDAT

; 37   : 	const Rgb24F&	operator[](int i) const			{return colors[i];} 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??ASOLPalette@@QBEABVRgb24F@@H@Z ENDP			; SOLPalette::operator[]
_TEXT	ENDS
;	COMDAT ?View@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?View@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::View, COMDAT

; 137  : 	int	View() const			{return view;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?View@Bitmap@@QBEHXZ ENDP				; Bitmap::View
_TEXT	ENDS
;	COMDAT ?Loop@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Loop@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Loop, COMDAT

; 138  : 	int	Loop() const			{return loop;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Loop@Bitmap@@QBEHXZ ENDP				; Bitmap::Loop
_TEXT	ENDS
;	COMDAT ?Cel@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Cel@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Cel, COMDAT

; 139  : 	int	Cel() const				{return cel;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Cel@Bitmap@@QBEHXZ ENDP				; Bitmap::Cel
_TEXT	ENDS
;	COMDAT ?Length@RectList@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Length@RectList@@QBEHXZ PROC NEAR			; RectList::Length, COMDAT

; 45   : 	int	Length() const									{return length;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 a0 0f 00
	00		 mov	 eax, DWORD PTR [eax+4000]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?Length@RectList@@QBEHXZ ENDP				; RectList::Length
_TEXT	ENDS
;	COMDAT ??ARectList@@QAEAAVSOL_Rect@@H@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
??ARectList@@QAEAAVSOL_Rect@@H@Z PROC NEAR		; RectList::operator[], COMDAT

; 48   : 	SOL_Rect&	operator[](int index)				{return *rectArray[index];}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??ARectList@@QAEAAVSOL_Rect@@H@Z ENDP			; RectList::operator[]
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Xdim@Screen@@QBEHXZ PROC NEAR				; Screen::Xdim, COMDAT

; 33   : 	int	Xdim() const						{return xDim;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 48 11 00
	00		 mov	 eax, DWORD PTR [eax+4424]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?Xdim@Screen@@QBEHXZ ENDP				; Screen::Xdim
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Ydim@Screen@@QBEHXZ PROC NEAR				; Screen::Ydim, COMDAT

; 34   : 	int	Ydim() const						{return yDim;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 4c 11 00
	00		 mov	 eax, DWORD PTR [eax+4428]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?Ydim@Screen@@QBEHXZ ENDP				; Screen::Ydim
_TEXT	ENDS
;	COMDAT ?ShowList@Screen@@QAEAAVRectList@@XZ
_TEXT	SEGMENT
_this$ = -4
?ShowList@Screen@@QAEAAVRectList@@XZ PROC NEAR		; Screen::ShowList, COMDAT

; 60   : 			ShowList() 							{return showList;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?ShowList@Screen@@QAEAAVRectList@@XZ ENDP		; Screen::ShowList
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@XZ				; SOL_Rect::SOL_Rect
EXTRN	??0PlaneList@@QAE@XZ:NEAR			; PlaneList::PlaneList
EXTRN	??0RectList@@QAE@XZ:NEAR			; RectList::RectList
;	COMDAT xdata$x
; File C:\Documents and Settings\don\Desktop\sciw\Interp\screen.hpp
xdata$x	SEGMENT
$T61124	DD	019930520H
	DD	02H
	DD	FLAT:$T61126
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T61126	DD	0ffffffffH
	DD	FLAT:$L61121
	DD	00H
	DD	FLAT:$L61122
xdata$x	ENDS
;	COMDAT ??0Screen@@QAE@HH@Z
_TEXT	SEGMENT
_newXdim$ = 8
_newYdim$ = 12
_this$ = -16
__$EHRec$ = -12
??0Screen@@QAE@HH@Z PROC NEAR				; Screen::Screen, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L61125
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0PlaneList@@QAE@XZ	; PlaneList::PlaneList
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	81 c1 94 01 00
	00		 add	 ecx, 404		; 00000194H
  00034	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	81 c1 a4 01 00
	00		 add	 ecx, 420		; 000001a4H
  00042	e8 00 00 00 00	 call	 ??0RectList@@QAE@XZ	; RectList::RectList
  00047	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 74   : 	xDim = newXdim;

  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _newXdim$[ebp]
  00051	89 88 48 11 00
	00		 mov	 DWORD PTR [eax+4424], ecx

; 75   : 	yDim = newYdim;

  00057	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	8b 45 0c	 mov	 eax, DWORD PTR _newYdim$[ebp]
  0005d	89 82 4c 11 00
	00		 mov	 DWORD PTR [edx+4428], eax

; 76   : 	screenRect.Set(0, 0, xDim - 1, yDim - 1);

  00063	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	8b 91 4c 11 00
	00		 mov	 edx, DWORD PTR [ecx+4428]
  0006c	83 ea 01	 sub	 edx, 1
  0006f	52		 push	 edx
  00070	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 88 48 11 00
	00		 mov	 ecx, DWORD PTR [eax+4424]
  00079	83 e9 01	 sub	 ecx, 1
  0007c	51		 push	 ecx
  0007d	6a 00		 push	 0
  0007f	6a 00		 push	 0
  00081	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	81 c1 94 01 00
	00		 add	 ecx, 404		; 00000194H
  0008a	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set

; 77   : }

  0008f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00096	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L61121:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1PlaneList@@QAE@XZ	; PlaneList::~PlaneList
  00008	c3		 ret	 0
$L61122:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 a4 01 00
	00		 add	 ecx, 420		; 000001a4H
  00012	e8 00 00 00 00	 call	 ??1RectList@@QAE@XZ	; RectList::~RectList
  00017	c3		 ret	 0
$L61125:
  00018	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T61124
  0001d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0Screen@@QAE@HH@Z ENDP				; Screen::Screen
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Rect@@QAE@XZ PROC NEAR				; SOL_Rect::SOL_Rect, COMDAT

; 13   : 	SOL_Rect()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Rect@@QAE@XZ ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ?Xdim@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Xdim@GraphicsMgr@@QBEHXZ PROC NEAR			; GraphicsMgr::Xdim, COMDAT

; 53   : 	int		Xdim() const							{return next.Xdim();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ?Xdim@Screen@@QBEHXZ	; Screen::Xdim
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Xdim@GraphicsMgr@@QBEHXZ ENDP				; GraphicsMgr::Xdim
_TEXT	ENDS
;	COMDAT ?Ydim@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Ydim@GraphicsMgr@@QBEHXZ PROC NEAR			; GraphicsMgr::Ydim, COMDAT

; 54   : 	int		Ydim() const							{return next.Ydim();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ?Ydim@Screen@@QBEHXZ	; Screen::Ydim
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Ydim@GraphicsMgr@@QBEHXZ ENDP				; GraphicsMgr::Ydim
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@ABV0@@Z			; SOL_Point::SOL_Point
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_Rect@@QAE@ABV0@@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0SOL_Rect@@QAE@ABV0@@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??0SOL_Point@@QAE@ABV0@@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 22   : 	SOL_Point(const SOL_Point& p) : x(p.x), y(p.y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0SOL_Point@@QAE@ABV0@@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
PUBLIC	?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ	; PaletteMgrIndex::Current
PUBLIC	?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ	; PaletteMgrIndex::Source
PUBLIC	?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ	; PaletteMgrIndex::Next
PUBLIC	?CycleMap@PaletteMgrIndex@@UBEPBEXZ		; PaletteMgrIndex::CycleMap
PUBLIC	?VaryPercent@PaletteMgrIndex@@UBEHXZ		; PaletteMgrIndex::VaryPercent
PUBLIC	?VaryPause@PaletteMgrIndex@@UAEXXZ		; PaletteMgrIndex::VaryPause
PUBLIC	?UpdateHardware@PaletteMgrIWin@@UAEHXZ		; PaletteMgrIWin::UpdateHardware
PUBLIC	??_7PaletteMgrIWin@@6B@				; PaletteMgrIWin::`vftable'
PUBLIC	??_GPaletteMgrIWin@@UAEPAXI@Z			; PaletteMgrIWin::`scalar deleting destructor'
PUBLIC	??_EPaletteMgrIWin@@UAEPAXI@Z			; PaletteMgrIWin::`vector deleting destructor'
EXTRN	??0PaletteMgrIndex@@QAE@XZ:NEAR			; PaletteMgrIndex::PaletteMgrIndex
EXTRN	??1PaletteMgrIndex@@UAE@XZ:NEAR			; PaletteMgrIndex::~PaletteMgrIndex
EXTRN	?Submit@PaletteMgrIndex@@UAEXAAVHunkPalette@@@Z:NEAR ; PaletteMgrIndex::Submit
EXTRN	?Submit@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z:NEAR ; PaletteMgrIndex::Submit
EXTRN	?UpdateForFrame@PaletteMgrIndex@@UAEHXZ:NEAR	; PaletteMgrIndex::UpdateForFrame
EXTRN	?UpdateFFrame@PaletteMgrIndex@@UAEHXZ:NEAR	; PaletteMgrIndex::UpdateFFrame
EXTRN	?SetCycle@PaletteMgrIndex@@UAEXHHHH@Z:NEAR	; PaletteMgrIndex::SetCycle
EXTRN	?CycleOn@PaletteMgrIndex@@UAEXH@Z:NEAR		; PaletteMgrIndex::CycleOn
EXTRN	?CycleAllOn@PaletteMgrIndex@@UAEXXZ:NEAR	; PaletteMgrIndex::CycleAllOn
EXTRN	?CyclePause@PaletteMgrIndex@@UAEXH@Z:NEAR	; PaletteMgrIndex::CyclePause
EXTRN	?CycleAllPause@PaletteMgrIndex@@UAEXXZ:NEAR	; PaletteMgrIndex::CycleAllPause
EXTRN	?CycleOff@PaletteMgrIndex@@UAEXH@Z:NEAR		; PaletteMgrIndex::CycleOff
EXTRN	?CycleAllOff@PaletteMgrIndex@@UAEXXZ:NEAR	; PaletteMgrIndex::CycleAllOff
EXTRN	?SetTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z:NEAR ; PaletteMgrIndex::SetTarget
EXTRN	?MergeTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z:NEAR ; PaletteMgrIndex::MergeTarget
EXTRN	?SetStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z:NEAR ; PaletteMgrIndex::SetStart
EXTRN	?MergeStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z:NEAR ; PaletteMgrIndex::MergeStart
EXTRN	?SetVary@PaletteMgrIndex@@UAEXABVSOLPalette@@HHHH@Z:NEAR ; PaletteMgrIndex::SetVary
EXTRN	?SetVaryPercent@PaletteMgrIndex@@UAEXHHHH@Z:NEAR ; PaletteMgrIndex::SetVaryPercent
EXTRN	?SetVaryTime@PaletteMgrIndex@@UAEXH@Z:NEAR	; PaletteMgrIndex::SetVaryTime
EXTRN	?VaryOff@PaletteMgrIndex@@UAEXXZ:NEAR		; PaletteMgrIndex::VaryOff
EXTRN	?VaryOn@PaletteMgrIndex@@UAEXXZ:NEAR		; PaletteMgrIndex::VaryOn
EXTRN	?SetFade@PaletteMgrIndex@@UAEXHHH@Z:NEAR	; PaletteMgrIndex::SetFade
EXTRN	?SetGamma@PaletteMgrIndex@@UAEXH@Z:NEAR		; PaletteMgrIndex::SetGamma
EXTRN	?GammaOff@PaletteMgrIndex@@UAEXXZ:NEAR		; PaletteMgrIndex::GammaOff
EXTRN	?FadeOff@PaletteMgrIndex@@UAEXXZ:NEAR		; PaletteMgrIndex::FadeOff
EXTRN	?DoCycle@PaletteMgrIndex@@MAEXHH@Z:NEAR		; PaletteMgrIndex::DoCycle
EXTRN	?InitPalette@@YAXXZ:NEAR			; InitPalette
;	COMDAT ??_7PaletteMgrIWin@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\palmgrw.hpp
CONST	SEGMENT
??_7PaletteMgrIWin@@6B@ DD FLAT:??_EPaletteMgrIWin@@UAEPAXI@Z ; PaletteMgrIWin::`vftable'
	DD	FLAT:?Submit@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?Submit@PaletteMgrIndex@@UAEXAAVHunkPalette@@@Z
	DD	FLAT:?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?CycleMap@PaletteMgrIndex@@UBEPBEXZ
	DD	FLAT:?UpdateForFrame@PaletteMgrIndex@@UAEHXZ
	DD	FLAT:?UpdateFFrame@PaletteMgrIndex@@UAEHXZ
	DD	FLAT:?SetCycle@PaletteMgrIndex@@UAEXHHHH@Z
	DD	FLAT:?DoCycle@PaletteMgrIndex@@MAEXHH@Z
	DD	FLAT:?CycleOn@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CyclePause@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CycleAllOn@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?CycleAllPause@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?CycleOff@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CycleAllOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?SetTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?MergeTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?SetStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?MergeStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?SetVary@PaletteMgrIndex@@UAEXABVSOLPalette@@HHHH@Z
	DD	FLAT:?SetVaryPercent@PaletteMgrIndex@@UAEXHHHH@Z
	DD	FLAT:?SetVaryTime@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?VaryPercent@PaletteMgrIndex@@UBEHXZ
	DD	FLAT:?VaryOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?VaryOn@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?VaryPause@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?SetFade@PaletteMgrIndex@@UAEXHHH@Z
	DD	FLAT:?SetGamma@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?GammaOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?FadeOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?UpdateHardware@PaletteMgrIWin@@UAEHXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T61137	DD	019930520H
	DD	01H
	DD	FLAT:$T61139
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T61139	DD	0ffffffffH
	DD	FLAT:$L61135
xdata$x	ENDS
;	COMDAT ??0PaletteMgrIWin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??0PaletteMgrIWin@@QAE@XZ PROC NEAR			; PaletteMgrIWin::PaletteMgrIWin, COMDAT

; 23   : 	PaletteMgrIWin()				{InitPalette();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L61138
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0PaletteMgrIndex@@QAE@XZ ; PaletteMgrIndex::PaletteMgrIndex
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PaletteMgrIWin@@6B@ ; PaletteMgrIWin::`vftable'
  00034	e8 00 00 00 00	 call	 ?InitPalette@@YAXXZ	; InitPalette
  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L61135:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1PaletteMgrIndex@@UAE@XZ ; PaletteMgrIndex::~PaletteMgrIndex
  00008	c3		 ret	 0
$L61138:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T61137
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0PaletteMgrIWin@@QAE@XZ ENDP				; PaletteMgrIWin::PaletteMgrIWin
;	COMDAT ?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT
_this$ = -4
?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ PROC NEAR ; PaletteMgrIndex::Current, COMDAT

; 16   : 	const SOLPalette&	Current() const		{return current;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 60 09 00 00	 add	 eax, 2400		; 00000960H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ ENDP	; PaletteMgrIndex::Current
_TEXT	ENDS
;	COMDAT ?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT
_this$ = -4
?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ PROC NEAR	; PaletteMgrIndex::Source, COMDAT

; 17   : 	const SOLPalette&	Source() const			{return source;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 58 05 00 00	 add	 eax, 1368		; 00000558H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ ENDP	; PaletteMgrIndex::Source
_TEXT	ENDS
;	COMDAT ?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT
_this$ = -4
?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ PROC NEAR	; PaletteMgrIndex::Next, COMDAT

; 18   : 	const SOLPalette&	Next() const			{return next;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 60 0d 00 00	 add	 eax, 3424		; 00000d60H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ ENDP	; PaletteMgrIndex::Next
_TEXT	ENDS
;	COMDAT ?CycleMap@PaletteMgrIndex@@UBEPBEXZ
_TEXT	SEGMENT
_this$ = -4
?CycleMap@PaletteMgrIndex@@UBEPBEXZ PROC NEAR		; PaletteMgrIndex::CycleMap, COMDAT

; 19   : 	const uchar* 		CycleMap() const		{return cycleLoc;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 28 04 00 00	 add	 eax, 1064		; 00000428H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?CycleMap@PaletteMgrIndex@@UBEPBEXZ ENDP		; PaletteMgrIndex::CycleMap
_TEXT	ENDS
;	COMDAT ?VaryPercent@PaletteMgrIndex@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4
?VaryPercent@PaletteMgrIndex@@UBEHXZ PROC NEAR		; PaletteMgrIndex::VaryPercent, COMDAT

; 42   : 	int	VaryPercent() const {return (varyDirection < 0)?-varyPercent:varyPercent;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	7d 0d		 jge	 SHORT $L61147
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00018	f7 da		 neg	 edx
  0001a	89 55 f8	 mov	 DWORD PTR -8+[ebp], edx
  0001d	eb 09		 jmp	 SHORT $L61148
$L61147:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00025	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
$L61148:
  00028	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?VaryPercent@PaletteMgrIndex@@UBEHXZ ENDP		; PaletteMgrIndex::VaryPercent
_TEXT	ENDS
;	COMDAT ?VaryPause@PaletteMgrIndex@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?VaryPause@PaletteMgrIndex@@UAEXXZ PROC NEAR		; PaletteMgrIndex::VaryPause, COMDAT

; 45   : 	void  VaryPause() {varyPause++; varyDirection = 0;} 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0000d	83 c1 01	 add	 ecx, 1
  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?VaryPause@PaletteMgrIndex@@UAEXXZ ENDP			; PaletteMgrIndex::VaryPause
_TEXT	ENDS
EXTRN	?UpdatePalette@@YAHAAVSOLPalette@@ABV1@H@Z:NEAR	; UpdatePalette
;	COMDAT ?UpdateHardware@PaletteMgrIWin@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?UpdateHardware@PaletteMgrIWin@@UAEHXZ PROC NEAR	; PaletteMgrIWin::UpdateHardware, COMDAT

; 26   : 	Bool	UpdateHardware()		{return UpdatePalette(current,next,gammaValue);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 88 54 05 00
	00		 mov	 ecx, DWORD PTR [eax+1364]
  00010	51		 push	 ecx
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	81 c2 60 0d 00
	00		 add	 edx, 3424		; 00000d60H
  0001a	52		 push	 edx
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	05 60 09 00 00	 add	 eax, 2400		; 00000960H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?UpdatePalette@@YAHAAVSOLPalette@@ABV1@H@Z ; UpdatePalette
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?UpdateHardware@PaletteMgrIWin@@UAEHXZ ENDP		; PaletteMgrIWin::UpdateHardware
_TEXT	ENDS
PUBLIC	??1PaletteMgrIWin@@UAE@XZ			; PaletteMgrIWin::~PaletteMgrIWin
;	COMDAT ??_GPaletteMgrIWin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GPaletteMgrIWin@@UAEPAXI@Z PROC NEAR			; PaletteMgrIWin::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1PaletteMgrIWin@@UAE@XZ ; PaletteMgrIWin::~PaletteMgrIWin
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L55969
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L55969:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GPaletteMgrIWin@@UAEPAXI@Z ENDP			; PaletteMgrIWin::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?TermPalette@@YAXXZ:NEAR			; TermPalette
;	COMDAT xdata$x
; File C:\Documents and Settings\don\Desktop\sciw\Interp\palmgrw.hpp
xdata$x	SEGMENT
$T61155	DD	019930520H
	DD	01H
	DD	FLAT:$T61157
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T61157	DD	0ffffffffH
	DD	FLAT:$L61153
xdata$x	ENDS
;	COMDAT ??1PaletteMgrIWin@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1PaletteMgrIWin@@UAE@XZ PROC NEAR			; PaletteMgrIWin::~PaletteMgrIWin, COMDAT

; 24   : 	~PaletteMgrIWin()				{TermPalette();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L61156
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PaletteMgrIWin@@6B@ ; PaletteMgrIWin::`vftable'
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	e8 00 00 00 00	 call	 ?TermPalette@@YAXXZ	; TermPalette
  00031	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ??1PaletteMgrIndex@@UAE@XZ ; PaletteMgrIndex::~PaletteMgrIndex
  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L61153:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1PaletteMgrIndex@@UAE@XZ ; PaletteMgrIndex::~PaletteMgrIndex
  00008	c3		 ret	 0
$L61156:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T61155
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1PaletteMgrIWin@@UAE@XZ ENDP				; PaletteMgrIWin::~PaletteMgrIWin
PUBLIC	??0PaletteMgrTrue@@QAE@XZ			; PaletteMgrTrue::PaletteMgrTrue
PUBLIC	??1PaletteMgrTrue@@UAE@XZ			; PaletteMgrTrue::~PaletteMgrTrue
PUBLIC	?UpdateHardware@PaletteMgrTWin@@UAEHXZ		; PaletteMgrTWin::UpdateHardware
PUBLIC	??_7PaletteMgrTWin@@6B@				; PaletteMgrTWin::`vftable'
PUBLIC	??_GPaletteMgrTWin@@UAEPAXI@Z			; PaletteMgrTWin::`scalar deleting destructor'
PUBLIC	??_EPaletteMgrTWin@@UAEPAXI@Z			; PaletteMgrTWin::`vector deleting destructor'
EXTRN	?UpdateForFrame@PaletteMgrTrue@@UAEHXZ:NEAR	; PaletteMgrTrue::UpdateForFrame
;	COMDAT ??_7PaletteMgrTWin@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\palmgrw.hpp
CONST	SEGMENT
??_7PaletteMgrTWin@@6B@ DD FLAT:??_EPaletteMgrTWin@@UAEPAXI@Z ; PaletteMgrTWin::`vftable'
	DD	FLAT:?Submit@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?Submit@PaletteMgrIndex@@UAEXAAVHunkPalette@@@Z
	DD	FLAT:?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?CycleMap@PaletteMgrIndex@@UBEPBEXZ
	DD	FLAT:?UpdateForFrame@PaletteMgrTrue@@UAEHXZ
	DD	FLAT:?UpdateFFrame@PaletteMgrIndex@@UAEHXZ
	DD	FLAT:?SetCycle@PaletteMgrIndex@@UAEXHHHH@Z
	DD	FLAT:?DoCycle@PaletteMgrIndex@@MAEXHH@Z
	DD	FLAT:?CycleOn@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CyclePause@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CycleAllOn@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?CycleAllPause@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?CycleOff@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CycleAllOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?SetTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?MergeTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?SetStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?MergeStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?SetVary@PaletteMgrIndex@@UAEXABVSOLPalette@@HHHH@Z
	DD	FLAT:?SetVaryPercent@PaletteMgrIndex@@UAEXHHHH@Z
	DD	FLAT:?SetVaryTime@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?VaryPercent@PaletteMgrIndex@@UBEHXZ
	DD	FLAT:?VaryOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?VaryOn@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?VaryPause@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?SetFade@PaletteMgrIndex@@UAEXHHH@Z
	DD	FLAT:?SetGamma@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?GammaOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?FadeOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?UpdateHardware@PaletteMgrTWin@@UAEHXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T61163	DD	019930520H
	DD	01H
	DD	FLAT:$T61165
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T61165	DD	0ffffffffH
	DD	FLAT:$L61161
xdata$x	ENDS
;	COMDAT ??0PaletteMgrTWin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??0PaletteMgrTWin@@QAE@XZ PROC NEAR			; PaletteMgrTWin::PaletteMgrTWin, COMDAT

; 37   : 	PaletteMgrTWin()				{InitPalette();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L61164
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0PaletteMgrTrue@@QAE@XZ ; PaletteMgrTrue::PaletteMgrTrue
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PaletteMgrTWin@@6B@ ; PaletteMgrTWin::`vftable'
  00034	e8 00 00 00 00	 call	 ?InitPalette@@YAXXZ	; InitPalette
  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L61161:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1PaletteMgrTrue@@UAE@XZ ; PaletteMgrTrue::~PaletteMgrTrue
  00008	c3		 ret	 0
$L61164:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T61163
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0PaletteMgrTWin@@QAE@XZ ENDP				; PaletteMgrTWin::PaletteMgrTWin
PUBLIC	??_7PaletteMgrTrue@@6B@				; PaletteMgrTrue::`vftable'
PUBLIC	??_GPaletteMgrTrue@@UAEPAXI@Z			; PaletteMgrTrue::`scalar deleting destructor'
PUBLIC	??_EPaletteMgrTrue@@UAEPAXI@Z			; PaletteMgrTrue::`vector deleting destructor'
EXTRN	__purecall:NEAR
;	COMDAT ??_7PaletteMgrTrue@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\palmgrt.hpp
CONST	SEGMENT
??_7PaletteMgrTrue@@6B@ DD FLAT:??_EPaletteMgrTrue@@UAEPAXI@Z ; PaletteMgrTrue::`vftable'
	DD	FLAT:?Submit@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?Submit@PaletteMgrIndex@@UAEXAAVHunkPalette@@@Z
	DD	FLAT:?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
	DD	FLAT:?CycleMap@PaletteMgrIndex@@UBEPBEXZ
	DD	FLAT:?UpdateForFrame@PaletteMgrTrue@@UAEHXZ
	DD	FLAT:?UpdateFFrame@PaletteMgrIndex@@UAEHXZ
	DD	FLAT:?SetCycle@PaletteMgrIndex@@UAEXHHHH@Z
	DD	FLAT:?DoCycle@PaletteMgrIndex@@MAEXHH@Z
	DD	FLAT:?CycleOn@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CyclePause@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CycleAllOn@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?CycleAllPause@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?CycleOff@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?CycleAllOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?SetTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?MergeTarget@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?SetStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?MergeStart@PaletteMgrIndex@@UAEXABVSOLPalette@@@Z
	DD	FLAT:?SetVary@PaletteMgrIndex@@UAEXABVSOLPalette@@HHHH@Z
	DD	FLAT:?SetVaryPercent@PaletteMgrIndex@@UAEXHHHH@Z
	DD	FLAT:?SetVaryTime@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?VaryPercent@PaletteMgrIndex@@UBEHXZ
	DD	FLAT:?VaryOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?VaryOn@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?VaryPause@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?SetFade@PaletteMgrIndex@@UAEXHHH@Z
	DD	FLAT:?SetGamma@PaletteMgrIndex@@UAEXH@Z
	DD	FLAT:?GammaOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:?FadeOff@PaletteMgrIndex@@UAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??0PaletteMgrTrue@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0PaletteMgrTrue@@QAE@XZ PROC NEAR			; PaletteMgrTrue::PaletteMgrTrue, COMDAT

; 11   : 	PaletteMgrTrue() : PaletteMgrIndex()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0PaletteMgrIndex@@QAE@XZ ; PaletteMgrIndex::PaletteMgrIndex
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PaletteMgrTrue@@6B@ ; PaletteMgrTrue::`vftable'
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0PaletteMgrTrue@@QAE@XZ ENDP				; PaletteMgrTrue::PaletteMgrTrue
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrTrue@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GPaletteMgrTrue@@UAEPAXI@Z PROC NEAR			; PaletteMgrTrue::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1PaletteMgrTrue@@UAE@XZ ; PaletteMgrTrue::~PaletteMgrTrue
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L55933
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L55933:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GPaletteMgrTrue@@UAEPAXI@Z ENDP			; PaletteMgrTrue::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrTrue@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1PaletteMgrTrue@@UAE@XZ PROC NEAR			; PaletteMgrTrue::~PaletteMgrTrue, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1PaletteMgrIndex@@UAE@XZ ; PaletteMgrIndex::~PaletteMgrIndex
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1PaletteMgrTrue@@UAE@XZ ENDP				; PaletteMgrTrue::~PaletteMgrTrue
_TEXT	ENDS
;	COMDAT ?UpdateHardware@PaletteMgrTWin@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?UpdateHardware@PaletteMgrTWin@@UAEHXZ PROC NEAR	; PaletteMgrTWin::UpdateHardware, COMDAT

; 39   : 	Bool	UpdateHardware()		{return UpdatePalette(current,next,gammaValue);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 88 54 05 00
	00		 mov	 ecx, DWORD PTR [eax+1364]
  00010	51		 push	 ecx
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	81 c2 60 0d 00
	00		 add	 edx, 3424		; 00000d60H
  0001a	52		 push	 edx
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	05 60 09 00 00	 add	 eax, 2400		; 00000960H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?UpdatePalette@@YAHAAVSOLPalette@@ABV1@H@Z ; UpdatePalette
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?UpdateHardware@PaletteMgrTWin@@UAEHXZ ENDP		; PaletteMgrTWin::UpdateHardware
_TEXT	ENDS
PUBLIC	??1PaletteMgrTWin@@UAE@XZ			; PaletteMgrTWin::~PaletteMgrTWin
;	COMDAT ??_GPaletteMgrTWin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GPaletteMgrTWin@@UAEPAXI@Z PROC NEAR			; PaletteMgrTWin::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1PaletteMgrTWin@@UAE@XZ ; PaletteMgrTWin::~PaletteMgrTWin
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L55995
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L55995:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GPaletteMgrTWin@@UAEPAXI@Z ENDP			; PaletteMgrTWin::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File C:\Documents and Settings\don\Desktop\sciw\Interp\palmgrw.hpp
xdata$x	SEGMENT
$T61178	DD	019930520H
	DD	01H
	DD	FLAT:$T61180
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T61180	DD	0ffffffffH
	DD	FLAT:$L61176
xdata$x	ENDS
;	COMDAT ??1PaletteMgrTWin@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1PaletteMgrTWin@@UAE@XZ PROC NEAR			; PaletteMgrTWin::~PaletteMgrTWin, COMDAT

; 38   : 	~PaletteMgrTWin()				{TermPalette();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L61179
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PaletteMgrTWin@@6B@ ; PaletteMgrTWin::`vftable'
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	e8 00 00 00 00	 call	 ?TermPalette@@YAXXZ	; TermPalette
  00031	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ??1PaletteMgrTrue@@UAE@XZ ; PaletteMgrTrue::~PaletteMgrTrue
  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L61176:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1PaletteMgrTrue@@UAE@XZ ; PaletteMgrTrue::~PaletteMgrTrue
  00008	c3		 ret	 0
$L61179:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T61178
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1PaletteMgrTWin@@UAE@XZ ENDP				; PaletteMgrTWin::~PaletteMgrTWin
;	COMDAT ?ScreenCount@GraphicsMgrWin@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4
?ScreenCount@GraphicsMgrWin@@UBEHXZ PROC NEAR		; GraphicsMgrWin::ScreenCount, COMDAT

; 30   : 	int	ScreenCount() const	{return 1;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?ScreenCount@GraphicsMgrWin@@UBEHXZ ENDP		; GraphicsMgrWin::ScreenCount
_TEXT	ENDS
;	COMDAT ?VisibleScreen@GraphicsMgrWin@@UAEAAVScreen@@XZ
_TEXT	SEGMENT
_this$ = -4
?VisibleScreen@GraphicsMgrWin@@UAEAAVScreen@@XZ PROC NEAR ; GraphicsMgrWin::VisibleScreen, COMDAT

; 35   : 	Screen&		VisibleScreen()   			{return last;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 98 11 00 00	 add	 eax, 4504		; 00001198H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?VisibleScreen@GraphicsMgrWin@@UAEAAVScreen@@XZ ENDP	; GraphicsMgrWin::VisibleScreen
_TEXT	ENDS
;	COMDAT ?ShakeScreen@GraphicsMgrWin@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4
?ShakeScreen@GraphicsMgrWin@@UAEXHH@Z PROC NEAR		; GraphicsMgrWin::ShakeScreen, COMDAT

; 40   : 	void	ShakeScreen(int, int)				{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 08 00	 ret	 8
?ShakeScreen@GraphicsMgrWin@@UAEXHH@Z ENDP		; GraphicsMgrWin::ShakeScreen
_TEXT	ENDS
;	COMDAT ?ClearLastScreen@GraphicsMgrWin@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?ClearLastScreen@GraphicsMgrWin@@UAEXXZ PROC NEAR	; GraphicsMgrWin::ClearLastScreen, COMDAT

; 42   : 	void  ClearLastScreen()						{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?ClearLastScreen@GraphicsMgrWin@@UAEXXZ ENDP		; GraphicsMgrWin::ClearLastScreen
_TEXT	ENDS
;	COMDAT ?GPalette@GraphicsMgrWin@@UAEAAVPaletteMgr@@XZ
_TEXT	SEGMENT
_this$ = -4
?GPalette@GraphicsMgrWin@@UAEAAVPaletteMgr@@XZ PROC NEAR ; GraphicsMgrWin::GPalette, COMDAT

; 44   : 	PaletteMgr&	GPalette()						{return *palmgr;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 f8 22 00
	00		 mov	 eax, DWORD PTR [eax+8952]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?GPalette@GraphicsMgrWin@@UAEAAVPaletteMgr@@XZ ENDP	; GraphicsMgrWin::GPalette
_TEXT	ENDS
;	COMDAT ?GCursor@GraphicsMgrWin@@UAEAAVSOL_Cursor@@XZ
_TEXT	SEGMENT
_this$ = -4
?GCursor@GraphicsMgrWin@@UAEAAVSOL_Cursor@@XZ PROC NEAR	; GraphicsMgrWin::GCursor, COMDAT

; 45   : 	SOL_Cursor&	GCursor()						{return *cursor;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 fc 22 00
	00		 mov	 eax, DWORD PTR [eax+8956]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?GCursor@GraphicsMgrWin@@UAEAAVSOL_Cursor@@XZ ENDP	; GraphicsMgrWin::GCursor
_TEXT	ENDS
;	COMDAT ?PriMap@GraphicsMgrWin@@UAEAAVBuffer@@XZ
_TEXT	SEGMENT
_this$ = -4
?PriMap@GraphicsMgrWin@@UAEAAVBuffer@@XZ PROC NEAR	; GraphicsMgrWin::PriMap, COMDAT

; 49   : 	Buffer& 	PriMap() 							{return pmap;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 10 23 00 00	 add	 eax, 8976		; 00002310H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?PriMap@GraphicsMgrWin@@UAEAAVBuffer@@XZ ENDP		; GraphicsMgrWin::PriMap
_TEXT	ENDS
EXTRN	?CalcLists@Screen@@QAEXAAV1@QAPAVDrawList@@QAPAVRectList@@ABVSOL_Rect@@@Z:NEAR ; Screen::CalcLists
;	COMDAT ?CalcLists@GraphicsMgrWin@@MAEXPAPAVDrawList@@PAPAVRectList@@AAVSOL_Rect@@@Z
_TEXT	SEGMENT
_drawLists$ = 8
_eraseLists$ = 12
_dirtyRect$ = 16
_this$ = -4
?CalcLists@GraphicsMgrWin@@MAEXPAPAVDrawList@@PAPAVRectList@@AAVSOL_Rect@@@Z PROC NEAR ; GraphicsMgrWin::CalcLists, COMDAT

; 54   : 						{next.CalcLists(last,drawLists,eraseLists,dirtyRect);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _dirtyRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _eraseLists$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _drawLists$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	05 98 11 00 00	 add	 eax, 4504		; 00001198H
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 14	 add	 ecx, 20			; 00000014H
  00022	e8 00 00 00 00	 call	 ?CalcLists@Screen@@QAEXAAV1@QAPAVDrawList@@QAPAVRectList@@ABVSOL_Rect@@@Z ; Screen::CalcLists
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
?CalcLists@GraphicsMgrWin@@MAEXPAPAVDrawList@@PAPAVRectList@@AAVSOL_Rect@@@Z ENDP ; GraphicsMgrWin::CalcLists
_TEXT	ENDS
;	COMDAT ?CurrBuffer@GraphicsMgrWin@@MAEPAVBuffer@@XZ
_TEXT	SEGMENT
_this$ = -4
?CurrBuffer@GraphicsMgrWin@@MAEPAVBuffer@@XZ PROC NEAR	; GraphicsMgrWin::CurrBuffer, COMDAT

; 59   : 	Buffer*	CurrBuffer()						{return &buffer;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 e8 22 00 00	 add	 eax, 8936		; 000022e8H
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?CurrBuffer@GraphicsMgrWin@@MAEPAVBuffer@@XZ ENDP	; GraphicsMgrWin::CurrBuffer
_TEXT	ENDS
;	COMDAT ?TrueColor@GraphicsMgrWin@@MBEHXZ
_TEXT	SEGMENT
_this$ = -4
?TrueColor@GraphicsMgrWin@@MBEHXZ PROC NEAR		; GraphicsMgrWin::TrueColor, COMDAT

; 60   : 	Bool		TrueColor() const					{return TRUECOLOR;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?TRUECOLOR@@3HA ; TRUECOLOR
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?TrueColor@GraphicsMgrWin@@MBEHXZ ENDP			; GraphicsMgrWin::TrueColor
_TEXT	ENDS
PUBLIC	??4Screen@@QAEAAV0@ABV0@@Z			; Screen::operator=
;	COMDAT ?UpdateScreen@GraphicsMgrWin@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?UpdateScreen@GraphicsMgrWin@@UAEXXZ PROC NEAR		; GraphicsMgrWin::UpdateScreen, COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 	last = next;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 14	 add	 eax, 20			; 00000014H
  0000d	50		 push	 eax
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 98 11 00
	00		 add	 ecx, 4504		; 00001198H
  00017	e8 00 00 00 00	 call	 ??4Screen@@QAEAAV0@ABV0@@Z ; Screen::operator=

; 95   : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?UpdateScreen@GraphicsMgrWin@@UAEXXZ ENDP		; GraphicsMgrWin::UpdateScreen
_TEXT	ENDS
;	COMDAT ??4Screen@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_src$ = 8
_this$ = -4
??4Screen@@QAEAAV0@ABV0@@Z PROC NEAR			; Screen::operator=, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	xDim = src.xDim;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0000d	8b 91 48 11 00
	00		 mov	 edx, DWORD PTR [ecx+4424]
  00013	89 90 48 11 00
	00		 mov	 DWORD PTR [eax+4424], edx

; 84   : 	yDim = src.yDim;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0001f	8b 91 4c 11 00
	00		 mov	 edx, DWORD PTR [ecx+4428]
  00025	89 90 4c 11 00
	00		 mov	 DWORD PTR [eax+4428], edx

; 85   : 	return *this;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 86   : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??4Screen@@QAEAAV0@ABV0@@Z ENDP				; Screen::operator=
_TEXT	ENDS
END

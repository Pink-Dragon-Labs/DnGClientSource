	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Winfuncs.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?KWinHelp@@YAXPAF@Z				; KWinHelp
PUBLIC	??DTextID@@QAEPADXZ				; TextID::operator*
EXTRN	__imp__WinHelpA@16:NEAR
EXTRN	??0TextID@@QAE@G@Z:NEAR				; TextID::TextID
EXTRN	?hMyWnd@@3PAUHWND__@@A:DWORD			; hMyWnd
_TEXT	SEGMENT
_args$ = 8
_lpszHelpFile$ = -4
_fuCommand$ = -8
_dwData$ = -12
_hwi$ = -40
$T56172 = -44
?KWinHelp@@YAXPAF@Z PROC NEAR				; KWinHelp

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 41   : LPCSTR		lpszHelpFile;
; 42   : UINT			fuCommand;
; 43   : DWORD			dwData;
; 44   : HELPWININFO	hwi;
; 45   : 
; 46   : 	lpszHelpFile = (LPCSTR)*((TextID) arg(2));

  00006	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00009	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	8d 4d d4	 lea	 ecx, DWORD PTR $T56172[ebp]
  00011	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0001d	89 45 fc	 mov	 DWORD PTR _lpszHelpFile$[ebp], eax

; 47   : 	fuCommand = (UINT)arg(1);

  00020	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00023	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00027	89 45 f8	 mov	 DWORD PTR _fuCommand$[ebp], eax

; 48   : 
; 49   : 	switch (arg(1)) {

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0002d	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  00031	89 55 d0	 mov	 DWORD PTR -48+[ebp], edx
  00034	83 7d d0 03	 cmp	 DWORD PTR -48+[ebp], 3
  00038	7f 17		 jg	 SHORT $L56173
  0003a	83 7d d0 03	 cmp	 DWORD PTR -48+[ebp], 3
  0003e	74 2e		 je	 SHORT $L56064
  00040	83 7d d0 01	 cmp	 DWORD PTR -48+[ebp], 1
  00044	74 1c		 je	 SHORT $L56062
  00046	83 7d d0 02	 cmp	 DWORD PTR -48+[ebp], 2
  0004a	74 7c		 je	 SHORT $L56077
  0004c	e9 80 00 00 00	 jmp	 $L56079
$L56173:
  00051	83 7d d0 08	 cmp	 DWORD PTR -48+[ebp], 8
  00055	74 20		 je	 SHORT $L56066
  00057	81 7d d0 03 02
	00 00		 cmp	 DWORD PTR -48+[ebp], 515 ; 00000203H
  0005e	74 23		 je	 SHORT $L56068
  00060	eb 6f		 jmp	 SHORT $L56079
$L56062:

; 50   : 
; 51   : 		case HELP_CONTEXT:
; 52   : 			dwData = (DWORD)arg(3);

  00062	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00065	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00069	89 4d f4	 mov	 DWORD PTR _dwData$[ebp], ecx

; 53   : 			break;

  0006c	eb 6a		 jmp	 SHORT $L56059
$L56064:

; 54   : 
; 55   : 		case HELP_CONTENTS:
; 56   : 			dwData = (DWORD)0;

  0006e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwData$[ebp], 0

; 57   : 			break;

  00075	eb 61		 jmp	 SHORT $L56059
$L56066:

; 58   : 
; 59   : 		case HELP_CONTEXTPOPUP:
; 60   : 			dwData = (DWORD)arg(3);

  00077	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0007a	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  0007e	89 45 f4	 mov	 DWORD PTR _dwData$[ebp], eax

; 61   : 			break;

  00081	eb 55		 jmp	 SHORT $L56059
$L56068:

; 62   : 
; 63   : 		case HELP_SETWINPOS:
; 64   : 			hwi.wStructSize = sizeof(HELPWININFO);

  00083	c7 45 d8 1c 00
	00 00		 mov	 DWORD PTR _hwi$[ebp], 28 ; 0000001cH

; 65   : 			hwi.x =		(int)arg(3);

  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0008d	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00091	89 55 dc	 mov	 DWORD PTR _hwi$[ebp+4], edx

; 66   : 			hwi.y =		(int)arg(4);

  00094	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00097	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0009b	89 4d e0	 mov	 DWORD PTR _hwi$[ebp+8], ecx

; 67   : 			hwi.dx =		(int)arg(5);

  0009e	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  000a1	0f bf 42 0a	 movsx	 eax, WORD PTR [edx+10]
  000a5	89 45 e4	 mov	 DWORD PTR _hwi$[ebp+12], eax

; 68   : 			hwi.dy =		(int)arg(6);

  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  000ab	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  000af	89 55 e8	 mov	 DWORD PTR _hwi$[ebp+16], edx

; 69   : 			hwi.wMax =	(int)arg(7);

  000b2	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  000b5	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  000b9	89 4d ec	 mov	 DWORD PTR _hwi$[ebp+20], ecx

; 70   : 			// Note: Setting the following to a null string seems to have the effect
; 71   : 			// of changing the size of all help windows.
; 72   : 			hwi.rgchMember[0] = 0;

  000bc	c6 45 f0 00	 mov	 BYTE PTR _hwi$[ebp+24], 0

; 73   : 			dwData = (DWORD)((LPHELPWININFO)&hwi);

  000c0	8d 55 d8	 lea	 edx, DWORD PTR _hwi$[ebp]
  000c3	89 55 f4	 mov	 DWORD PTR _dwData$[ebp], edx

; 74   : 			break;

  000c6	eb 10		 jmp	 SHORT $L56059
$L56077:

; 75   : 
; 76   : 		case HELP_QUIT:
; 77   : 			dwData = (DWORD)0;

  000c8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwData$[ebp], 0

; 78   : 			break;

  000cf	eb 07		 jmp	 SHORT $L56059
$L56079:

; 79   : 
; 80   : 		default:
; 81   : 			fuCommand = 0;

  000d1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fuCommand$[ebp], 0
$L56059:

; 84   : 
; 85   : 	if (fuCommand)

  000d8	83 7d f8 00	 cmp	 DWORD PTR _fuCommand$[ebp], 0
  000dc	74 18		 je	 SHORT $L56080

; 86   : 		WinHelp(hMyWnd, lpszHelpFile, fuCommand, dwData);

  000de	8b 45 f4	 mov	 eax, DWORD PTR _dwData$[ebp]
  000e1	50		 push	 eax
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _fuCommand$[ebp]
  000e5	51		 push	 ecx
  000e6	8b 55 fc	 mov	 edx, DWORD PTR _lpszHelpFile$[ebp]
  000e9	52		 push	 edx
  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hMyWnd@@3PAUHWND__@@A ; hMyWnd
  000ef	50		 push	 eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WinHelpA@16
$L56080:

; 87   : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
?KWinHelp@@YAXPAF@Z ENDP				; KWinHelp
_TEXT	ENDS
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\textid.hpp
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4
??DTextID@@QAEPADXZ PROC NEAR				; TextID::operator*, COMDAT

; 24   : 	char	*operator *() { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return handle ? (char *)MemID::operator*() : ""; 

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	33 c9		 xor	 ecx, ecx
  0000e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0d		 je	 SHORT $L56175
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0001d	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00020	eb 07		 jmp	 SHORT $L56176
$L56175:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L56176:
  00029	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 26   : 	}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??DTextID@@QAEPADXZ ENDP				; TextID::operator*
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
EXTRN	_memMgr:DWORD
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
PUBLIC	?KMessageBox@@YAXPAF@Z				; KMessageBox
EXTRN	__imp__MessageBoxA@16:NEAR
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
_TEXT	SEGMENT
_args$ = 8
$T56181 = -4
$T56182 = -8
?KMessageBox@@YAXPAF@Z PROC NEAR			; KMessageBox

; 136  : {

  000fa	55		 push	 ebp
  000fb	8b ec		 mov	 ebp, esp
  000fd	83 ec 08	 sub	 esp, 8

; 137  : 
; 138  : 	pm.acc = (Acc)MessageBox(hMyWnd,
; 139  : 									(LPCSTR)*((TextID)arg(1)),		// text
; 140  : 									(LPCSTR)*((TextID)arg(2)),		// title
; 141  : 									(UINT)arg(3));						// style

  00100	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00103	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00107	51		 push	 ecx
  00108	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0010b	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  0010f	50		 push	 eax
  00110	8d 4d fc	 lea	 ecx, DWORD PTR $T56181[ebp]
  00113	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00118	8b c8		 mov	 ecx, eax
  0011a	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0011f	50		 push	 eax
  00120	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  00123	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  00127	52		 push	 edx
  00128	8d 4d f8	 lea	 ecx, DWORD PTR $T56182[ebp]
  0012b	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00130	8b c8		 mov	 ecx, eax
  00132	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00137	50		 push	 eax
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hMyWnd@@3PAUHWND__@@A ; hMyWnd
  0013d	50		 push	 eax
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00144	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 142  : }

  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
?KMessageBox@@YAXPAF@Z ENDP				; KMessageBox
_TEXT	ENDS
END

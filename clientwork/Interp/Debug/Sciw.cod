	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Sciw.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1EventMgrWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FlushKeyboard@EventMgrWin@@MAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GEventMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24F@@QAE@EEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ASOLPalette@@QAEAAVRgb24F@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4Screen@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CycleMap@PaletteMgrIndex@@UBEPBEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPercent@PaletteMgrIndex@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPause@PaletteMgrIndex@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PaletteMgrTrue@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrTrue@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrTrue@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrIWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateHardware@PaletteMgrIWin@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrIWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrTWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateHardware@PaletteMgrTWin@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrTWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Cursor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Cursor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemoryMgrWin@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PointerDevice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPointerDevice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Mouse@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSwiftInfo@SOL_Mouse@@UBEHPAH000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSwift@SOL_Mouse@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Vibrate@SOL_Mouse@@UBEXHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetHotRectangleStatus@SOL_Mouse@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Mouse@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitExceptions@SCI@@MAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SCIWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCIWin@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSCIWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSCI@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MsgMgrWin@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MsgMgrWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SCI@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SOL_Cursor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgrTrue@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PointerDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7EventMgrWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SOL_Mouse@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgrIWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgrTWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgrWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7SCIWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
CRT$XCU	SEGMENT
_$S43	DD	FLAT:_$E42
CRT$XCU	ENDS
_TEXT	SEGMENT
_$E42	PROC NEAR
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 _$E39
  00008	e8 00 00 00 00	 call	 _$E41
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E42	ENDP
_TEXT	ENDS
PUBLIC	??0SCIWin@@QAE@XZ				; SCIWin::SCIWin
_BSS	SEGMENT
_sciWin	DD	01H DUP (?)
_BSS	ENDS
_TEXT	SEGMENT
_$E39	PROC NEAR

; 33   : } static sciWin;

  0000f	55		 push	 ebp
  00010	8b ec		 mov	 ebp, esp
  00012	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_sciWin
  00017	e8 00 00 00 00	 call	 ??0SCIWin@@QAE@XZ	; SCIWin::SCIWin
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_$E39	ENDP
_TEXT	ENDS
EXTRN	_atexit:NEAR
_TEXT	SEGMENT
_$E41	PROC NEAR
  0001e	55		 push	 ebp
  0001f	8b ec		 mov	 ebp, esp
  00021	68 00 00 00 00	 push	 OFFSET FLAT:_$E40
  00026	e8 00 00 00 00	 call	 _atexit
  0002b	83 c4 04	 add	 esp, 4
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_$E41	ENDP
_TEXT	ENDS
PUBLIC	??1SCIWin@@UAE@XZ				; SCIWin::~SCIWin
_TEXT	SEGMENT
_$E40	PROC NEAR
  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_sciWin
  00038	e8 00 00 00 00	 call	 ??1SCIWin@@UAE@XZ	; SCIWin::~SCIWin
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_$E40	ENDP
_TEXT	ENDS
EXTRN	??1SCI@@UAE@XZ:NEAR				; SCI::~SCI
;	COMDAT ??1SCIWin@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1SCIWin@@UAE@XZ PROC NEAR				; SCIWin::~SCIWin, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1SCI@@UAE@XZ		; SCI::~SCI
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1SCIWin@@UAE@XZ ENDP					; SCIWin::~SCIWin
_TEXT	ENDS
PUBLIC	?InitExceptions@SCI@@MAEXXZ			; SCI::InitExceptions
PUBLIC	??0SCI@@QAE@XZ					; SCI::SCI
PUBLIC	?InitAudio@SCIWin@@UAEXXZ			; SCIWin::InitAudio
PUBLIC	?InitInterrupts@SCIWin@@UAEXXZ			; SCIWin::InitInterrupts
PUBLIC	?InitPalette@SCIWin@@UAEXXZ			; SCIWin::InitPalette
PUBLIC	?InitSound@SCIWin@@UAEXXZ			; SCIWin::InitSound
PUBLIC	?MakeConfigMgr@SCIWin@@UAEPAVConfigMgr@@HQAPAD@Z ; SCIWin::MakeConfigMgr
PUBLIC	?MakeEventMgr@SCIWin@@UAEPAUEventMgr@@XZ	; SCIWin::MakeEventMgr
PUBLIC	?MakeGraphicsMgr@SCIWin@@UAEPAVGraphicsMgr@@XZ	; SCIWin::MakeGraphicsMgr
PUBLIC	?MakeMemoryMgr@SCIWin@@UAEPAVMemoryMgr@@XZ	; SCIWin::MakeMemoryMgr
PUBLIC	?MakeMouse@SCIWin@@UAEPAVSOL_Mouse@@XZ		; SCIWin::MakeMouse
PUBLIC	?MakeMsgMgr@SCIWin@@UAEPAVMsgMgr@@XZ		; SCIWin::MakeMsgMgr
PUBLIC	?MakeTimeMgr@SCIWin@@UAEPAVTimeMgr@@XZ		; SCIWin::MakeTimeMgr
PUBLIC	??_7SCIWin@@6B@					; SCIWin::`vftable'
PUBLIC	??_GSCIWin@@UAEPAXI@Z				; SCIWin::`scalar deleting destructor'
PUBLIC	??_ESCIWin@@UAEPAXI@Z				; SCIWin::`vector deleting destructor'
EXTRN	?Run@SCI@@UAEXHQAPAD@Z:NEAR			; SCI::Run
EXTRN	?Init@SCI@@MAEXHQAPAD@Z:NEAR			; SCI::Init
EXTRN	?InitPlane@SCI@@MAEXXZ:NEAR			; SCI::InitPlane
EXTRN	?MakeFontMgr@SCI@@MAEPAVFontMgr@@XZ:NEAR	; SCI::MakeFontMgr
EXTRN	?MakeResourceMgr@SCI@@MAEPAVResourceMgr@@XZ:NEAR ; SCI::MakeResourceMgr
;	COMDAT ??_7SCIWin@@6B@
CONST	SEGMENT
??_7SCIWin@@6B@ DD FLAT:??_ESCIWin@@UAEPAXI@Z		; SCIWin::`vftable'
	DD	FLAT:?Run@SCI@@UAEXHQAPAD@Z
	DD	FLAT:?Init@SCI@@MAEXHQAPAD@Z
	DD	FLAT:?InitAudio@SCIWin@@UAEXXZ
	DD	FLAT:?InitExceptions@SCI@@MAEXXZ
	DD	FLAT:?InitInterrupts@SCIWin@@UAEXXZ
	DD	FLAT:?InitPalette@SCIWin@@UAEXXZ
	DD	FLAT:?InitPlane@SCI@@MAEXXZ
	DD	FLAT:?InitSound@SCIWin@@UAEXXZ
	DD	FLAT:?MakeConfigMgr@SCIWin@@UAEPAVConfigMgr@@HQAPAD@Z
	DD	FLAT:?MakeEventMgr@SCIWin@@UAEPAUEventMgr@@XZ
	DD	FLAT:?MakeFontMgr@SCI@@MAEPAVFontMgr@@XZ
	DD	FLAT:?MakeGraphicsMgr@SCIWin@@UAEPAVGraphicsMgr@@XZ
	DD	FLAT:?MakeMemoryMgr@SCIWin@@UAEPAVMemoryMgr@@XZ
	DD	FLAT:?MakeMouse@SCIWin@@UAEPAVSOL_Mouse@@XZ
	DD	FLAT:?MakeMsgMgr@SCIWin@@UAEPAVMsgMgr@@XZ
	DD	FLAT:?MakeResourceMgr@SCI@@MAEPAVResourceMgr@@XZ
	DD	FLAT:?MakeTimeMgr@SCIWin@@UAEPAVTimeMgr@@XZ
CONST	ENDS
;	COMDAT ??0SCIWin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SCIWin@@QAE@XZ PROC NEAR				; SCIWin::SCIWin, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SCI@@QAE@XZ		; SCI::SCI
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7SCIWin@@6B@ ; SCIWin::`vftable'
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0SCIWin@@QAE@XZ ENDP					; SCIWin::SCIWin
_TEXT	ENDS
;	COMDAT ?InitExceptions@SCI@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4
?InitExceptions@SCI@@MAEXXZ PROC NEAR			; SCI::InitExceptions, COMDAT

; 27   : 	virtual void            InitExceptions() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?InitExceptions@SCI@@MAEXXZ ENDP			; SCI::InitExceptions
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ??_GSCIWin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GSCIWin@@UAEPAXI@Z PROC NEAR				; SCIWin::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1SCIWin@@UAE@XZ	; SCIWin::~SCIWin
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L63433
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L63433:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GSCIWin@@UAEPAXI@Z ENDP				; SCIWin::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7SCI@@6B@					; SCI::`vftable'
PUBLIC	??_GSCI@@UAEPAXI@Z				; SCI::`scalar deleting destructor'
PUBLIC	??_ESCI@@UAEPAXI@Z				; SCI::`vector deleting destructor'
EXTRN	__purecall:NEAR
;	COMDAT ??_7SCI@@6B@
CONST	SEGMENT
??_7SCI@@6B@ DD	FLAT:??_ESCI@@UAEPAXI@Z			; SCI::`vftable'
	DD	FLAT:?Run@SCI@@UAEXHQAPAD@Z
	DD	FLAT:?Init@SCI@@MAEXHQAPAD@Z
	DD	FLAT:__purecall
	DD	FLAT:?InitExceptions@SCI@@MAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?InitPlane@SCI@@MAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?MakeFontMgr@SCI@@MAEPAVFontMgr@@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?MakeResourceMgr@SCI@@MAEPAVResourceMgr@@XZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??0SCI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SCI@@QAE@XZ PROC NEAR				; SCI::SCI, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7SCI@@6B@ ; SCI::`vftable'
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0SCI@@QAE@XZ ENDP					; SCI::SCI
_TEXT	ENDS
;	COMDAT ??_GSCI@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GSCI@@UAEPAXI@Z PROC NEAR				; SCI::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1SCI@@UAE@XZ		; SCI::~SCI
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L63439
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L63439:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GSCI@@UAEPAXI@Z ENDP					; SCI::`scalar deleting destructor'
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4
?InitAudio@SCIWin@@UAEXXZ PROC NEAR			; SCIWin::InitAudio

; 35   : void SCIWin::InitAudio() {

  0003f	55		 push	 ebp
  00040	8b ec		 mov	 ebp, esp
  00042	51		 push	 ecx
  00043	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?InitAudio@SCIWin@@UAEXXZ ENDP				; SCIWin::InitAudio
_this$ = -4
?InitInterrupts@SCIWin@@UAEXXZ PROC NEAR		; SCIWin::InitInterrupts

; 38   : void SCIWin::InitInterrupts() {

  0004a	55		 push	 ebp
  0004b	8b ec		 mov	 ebp, esp
  0004d	51		 push	 ecx
  0004e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?InitInterrupts@SCIWin@@UAEXXZ ENDP			; SCIWin::InitInterrupts
_TEXT	ENDS
PUBLIC	??0Rgb24F@@QAE@EEEE@Z				; Rgb24F::Rgb24F
PUBLIC	??ASOLPalette@@QAEAAVRgb24F@@H@Z		; SOLPalette::operator[]
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??0SOLPalette@@QAE@XZ:NEAR			; SOLPalette::SOLPalette
xdata$x	SEGMENT
$T63827	DD	019930520H
	DD	01H
	DD	FLAT:$T63830
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63830	DD	0ffffffffH
	DD	FLAT:$L63823
xdata$x	ENDS
_TEXT	SEGMENT
$T63817 = -20
$T63818 = -24
$T63821 = -28
$T63822 = -32
__$EHRec$ = -12
_this$ = -36
_palette$ = -16
?InitPalette@SCIWin@@UAEXXZ PROC NEAR			; SCIWin::InitPalette

; 41   : void SCIWin::InitPalette() {

  00055	55		 push	 ebp
  00056	8b ec		 mov	 ebp, esp
  00058	6a ff		 push	 -1
  0005a	68 00 00 00 00	 push	 $L63828
  0005f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00065	50		 push	 eax
  00066	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0006d	83 ec 28	 sub	 esp, 40			; 00000028H
  00070	56		 push	 esi
  00071	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	// default palette
; 43   : 	SOLPalette* palette = New SOLPalette;

  00074	68 00 04 00 00	 push	 1024			; 00000400H
  00079	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007e	83 c4 04	 add	 esp, 4
  00081	89 45 e8	 mov	 DWORD PTR $T63818[ebp], eax
  00084	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008b	83 7d e8 00	 cmp	 DWORD PTR $T63818[ebp], 0
  0008f	74 0d		 je	 SHORT $L63819
  00091	8b 4d e8	 mov	 ecx, DWORD PTR $T63818[ebp]
  00094	e8 00 00 00 00	 call	 ??0SOLPalette@@QAE@XZ	; SOLPalette::SOLPalette
  00099	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
  0009c	eb 07		 jmp	 SHORT $L63820
$L63819:
  0009e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR -40+[ebp], 0
$L63820:
  000a5	8b 45 d8	 mov	 eax, DWORD PTR -40+[ebp]
  000a8	89 45 ec	 mov	 DWORD PTR $T63817[ebp], eax
  000ab	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b2	8b 4d ec	 mov	 ecx, DWORD PTR $T63817[ebp]
  000b5	89 4d f0	 mov	 DWORD PTR _palette$[ebp], ecx

; 44   : 	(*palette)[255] = Rgb24F(255, 255, 255, 1);

  000b8	6a 01		 push	 1
  000ba	68 ff 00 00 00	 push	 255			; 000000ffH
  000bf	68 ff 00 00 00	 push	 255			; 000000ffH
  000c4	68 ff 00 00 00	 push	 255			; 000000ffH
  000c9	8d 4d e4	 lea	 ecx, DWORD PTR $T63821[ebp]
  000cc	e8 00 00 00 00	 call	 ??0Rgb24F@@QAE@EEEE@Z	; Rgb24F::Rgb24F
  000d1	8b 30		 mov	 esi, DWORD PTR [eax]
  000d3	68 ff 00 00 00	 push	 255			; 000000ffH
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _palette$[ebp]
  000db	e8 00 00 00 00	 call	 ??ASOLPalette@@QAEAAVRgb24F@@H@Z ; SOLPalette::operator[]
  000e0	89 30		 mov	 DWORD PTR [eax], esi

; 45   : 	assert(graphMgr);
; 46   : 	graphMgr->GPalette().Submit(*palette);

  000e2	8b 55 f0	 mov	 edx, DWORD PTR _palette$[ebp]
  000e5	52		 push	 edx
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  000eb	8b 10		 mov	 edx, DWORD PTR [eax]
  000ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  000f3	ff 52 1c	 call	 DWORD PTR [edx+28]
  000f6	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  000f9	8b 45 d4	 mov	 eax, DWORD PTR -44+[ebp]
  000fc	8b 10		 mov	 edx, DWORD PTR [eax]
  000fe	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  00101	ff 52 04	 call	 DWORD PTR [edx+4]

; 47   : 	graphMgr->GPalette().UpdateForFrame();

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00109	8b 10		 mov	 edx, DWORD PTR [eax]
  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00111	ff 52 1c	 call	 DWORD PTR [edx+28]
  00114	89 45 d0	 mov	 DWORD PTR -48+[ebp], eax
  00117	8b 45 d0	 mov	 eax, DWORD PTR -48+[ebp]
  0011a	8b 10		 mov	 edx, DWORD PTR [eax]
  0011c	8b 4d d0	 mov	 ecx, DWORD PTR -48+[ebp]
  0011f	ff 52 1c	 call	 DWORD PTR [edx+28]

; 48   : 	graphMgr->GPalette().UpdateHardware();

  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00127	8b 10		 mov	 edx, DWORD PTR [eax]
  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0012f	ff 52 1c	 call	 DWORD PTR [edx+28]
  00132	89 45 cc	 mov	 DWORD PTR -52+[ebp], eax
  00135	8b 45 cc	 mov	 eax, DWORD PTR -52+[ebp]
  00138	8b 10		 mov	 edx, DWORD PTR [eax]
  0013a	8b 4d cc	 mov	 ecx, DWORD PTR -52+[ebp]
  0013d	ff 92 80 00 00
	00		 call	 DWORD PTR [edx+128]

; 49   : 	delete palette;

  00143	8b 45 f0	 mov	 eax, DWORD PTR _palette$[ebp]
  00146	89 45 e0	 mov	 DWORD PTR $T63822[ebp], eax
  00149	8b 4d e0	 mov	 ecx, DWORD PTR $T63822[ebp]
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00152	83 c4 04	 add	 esp, 4

; 50   : }

  00155	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00158	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0015f	5e		 pop	 esi
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L63823:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T63818[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L63828:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63827
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InitPalette@SCIWin@@UAEXXZ ENDP			; SCIWin::InitPalette
PUBLIC	??0Rgb24@@QAE@EEE@Z				; Rgb24::Rgb24
;	COMDAT ??0Rgb24F@@QAE@EEEE@Z
_TEXT	SEGMENT
_r$ = 8
_g$ = 12
_b$ = 16
_f$ = 20
_this$ = -4
??0Rgb24F@@QAE@EEEE@Z PROC NEAR				; Rgb24F::Rgb24F, COMDAT

; 26   : 	Rgb24F(uchar r, uchar g, uchar b, uchar f) : Rgb24(r, g, b), flag(f) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 10	 mov	 al, BYTE PTR _b$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 0c	 mov	 cl, BYTE PTR _g$[ebp]
  0000e	51		 push	 ecx
  0000f	8a 55 08	 mov	 dl, BYTE PTR _r$[ebp]
  00012	52		 push	 edx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??0Rgb24@@QAE@EEE@Z	; Rgb24::Rgb24
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8a 4d 14	 mov	 cl, BYTE PTR _f$[ebp]
  00021	88 48 03	 mov	 BYTE PTR [eax+3], cl
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 10 00	 ret	 16			; 00000010H
??0Rgb24F@@QAE@EEEE@Z ENDP				; Rgb24F::Rgb24F
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT
_r$ = 8
_g$ = 12
_b$ = 16
_this$ = -4
??0Rgb24@@QAE@EEE@Z PROC NEAR				; Rgb24::Rgb24, COMDAT

; 7    : 	Rgb24(uchar r, uchar g, uchar b) : red(r), green(g), blue(b) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 4d 08	 mov	 cl, BYTE PTR _r$[ebp]
  0000d	88 08		 mov	 BYTE PTR [eax], cl
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8a 45 0c	 mov	 al, BYTE PTR _g$[ebp]
  00015	88 42 01	 mov	 BYTE PTR [edx+1], al
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8a 55 10	 mov	 dl, BYTE PTR _b$[ebp]
  0001e	88 51 02	 mov	 BYTE PTR [ecx+2], dl
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??0Rgb24@@QAE@EEE@Z ENDP				; Rgb24::Rgb24
_TEXT	ENDS
;	COMDAT ??ASOLPalette@@QAEAAVRgb24F@@H@Z
_TEXT	SEGMENT
_i$ = 8
_this$ = -4
??ASOLPalette@@QAEAAVRgb24F@@H@Z PROC NEAR		; SOLPalette::operator[], COMDAT

; 42   : 	Rgb24F&	operator[](int i)					{return colors[i];}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??ASOLPalette@@QAEAAVRgb24F@@H@Z ENDP			; SOLPalette::operator[]
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4
?InitSound@SCIWin@@UAEXXZ PROC NEAR			; SCIWin::InitSound

; 52   : void SCIWin::InitSound() {

  00164	55		 push	 ebp
  00165	8b ec		 mov	 ebp, esp
  00167	51		 push	 ecx
  00168	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : }

  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
?InitSound@SCIWin@@UAEXXZ ENDP				; SCIWin::InitSound
_TEXT	ENDS
EXTRN	?szWinPatchDir@@3PADA:BYTE			; szWinPatchDir
EXTRN	??0ConfigMgr@@QAE@PBDHPAPAD@Z:NEAR		; ConfigMgr::ConfigMgr
EXTRN	?AddTokenToFront@ConfigMgr@@QAEXPAD0@Z:NEAR	; ConfigMgr::AddTokenToFront
_DATA	SEGMENT
$SG63470 DB	'resource.win', 00H
	ORG $+3
$SG63471 DB	'patchDir', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T63843	DD	019930520H
	DD	01H
	DD	FLAT:$T63845
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63845	DD	0ffffffffH
	DD	FLAT:$L63841
xdata$x	ENDS
_TEXT	SEGMENT
$T63837 = -20
$T63838 = -24
__$EHRec$ = -12
_argc$ = 8
_argv$ = 12
_this$ = -28
_configM$ = -16
?MakeConfigMgr@SCIWin@@UAEPAVConfigMgr@@HQAPAD@Z PROC NEAR ; SCIWin::MakeConfigMgr

; 55   : ConfigMgr* SCIWin::MakeConfigMgr(int argc, char* argv[]) {

  0016f	55		 push	 ebp
  00170	8b ec		 mov	 ebp, esp
  00172	6a ff		 push	 -1
  00174	68 00 00 00 00	 push	 $L63844
  00179	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0017f	50		 push	 eax
  00180	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00187	83 ec 14	 sub	 esp, 20			; 00000014H
  0018a	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 56   : 	ConfigMgr* configM = New ConfigMgr("resource.win", argc, argv);

  0018d	68 05 01 00 00	 push	 261			; 00000105H
  00192	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00197	83 c4 04	 add	 esp, 4
  0019a	89 45 e8	 mov	 DWORD PTR $T63838[ebp], eax
  0019d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001a4	83 7d e8 00	 cmp	 DWORD PTR $T63838[ebp], 0
  001a8	74 1a		 je	 SHORT $L63839
  001aa	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  001b1	51		 push	 ecx
  001b2	68 00 00 00 00	 push	 OFFSET FLAT:$SG63470
  001b7	8b 4d e8	 mov	 ecx, DWORD PTR $T63838[ebp]
  001ba	e8 00 00 00 00	 call	 ??0ConfigMgr@@QAE@PBDHPAPAD@Z ; ConfigMgr::ConfigMgr
  001bf	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  001c2	eb 07		 jmp	 SHORT $L63840
$L63839:
  001c4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L63840:
  001cb	8b 55 e0	 mov	 edx, DWORD PTR -32+[ebp]
  001ce	89 55 ec	 mov	 DWORD PTR $T63837[ebp], edx
  001d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001d8	8b 45 ec	 mov	 eax, DWORD PTR $T63837[ebp]
  001db	89 45 f0	 mov	 DWORD PTR _configM$[ebp], eax

; 57   : 
; 58   : 	// add the Windows patch directory so it will be searched first
; 59   : 	configM->AddTokenToFront("patchDir",szWinPatchDir);

  001de	68 00 00 00 00	 push	 OFFSET FLAT:?szWinPatchDir@@3PADA ; szWinPatchDir
  001e3	68 00 00 00 00	 push	 OFFSET FLAT:$SG63471
  001e8	8b 4d f0	 mov	 ecx, DWORD PTR _configM$[ebp]
  001eb	e8 00 00 00 00	 call	 ?AddTokenToFront@ConfigMgr@@QAEXPAD0@Z ; ConfigMgr::AddTokenToFront

; 60   : 	return configM;

  001f0	8b 45 f0	 mov	 eax, DWORD PTR _configM$[ebp]

; 61   : }  

  001f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L63841:
  00015	8b 45 e8	 mov	 eax, DWORD PTR $T63838[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
  0001f	c3		 ret	 0
$L63844:
  00020	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63843
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeConfigMgr@SCIWin@@UAEPAVConfigMgr@@HQAPAD@Z ENDP	; SCIWin::MakeConfigMgr
EXTRN	??0EventMgrWin@@QAE@XZ:NEAR			; EventMgrWin::EventMgrWin
xdata$x	SEGMENT
$T63853	DD	019930520H
	DD	01H
	DD	FLAT:$T63855
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63855	DD	0ffffffffH
	DD	FLAT:$L63851
xdata$x	ENDS
_TEXT	SEGMENT
$T63847 = -16
$T63848 = -20
__$EHRec$ = -12
_this$ = -24
?MakeEventMgr@SCIWin@@UAEPAUEventMgr@@XZ PROC NEAR	; SCIWin::MakeEventMgr

; 63   : EventMgr* SCIWin::MakeEventMgr() {

  00203	55		 push	 ebp
  00204	8b ec		 mov	 ebp, esp
  00206	6a ff		 push	 -1
  00208	68 00 00 00 00	 push	 $L63854
  0020d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00213	50		 push	 eax
  00214	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0021b	83 ec 10	 sub	 esp, 16			; 00000010H
  0021e	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 	return New EventMgrWin;

  00221	68 8c 02 00 00	 push	 652			; 0000028cH
  00226	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0022b	83 c4 04	 add	 esp, 4
  0022e	89 45 ec	 mov	 DWORD PTR $T63848[ebp], eax
  00231	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00238	83 7d ec 00	 cmp	 DWORD PTR $T63848[ebp], 0
  0023c	74 0d		 je	 SHORT $L63849
  0023e	8b 4d ec	 mov	 ecx, DWORD PTR $T63848[ebp]
  00241	e8 00 00 00 00	 call	 ??0EventMgrWin@@QAE@XZ	; EventMgrWin::EventMgrWin
  00246	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00249	eb 07		 jmp	 SHORT $L63850
$L63849:
  0024b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L63850:
  00252	8b 45 e4	 mov	 eax, DWORD PTR -28+[ebp]
  00255	89 45 f0	 mov	 DWORD PTR $T63847[ebp], eax
  00258	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0025f	8b 45 f0	 mov	 eax, DWORD PTR $T63847[ebp]

; 65   : }

  00262	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00265	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L63851:
  0002a	8b 45 ec	 mov	 eax, DWORD PTR $T63848[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	59		 pop	 ecx
  00034	c3		 ret	 0
$L63854:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63853
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeEventMgr@SCIWin@@UAEPAUEventMgr@@XZ ENDP		; SCIWin::MakeEventMgr
EXTRN	??0GraphicsMgrWin@@QAE@HH@Z:NEAR		; GraphicsMgrWin::GraphicsMgrWin
EXTRN	?TimingTest@GraphicsMgrWin@@QAEXXZ:NEAR		; GraphicsMgrWin::TimingTest
EXTRN	?DOPPCTEST@@3HA:DWORD				; DOPPCTEST
xdata$x	SEGMENT
$T63863	DD	019930520H
	DD	01H
	DD	FLAT:$T63865
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63865	DD	0ffffffffH
	DD	FLAT:$L63861
xdata$x	ENDS
_TEXT	SEGMENT
$T63857 = -20
$T63858 = -24
__$EHRec$ = -12
_this$ = -28
_gMgr$ = -16
?MakeGraphicsMgr@SCIWin@@UAEPAVGraphicsMgr@@XZ PROC NEAR ; SCIWin::MakeGraphicsMgr

; 67   : GraphicsMgr* SCIWin::MakeGraphicsMgr() {

  00270	55		 push	 ebp
  00271	8b ec		 mov	 ebp, esp
  00273	6a ff		 push	 -1
  00275	68 00 00 00 00	 push	 $L63864
  0027a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00280	50		 push	 eax
  00281	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00288	83 ec 14	 sub	 esp, 20			; 00000014H
  0028b	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 	GraphicsMgr* gMgr = New GraphicsMgrWin(640, 480);

  0028e	68 24 23 00 00	 push	 8996			; 00002324H
  00293	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00298	83 c4 04	 add	 esp, 4
  0029b	89 45 e8	 mov	 DWORD PTR $T63858[ebp], eax
  0029e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  002a5	83 7d e8 00	 cmp	 DWORD PTR $T63858[ebp], 0
  002a9	74 17		 je	 SHORT $L63859
  002ab	68 e0 01 00 00	 push	 480			; 000001e0H
  002b0	68 80 02 00 00	 push	 640			; 00000280H
  002b5	8b 4d e8	 mov	 ecx, DWORD PTR $T63858[ebp]
  002b8	e8 00 00 00 00	 call	 ??0GraphicsMgrWin@@QAE@HH@Z ; GraphicsMgrWin::GraphicsMgrWin
  002bd	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  002c0	eb 07		 jmp	 SHORT $L63860
$L63859:
  002c2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L63860:
  002c9	8b 45 e0	 mov	 eax, DWORD PTR -32+[ebp]
  002cc	89 45 ec	 mov	 DWORD PTR $T63857[ebp], eax
  002cf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002d6	8b 4d ec	 mov	 ecx, DWORD PTR $T63857[ebp]
  002d9	89 4d f0	 mov	 DWORD PTR _gMgr$[ebp], ecx

; 69   : 
; 70   : 	if (DOPPCTEST)

  002dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DOPPCTEST@@3HA, 0 ; DOPPCTEST
  002e3	74 08		 je	 SHORT $L63487

; 71   : 		((GraphicsMgrWin*)gMgr)->TimingTest();

  002e5	8b 4d f0	 mov	 ecx, DWORD PTR _gMgr$[ebp]
  002e8	e8 00 00 00 00	 call	 ?TimingTest@GraphicsMgrWin@@QAEXXZ ; GraphicsMgrWin::TimingTest
$L63487:

; 72   : 
; 73   : 	return gMgr;

  002ed	8b 45 f0	 mov	 eax, DWORD PTR _gMgr$[ebp]

; 74   : }

  002f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002fa	8b e5		 mov	 esp, ebp
  002fc	5d		 pop	 ebp
  002fd	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L63861:
  0003f	8b 45 e8	 mov	 eax, DWORD PTR $T63858[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	59		 pop	 ecx
  00049	c3		 ret	 0
$L63864:
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63863
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeGraphicsMgr@SCIWin@@UAEPAVGraphicsMgr@@XZ ENDP	; SCIWin::MakeGraphicsMgr
PUBLIC	??0MemoryMgrWin@@QAE@XZ				; MemoryMgrWin::MemoryMgrWin
xdata$x	SEGMENT
$T63873	DD	019930520H
	DD	01H
	DD	FLAT:$T63875
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63875	DD	0ffffffffH
	DD	FLAT:$L63871
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24
$T63867 = -16
$T63868 = -20
__$EHRec$ = -12
?MakeMemoryMgr@SCIWin@@UAEPAVMemoryMgr@@XZ PROC NEAR	; SCIWin::MakeMemoryMgr

; 76   : MemoryMgr* SCIWin::MakeMemoryMgr() {

  002fe	55		 push	 ebp
  002ff	8b ec		 mov	 ebp, esp
  00301	6a ff		 push	 -1
  00303	68 00 00 00 00	 push	 $L63874
  00308	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0030e	50		 push	 eax
  0030f	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00316	83 ec 10	 sub	 esp, 16			; 00000010H
  00319	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 77   : 	return New MemoryMgrWin;

  0031c	6a 2c		 push	 44			; 0000002cH
  0031e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00323	83 c4 04	 add	 esp, 4
  00326	89 45 ec	 mov	 DWORD PTR $T63868[ebp], eax
  00329	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00330	83 7d ec 00	 cmp	 DWORD PTR $T63868[ebp], 0
  00334	74 0d		 je	 SHORT $L63869
  00336	8b 4d ec	 mov	 ecx, DWORD PTR $T63868[ebp]
  00339	e8 00 00 00 00	 call	 ??0MemoryMgrWin@@QAE@XZ	; MemoryMgrWin::MemoryMgrWin
  0033e	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00341	eb 07		 jmp	 SHORT $L63870
$L63869:
  00343	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L63870:
  0034a	8b 45 e4	 mov	 eax, DWORD PTR -28+[ebp]
  0034d	89 45 f0	 mov	 DWORD PTR $T63867[ebp], eax
  00350	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00357	8b 45 f0	 mov	 eax, DWORD PTR $T63867[ebp]

; 78   : }

  0035a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0035d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00364	8b e5		 mov	 esp, ebp
  00366	5d		 pop	 ebp
  00367	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L63871:
  00054	8b 45 ec	 mov	 eax, DWORD PTR $T63868[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
  0005e	c3		 ret	 0
$L63874:
  0005f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63873
  00064	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeMemoryMgr@SCIWin@@UAEPAVMemoryMgr@@XZ ENDP		; SCIWin::MakeMemoryMgr
PUBLIC	??_7MemoryMgrWin@@6B@				; MemoryMgrWin::`vftable'
PUBLIC	??_GMemoryMgrWin@@UAEPAXI@Z			; MemoryMgrWin::`scalar deleting destructor'
PUBLIC	??_EMemoryMgrWin@@UAEPAXI@Z			; MemoryMgrWin::`vector deleting destructor'
EXTRN	??0MemoryMgr@@QAE@XZ:NEAR			; MemoryMgr::MemoryMgr
EXTRN	?GetSysMemAvail@MemoryMgrWin@@UAEIXZ:NEAR	; MemoryMgrWin::GetSysMemAvail
EXTRN	?GetSysMem@MemoryMgrWin@@UAEPADI@Z:NEAR		; MemoryMgrWin::GetSysMem
EXTRN	?GetConvMemAvail@MemoryMgrWin@@UAEIXZ:NEAR	; MemoryMgrWin::GetConvMemAvail
EXTRN	?GetConvMem@MemoryMgrWin@@UAEPADI@Z:NEAR	; MemoryMgrWin::GetConvMem
EXTRN	?FreeConvMem@MemoryMgrWin@@UAEXPAD@Z:NEAR	; MemoryMgrWin::FreeConvMem
;	COMDAT ??_7MemoryMgrWin@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\memmgrw.hpp
CONST	SEGMENT
??_7MemoryMgrWin@@6B@ DD FLAT:??_EMemoryMgrWin@@UAEPAXI@Z ; MemoryMgrWin::`vftable'
	DD	FLAT:?GetConvMemAvail@MemoryMgrWin@@UAEIXZ
	DD	FLAT:?GetConvMem@MemoryMgrWin@@UAEPADI@Z
	DD	FLAT:?FreeConvMem@MemoryMgrWin@@UAEXPAD@Z
	DD	FLAT:?GetSysMemAvail@MemoryMgrWin@@UAEIXZ
	DD	FLAT:?GetSysMem@MemoryMgrWin@@UAEPADI@Z
CONST	ENDS
;	COMDAT ??0MemoryMgrWin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemoryMgrWin@@QAE@XZ PROC NEAR			; MemoryMgrWin::MemoryMgrWin, COMDAT

; 19   : 	MemoryMgrWin() : memPtrWin(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemoryMgr@@QAE@XZ	; MemoryMgr::MemoryMgr
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7MemoryMgrWin@@6B@ ; MemoryMgrWin::`vftable'
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0MemoryMgrWin@@QAE@XZ ENDP				; MemoryMgrWin::MemoryMgrWin
_TEXT	ENDS
EXTRN	??1MemoryMgrWin@@UAE@XZ:NEAR			; MemoryMgrWin::~MemoryMgrWin
;	COMDAT ??_GMemoryMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GMemoryMgrWin@@UAEPAXI@Z PROC NEAR			; MemoryMgrWin::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1MemoryMgrWin@@UAE@XZ	; MemoryMgrWin::~MemoryMgrWin
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L60316
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L60316:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GMemoryMgrWin@@UAEPAXI@Z ENDP			; MemoryMgrWin::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??0MouseWin@@QAE@XZ:NEAR			; MouseWin::MouseWin
EXTRN	??0MouseWinClr@@QAE@XZ:NEAR			; MouseWinClr::MouseWinClr
EXTRN	?clrMouse@@3PAVSOL_Mouse@@A:DWORD		; clrMouse
EXTRN	?winMouse@@3PAVSOL_Mouse@@A:DWORD		; winMouse
EXTRN	?COLORCURSOR@@3HA:DWORD				; COLORCURSOR
xdata$x	SEGMENT
$T63891	DD	019930520H
	DD	02H
	DD	FLAT:$T63893
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63893	DD	0ffffffffH
	DD	FLAT:$L63888
	DD	0ffffffffH
	DD	FLAT:$L63889
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -36
_mouse$ = -16
$T63880 = -20
$T63881 = -24
$T63884 = -28
$T63885 = -32
__$EHRec$ = -12
?MakeMouse@SCIWin@@UAEPAVSOL_Mouse@@XZ PROC NEAR	; SCIWin::MakeMouse

; 80   : SOL_Mouse* SCIWin::MakeMouse() {

  00368	55		 push	 ebp
  00369	8b ec		 mov	 ebp, esp
  0036b	6a ff		 push	 -1
  0036d	68 00 00 00 00	 push	 $L63892
  00372	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00378	50		 push	 eax
  00379	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00380	83 ec 24	 sub	 esp, 36			; 00000024H
  00383	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 	SOL_Mouse* mouse;
; 82   : 
; 83   : 	clrMouse = New MouseWinClr();

  00386	6a 04		 push	 4
  00388	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0038d	83 c4 04	 add	 esp, 4
  00390	89 45 e8	 mov	 DWORD PTR $T63881[ebp], eax
  00393	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0039a	83 7d e8 00	 cmp	 DWORD PTR $T63881[ebp], 0
  0039e	74 0d		 je	 SHORT $L63882
  003a0	8b 4d e8	 mov	 ecx, DWORD PTR $T63881[ebp]
  003a3	e8 00 00 00 00	 call	 ??0MouseWinClr@@QAE@XZ	; MouseWinClr::MouseWinClr
  003a8	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
  003ab	eb 07		 jmp	 SHORT $L63883
$L63882:
  003ad	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR -40+[ebp], 0
$L63883:
  003b4	8b 45 d8	 mov	 eax, DWORD PTR -40+[ebp]
  003b7	89 45 ec	 mov	 DWORD PTR $T63880[ebp], eax
  003ba	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003c1	8b 4d ec	 mov	 ecx, DWORD PTR $T63880[ebp]
  003c4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clrMouse@@3PAVSOL_Mouse@@A, ecx ; clrMouse

; 84   : 	winMouse = New MouseWin();

  003ca	6a 04		 push	 4
  003cc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003d1	83 c4 04	 add	 esp, 4
  003d4	89 45 e0	 mov	 DWORD PTR $T63885[ebp], eax
  003d7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  003de	83 7d e0 00	 cmp	 DWORD PTR $T63885[ebp], 0
  003e2	74 0d		 je	 SHORT $L63886
  003e4	8b 4d e0	 mov	 ecx, DWORD PTR $T63885[ebp]
  003e7	e8 00 00 00 00	 call	 ??0MouseWin@@QAE@XZ	; MouseWin::MouseWin
  003ec	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  003ef	eb 07		 jmp	 SHORT $L63887
$L63886:
  003f1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR -44+[ebp], 0
$L63887:
  003f8	8b 55 d4	 mov	 edx, DWORD PTR -44+[ebp]
  003fb	89 55 e4	 mov	 DWORD PTR $T63884[ebp], edx
  003fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00405	8b 45 e4	 mov	 eax, DWORD PTR $T63884[ebp]
  00408	a3 00 00 00 00	 mov	 DWORD PTR ?winMouse@@3PAVSOL_Mouse@@A, eax ; winMouse

; 85   : 	mouse = clrMouse;

  0040d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clrMouse@@3PAVSOL_Mouse@@A ; clrMouse
  00413	89 4d f0	 mov	 DWORD PTR _mouse$[ebp], ecx

; 86   : 	assert(graphMgr);
; 87   : 	graphMgr->GCursor().SetDevice(*mouse);

  00416	8b 55 f0	 mov	 edx, DWORD PTR _mouse$[ebp]
  00419	52		 push	 edx
  0041a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0041f	8b 10		 mov	 edx, DWORD PTR [eax]
  00421	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00427	ff 52 18	 call	 DWORD PTR [edx+24]
  0042a	89 45 d0	 mov	 DWORD PTR -48+[ebp], eax
  0042d	8b 45 d0	 mov	 eax, DWORD PTR -48+[ebp]
  00430	8b 10		 mov	 edx, DWORD PTR [eax]
  00432	8b 4d d0	 mov	 ecx, DWORD PTR -48+[ebp]
  00435	ff 52 34	 call	 DWORD PTR [edx+52]

; 88   : 
; 89   : 	if (!COLORCURSOR)

  00438	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?COLORCURSOR@@3HA, 0 ; COLORCURSOR
  0043f	75 08		 jne	 SHORT $L63509

; 90   : 		mouse = winMouse;

  00441	a1 00 00 00 00	 mov	 eax, DWORD PTR ?winMouse@@3PAVSOL_Mouse@@A ; winMouse
  00446	89 45 f0	 mov	 DWORD PTR _mouse$[ebp], eax
$L63509:

; 91   : 	return mouse;

  00449	8b 45 f0	 mov	 eax, DWORD PTR _mouse$[ebp]

; 92   : }

  0044c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0044f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00456	8b e5		 mov	 esp, ebp
  00458	5d		 pop	 ebp
  00459	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L63888:
  00069	8b 45 e8	 mov	 eax, DWORD PTR $T63881[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00072	59		 pop	 ecx
  00073	c3		 ret	 0
$L63889:
  00074	8b 45 e0	 mov	 eax, DWORD PTR $T63885[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007d	59		 pop	 ecx
  0007e	c3		 ret	 0
$L63892:
  0007f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63891
  00084	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeMouse@SCIWin@@UAEPAVSOL_Mouse@@XZ ENDP		; SCIWin::MakeMouse
PUBLIC	??0MsgMgrWin@@QAE@XZ				; MsgMgrWin::MsgMgrWin
xdata$x	SEGMENT
$T63901	DD	019930520H
	DD	01H
	DD	FLAT:$T63903
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63903	DD	0ffffffffH
	DD	FLAT:$L63899
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24
$T63895 = -16
$T63896 = -20
__$EHRec$ = -12
?MakeMsgMgr@SCIWin@@UAEPAVMsgMgr@@XZ PROC NEAR		; SCIWin::MakeMsgMgr

; 94   : MsgMgr* SCIWin::MakeMsgMgr() {

  0045a	55		 push	 ebp
  0045b	8b ec		 mov	 ebp, esp
  0045d	6a ff		 push	 -1
  0045f	68 00 00 00 00	 push	 $L63902
  00464	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0046a	50		 push	 eax
  0046b	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00472	83 ec 10	 sub	 esp, 16			; 00000010H
  00475	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 	return New MsgMgrWin;

  00478	68 cc 18 00 00	 push	 6348			; 000018ccH
  0047d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00482	83 c4 04	 add	 esp, 4
  00485	89 45 ec	 mov	 DWORD PTR $T63896[ebp], eax
  00488	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0048f	83 7d ec 00	 cmp	 DWORD PTR $T63896[ebp], 0
  00493	74 0d		 je	 SHORT $L63897
  00495	8b 4d ec	 mov	 ecx, DWORD PTR $T63896[ebp]
  00498	e8 00 00 00 00	 call	 ??0MsgMgrWin@@QAE@XZ	; MsgMgrWin::MsgMgrWin
  0049d	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  004a0	eb 07		 jmp	 SHORT $L63898
$L63897:
  004a2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L63898:
  004a9	8b 45 e4	 mov	 eax, DWORD PTR -28+[ebp]
  004ac	89 45 f0	 mov	 DWORD PTR $T63895[ebp], eax
  004af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004b6	8b 45 f0	 mov	 eax, DWORD PTR $T63895[ebp]

; 96   : }

  004b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  004c3	8b e5		 mov	 esp, ebp
  004c5	5d		 pop	 ebp
  004c6	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L63899:
  00089	8b 45 ec	 mov	 eax, DWORD PTR $T63896[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00092	59		 pop	 ecx
  00093	c3		 ret	 0
$L63902:
  00094	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63901
  00099	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeMsgMgr@SCIWin@@UAEPAVMsgMgr@@XZ ENDP		; SCIWin::MakeMsgMgr
PUBLIC	??_7MsgMgrWin@@6B@				; MsgMgrWin::`vftable'
EXTRN	?MonoOutput@MsgMgrWin@@UAEXPAD@Z:NEAR		; MsgMgrWin::MonoOutput
EXTRN	?MonoPosition@MsgMgrWin@@UAEXHH@Z:NEAR		; MsgMgrWin::MonoPosition
EXTRN	??0MsgMgr@@QAE@XZ:NEAR				; MsgMgr::MsgMgr
EXTRN	?Init@MsgMgr@@UAEXXZ:NEAR			; MsgMgr::Init
EXTRN	?Get@MsgMgr@@UAEPADHPAD@Z:NEAR			; MsgMgr::Get
EXTRN	?AlertOutput@MsgMgr@@MAEHPAD@Z:NEAR		; MsgMgr::AlertOutput
EXTRN	?FatalOutput@MsgMgr@@MAEXPAD@Z:NEAR		; MsgMgr::FatalOutput
;	COMDAT ??_7MsgMgrWin@@6B@
CONST	SEGMENT
??_7MsgMgrWin@@6B@ DD FLAT:?Init@MsgMgr@@UAEXXZ		; MsgMgrWin::`vftable'
	DD	FLAT:?Get@MsgMgr@@UAEPADHPAD@Z
	DD	FLAT:?MonoPosition@MsgMgrWin@@UAEXHH@Z
	DD	FLAT:?AlertOutput@MsgMgr@@MAEHPAD@Z
	DD	FLAT:?FatalOutput@MsgMgr@@MAEXPAD@Z
	DD	FLAT:?MonoOutput@MsgMgrWin@@UAEXPAD@Z
CONST	ENDS
;	COMDAT ??0MsgMgrWin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MsgMgrWin@@QAE@XZ PROC NEAR				; MsgMgrWin::MsgMgrWin, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MsgMgr@@QAE@XZ	; MsgMgr::MsgMgr
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7MsgMgrWin@@6B@ ; MsgMgrWin::`vftable'
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0MsgMgrWin@@QAE@XZ ENDP				; MsgMgrWin::MsgMgrWin
_TEXT	ENDS
EXTRN	??0TimeMgrWin@@QAE@XZ:NEAR			; TimeMgrWin::TimeMgrWin
xdata$x	SEGMENT
$T63912	DD	019930520H
	DD	01H
	DD	FLAT:$T63914
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T63914	DD	0ffffffffH
	DD	FLAT:$L63910
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24
$T63906 = -16
$T63907 = -20
__$EHRec$ = -12
?MakeTimeMgr@SCIWin@@UAEPAVTimeMgr@@XZ PROC NEAR	; SCIWin::MakeTimeMgr

; 98   : TimeMgr* SCIWin::MakeTimeMgr() {

  004c7	55		 push	 ebp
  004c8	8b ec		 mov	 ebp, esp
  004ca	6a ff		 push	 -1
  004cc	68 00 00 00 00	 push	 $L63913
  004d1	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  004d7	50		 push	 eax
  004d8	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  004df	83 ec 10	 sub	 esp, 16			; 00000010H
  004e2	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return New TimeMgrWin;

  004e5	6a 0c		 push	 12			; 0000000cH
  004e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  004ec	83 c4 04	 add	 esp, 4
  004ef	89 45 ec	 mov	 DWORD PTR $T63907[ebp], eax
  004f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  004f9	83 7d ec 00	 cmp	 DWORD PTR $T63907[ebp], 0
  004fd	74 0d		 je	 SHORT $L63908
  004ff	8b 4d ec	 mov	 ecx, DWORD PTR $T63907[ebp]
  00502	e8 00 00 00 00	 call	 ??0TimeMgrWin@@QAE@XZ	; TimeMgrWin::TimeMgrWin
  00507	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  0050a	eb 07		 jmp	 SHORT $L63909
$L63908:
  0050c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L63909:
  00513	8b 45 e4	 mov	 eax, DWORD PTR -28+[ebp]
  00516	89 45 f0	 mov	 DWORD PTR $T63906[ebp], eax
  00519	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00520	8b 45 f0	 mov	 eax, DWORD PTR $T63906[ebp]

; 100  : }

  00523	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00526	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0052d	8b e5		 mov	 esp, ebp
  0052f	5d		 pop	 ebp
  00530	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L63910:
  0009e	8b 45 ec	 mov	 eax, DWORD PTR $T63907[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a7	59		 pop	 ecx
  000a8	c3		 ret	 0
$L63913:
  000a9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T63912
  000ae	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeTimeMgr@SCIWin@@UAEPAVTimeMgr@@XZ ENDP		; SCIWin::MakeTimeMgr
PUBLIC	?scimain@@YAHHQAPAD@Z				; scimain
EXTRN	?sci@@3PAUSCI@@A:DWORD				; sci
_TEXT	SEGMENT
_argc$ = 8
_argv$ = 12
?scimain@@YAHHQAPAD@Z PROC NEAR				; scimain

; 103  : int scimain(int argc, char* argv[]) {

  00531	55		 push	 ebp
  00532	8b ec		 mov	 ebp, esp

; 104  : 	sci = &sciWin;

  00534	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?sci@@3PAUSCI@@A, OFFSET FLAT:_sciWin ; sci

; 105  : 
; 106  : 	sci->Run(argc, argv);

  0053e	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  00541	50		 push	 eax
  00542	8b 4d 08	 mov	 ecx, DWORD PTR _argc$[ebp]
  00545	51		 push	 ecx
  00546	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sci@@3PAUSCI@@A ; sci
  0054c	8b 02		 mov	 eax, DWORD PTR [edx]
  0054e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?sci@@3PAUSCI@@A ; sci
  00554	ff 50 04	 call	 DWORD PTR [eax+4]

; 107  : 
; 108  : 	return 0;

  00557	33 c0		 xor	 eax, eax

; 109  : }

  00559	5d		 pop	 ebp
  0055a	c3		 ret	 0
?scimain@@YAHHQAPAD@Z ENDP				; scimain
_TEXT	ENDS
END

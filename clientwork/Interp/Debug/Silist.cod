	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Silist.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Id@ScreenItem@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Priority@ScreenItem@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GScreenItem@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??0ScreenItemList@@QAE@XZ			; ScreenItemList::ScreenItemList
_TEXT	SEGMENT
_this$ = -4
??0ScreenItemList@@QAE@XZ PROC NEAR			; ScreenItemList::ScreenItemList

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 13   : 	length = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 80 40 9c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+40000], 0

; 14   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0ScreenItemList@@QAE@XZ ENDP				; ScreenItemList::ScreenItemList
_TEXT	ENDS
PUBLIC	??_GScreenItem@@QAEPAXI@Z			; ScreenItem::`scalar deleting destructor'
PUBLIC	??1ScreenItemList@@QAE@XZ			; ScreenItemList::~ScreenItemList
_TEXT	SEGMENT
_this$ = -16
_i$ = -4
$T56726 = -8
$T56727 = -12
??1ScreenItemList@@QAE@XZ PROC NEAR			; ScreenItemList::~ScreenItemList

; 19   : {

  0001b	55		 push	 ebp
  0001c	8b ec		 mov	 ebp, esp
  0001e	83 ec 14	 sub	 esp, 20			; 00000014H
  00021	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	for (int i = 0; i < length; i++)	{

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002b	eb 09		 jmp	 SHORT $L56533
$L56534:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00030	83 c0 01	 add	 eax, 1
  00033	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L56533:
  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0003c	3b 91 40 9c 00
	00		 cmp	 edx, DWORD PTR [ecx+40000]
  00042	7d 30		 jge	 SHORT $L56535

; 21   : 		delete siArray[i];

  00044	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0004d	89 55 f4	 mov	 DWORD PTR $T56727[ebp], edx
  00050	8b 45 f4	 mov	 eax, DWORD PTR $T56727[ebp]
  00053	89 45 f8	 mov	 DWORD PTR $T56726[ebp], eax
  00056	83 7d f8 00	 cmp	 DWORD PTR $T56726[ebp], 0
  0005a	74 0f		 je	 SHORT $L56728
  0005c	6a 01		 push	 1
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR $T56726[ebp]
  00061	e8 00 00 00 00	 call	 ??_GScreenItem@@QAEPAXI@Z ; ScreenItem::`scalar deleting destructor'
  00066	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00069	eb 07		 jmp	 SHORT $L56729
$L56728:
  0006b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L56729:

; 22   : 	}

  00072	eb b9		 jmp	 SHORT $L56534
$L56535:

; 23   : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??1ScreenItemList@@QAE@XZ ENDP				; ScreenItemList::~ScreenItemList
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	??1ScreenItem@@QAE@XZ:NEAR			; ScreenItem::~ScreenItem
;	COMDAT ??_GScreenItem@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GScreenItem@@QAEPAXI@Z PROC NEAR			; ScreenItem::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1ScreenItem@@QAE@XZ	; ScreenItem::~ScreenItem
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L56541
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L56541:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GScreenItem@@QAEPAXI@Z ENDP				; ScreenItem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??4ScreenItemList@@QAEABV0@ABV0@@Z		; ScreenItemList::operator=
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??0ScreenItem@@QAE@PBV0@@Z:NEAR			; ScreenItem::ScreenItem
xdata$x	SEGMENT
$T56744	DD	019930520H
	DD	01H
	DD	FLAT:$T56747
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T56747	DD	0ffffffffH
	DD	FLAT:$L56740
xdata$x	ENDS
_TEXT	SEGMENT
_src$ = 8
_this$ = -36
_i$ = -16
$T56732 = -20
$T56733 = -24
$T56736 = -28
$T56737 = -32
__$EHRec$ = -12
??4ScreenItemList@@QAEABV0@ABV0@@Z PROC NEAR		; ScreenItemList::operator=

; 30   : {

  00078	55		 push	 ebp
  00079	8b ec		 mov	 ebp, esp
  0007b	6a ff		 push	 -1
  0007d	68 00 00 00 00	 push	 $L56745
  00082	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00088	50		 push	 eax
  00089	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00090	83 ec 20	 sub	 esp, 32			; 00000020H
  00093	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	int i;
; 32   : 	for (i = 0; i < length; i++)  {

  00096	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0009d	eb 09		 jmp	 SHORT $L56547
$L56548:
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000a2	83 c0 01	 add	 eax, 1
  000a5	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L56547:
  000a8	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  000ae	3b 91 40 9c 00
	00		 cmp	 edx, DWORD PTR [ecx+40000]
  000b4	7d 3d		 jge	 SHORT $L56549

; 33   : 		delete siArray[i];

  000b6	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000b9	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000bf	89 55 e8	 mov	 DWORD PTR $T56733[ebp], edx
  000c2	8b 45 e8	 mov	 eax, DWORD PTR $T56733[ebp]
  000c5	89 45 ec	 mov	 DWORD PTR $T56732[ebp], eax
  000c8	83 7d ec 00	 cmp	 DWORD PTR $T56732[ebp], 0
  000cc	74 0f		 je	 SHORT $L56734
  000ce	6a 01		 push	 1
  000d0	8b 4d ec	 mov	 ecx, DWORD PTR $T56732[ebp]
  000d3	e8 00 00 00 00	 call	 ??_GScreenItem@@QAEPAXI@Z ; ScreenItem::`scalar deleting destructor'
  000d8	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
  000db	eb 07		 jmp	 SHORT $L56735
$L56734:
  000dd	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR -40+[ebp], 0
$L56735:

; 34   : 		siArray[i] = NULL;

  000e4	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  000e7	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  000ea	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0

; 35   : 	}

  000f1	eb ac		 jmp	 SHORT $L56548
$L56549:

; 36   : 
; 37   : 	length = src.length;

  000f3	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  000f9	8b 91 40 9c 00
	00		 mov	 edx, DWORD PTR [ecx+40000]
  000ff	89 90 40 9c 00
	00		 mov	 DWORD PTR [eax+40000], edx

; 38   : 	for (i = 0; i < length; i++)  {

  00105	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0010c	eb 09		 jmp	 SHORT $L56552
$L56553:
  0010e	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00111	83 c0 01	 add	 eax, 1
  00114	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L56552:
  00117	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0011d	3b 91 40 9c 00
	00		 cmp	 edx, DWORD PTR [ecx+40000]
  00123	7d 74		 jge	 SHORT $L56554

; 39   : 		if (src.siArray[i]) {

  00125	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00128	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0012b	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0012f	74 56		 je	 SHORT $L56555

; 40   : 			siArray[i] = New ScreenItem(src.siArray[i]);

  00131	68 98 00 00 00	 push	 152			; 00000098H
  00136	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0013b	83 c4 04	 add	 esp, 4
  0013e	89 45 e0	 mov	 DWORD PTR $T56737[ebp], eax
  00141	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00148	83 7d e0 00	 cmp	 DWORD PTR $T56737[ebp], 0
  0014c	74 17		 je	 SHORT $L56738
  0014e	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00151	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00154	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00157	51		 push	 ecx
  00158	8b 4d e0	 mov	 ecx, DWORD PTR $T56737[ebp]
  0015b	e8 00 00 00 00	 call	 ??0ScreenItem@@QAE@PBV0@@Z ; ScreenItem::ScreenItem
  00160	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  00163	eb 07		 jmp	 SHORT $L56739
$L56738:
  00165	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR -44+[ebp], 0
$L56739:
  0016c	8b 55 d4	 mov	 edx, DWORD PTR -44+[ebp]
  0016f	89 55 e4	 mov	 DWORD PTR $T56736[ebp], edx
  00172	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00179	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0017c	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017f	8b 55 e4	 mov	 edx, DWORD PTR $T56736[ebp]
  00182	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 42   : 		else

  00185	eb 0d		 jmp	 SHORT $L56560
$L56555:

; 43   : 			siArray[i] = NULL;

  00187	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0018a	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018d	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
$L56560:

; 44   : 	}

  00194	e9 75 ff ff ff	 jmp	 $L56553
$L56554:

; 45   : 
; 46   : 	return *this;

  00199	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]

; 47   : }

  0019c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L56740:
  00000	8b 45 e0	 mov	 eax, DWORD PTR $T56737[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L56745:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T56744
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??4ScreenItemList@@QAEABV0@ABV0@@Z ENDP			; ScreenItemList::operator=
PUBLIC	?Add@ScreenItemList@@QAEHPAVScreenItem@@@Z	; ScreenItemList::Add
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
$SG56566 DB	'C:\Documents and Settings\don\Desktop\sciw\Interp\Silist'
	DB	'.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_si$ = 8
_this$ = -4
?Add@ScreenItemList@@QAEHPAVScreenItem@@@Z PROC NEAR	; ScreenItemList::Add

; 54   : {

  001ac	55		 push	 ebp
  001ad	8b ec		 mov	 ebp, esp
  001af	51		 push	 ecx
  001b0	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	if (length == MAXSI)

  001b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b6	81 b8 40 9c 00
	00 88 13 00 00	 cmp	 DWORD PTR [eax+40000], 5000 ; 00001388H
  001c0	75 1a		 jne	 SHORT $L56565

; 56   : 		msgMgr->Fatal(SrcLoc, Msg_TooManyScreenItems);

  001c2	6a 5e		 push	 94			; 0000005eH
  001c4	6a 38		 push	 56			; 00000038H
  001c6	68 00 00 00 00	 push	 OFFSET FLAT:$SG56566
  001cb	6a 61		 push	 97			; 00000061H
  001cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  001d3	51		 push	 ecx
  001d4	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  001d9	83 c4 14	 add	 esp, 20			; 00000014H
$L56565:

; 57   : 	siArray[length] = si;

  001dc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001df	8b 82 40 9c 00
	00		 mov	 eax, DWORD PTR [edx+40000]
  001e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	8b 55 08	 mov	 edx, DWORD PTR _si$[ebp]
  001eb	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 58   : 	return length++;

  001ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f1	8b 80 40 9c 00
	00		 mov	 eax, DWORD PTR [eax+40000]
  001f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fa	8b 91 40 9c 00
	00		 mov	 edx, DWORD PTR [ecx+40000]
  00200	83 c2 01	 add	 edx, 1
  00203	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00206	89 91 40 9c 00
	00		 mov	 DWORD PTR [ecx+40000], edx

; 59   : }

  0020c	8b e5		 mov	 esp, ebp
  0020e	5d		 pop	 ebp
  0020f	c2 04 00	 ret	 4
?Add@ScreenItemList@@QAEHPAVScreenItem@@@Z ENDP		; ScreenItemList::Add
_TEXT	ENDS
PUBLIC	?Clear@ScreenItemList@@QAEXXZ			; ScreenItemList::Clear
_TEXT	SEGMENT
_this$ = -16
_i$ = -4
$T56751 = -8
$T56752 = -12
?Clear@ScreenItemList@@QAEXXZ PROC NEAR			; ScreenItemList::Clear

; 66   : {

  00212	55		 push	 ebp
  00213	8b ec		 mov	 ebp, esp
  00215	83 ec 14	 sub	 esp, 20			; 00000014H
  00218	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 	for (int i = 0; i < length; i++)  {

  0021b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00222	eb 09		 jmp	 SHORT $L56571
$L56572:
  00224	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00227	83 c0 01	 add	 eax, 1
  0022a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L56571:
  0022d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00230	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00233	3b 91 40 9c 00
	00		 cmp	 edx, DWORD PTR [ecx+40000]
  00239	7d 3d		 jge	 SHORT $L56573

; 68   : 		delete siArray[i];

  0023b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0023e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00241	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00244	89 55 f4	 mov	 DWORD PTR $T56752[ebp], edx
  00247	8b 45 f4	 mov	 eax, DWORD PTR $T56752[ebp]
  0024a	89 45 f8	 mov	 DWORD PTR $T56751[ebp], eax
  0024d	83 7d f8 00	 cmp	 DWORD PTR $T56751[ebp], 0
  00251	74 0f		 je	 SHORT $L56753
  00253	6a 01		 push	 1
  00255	8b 4d f8	 mov	 ecx, DWORD PTR $T56751[ebp]
  00258	e8 00 00 00 00	 call	 ??_GScreenItem@@QAEPAXI@Z ; ScreenItem::`scalar deleting destructor'
  0025d	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00260	eb 07		 jmp	 SHORT $L56754
$L56753:
  00262	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L56754:

; 69   : 		siArray[i] = NULL;

  00269	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0026c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0026f	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0

; 70   : 	}

  00276	eb ac		 jmp	 SHORT $L56572
$L56573:

; 71   : 	length = 0;

  00278	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0027b	c7 80 40 9c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+40000], 0

; 72   : }

  00285	8b e5		 mov	 esp, ebp
  00287	5d		 pop	 ebp
  00288	c3		 ret	 0
?Clear@ScreenItemList@@QAEXXZ ENDP			; ScreenItemList::Clear
_TEXT	ENDS
PUBLIC	?Pack@ScreenItemList@@QAEXXZ			; ScreenItemList::Pack
_TEXT	SEGMENT
_this$ = -20
_src$ = -16
_dest$ = -4
_newlen$ = -8
_i$ = -12
?Pack@ScreenItemList@@QAEXXZ PROC NEAR			; ScreenItemList::Pack

; 80   : {

  00289	55		 push	 ebp
  0028a	8b ec		 mov	 ebp, esp
  0028c	83 ec 14	 sub	 esp, 20			; 00000014H
  0028f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 	ScreenItem** src = siArray;

  00292	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00295	89 45 f0	 mov	 DWORD PTR _src$[ebp], eax

; 82   : 	ScreenItem** dest = siArray;

  00298	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0029b	89 4d fc	 mov	 DWORD PTR _dest$[ebp], ecx

; 83   : 	int newlen = 0;

  0029e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _newlen$[ebp], 0

; 84   : 
; 85   : 	for (int i = 0; i < length; i++, src++)  {

  002a5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002ac	eb 12		 jmp	 SHORT $L56583
$L56584:
  002ae	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  002b1	83 c2 01	 add	 edx, 1
  002b4	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
  002b7	8b 45 f0	 mov	 eax, DWORD PTR _src$[ebp]
  002ba	83 c0 04	 add	 eax, 4
  002bd	89 45 f0	 mov	 DWORD PTR _src$[ebp], eax
$L56583:
  002c0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002c3	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  002c6	3b 91 40 9c 00
	00		 cmp	 edx, DWORD PTR [ecx+40000]
  002cc	7d 26		 jge	 SHORT $L56585

; 86   : 		if (*src)  {

  002ce	8b 45 f0	 mov	 eax, DWORD PTR _src$[ebp]
  002d1	83 38 00	 cmp	 DWORD PTR [eax], 0
  002d4	74 1c		 je	 SHORT $L56586

; 87   : 			*dest++ = *src;

  002d6	8b 4d fc	 mov	 ecx, DWORD PTR _dest$[ebp]
  002d9	8b 55 f0	 mov	 edx, DWORD PTR _src$[ebp]
  002dc	8b 02		 mov	 eax, DWORD PTR [edx]
  002de	89 01		 mov	 DWORD PTR [ecx], eax
  002e0	8b 4d fc	 mov	 ecx, DWORD PTR _dest$[ebp]
  002e3	83 c1 04	 add	 ecx, 4
  002e6	89 4d fc	 mov	 DWORD PTR _dest$[ebp], ecx

; 88   : 			newlen++;

  002e9	8b 55 f8	 mov	 edx, DWORD PTR _newlen$[ebp]
  002ec	83 c2 01	 add	 edx, 1
  002ef	89 55 f8	 mov	 DWORD PTR _newlen$[ebp], edx
$L56586:

; 90   : 	}

  002f2	eb ba		 jmp	 SHORT $L56584
$L56585:

; 91   : 	length = newlen;

  002f4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  002f7	8b 4d f8	 mov	 ecx, DWORD PTR _newlen$[ebp]
  002fa	89 88 40 9c 00
	00		 mov	 DWORD PTR [eax+40000], ecx

; 92   : }

  00300	8b e5		 mov	 esp, ebp
  00302	5d		 pop	 ebp
  00303	c3		 ret	 0
?Pack@ScreenItemList@@QAEXXZ ENDP			; ScreenItemList::Pack
_TEXT	ENDS
PUBLIC	?Search@ScreenItemList@@QBEHPBVScreenItem@@@Z	; ScreenItemList::Search
PUBLIC	?Id@ScreenItem@@QBEJXZ				; ScreenItem::Id
_TEXT	SEGMENT
_si$ = 8
_this$ = -12
_id$ = -8
_i$ = -4
?Search@ScreenItemList@@QBEHPBVScreenItem@@@Z PROC NEAR	; ScreenItemList::Search

; 100  : {

  00304	55		 push	 ebp
  00305	8b ec		 mov	 ebp, esp
  00307	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0030a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 101  : 	long id = si->Id();

  0030d	8b 4d 08	 mov	 ecx, DWORD PTR _si$[ebp]
  00310	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  00315	89 45 f8	 mov	 DWORD PTR _id$[ebp], eax

; 102  : 	for (int i = 0; i < length; i++)  {

  00318	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0031f	eb 09		 jmp	 SHORT $L56593
$L56594:
  00321	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00324	83 c0 01	 add	 eax, 1
  00327	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L56593:
  0032a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0032d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00330	3b 91 40 9c 00
	00		 cmp	 edx, DWORD PTR [ecx+40000]
  00336	7d 26		 jge	 SHORT $L56595

; 103  : 		if (siArray[i]  &&  siArray[i]->Id() == id)

  00338	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0033b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00342	74 18		 je	 SHORT $L56596
  00344	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00347	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0034a	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0034d	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  00352	3b 45 f8	 cmp	 eax, DWORD PTR _id$[ebp]
  00355	75 05		 jne	 SHORT $L56596

; 104  : 			return i;

  00357	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0035a	eb 05		 jmp	 SHORT $L56590
$L56596:

; 105  : 	}

  0035c	eb c3		 jmp	 SHORT $L56594
$L56595:

; 106  : 	return -1;

  0035e	83 c8 ff	 or	 eax, -1
$L56590:

; 107  : }

  00361	8b e5		 mov	 esp, ebp
  00363	5d		 pop	 ebp
  00364	c2 04 00	 ret	 4
?Search@ScreenItemList@@QBEHPBVScreenItem@@@Z ENDP	; ScreenItemList::Search
_TEXT	ENDS
;	COMDAT ?Id@ScreenItem@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Id@ScreenItem@@QBEJXZ PROC NEAR			; ScreenItem::Id, COMDAT

; 61   : 	long			Id() const					{return id;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Id@ScreenItem@@QBEJXZ ENDP				; ScreenItem::Id
_TEXT	ENDS
PUBLIC	?Search@ScreenItemList@@QBEHJ@Z			; ScreenItemList::Search
_TEXT	SEGMENT
_sItemID$ = 8
_this$ = -8
_i$ = -4
?Search@ScreenItemList@@QBEHJ@Z PROC NEAR		; ScreenItemList::Search

; 111  : {

  00367	55		 push	 ebp
  00368	8b ec		 mov	 ebp, esp
  0036a	83 ec 08	 sub	 esp, 8
  0036d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 	for (int i = 0; i < length; i++)  {

  00370	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00377	eb 09		 jmp	 SHORT $L56602
$L56603:
  00379	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0037c	83 c0 01	 add	 eax, 1
  0037f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L56602:
  00382	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00385	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00388	3b 91 40 9c 00
	00		 cmp	 edx, DWORD PTR [ecx+40000]
  0038e	7d 26		 jge	 SHORT $L56604

; 113  : 		if (siArray[i]  &&  siArray[i]->Id() == sItemID)

  00390	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00393	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00396	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0039a	74 18		 je	 SHORT $L56605
  0039c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0039f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003a2	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  003a5	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  003aa	3b 45 08	 cmp	 eax, DWORD PTR _sItemID$[ebp]
  003ad	75 05		 jne	 SHORT $L56605

; 114  : 			return i;

  003af	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003b2	eb 05		 jmp	 SHORT $L56600
$L56605:

; 115  : 	}

  003b4	eb c3		 jmp	 SHORT $L56603
$L56604:

; 116  : 	return -1;

  003b6	83 c8 ff	 or	 eax, -1
$L56600:

; 117  : }

  003b9	8b e5		 mov	 esp, ebp
  003bb	5d		 pop	 ebp
  003bc	c2 04 00	 ret	 4
?Search@ScreenItemList@@QBEHJ@Z ENDP			; ScreenItemList::Search
_TEXT	ENDS
PUBLIC	?Delete@ScreenItemList@@QAEXPBVScreenItem@@@Z	; ScreenItemList::Delete
_TEXT	SEGMENT
_si$ = 8
_this$ = -16
_index$ = -4
$T56760 = -8
$T56761 = -12
?Delete@ScreenItemList@@QAEXPBVScreenItem@@@Z PROC NEAR	; ScreenItemList::Delete

; 123  : {

  003bf	55		 push	 ebp
  003c0	8b ec		 mov	 ebp, esp
  003c2	83 ec 14	 sub	 esp, 20			; 00000014H
  003c5	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 124  : 	int index = Search(si);

  003c8	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  003cb	50		 push	 eax
  003cc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003cf	e8 00 00 00 00	 call	 ?Search@ScreenItemList@@QBEHPBVScreenItem@@@Z ; ScreenItemList::Search
  003d4	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 125  : 
; 126  : 	if (index == -1)

  003d7	83 7d fc ff	 cmp	 DWORD PTR _index$[ebp], -1
  003db	75 02		 jne	 SHORT $L56611

; 127  : 		return;

  003dd	eb 3b		 jmp	 SHORT $L56609
$L56611:

; 128  : 
; 129  : 	delete siArray[index];

  003df	8b 4d fc	 mov	 ecx, DWORD PTR _index$[ebp]
  003e2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  003e5	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  003e8	89 45 f4	 mov	 DWORD PTR $T56761[ebp], eax
  003eb	8b 4d f4	 mov	 ecx, DWORD PTR $T56761[ebp]
  003ee	89 4d f8	 mov	 DWORD PTR $T56760[ebp], ecx
  003f1	83 7d f8 00	 cmp	 DWORD PTR $T56760[ebp], 0
  003f5	74 0f		 je	 SHORT $L56762
  003f7	6a 01		 push	 1
  003f9	8b 4d f8	 mov	 ecx, DWORD PTR $T56760[ebp]
  003fc	e8 00 00 00 00	 call	 ??_GScreenItem@@QAEPAXI@Z ; ScreenItem::`scalar deleting destructor'
  00401	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00404	eb 07		 jmp	 SHORT $L56763
$L56762:
  00406	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L56763:

; 130  : 	siArray[index] = NULL;

  0040d	8b 55 fc	 mov	 edx, DWORD PTR _index$[ebp]
  00410	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00413	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0
$L56609:

; 131  : }

  0041a	8b e5		 mov	 esp, ebp
  0041c	5d		 pop	 ebp
  0041d	c2 04 00	 ret	 4
?Delete@ScreenItemList@@QAEXPBVScreenItem@@@Z ENDP	; ScreenItemList::Delete
_TEXT	ENDS
PUBLIC	?Delete@ScreenItemList@@QAEXH@Z			; ScreenItemList::Delete
_DATA	SEGMENT
	ORG $+3
$SG56620 DB	'C:\Documents and Settings\don\Desktop\sciw\Interp\Silist'
	DB	'.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_index$ = 8
_this$ = -12
$T56765 = -4
$T56766 = -8
?Delete@ScreenItemList@@QAEXH@Z PROC NEAR		; ScreenItemList::Delete

; 137  : {

  00420	55		 push	 ebp
  00421	8b ec		 mov	 ebp, esp
  00423	83 ec 10	 sub	 esp, 16			; 00000010H
  00426	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 138  : 
; 139  : 	if ((index < 0) || (index > length) || (siArray[index] == NULL) )

  00429	83 7d 08 00	 cmp	 DWORD PTR _index$[ebp], 0
  0042d	7c 1a		 jl	 SHORT $L56619
  0042f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00432	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  00435	3b 88 40 9c 00
	00		 cmp	 ecx, DWORD PTR [eax+40000]
  0043b	7f 0c		 jg	 SHORT $L56619
  0043d	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00440	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00443	83 3c 90 00	 cmp	 DWORD PTR [eax+edx*4], 0
  00447	75 1d		 jne	 SHORT $L56618
$L56619:

; 140  : 		msgMgr->Fatal(SrcLoc, Msg_InvalidScreenItemIndex);

  00449	6a 5f		 push	 95			; 0000005fH
  0044b	68 8c 00 00 00	 push	 140			; 0000008cH
  00450	68 00 00 00 00	 push	 OFFSET FLAT:$SG56620
  00455	6a 61		 push	 97			; 00000061H
  00457	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0045d	51		 push	 ecx
  0045e	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  00463	83 c4 14	 add	 esp, 20			; 00000014H
$L56618:

; 141  : 	delete siArray[index];

  00466	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00469	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0046c	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0046f	89 4d f8	 mov	 DWORD PTR $T56766[ebp], ecx
  00472	8b 55 f8	 mov	 edx, DWORD PTR $T56766[ebp]
  00475	89 55 fc	 mov	 DWORD PTR $T56765[ebp], edx
  00478	83 7d fc 00	 cmp	 DWORD PTR $T56765[ebp], 0
  0047c	74 0f		 je	 SHORT $L56767
  0047e	6a 01		 push	 1
  00480	8b 4d fc	 mov	 ecx, DWORD PTR $T56765[ebp]
  00483	e8 00 00 00 00	 call	 ??_GScreenItem@@QAEPAXI@Z ; ScreenItem::`scalar deleting destructor'
  00488	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
  0048b	eb 07		 jmp	 SHORT $L56768
$L56767:
  0048d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR -16+[ebp], 0
$L56768:

; 142  : 	siArray[index] = NULL;

  00494	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00497	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0049a	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0

; 143  : }

  004a1	8b e5		 mov	 esp, ebp
  004a3	5d		 pop	 ebp
  004a4	c2 04 00	 ret	 4
?Delete@ScreenItemList@@QAEXH@Z ENDP			; ScreenItemList::Delete
_TEXT	ENDS
PUBLIC	?Sort@ScreenItemList@@QAEXXZ			; ScreenItemList::Sort
PUBLIC	?Priority@ScreenItem@@QBEHXZ			; ScreenItem::Priority
_TEXT	SEGMENT
_this$ = -24
_i$ = -4
_swap$56633 = -12
_j$56634 = -8
_temp$56641 = -20
_tmp$56642 = -16
?Sort@ScreenItemList@@QAEXXZ PROC NEAR			; ScreenItemList::Sort

; 149  : {

  004a7	55		 push	 ebp
  004a8	8b ec		 mov	 ebp, esp
  004aa	83 ec 18	 sub	 esp, 24			; 00000018H
  004ad	56		 push	 esi
  004ae	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 150  : 	int i;
; 151  : 	//  Sorts ScreenItem List from lo to high priority
; 152  : 	//  The list is packed before sorting.
; 153  : 	//
; 154  : 	//  Algorithm is modified bubble sort.   Feel free to replace
; 155  : 	//  with a better performance one, but remember that the list is
; 156  : 	//  usually very small (est. 100 elements or less).
; 157  : 
; 158  : 	for (i=0;i<length;++i)

  004b1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004b8	eb 09		 jmp	 SHORT $L56627
$L56628:
  004ba	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004bd	83 c0 01	 add	 eax, 1
  004c0	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L56627:
  004c3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  004c6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  004c9	3b 91 40 9c 00
	00		 cmp	 edx, DWORD PTR [ecx+40000]
  004cf	7d 12		 jge	 SHORT $L56629

; 159  : 		order[i] = i;	

  004d1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004d4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  004d7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  004da	89 94 81 20 4e
	00 00		 mov	 DWORD PTR [ecx+eax*4+20000], edx
  004e1	eb d7		 jmp	 SHORT $L56628
$L56629:

; 160  : 	for (i = length - 1;i > 0;i--)  {

  004e3	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  004e6	8b 88 40 9c 00
	00		 mov	 ecx, DWORD PTR [eax+40000]
  004ec	83 e9 01	 sub	 ecx, 1
  004ef	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  004f2	eb 09		 jmp	 SHORT $L56630
$L56631:
  004f4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  004f7	83 ea 01	 sub	 edx, 1
  004fa	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L56630:
  004fd	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00501	0f 8e 95 01 00
	00		 jle	 $L56632

; 161  : 		int swap = False;

  00507	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _swap$56633[ebp], 0

; 162  : 
; 163  : 		for (int j = 0; j < i; j++)  {

  0050e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$56634[ebp], 0
  00515	eb 09		 jmp	 SHORT $L56635
$L56636:
  00517	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  0051a	83 c0 01	 add	 eax, 1
  0051d	89 45 f8	 mov	 DWORD PTR _j$56634[ebp], eax
$L56635:
  00520	8b 4d f8	 mov	 ecx, DWORD PTR _j$56634[ebp]
  00523	3b 4d fc	 cmp	 ecx, DWORD PTR _i$[ebp]
  00526	0f 8d 63 01 00
	00		 jge	 $L56637

; 165  : 					(siArray[j] == NULL)
; 166  : 					||
; 167  : 				   (siArray[j]->Priority() > siArray[j+1]->Priority()) 
; 168  : 				   ||
; 169  : 				   (
; 170  : 				      (siArray[j]->Priority() == siArray[j+1]->Priority()) 
; 171  : 				      &&
; 172  :                   (
; 173  : 				         (siArray[j]->pos.y + siArray[j]->z > siArray[j+1]->pos.y+ siArray[j+1]->z)
; 174  : 				         ||
; 175  :                      (
; 176  : 				            (siArray[j]->pos.y + siArray[j]->z == siArray[j+1]->pos.y + siArray[j+1]->z)
; 177  :                         &&
; 178  :                         (siArray[j]->Id() > siArray[j+1]->Id())
; 179  : 				         )
; 180  :                   )
; 181  :                )
; 182  : 				)  {

  0052c	8b 55 f8	 mov	 edx, DWORD PTR _j$56634[ebp]
  0052f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00532	83 3c 90 00	 cmp	 DWORD PTR [eax+edx*4], 0
  00536	0f 84 e1 00 00
	00		 je	 $L56640
  0053c	8b 4d f8	 mov	 ecx, DWORD PTR _j$56634[ebp]
  0053f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00542	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00545	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  0054a	8b f0		 mov	 esi, eax
  0054c	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  0054f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00552	8b 4c 81 04	 mov	 ecx, DWORD PTR [ecx+eax*4+4]
  00556	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  0055b	3b f0		 cmp	 esi, eax
  0055d	0f 8f ba 00 00
	00		 jg	 $L56640
  00563	8b 55 f8	 mov	 edx, DWORD PTR _j$56634[ebp]
  00566	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00569	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0056c	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  00571	8b f0		 mov	 esi, eax
  00573	8b 4d f8	 mov	 ecx, DWORD PTR _j$56634[ebp]
  00576	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00579	8b 4c 8a 04	 mov	 ecx, DWORD PTR [edx+ecx*4+4]
  0057d	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  00582	3b f0		 cmp	 esi, eax
  00584	0f 85 00 01 00
	00		 jne	 $L56638
  0058a	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  0058d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00590	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00593	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  00596	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00599	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0059c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0059f	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  005a2	8b 55 f8	 mov	 edx, DWORD PTR _j$56634[ebp]
  005a5	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  005a8	8b 54 90 04	 mov	 edx, DWORD PTR [eax+edx*4+4]
  005ac	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  005af	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  005b2	8b 44 86 04	 mov	 eax, DWORD PTR [esi+eax*4+4]
  005b6	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  005b9	03 50 08	 add	 edx, DWORD PTR [eax+8]
  005bc	3b ca		 cmp	 ecx, edx
  005be	7f 5d		 jg	 SHORT $L56640
  005c0	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  005c3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  005c6	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  005c9	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  005cc	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  005cf	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  005d2	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  005d5	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  005d8	8b 55 f8	 mov	 edx, DWORD PTR _j$56634[ebp]
  005db	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  005de	8b 54 90 04	 mov	 edx, DWORD PTR [eax+edx*4+4]
  005e2	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  005e5	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  005e8	8b 44 86 04	 mov	 eax, DWORD PTR [esi+eax*4+4]
  005ec	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  005ef	03 50 08	 add	 edx, DWORD PTR [eax+8]
  005f2	3b ca		 cmp	 ecx, edx
  005f4	0f 85 90 00 00
	00		 jne	 $L56638
  005fa	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  005fd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00600	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00603	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  00608	8b f0		 mov	 esi, eax
  0060a	8b 55 f8	 mov	 edx, DWORD PTR _j$56634[ebp]
  0060d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00610	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  00614	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  00619	3b f0		 cmp	 esi, eax
  0061b	7e 6d		 jle	 SHORT $L56638
$L56640:

; 183  : 				ScreenItem* temp = siArray[j+1];

  0061d	8b 4d f8	 mov	 ecx, DWORD PTR _j$56634[ebp]
  00620	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00623	8b 44 8a 04	 mov	 eax, DWORD PTR [edx+ecx*4+4]
  00627	89 45 ec	 mov	 DWORD PTR _temp$56641[ebp], eax

; 184  : 				siArray[j+1] = siArray[j];

  0062a	8b 4d f8	 mov	 ecx, DWORD PTR _j$56634[ebp]
  0062d	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00630	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  00633	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00636	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  00639	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax

; 185  : 				siArray[j] = temp;

  0063d	8b 4d f8	 mov	 ecx, DWORD PTR _j$56634[ebp]
  00640	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00643	8b 45 ec	 mov	 eax, DWORD PTR _temp$56641[ebp]
  00646	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 186  : 				// Keep track of the unsorted order
; 187  : 				int tmp = order[j+1];

  00649	8b 4d f8	 mov	 ecx, DWORD PTR _j$56634[ebp]
  0064c	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0064f	8b 84 8a 24 4e
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+20004]
  00656	89 45 f0	 mov	 DWORD PTR _tmp$56642[ebp], eax

; 188  : 				order[j+1] = order[j];

  00659	8b 4d f8	 mov	 ecx, DWORD PTR _j$56634[ebp]
  0065c	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0065f	8b 45 f8	 mov	 eax, DWORD PTR _j$56634[ebp]
  00662	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00665	8b 84 86 20 4e
	00 00		 mov	 eax, DWORD PTR [esi+eax*4+20000]
  0066c	89 84 8a 24 4e
	00 00		 mov	 DWORD PTR [edx+ecx*4+20004], eax

; 189  : 				order[j] = tmp;

  00673	8b 4d f8	 mov	 ecx, DWORD PTR _j$56634[ebp]
  00676	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00679	8b 45 f0	 mov	 eax, DWORD PTR _tmp$56642[ebp]
  0067c	89 84 8a 20 4e
	00 00		 mov	 DWORD PTR [edx+ecx*4+20000], eax

; 190  : 				swap = True;

  00683	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _swap$56633[ebp], 1
$L56638:

; 192  : 		}

  0068a	e9 88 fe ff ff	 jmp	 $L56636
$L56637:

; 193  : 		if (!swap)

  0068f	83 7d f4 00	 cmp	 DWORD PTR _swap$56633[ebp], 0
  00693	75 02		 jne	 SHORT $L56643

; 194  : 			break;

  00695	eb 05		 jmp	 SHORT $L56632
$L56643:

; 195  : 	}

  00697	e9 58 fe ff ff	 jmp	 $L56631
$L56632:

; 196  : }

  0069c	5e		 pop	 esi
  0069d	8b e5		 mov	 esp, ebp
  0069f	5d		 pop	 ebp
  006a0	c3		 ret	 0
?Sort@ScreenItemList@@QAEXXZ ENDP			; ScreenItemList::Sort
_TEXT	ENDS
;	COMDAT ?Priority@ScreenItem@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Priority@ScreenItem@@QBEHXZ PROC NEAR			; ScreenItem::Priority, COMDAT

; 64   : 	int			Priority() const			{return priority;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Priority@ScreenItem@@QBEHXZ ENDP			; ScreenItem::Priority
_TEXT	ENDS
PUBLIC	?Unsort@ScreenItemList@@QAEXXZ			; ScreenItemList::Unsort
_TEXT	SEGMENT
_this$ = -16
_i$ = -4
_temp$56654 = -12
_tmp$56655 = -8
?Unsort@ScreenItemList@@QAEXXZ PROC NEAR		; ScreenItemList::Unsort

; 200  : {

  006a1	55		 push	 ebp
  006a2	8b ec		 mov	 ebp, esp
  006a4	83 ec 10	 sub	 esp, 16			; 00000010H
  006a7	56		 push	 esi
  006a8	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 201  : 	// Put the list back to it's original order
; 202  : 	for (int i=0;i<length;++i) {

  006ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  006b2	eb 09		 jmp	 SHORT $L56648
$L56649:
  006b4	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  006b7	83 c0 01	 add	 eax, 1
  006ba	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L56648:
  006bd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  006c0	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  006c3	3b 91 40 9c 00
	00		 cmp	 edx, DWORD PTR [ecx+40000]
  006c9	0f 8d ac 00 00
	00		 jge	 $L56650
$L56652:

; 203  : 		while (order[i] != i) {

  006cf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  006d2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  006d5	8b 94 81 20 4e
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+20000]
  006dc	3b 55 fc	 cmp	 edx, DWORD PTR _i$[ebp]
  006df	0f 84 91 00 00
	00		 je	 $L56653

; 204  : 			ScreenItem* temp = siArray[order[i]];

  006e5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  006e8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  006eb	8b 94 81 20 4e
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+20000]
  006f2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  006f5	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  006f8	89 4d f4	 mov	 DWORD PTR _temp$56654[ebp], ecx

; 205  : 			int tmp = order[order[i]];

  006fb	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  006fe	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00701	8b 8c 90 20 4e
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+20000]
  00708	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0070b	8b 84 8a 20 4e
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+20000]
  00712	89 45 f8	 mov	 DWORD PTR _tmp$56655[ebp], eax

; 206  : 
; 207  : 			siArray[order[i]] = siArray[i];

  00715	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00718	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0071b	8b 84 8a 20 4e
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+20000]
  00722	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00725	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00728	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  0072b	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  0072e	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 208  : 			order[order[i]] = order[i];

  00731	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00734	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00737	8b 94 81 20 4e
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+20000]
  0073e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00741	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00744	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  00747	8b 8c 8e 20 4e
	00 00		 mov	 ecx, DWORD PTR [esi+ecx*4+20000]
  0074e	89 8c 90 20 4e
	00 00		 mov	 DWORD PTR [eax+edx*4+20000], ecx

; 209  : 
; 210  : 			siArray[i] = temp;

  00755	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00758	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0075b	8b 4d f4	 mov	 ecx, DWORD PTR _temp$56654[ebp]
  0075e	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 211  : 			order[i] = tmp;

  00761	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00764	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00767	8b 4d f8	 mov	 ecx, DWORD PTR _tmp$56655[ebp]
  0076a	89 8c 90 20 4e
	00 00		 mov	 DWORD PTR [eax+edx*4+20000], ecx

; 212  : 		}

  00771	e9 59 ff ff ff	 jmp	 $L56652
$L56653:

; 213  : 	}

  00776	e9 39 ff ff ff	 jmp	 $L56649
$L56650:

; 214  : }

  0077b	5e		 pop	 esi
  0077c	8b e5		 mov	 esp, ebp
  0077e	5d		 pop	 ebp
  0077f	c3		 ret	 0
?Unsort@ScreenItemList@@QAEXXZ ENDP			; ScreenItemList::Unsort
_TEXT	ENDS
END

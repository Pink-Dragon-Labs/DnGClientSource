	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Kbdmgrw.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1KbdMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GKbdMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7KbdMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?HandleKey@KbdMgrWin@@QAEHIGJ@Z			; KbdMgrWin::HandleKey
PUBLIC	?KeyEvent@KbdMgrWin@@AAEXG@Z			; KbdMgrWin::KeyEvent
_TEXT	SEGMENT
_iMessage$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -8
_charUsed$ = -4
?HandleKey@KbdMgrWin@@QAEHIGJ@Z PROC NEAR		; KbdMgrWin::HandleKey

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 14   : Bool	charUsed;
; 15   : 
; 16   : 	charUsed = True;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _charUsed$[ebp], 1

; 19   : 		{

  00010	8b 45 08	 mov	 eax, DWORD PTR _iMessage$[ebp]
  00013	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  00016	8b 4d f4	 mov	 ecx, DWORD PTR -12+[ebp]
  00019	81 e9 00 01 00
	00		 sub	 ecx, 256		; 00000100H
  0001f	89 4d f4	 mov	 DWORD PTR -12+[ebp], ecx
  00022	83 7d f4 06	 cmp	 DWORD PTR -12+[ebp], 6
  00026	0f 87 f2 00 00
	00		 ja	 $L56496
  0002c	8b 55 f4	 mov	 edx, DWORD PTR -12+[ebp]
  0002f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L56588[edx*4]
$L56476:

; 20   : 		case WM_CHAR:					/* standard character entered */
; 21   : 			KeyEvent(wParam);			/* virtual key code */

  00036	66 8b 45 0c	 mov	 ax, WORD PTR _wParam$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?KeyEvent@KbdMgrWin@@AAEXG@Z ; KbdMgrWin::KeyEvent

; 22   : 			break;

  00043	e9 dd 00 00 00	 jmp	 $L56473
$L56477:

; 26   : 				{

  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0004b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00051	89 4d f0	 mov	 DWORD PTR -16+[ebp], ecx
  00054	8b 55 f0	 mov	 edx, DWORD PTR -16+[ebp]
  00057	83 ea 0c	 sub	 edx, 12			; 0000000cH
  0005a	89 55 f0	 mov	 DWORD PTR -16+[ebp], edx
  0005d	83 7d f0 6d	 cmp	 DWORD PTR -16+[ebp], 109 ; 0000006dH
  00061	77 47		 ja	 SHORT $L56486
  00063	8b 4d f0	 mov	 ecx, DWORD PTR -16+[ebp]
  00066	33 c0		 xor	 eax, eax
  00068	8a 81 00 00 00
	00		 mov	 al, BYTE PTR $L56589[ecx]
  0006e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L56590[eax*4]
$L56482:

; 27   : 				case VK_CLEAR:
; 28   : 				case VK_PRIOR:
; 29   : 				case VK_NEXT:
; 30   : 				case VK_END:
; 31   : 				case VK_HOME:
; 32   : 				case VK_LEFT:
; 33   : 				case VK_UP:
; 34   : 				case VK_RIGHT:
; 35   : 				case VK_DOWN:
; 36   : 				case VK_DELETE:
; 37   : 				case VK_SUBTRACT:
; 38   : 				case VK_F1:
; 39   : 				case VK_F2:
; 40   : 				case VK_F3:
; 41   : 				case VK_F4:
; 42   : 				case VK_F5:
; 43   : 				case VK_F6:
; 44   : 				case VK_F7:
; 45   : 				case VK_F8:
; 46   : 				case VK_F9:
; 47   : 				case VK_F10:
; 48   : 					KeyEvent((HIWORD (lParam) & 0xff) << 8);	/* scan code */

  00075	8b 55 10	 mov	 edx, DWORD PTR _lParam$[ebp]
  00078	c1 ea 10	 shr	 edx, 16			; 00000010H
  0007b	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00081	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00087	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0008d	c1 e2 08	 shl	 edx, 8
  00090	52		 push	 edx
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?KeyEvent@KbdMgrWin@@AAEXG@Z ; KbdMgrWin::KeyEvent

; 49   : 					break;

  00099	eb 16		 jmp	 SHORT $L56479
$L56485:

; 50   : 
; 51   : 				case VK_PAUSE:
; 52   : 					KeyEvent(0x7000);

  0009b	68 00 70 00 00	 push	 28672			; 00007000H
  000a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?KeyEvent@KbdMgrWin@@AAEXG@Z ; KbdMgrWin::KeyEvent

; 53   : 					break;

  000a8	eb 07		 jmp	 SHORT $L56479
$L56486:

; 54   : 
; 55   : 				default:					/* ignore all others */
; 56   : 					charUsed = False;

  000aa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _charUsed$[ebp], 0
$L56479:

; 59   : 			break;

  000b1	eb 72		 jmp	 SHORT $L56473
$L56487:

; 60   : 
; 61   : 		case WM_SYSKEYDOWN:				/* ALT key combinations */
; 62   : //			ReleaseCapture();	 			//allow task switching
; 63   : 			if (wParam == VK_F10)

  000b3	8b 45 0c	 mov	 eax, DWORD PTR _wParam$[ebp]
  000b6	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000bb	83 f8 79	 cmp	 eax, 121		; 00000079H
  000be	75 26		 jne	 SHORT $L56488

; 64   : 				KeyEvent((HIWORD (lParam) & 0xff) << 8);		/* scan code */

  000c0	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  000c3	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000c6	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000cc	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000d2	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000d8	c1 e1 08	 shl	 ecx, 8
  000db	51		 push	 ecx
  000dc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?KeyEvent@KbdMgrWin@@AAEXG@Z ; KbdMgrWin::KeyEvent

; 65   : 			else

  000e4	eb 07		 jmp	 SHORT $L56491
$L56488:

; 66   : 				charUsed = False;

  000e6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _charUsed$[ebp], 0
$L56491:

; 67   : 			break;

  000ed	eb 36		 jmp	 SHORT $L56473
$L56492:

; 68   : 
; 69   : 		case WM_SYSKEYUP:
; 70   : //			SetCapture(hMyWnd);
; 71   : 			charUsed = False;

  000ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _charUsed$[ebp], 0

; 72   : 			break;

  000f6	eb 2d		 jmp	 SHORT $L56473
$L56493:

; 73   : 
; 74   : 		case WM_SYSCHAR:					/* ALT character entered */
; 75   : 			KeyEvent((HIWORD (lParam) & 0xff) << 8);		/* scan code */

  000f8	8b 55 10	 mov	 edx, DWORD PTR _lParam$[ebp]
  000fb	c1 ea 10	 shr	 edx, 16			; 00000010H
  000fe	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00104	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0010a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00110	c1 e2 08	 shl	 edx, 8
  00113	52		 push	 edx
  00114	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	e8 00 00 00 00	 call	 ?KeyEvent@KbdMgrWin@@AAEXG@Z ; KbdMgrWin::KeyEvent

; 76   : 			break;

  0011c	eb 07		 jmp	 SHORT $L56473
$L56496:

; 77   : 
; 78   : 		default:
; 79   : 			charUsed = False;

  0011e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _charUsed$[ebp], 0
$L56473:

; 82   : 	return charUsed;

  00125	8b 45 fc	 mov	 eax, DWORD PTR _charUsed$[ebp]

; 83   : }

  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 0c 00	 ret	 12			; 0000000cH
$L56588:
  0012e	00 00 00 00	 DD	 $L56477
  00132	00 00 00 00	 DD	 $L56496
  00136	00 00 00 00	 DD	 $L56476
  0013a	00 00 00 00	 DD	 $L56496
  0013e	00 00 00 00	 DD	 $L56487
  00142	00 00 00 00	 DD	 $L56492
  00146	00 00 00 00	 DD	 $L56493
$L56590:
  0014a	00 00 00 00	 DD	 $L56482
  0014e	00 00 00 00	 DD	 $L56485
  00152	00 00 00 00	 DD	 $L56486
$L56589:
  00156	00		 DB	 0
  00157	02		 DB	 2
  00158	02		 DB	 2
  00159	02		 DB	 2
  0015a	02		 DB	 2
  0015b	02		 DB	 2
  0015c	02		 DB	 2
  0015d	01		 DB	 1
  0015e	02		 DB	 2
  0015f	02		 DB	 2
  00160	02		 DB	 2
  00161	02		 DB	 2
  00162	02		 DB	 2
  00163	02		 DB	 2
  00164	02		 DB	 2
  00165	02		 DB	 2
  00166	02		 DB	 2
  00167	02		 DB	 2
  00168	02		 DB	 2
  00169	02		 DB	 2
  0016a	02		 DB	 2
  0016b	00		 DB	 0
  0016c	00		 DB	 0
  0016d	00		 DB	 0
  0016e	00		 DB	 0
  0016f	00		 DB	 0
  00170	00		 DB	 0
  00171	00		 DB	 0
  00172	00		 DB	 0
  00173	02		 DB	 2
  00174	02		 DB	 2
  00175	02		 DB	 2
  00176	02		 DB	 2
  00177	02		 DB	 2
  00178	00		 DB	 0
  00179	02		 DB	 2
  0017a	02		 DB	 2
  0017b	02		 DB	 2
  0017c	02		 DB	 2
  0017d	02		 DB	 2
  0017e	02		 DB	 2
  0017f	02		 DB	 2
  00180	02		 DB	 2
  00181	02		 DB	 2
  00182	02		 DB	 2
  00183	02		 DB	 2
  00184	02		 DB	 2
  00185	02		 DB	 2
  00186	02		 DB	 2
  00187	02		 DB	 2
  00188	02		 DB	 2
  00189	02		 DB	 2
  0018a	02		 DB	 2
  0018b	02		 DB	 2
  0018c	02		 DB	 2
  0018d	02		 DB	 2
  0018e	02		 DB	 2
  0018f	02		 DB	 2
  00190	02		 DB	 2
  00191	02		 DB	 2
  00192	02		 DB	 2
  00193	02		 DB	 2
  00194	02		 DB	 2
  00195	02		 DB	 2
  00196	02		 DB	 2
  00197	02		 DB	 2
  00198	02		 DB	 2
  00199	02		 DB	 2
  0019a	02		 DB	 2
  0019b	02		 DB	 2
  0019c	02		 DB	 2
  0019d	02		 DB	 2
  0019e	02		 DB	 2
  0019f	02		 DB	 2
  001a0	02		 DB	 2
  001a1	02		 DB	 2
  001a2	02		 DB	 2
  001a3	02		 DB	 2
  001a4	02		 DB	 2
  001a5	02		 DB	 2
  001a6	02		 DB	 2
  001a7	02		 DB	 2
  001a8	02		 DB	 2
  001a9	02		 DB	 2
  001aa	02		 DB	 2
  001ab	02		 DB	 2
  001ac	02		 DB	 2
  001ad	02		 DB	 2
  001ae	02		 DB	 2
  001af	02		 DB	 2
  001b0	02		 DB	 2
  001b1	02		 DB	 2
  001b2	02		 DB	 2
  001b3	02		 DB	 2
  001b4	02		 DB	 2
  001b5	02		 DB	 2
  001b6	02		 DB	 2
  001b7	00		 DB	 0
  001b8	02		 DB	 2
  001b9	02		 DB	 2
  001ba	00		 DB	 0
  001bb	00		 DB	 0
  001bc	00		 DB	 0
  001bd	00		 DB	 0
  001be	00		 DB	 0
  001bf	00		 DB	 0
  001c0	00		 DB	 0
  001c1	00		 DB	 0
  001c2	00		 DB	 0
  001c3	00		 DB	 0
?HandleKey@KbdMgrWin@@QAEHIGJ@Z ENDP			; KbdMgrWin::HandleKey
_TEXT	ENDS
EXTRN	??0SOL_Event@@QAE@XZ:NEAR			; SOL_Event::SOL_Event
EXTRN	?eventMgr@@3PAUEventMgr@@A:DWORD		; eventMgr
_TEXT	SEGMENT
_charCode$ = 8
_this$ = -44
_event$ = -40
?KeyEvent@KbdMgrWin@@AAEXG@Z PROC NEAR			; KbdMgrWin::KeyEvent

; 92   : {

  001c4	55		 push	 ebp
  001c5	8b ec		 mov	 ebp, esp
  001c7	83 ec 2c	 sub	 esp, 44			; 0000002cH
  001ca	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : SOL_Event	event;

  001cd	8d 4d d8	 lea	 ecx, DWORD PTR _event$[ebp]
  001d0	e8 00 00 00 00	 call	 ??0SOL_Event@@QAE@XZ	; SOL_Event::SOL_Event

; 94   : 
; 95   : 	event.type			= SOL_Event::KeyDown;

  001d5	66 c7 45 d8 04
	00		 mov	 WORD PTR _event$[ebp], 4

; 96   : 	event.message		= charCode;

  001db	8b 45 08	 mov	 eax, DWORD PTR _charCode$[ebp]
  001de	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001e3	89 45 dc	 mov	 DWORD PTR _event$[ebp+4], eax

; 97   : 	eventMgr->Handle(&event);

  001e6	8d 4d d8	 lea	 ecx, DWORD PTR _event$[ebp]
  001e9	51		 push	 ecx
  001ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  001f0	8b 02		 mov	 eax, DWORD PTR [edx]
  001f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  001f8	ff 50 10	 call	 DWORD PTR [eax+16]

; 98   : }

  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c2 04 00	 ret	 4
?KeyEvent@KbdMgrWin@@AAEXG@Z ENDP			; KbdMgrWin::KeyEvent
_TEXT	ENDS
END

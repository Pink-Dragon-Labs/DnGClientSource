	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Dialog.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@NAAD@Magellan?5MSWHEEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FPAF@MouseZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CLBL@MSWHEEL_ROLLMSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DLPD@MSH_WHEELSUPPORT_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODOJ@MSH_SCROLL_LINES_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EDBF@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FGFK@CLSID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DMDD@?5?9?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOFL@Interface?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FNJL@?$CICLSID?$DP?$DP?$DP?$CJ?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DLIL@?5?9?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@NKPL@Unknown?5Error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@HOAP@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@BJHN@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MDHG@?4tlb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLHD@oleaut32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FJNM@UnRegisterTypeLib?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CDEE@DllGetVersion?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FDEG@comctl32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKNA@shell32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@ILEN@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@JLLA@?3Jan?3January?3Feb?3February?3Mar?3Ma@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCCD@true?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELCB@no?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LGKI@yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKHJ@C?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPIO@IDispatch?5error?5?$CD?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NADL@Unknown?5error?50x?$CF0lX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KLJH@invalid?5vector?$DMbool?$DO?5subscript?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MHAC@?$CFp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CFAI@0123456789abcdefABCDEF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KFAL@E?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KMAE@?0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MMAA@missing?5locale?5facet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __tcscmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcscoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextWindow@@YAPAUHWND__@@PAU1@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawState@@YGHPAUHDC__@@PAUHBRUSH__@@P6GH0JIHH@ZJIHHHHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextPtr@CSimpleList@@QBEPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CByteArray@@QBEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CByteArray@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CWordArray@@QBEGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CWordArray@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CDWordArray@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CDWordArray@@QAEAAKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CUIntArray@@QBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CUIntArray@@QAEAAIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ACPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CObArray@@QBEPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CObArray@@QAEAAPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CStringArray@@QBE?AVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CStringArray@@QAEAAVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSimpleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSimpleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMemoryException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemoryException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNotSupportedException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNotSupportedException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCArchiveException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFileException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFileException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFilePath@CFile@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CString@@IBEPAUCStringData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CString@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@CString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDays@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalHours@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalMinutes@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalSeconds@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwapLeftRight@CRect@@SAXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCResourceException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CResourceException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCUserException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CUserException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPen@@SGPAV1@PAUHPEN__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBrush@@SGPAV1@PAUHBRUSH__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPalette@@SGPAV1@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHmenu@CMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BringWindowToTop@CWnd@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateWindow@CWnd@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsWindowVisible@CWnd@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CListBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCheckListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCheckListBox@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComboBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemData@CComboBox@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CComboBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEdit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCommonDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCommonDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintSelection@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintRange@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorders@CStatusBar@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRectTracker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmapButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmapButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualGUID@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCOleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1COleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleCurrency@@QAEXW4CurrencyStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4COleDateTime@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTime@@QAEXW4DateTimeStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0COleDateTimeSpan@@QAE@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTimeSpan@@QAEXW4DateTimeSpanStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@COleSafeArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDateTimeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonthCalCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDragListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatusBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListCtrl@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHotKeyCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpinButtonCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSliderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAnimateCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRichEditCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCReBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CReBarCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBoxEx@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIPAddressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2BSTR@@YAPAGPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlTrace2@ATL@@YAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualGUID@ATL@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YAHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReplaceSingleQuote@CComModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@CComBSTR@ATL@@QAE_NPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalClear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlAdvise@ATL@@YGJPAUIUnknown@@0ABU_GUID@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_NextObjectMapEntry@ATL@@YAPAU_ATL_OBJMAP_ENTRY@1@PAU_ATL_MODULE@1@PAU21@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleInit@ATL@@YGJPAU_ATL_MODULE@1@PAU_ATL_OBJMAP_ENTRY@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterClassObjects@ATL@@YGJPAU_ATL_MODULE@1@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRevokeClassObjects@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleGetClassObject@ATL@@YGJPAU_ATL_MODULE@1@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleTerm@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddTermFunc@ATL@@YGJPAU_ATL_MODULE@1@P6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterServer@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServerEx@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServer@ATL@@YGJPAU_ATL_MODULE@1@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUpdateRegistryFromResourceD@ATL@@YGJPAU_ATL_MODULE@1@PBGHPAU_ATL_REGMAP_ENTRY@1@PAUIRegistrar@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleLoadTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBGPAPAGPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddCreateWndData@ATL@@YGXPAU_ATL_MODULE@1@PAU_AtlCreateWndData@1@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleExtractCreateWndData@ATL@@YGPAXPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBDPAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@invalid_argument@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0invalid_argument@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YAGDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@failure@ios_base@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7_bstr_t@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Compare@_bstr_t@@ABEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@Data_t@_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Assign@Data_t@_bstr_t@@QAEXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@Data_t@_bstr_t@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8_variant_t@@QBE_NPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@_variant_t@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonikerFile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDocument@COleServerItem@@QBEPAVCOleServerDoc@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Data@ArrayID@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RespondsTo@ObjectID@@QBEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DStringID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_scratch@CSCI_Object@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_nValue@CSCI_LongInt@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_nValue@CSCI_LongInt@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetMsg@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDLo@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDHi@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVObjectID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharInfo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GroupMember@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ServerInfo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServerName@CSCI_ServerInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServerName@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pStatus@CSCI_ServerInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pStatus@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pNumberOfUsers@CSCI_ServerInfo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pNumberOfUsers@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pIP@CSCI_ServerInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pIP@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pPort@CSCI_ServerInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pPort@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProcessEvents@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTransient@CSkinWnd@@IAE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTransient@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetEventProcessing@CSkinWnd@@QAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTransientState@CSkinWnd@@QAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Next@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Previous@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$vector@_NV?$allocator@I@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPBI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?BVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Zconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Mconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Ziterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Miterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@Vconst_iterator@12@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@_NV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nw@?$vector@_NV?$allocator@I@std@@@std@@KAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Trim@?$vector@_NV?$allocator@I@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$vector@_NV?$allocator@I@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Refresh@CTabDlgBtn@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabDlgBtn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSkinObj@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSkinBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTabDlgBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSkinObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSelectedTab@CTabDlg@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetCharInfo@CLookAt@@SAXVCSCI_CharInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemBGColor@CSkinListCtrl@@MAEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckBounds@OCArray@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Data@OCArray@@QAEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ByteAt@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetByte@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetByte@CPackedData@@QAEXHE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutByte@CPackedData@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWord@CPackedData@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutWord@CPackedData@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LongAt@CPackedData@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CDoubleButtonDlg@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDoubleButtonDlg@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CDoubleButtonDlg@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCConfirmDlg@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CConfirmDlg@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCArchiveDlg@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveDlg@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Offset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Inset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0EventObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScaleInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Id@SOL_Plane@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPicNum@SOL_Plane@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPriority@SOL_Plane@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4Screen@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FontMgr@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PointSize@FontMgr@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBM@FontMgr@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetXRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetYRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Current@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Source@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Next@PaletteMgrIndex@@UBEABVSOLPalette@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CycleMap@PaletteMgrIndex@@UBEPBEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPercent@PaletteMgrIndex@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VaryPause@PaletteMgrIndex@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PaletteMgrTrue@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrTrue@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrTrue@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrIWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateHardware@PaletteMgrIWin@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrIWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PaletteMgrTWin@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateHardware@PaletteMgrTWin@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPaletteMgrTWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Cursor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Cursor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TextID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TimeMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@TimeMgr@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTimeMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Line@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PointerDevice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPointerDevice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_Mouse@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSwiftInfo@SOL_Mouse@@UBEHPAH000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSwift@SOL_Mouse@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Vibrate@SOL_Mouse@@UBEXHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetHotRectangleStatus@SOL_Mouse@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSOL_Mouse@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Spell@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSpellListCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpellListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Match@CMakeItemDlg@@QAEHVCSCI_WorldObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSplashDlg@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSplashDlg@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetViewMode@CTalkDlg@@QAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?getChat_Profanity@CToonSettings@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSpellListCtrl@@WEA@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSpellListCtrl@@WHE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSpellListCtrl@@WLE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GEditClass@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0EventObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_ListID@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetMsg@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ServerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPointContainer@@@ATL@@QAEPAPAUIConnectionPointContainer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPointContainer@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPointContainer@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPoint@@@ATL@@QAEPAPAUIConnectionPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPoint@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPoint@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIRegistrar@@@ATL@@QAEPAPAUIRegistrar@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIRegistrar@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIRegistrar@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIRegistrar@@@ATL@@QAEPAUIRegistrar@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInterfacePtr@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QBEPAUIMoniker@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QBEPAUIBinding@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$bitset@$05@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@IABIABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_allocator@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$allocator@I@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@IV?$allocator@I@std@@@std@@QAEPAIPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eq@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lt@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@IV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Viterator@?$vector@_NV?$allocator@I@std@@@std@@_NVreference@23@PAV423@H@std@@QAE@Viterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@_N$$CBVreference@23@PBV423@H@std@@QAE@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?test@?$bitset@$05@std@@QBE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@I@std@@QAEPAIIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@I@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@I@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@IV?$allocator@I@std@@@std@@QAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$bitset@$05@std@@ABEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@I@std@@QAEXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@I@std@@QAEXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@G@std@@QAEPAGIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@G@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXViterator@?$vector@_NV?$allocator@I@std@@@1@0AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@Vconst_iterator@31@0V231@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YADDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@GU?$char_traits@G@std@@@1@0IPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@std@@YA_NPBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lexicographical_compare@std@@YA_NPBI000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@I@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?isdigit@std@@YA_NDABVlocale@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAIHPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAI0ABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@G@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@D@std@@@std@@SAPAV?$ctype@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@G@std@@@std@@SAPAV?$ctype@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAPAV?$numpunct@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAPAV?$numpunct@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Iter_cat@std@@YA?AUrandom_access_iterator_tag@1@ABU?$iterator@Urandom_access_iterator_tag@std@@_NH@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAIUrandom_access_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?mismatch@std@@YA?AU?$pair@PBIPBI@1@PBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPADPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPAGPBDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@PBIPBI@std@@QAE@ABQBI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_eab22ac1_30c1_11cf_a7eb_0000c05bae0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d66d6f98_cdaa_11d0_b822_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9860_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000117_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000113_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d8_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1f8352c0_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMonthCalCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f220_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f208_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTabDlgBtn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc9_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa5_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000192_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000128_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000140_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7PaletteMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000002f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CEdit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000122_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_920ff31f_ca25_451a_9738_3444fc206bcc
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b283_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CScrollBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bcc7_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTabCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b3e7c340_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d49_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_85cb6900_4d95_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4f7ae600_0142_11d3_9dcf_89be4efb591e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBoxEx@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f203_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1ac3d9f0_175c_11d1_95be_00609797ea4f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_012dd920_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHotKeyCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020403_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f311_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1008c4a0_7613_11cf_9af1_0020af6e72f4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020410_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020404_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVoverflow_error@std@@@8??0overflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f23b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b15b8dc1_c7e1_11d0_8680_00aa00bdcb71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f52e2b61_18a1_11d1_b105_00805f49916b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3d7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2aa_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1de_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9d5_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000025_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000019_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2a4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d8_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_948c5ad3_c58d_11d0_9c0b_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020406_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_bc40bec1_c493_11d0_831b_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd21_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSpellListCtrl@@6BCScrollable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ee11629b_36df_11d3_9dd0_89d6dbbba800
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9bfbbc02_eff1_101a_84ed_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7EditClass@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_22f03340_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_63cdbcb0_c1b1_11d0_9336_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_bb1a2ae1_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0c733a30_2a1c_11ce_ade5_00aa0044773d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65ce_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cb5bdc81_93c1_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f218_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f230_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ef_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSimpleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f377_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0e6d4d92_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ca478da0_3920_11d3_9dd0_8067e4a06603
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eae1ba61_a4ed_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9eb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55882_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVrange_error@std@@@8??0range_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f35f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3fd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd23_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSplashDlg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a3ccedf3_2de2_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d10f6761_83e9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0002e011_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28d_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1ff_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f240_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1da_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpellListCtrl@@6BCSkinCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CCommonDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000129_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88a05c00_f000_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ee_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d5f56b60_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToolBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_08ec3e00_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af280b6_cb3f_11d0_891e_00c04fb6bfc4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9e7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020d03_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_85bd8e82_0fba_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CNotSupportedException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3fc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d40_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_359f3441_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f28b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_afa0dc11_c313_11d0_831a_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000023_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e0e270c1_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVbad_typeid@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c9_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1c2056cc_5ef4_101b_8bc8_00aa003e3b29
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2c2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fbf23b80_e3f0_101b_8488_00aa003e56f8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d9_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f1_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7SOL_Cursor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_b722bcc5_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSliderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_618736e0_3c3d_11cf_810c_00aa00389b71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000190_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDragListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3af24292_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020d00_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000191_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_f77459a0_bf9a_11cf_ba4e_00c04fd70816
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7PaletteMgrTrue@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f322_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f266_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a41_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4425_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$ctype@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@D@std@@@std@@0PAV?$numpunct@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@G@std@@@std@@0PAV?$numpunct@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@D@std@@@std@@0PAV?$ctype@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@G@std@@@std@@0PAV?$ctype@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f29c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_359f3443_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc8_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e003_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f206_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f212_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020402_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ed_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f490eb00_1240_11d1_9888_006097deacf9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_typeid@std@@@8??0bad_typeid@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CBitmapButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PointerDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSpellListCtrl@@6BCMouseWheelable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CConfirmDlg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1dd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f373_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214ea_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d7_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ed_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000112_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3f7f31ac_e15f_11d0_9c25_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000118_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f25f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fac32c80_cbe4_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7bf80980_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eb0fe172_1a3a_11d0_89b3_00a0c90a90ac
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_729fe2f8_1ea8_11d1_8f85_00c04fc2fbe1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f202_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ac60f6a0_0fd9_11d0_99cb_00c04fd64497
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7SOL_Mouse@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bccb_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f216_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_04598fc6_866c_11cf_ab7c_00aa00c08fcf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7COleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_332c4426_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28c_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ee_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e013_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_594f31d0_7f19_11d0_b194_00a0c90dc8bf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_6d5140c1_7436_11ce_8034_00aa006009fa
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f313_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88e39e80_3578_11cf_ae69_08002b2e1262
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_742b0e01_14e6_101b_914e_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7PaletteMgrIWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAnimateCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f37e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVunderflow_error@std@@@8??0underflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9c7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e7a1af80_4d96_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpinButtonCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ca04b7e6_0d21_11d1_8cc5_00c04fc2b085
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CArchiveDlg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b196b288_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000126_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_163bb1e0_6e00_11cf_837a_48dc04c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_2a342fc2_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d8f015c0_c278_11ce_a49e_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd3f23c0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_df0b3d60_548f_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a7aba9c1_8983_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_744129e0_cbe5_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_68284faa_6a48_11d0_8c78_00c04fd918b4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000010_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7TimeMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CStatusBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3d5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_626fc520_a41e_11cf_a731_00a0c9082637
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_91a565c1_e38f_11d0_94bf_00a0c9055cbf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2ad_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d31_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56a34_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000012a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af24290_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1e0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f35c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a9d758a0_4617_11cf_95fc_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b8da6310_e19b_11d0_933c_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_db01a1e3_a42b_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_65725580_9b5d_11d0_9bfe_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_539698a0_cdca_11cf_a5eb_00aa0047a063
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d30c1661_cdaf_11d0_8a3e_00c04fc9e26e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3dc39d1d_c030_11d0_b81b_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d46_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_37deb787_2d9b_11d3_9dd0_c423e6542e10
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_922eada0_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_69d14c80_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFileException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CReBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000011c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_9c2cad80_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_70bdde00_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f3cf_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CArchiveException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000121_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CResourceException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_d9f1e15a_ccdb_11d0_9c0c_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa2_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002df05_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRectTracker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f209_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000020_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f319_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f375_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f369_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cf51ed10_62fe_11cf_bf86_00a0c9034836
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_894ad3b0_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_baa342a0_2ded_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f29f6bc0_5021_11ce_aa15_00006901293f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e8_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f315_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f265_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMemoryException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cd_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d001f200_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e002_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_085fb2c0_0df8_11d1_8f4b_00a0c905413f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9e4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55dd814e_a1b7_4808_9625_4f75a3fad8a7
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f569d0_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ec_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214ee_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fa_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b285_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f361_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214eb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0c6c4200_c589_11d0_999a_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000139_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55881_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4ef6100a_af88_11d0_9846_00c04fc29993
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000002_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000138_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f7_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f372_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f5be2ee1_bfd7_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7PaletteMgrTWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020411_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020405_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRichEditCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDateTimeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f376_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f401_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d9e89500_30fa_11d0_b724_00aa006c1a01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_376bd3aa_3845_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f357_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f360_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a1_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c01387a_6ac2_4ef1_bda2_ec5d26e3b065
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_37d84f60_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_322982e0_0855_11d3_9dcf_ddfb3ab09e18
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cabb0da0_da57_11cf_9974_0020afd79762
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_c04d65d2_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7d688a70_c613_11d0_999b_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f378_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f383_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1cff0050_6fdd_11d0_9328_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bb1a2ae2_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_01e44665_24ac_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_6cfc9ba1_fe87_11d2_9dcf_ed29fafe371d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9ba05970_f6a8_11cf_a442_00a0c90a8f39
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcca_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_83c2d7a0_0de6_11d3_9dcf_9423f1b2561c
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonikerFile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_275c23e3_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVdomain_error@std@@@8??0domain_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28f_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSpellListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000104_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000110_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f207_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d4c_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_25b15600_0115_11d0_bf0d_00aa00b8dfd2
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000127_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CDoubleButtonDlg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000022_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000016_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c6_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCheckListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000026_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55272a00_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28b_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4427_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_aa5b6a80_b834_11d0_932f_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_e0e270c0_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e6_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000101_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000029_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3127ca40_446e_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_55980ba0_35aa_11cf_b671_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a1faf330_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a4c65425_0f82_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CIPAddressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CUserException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a6ef9861_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9862_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000018_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000193_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000024_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f200_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_dce47f78_8a6c_4c6d_a6f7_8be4427127c4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f204_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpellListCtrl@@6BCListCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f38a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSkinObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000002a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ea_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd1ae5e0_a6ae_11ce_bd37_504200c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000102_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f0_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a42_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f24f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000001d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000194_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHeaderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_99caf010_415e_11cf_8814_00aa00b569f5
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_47d2657a_7b27_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ec_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f211_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f205_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0e6d4d90_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00021500_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc6_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_89bcb740_6119_101a_bcb7_00dd010655af
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bcfce0a0_ec17_11d0_8d10_00a0c90f2719
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d6_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000119_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000111_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000105_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000125_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7bf80981_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b289_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65d0_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_972de6c1_8b09_11d2_b652_a1fd6cc34260
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f244_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56afc_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000103_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000013e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e1_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000003_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f1db8392_7331_11d0_8c99_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_c4d244b0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2eb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?GUID_ATLVer30@ATL@@3U_GUID@@A			; ATL::GUID_ATLVer30
PUBLIC	?m_libid@CComModule@ATL@@2U_GUID@@A		; ATL::CComModule::m_libid
PUBLIC	_LIBID_ATLLib
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?gDialogList@@3VSOL_List@@A			; gDialogList
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_LIBID_ACTIVESKINLib
PUBLIC	_IID_ISkinForm
PUBLIC	_IID_ISkinObjectDisp
PUBLIC	_IID_ISkinSource
PUBLIC	_DIID__ISkinFormEvents
PUBLIC	_IID_ISkinFormEvents_Sink
PUBLIC	_CLSID_SkinForm
PUBLIC	_DIID__ISkinObjectDispEvents
PUBLIC	_IID_ICOMScript
PUBLIC	_IID_IComMorph
PUBLIC	_IID_IComMoveSize
PUBLIC	_IID_ISkinButton
PUBLIC	_CLSID_SkinObject
PUBLIC	_CLSID_COMScript
PUBLIC	_CLSID_ComMorph
PUBLIC	_CLSID_ComMoveSize
PUBLIC	_DIID__ISkinButtonEvents
PUBLIC	_CLSID_SkinButton
PUBLIC	_IID_ISkinPanel
PUBLIC	_DIID__ISkinPanelEvents
PUBLIC	_IID_ISkinLabel
PUBLIC	_CLSID_SkinPanel
PUBLIC	_DIID__ISkinLabelEvents
PUBLIC	_IID_ISkinScrollBar
PUBLIC	_CLSID_SkinLabel
PUBLIC	_DIID__ISkinScrollBarEvents
PUBLIC	_CLSID_SkinScrollBar
PUBLIC	_DIID__ISkinSourceEvents
PUBLIC	_IID_ISkinStorage
PUBLIC	_IID_ISkinPopup
PUBLIC	_IID_IComTransitions
PUBLIC	_IID_ISkinEvent
PUBLIC	_IID_IComProcTextures
PUBLIC	_IID_IComFilters
PUBLIC	_CLSID_SkinSource
PUBLIC	_CLSID_SkinStorage
PUBLIC	_CLSID_SkinPopup
PUBLIC	_CLSID_ComTransitions
PUBLIC	_CLSID_SkinEvent
PUBLIC	_CLSID_ComProcTextures
PUBLIC	_CLSID_ComFilters
PUBLIC	_IID_IInternalConnection
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CComModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CComModule::m_libid
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
_BSS	SEGMENT
?gDialogList@@3VSOL_List@@A DQ 01H DUP (?)		; gDialogList
_BSS	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT
?GUID_ATLVer30@ATL@@3U_GUID@@A DD 0b62f5910H		; ATL::GUID_ATLVer30
	DW	06528H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT
_LIBID_ACTIVESKINLib DD 0972de6b5H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT
_IID_ISkinForm DD 0972de6c1H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT
_IID_ISkinObjectDisp DD 06cfc9ba1H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT
_IID_ISkinSource DD 037deb787H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT
_DIID__ISkinFormEvents DD 0972de6c3H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT
_IID_ISkinFormEvents_Sink DD 053fa8d31H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT
_CLSID_SkinForm DD 0972de6c2H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT
_DIID__ISkinObjectDispEvents DD 06cfc9ba3H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT
_IID_ICOMScript DD 04f7ae600H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT
_IID_IComMorph DD 0322982e0H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT
_IID_IComMoveSize DD 083c2d7a0H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT
_IID_ISkinButton DD 053fa8d40H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT
_CLSID_SkinObject DD 06cfc9ba2H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT
_CLSID_COMScript DD 04f7ae601H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT
_CLSID_ComMorph DD 0322982e1H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT
_CLSID_ComMoveSize DD 083c2d7a1H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT
_DIID__ISkinButtonEvents DD 053fa8d42H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT
_CLSID_SkinButton DD 053fa8d41H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT
_IID_ISkinPanel DD 053fa8d46H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT
_DIID__ISkinPanelEvents DD 053fa8d48H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT
_IID_ISkinLabel DD 053fa8d49H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT
_CLSID_SkinPanel DD 053fa8d47H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT
_DIID__ISkinLabelEvents DD 053fa8d4bH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT
_IID_ISkinScrollBar DD 053fa8d4cH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT
_CLSID_SkinLabel DD 053fa8d4aH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT
_DIID__ISkinScrollBarEvents DD 053fa8d4eH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT
_CLSID_SkinScrollBar DD 053fa8d4dH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT
_DIID__ISkinSourceEvents DD 037deb788H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT
_IID_ISkinStorage DD 0ee11629bH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT
_IID_ISkinPopup DD 0ca478da0H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT
_IID_IComTransitions DD 03c01387aH
	DW	06ac2H
	DW	04ef1H
	DB	0bdH
	DB	0a2H
	DB	0ecH
	DB	05dH
	DB	026H
	DB	0e3H
	DB	0b0H
	DB	065H
CONST	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT
_IID_ISkinEvent DD 055dd814eH
	DW	0a1b7H
	DW	04808H
	DB	096H
	DB	025H
	DB	04fH
	DB	075H
	DB	0a3H
	DB	0faH
	DB	0d8H
	DB	0a7H
CONST	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT
_IID_IComProcTextures DD 0dce47f78H
	DW	08a6cH
	DW	04c6dH
	DB	0a6H
	DB	0f7H
	DB	08bH
	DB	0e4H
	DB	042H
	DB	071H
	DB	027H
	DB	0c4H
CONST	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT
_IID_IComFilters DD 0920ff31fH
	DW	0ca25H
	DW	0451aH
	DB	097H
	DB	038H
	DB	034H
	DB	044H
	DB	0fcH
	DB	020H
	DB	06bH
	DB	0ccH
CONST	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT
_CLSID_SkinSource DD 053fa8d44H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT
_CLSID_SkinStorage DD 0ee11629cH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT
_CLSID_SkinPopup DD 0ca478da1H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT
_CLSID_ComTransitions DD 03c6d21d6H
	DW	07470H
	DW	04555H
	DB	0a8H
	DB	0fbH
	DB	06cH
	DB	022H
	DB	092H
	DB	0b3H
	DB	09cH
	DB	046H
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT
_CLSID_SkinEvent DD 08f59c2a4H
	DW	04c01H
	DW	04451H
	DB	0beH
	DB	05bH
	DB	09H
	DB	078H
	DB	07bH
	DB	012H
	DB	03aH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT
_CLSID_ComProcTextures DD 0bf1b5d50H
	DW	03c5cH
	DW	048ceH
	DB	0b9H
	DB	091H
	DB	0eH
	DB	086H
	DB	0d2H
	DB	06fH
	DB	06fH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT
_CLSID_ComFilters DD 0c4d7e3c7H
	DW	03c26H
	DW	04052H
	DB	0a9H
	DB	093H
	DB	071H
	DB	0e5H
	DB	00H
	DB	0eaH
	DB	08cH
	DB	05H
CONST	ENDS
CRT$XCU	SEGMENT
_$S455	DD	FLAT:_$E454
CRT$XCU	ENDS
_DATA	SEGMENT
_insertMode DW	01H
_clearEditLine DW 01H
_DATA	ENDS
_TEXT	SEGMENT
_$E454	PROC NEAR
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 _$E451
  00008	e8 00 00 00 00	 call	 _$E453
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E454	ENDP
_TEXT	ENDS
PUBLIC	??0SOL_List@@QAE@XZ				; SOL_List::SOL_List
_TEXT	SEGMENT
_$E451	PROC NEAR

; 87   : SOL_List gDialogList;

  0000f	55		 push	 ebp
  00010	8b ec		 mov	 ebp, esp
  00012	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?gDialogList@@3VSOL_List@@A
  00017	e8 00 00 00 00	 call	 ??0SOL_List@@QAE@XZ	; SOL_List::SOL_List
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_$E451	ENDP
_TEXT	ENDS
EXTRN	_atexit:NEAR
_TEXT	SEGMENT
_$E453	PROC NEAR
  0001e	55		 push	 ebp
  0001f	8b ec		 mov	 ebp, esp
  00021	68 00 00 00 00	 push	 OFFSET FLAT:_$E452
  00026	e8 00 00 00 00	 call	 _atexit
  0002b	83 c4 04	 add	 esp, 4
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_$E453	ENDP
_TEXT	ENDS
PUBLIC	??1SOL_List@@QAE@XZ				; SOL_List::~SOL_List
_TEXT	SEGMENT
_$E452	PROC NEAR
  00030	55		 push	 ebp
  00031	8b ec		 mov	 ebp, esp
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?gDialogList@@3VSOL_List@@A
  00038	e8 00 00 00 00	 call	 ??1SOL_List@@QAE@XZ	; SOL_List::~SOL_List
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_$E452	ENDP
_TEXT	ENDS
PUBLIC	??1Array@@QAE@XZ				; Array::~Array
;	COMDAT ??1SOL_List@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1SOL_List@@QAE@XZ PROC NEAR				; SOL_List::~SOL_List, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1SOL_List@@QAE@XZ ENDP				; SOL_List::~SOL_List
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
PUBLIC	?GetProperty@ObjectID@@QBEFG@Z			; ObjectID::GetProperty
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
PUBLIC	?KCreateTextBitmap@@YAXPAF@Z			; KCreateTextBitmap
PUBLIC	??0Bitmap@@QAE@HHH@Z				; Bitmap::Bitmap
PUBLIC	??0SOL_Rect@@QAE@XZ				; SOL_Rect::SOL_Rect
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
EXTRN	?BuildFBM@FontMgr@@QAE?AVMemID@@AAVBitmap@@AAVSOL_Rect@@V2@HHHHHH@Z:NEAR ; FontMgr::BuildFBM
EXTRN	?BuildFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHHHH@Z:NEAR ; FontMgr::BuildFBM
EXTRN	?fontMgr@@3PAVFontMgr@@A:DWORD			; fontMgr
_TEXT	SEGMENT
_args$ = 8
_rect$ = -16
_DText$ = -20
_bitmap$166425 = -40
$T173972 = -48
$T173973 = -52
$T173975 = -60
?KCreateTextBitmap@@YAXPAF@Z PROC NEAR			; KCreateTextBitmap

; 97   : {

  0003f	55		 push	 ebp
  00040	8b ec		 mov	 ebp, esp
  00042	83 ec 40	 sub	 esp, 64			; 00000040H

; 98   : 	// Create a bitmap containing text
; 99   : 	// Input
; 100  : 	// 	arg1-----function code
; 101  :    //       FBMWithBitmap ----- Background is a bitmap
; 102  : 	// 	      arg2-----DText instance
; 103  :    //          
; 104  :    //       FBMWithoutBitmap -- Background is a solid color
; 105  : 	// 	      arg2-----Width of bitmap
; 106  : 	// 	      arg3-----Height of bitmap
; 107  : 	// 	      arg4-----DText instance
; 108  :    //
; 109  :    // Output
; 110  :    //    Acc contains the MemID for the bitmap
; 111  :    //
; 112  : 
; 113  :    enum FunctionCode
; 114  :       {
; 115  :       FBMWithoutBitmap,
; 116  :       FBMWithBitmap
; 117  :       };
; 118  : 
; 119  :    SOL_Rect rect;

  00045	8d 4d f0	 lea	 ecx, DWORD PTR _rect$[ebp]
  00048	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 120  : 	ObjectID DText = arg(4);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00050	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  00054	51		 push	 ecx
  00055	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00058	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 121  : 
; 122  :    switch (arg(1)) {

  0005d	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  00060	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  00064	89 45 c0	 mov	 DWORD PTR -64+[ebp], eax
  00067	83 7d c0 00	 cmp	 DWORD PTR -64+[ebp], 0
  0006b	74 0f		 je	 SHORT $L166420
  0006d	83 7d c0 01	 cmp	 DWORD PTR -64+[ebp], 1
  00071	0f 84 f5 00 00
	00		 je	 $L166423
  00077	e9 09 02 00 00	 jmp	 $L166417
$L166420:

; 123  :       case FBMWithoutBitmap:
; 124  : 			rect.A.x = DText.GetProperty(s_textLeft);

  0007c	6a 76		 push	 118			; 00000076H
  0007e	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00081	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00086	0f bf c8	 movsx	 ecx, ax
  00089	89 4d f0	 mov	 DWORD PTR _rect$[ebp], ecx

; 125  : 			rect.A.y = DText.GetProperty(s_textTop);

  0008c	6a 77		 push	 119			; 00000077H
  0008e	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00091	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00096	0f bf d0	 movsx	 edx, ax
  00099	89 55 f4	 mov	 DWORD PTR _rect$[ebp+4], edx

; 126  : 			rect.B.x = DText.GetProperty(s_textRight);

  0009c	6a 78		 push	 120			; 00000078H
  0009e	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  000a1	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  000a6	0f bf c0	 movsx	 eax, ax
  000a9	89 45 f8	 mov	 DWORD PTR _rect$[ebp+8], eax

; 127  : 			rect.B.y = DText.GetProperty(s_textBottom);

  000ac	6a 79		 push	 121			; 00000079H
  000ae	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  000b1	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  000b6	0f bf c8	 movsx	 ecx, ax
  000b9	89 4d fc	 mov	 DWORD PTR _rect$[ebp+12], ecx

; 128  : 
; 129  :          pm.acc = fontMgr->BuildFBM
; 130  :             (arg(2),                                      //Width
; 131  :              arg(3),                                      //Height
; 132  :              rect,
; 133  : 				 DText.GetProperty(s_text),
; 134  : 				 DText.GetProperty(s_fore),
; 135  : 				 DText.GetProperty(s_back),
; 136  : 				 DText.GetProperty(s_skip),
; 137  : 				 DText.GetProperty(s_font),
; 138  : 				 DText.GetProperty(s_mode),
; 139  : 				 DText.GetProperty(s_borderColor),
; 140  : 				 DText.GetProperty(s_dimmed));

  000bc	6a 01		 push	 1
  000be	6a 7e		 push	 126			; 0000007eH
  000c0	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  000c3	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  000c8	0f bf d0	 movsx	 edx, ax
  000cb	52		 push	 edx
  000cc	6a 7a		 push	 122			; 0000007aH
  000ce	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  000d1	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  000d6	0f bf c0	 movsx	 eax, ax
  000d9	50		 push	 eax
  000da	6a 27		 push	 39			; 00000027H
  000dc	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  000df	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  000e4	0f bf c8	 movsx	 ecx, ax
  000e7	51		 push	 ecx
  000e8	6a 2a		 push	 42			; 0000002aH
  000ea	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  000ed	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  000f2	0f bf d0	 movsx	 edx, ax
  000f5	52		 push	 edx
  000f6	6a 72		 push	 114			; 00000072H
  000f8	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  000fb	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00100	0f bf c0	 movsx	 eax, ax
  00103	50		 push	 eax
  00104	6a 26		 push	 38			; 00000026H
  00106	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00109	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0010e	0f bf c8	 movsx	 ecx, ax
  00111	51		 push	 ecx
  00112	6a 25		 push	 37			; 00000025H
  00114	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00117	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0011c	0f bf d0	 movsx	 edx, ax
  0011f	52		 push	 edx
  00120	6a 23		 push	 35			; 00000023H
  00122	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00125	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0012a	51		 push	 ecx
  0012b	8b cc		 mov	 ecx, esp
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00133	8d 45 f0	 lea	 eax, DWORD PTR _rect$[ebp]
  00136	50		 push	 eax
  00137	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0013a	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  0013e	52		 push	 edx
  0013f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  00142	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00146	51		 push	 ecx
  00147	8d 55 d0	 lea	 edx, DWORD PTR $T173972[ebp]
  0014a	52		 push	 edx
  0014b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fontMgr@@3PAVFontMgr@@A ; fontMgr
  00151	e8 00 00 00 00	 call	 ?BuildFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHHHH@Z ; FontMgr::BuildFBM
  00156	8b c8		 mov	 ecx, eax
  00158	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0015d	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00162	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 141  :          break;

  00167	e9 19 01 00 00	 jmp	 $L166417
$L166423:

; 142  :       case FBMWithBitmap:
; 143  :          // Build bitmap
; 144  : 	      DText = arg(2);

  0016c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0016f	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00173	51		 push	 ecx
  00174	8d 4d cc	 lea	 ecx, DWORD PTR $T173973[ebp]
  00177	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0017c	66 8b 55 cc	 mov	 dx, WORD PTR $T173973[ebp]
  00180	66 89 55 ec	 mov	 WORD PTR _DText$[ebp], dx

; 145  : 
; 146  : 			rect.A.x = DText.GetProperty(s_textLeft);

  00184	6a 76		 push	 118			; 00000076H
  00186	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00189	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0018e	0f bf c0	 movsx	 eax, ax
  00191	89 45 f0	 mov	 DWORD PTR _rect$[ebp], eax

; 147  : 			rect.A.y = DText.GetProperty(s_textTop);

  00194	6a 77		 push	 119			; 00000077H
  00196	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00199	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0019e	0f bf c8	 movsx	 ecx, ax
  001a1	89 4d f4	 mov	 DWORD PTR _rect$[ebp+4], ecx

; 148  : 			rect.B.x = DText.GetProperty(s_textRight);

  001a4	6a 78		 push	 120			; 00000078H
  001a6	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  001a9	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  001ae	0f bf d0	 movsx	 edx, ax
  001b1	89 55 f8	 mov	 DWORD PTR _rect$[ebp+8], edx

; 149  : 			rect.B.y = DText.GetProperty(s_textBottom);

  001b4	6a 79		 push	 121			; 00000079H
  001b6	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  001b9	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  001be	0f bf c0	 movsx	 eax, ax
  001c1	89 45 fc	 mov	 DWORD PTR _rect$[ebp+12], eax

; 150  : 
; 151  : 			Bitmap bitmap(DText.GetProperty(s_view),
; 152  : 							  DText.GetProperty(s_loop),
; 153  : 							  DText.GetProperty(s_cel));

  001c4	6a 10		 push	 16			; 00000010H
  001c6	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  001c9	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  001ce	0f bf c8	 movsx	 ecx, ax
  001d1	51		 push	 ecx
  001d2	6a 0f		 push	 15			; 0000000fH
  001d4	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  001d7	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  001dc	0f bf d0	 movsx	 edx, ax
  001df	52		 push	 edx
  001e0	6a 0e		 push	 14			; 0000000eH
  001e2	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  001e5	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  001ea	0f bf c0	 movsx	 eax, ax
  001ed	50		 push	 eax
  001ee	8d 4d d8	 lea	 ecx, DWORD PTR _bitmap$166425[ebp]
  001f1	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@HHH@Z	; Bitmap::Bitmap

; 154  :          pm.acc = fontMgr->BuildFBM
; 155  : 				(bitmap,
; 156  : 				 rect,
; 157  : 				 DText.GetProperty(s_text),
; 158  : 				 DText.GetProperty(s_fore),
; 159  : 				 DText.GetProperty(s_back),
; 160  : 				 DText.GetProperty(s_font),
; 161  : 				 DText.GetProperty(s_skip),
; 162  : 				 DText.GetProperty(s_borderColor),
; 163  : 				 DText.GetProperty(s_dimmed));

  001f6	6a 7e		 push	 126			; 0000007eH
  001f8	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  001fb	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00200	0f bf c8	 movsx	 ecx, ax
  00203	51		 push	 ecx
  00204	6a 7a		 push	 122			; 0000007aH
  00206	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00209	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0020e	0f bf d0	 movsx	 edx, ax
  00211	52		 push	 edx
  00212	6a 72		 push	 114			; 00000072H
  00214	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00217	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0021c	0f bf c0	 movsx	 eax, ax
  0021f	50		 push	 eax
  00220	6a 2a		 push	 42			; 0000002aH
  00222	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00225	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0022a	0f bf c8	 movsx	 ecx, ax
  0022d	51		 push	 ecx
  0022e	6a 26		 push	 38			; 00000026H
  00230	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00233	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00238	0f bf d0	 movsx	 edx, ax
  0023b	52		 push	 edx
  0023c	6a 25		 push	 37			; 00000025H
  0023e	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  00241	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00246	0f bf c0	 movsx	 eax, ax
  00249	50		 push	 eax
  0024a	6a 23		 push	 35			; 00000023H
  0024c	8d 4d ec	 lea	 ecx, DWORD PTR _DText$[ebp]
  0024f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00254	51		 push	 ecx
  00255	8b cc		 mov	 ecx, esp
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0025d	8d 4d f0	 lea	 ecx, DWORD PTR _rect$[ebp]
  00260	51		 push	 ecx
  00261	8d 55 d8	 lea	 edx, DWORD PTR _bitmap$166425[ebp]
  00264	52		 push	 edx
  00265	8d 45 c4	 lea	 eax, DWORD PTR $T173975[ebp]
  00268	50		 push	 eax
  00269	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fontMgr@@3PAVFontMgr@@A ; fontMgr
  0026f	e8 00 00 00 00	 call	 ?BuildFBM@FontMgr@@QAE?AVMemID@@AAVBitmap@@AAVSOL_Rect@@V2@HHHHHH@Z ; FontMgr::BuildFBM
  00274	8b c8		 mov	 ecx, eax
  00276	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0027b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00280	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax
$L166417:

; 166  : }

  00285	8b e5		 mov	 esp, ebp
  00287	5d		 pop	 ebp
  00288	c3		 ret	 0
?KCreateTextBitmap@@YAXPAF@Z ENDP			; KCreateTextBitmap
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@HH@Z				; SOL_Point::SOL_Point
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
PUBLIC	??0ObjectID@@QAE@XZ				; ObjectID::ObjectID
PUBLIC	??0ObjectID@@QAE@ABVMemID@@@Z			; ObjectID::ObjectID
PUBLIC	??0ObjectID@@QAE@ABV0@@Z			; ObjectID::ObjectID
PUBLIC	?IsObject@ObjectID@@QBEHXZ			; ObjectID::IsObject
PUBLIC	?RespondsTo@ObjectID@@QBEHG@Z			; ObjectID::RespondsTo
PUBLIC	??7MemID@@QBEHXZ				; MemID::operator!
PUBLIC	??0FontMgr@@QAE@G@Z				; FontMgr::FontMgr
PUBLIC	?PointSize@FontMgr@@QAEHH@Z			; FontMgr::PointSize
PUBLIC	?GetXRes@FontMgr@@QBEHXZ			; FontMgr::GetXRes
PUBLIC	?GetYRes@FontMgr@@QBEHXZ			; FontMgr::GetYRes
PUBLIC	??0SOL_Rect@@QAE@HHHH@Z				; SOL_Rect::SOL_Rect
PUBLIC	??DTextID@@QAEPADXZ				; TextID::operator*
PUBLIC	??0TextID@@QAE@ABV0@@Z				; TextID::TextID
PUBLIC	?Offset@SOL_Rect@@QAEXHH@Z			; SOL_Rect::Offset
PUBLIC	??4SOL_Rect@@QAEAAV0@ABV0@@Z			; SOL_Rect::operator=
PUBLIC	??0EditClass@@QAE@F@Z				; EditClass::EditClass
PUBLIC	?DrawCursor@EditClass@@QAEXXZ			; EditClass::DrawCursor
PUBLIC	?GetLineIndices@EditClass@@UAEXXZ		; EditClass::GetLineIndices
PUBLIC	?SetCursor@EditClass@@QAEXH@Z			; EditClass::SetCursor
PUBLIC	??_7EditClass@@6B@				; EditClass::`vftable'
PUBLIC	??_GEditClass@@UAEPAXI@Z			; EditClass::`scalar deleting destructor'
PUBLIC	??_EEditClass@@UAEPAXI@Z			; EditClass::`vector deleting destructor'
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	_strlen:NEAR
EXTRN	?Realloc@MemID@@QBEPAXI@Z:NEAR			; MemID::Realloc
EXTRN	?CharWidth@FontMgr@@QAEEEH@Z:NEAR		; FontMgr::CharWidth
EXTRN	?SetFont@FontMgr@@QAEXH@Z:NEAR			; FontMgr::SetFont
EXTRN	??0TextID@@QAE@XZ:NEAR				; TextID::TextID
EXTRN	??0TextID@@QAE@G@Z:NEAR				; TextID::TextID
EXTRN	?Add@TextID@@QAEXV1@@Z:NEAR			; TextID::Add
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT ??_7EditClass@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\Dialog.cpp
CONST	SEGMENT
??_7EditClass@@6B@ DD FLAT:??_EEditClass@@UAEPAXI@Z	; EditClass::`vftable'
	DD	FLAT:?GetLineIndices@EditClass@@UAEXXZ
CONST	ENDS
xdata$x	SEGMENT
$T174001 DD	019930520H
	DD	01H
	DD	FLAT:$T174004
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T174004 DD	0ffffffffH
	DD	FLAT:$L173997
xdata$x	ENDS
_TEXT	SEGMENT
_id$ = 8
_this$ = -136
_EditItem$ = -24
_textHeight$ = -36
_textWidth$ = -28
_planeWidth$ = -20
_planeHeight$ = -32
_point$ = -60
_thisWinID$ = -64
_insetRect$ = -52
_strLen$ = -16
$T173977 = -68
$T173978 = -72
$T173979 = -76
$T173980 = -80
$T173981 = -84
$T173982 = -88
$T173983 = -92
$T173984 = -96
$T173985 = -100
$T173986 = -104
$T173993 = -120
$T173994 = -124
$T173995 = -128
$T173996 = -132
__$EHRec$ = -12
??0EditClass@@QAE@F@Z PROC NEAR				; EditClass::EditClass

; 894  : {

  00289	55		 push	 ebp
  0028a	8b ec		 mov	 ebp, esp
  0028c	6a ff		 push	 -1
  0028e	68 00 00 00 00	 push	 $L174002
  00293	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00299	50		 push	 eax
  0029a	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  002a1	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  002a7	56		 push	 esi
  002a8	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  002ae	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002b4	83 c1 04	 add	 ecx, 4
  002b7	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  002bc	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002c2	83 c1 0c	 add	 ecx, 12			; 0000000cH
  002c5	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  002ca	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002d0	83 c1 10	 add	 ecx, 16			; 00000010H
  002d3	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  002d8	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002de	83 c1 32	 add	 ecx, 50			; 00000032H
  002e1	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  002e6	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002ec	83 c1 3c	 add	 ecx, 60			; 0000003cH
  002ef	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  002f4	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002fa	83 c1 64	 add	 ecx, 100		; 00000064H
  002fd	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  00302	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00308	83 c1 66	 add	 ecx, 102		; 00000066H
  0030b	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  00310	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00316	83 c1 68	 add	 ecx, 104		; 00000068H
  00319	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  0031e	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00324	83 c1 78	 add	 ecx, 120		; 00000078H
  00327	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  0032c	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00332	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7EditClass@@6B@ ; EditClass::`vftable'

; 895  : 	visible = False;

  00338	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0

; 896  : 	changed = False;

  00345	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0034b	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 897  : 
; 898  : 	ObjectID    EditItem = (ObjectID) id;

  00352	66 8b 45 08	 mov	 ax, WORD PTR _id$[ebp]
  00356	50		 push	 eax
  00357	8d 4d bc	 lea	 ecx, DWORD PTR $T173977[ebp]
  0035a	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0035f	50		 push	 eax
  00360	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  00363	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID

; 899  : 
; 900  : 	lineIndicesID = 0;

  00368	6a 00		 push	 0
  0036a	8d 4d b8	 lea	 ecx, DWORD PTR $T173978[ebp]
  0036d	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00372	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00378	66 8b 55 b8	 mov	 dx, WORD PTR $T173978[ebp]
  0037c	66 89 51 32	 mov	 WORD PTR [ecx+50], dx

; 901  : 
; 902  :    // Make a copy of the text
; 903  : 	textID = EditItem.GetProperty(s_text);

  00380	6a 23		 push	 35			; 00000023H
  00382	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  00385	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0038a	50		 push	 eax
  0038b	8d 4d b4	 lea	 ecx, DWORD PTR $T173979[ebp]
  0038e	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00393	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00399	66 8b 4d b4	 mov	 cx, WORD PTR $T173979[ebp]
  0039d	66 89 48 66	 mov	 WORD PTR [eax+102], cx

; 904  : 	if (((ObjectID) textID).IsObject())

  003a1	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  003a7	83 c2 66	 add	 edx, 102		; 00000066H
  003aa	52		 push	 edx
  003ab	8d 4d b0	 lea	 ecx, DWORD PTR $T173980[ebp]
  003ae	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  003b3	8b c8		 mov	 ecx, eax
  003b5	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  003ba	85 c0		 test	 eax, eax
  003bc	74 32		 je	 SHORT $L166439

; 905  : 		textID = ((ObjectID) textID).GetProperty(s_data);

  003be	6a 71		 push	 113			; 00000071H
  003c0	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  003c6	83 c0 66	 add	 eax, 102		; 00000066H
  003c9	50		 push	 eax
  003ca	8d 4d a8	 lea	 ecx, DWORD PTR $T173982[ebp]
  003cd	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  003d2	8b c8		 mov	 ecx, eax
  003d4	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  003d9	50		 push	 eax
  003da	8d 4d ac	 lea	 ecx, DWORD PTR $T173981[ebp]
  003dd	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  003e2	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  003e8	66 8b 55 ac	 mov	 dx, WORD PTR $T173981[ebp]
  003ec	66 89 51 66	 mov	 WORD PTR [ecx+102], dx
$L166439:

; 906  : 
; 907  : 	editTextID.Add ( textID );

  003f0	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  003f6	83 c0 66	 add	 eax, 102		; 00000066H
  003f9	51		 push	 ecx
  003fa	8b cc		 mov	 ecx, esp
  003fc	89 65 a4	 mov	 DWORD PTR $T173983[ebp], esp
  003ff	50		 push	 eax
  00400	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  00405	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0040b	83 c1 64	 add	 ecx, 100		; 00000064H
  0040e	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXV1@@Z	; TextID::Add

; 908  : 
; 909  : 	text = editTextID;

  00413	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00419	66 8b 51 64	 mov	 dx, WORD PTR [ecx+100]
  0041d	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00423	66 89 50 0c	 mov	 WORD PTR [eax+12], dx

; 910  : 	fore = EditItem.GetProperty(s_fore);

  00427	6a 25		 push	 37			; 00000025H
  00429	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  0042c	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00431	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00437	66 89 41 28	 mov	 WORD PTR [ecx+40], ax

; 911  : 	back = EditItem.GetProperty(s_back);

  0043b	6a 26		 push	 38			; 00000026H
  0043d	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  00440	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00445	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0044b	66 89 42 2a	 mov	 WORD PTR [edx+42], ax

; 912  : 	skip = EditItem.GetProperty(s_skip);

  0044f	6a 72		 push	 114			; 00000072H
  00451	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  00454	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00459	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0045f	66 89 41 2e	 mov	 WORD PTR [ecx+46], ax

; 913  : 	font = EditItem.GetProperty(s_font);

  00463	6a 2a		 push	 42			; 0000002aH
  00465	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  00468	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  0046d	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00473	66 89 42 30	 mov	 WORD PTR [edx+48], ax

; 914  : 	BM   = EditItem.GetProperty(s_bitmap);

  00477	6a 11		 push	 17			; 00000011H
  00479	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  0047c	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00481	50		 push	 eax
  00482	8d 4d a0	 lea	 ecx, DWORD PTR $T173984[ebp]
  00485	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0048a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00490	66 8b 4d a0	 mov	 cx, WORD PTR $T173984[ebp]
  00494	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 915  : 	borderColor = EditItem.GetProperty(s_borderColor);

  00498	6a 7a		 push	 122			; 0000007aH
  0049a	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  0049d	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  004a2	0f bf d0	 movsx	 edx, ax
  004a5	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  004ab	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 916  : 
; 917  : 	// Get a font manager for this edit item
; 918  : 	fntMgr = New FontMgr(font); 

  004ae	68 58 02 00 00	 push	 600			; 00000258H
  004b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  004b8	83 c4 04	 add	 esp, 4
  004bb	89 45 98	 mov	 DWORD PTR $T173986[ebp], eax
  004be	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  004c5	83 7d 98 00	 cmp	 DWORD PTR $T173986[ebp], 0
  004c9	74 1b		 je	 SHORT $L173987
  004cb	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  004d1	66 8b 51 30	 mov	 dx, WORD PTR [ecx+48]
  004d5	52		 push	 edx
  004d6	8b 4d 98	 mov	 ecx, DWORD PTR $T173986[ebp]
  004d9	e8 00 00 00 00	 call	 ??0FontMgr@@QAE@G@Z	; FontMgr::FontMgr
  004de	89 85 74 ff ff
	ff		 mov	 DWORD PTR -140+[ebp], eax
  004e4	eb 0a		 jmp	 SHORT $L173988
$L173987:
  004e6	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR -140+[ebp], 0
$L173988:
  004f0	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR -140+[ebp]
  004f6	89 45 9c	 mov	 DWORD PTR $T173985[ebp], eax
  004f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00500	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00506	8b 55 9c	 mov	 edx, DWORD PTR $T173985[ebp]
  00509	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx

; 919  : 
; 920  :    // Calculate the dimensions for the BM and the textbox
; 921  : 	fntMgr->SetFont(font);   

  0050f	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00515	33 c9		 xor	 ecx, ecx
  00517	66 8b 48 30	 mov	 cx, WORD PTR [eax+48]
  0051b	51		 push	 ecx
  0051c	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00522	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  00528	e8 00 00 00 00	 call	 ?SetFont@FontMgr@@QAEXH@Z ; FontMgr::SetFont

; 922  : 
; 923  : 	maxChars  		= EditItem.RespondsTo(s_max)?EditItem.GetProperty(s_max):0;

  0052d	6a 2e		 push	 46			; 0000002eH
  0052f	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  00532	e8 00 00 00 00	 call	 ?RespondsTo@ObjectID@@QBEHG@Z ; ObjectID::RespondsTo
  00537	85 c0		 test	 eax, eax
  00539	74 15		 je	 SHORT $L173989
  0053b	6a 2e		 push	 46			; 0000002eH
  0053d	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  00540	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00545	0f bf c0	 movsx	 eax, ax
  00548	89 85 70 ff ff
	ff		 mov	 DWORD PTR -144+[ebp], eax
  0054e	eb 0a		 jmp	 SHORT $L173990
$L173989:
  00550	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR -144+[ebp], 0
$L173990:
  0055a	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00560	66 8b 95 70 ff
	ff ff		 mov	 dx, WORD PTR -144+[ebp]
  00567	66 89 51 50	 mov	 WORD PTR [ecx+80], dx

; 924  : 	maxHeight 		= EditItem.RespondsTo(s_numLines)?EditItem.GetProperty(s_numLines):1;

  0056b	68 8b 00 00 00	 push	 139			; 0000008bH
  00570	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  00573	e8 00 00 00 00	 call	 ?RespondsTo@ObjectID@@QBEHG@Z ; ObjectID::RespondsTo
  00578	85 c0		 test	 eax, eax
  0057a	74 18		 je	 SHORT $L173991
  0057c	68 8b 00 00 00	 push	 139			; 0000008bH
  00581	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  00584	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00589	0f bf c0	 movsx	 eax, ax
  0058c	89 85 6c ff ff
	ff		 mov	 DWORD PTR -148+[ebp], eax
  00592	eb 0a		 jmp	 SHORT $L173992
$L173991:
  00594	c7 85 6c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR -148+[ebp], 1
$L173992:
  0059e	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  005a4	66 8b 95 6c ff
	ff ff		 mov	 dx, WORD PTR -148+[ebp]
  005ab	66 89 51 4e	 mov	 WORD PTR [ecx+78], dx

; 925  : 	maxCharWidth  	= (EditItem.GetProperty(s_right)  - EditItem.GetProperty(s_left)) / fntMgr->CharWidth('M',False);

  005af	68 88 00 00 00	 push	 136			; 00000088H
  005b4	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  005b7	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  005bc	0f bf f0	 movsx	 esi, ax
  005bf	68 87 00 00 00	 push	 135			; 00000087H
  005c4	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  005c7	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  005cc	0f bf c0	 movsx	 eax, ax
  005cf	2b f0		 sub	 esi, eax
  005d1	6a 00		 push	 0
  005d3	6a 4d		 push	 77			; 0000004dH
  005d5	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  005db	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  005e1	e8 00 00 00 00	 call	 ?CharWidth@FontMgr@@QAEEEH@Z ; FontMgr::CharWidth
  005e6	8a c8		 mov	 cl, al
  005e8	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  005ee	8b c6		 mov	 eax, esi
  005f0	99		 cdq
  005f1	f7 f9		 idiv	 ecx
  005f3	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  005f9	66 89 42 4c	 mov	 WORD PTR [edx+76], ax

; 926  : 	if (!maxHeight) 

  005fd	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00603	33 c9		 xor	 ecx, ecx
  00605	66 8b 48 4e	 mov	 cx, WORD PTR [eax+78]
  00609	85 c9		 test	 ecx, ecx
  0060b	75 0c		 jne	 SHORT $L166449

; 927  : 		maxHeight = 1;

  0060d	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00613	66 c7 42 4e 01
	00		 mov	 WORD PTR [edx+78], 1
$L166449:

; 928  : 	if (!maxCharWidth)

  00619	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0061f	33 c9		 xor	 ecx, ecx
  00621	66 8b 48 4c	 mov	 cx, WORD PTR [eax+76]
  00625	85 c9		 test	 ecx, ecx
  00627	75 27		 jne	 SHORT $L166450

; 929  : 		maxCharWidth= maxChars / maxHeight;

  00629	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0062f	33 c0		 xor	 eax, eax
  00631	66 8b 42 50	 mov	 ax, WORD PTR [edx+80]
  00635	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0063b	33 d2		 xor	 edx, edx
  0063d	66 8b 51 4e	 mov	 dx, WORD PTR [ecx+78]
  00641	8b ca		 mov	 ecx, edx
  00643	99		 cdq
  00644	f7 f9		 idiv	 ecx
  00646	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0064c	66 89 42 4c	 mov	 WORD PTR [edx+76], ax
$L166450:

; 930  : 	if (!maxChars)

  00650	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00656	33 c9		 xor	 ecx, ecx
  00658	66 8b 48 50	 mov	 cx, WORD PTR [eax+80]
  0065c	85 c9		 test	 ecx, ecx
  0065e	75 25		 jne	 SHORT $L166451

; 931  : 		maxChars = maxHeight * maxCharWidth;

  00660	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00666	33 c0		 xor	 eax, eax
  00668	66 8b 42 4e	 mov	 ax, WORD PTR [edx+78]
  0066c	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00672	33 d2		 xor	 edx, edx
  00674	66 8b 51 4c	 mov	 dx, WORD PTR [ecx+76]
  00678	0f af c2	 imul	 eax, edx
  0067b	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00681	66 89 41 50	 mov	 WORD PTR [ecx+80], ax
$L166451:

; 932  : 
; 933  : 	// get resolution from base fontMgr, not local one
; 934  : 	xRes = fntMgr->GetXRes();

  00685	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0068b	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  00691	e8 00 00 00 00	 call	 ?GetXRes@FontMgr@@QBEHXZ ; FontMgr::GetXRes
  00696	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0069c	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 935  : 	yRes = fntMgr->GetYRes();

  0069f	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  006a5	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  006ab	e8 00 00 00 00	 call	 ?GetYRes@FontMgr@@QBEHXZ ; FontMgr::GetYRes
  006b0	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006b6	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 936  : 
; 937  : 	// Make sure the strings can handle maxChars
; 938  : 	editTextID.Realloc(maxChars+1);

  006b9	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  006bf	33 c0		 xor	 eax, eax
  006c1	66 8b 42 50	 mov	 ax, WORD PTR [edx+80]
  006c5	83 c0 01	 add	 eax, 1
  006c8	50		 push	 eax
  006c9	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006cf	83 c1 64	 add	 ecx, 100		; 00000064H
  006d2	e8 00 00 00 00	 call	 ?Realloc@MemID@@QBEPAXI@Z ; MemID::Realloc

; 939  : 	textID.Realloc(maxChars+1);

  006d7	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006dd	33 d2		 xor	 edx, edx
  006df	66 8b 51 50	 mov	 dx, WORD PTR [ecx+80]
  006e3	83 c2 01	 add	 edx, 1
  006e6	52		 push	 edx
  006e7	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006ed	83 c1 66	 add	 ecx, 102		; 00000066H
  006f0	e8 00 00 00 00	 call	 ?Realloc@MemID@@QBEPAXI@Z ; MemID::Realloc

; 940  : 
; 941  : 	// The textHeight is just the pointSize + 1 for the cursor
; 942  : 	int textHeight = fntMgr->PointSize(False) * maxHeight + 1;

  006f5	6a 00		 push	 0
  006f7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  006fd	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00703	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  00708	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0070e	33 d2		 xor	 edx, edx
  00710	66 8b 51 4e	 mov	 dx, WORD PTR [ecx+78]
  00714	0f af c2	 imul	 eax, edx
  00717	83 c0 01	 add	 eax, 1
  0071a	89 45 dc	 mov	 DWORD PTR _textHeight$[ebp], eax

; 943  : 	textHeight = (textHeight * SCIRESX + xRes - 1) / xRes;

  0071d	8b 45 dc	 mov	 eax, DWORD PTR _textHeight$[ebp]
  00720	69 c0 80 02 00
	00		 imul	 eax, 640		; 00000280H
  00726	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0072c	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0072f	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  00733	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00739	99		 cdq
  0073a	f7 79 5c	 idiv	 DWORD PTR [ecx+92]
  0073d	89 45 dc	 mov	 DWORD PTR _textHeight$[ebp], eax

; 944  : 
; 945  : 	// Assume the character 'M' is the widest character
; 946  : 	int textWidth = maxCharWidth * fntMgr->CharWidth('M',False) + 1;

  00740	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00746	33 c0		 xor	 eax, eax
  00748	66 8b 42 4c	 mov	 ax, WORD PTR [edx+76]
  0074c	8b f0		 mov	 esi, eax
  0074e	6a 00		 push	 0
  00750	6a 4d		 push	 77			; 0000004dH
  00752	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00758	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  0075e	e8 00 00 00 00	 call	 ?CharWidth@FontMgr@@QAEEEH@Z ; FontMgr::CharWidth
  00763	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00768	0f af f0	 imul	 esi, eax
  0076b	83 c6 01	 add	 esi, 1
  0076e	89 75 e4	 mov	 DWORD PTR _textWidth$[ebp], esi

; 947  : 	textWidth = (textWidth * SCIRESY + yRes - 1) / yRes;

  00771	8b 55 e4	 mov	 edx, DWORD PTR _textWidth$[ebp]
  00774	69 d2 e0 01 00
	00		 imul	 edx, 480		; 000001e0H
  0077a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00780	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00783	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  00787	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0078d	99		 cdq
  0078e	f7 79 60	 idiv	 DWORD PTR [ecx+96]
  00791	89 45 e4	 mov	 DWORD PTR _textWidth$[ebp], eax

; 948  : 
; 949  : 	// always do this because otherwise cursor has problems when hits edge
; 950  : //   if (borderColor != -1) {
; 951  : 		textWidth += 4;

  00794	8b 55 e4	 mov	 edx, DWORD PTR _textWidth$[ebp]
  00797	83 c2 04	 add	 edx, 4
  0079a	89 55 e4	 mov	 DWORD PTR _textWidth$[ebp], edx

; 952  : 		textHeight += 2;

  0079d	8b 45 dc	 mov	 eax, DWORD PTR _textHeight$[ebp]
  007a0	83 c0 02	 add	 eax, 2
  007a3	89 45 dc	 mov	 DWORD PTR _textHeight$[ebp], eax

; 953  : //	}
; 954  : 
; 955  : 
; 956  :    // planes are in Low res coordinates
; 957  : 	int planeWidth  = textWidth;

  007a6	8b 4d e4	 mov	 ecx, DWORD PTR _textWidth$[ebp]
  007a9	89 4d ec	 mov	 DWORD PTR _planeWidth$[ebp], ecx

; 958  : 	int planeHeight = textHeight;

  007ac	8b 55 dc	 mov	 edx, DWORD PTR _textHeight$[ebp]
  007af	89 55 e0	 mov	 DWORD PTR _planeHeight$[ebp], edx

; 959  : 
; 960  : 	window = SOL_Rect(0,0,planeWidth-1,planeHeight-1);

  007b2	8b 45 e0	 mov	 eax, DWORD PTR _planeHeight$[ebp]
  007b5	83 e8 01	 sub	 eax, 1
  007b8	50		 push	 eax
  007b9	8b 4d ec	 mov	 ecx, DWORD PTR _planeWidth$[ebp]
  007bc	83 e9 01	 sub	 ecx, 1
  007bf	51		 push	 ecx
  007c0	6a 00		 push	 0
  007c2	6a 00		 push	 0
  007c4	8d 4d 88	 lea	 ecx, DWORD PTR $T173993[ebp]
  007c7	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  007cc	50		 push	 eax
  007cd	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  007d3	83 c1 78	 add	 ecx, 120		; 00000078H
  007d6	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 961  : 	window.Offset(EditItem.GetProperty(s_x),EditItem.GetProperty(s_y));

  007db	6a 02		 push	 2
  007dd	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  007e0	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  007e5	0f bf d0	 movsx	 edx, ax
  007e8	52		 push	 edx
  007e9	6a 01		 push	 1
  007eb	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  007ee	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  007f3	0f bf c0	 movsx	 eax, ax
  007f6	50		 push	 eax
  007f7	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  007fd	83 c1 78	 add	 ecx, 120		; 00000078H
  00800	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 962  :    SOL_Point point(0,0);

  00805	6a 00		 push	 0
  00807	6a 00		 push	 0
  00809	8d 4d c4	 lea	 ecx, DWORD PTR _point$[ebp]
  0080c	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 963  : 
; 964  : 	ObjectID thisWinID;

  00811	8d 4d c0	 lea	 ecx, DWORD PTR _thisWinID$[ebp]
  00814	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@XZ	; ObjectID::ObjectID

; 965  : 	if (thisWinID = EditItem.GetProperty(s_plane)) {

  00819	6a 00		 push	 0
  0081b	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  0081e	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00823	50		 push	 eax
  00824	8d 4d 84	 lea	 ecx, DWORD PTR $T173994[ebp]
  00827	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0082c	66 8b 4d 84	 mov	 cx, WORD PTR $T173994[ebp]
  00830	66 89 4d c0	 mov	 WORD PTR _thisWinID$[ebp], cx
  00834	8d 4d c0	 lea	 ecx, DWORD PTR _thisWinID$[ebp]
  00837	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0083c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00841	85 c0		 test	 eax, eax
  00843	74 26		 je	 SHORT $L166460

; 966  : 		point.x = thisWinID.GetProperty(s_left);

  00845	68 87 00 00 00	 push	 135			; 00000087H
  0084a	8d 4d c0	 lea	 ecx, DWORD PTR _thisWinID$[ebp]
  0084d	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00852	0f bf d0	 movsx	 edx, ax
  00855	89 55 c4	 mov	 DWORD PTR _point$[ebp], edx

; 967  : 		point.y = thisWinID.GetProperty(s_top);

  00858	68 89 00 00 00	 push	 137			; 00000089H
  0085d	8d 4d c0	 lea	 ecx, DWORD PTR _thisWinID$[ebp]
  00860	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00865	0f bf c0	 movsx	 eax, ax
  00868	89 45 c8	 mov	 DWORD PTR _point$[ebp+4], eax
$L166460:

; 969  : //	LocalGameToGlobal(EditItem.GetProperty(s_planeID),point);
; 970  : 
; 971  : 	window.Offset(point.x,point.y);

  0086b	8b 4d c8	 mov	 ecx, DWORD PTR _point$[ebp+4]
  0086e	51		 push	 ecx
  0086f	8b 55 c4	 mov	 edx, DWORD PTR _point$[ebp]
  00872	52		 push	 edx
  00873	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00879	83 c1 78	 add	 ecx, 120		; 00000078H
  0087c	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 972  : 
; 973  : 	SOL_Rect insetRect(2, 2,textWidth-2,textHeight-2);

  00881	8b 45 dc	 mov	 eax, DWORD PTR _textHeight$[ebp]
  00884	83 e8 02	 sub	 eax, 2
  00887	50		 push	 eax
  00888	8b 4d e4	 mov	 ecx, DWORD PTR _textWidth$[ebp]
  0088b	83 e9 02	 sub	 ecx, 2
  0088e	51		 push	 ecx
  0088f	6a 02		 push	 2
  00891	6a 02		 push	 2
  00893	8d 4d cc	 lea	 ecx, DWORD PTR _insetRect$[ebp]
  00896	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 974  : 	textBox = insetRect;		

  0089b	8d 55 cc	 lea	 edx, DWORD PTR _insetRect$[ebp]
  0089e	52		 push	 edx
  0089f	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  008a5	83 c1 10	 add	 ecx, 16			; 00000010H
  008a8	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 975  : 	BMWidth = textWidth;

  008ad	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  008b3	8b 4d e4	 mov	 ecx, DWORD PTR _textWidth$[ebp]
  008b6	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 976  : 
; 977  :    // If there is already a bitmap then assume it's still valid.
; 978  : 	// See if a bit map has been built
; 979  :    if (!BM) {

  008b9	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  008bf	83 c1 04	 add	 ecx, 4
  008c2	e8 00 00 00 00	 call	 ??7MemID@@QBEHXZ	; MemID::operator!
  008c7	85 c0		 test	 eax, eax
  008c9	0f 84 a2 00 00
	00		 je	 $L166462

; 980  : 		// build a bitmap
; 981  : 		BM = fntMgr->BuildFBM
; 982  : 								(
; 983  :                         planeWidth,
; 984  : 								planeHeight,
; 985  :                         insetRect,
; 986  : 								text,
; 987  : 								fore,
; 988  : 								back,
; 989  : 								skip,
; 990  : 								font,
; 991  : 								EditItem.GetProperty(s_mode),
; 992  :                         borderColor,
; 993  : 								EditItem.GetProperty(s_dimmed)
; 994  : 								);

  008cf	6a 01		 push	 1
  008d1	6a 7e		 push	 126			; 0000007eH
  008d3	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  008d6	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  008db	0f bf d0	 movsx	 edx, ax
  008de	52		 push	 edx
  008df	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  008e5	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  008e8	51		 push	 ecx
  008e9	6a 27		 push	 39			; 00000027H
  008eb	8d 4d e8	 lea	 ecx, DWORD PTR _EditItem$[ebp]
  008ee	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  008f3	0f bf d0	 movsx	 edx, ax
  008f6	52		 push	 edx
  008f7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  008fd	33 c9		 xor	 ecx, ecx
  008ff	66 8b 48 30	 mov	 cx, WORD PTR [eax+48]
  00903	51		 push	 ecx
  00904	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0090a	33 c0		 xor	 eax, eax
  0090c	66 8b 42 2e	 mov	 ax, WORD PTR [edx+46]
  00910	50		 push	 eax
  00911	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00917	33 d2		 xor	 edx, edx
  00919	66 8b 51 2a	 mov	 dx, WORD PTR [ecx+42]
  0091d	52		 push	 edx
  0091e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00924	33 c9		 xor	 ecx, ecx
  00926	66 8b 48 28	 mov	 cx, WORD PTR [eax+40]
  0092a	51		 push	 ecx
  0092b	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00931	83 c2 0c	 add	 edx, 12			; 0000000cH
  00934	51		 push	 ecx
  00935	8b cc		 mov	 ecx, esp
  00937	89 65 80	 mov	 DWORD PTR $T173995[ebp], esp
  0093a	52		 push	 edx
  0093b	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00940	8d 45 cc	 lea	 eax, DWORD PTR _insetRect$[ebp]
  00943	50		 push	 eax
  00944	8b 4d e0	 mov	 ecx, DWORD PTR _planeHeight$[ebp]
  00947	51		 push	 ecx
  00948	8b 55 ec	 mov	 edx, DWORD PTR _planeWidth$[ebp]
  0094b	52		 push	 edx
  0094c	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T173996[ebp]
  00952	50		 push	 eax
  00953	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00959	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  0095f	e8 00 00 00 00	 call	 ?BuildFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHHHH@Z ; FontMgr::BuildFBM
  00964	66 8b 10	 mov	 dx, WORD PTR [eax]
  00967	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0096d	66 89 50 04	 mov	 WORD PTR [eax+4], dx
$L166462:

; 996  : 
; 997  : 	// Put the cursor in
; 998  : 	GetLineIndices();

  00971	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00977	e8 00 00 00 00	 call	 ?GetLineIndices@EditClass@@UAEXXZ ; EditClass::GetLineIndices

; 999  : 
; 1000 : 	int strLen = strlen ( *editTextID );

  0097c	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00982	83 c1 64	 add	 ecx, 100		; 00000064H
  00985	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  0098a	50		 push	 eax
  0098b	e8 00 00 00 00	 call	 _strlen
  00990	83 c4 04	 add	 esp, 4
  00993	89 45 f0	 mov	 DWORD PTR _strLen$[ebp], eax

; 1001 : 	SetCursor ( strLen );

  00996	8b 4d f0	 mov	 ecx, DWORD PTR _strLen$[ebp]
  00999	51		 push	 ecx
  0099a	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  009a0	e8 00 00 00 00	 call	 ?SetCursor@EditClass@@QAEXH@Z ; EditClass::SetCursor

; 1002 : 
; 1003 : 	cursorOn = 0;

  009a5	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  009ab	66 c7 42 3a 00
	00		 mov	 WORD PTR [edx+58], 0

; 1004 : 	DrawCursor();

  009b1	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  009b7	e8 00 00 00 00	 call	 ?DrawCursor@EditClass@@QAEXXZ ; EditClass::DrawCursor

; 1005 : }

  009bc	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  009c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  009c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  009cc	5e		 pop	 esi
  009cd	8b e5		 mov	 esp, ebp
  009cf	5d		 pop	 ebp
  009d0	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L173997:
  00000	8b 45 98	 mov	 eax, DWORD PTR $T173986[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L174002:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T174001
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0EditClass@@QAE@F@Z ENDP				; EditClass::EditClass
PUBLIC	??1EditClass@@UAE@XZ				; EditClass::~EditClass
;	COMDAT ??_GEditClass@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GEditClass@@UAEPAXI@Z PROC NEAR			; EditClass::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1EditClass@@UAE@XZ	; EditClass::~EditClass
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L166469
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L166469:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GEditClass@@UAEPAXI@Z ENDP				; EditClass::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Xlen@SOL_Rect@@QBEHXZ				; SOL_Rect::Xlen
PUBLIC	?Ylen@SOL_Rect@@QBEHXZ				; SOL_Rect::Ylen
PUBLIC	??0EditClass@@QAE@VTextID@@0HH@Z		; EditClass::EditClass
EXTRN	?Realloc@MemoryMgr@@QAEXGI@Z:NEAR		; MemoryMgr::Realloc
EXTRN	_memMgr:DWORD
EXTRN	?systemFont@@3GA:WORD				; systemFont
EXTRN	?TitledFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHH1HHHH@Z:NEAR ; FontMgr::TitledFBM
EXTRN	?Fatal@MsgMgr@@QAAXDPADH0ZZ:NEAR		; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
$SG166480 DB	'illegal parameters to editclass', 00H
$SG166481 DB	'C:\Documents and Settings\don\Desktop\sciw\Interp\Dialog'
	DB	'.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T174022 DD	019930520H
	DD	01H
	DD	FLAT:$T174024
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T174024 DD	0ffffffffH
	DD	FLAT:$L174020
xdata$x	ENDS
_TEXT	SEGMENT
_theTextID$ = 8
_theTitleID$ = 12
_boxWidth$ = 16
_boxHeight$ = 20
_this$ = -116
_titleHeight$ = -28
_titleWidth$ = -24
_textHeight$ = -44
_textWidth$ = -36
_planeWidth$ = -32
_planeHeight$ = -40
_xOff$ = -16
_yOff$ = -20
_insetRect$ = -60
$T174008 = -64
$T174009 = -68
$T174010 = -72
$T174011 = -76
$T174014 = -92
$T174015 = -96
$T174016 = -100
$T174017 = -104
$T174018 = -108
$T174019 = -112
__$EHRec$ = -12
??0EditClass@@QAE@VTextID@@0HH@Z PROC NEAR		; EditClass::EditClass

; 1009 : {

  009d3	55		 push	 ebp
  009d4	8b ec		 mov	 ebp, esp
  009d6	6a ff		 push	 -1
  009d8	68 00 00 00 00	 push	 $L174023
  009dd	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  009e3	50		 push	 eax
  009e4	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  009eb	83 ec 6c	 sub	 esp, 108		; 0000006cH
  009ee	56		 push	 esi
  009ef	89 4d 8c	 mov	 DWORD PTR _this$[ebp], ecx
  009f2	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  009f5	83 c1 04	 add	 ecx, 4
  009f8	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  009fd	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00a00	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00a03	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00a08	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00a0b	83 c1 10	 add	 ecx, 16			; 00000010H
  00a0e	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00a13	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00a16	83 c1 32	 add	 ecx, 50			; 00000032H
  00a19	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00a1e	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00a21	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00a24	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00a29	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00a2c	66 8b 4d 10	 mov	 cx, WORD PTR _boxWidth$[ebp]
  00a30	66 89 48 4c	 mov	 WORD PTR [eax+76], cx
  00a34	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00a37	66 8b 45 14	 mov	 ax, WORD PTR _boxHeight$[ebp]
  00a3b	66 89 42 4e	 mov	 WORD PTR [edx+78], ax
  00a3f	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00a42	83 c1 64	 add	 ecx, 100		; 00000064H
  00a45	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  00a4a	8d 4d 08	 lea	 ecx, DWORD PTR _theTextID$[ebp]
  00a4d	51		 push	 ecx
  00a4e	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00a51	83 c1 66	 add	 ecx, 102		; 00000066H
  00a54	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  00a59	8d 55 0c	 lea	 edx, DWORD PTR _theTitleID$[ebp]
  00a5c	52		 push	 edx
  00a5d	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00a60	83 c1 68	 add	 ecx, 104		; 00000068H
  00a63	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  00a68	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00a6b	83 c1 78	 add	 ecx, 120		; 00000078H
  00a6e	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00a73	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00a76	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7EditClass@@6B@ ; EditClass::`vftable'

; 1010 : 	// Gets input from a titled font box
; 1011 : 	// input
; 1012 : 	//		theText is the default input string
; 1013 : 	//		theTitle is the title string
; 1014 : 	//		boxWidth is the width of the input box	in characters
; 1015 : 
; 1016 : 	
; 1017 : 	visible = False;

  00a7c	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00a7f	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0

; 1018 : 	changed = False;

  00a86	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00a89	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 1019 : 	lineIndicesID = 0;

  00a90	6a 00		 push	 0
  00a92	8d 4d c0	 lea	 ecx, DWORD PTR $T174008[ebp]
  00a95	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00a9a	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00a9d	66 8b 4d c0	 mov	 cx, WORD PTR $T174008[ebp]
  00aa1	66 89 48 32	 mov	 WORD PTR [eax+50], cx

; 1020 : 
; 1021 : 	maxChars = maxCharWidth * maxHeight;

  00aa5	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00aa8	33 c0		 xor	 eax, eax
  00aaa	66 8b 42 4c	 mov	 ax, WORD PTR [edx+76]
  00aae	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00ab1	33 d2		 xor	 edx, edx
  00ab3	66 8b 51 4e	 mov	 dx, WORD PTR [ecx+78]
  00ab7	0f af c2	 imul	 eax, edx
  00aba	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00abd	66 89 41 50	 mov	 WORD PTR [ecx+80], ax

; 1022 : 
; 1023 : 	if (maxHeight <= 0 || maxCharWidth <= 0)

  00ac1	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00ac4	33 c0		 xor	 eax, eax
  00ac6	66 8b 42 4e	 mov	 ax, WORD PTR [edx+78]
  00aca	85 c0		 test	 eax, eax
  00acc	7e 0d		 jle	 SHORT $L166479
  00ace	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad1	33 d2		 xor	 edx, edx
  00ad3	66 8b 51 4c	 mov	 dx, WORD PTR [ecx+76]
  00ad7	85 d2		 test	 edx, edx
  00ad9	7f 1f		 jg	 SHORT $L166478
$L166479:

; 1024 : 		msgMgr->Fatal(SrcLoc,"illegal parameters to editclass");

  00adb	68 00 00 00 00	 push	 OFFSET FLAT:$SG166480
  00ae0	68 00 04 00 00	 push	 1024			; 00000400H
  00ae5	68 00 00 00 00	 push	 OFFSET FLAT:$SG166481
  00aea	6a 61		 push	 97			; 00000061H
  00aec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00af1	50		 push	 eax
  00af2	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  00af7	83 c4 14	 add	 esp, 20			; 00000014H
$L166478:

; 1025 : 
; 1026 : 	editTextID.Add(textID);

  00afa	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00afd	83 c1 66	 add	 ecx, 102		; 00000066H
  00b00	51		 push	 ecx
  00b01	8b d4		 mov	 edx, esp
  00b03	89 65 bc	 mov	 DWORD PTR $T174009[ebp], esp
  00b06	51		 push	 ecx
  00b07	8b ca		 mov	 ecx, edx
  00b09	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  00b0e	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00b11	83 c1 64	 add	 ecx, 100		; 00000064H
  00b14	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXV1@@Z	; TextID::Add

; 1027 : 
; 1028 : 	// Make sure the strings can handle maxCharWidth
; 1029 : 	memMgr->Realloc(editTextID, maxChars + 1);

  00b19	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00b1c	33 c9		 xor	 ecx, ecx
  00b1e	66 8b 48 50	 mov	 cx, WORD PTR [eax+80]
  00b22	83 c1 01	 add	 ecx, 1
  00b25	51		 push	 ecx
  00b26	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00b29	83 c1 64	 add	 ecx, 100		; 00000064H
  00b2c	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00b31	50		 push	 eax
  00b32	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00b38	e8 00 00 00 00	 call	 ?Realloc@MemoryMgr@@QAEXGI@Z ; MemoryMgr::Realloc

; 1030 : 	memMgr->Realloc(textID, maxChars + 1);

  00b3d	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00b40	33 c0		 xor	 eax, eax
  00b42	66 8b 42 50	 mov	 ax, WORD PTR [edx+80]
  00b46	83 c0 01	 add	 eax, 1
  00b49	50		 push	 eax
  00b4a	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00b4d	83 c1 66	 add	 ecx, 102		; 00000066H
  00b50	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00b55	50		 push	 eax
  00b56	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00b5c	e8 00 00 00 00	 call	 ?Realloc@MemoryMgr@@QAEXGI@Z ; MemoryMgr::Realloc

; 1031 : 
; 1032 : 	text = editTextID;

  00b61	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00b64	66 8b 51 64	 mov	 dx, WORD PTR [ecx+100]
  00b68	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00b6b	66 89 50 0c	 mov	 WORD PTR [eax+12], dx

; 1033 : 	fore = SOL_BLACK;			

  00b6f	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00b72	66 c7 41 28 00
	00		 mov	 WORD PTR [ecx+40], 0

; 1034 : 	back = SOL_WHITE;			

  00b78	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00b7b	66 c7 42 2a ff
	00		 mov	 WORD PTR [edx+42], 255	; 000000ffH

; 1035 : 	skip = SOL_SKIP;			

  00b81	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00b84	66 c7 40 2e fa
	00		 mov	 WORD PTR [eax+46], 250	; 000000faH

; 1036 : 	font = systemFont; 		

  00b8a	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00b8d	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ?systemFont@@3GA ; systemFont
  00b94	66 89 51 30	 mov	 WORD PTR [ecx+48], dx

; 1037 : //	maxWidth = boxWidth;
; 1038 : 	borderColor = SOL_BLACK;

  00b98	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00b9b	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 1039 : 	cursor = 0;			

  00ba2	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00ba5	66 c7 41 34 00
	00		 mov	 WORD PTR [ecx+52], 0

; 1040 : 	cursorOn = 0; 

  00bab	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00bae	66 c7 42 3a 00
	00		 mov	 WORD PTR [edx+58], 0

; 1041 : 
; 1042 : 	// Get a font manager for this edit item
; 1043 : 	fntMgr = New FontMgr(font); 

  00bb4	68 58 02 00 00	 push	 600			; 00000258H
  00bb9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00bbe	83 c4 04	 add	 esp, 4
  00bc1	89 45 b4	 mov	 DWORD PTR $T174011[ebp], eax
  00bc4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00bcb	83 7d b4 00	 cmp	 DWORD PTR $T174011[ebp], 0
  00bcf	74 15		 je	 SHORT $L174012
  00bd1	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00bd4	66 8b 48 30	 mov	 cx, WORD PTR [eax+48]
  00bd8	51		 push	 ecx
  00bd9	8b 4d b4	 mov	 ecx, DWORD PTR $T174011[ebp]
  00bdc	e8 00 00 00 00	 call	 ??0FontMgr@@QAE@G@Z	; FontMgr::FontMgr
  00be1	89 45 88	 mov	 DWORD PTR -120+[ebp], eax
  00be4	eb 07		 jmp	 SHORT $L174013
$L174012:
  00be6	c7 45 88 00 00
	00 00		 mov	 DWORD PTR -120+[ebp], 0
$L174013:
  00bed	8b 55 88	 mov	 edx, DWORD PTR -120+[ebp]
  00bf0	89 55 b8	 mov	 DWORD PTR $T174010[ebp], edx
  00bf3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00bfa	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00bfd	8b 4d b8	 mov	 ecx, DWORD PTR $T174010[ebp]
  00c00	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 1044 : 
; 1045 : 	// set the font to calculate height and width for the BM
; 1046 : 	fntMgr->SetFont(font);

  00c06	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00c09	33 c0		 xor	 eax, eax
  00c0b	66 8b 42 30	 mov	 ax, WORD PTR [edx+48]
  00c0f	50		 push	 eax
  00c10	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00c13	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  00c19	e8 00 00 00 00	 call	 ?SetFont@FontMgr@@QAEXH@Z ; FontMgr::SetFont

; 1047 : 
; 1048 : 	// get resolution from base fontMgr, not local one
; 1049 : 	xRes = fntMgr->GetXRes();

  00c1e	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00c21	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  00c27	e8 00 00 00 00	 call	 ?GetXRes@FontMgr@@QBEHXZ ; FontMgr::GetXRes
  00c2c	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00c2f	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1050 :    yRes = fntMgr->GetYRes();

  00c32	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00c35	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  00c3b	e8 00 00 00 00	 call	 ?GetYRes@FontMgr@@QBEHXZ ; FontMgr::GetYRes
  00c40	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00c43	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 1051 : 		
; 1052 : 	int titleHeight = 0;

  00c46	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _titleHeight$[ebp], 0

; 1053 : 	int titleWidth  = 0;

  00c4d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _titleWidth$[ebp], 0

; 1054 : 	// Calculate height for the title
; 1055 : 	if ((int) title) {    

  00c54	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00c57	83 c1 68	 add	 ecx, 104		; 00000068H
  00c5a	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00c5f	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00c64	85 c0		 test	 eax, eax
  00c66	74 45		 je	 SHORT $L166491

; 1056 :       titleHeight = fntMgr->PointSize(False) + 1;

  00c68	6a 00		 push	 0
  00c6a	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00c6d	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  00c73	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  00c78	83 c0 01	 add	 eax, 1
  00c7b	89 45 e4	 mov	 DWORD PTR _titleHeight$[ebp], eax

; 1057 : 		titleHeight = (titleHeight * SCIRESY + yRes - 1) / yRes;

  00c7e	8b 45 e4	 mov	 eax, DWORD PTR _titleHeight$[ebp]
  00c81	69 c0 e0 01 00
	00		 imul	 eax, 480		; 000001e0H
  00c87	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00c8a	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00c8d	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  00c91	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00c94	99		 cdq
  00c95	f7 79 60	 idiv	 DWORD PTR [ecx+96]
  00c98	89 45 e4	 mov	 DWORD PTR _titleHeight$[ebp], eax

; 1058 :       if (borderColor != -1) titleHeight += 2;

  00c9b	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00c9e	83 7a 20 ff	 cmp	 DWORD PTR [edx+32], -1
  00ca2	74 09		 je	 SHORT $L166491
  00ca4	8b 45 e4	 mov	 eax, DWORD PTR _titleHeight$[ebp]
  00ca7	83 c0 02	 add	 eax, 2
  00caa	89 45 e4	 mov	 DWORD PTR _titleHeight$[ebp], eax
$L166491:

; 1060 : 
; 1061 : 	// The textHeight is just the pointSize + 1 for the cursor
; 1062 : 	int textHeight = fntMgr->PointSize(False) * maxHeight + 1;

  00cad	6a 00		 push	 0
  00caf	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00cb2	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  00cb8	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  00cbd	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00cc0	33 c9		 xor	 ecx, ecx
  00cc2	66 8b 4a 4e	 mov	 cx, WORD PTR [edx+78]
  00cc6	0f af c1	 imul	 eax, ecx
  00cc9	83 c0 01	 add	 eax, 1
  00ccc	89 45 d4	 mov	 DWORD PTR _textHeight$[ebp], eax

; 1063 : 	textHeight = (textHeight * SCIRESX + xRes - 1) / xRes;

  00ccf	8b 55 d4	 mov	 edx, DWORD PTR _textHeight$[ebp]
  00cd2	69 d2 80 02 00
	00		 imul	 edx, 640		; 00000280H
  00cd8	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00cdb	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00cde	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  00ce2	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00ce5	99		 cdq
  00ce6	f7 79 5c	 idiv	 DWORD PTR [ecx+92]
  00ce9	89 45 d4	 mov	 DWORD PTR _textHeight$[ebp], eax

; 1064 : 
; 1065 : 	// Assume the character 'M' is the widest character
; 1066 : 	int textWidth = maxCharWidth * fntMgr->CharWidth('M',False) + 1;  

  00cec	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00cef	33 c0		 xor	 eax, eax
  00cf1	66 8b 42 4c	 mov	 ax, WORD PTR [edx+76]
  00cf5	8b f0		 mov	 esi, eax
  00cf7	6a 00		 push	 0
  00cf9	6a 4d		 push	 77			; 0000004dH
  00cfb	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00cfe	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  00d04	e8 00 00 00 00	 call	 ?CharWidth@FontMgr@@QAEEEH@Z ; FontMgr::CharWidth
  00d09	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d0e	0f af f0	 imul	 esi, eax
  00d11	83 c6 01	 add	 esi, 1
  00d14	89 75 dc	 mov	 DWORD PTR _textWidth$[ebp], esi

; 1067 : 	textWidth = (textWidth * SCIRESY + yRes - 1) / yRes;

  00d17	8b 55 dc	 mov	 edx, DWORD PTR _textWidth$[ebp]
  00d1a	69 d2 e0 01 00
	00		 imul	 edx, 480		; 000001e0H
  00d20	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00d23	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00d26	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  00d2a	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00d2d	99		 cdq
  00d2e	f7 79 60	 idiv	 DWORD PTR [ecx+96]
  00d31	89 45 dc	 mov	 DWORD PTR _textWidth$[ebp], eax

; 1068 : 
; 1069 : //	if (textWidth < titleWidth) textWidth = titleWidth;
; 1070 :    if (borderColor != -1) {

  00d34	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00d37	83 7a 20 ff	 cmp	 DWORD PTR [edx+32], -1
  00d3b	74 12		 je	 SHORT $L166494

; 1071 : 		textWidth += 4;

  00d3d	8b 45 dc	 mov	 eax, DWORD PTR _textWidth$[ebp]
  00d40	83 c0 04	 add	 eax, 4
  00d43	89 45 dc	 mov	 DWORD PTR _textWidth$[ebp], eax

; 1072 : 		textHeight += 2;

  00d46	8b 4d d4	 mov	 ecx, DWORD PTR _textHeight$[ebp]
  00d49	83 c1 02	 add	 ecx, 2
  00d4c	89 4d d4	 mov	 DWORD PTR _textHeight$[ebp], ecx
$L166494:

; 1074 : 
; 1075 :    // planes are in Low res coordinates
; 1076 : 	int planeWidth = textWidth;

  00d4f	8b 55 dc	 mov	 edx, DWORD PTR _textWidth$[ebp]
  00d52	89 55 e0	 mov	 DWORD PTR _planeWidth$[ebp], edx

; 1077 : 	int planeHeight = textHeight + titleHeight;

  00d55	8b 45 d4	 mov	 eax, DWORD PTR _textHeight$[ebp]
  00d58	03 45 e4	 add	 eax, DWORD PTR _titleHeight$[ebp]
  00d5b	89 45 d8	 mov	 DWORD PTR _planeHeight$[ebp], eax

; 1078 : 
; 1079 : 	// This centers the window automatically
; 1080 : 	window = SOL_Rect(0,0,planeWidth-1,planeHeight-1);   

  00d5e	8b 4d d8	 mov	 ecx, DWORD PTR _planeHeight$[ebp]
  00d61	83 e9 01	 sub	 ecx, 1
  00d64	51		 push	 ecx
  00d65	8b 55 e0	 mov	 edx, DWORD PTR _planeWidth$[ebp]
  00d68	83 ea 01	 sub	 edx, 1
  00d6b	52		 push	 edx
  00d6c	6a 00		 push	 0
  00d6e	6a 00		 push	 0
  00d70	8d 4d a4	 lea	 ecx, DWORD PTR $T174014[ebp]
  00d73	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  00d78	50		 push	 eax
  00d79	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00d7c	83 c1 78	 add	 ecx, 120		; 00000078H
  00d7f	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 1081 : 	int xOff = (SCIRESX -window.Xlen())/2;

  00d84	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00d87	83 c1 78	 add	 ecx, 120		; 00000078H
  00d8a	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  00d8f	b9 80 02 00 00	 mov	 ecx, 640		; 00000280H
  00d94	2b c8		 sub	 ecx, eax
  00d96	8b c1		 mov	 eax, ecx
  00d98	99		 cdq
  00d99	2b c2		 sub	 eax, edx
  00d9b	d1 f8		 sar	 eax, 1
  00d9d	89 45 f0	 mov	 DWORD PTR _xOff$[ebp], eax

; 1082 : 	int yOff = (SCIRESY -window.Ylen())/2;

  00da0	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00da3	83 c1 78	 add	 ecx, 120		; 00000078H
  00da6	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  00dab	ba e0 01 00 00	 mov	 edx, 480		; 000001e0H
  00db0	2b d0		 sub	 edx, eax
  00db2	8b c2		 mov	 eax, edx
  00db4	99		 cdq
  00db5	2b c2		 sub	 eax, edx
  00db7	d1 f8		 sar	 eax, 1
  00db9	89 45 ec	 mov	 DWORD PTR _yOff$[ebp], eax

; 1083 : 	window.Offset(xOff,yOff);

  00dbc	8b 45 ec	 mov	 eax, DWORD PTR _yOff$[ebp]
  00dbf	50		 push	 eax
  00dc0	8b 4d f0	 mov	 ecx, DWORD PTR _xOff$[ebp]
  00dc3	51		 push	 ecx
  00dc4	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00dc7	83 c1 78	 add	 ecx, 120		; 00000078H
  00dca	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 1084 : 
; 1085 : 	SOL_Rect insetRect(2,titleHeight + 2,planeWidth-2,planeHeight-2);

  00dcf	8b 55 d8	 mov	 edx, DWORD PTR _planeHeight$[ebp]
  00dd2	83 ea 02	 sub	 edx, 2
  00dd5	52		 push	 edx
  00dd6	8b 45 e0	 mov	 eax, DWORD PTR _planeWidth$[ebp]
  00dd9	83 e8 02	 sub	 eax, 2
  00ddc	50		 push	 eax
  00ddd	8b 4d e4	 mov	 ecx, DWORD PTR _titleHeight$[ebp]
  00de0	83 c1 02	 add	 ecx, 2
  00de3	51		 push	 ecx
  00de4	6a 02		 push	 2
  00de6	8d 4d c4	 lea	 ecx, DWORD PTR _insetRect$[ebp]
  00de9	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 1086 : 	textBox = insetRect;		

  00dee	8d 55 c4	 lea	 edx, DWORD PTR _insetRect$[ebp]
  00df1	52		 push	 edx
  00df2	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00df5	83 c1 10	 add	 ecx, 16			; 00000010H
  00df8	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 1087 : 	BMWidth = textWidth;

  00dfd	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00e00	8b 4d dc	 mov	 ecx, DWORD PTR _textWidth$[ebp]
  00e03	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1088 : 
; 1089 :    if ((int) title) 

  00e06	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00e09	83 c1 68	 add	 ecx, 104		; 00000068H
  00e0c	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00e11	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00e16	85 c0		 test	 eax, eax
  00e18	74 75		 je	 SHORT $L166502

; 1091 : 								(
; 1092 : 								planeWidth,
; 1093 : 								planeHeight,
; 1094 : 								insetRect,
; 1095 : 								theTextID,
; 1096 : 								SOL_BLACK,
; 1097 : 								SOL_WHITE,
; 1098 : 	                  	SOL_SKIP,			
; 1099 : 								systemFont,
; 1100 : 								TEJUSTLEFT,
; 1101 :                      	SOL_BLACK,
; 1102 : 
; 1103 : 								theTitleID,
; 1104 : 								SOL_WHITE,
; 1105 : 								SOL_BLACK,
; 1106 : 								systemFont
; 1107 : 								);

  00e1a	6a 01		 push	 1
  00e1c	33 d2		 xor	 edx, edx
  00e1e	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ?systemFont@@3GA ; systemFont
  00e25	52		 push	 edx
  00e26	6a 00		 push	 0
  00e28	68 ff 00 00 00	 push	 255			; 000000ffH
  00e2d	51		 push	 ecx
  00e2e	8b cc		 mov	 ecx, esp
  00e30	89 65 a0	 mov	 DWORD PTR $T174015[ebp], esp
  00e33	8d 45 0c	 lea	 eax, DWORD PTR _theTitleID$[ebp]
  00e36	50		 push	 eax
  00e37	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00e3c	6a 00		 push	 0
  00e3e	6a 00		 push	 0
  00e40	33 c9		 xor	 ecx, ecx
  00e42	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?systemFont@@3GA ; systemFont
  00e49	51		 push	 ecx
  00e4a	68 fa 00 00 00	 push	 250			; 000000faH
  00e4f	68 ff 00 00 00	 push	 255			; 000000ffH
  00e54	6a 00		 push	 0
  00e56	51		 push	 ecx
  00e57	8b cc		 mov	 ecx, esp
  00e59	89 65 9c	 mov	 DWORD PTR $T174016[ebp], esp
  00e5c	8d 55 08	 lea	 edx, DWORD PTR _theTextID$[ebp]
  00e5f	52		 push	 edx
  00e60	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00e65	8d 45 c4	 lea	 eax, DWORD PTR _insetRect$[ebp]
  00e68	50		 push	 eax
  00e69	8b 4d d8	 mov	 ecx, DWORD PTR _planeHeight$[ebp]
  00e6c	51		 push	 ecx
  00e6d	8b 55 e0	 mov	 edx, DWORD PTR _planeWidth$[ebp]
  00e70	52		 push	 edx
  00e71	8d 45 98	 lea	 eax, DWORD PTR $T174017[ebp]
  00e74	50		 push	 eax
  00e75	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00e78	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  00e7e	e8 00 00 00 00	 call	 ?TitledFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHH1HHHH@Z ; FontMgr::TitledFBM
  00e83	66 8b 10	 mov	 dx, WORD PTR [eax]
  00e86	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00e89	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 1108 :    else

  00e8d	eb 55		 jmp	 SHORT $L166506
$L166502:

; 1109 : 		BM = fntMgr->BuildFBM
; 1110 : 								(
; 1111 :                         planeWidth,
; 1112 : 								planeHeight,
; 1113 :                         insetRect,
; 1114 : 								theTextID,
; 1115 : 							   SOL_BLACK,
; 1116 : 							   SOL_WHITE,
; 1117 : 	                     SOL_SKIP,			
; 1118 : 							   systemFont,
; 1119 : 							   TEJUSTLEFT,
; 1120 :                         SOL_BLACK,
; 1121 : 								False
; 1122 : 								);

  00e8f	6a 01		 push	 1
  00e91	6a 00		 push	 0
  00e93	6a 00		 push	 0
  00e95	6a 00		 push	 0
  00e97	33 c9		 xor	 ecx, ecx
  00e99	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?systemFont@@3GA ; systemFont
  00ea0	51		 push	 ecx
  00ea1	68 fa 00 00 00	 push	 250			; 000000faH
  00ea6	68 ff 00 00 00	 push	 255			; 000000ffH
  00eab	6a 00		 push	 0
  00ead	51		 push	 ecx
  00eae	8b cc		 mov	 ecx, esp
  00eb0	89 65 94	 mov	 DWORD PTR $T174018[ebp], esp
  00eb3	8d 55 08	 lea	 edx, DWORD PTR _theTextID$[ebp]
  00eb6	52		 push	 edx
  00eb7	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00ebc	8d 45 c4	 lea	 eax, DWORD PTR _insetRect$[ebp]
  00ebf	50		 push	 eax
  00ec0	8b 4d d8	 mov	 ecx, DWORD PTR _planeHeight$[ebp]
  00ec3	51		 push	 ecx
  00ec4	8b 55 e0	 mov	 edx, DWORD PTR _planeWidth$[ebp]
  00ec7	52		 push	 edx
  00ec8	8d 45 90	 lea	 eax, DWORD PTR $T174019[ebp]
  00ecb	50		 push	 eax
  00ecc	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00ecf	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  00ed5	e8 00 00 00 00	 call	 ?BuildFBM@FontMgr@@QAE?AVMemID@@HHAAVSOL_Rect@@V2@HHHHHHHH@Z ; FontMgr::BuildFBM
  00eda	66 8b 10	 mov	 dx, WORD PTR [eax]
  00edd	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00ee0	66 89 50 04	 mov	 WORD PTR [eax+4], dx
$L166506:

; 1123 : 
; 1124 : 	// Put the cursor in 
; 1125 : 	GetLineIndices();

  00ee4	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00ee7	e8 00 00 00 00	 call	 ?GetLineIndices@EditClass@@UAEXXZ ; EditClass::GetLineIndices

; 1126 : 
; 1127 : 	SetCursor(strlen(*editTextID));

  00eec	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00eef	83 c1 64	 add	 ecx, 100		; 00000064H
  00ef2	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00ef7	50		 push	 eax
  00ef8	e8 00 00 00 00	 call	 _strlen
  00efd	83 c4 04	 add	 esp, 4
  00f00	50		 push	 eax
  00f01	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00f04	e8 00 00 00 00	 call	 ?SetCursor@EditClass@@QAEXH@Z ; EditClass::SetCursor

; 1128 : 	DrawCursor();

  00f09	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00f0c	e8 00 00 00 00	 call	 ?DrawCursor@EditClass@@QAEXXZ ; EditClass::DrawCursor

; 1129 : }

  00f11	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00f14	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00f17	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00f1e	5e		 pop	 esi
  00f1f	8b e5		 mov	 esp, ebp
  00f21	5d		 pop	 ebp
  00f22	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L174020:
  00015	8b 45 b4	 mov	 eax, DWORD PTR $T174011[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
  0001f	c3		 ret	 0
$L174023:
  00020	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T174022
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0EditClass@@QAE@VTextID@@0HH@Z ENDP			; EditClass::EditClass
PUBLIC	?Free@MemID@@QAEXXZ				; MemID::Free
EXTRN	_strcpy:NEAR
_TEXT	SEGMENT
_this$ = -8
$T174026 = -4
??1EditClass@@UAE@XZ PROC NEAR				; EditClass::~EditClass

; 1133 : {    

  00f25	55		 push	 ebp
  00f26	8b ec		 mov	 ebp, esp
  00f28	83 ec 08	 sub	 esp, 8
  00f2b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00f2e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f31	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7EditClass@@6B@ ; EditClass::`vftable'

; 1134 : 	BM.Free();

  00f37	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f3a	83 c1 04	 add	 ecx, 4
  00f3d	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1135 : 
; 1136 :    if (changed) {

  00f42	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f45	83 79 6c 00	 cmp	 DWORD PTR [ecx+108], 0
  00f49	74 4f		 je	 SHORT $L166512

; 1137 : 	   memMgr->Realloc(textID,strlen(*editTextID)+1);

  00f4b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f4e	83 c1 64	 add	 ecx, 100		; 00000064H
  00f51	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00f56	50		 push	 eax
  00f57	e8 00 00 00 00	 call	 _strlen
  00f5c	83 c4 04	 add	 esp, 4
  00f5f	83 c0 01	 add	 eax, 1
  00f62	50		 push	 eax
  00f63	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f66	83 c1 66	 add	 ecx, 102		; 00000066H
  00f69	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00f6e	50		 push	 eax
  00f6f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00f75	e8 00 00 00 00	 call	 ?Realloc@MemoryMgr@@QAEXGI@Z ; MemoryMgr::Realloc

; 1138 : 	   strcpy(*textID,*editTextID);

  00f7a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f7d	83 c1 64	 add	 ecx, 100		; 00000064H
  00f80	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00f85	50		 push	 eax
  00f86	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f89	83 c1 66	 add	 ecx, 102		; 00000066H
  00f8c	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00f91	50		 push	 eax
  00f92	e8 00 00 00 00	 call	 _strcpy
  00f97	83 c4 08	 add	 esp, 8
$L166512:

; 1140 : 
; 1141 : 	editTextID.Free();

  00f9a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f9d	83 c1 64	 add	 ecx, 100		; 00000064H
  00fa0	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1142 : 
; 1143 : 	if ( lineIndicesID )

  00fa5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fa8	83 c1 32	 add	 ecx, 50			; 00000032H
  00fab	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00fb0	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00fb5	85 c0		 test	 eax, eax
  00fb7	74 0b		 je	 SHORT $L166513

; 1144 : 		lineIndicesID.Free();

  00fb9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00fbc	83 c1 32	 add	 ecx, 50			; 00000032H
  00fbf	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free
$L166513:

; 1145 : 
; 1146 : 	delete fntMgr;

  00fc4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00fc7	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00fcd	89 45 fc	 mov	 DWORD PTR $T174026[ebp], eax
  00fd0	8b 4d fc	 mov	 ecx, DWORD PTR $T174026[ebp]
  00fd3	51		 push	 ecx
  00fd4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00fd9	83 c4 04	 add	 esp, 4

; 1147 : } 

  00fdc	8b e5		 mov	 esp, ebp
  00fde	5d		 pop	 ebp
  00fdf	c3		 ret	 0
??1EditClass@@UAE@XZ ENDP				; EditClass::~EditClass
_TEXT	ENDS
PUBLIC	??0ScaleInfo@@QAE@XZ				; ScaleInfo::ScaleInfo
PUBLIC	?TopSCIPlane@GraphicsMgr@@QBEHXZ		; GraphicsMgr::TopSCIPlane
PUBLIC	?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z	; GraphicsMgr::AddPlane
PUBLIC	?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::AddScreenItem
PUBLIC	??0SOL_Point@@QAE@ABV0@@Z			; SOL_Point::SOL_Point
PUBLIC	?Id@SOL_Plane@@QBEJXZ				; SOL_Plane::Id
PUBLIC	??0Bitmap@@QAE@VMemID@@@Z			; Bitmap::Bitmap
PUBLIC	?SetPicNum@SOL_Plane@@QAEXH@Z			; SOL_Plane::SetPicNum
PUBLIC	?SetPriority@SOL_Plane@@QAEXH@Z			; SOL_Plane::SetPriority
PUBLIC	?Show@EditClass@@QAEXH@Z			; EditClass::Show
EXTRN	??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@@Z:NEAR ; ScreenItem::ScreenItem
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
EXTRN	??0SOL_Plane@@QAE@ABVSOL_Rect@@@Z:NEAR		; SOL_Plane::SOL_Plane
xdata$x	SEGMENT
$T174042 DD	019930520H
	DD	02H
	DD	FLAT:$T174044
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T174044 DD	0ffffffffH
	DD	FLAT:$L174039
	DD	0ffffffffH
	DD	FLAT:$L174040
xdata$x	ENDS
_TEXT	SEGMENT
_pri$ = 8
_this$ = -84
_pt$ = -36
_scaleInfo$ = -28
$T174028 = -40
$T174029 = -44
$T174032 = -48
$T174033 = -52
$T174034 = -56
$T174035 = -76
$T174036 = -80
__$EHRec$ = -12
?Show@EditClass@@QAEXH@Z PROC NEAR			; EditClass::Show

; 1151 : {    

  00fe0	55		 push	 ebp
  00fe1	8b ec		 mov	 ebp, esp
  00fe3	6a ff		 push	 -1
  00fe5	68 00 00 00 00	 push	 $L174043
  00fea	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00ff0	50		 push	 eax
  00ff1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00ff8	83 ec 50	 sub	 esp, 80			; 00000050H
  00ffb	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx

; 1152 : 	// Show the edit dialog
; 1153 :    // ********************
; 1154 : 	// Need a plane
; 1155 : 	if(visible)

  00ffe	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  01001	83 78 70 00	 cmp	 DWORD PTR [eax+112], 0
  01005	74 05		 je	 SHORT $L166519

; 1156 : 		return;

  01007	e9 6d 01 00 00	 jmp	 $L166518
$L166519:

; 1157 : 	visible = True;

  0100c	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  0100f	c7 41 70 01 00
	00 00		 mov	 DWORD PTR [ecx+112], 1

; 1158 :    if(pri < 0)

  01016	83 7d 08 00	 cmp	 DWORD PTR _pri$[ebp], 0
  0101a	7d 11		 jge	 SHORT $L166520

; 1159 : 		pri = graphMgr->TopSCIPlane() + 1;

  0101c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01022	e8 00 00 00 00	 call	 ?TopSCIPlane@GraphicsMgr@@QBEHXZ ; GraphicsMgr::TopSCIPlane
  01027	83 c0 01	 add	 eax, 1
  0102a	89 45 08	 mov	 DWORD PTR _pri$[ebp], eax
$L166520:

; 1160 : 	windowPlane = New SOL_Plane(window); //Plane windowPlane(window);

  0102d	68 c8 9c 00 00	 push	 40136			; 00009cc8H
  01032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01037	83 c4 04	 add	 esp, 4
  0103a	89 45 d4	 mov	 DWORD PTR $T174029[ebp], eax
  0103d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01044	83 7d d4 00	 cmp	 DWORD PTR $T174029[ebp], 0
  01048	74 14		 je	 SHORT $L174030
  0104a	8b 55 ac	 mov	 edx, DWORD PTR _this$[ebp]
  0104d	83 c2 78	 add	 edx, 120		; 00000078H
  01050	52		 push	 edx
  01051	8b 4d d4	 mov	 ecx, DWORD PTR $T174029[ebp]
  01054	e8 00 00 00 00	 call	 ??0SOL_Plane@@QAE@ABVSOL_Rect@@@Z ; SOL_Plane::SOL_Plane
  01059	89 45 a8	 mov	 DWORD PTR -88+[ebp], eax
  0105c	eb 07		 jmp	 SHORT $L174031
$L174030:
  0105e	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR -88+[ebp], 0
$L174031:
  01065	8b 45 a8	 mov	 eax, DWORD PTR -88+[ebp]
  01068	89 45 d8	 mov	 DWORD PTR $T174028[ebp], eax
  0106b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01072	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  01075	8b 55 d8	 mov	 edx, DWORD PTR $T174028[ebp]
  01078	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 1161 : 	windowPlane->SetPriority(pri);

  0107e	8b 45 08	 mov	 eax, DWORD PTR _pri$[ebp]
  01081	50		 push	 eax
  01082	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  01085	8b 89 8c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+140]
  0108b	e8 00 00 00 00	 call	 ?SetPriority@SOL_Plane@@QAEXH@Z ; SOL_Plane::SetPriority

; 1162 : 	// force no plane background drawing
; 1163 : 	windowPlane->SetPicNum(-2); 

  01090	6a fe		 push	 -2			; fffffffeH
  01092	8b 55 ac	 mov	 edx, DWORD PTR _this$[ebp]
  01095	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  0109b	e8 00 00 00 00	 call	 ?SetPicNum@SOL_Plane@@QAEXH@Z ; SOL_Plane::SetPicNum

; 1164 : 	graphMgr->AddPlane(windowPlane);

  010a0	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  010a3	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  010a9	51		 push	 ecx
  010aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  010b0	e8 00 00 00 00	 call	 ?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::AddPlane

; 1165 : 
; 1166 :    // Need a screen item
; 1167 : 	SOL_Point pt(0,0);

  010b5	6a 00		 push	 0
  010b7	6a 00		 push	 0
  010b9	8d 4d dc	 lea	 ecx, DWORD PTR _pt$[ebp]
  010bc	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@HH@Z	; SOL_Point::SOL_Point

; 1168 : 	ScaleInfo scaleInfo;

  010c1	8d 4d e4	 lea	 ecx, DWORD PTR _scaleInfo$[ebp]
  010c4	e8 00 00 00 00	 call	 ??0ScaleInfo@@QAE@XZ	; ScaleInfo::ScaleInfo

; 1169 : 	si = New ScreenItem(windowPlane->Id(),(Bitmap) BM,pt,scaleInfo);

  010c9	68 98 00 00 00	 push	 152			; 00000098H
  010ce	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  010d3	83 c4 04	 add	 esp, 4
  010d6	89 45 cc	 mov	 DWORD PTR $T174033[ebp], eax
  010d9	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  010e0	83 7d cc 00	 cmp	 DWORD PTR $T174033[ebp], 0
  010e4	74 64		 je	 SHORT $L174037
  010e6	83 ec 10	 sub	 esp, 16			; 00000010H
  010e9	8b d4		 mov	 edx, esp
  010eb	8b 45 e4	 mov	 eax, DWORD PTR _scaleInfo$[ebp]
  010ee	89 02		 mov	 DWORD PTR [edx], eax
  010f0	8b 4d e8	 mov	 ecx, DWORD PTR _scaleInfo$[ebp+4]
  010f3	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  010f6	8b 45 ec	 mov	 eax, DWORD PTR _scaleInfo$[ebp+8]
  010f9	89 42 08	 mov	 DWORD PTR [edx+8], eax
  010fc	8b 4d f0	 mov	 ecx, DWORD PTR _scaleInfo$[ebp+12]
  010ff	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  01102	83 ec 08	 sub	 esp, 8
  01105	8b cc		 mov	 ecx, esp
  01107	89 65 c8	 mov	 DWORD PTR $T174034[ebp], esp
  0110a	8d 55 dc	 lea	 edx, DWORD PTR _pt$[ebp]
  0110d	52		 push	 edx
  0110e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01113	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  01116	83 c0 04	 add	 eax, 4
  01119	51		 push	 ecx
  0111a	8b cc		 mov	 ecx, esp
  0111c	89 65 b0	 mov	 DWORD PTR $T174036[ebp], esp
  0111f	50		 push	 eax
  01120	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01125	8d 4d b4	 lea	 ecx, DWORD PTR $T174035[ebp]
  01128	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@VMemID@@@Z ; Bitmap::Bitmap
  0112d	50		 push	 eax
  0112e	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  01131	8b 89 8c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+140]
  01137	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id
  0113c	50		 push	 eax
  0113d	8b 4d cc	 mov	 ecx, DWORD PTR $T174033[ebp]
  01140	e8 00 00 00 00	 call	 ??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@@Z ; ScreenItem::ScreenItem
  01145	89 45 a4	 mov	 DWORD PTR -92+[ebp], eax
  01148	eb 07		 jmp	 SHORT $L174038
$L174037:
  0114a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR -92+[ebp], 0
$L174038:
  01151	8b 55 a4	 mov	 edx, DWORD PTR -92+[ebp]
  01154	89 55 d0	 mov	 DWORD PTR $T174032[ebp], edx
  01157	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0115e	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  01161	8b 4d d0	 mov	 ecx, DWORD PTR $T174032[ebp]
  01164	89 48 74	 mov	 DWORD PTR [eax+116], ecx

; 1170 : 
; 1171 : 	graphMgr->AddScreenItem(si);

  01167	8b 55 ac	 mov	 edx, DWORD PTR _this$[ebp]
  0116a	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0116d	50		 push	 eax
  0116e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01174	e8 00 00 00 00	 call	 ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::AddScreenItem
$L166518:

; 1172 : //	graphMgr->FrameOut(False);
; 1173 : }

  01179	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0117c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01183	8b e5		 mov	 esp, ebp
  01185	5d		 pop	 ebp
  01186	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L174039:
  0002a	8b 45 d4	 mov	 eax, DWORD PTR $T174029[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	59		 pop	 ecx
  00034	c3		 ret	 0
$L174040:
  00035	8b 45 cc	 mov	 eax, DWORD PTR $T174033[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	59		 pop	 ecx
  0003f	c3		 ret	 0
$L174043:
  00040	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T174042
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Show@EditClass@@QAEXH@Z ENDP				; EditClass::Show
PUBLIC	??0SOL_Rect@@QAE@ABV0@@Z			; SOL_Rect::SOL_Rect
PUBLIC	?Hide@EditClass@@QAEXH@Z			; EditClass::Hide
EXTRN	?DeleteScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@H@Z:NEAR ; GraphicsMgr::DeleteScreenItem
EXTRN	?DeletePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z:NEAR ; GraphicsMgr::DeletePlane
_TEXT	SEGMENT
_frameOut$ = 8
_this$ = -24
$T174047 = -20
?Hide@EditClass@@QAEXH@Z PROC NEAR			; EditClass::Hide

; 1178 : {

  01189	55		 push	 ebp
  0118a	8b ec		 mov	 ebp, esp
  0118c	83 ec 18	 sub	 esp, 24			; 00000018H
  0118f	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1179 : 					
; 1180 : 	if (!visible) return;

  01192	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01195	83 78 70 00	 cmp	 DWORD PTR [eax+112], 0
  01199	75 02		 jne	 SHORT $L166539
  0119b	eb 7e		 jmp	 SHORT $L166538
$L166539:

; 1181 : 	visible = False;

  0119d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  011a0	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0

; 1182 : 	graphMgr->DeleteScreenItem(si, windowPlane->Id());

  011a7	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  011aa	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  011b0	e8 00 00 00 00	 call	 ?Id@SOL_Plane@@QBEJXZ	; SOL_Plane::Id
  011b5	50		 push	 eax
  011b6	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  011b9	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  011bc	51		 push	 ecx
  011bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  011c3	e8 00 00 00 00	 call	 ?DeleteScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@H@Z ; GraphicsMgr::DeleteScreenItem

; 1183 : //   if(si) {
; 1184 : //	   delete si;
; 1185 :       si = NULL;

  011c8	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  011cb	c7 42 74 00 00
	00 00		 mov	 DWORD PTR [edx+116], 0

; 1186 : //	}
; 1187 : 	graphMgr->DeletePlane(windowPlane);

  011d2	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  011d5	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  011db	51		 push	 ecx
  011dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  011e2	e8 00 00 00 00	 call	 ?DeletePlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ; GraphicsMgr::DeletePlane

; 1188 : 	if (frameOut)

  011e7	83 7d 08 00	 cmp	 DWORD PTR _frameOut$[ebp], 0
  011eb	74 2e		 je	 SHORT $L166540

; 1189 :   		graphMgr->FrameOut();

  011ed	6a ff		 push	 -1
  011ef	6a ff		 push	 -1
  011f1	6a 00		 push	 0
  011f3	6a 00		 push	 0
  011f5	8d 4d ec	 lea	 ecx, DWORD PTR $T174047[ebp]
  011f8	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  011fd	83 ec 10	 sub	 esp, 16			; 00000010H
  01200	8b cc		 mov	 ecx, esp
  01202	50		 push	 eax
  01203	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  01208	6a 01		 push	 1
  0120a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01210	8b 02		 mov	 eax, DWORD PTR [edx]
  01212	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01218	ff 50 14	 call	 DWORD PTR [eax+20]
$L166540:
$L166538:

; 1190 : }

  0121b	8b e5		 mov	 esp, ebp
  0121d	5d		 pop	 ebp
  0121e	c2 04 00	 ret	 4
?Hide@EditClass@@QAEXH@Z ENDP				; EditClass::Hide
_TEXT	ENDS
PUBLIC	?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
EXTRN	?TextCount@FontMgr@@QAEHVMemID@@HHAAVSOL_Rect@@H@Z:NEAR ; FontMgr::TextCount
EXTRN	?TextCount@FontMgr@@QAEHVMemID@@HAAVSOL_Rect@@H@Z:NEAR ; FontMgr::TextCount
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
_DATA	SEGMENT
	ORG $+3
$SG166565 DB	'C:\Documents and Settings\don\Desktop\sciw\Interp\Dialog'
	DB	'.cpp', 00H
	ORG $+3
$SG166577 DB	'C:\Documents and Settings\don\Desktop\sciw\Interp\Dialog'
	DB	'.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_this$ = -60
_lineCount$ = -36
_indexMemory$ = -32
_indices$ = -28
_line$ = -8
_r$ = -24
_textSize$ = -4
_start$ = -48
_lastChar$ = -40
_lastLine$ = -44
?GetLineIndices@EditClass@@UAEXXZ PROC NEAR		; EditClass::GetLineIndices

; 1194 : { 

  01221	55		 push	 ebp
  01222	8b ec		 mov	 ebp, esp
  01224	83 ec 3c	 sub	 esp, 60			; 0000003cH
  01227	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 1195 : 	// Get the line indices for text using the fntMgr
; 1196 : 
; 1197 : 	// Allocate some memory
; 1198 : 	uint lineCount = 100;

  0122a	c7 45 dc 64 00
	00 00		 mov	 DWORD PTR _lineCount$[ebp], 100 ; 00000064H

; 1199 : 	MemID indexMemory;

  01231	8d 4d e0	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  01234	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 1200 : 
; 1201 : 	if ( !lineIndicesID )

  01239	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0123c	83 c1 32	 add	 ecx, 50			; 00000032H
  0123f	e8 00 00 00 00	 call	 ??7MemID@@QBEHXZ	; MemID::operator!
  01244	85 c0		 test	 eax, eax
  01246	74 24		 je	 SHORT $L166548

; 1202 : 		indexMemory.Get(MemBitmap,(lineCount + 2)*sizeof(uint));

  01248	6a 00		 push	 0
  0124a	6a 00		 push	 0
  0124c	6a 00		 push	 0
  0124e	6a 00		 push	 0
  01250	68 00 02 00 00	 push	 512			; 00000200H
  01255	8b 45 dc	 mov	 eax, DWORD PTR _lineCount$[ebp]
  01258	8d 0c 85 08 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+8]
  0125f	51		 push	 ecx
  01260	6a 4b		 push	 75			; 0000004bH
  01262	8d 4d e0	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  01265	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 1203 : 	else

  0126a	eb 0b		 jmp	 SHORT $L166550
$L166548:

; 1204 : 		indexMemory = lineIndicesID;

  0126c	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  0126f	66 8b 42 32	 mov	 ax, WORD PTR [edx+50]
  01273	66 89 45 e0	 mov	 WORD PTR _indexMemory$[ebp], ax
$L166550:

; 1205 : 
; 1206 : 	uint* indices = (uint*) *indexMemory;

  01277	8d 4d e0	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  0127a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0127f	89 45 e4	 mov	 DWORD PTR _indices$[ebp], eax

; 1207 : 	uint line = 0;

  01282	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _line$[ebp], 0

; 1208 : 	indices[line++] = 0;

  01289	8b 4d f8	 mov	 ecx, DWORD PTR _line$[ebp]
  0128c	8b 55 e4	 mov	 edx, DWORD PTR _indices$[ebp]
  0128f	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0
  01296	8b 45 f8	 mov	 eax, DWORD PTR _line$[ebp]
  01299	83 c0 01	 add	 eax, 1
  0129c	89 45 f8	 mov	 DWORD PTR _line$[ebp], eax

; 1209 : 
; 1210 :    fntMgr->SetFont(font);

  0129f	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  012a2	33 d2		 xor	 edx, edx
  012a4	66 8b 51 30	 mov	 dx, WORD PTR [ecx+48]
  012a8	52		 push	 edx
  012a9	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  012ac	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  012b2	e8 00 00 00 00	 call	 ?SetFont@FontMgr@@QAEXH@Z ; FontMgr::SetFont

; 1211 : 
; 1212 : 	// Make a text rectangle that will hold just one line
; 1213 : 	SOL_Rect r(0,0,textBox.Xlen()-1,fntMgr->PointSize(False)+2);

  012b7	6a 00		 push	 0
  012b9	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  012bc	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  012c2	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  012c7	83 c0 02	 add	 eax, 2
  012ca	50		 push	 eax
  012cb	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  012ce	83 c1 10	 add	 ecx, 16			; 00000010H
  012d1	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  012d6	83 e8 01	 sub	 eax, 1
  012d9	50		 push	 eax
  012da	6a 00		 push	 0
  012dc	6a 00		 push	 0
  012de	8d 4d e8	 lea	 ecx, DWORD PTR _r$[ebp]
  012e1	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 1214 : 
; 1215 : 	indices = (uint *)*indexMemory;

  012e6	8d 4d e0	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  012e9	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  012ee	89 45 e4	 mov	 DWORD PTR _indices$[ebp], eax

; 1216 : 
; 1217 :    int textSize = strlen((char *)*text);

  012f1	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  012f4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  012f7	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  012fc	50		 push	 eax
  012fd	e8 00 00 00 00	 call	 _strlen
  01302	83 c4 04	 add	 esp, 4
  01305	89 45 fc	 mov	 DWORD PTR _textSize$[ebp], eax

; 1218 :    uint start;
; 1219 : 	for (start = 0;start < textSize;line++) {

  01308	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _start$[ebp], 0
  0130f	eb 09		 jmp	 SHORT $L166559
$L166560:
  01311	8b 55 f8	 mov	 edx, DWORD PTR _line$[ebp]
  01314	83 c2 01	 add	 edx, 1
  01317	89 55 f8	 mov	 DWORD PTR _line$[ebp], edx
$L166559:
  0131a	8b 45 d0	 mov	 eax, DWORD PTR _start$[ebp]
  0131d	3b 45 fc	 cmp	 eax, DWORD PTR _textSize$[ebp]
  01320	0f 83 9f 00 00
	00		 jae	 $L166561

; 1220 : 		indices[line] = start;

  01326	8b 4d f8	 mov	 ecx, DWORD PTR _line$[ebp]
  01329	8b 55 e4	 mov	 edx, DWORD PTR _indices$[ebp]
  0132c	8b 45 d0	 mov	 eax, DWORD PTR _start$[ebp]
  0132f	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1221 : 		//msgMgr->Mono("indices[%d]=%d",line,start);
; 1222 : 		indices[0]++;

  01332	8b 4d e4	 mov	 ecx, DWORD PTR _indices$[ebp]
  01335	8b 11		 mov	 edx, DWORD PTR [ecx]
  01337	83 c2 01	 add	 edx, 1
  0133a	8b 45 e4	 mov	 eax, DWORD PTR _indices$[ebp]
  0133d	89 10		 mov	 DWORD PTR [eax], edx

; 1223 : 		start = fntMgr->TextCount(text,start,r,True) + start;

  0133f	6a 01		 push	 1
  01341	8d 4d e8	 lea	 ecx, DWORD PTR _r$[ebp]
  01344	51		 push	 ecx
  01345	8b 55 d0	 mov	 edx, DWORD PTR _start$[ebp]
  01348	52		 push	 edx
  01349	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  0134c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0134f	51		 push	 ecx
  01350	8b cc		 mov	 ecx, esp
  01352	50		 push	 eax
  01353	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01358	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0135b	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  01361	e8 00 00 00 00	 call	 ?TextCount@FontMgr@@QAEHVMemID@@HAAVSOL_Rect@@H@Z ; FontMgr::TextCount
  01366	03 45 d0	 add	 eax, DWORD PTR _start$[ebp]
  01369	89 45 d0	 mov	 DWORD PTR _start$[ebp], eax

; 1224 : 		if (line == lineCount) {

  0136c	8b 55 f8	 mov	 edx, DWORD PTR _line$[ebp]
  0136f	3b 55 dc	 cmp	 edx, DWORD PTR _lineCount$[ebp]
  01372	75 4c		 jne	 SHORT $L166563

; 1225 : 			if (lineCount > 1000)

  01374	81 7d dc e8 03
	00 00		 cmp	 DWORD PTR _lineCount$[ebp], 1000 ; 000003e8H
  0137b	76 1c		 jbe	 SHORT $L166564

; 1226 : 				msgMgr->Fatal(SrcLoc,Msg_WindowTextTooBig);

  0137d	6a 40		 push	 64			; 00000040H
  0137f	68 ca 04 00 00	 push	 1226			; 000004caH
  01384	68 00 00 00 00	 push	 OFFSET FLAT:$SG166565
  01389	6a 61		 push	 97			; 00000061H
  0138b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01390	50		 push	 eax
  01391	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  01396	83 c4 14	 add	 esp, 20			; 00000014H
$L166564:

; 1227 : 			lineCount += 100;

  01399	8b 4d dc	 mov	 ecx, DWORD PTR _lineCount$[ebp]
  0139c	83 c1 64	 add	 ecx, 100		; 00000064H
  0139f	89 4d dc	 mov	 DWORD PTR _lineCount$[ebp], ecx

; 1228 : 			indexMemory.Realloc((lineCount + 2)*sizeof(uint));

  013a2	8b 55 dc	 mov	 edx, DWORD PTR _lineCount$[ebp]
  013a5	8d 04 95 08 00
	00 00		 lea	 eax, DWORD PTR [edx*4+8]
  013ac	50		 push	 eax
  013ad	8d 4d e0	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  013b0	e8 00 00 00 00	 call	 ?Realloc@MemID@@QBEPAXI@Z ; MemID::Realloc

; 1229 : 			indices = (uint*) *indexMemory;

  013b5	8d 4d e0	 lea	 ecx, DWORD PTR _indexMemory$[ebp]
  013b8	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  013bd	89 45 e4	 mov	 DWORD PTR _indices$[ebp], eax
$L166563:

; 1231 :  	}

  013c0	e9 4c ff ff ff	 jmp	 $L166560
$L166561:

; 1232 : 	indices[line] = start;

  013c5	8b 4d f8	 mov	 ecx, DWORD PTR _line$[ebp]
  013c8	8b 55 e4	 mov	 edx, DWORD PTR _indices$[ebp]
  013cb	8b 45 d0	 mov	 eax, DWORD PTR _start$[ebp]
  013ce	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1233 : 	//msgMgr->Mono("indices[%d]=%d\r\n",line,start);
; 1234 : 	maxLines = indices[0];

  013d1	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  013d4	8b 55 e4	 mov	 edx, DWORD PTR _indices$[ebp]
  013d7	8b 02		 mov	 eax, DWORD PTR [edx]
  013d9	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 1235 : 
; 1236 : 	lineIndicesID = indexMemory;

  013df	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  013e2	66 8b 55 e0	 mov	 dx, WORD PTR _indexMemory$[ebp]
  013e6	66 89 51 32	 mov	 WORD PTR [ecx+50], dx

; 1237 : 
; 1238 : 	int lastChar = fntMgr->TextCount(text,0,font,textBox,False) - 1;

  013ea	6a 00		 push	 0
  013ec	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  013ef	83 c0 10	 add	 eax, 16			; 00000010H
  013f2	50		 push	 eax
  013f3	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  013f6	33 d2		 xor	 edx, edx
  013f8	66 8b 51 30	 mov	 dx, WORD PTR [ecx+48]
  013fc	52		 push	 edx
  013fd	6a 00		 push	 0
  013ff	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01402	83 c0 0c	 add	 eax, 12			; 0000000cH
  01405	51		 push	 ecx
  01406	8b cc		 mov	 ecx, esp
  01408	50		 push	 eax
  01409	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0140e	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  01411	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  01417	e8 00 00 00 00	 call	 ?TextCount@FontMgr@@QAEHVMemID@@HHAAVSOL_Rect@@H@Z ; FontMgr::TextCount
  0141c	83 e8 01	 sub	 eax, 1
  0141f	89 45 d8	 mov	 DWORD PTR _lastChar$[ebp], eax

; 1239 : 
; 1240 : 	int lastLine = 0;

  01422	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _lastLine$[ebp], 0
$L166572:

; 1241 : 	while (lastLine < indices[0]) {

  01429	8b 55 e4	 mov	 edx, DWORD PTR _indices$[ebp]
  0142c	8b 45 d4	 mov	 eax, DWORD PTR _lastLine$[ebp]
  0142f	3b 02		 cmp	 eax, DWORD PTR [edx]
  01431	73 1e		 jae	 SHORT $L166573

; 1242 : 		if (indices[lastLine+1] < lastChar)

  01433	8b 4d d4	 mov	 ecx, DWORD PTR _lastLine$[ebp]
  01436	8b 55 e4	 mov	 edx, DWORD PTR _indices$[ebp]
  01439	8b 44 8a 04	 mov	 eax, DWORD PTR [edx+ecx*4+4]
  0143d	3b 45 d8	 cmp	 eax, DWORD PTR _lastChar$[ebp]
  01440	73 0b		 jae	 SHORT $L166574

; 1243 : 			lastLine++;

  01442	8b 4d d4	 mov	 ecx, DWORD PTR _lastLine$[ebp]
  01445	83 c1 01	 add	 ecx, 1
  01448	89 4d d4	 mov	 DWORD PTR _lastLine$[ebp], ecx

; 1244 : 		else

  0144b	eb 02		 jmp	 SHORT $L166575
$L166574:

; 1245 : 			break;

  0144d	eb 02		 jmp	 SHORT $L166573
$L166575:

; 1246 : 	}

  0144f	eb d8		 jmp	 SHORT $L166572
$L166573:

; 1247 : 	if (lastLine > indices[0])

  01451	8b 55 e4	 mov	 edx, DWORD PTR _indices$[ebp]
  01454	8b 45 d4	 mov	 eax, DWORD PTR _lastLine$[ebp]
  01457	3b 02		 cmp	 eax, DWORD PTR [edx]
  01459	76 20		 jbe	 SHORT $L166576

; 1248 : 		msgMgr->Fatal(SrcLoc,Msg_InternalErrorOnLastLine);

  0145b	68 83 00 00 00	 push	 131			; 00000083H
  01460	68 e0 04 00 00	 push	 1248			; 000004e0H
  01465	68 00 00 00 00	 push	 OFFSET FLAT:$SG166577
  0146a	6a 61		 push	 97			; 00000061H
  0146c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  01472	51		 push	 ecx
  01473	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  01478	83 c4 14	 add	 esp, 20			; 00000014H
$L166576:

; 1249 : }

  0147b	8b e5		 mov	 esp, ebp
  0147d	5d		 pop	 ebp
  0147e	c3		 ret	 0
?GetLineIndices@EditClass@@UAEXXZ ENDP			; EditClass::GetLineIndices
_TEXT	ENDS
PUBLIC	?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z		; SOL_Rect::Intersect
PUBLIC	?HandleEvent@EditClass@@QAEHXZ			; EditClass::HandleEvent
PUBLIC	?EditText@EditClass@@QAEHAAVSOL_Event@@@Z	; EditClass::EditText
EXTRN	?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z:NEAR ; GraphicsMgr::UpdateScreenItem
EXTRN	??0SOL_Event@@QAE@XZ:NEAR			; SOL_Event::SOL_Event
EXTRN	?eventMgr@@3PAUEventMgr@@A:DWORD		; eventMgr
EXTRN	?AsyncEventCheck@@YAXXZ:NEAR			; AsyncEventCheck
_TEXT	SEGMENT
_this$ = -76
_done$ = -44
_retVal$ = -48
_evt$ = -40
$T174054 = -72
?HandleEvent@EditClass@@QAEHXZ PROC NEAR		; EditClass::HandleEvent

; 1253 : {

  0147f	55		 push	 ebp
  01480	8b ec		 mov	 ebp, esp
  01482	83 ec 54	 sub	 esp, 84			; 00000054H
  01485	89 4d b4	 mov	 DWORD PTR _this$[ebp], ecx

; 1254 : 	int		done = False;

  01488	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _done$[ebp], 0

; 1255 : 	int		retVal = False;

  0148f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 0

; 1256 : 	SOL_Event evt;

  01496	8d 4d d8	 lea	 ecx, DWORD PTR _evt$[ebp]
  01499	e8 00 00 00 00	 call	 ??0SOL_Event@@QAE@XZ	; SOL_Event::SOL_Event

; 1257 : 	
; 1258 : 	// Clear the edit line on certain keystrokes
; 1259 : 	clearEditLine = True;

  0149e	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  014a1	66 c7 40 5a 01
	00		 mov	 WORD PTR [eax+90], 1
$L166585:

; 1260 : 	// This is the edit phase
; 1261 : 	while (True) {

  014a7	b9 01 00 00 00	 mov	 ecx, 1
  014ac	85 c9		 test	 ecx, ecx
  014ae	0f 84 ee 00 00
	00		 je	 $L166586

; 1262 : 		AsyncEventCheck();

  014b4	e8 00 00 00 00	 call	 ?AsyncEventCheck@@YAXXZ	; AsyncEventCheck

; 1263 : 		eventMgr->Get(&evt,SOL_Event::All);

  014b9	68 ff 7f 00 00	 push	 32767			; 00007fffH
  014be	8d 55 d8	 lea	 edx, DWORD PTR _evt$[ebp]
  014c1	52		 push	 edx
  014c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  014c7	8b 10		 mov	 edx, DWORD PTR [eax]
  014c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  014cf	ff 52 08	 call	 DWORD PTR [edx+8]

; 1264 : 		switch(evt.type) {

  014d2	8b 45 d8	 mov	 eax, DWORD PTR _evt$[ebp]
  014d5	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  014da	89 45 b0	 mov	 DWORD PTR -80+[ebp], eax
  014dd	83 7d b0 01	 cmp	 DWORD PTR -80+[ebp], 1
  014e1	74 3c		 je	 SHORT $L166598
  014e3	83 7d b0 04	 cmp	 DWORD PTR -80+[ebp], 4
  014e7	74 02		 je	 SHORT $L166591
  014e9	eb 5f		 jmp	 SHORT $L166588
$L166591:

; 1265 : 			case SOL_Event::KeyDown:
; 1266 : 				switch (evt.message)	{

  014eb	8b 4d dc	 mov	 ecx, DWORD PTR _evt$[ebp+4]
  014ee	89 4d ac	 mov	 DWORD PTR -84+[ebp], ecx
  014f1	83 7d ac 0d	 cmp	 DWORD PTR -84+[ebp], 13	; 0000000dH
  014f5	74 18		 je	 SHORT $L166597
  014f7	83 7d ac 1b	 cmp	 DWORD PTR -84+[ebp], 27	; 0000001bH
  014fb	74 02		 je	 SHORT $L166596
  014fd	eb 1e		 jmp	 SHORT $L166593
$L166596:

; 1267 : 					case Kbd::Esc:
; 1268 : 						done = True;

  014ff	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _done$[ebp], 1

; 1269 : 						retVal = False;

  01506	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 0

; 1270 : 						break;

  0150d	eb 0e		 jmp	 SHORT $L166593
$L166597:

; 1271 : 
; 1272 : 					case Kbd::Enter:
; 1273 : 						done = True;

  0150f	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _done$[ebp], 1

; 1274 : 						retVal = True;

  01516	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 1
$L166593:

; 1277 : 				break;

  0151d	eb 2b		 jmp	 SHORT $L166588
$L166598:

; 1278 : 			case SOL_Event::MouseDown:
; 1279 : 				if (!window.Intersect(evt.where)) {

  0151f	83 ec 08	 sub	 esp, 8
  01522	8b cc		 mov	 ecx, esp
  01524	8d 55 e8	 lea	 edx, DWORD PTR _evt$[ebp+16]
  01527	52		 push	 edx
  01528	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  0152d	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  01530	83 c1 78	 add	 ecx, 120		; 00000078H
  01533	e8 00 00 00 00	 call	 ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z ; SOL_Rect::Intersect
  01538	85 c0		 test	 eax, eax
  0153a	75 0e		 jne	 SHORT $L166600

; 1280 : 					done = True;

  0153c	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _done$[ebp], 1

; 1281 : 					retVal = False;

  01543	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 0
$L166600:
$L166588:

; 1285 : 		if (done) 

  0154a	83 7d d4 00	 cmp	 DWORD PTR _done$[ebp], 0
  0154e	74 02		 je	 SHORT $L166601

; 1286 : 			break;

  01550	eb 50		 jmp	 SHORT $L166586
$L166601:

; 1287 : 		EditText(evt);

  01552	8d 45 d8	 lea	 eax, DWORD PTR _evt$[ebp]
  01555	50		 push	 eax
  01556	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  01559	e8 00 00 00 00	 call	 ?EditText@EditClass@@QAEHAAVSOL_Event@@@Z ; EditClass::EditText

; 1288 : 
; 1289 : 		graphMgr->UpdateScreenItem(si);

  0155e	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  01561	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  01564	52		 push	 edx
  01565	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0156b	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem

; 1290 : 		graphMgr->FrameOut();

  01570	6a ff		 push	 -1
  01572	6a ff		 push	 -1
  01574	6a 00		 push	 0
  01576	6a 00		 push	 0
  01578	8d 4d b8	 lea	 ecx, DWORD PTR $T174054[ebp]
  0157b	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  01580	83 ec 10	 sub	 esp, 16			; 00000010H
  01583	8b cc		 mov	 ecx, esp
  01585	50		 push	 eax
  01586	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  0158b	6a 01		 push	 1
  0158d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01592	8b 10		 mov	 edx, DWORD PTR [eax]
  01594	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0159a	ff 52 14	 call	 DWORD PTR [edx+20]

; 1291 : 	}

  0159d	e9 05 ff ff ff	 jmp	 $L166585
$L166586:

; 1292 : 	 
; 1293 : //	eventMgr->Post(&evt);
; 1294 : 
; 1295 : 	return retVal;

  015a2	8b 45 d0	 mov	 eax, DWORD PTR _retVal$[ebp]

; 1296 : }

  015a5	8b e5		 mov	 esp, ebp
  015a7	5d		 pop	 ebp
  015a8	c3		 ret	 0
?HandleEvent@EditClass@@QAEHXZ ENDP			; EditClass::HandleEvent
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@XZ				; SOL_Point::SOL_Point
PUBLIC	?UpdateFontMgr@EditClass@@QAEXXZ		; EditClass::UpdateFontMgr
PUBLIC	?EraseCursor@EditClass@@QAEXXZ			; EditClass::EraseCursor
PUBLIC	?FlashCursor@EditClass@@QAEXXZ			; EditClass::FlashCursor
EXTRN	?DrawTextBox@FontMgr@@QAEXXZ:NEAR		; FontMgr::DrawTextBox
EXTRN	?Erase@FontMgr@@QAEXAAVSOL_Rect@@H@Z:NEAR	; FontMgr::Erase
_TEXT	SEGMENT
_evt$ = 8
_this$ = -128
_mousept$ = -12
_msg$ = -36
_str$ = -16
_i$ = -24
_textLen$ = -20
_charChanged$ = -28
_deleteChar$ = -4
_oldCursor$ = -32
_indices$166643 = -60
_indices$166650 = -64
_i$166664 = -68
_i$166675 = -72
_ps$166680 = -40
_intersectRect$166681 = -56
_indices$166684 = -80
_line$166686 = -76
_r$166690 = -96
_str$166693 = -108
_lineSize$166695 = -104
_xPos$166696 = -100
_loop$166697 = -112
_cWide$166702 = -116
?EditText@EditClass@@QAEHAAVSOL_Event@@@Z PROC NEAR	; EditClass::EditText

; 1300 : {

  015a9	55		 push	 ebp
  015aa	8b ec		 mov	 ebp, esp
  015ac	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  015b2	56		 push	 esi
  015b3	89 4d 80	 mov	 DWORD PTR _this$[ebp], ecx

; 1301 : 	SOL_Point mousept;

  015b6	8d 4d f4	 lea	 ecx, DWORD PTR _mousept$[ebp]
  015b9	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 1302 : 	int	msg;
; 1303 : 
; 1304 : 	UpdateFontMgr();

  015be	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  015c1	e8 00 00 00 00	 call	 ?UpdateFontMgr@EditClass@@QAEXXZ ; EditClass::UpdateFontMgr

; 1305 : 
; 1306 : 	char* str = (char *) *text;

  015c6	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  015c9	83 c1 0c	 add	 ecx, 12			; 0000000cH
  015cc	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  015d1	89 45 f0	 mov	 DWORD PTR _str$[ebp], eax

; 1307 : 
; 1308 : 	int i;
; 1309 : 	int textLen = strlen(str);

  015d4	8b 45 f0	 mov	 eax, DWORD PTR _str$[ebp]
  015d7	50		 push	 eax
  015d8	e8 00 00 00 00	 call	 _strlen
  015dd	83 c4 04	 add	 esp, 4
  015e0	89 45 ec	 mov	 DWORD PTR _textLen$[ebp], eax

; 1310 : 	int charChanged = False;

  015e3	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _charChanged$[ebp], 0

; 1311 : 	int deleteChar = False;

  015ea	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _deleteChar$[ebp], 0

; 1312 : 	int oldCursor = cursor;

  015f1	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  015f4	33 d2		 xor	 edx, edx
  015f6	66 8b 51 34	 mov	 dx, WORD PTR [ecx+52]
  015fa	89 55 e0	 mov	 DWORD PTR _oldCursor$[ebp], edx

; 1313 : 
; 1314 : 	switch(evt.type) {

  015fd	8b 45 08	 mov	 eax, DWORD PTR _evt$[ebp]
  01600	33 c9		 xor	 ecx, ecx
  01602	66 8b 08	 mov	 cx, WORD PTR [eax]
  01605	89 8d 7c ff ff
	ff		 mov	 DWORD PTR -132+[ebp], ecx
  0160b	83 bd 7c ff ff
	ff 01		 cmp	 DWORD PTR -132+[ebp], 1
  01612	0f 84 d0 04 00
	00		 je	 $L166679
  01618	83 bd 7c ff ff
	ff 04		 cmp	 DWORD PTR -132+[ebp], 4
  0161f	74 05		 je	 SHORT $L166621
  01621	e9 c2 06 00 00	 jmp	 $L166618
$L166621:

; 1316 : 			switch (msg = evt.message) {

  01626	8b 55 08	 mov	 edx, DWORD PTR _evt$[ebp]
  01629	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0162c	89 45 dc	 mov	 DWORD PTR _msg$[ebp], eax
  0162f	8b 4d dc	 mov	 ecx, DWORD PTR _msg$[ebp]
  01632	89 8d 78 ff ff
	ff		 mov	 DWORD PTR -136+[ebp], ecx
  01638	81 bd 78 ff ff
	ff 00 4d 00 00	 cmp	 DWORD PTR -136+[ebp], 19712 ; 00004d00H
  01642	7f 70		 jg	 SHORT $L174056
  01644	81 bd 78 ff ff
	ff 00 4d 00 00	 cmp	 DWORD PTR -136+[ebp], 19712 ; 00004d00H
  0164e	0f 84 c3 01 00
	00		 je	 $L166639
  01654	81 bd 78 ff ff
	ff 00 47 00 00	 cmp	 DWORD PTR -136+[ebp], 18176 ; 00004700H
  0165e	7f 2f		 jg	 SHORT $L174057
  01660	81 bd 78 ff ff
	ff 00 47 00 00	 cmp	 DWORD PTR -136+[ebp], 18176 ; 00004700H
  0166a	0f 84 96 00 00
	00		 je	 $L166626
  01670	83 bd 78 ff ff
	ff 03		 cmp	 DWORD PTR -136+[ebp], 3
  01677	0f 84 b9 00 00
	00		 je	 $L166628
  0167d	83 bd 78 ff ff
	ff 08		 cmp	 DWORD PTR -136+[ebp], 8
  01684	0f 84 d5 00 00
	00		 je	 $L166630
  0168a	e9 df 02 00 00	 jmp	 $L166655
$L174057:
  0168f	81 bd 78 ff ff
	ff 00 48 00 00	 cmp	 DWORD PTR -136+[ebp], 18432 ; 00004800H
  01699	0f 84 a6 01 00
	00		 je	 $L166641
  0169f	81 bd 78 ff ff
	ff 00 4b 00 00	 cmp	 DWORD PTR -136+[ebp], 19200 ; 00004b00H
  016a9	0f 84 e4 00 00
	00		 je	 $L166632
  016af	e9 ba 02 00 00	 jmp	 $L166655
$L174056:
  016b4	81 bd 78 ff ff
	ff 00 52 00 00	 cmp	 DWORD PTR -136+[ebp], 20992 ; 00005200H
  016be	7f 31		 jg	 SHORT $L174058
  016c0	81 bd 78 ff ff
	ff 00 52 00 00	 cmp	 DWORD PTR -136+[ebp], 20992 ; 00005200H
  016ca	0f 84 f0 00 00
	00		 je	 $L166634
  016d0	81 bd 78 ff ff
	ff 00 4f 00 00	 cmp	 DWORD PTR -136+[ebp], 20224 ; 00004f00H
  016da	74 41		 je	 SHORT $L166627
  016dc	81 bd 78 ff ff
	ff 00 50 00 00	 cmp	 DWORD PTR -136+[ebp], 20480 ; 00005000H
  016e6	0f 84 ea 01 00
	00		 je	 $L166648
  016ec	e9 7d 02 00 00	 jmp	 $L166655
$L174058:
  016f1	81 bd 78 ff ff
	ff 00 53 00 00	 cmp	 DWORD PTR -136+[ebp], 21248 ; 00005300H
  016fb	0f 84 f3 00 00
	00		 je	 $L166637
  01701	e9 68 02 00 00	 jmp	 $L166655
$L166626:

; 1317 : 				case Kbd::Home:
; 1318 : 					// beginning of line
; 1319 : 					clearEditLine = False;

  01706	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01709	66 c7 42 5a 00
	00		 mov	 WORD PTR [edx+90], 0

; 1320 : 					cursor = 0;			

  0170f	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01712	66 c7 40 34 00
	00		 mov	 WORD PTR [eax+52], 0

; 1321 : 					break;

  01718	e9 79 03 00 00	 jmp	 $L166623
$L166627:

; 1322 : 
; 1323 : 				case Kbd::End:
; 1324 : 					// end of line
; 1325 : 					clearEditLine = False;

  0171d	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01720	66 c7 41 5a 00
	00		 mov	 WORD PTR [ecx+90], 0

; 1326 : 					cursor = textLen;			

  01726	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01729	66 8b 45 ec	 mov	 ax, WORD PTR _textLen$[ebp]
  0172d	66 89 42 34	 mov	 WORD PTR [edx+52], ax

; 1327 : 					break;

  01731	e9 60 03 00 00	 jmp	 $L166623
$L166628:

; 1328 : 
; 1329 : 				case CtrlKey('C'):	
; 1330 : 					// control C
; 1331 : 					// clear line
; 1332 : 					cursor = 0;			

  01736	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01739	66 c7 41 34 00
	00		 mov	 WORD PTR [ecx+52], 0

; 1333 : 
; 1334 : 					str = (char *)*text;

  0173f	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01742	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01745	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0174a	89 45 f0	 mov	 DWORD PTR _str$[ebp], eax

; 1335 : 					*str = 0;

  0174d	8b 55 f0	 mov	 edx, DWORD PTR _str$[ebp]
  01750	c6 02 00	 mov	 BYTE PTR [edx], 0

; 1336 : 
; 1337 : 					charChanged = True;

  01753	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _charChanged$[ebp], 1

; 1338 : 					break;

  0175a	e9 37 03 00 00	 jmp	 $L166623
$L166630:

; 1339 : 					
; 1340 : 				case Kbd::BackSpace:
; 1341 : 					// destructive backspace
; 1342 : 					clearEditLine = False;

  0175f	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01762	66 c7 40 5a 00
	00		 mov	 WORD PTR [eax+90], 0

; 1343 : 					deleteChar = True;

  01768	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _deleteChar$[ebp], 1

; 1344 : 					if (cursor)	--cursor;			

  0176f	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01772	33 d2		 xor	 edx, edx
  01774	66 8b 51 34	 mov	 dx, WORD PTR [ecx+52]
  01778	85 d2		 test	 edx, edx
  0177a	74 12		 je	 SHORT $L166631
  0177c	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  0177f	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  01783	66 83 e9 01	 sub	 cx, 1
  01787	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  0178a	66 89 4a 34	 mov	 WORD PTR [edx+52], cx
$L166631:

; 1345 : 					break;

  0178e	e9 03 03 00 00	 jmp	 $L166623
$L166632:

; 1346 : 
; 1347 : 				case Kbd::Left:
; 1348 : 					// non-destructive backspace
; 1349 : 					clearEditLine = False;

  01793	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01796	66 c7 40 5a 00
	00		 mov	 WORD PTR [eax+90], 0

; 1350 : 					if (cursor)	--cursor;			

  0179c	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  0179f	33 d2		 xor	 edx, edx
  017a1	66 8b 51 34	 mov	 dx, WORD PTR [ecx+52]
  017a5	85 d2		 test	 edx, edx
  017a7	74 12		 je	 SHORT $L166633
  017a9	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  017ac	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  017b0	66 83 e9 01	 sub	 cx, 1
  017b4	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  017b7	66 89 4a 34	 mov	 WORD PTR [edx+52], cx
$L166633:

; 1351 : 					break;

  017bb	e9 d6 02 00 00	 jmp	 $L166623
$L166634:

; 1352 : 		
; 1353 : 				case Kbd::Insert:
; 1354 : 					// toggle insert mode
; 1355 : 					clearEditLine = False;

  017c0	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  017c3	66 c7 40 5a 00
	00		 mov	 WORD PTR [eax+90], 0

; 1356 : 					if (insertMode)

  017c9	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  017cc	0f bf 51 58	 movsx	 edx, WORD PTR [ecx+88]
  017d0	85 d2		 test	 edx, edx
  017d2	74 0b		 je	 SHORT $L166635

; 1357 : 						insertMode = 0;

  017d4	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  017d7	66 c7 40 58 00
	00		 mov	 WORD PTR [eax+88], 0

; 1358 : 					else

  017dd	eb 09		 jmp	 SHORT $L166636
$L166635:

; 1359 : 						insertMode = 1;

  017df	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  017e2	66 c7 41 58 01
	00		 mov	 WORD PTR [ecx+88], 1
$L166636:

; 1360 : 					charChanged = True;

  017e8	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _charChanged$[ebp], 1

; 1361 : 					break;

  017ef	e9 a2 02 00 00	 jmp	 $L166623
$L166637:

; 1362 : 		
; 1363 : 				case Kbd::Del:
; 1364 : 					// delete at cursor
; 1365 : 					clearEditLine = False;

  017f4	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  017f7	66 c7 42 5a 00
	00		 mov	 WORD PTR [edx+90], 0

; 1366 : 					if (cursor != textLen)

  017fd	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01800	33 c9		 xor	 ecx, ecx
  01802	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  01806	3b 4d ec	 cmp	 ecx, DWORD PTR _textLen$[ebp]
  01809	74 07		 je	 SHORT $L166638

; 1367 : 						deleteChar = True;

  0180b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _deleteChar$[ebp], 1
$L166638:

; 1368 : 					break;

  01812	e9 7f 02 00 00	 jmp	 $L166623
$L166639:

; 1369 : 		
; 1370 : 				case Kbd::Right:
; 1371 : 					clearEditLine = False;

  01817	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  0181a	66 c7 42 5a 00
	00		 mov	 WORD PTR [edx+90], 0

; 1372 : 					if (cursor < textLen)

  01820	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01823	33 c9		 xor	 ecx, ecx
  01825	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  01829	3b 4d ec	 cmp	 ecx, DWORD PTR _textLen$[ebp]
  0182c	7d 12		 jge	 SHORT $L166640

; 1373 : 						++cursor;

  0182e	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01831	66 8b 42 34	 mov	 ax, WORD PTR [edx+52]
  01835	66 05 01 00	 add	 ax, 1
  01839	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  0183c	66 89 41 34	 mov	 WORD PTR [ecx+52], ax
$L166640:

; 1374 : 					break;

  01840	e9 51 02 00 00	 jmp	 $L166623
$L166641:

; 1375 : 
; 1376 : 				case Kbd::Up:
; 1377 : 					// determine if not on top line, then move up
; 1378 : 					//
; 1379 : 					if	(cursorY > 0) {

  01845	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01848	33 c0		 xor	 eax, eax
  0184a	66 8b 42 38	 mov	 ax, WORD PTR [edx+56]
  0184e	85 c0		 test	 eax, eax
  01850	7e 7f		 jle	 SHORT $L166642

; 1380 :          			uint* indices = (uint*) *lineIndicesID;

  01852	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01855	83 c1 32	 add	 ecx, 50			; 00000032H
  01858	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0185d	89 45 c4	 mov	 DWORD PTR _indices$166643[ebp], eax

; 1381 :       				for(i = 1; cursor >= indices[i+1] && i < indices[0]; i++);

  01860	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  01867	eb 09		 jmp	 SHORT $L166645
$L166646:
  01869	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0186c	83 c1 01	 add	 ecx, 1
  0186f	89 4d e8	 mov	 DWORD PTR _i$[ebp], ecx
$L166645:
  01872	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01875	33 c0		 xor	 eax, eax
  01877	66 8b 42 34	 mov	 ax, WORD PTR [edx+52]
  0187b	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0187e	8b 55 c4	 mov	 edx, DWORD PTR _indices$166643[ebp]
  01881	3b 44 8a 04	 cmp	 eax, DWORD PTR [edx+ecx*4+4]
  01885	72 0c		 jb	 SHORT $L166647
  01887	8b 45 c4	 mov	 eax, DWORD PTR _indices$166643[ebp]
  0188a	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0188d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0188f	73 02		 jae	 SHORT $L166647
  01891	eb d6		 jmp	 SHORT $L166646
$L166647:

; 1382 : 						cursor=indices[i-1]+cursorX;

  01893	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01896	33 c0		 xor	 eax, eax
  01898	66 8b 42 36	 mov	 ax, WORD PTR [edx+54]
  0189c	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0189f	8b 55 c4	 mov	 edx, DWORD PTR _indices$166643[ebp]
  018a2	8b 4c 8a fc	 mov	 ecx, DWORD PTR [edx+ecx*4-4]
  018a6	03 c8		 add	 ecx, eax
  018a8	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  018ab	66 89 4a 34	 mov	 WORD PTR [edx+52], cx

; 1383 : 						SetCursor(cursor);

  018af	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  018b2	33 c9		 xor	 ecx, ecx
  018b4	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  018b8	51		 push	 ecx
  018b9	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  018bc	e8 00 00 00 00	 call	 ?SetCursor@EditClass@@QAEXH@Z ; EditClass::SetCursor

; 1384 : 						EraseCursor();

  018c1	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  018c4	e8 00 00 00 00	 call	 ?EraseCursor@EditClass@@QAEXXZ ; EditClass::EraseCursor

; 1385 : 						DrawCursor();

  018c9	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  018cc	e8 00 00 00 00	 call	 ?DrawCursor@EditClass@@QAEXXZ ; EditClass::DrawCursor
$L166642:

; 1387 : 
; 1388 : 					break;

  018d1	e9 c0 01 00 00	 jmp	 $L166623
$L166648:

; 1389 : 
; 1390 : 				case Kbd::Down:
; 1391 : 					// determine if not on bottom line, then move down
; 1392 : 					//
; 1393 : 					if	(cursorY < maxLines) {

  018d6	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  018d9	33 c0		 xor	 eax, eax
  018db	66 8b 42 38	 mov	 ax, WORD PTR [edx+56]
  018df	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  018e2	3b 81 88 00 00
	00		 cmp	 eax, DWORD PTR [ecx+136]
  018e8	7d 7f		 jge	 SHORT $L166649

; 1394 :          			uint* indices = (uint*) *lineIndicesID;

  018ea	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  018ed	83 c1 32	 add	 ecx, 50			; 00000032H
  018f0	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  018f5	89 45 c0	 mov	 DWORD PTR _indices$166650[ebp], eax

; 1395 :       				for(i = 1; cursor >= indices[i+1] && i < indices[0]; i++);

  018f8	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  018ff	eb 09		 jmp	 SHORT $L166652
$L166653:
  01901	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  01904	83 c2 01	 add	 edx, 1
  01907	89 55 e8	 mov	 DWORD PTR _i$[ebp], edx
$L166652:
  0190a	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  0190d	33 c9		 xor	 ecx, ecx
  0190f	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  01913	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  01916	8b 45 c0	 mov	 eax, DWORD PTR _indices$166650[ebp]
  01919	3b 4c 90 04	 cmp	 ecx, DWORD PTR [eax+edx*4+4]
  0191d	72 0c		 jb	 SHORT $L166654
  0191f	8b 4d c0	 mov	 ecx, DWORD PTR _indices$166650[ebp]
  01922	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  01925	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01927	73 02		 jae	 SHORT $L166654
  01929	eb d6		 jmp	 SHORT $L166653
$L166654:

; 1396 : 						cursor=indices[i+1]+cursorX;

  0192b	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  0192e	33 c9		 xor	 ecx, ecx
  01930	66 8b 48 36	 mov	 cx, WORD PTR [eax+54]
  01934	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  01937	8b 45 c0	 mov	 eax, DWORD PTR _indices$166650[ebp]
  0193a	8b 54 90 04	 mov	 edx, DWORD PTR [eax+edx*4+4]
  0193e	03 d1		 add	 edx, ecx
  01940	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01943	66 89 50 34	 mov	 WORD PTR [eax+52], dx

; 1397 : 						SetCursor(cursor);

  01947	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  0194a	33 d2		 xor	 edx, edx
  0194c	66 8b 51 34	 mov	 dx, WORD PTR [ecx+52]
  01950	52		 push	 edx
  01951	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01954	e8 00 00 00 00	 call	 ?SetCursor@EditClass@@QAEXH@Z ; EditClass::SetCursor

; 1398 : 						EraseCursor();

  01959	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  0195c	e8 00 00 00 00	 call	 ?EraseCursor@EditClass@@QAEXXZ ; EditClass::EraseCursor

; 1399 : 						DrawCursor();

  01961	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01964	e8 00 00 00 00	 call	 ?DrawCursor@EditClass@@QAEXXZ ; EditClass::DrawCursor
$L166649:

; 1401 : 
; 1402 : 					break;

  01969	e9 28 01 00 00	 jmp	 $L166623
$L166655:

; 1405 : 					if ((msg >= ' ') && (msg < 257)) {

  0196e	83 7d dc 20	 cmp	 DWORD PTR _msg$[ebp], 32 ; 00000020H
  01972	0f 8c 1e 01 00
	00		 jl	 $L166659
  01978	81 7d dc 01 01
	00 00		 cmp	 DWORD PTR _msg$[ebp], 257 ; 00000101H
  0197f	0f 8d 11 01 00
	00		 jge	 $L166659

; 1406 : 						// If this is the first key, clear the input
; 1407 : 						if (clearEditLine) {

  01985	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01988	0f bf 48 5a	 movsx	 ecx, WORD PTR [eax+90]
  0198c	85 c9		 test	 ecx, ecx
  0198e	74 27		 je	 SHORT $L166657

; 1408 :    						clearEditLine = False;

  01990	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01993	66 c7 42 5a 00
	00		 mov	 WORD PTR [edx+90], 0

; 1409 : 
; 1410 : 							str = (char *)*text;

  01999	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  0199c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0199f	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  019a4	89 45 f0	 mov	 DWORD PTR _str$[ebp], eax

; 1411 : 	   					*str = 0;

  019a7	8b 45 f0	 mov	 eax, DWORD PTR _str$[ebp]
  019aa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1412 : 
; 1413 : 		   				SetCursor(0);

  019ad	6a 00		 push	 0
  019af	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  019b2	e8 00 00 00 00	 call	 ?SetCursor@EditClass@@QAEXH@Z ; EditClass::SetCursor
$L166657:

; 1420 : 							   ||
; 1421 : 							  (textLen < maxChars)
; 1422 : 							) {

  019b7	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  019ba	0f bf 51 58	 movsx	 edx, WORD PTR [ecx+88]
  019be	85 d2		 test	 edx, edx
  019c0	75 16		 jne	 SHORT $L166661
  019c2	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  019c5	33 c9		 xor	 ecx, ecx
  019c7	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  019cb	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  019ce	33 c0		 xor	 eax, eax
  019d0	66 8b 42 4c	 mov	 ax, WORD PTR [edx+76]
  019d4	3b c8		 cmp	 ecx, eax
  019d6	7c 12		 jl	 SHORT $L166660
$L166661:
  019d8	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  019db	33 d2		 xor	 edx, edx
  019dd	66 8b 51 50	 mov	 dx, WORD PTR [ecx+80]
  019e1	39 55 ec	 cmp	 DWORD PTR _textLen$[ebp], edx
  019e4	0f 8d ac 00 00
	00		 jge	 $L166659
$L166660:

; 1423 : 							charChanged = True;

  019ea	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _charChanged$[ebp], 1

; 1424 : 							if (insertMode) {

  019f1	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  019f4	0f bf 48 58	 movsx	 ecx, WORD PTR [eax+88]
  019f8	85 c9		 test	 ecx, ecx
  019fa	74 42		 je	 SHORT $L166662

; 1425 : 								str = (char *)*text;

  019fc	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  019ff	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01a02	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01a07	89 45 f0	 mov	 DWORD PTR _str$[ebp], eax

; 1426 : 
; 1427 : 								// shift it up one
; 1428 : 								for(int i = textLen;i >= cursor;i--)

  01a0a	8b 55 ec	 mov	 edx, DWORD PTR _textLen$[ebp]
  01a0d	89 55 bc	 mov	 DWORD PTR _i$166664[ebp], edx
  01a10	eb 09		 jmp	 SHORT $L166665
$L166666:
  01a12	8b 45 bc	 mov	 eax, DWORD PTR _i$166664[ebp]
  01a15	83 e8 01	 sub	 eax, 1
  01a18	89 45 bc	 mov	 DWORD PTR _i$166664[ebp], eax
$L166665:
  01a1b	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01a1e	33 d2		 xor	 edx, edx
  01a20	66 8b 51 34	 mov	 dx, WORD PTR [ecx+52]
  01a24	39 55 bc	 cmp	 DWORD PTR _i$166664[ebp], edx
  01a27	7c 13		 jl	 SHORT $L166667

; 1429 : 									*(str + i + 1) = *(str + i);

  01a29	8b 45 f0	 mov	 eax, DWORD PTR _str$[ebp]
  01a2c	03 45 bc	 add	 eax, DWORD PTR _i$166664[ebp]
  01a2f	8b 4d f0	 mov	 ecx, DWORD PTR _str$[ebp]
  01a32	03 4d bc	 add	 ecx, DWORD PTR _i$166664[ebp]
  01a35	8a 11		 mov	 dl, BYTE PTR [ecx]
  01a37	88 50 01	 mov	 BYTE PTR [eax+1], dl
  01a3a	eb d6		 jmp	 SHORT $L166666
$L166667:

; 1431 : 							else {

  01a3c	eb 26		 jmp	 SHORT $L166670
$L166662:

; 1432 : 								str = (char *)*text;

  01a3e	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01a41	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01a44	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01a49	89 45 f0	 mov	 DWORD PTR _str$[ebp], eax

; 1433 : 
; 1434 : 								if (cursor == textLen)

  01a4c	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01a4f	33 c9		 xor	 ecx, ecx
  01a51	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  01a55	3b 4d ec	 cmp	 ecx, DWORD PTR _textLen$[ebp]
  01a58	75 0a		 jne	 SHORT $L166670

; 1435 : 									*(str + textLen + 1) = 0;

  01a5a	8b 55 f0	 mov	 edx, DWORD PTR _str$[ebp]
  01a5d	03 55 ec	 add	 edx, DWORD PTR _textLen$[ebp]
  01a60	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0
$L166670:

; 1437 : 
; 1438 : 							str = (char *)*text;

  01a64	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01a67	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01a6a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01a6f	89 45 f0	 mov	 DWORD PTR _str$[ebp], eax

; 1439 : 							*(str + cursor) = (char) msg;

  01a72	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01a75	33 c9		 xor	 ecx, ecx
  01a77	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  01a7b	8b 55 f0	 mov	 edx, DWORD PTR _str$[ebp]
  01a7e	8a 45 dc	 mov	 al, BYTE PTR _msg$[ebp]
  01a81	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1440 : 
; 1441 : 							++(cursor);

  01a84	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01a87	66 8b 51 34	 mov	 dx, WORD PTR [ecx+52]
  01a8b	66 83 c2 01	 add	 dx, 1
  01a8f	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01a92	66 89 50 34	 mov	 WORD PTR [eax+52], dx
$L166659:
$L166623:

; 1447 : 
; 1448 : 			// if delete, we delete the character at cursor
; 1449 : 			if (deleteChar) {

  01a96	83 7d fc 00	 cmp	 DWORD PTR _deleteChar$[ebp], 0
  01a9a	74 47		 je	 SHORT $L166678

; 1450 : 				charChanged = True;

  01a9c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _charChanged$[ebp], 1

; 1451 : 				str = (char *)*text;

  01aa3	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01aa6	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01aa9	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01aae	89 45 f0	 mov	 DWORD PTR _str$[ebp], eax

; 1452 : 
; 1453 : 				// collapse the string from cursor on
; 1454 : 				for (int i = cursor;i < textLen;i++)

  01ab1	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01ab4	33 d2		 xor	 edx, edx
  01ab6	66 8b 51 34	 mov	 dx, WORD PTR [ecx+52]
  01aba	89 55 b8	 mov	 DWORD PTR _i$166675[ebp], edx
  01abd	eb 09		 jmp	 SHORT $L166676
$L166677:
  01abf	8b 45 b8	 mov	 eax, DWORD PTR _i$166675[ebp]
  01ac2	83 c0 01	 add	 eax, 1
  01ac5	89 45 b8	 mov	 DWORD PTR _i$166675[ebp], eax
$L166676:
  01ac8	8b 4d b8	 mov	 ecx, DWORD PTR _i$166675[ebp]
  01acb	3b 4d ec	 cmp	 ecx, DWORD PTR _textLen$[ebp]
  01ace	7d 13		 jge	 SHORT $L166678

; 1455 : 					*(str + i) = *(str + i + 1);

  01ad0	8b 55 f0	 mov	 edx, DWORD PTR _str$[ebp]
  01ad3	03 55 b8	 add	 edx, DWORD PTR _i$166675[ebp]
  01ad6	8b 45 f0	 mov	 eax, DWORD PTR _str$[ebp]
  01ad9	03 45 b8	 add	 eax, DWORD PTR _i$166675[ebp]
  01adc	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  01adf	88 0a		 mov	 BYTE PTR [edx], cl
  01ae1	eb dc		 jmp	 SHORT $L166677
$L166678:

; 1458 : 
; 1459 : 		break;

  01ae3	e9 00 02 00 00	 jmp	 $L166618
$L166679:

; 1460 : 
; 1461 : 		case SOL_Event::MouseDown:
; 1462 : 			// move cursor to closest character division
; 1463 : 			clearEditLine = False;

  01ae8	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01aeb	66 c7 42 5a 00
	00		 mov	 WORD PTR [edx+90], 0

; 1464 : 			mousept.x = evt.where.x;

  01af1	8b 45 08	 mov	 eax, DWORD PTR _evt$[ebp]
  01af4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01af7	89 4d f4	 mov	 DWORD PTR _mousept$[ebp], ecx

; 1465 : 			mousept.y = evt.where.y;

  01afa	8b 55 08	 mov	 edx, DWORD PTR _evt$[ebp]
  01afd	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01b00	89 45 f8	 mov	 DWORD PTR _mousept$[ebp+4], eax

; 1466 : 
; 1467 :          int ps = fntMgr->PointSize(False);

  01b03	6a 00		 push	 0
  01b05	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01b08	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  01b0e	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  01b13	89 45 d8	 mov	 DWORD PTR _ps$166680[ebp], eax

; 1468 :          SOL_Rect intersectRect(textBox);

  01b16	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01b19	83 c2 10	 add	 edx, 16			; 00000010H
  01b1c	52		 push	 edx
  01b1d	8d 4d c8	 lea	 ecx, DWORD PTR _intersectRect$166681[ebp]
  01b20	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 1469 :          intersectRect.Offset(window.A.x, window.A.y);

  01b25	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01b28	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  01b2b	51		 push	 ecx
  01b2c	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01b2f	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  01b32	50		 push	 eax
  01b33	8d 4d c8	 lea	 ecx, DWORD PTR _intersectRect$166681[ebp]
  01b36	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 1470 : 
; 1471 : 			if (intersectRect.Intersect(mousept)) {

  01b3b	83 ec 08	 sub	 esp, 8
  01b3e	8b cc		 mov	 ecx, esp
  01b40	8d 55 f4	 lea	 edx, DWORD PTR _mousept$[ebp]
  01b43	52		 push	 edx
  01b44	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01b49	8d 4d c8	 lea	 ecx, DWORD PTR _intersectRect$166681[ebp]
  01b4c	e8 00 00 00 00	 call	 ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z ; SOL_Rect::Intersect
  01b51	85 c0		 test	 eax, eax
  01b53	0f 84 8f 01 00
	00		 je	 $L166689

; 1472 :          	uint* indices = (uint*) *lineIndicesID;

  01b59	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01b5c	83 c1 32	 add	 ecx, 50			; 00000032H
  01b5f	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01b64	89 45 b0	 mov	 DWORD PTR _indices$166684[ebp], eax

; 1473 : 
; 1474 :             for (int line = 0; line < indices [0]; line++) {

  01b67	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _line$166686[ebp], 0
  01b6e	eb 09		 jmp	 SHORT $L166687
$L166688:
  01b70	8b 45 b4	 mov	 eax, DWORD PTR _line$166686[ebp]
  01b73	83 c0 01	 add	 eax, 1
  01b76	89 45 b4	 mov	 DWORD PTR _line$166686[ebp], eax
$L166687:
  01b79	8b 4d b0	 mov	 ecx, DWORD PTR _indices$166684[ebp]
  01b7c	8b 55 b4	 mov	 edx, DWORD PTR _line$166686[ebp]
  01b7f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  01b81	0f 83 61 01 00
	00		 jae	 $L166689

; 1475 :                SOL_Rect r(0,0,textBox.Xlen()-1,ps);

  01b87	8b 45 d8	 mov	 eax, DWORD PTR _ps$166680[ebp]
  01b8a	50		 push	 eax
  01b8b	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01b8e	83 c1 10	 add	 ecx, 16			; 00000010H
  01b91	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  01b96	83 e8 01	 sub	 eax, 1
  01b99	50		 push	 eax
  01b9a	6a 00		 push	 0
  01b9c	6a 00		 push	 0
  01b9e	8d 4d a0	 lea	 ecx, DWORD PTR _r$166690[ebp]
  01ba1	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 1476 :                r.Offset(intersectRect.A.x,intersectRect.A.y+(ps*line));

  01ba6	8b 4d d8	 mov	 ecx, DWORD PTR _ps$166680[ebp]
  01ba9	0f af 4d b4	 imul	 ecx, DWORD PTR _line$166686[ebp]
  01bad	8b 55 cc	 mov	 edx, DWORD PTR _intersectRect$166681[ebp+4]
  01bb0	03 d1		 add	 edx, ecx
  01bb2	52		 push	 edx
  01bb3	8b 45 c8	 mov	 eax, DWORD PTR _intersectRect$166681[ebp]
  01bb6	50		 push	 eax
  01bb7	8d 4d a0	 lea	 ecx, DWORD PTR _r$166690[ebp]
  01bba	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 1477 :                if (r.Intersect(mousept)) {

  01bbf	83 ec 08	 sub	 esp, 8
  01bc2	8b cc		 mov	 ecx, esp
  01bc4	8d 55 f4	 lea	 edx, DWORD PTR _mousept$[ebp]
  01bc7	52		 push	 edx
  01bc8	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  01bcd	8d 4d a0	 lea	 ecx, DWORD PTR _r$166690[ebp]
  01bd0	e8 00 00 00 00	 call	 ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z ; SOL_Rect::Intersect
  01bd5	85 c0		 test	 eax, eax
  01bd7	0f 84 06 01 00
	00		 je	 $L166700

; 1478 :                   char *str = (char *) *text;

  01bdd	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01be0	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01be3	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01be8	89 45 94	 mov	 DWORD PTR _str$166693[ebp], eax

; 1479 :                   int lineSize = (indices[0] > line+1) ? indices[line+2] - indices[line+1] : strlen(str)-indices[line+1];

  01beb	8b 45 b4	 mov	 eax, DWORD PTR _line$166686[ebp]
  01bee	83 c0 01	 add	 eax, 1
  01bf1	8b 4d b0	 mov	 ecx, DWORD PTR _indices$166684[ebp]
  01bf4	39 01		 cmp	 DWORD PTR [ecx], eax
  01bf6	76 1c		 jbe	 SHORT $L174061
  01bf8	8b 55 b4	 mov	 edx, DWORD PTR _line$166686[ebp]
  01bfb	8b 45 b0	 mov	 eax, DWORD PTR _indices$166684[ebp]
  01bfe	8b 4d b4	 mov	 ecx, DWORD PTR _line$166686[ebp]
  01c01	8b 75 b0	 mov	 esi, DWORD PTR _indices$166684[ebp]
  01c04	8b 54 90 08	 mov	 edx, DWORD PTR [eax+edx*4+8]
  01c08	2b 54 8e 04	 sub	 edx, DWORD PTR [esi+ecx*4+4]
  01c0c	89 95 74 ff ff
	ff		 mov	 DWORD PTR -140+[ebp], edx
  01c12	eb 1c		 jmp	 SHORT $L174062
$L174061:
  01c14	8b 45 94	 mov	 eax, DWORD PTR _str$166693[ebp]
  01c17	50		 push	 eax
  01c18	e8 00 00 00 00	 call	 _strlen
  01c1d	83 c4 04	 add	 esp, 4
  01c20	8b 4d b4	 mov	 ecx, DWORD PTR _line$166686[ebp]
  01c23	8b 55 b0	 mov	 edx, DWORD PTR _indices$166684[ebp]
  01c26	2b 44 8a 04	 sub	 eax, DWORD PTR [edx+ecx*4+4]
  01c2a	89 85 74 ff ff
	ff		 mov	 DWORD PTR -140+[ebp], eax
$L174062:
  01c30	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR -140+[ebp]
  01c36	89 45 98	 mov	 DWORD PTR _lineSize$166695[ebp], eax

; 1480 : 
; 1481 :                   int xPos = intersectRect.A.x;

  01c39	8b 4d c8	 mov	 ecx, DWORD PTR _intersectRect$166681[ebp]
  01c3c	89 4d 9c	 mov	 DWORD PTR _xPos$166696[ebp], ecx

; 1482 :                   for (int loop = 0; loop < lineSize; loop++) {

  01c3f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _loop$166697[ebp], 0
  01c46	eb 09		 jmp	 SHORT $L166698
$L166699:
  01c48	8b 55 90	 mov	 edx, DWORD PTR _loop$166697[ebp]
  01c4b	83 c2 01	 add	 edx, 1
  01c4e	89 55 90	 mov	 DWORD PTR _loop$166697[ebp], edx
$L166698:
  01c51	8b 45 90	 mov	 eax, DWORD PTR _loop$166697[ebp]
  01c54	3b 45 98	 cmp	 eax, DWORD PTR _lineSize$166695[ebp]
  01c57	0f 8d 86 00 00
	00		 jge	 $L166700

; 1483 : 							str = (char *)*text;

  01c5d	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01c60	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01c63	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01c68	89 45 94	 mov	 DWORD PTR _str$166693[ebp], eax

; 1484 :                      int cWide = fntMgr->CharWidth(*(str+loop));

  01c6b	6a 01		 push	 1
  01c6d	8b 4d 94	 mov	 ecx, DWORD PTR _str$166693[ebp]
  01c70	03 4d 90	 add	 ecx, DWORD PTR _loop$166697[ebp]
  01c73	8a 11		 mov	 dl, BYTE PTR [ecx]
  01c75	52		 push	 edx
  01c76	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01c79	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  01c7f	e8 00 00 00 00	 call	 ?CharWidth@FontMgr@@QAEEEH@Z ; FontMgr::CharWidth
  01c84	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01c89	89 45 8c	 mov	 DWORD PTR _cWide$166702[ebp], eax

; 1485 :                      if (mousept.x > xPos && mousept.x < xPos+cWide-1) {

  01c8c	8b 4d f4	 mov	 ecx, DWORD PTR _mousept$[ebp]
  01c8f	3b 4d 9c	 cmp	 ecx, DWORD PTR _xPos$166696[ebp]
  01c92	7e 41		 jle	 SHORT $L166703
  01c94	8b 55 8c	 mov	 edx, DWORD PTR _cWide$166702[ebp]
  01c97	8b 45 9c	 mov	 eax, DWORD PTR _xPos$166696[ebp]
  01c9a	8d 4c 10 ff	 lea	 ecx, DWORD PTR [eax+edx-1]
  01c9e	39 4d f4	 cmp	 DWORD PTR _mousept$[ebp], ecx
  01ca1	7d 32		 jge	 SHORT $L166703

; 1486 :                         EraseCursor();

  01ca3	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01ca6	e8 00 00 00 00	 call	 ?EraseCursor@EditClass@@QAEXXZ ; EditClass::EraseCursor

; 1487 : 								indices = (uint *)*lineIndicesID;

  01cab	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01cae	83 c1 32	 add	 ecx, 50			; 00000032H
  01cb1	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01cb6	89 45 b0	 mov	 DWORD PTR _indices$166684[ebp], eax

; 1488 :                         cursor = indices[line+1]+loop;

  01cb9	8b 55 b4	 mov	 edx, DWORD PTR _line$166686[ebp]
  01cbc	8b 45 b0	 mov	 eax, DWORD PTR _indices$166684[ebp]
  01cbf	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  01cc3	03 4d 90	 add	 ecx, DWORD PTR _loop$166697[ebp]
  01cc6	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01cc9	66 89 4a 34	 mov	 WORD PTR [edx+52], cx

; 1489 :                         DrawCursor();

  01ccd	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01cd0	e8 00 00 00 00	 call	 ?DrawCursor@EditClass@@QAEXXZ ; EditClass::DrawCursor
$L166703:

; 1491 :                      xPos += cWide;

  01cd5	8b 45 9c	 mov	 eax, DWORD PTR _xPos$166696[ebp]
  01cd8	03 45 8c	 add	 eax, DWORD PTR _cWide$166702[ebp]
  01cdb	89 45 9c	 mov	 DWORD PTR _xPos$166696[ebp], eax

; 1492 :                   }

  01cde	e9 65 ff ff ff	 jmp	 $L166699
$L166700:

; 1494 :             }

  01ce3	e9 88 fe ff ff	 jmp	 $L166688
$L166689:
$L166618:

; 1498 : 
; 1499 : 	if (charChanged) {

  01ce8	83 7d e4 00	 cmp	 DWORD PTR _charChanged$[ebp], 0
  01cec	0f 84 9b 00 00
	00		 je	 $L166705

; 1500 : 		// if we have changed we redraw the entire field in the text box
; 1501 : 		EraseCursor();

  01cf2	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01cf5	e8 00 00 00 00	 call	 ?EraseCursor@EditClass@@QAEXXZ ; EditClass::EraseCursor

; 1502 : 
; 1503 : 		// erase the text area of the FBM
; 1504 : 		fntMgr->Erase(textBox);

  01cfa	6a 01		 push	 1
  01cfc	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01cff	83 c1 10	 add	 ecx, 16			; 00000010H
  01d02	51		 push	 ecx
  01d03	8b 55 80	 mov	 edx, DWORD PTR _this$[ebp]
  01d06	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  01d0c	e8 00 00 00 00	 call	 ?Erase@FontMgr@@QAEXAAVSOL_Rect@@H@Z ; FontMgr::Erase

; 1505 : 		fntMgr->DrawTextBox();

  01d11	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01d14	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  01d1a	e8 00 00 00 00	 call	 ?DrawTextBox@FontMgr@@QAEXXZ ; FontMgr::DrawTextBox

; 1506 : 
; 1507 : 		GetLineIndices();

  01d1f	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01d22	8b 11		 mov	 edx, DWORD PTR [ecx]
  01d24	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01d27	ff 52 04	 call	 DWORD PTR [edx+4]

; 1508 : 		DrawCursor();

  01d2a	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01d2d	e8 00 00 00 00	 call	 ?DrawCursor@EditClass@@QAEXXZ ; EditClass::DrawCursor

; 1509 : 
; 1510 : 		changed = True;

  01d32	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01d35	c7 40 6c 01 00
	00 00		 mov	 DWORD PTR [eax+108], 1

; 1511 : 
; 1512 : 	   memMgr->Realloc(textID,strlen(*editTextID)+1);

  01d3c	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01d3f	83 c1 64	 add	 ecx, 100		; 00000064H
  01d42	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  01d47	50		 push	 eax
  01d48	e8 00 00 00 00	 call	 _strlen
  01d4d	83 c4 04	 add	 esp, 4
  01d50	83 c0 01	 add	 eax, 1
  01d53	50		 push	 eax
  01d54	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01d57	83 c1 66	 add	 ecx, 102		; 00000066H
  01d5a	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01d5f	50		 push	 eax
  01d60	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  01d66	e8 00 00 00 00	 call	 ?Realloc@MemoryMgr@@QAEXGI@Z ; MemoryMgr::Realloc

; 1513 : 	   strcpy(*textID,*editTextID);

  01d6b	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01d6e	83 c1 64	 add	 ecx, 100		; 00000064H
  01d71	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  01d76	50		 push	 eax
  01d77	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01d7a	83 c1 66	 add	 ecx, 102		; 00000066H
  01d7d	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  01d82	50		 push	 eax
  01d83	e8 00 00 00 00	 call	 _strcpy
  01d88	83 c4 08	 add	 esp, 8

; 1515 : 	else {

  01d8b	eb 28		 jmp	 SHORT $L166708
$L166705:

; 1516 : 		if (oldCursor == cursor) {

  01d8d	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01d90	33 d2		 xor	 edx, edx
  01d92	66 8b 51 34	 mov	 dx, WORD PTR [ecx+52]
  01d96	39 55 e0	 cmp	 DWORD PTR _oldCursor$[ebp], edx
  01d99	75 0a		 jne	 SHORT $L166707

; 1517 : 			// cursor is in the same place -- keep flashing
; 1518 : 			FlashCursor();

  01d9b	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01d9e	e8 00 00 00 00	 call	 ?FlashCursor@EditClass@@QAEXXZ ; EditClass::FlashCursor

; 1520 : 		else {

  01da3	eb 10		 jmp	 SHORT $L166708
$L166707:

; 1521 : 			// cursor has moved -- ensure it is on at new position
; 1522 : 			EraseCursor();

  01da5	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01da8	e8 00 00 00 00	 call	 ?EraseCursor@EditClass@@QAEXXZ ; EditClass::EraseCursor

; 1523 : 			DrawCursor();

  01dad	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01db0	e8 00 00 00 00	 call	 ?DrawCursor@EditClass@@QAEXXZ ; EditClass::DrawCursor
$L166708:

; 1526 : 
; 1527 : 	if ( si )

  01db5	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01db8	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  01dbc	74 12		 je	 SHORT $L166709

; 1528 : 	   graphMgr->UpdateScreenItem(si);

  01dbe	8b 4d 80	 mov	 ecx, DWORD PTR _this$[ebp]
  01dc1	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  01dc4	52		 push	 edx
  01dc5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  01dcb	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem
$L166709:

; 1529 : 
; 1530 :    return changed;

  01dd0	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  01dd3	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]

; 1531 : }

  01dd6	5e		 pop	 esi
  01dd7	8b e5		 mov	 esp, ebp
  01dd9	5d		 pop	 ebp
  01dda	c2 04 00	 ret	 4
?EditText@EditClass@@QAEHAAVSOL_Event@@@Z ENDP		; EditClass::EditText
_TEXT	ENDS
PUBLIC	?SetBM@FontMgr@@QAEXVMemID@@@Z			; FontMgr::SetBM
_TEXT	SEGMENT
_this$ = -8
?UpdateFontMgr@EditClass@@QAEXXZ PROC NEAR		; EditClass::UpdateFontMgr

; 1536 : {

  01ddd	55		 push	 ebp
  01dde	8b ec		 mov	 ebp, esp
  01de0	83 ec 08	 sub	 esp, 8
  01de3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1537 : 	fntMgr->SetBM(BM);

  01de6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01de9	83 c0 04	 add	 eax, 4
  01dec	51		 push	 ecx
  01ded	8b cc		 mov	 ecx, esp
  01def	50		 push	 eax
  01df0	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01df5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01df8	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  01dfe	e8 00 00 00 00	 call	 ?SetBM@FontMgr@@QAEXVMemID@@@Z ; FontMgr::SetBM

; 1538 : 	fntMgr->SetFont(font);

  01e03	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01e06	33 c0		 xor	 eax, eax
  01e08	66 8b 42 30	 mov	 ax, WORD PTR [edx+48]
  01e0c	50		 push	 eax
  01e0d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e10	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  01e16	e8 00 00 00 00	 call	 ?SetFont@FontMgr@@QAEXH@Z ; FontMgr::SetFont

; 1539 : }

  01e1b	8b e5		 mov	 esp, ebp
  01e1d	5d		 pop	 ebp
  01e1e	c3		 ret	 0
?UpdateFontMgr@EditClass@@QAEXXZ ENDP			; EditClass::UpdateFontMgr
_TEXT	ENDS
PUBLIC	?SetFlash@EditClass@@QAEXXZ			; EditClass::SetFlash
EXTRN	?InvertRect@FontMgr@@QAEXVMemID@@HVSOL_Rect@@DDH@Z:NEAR ; FontMgr::InvertRect
EXTRN	?TextWidth@FontMgr@@QAEHVMemID@@HH@Z:NEAR	; FontMgr::TextWidth
_TEXT	SEGMENT
_this$ = -40
_index$ = -8
_left$ = -12
_frameSize$ = -4
_tWidth$166722 = -16
_ps$166724 = -24
_ch$166727 = -20
?DrawCursor@EditClass@@QAEXXZ PROC NEAR			; EditClass::DrawCursor

; 1544 : {

  01e1f	55		 push	 ebp
  01e20	8b ec		 mov	 ebp, esp
  01e22	83 ec 28	 sub	 esp, 40			; 00000028H
  01e25	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 1545 : 	int index = 0;

  01e28	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0

; 1546 : 
; 1547 : 	int left;
; 1548 : 	int frameSize = 3;

  01e2f	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _frameSize$[ebp], 3

; 1549 : 	if (borderColor == -1) frameSize = 0;

  01e36	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01e39	83 78 20 ff	 cmp	 DWORD PTR [eax+32], -1
  01e3d	75 07		 jne	 SHORT $L166720
  01e3f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _frameSize$[ebp], 0
$L166720:

; 1550 : 
; 1551 : 	if (!cursorOn) {

  01e46	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e49	33 d2		 xor	 edx, edx
  01e4b	66 8b 51 3a	 mov	 dx, WORD PTR [ecx+58]
  01e4f	85 d2		 test	 edx, edx
  01e51	0f 85 a5 01 00
	00		 jne	 $L166721

; 1552 : 		// The cursor box
; 1553 : 		SetCursor();

  01e57	6a ff		 push	 -1
  01e59	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e5c	e8 00 00 00 00	 call	 ?SetCursor@EditClass@@QAEXH@Z ; EditClass::SetCursor

; 1554 : 
; 1555 :       int tWidth = fntMgr->TextWidth(text,0,cursor); //cursor - cursorX,cursorX);

  01e61	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01e64	33 c9		 xor	 ecx, ecx
  01e66	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  01e6a	51		 push	 ecx
  01e6b	6a 00		 push	 0
  01e6d	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01e70	83 c2 0c	 add	 edx, 12			; 0000000cH
  01e73	51		 push	 ecx
  01e74	8b cc		 mov	 ecx, esp
  01e76	52		 push	 edx
  01e77	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01e7c	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01e7f	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  01e85	e8 00 00 00 00	 call	 ?TextWidth@FontMgr@@QAEHVMemID@@HH@Z ; FontMgr::TextWidth
  01e8a	89 45 f0	 mov	 DWORD PTR _tWidth$166722[ebp], eax

; 1556 :       int ps=fntMgr->PointSize(False)-1;

  01e8d	6a 00		 push	 0
  01e8f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e92	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  01e98	e8 00 00 00 00	 call	 ?PointSize@FontMgr@@QAEHH@Z ; FontMgr::PointSize
  01e9d	83 e8 01	 sub	 eax, 1
  01ea0	89 45 e8	 mov	 DWORD PTR _ps$166724[ebp], eax

; 1557 : 		ps = (ps * SCIRESY + yRes - 1) / yRes;

  01ea3	8b 55 e8	 mov	 edx, DWORD PTR _ps$166724[ebp]
  01ea6	69 d2 e0 01 00
	00		 imul	 edx, 480		; 000001e0H
  01eac	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01eaf	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01eb2	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  01eb6	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01eb9	99		 cdq
  01eba	f7 79 60	 idiv	 DWORD PTR [ecx+96]
  01ebd	89 45 e8	 mov	 DWORD PTR _ps$166724[ebp], eax

; 1558 : 
; 1559 : 		cursorRect.A.x = left = textBox.A.x+tWidth;

  01ec0	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01ec3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  01ec6	03 45 f0	 add	 eax, DWORD PTR _tWidth$166722[ebp]
  01ec9	89 45 f4	 mov	 DWORD PTR _left$[ebp], eax
  01ecc	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01ecf	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  01ed2	89 51 3c	 mov	 DWORD PTR [ecx+60], edx

; 1560 : 		if (insertMode) {

  01ed5	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01ed8	0f bf 48 58	 movsx	 ecx, WORD PTR [eax+88]
  01edc	85 c9		 test	 ecx, ecx
  01ede	74 2e		 je	 SHORT $L166725

; 1561 :          cursorRect.A.y = textBox.A.y+ps*(cursorY+1);

  01ee0	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01ee3	33 c0		 xor	 eax, eax
  01ee5	66 8b 42 38	 mov	 ax, WORD PTR [edx+56]
  01ee9	83 c0 01	 add	 eax, 1
  01eec	8b 4d e8	 mov	 ecx, DWORD PTR _ps$166724[ebp]
  01eef	0f af c8	 imul	 ecx, eax
  01ef2	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01ef5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01ef8	03 c1		 add	 eax, ecx
  01efa	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01efd	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 1562 : 			cursorRect.B.y = cursorRect.A.y;

  01f00	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01f03	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01f06	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  01f09	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 1563 : 		} else {

  01f0c	eb 30		 jmp	 SHORT $L166726
$L166725:

; 1564 : 			cursorRect.A.y = textBox.A.y+ps*cursorY;

  01f0e	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01f11	33 c0		 xor	 eax, eax
  01f13	66 8b 42 38	 mov	 ax, WORD PTR [edx+56]
  01f17	8b 4d e8	 mov	 ecx, DWORD PTR _ps$166724[ebp]
  01f1a	0f af c8	 imul	 ecx, eax
  01f1d	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01f20	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01f23	03 c1		 add	 eax, ecx
  01f25	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f28	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 1565 : 			cursorRect.B.y = cursorRect.A.y+ps-1;

  01f2b	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01f2e	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  01f31	8b 4d e8	 mov	 ecx, DWORD PTR _ps$166724[ebp]
  01f34	8d 54 08 ff	 lea	 edx, DWORD PTR [eax+ecx-1]
  01f38	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01f3b	89 50 48	 mov	 DWORD PTR [eax+72], edx
$L166726:

; 1567 : 
; 1568 : 		// we flash the character cel unless we are at end of string
; 1569 : 		index += cursor;

  01f3e	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f41	33 d2		 xor	 edx, edx
  01f43	66 8b 51 34	 mov	 dx, WORD PTR [ecx+52]
  01f47	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  01f4a	03 c2		 add	 eax, edx
  01f4c	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax

; 1570 : 		char ch = ((char *)*text)[index];

  01f4f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f52	83 c1 0c	 add	 ecx, 12			; 0000000cH
  01f55	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  01f5a	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  01f5d	8a 14 08	 mov	 dl, BYTE PTR [eax+ecx]
  01f60	88 55 ec	 mov	 BYTE PTR _ch$166727[ebp], dl

; 1571 : 
; 1572 : 		if ( ch ) {

  01f63	0f be 45 ec	 movsx	 eax, BYTE PTR _ch$166727[ebp]
  01f67	85 c0		 test	 eax, eax
  01f69	74 28		 je	 SHORT $L166729

; 1573 : 			cursorRect.B.x = left + fntMgr->CharWidth ( ch ) - 1;

  01f6b	6a 01		 push	 1
  01f6d	8a 4d ec	 mov	 cl, BYTE PTR _ch$166727[ebp]
  01f70	51		 push	 ecx
  01f71	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01f74	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  01f7a	e8 00 00 00 00	 call	 ?CharWidth@FontMgr@@QAEEEH@Z ; FontMgr::CharWidth
  01f7f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01f84	8b 4d f4	 mov	 ecx, DWORD PTR _left$[ebp]
  01f87	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  01f8b	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01f8e	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 1575 : 		else {

  01f91	eb 24		 jmp	 SHORT $L166730
$L166729:

; 1576 : 			cursorRect.B.x = left + fntMgr->CharWidth(' ') - 1;

  01f93	6a 01		 push	 1
  01f95	6a 20		 push	 32			; 00000020H
  01f97	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f9a	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  01fa0	e8 00 00 00 00	 call	 ?CharWidth@FontMgr@@QAEEEH@Z ; FontMgr::CharWidth
  01fa5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01faa	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  01fad	8d 44 02 ff	 lea	 eax, DWORD PTR [edx+eax-1]
  01fb1	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fb4	89 41 44	 mov	 DWORD PTR [ecx+68], eax
$L166730:

; 1578 : 
; 1579 : 		// toggle cursor
; 1580 : 		fntMgr->InvertRect(
; 1581 : 					  BM,
; 1582 : 					  BMWidth,
; 1583 : 					  cursorRect,
; 1584 : 					  fore,
; 1585 : 					  back);

  01fb7	6a 01		 push	 1
  01fb9	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01fbc	8a 42 2a	 mov	 al, BYTE PTR [edx+42]
  01fbf	50		 push	 eax
  01fc0	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fc3	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  01fc6	52		 push	 edx
  01fc7	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01fca	83 c0 3c	 add	 eax, 60			; 0000003cH
  01fcd	83 ec 10	 sub	 esp, 16			; 00000010H
  01fd0	8b cc		 mov	 ecx, esp
  01fd2	50		 push	 eax
  01fd3	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  01fd8	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01fdb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01fde	52		 push	 edx
  01fdf	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01fe2	83 c0 04	 add	 eax, 4
  01fe5	51		 push	 ecx
  01fe6	8b cc		 mov	 ecx, esp
  01fe8	50		 push	 eax
  01fe9	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  01fee	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01ff1	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  01ff7	e8 00 00 00 00	 call	 ?InvertRect@FontMgr@@QAEXVMemID@@HVSOL_Rect@@DDH@Z ; FontMgr::InvertRect
$L166721:

; 1587 : 	cursorOn = True;

  01ffc	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01fff	66 c7 42 3a 01
	00		 mov	 WORD PTR [edx+58], 1

; 1588 : 	SetFlash();

  02005	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  02008	e8 00 00 00 00	 call	 ?SetFlash@EditClass@@QAEXXZ ; EditClass::SetFlash

; 1589 : }

  0200d	8b e5		 mov	 esp, ebp
  0200f	5d		 pop	 ebp
  02010	c3		 ret	 0
?DrawCursor@EditClass@@QAEXXZ ENDP			; EditClass::DrawCursor
_this$ = -12
?EraseCursor@EditClass@@QAEXXZ PROC NEAR		; EditClass::EraseCursor

; 1594 : {

  02011	55		 push	 ebp
  02012	8b ec		 mov	 ebp, esp
  02014	83 ec 0c	 sub	 esp, 12			; 0000000cH
  02017	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1595 : 
; 1596 : 	if (cursorOn)

  0201a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0201d	33 c9		 xor	 ecx, ecx
  0201f	66 8b 48 3a	 mov	 cx, WORD PTR [eax+58]
  02023	85 c9		 test	 ecx, ecx
  02025	74 45		 je	 SHORT $L166736

; 1598 : 					  BM,
; 1599 : 					  BMWidth,
; 1600 : 					  cursorRect,
; 1601 : 					  fore,
; 1602 : 					  back);

  02027	6a 01		 push	 1
  02029	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0202c	8a 42 2a	 mov	 al, BYTE PTR [edx+42]
  0202f	50		 push	 eax
  02030	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02033	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  02036	52		 push	 edx
  02037	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0203a	83 c0 3c	 add	 eax, 60			; 0000003cH
  0203d	83 ec 10	 sub	 esp, 16			; 00000010H
  02040	8b cc		 mov	 ecx, esp
  02042	50		 push	 eax
  02043	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  02048	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0204b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0204e	52		 push	 edx
  0204f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  02052	83 c0 04	 add	 eax, 4
  02055	51		 push	 ecx
  02056	8b cc		 mov	 ecx, esp
  02058	50		 push	 eax
  02059	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0205e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02061	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  02067	e8 00 00 00 00	 call	 ?InvertRect@FontMgr@@QAEXVMemID@@HVSOL_Rect@@DDH@Z ; FontMgr::InvertRect
$L166736:

; 1603 : 	cursorOn = False;

  0206c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0206f	66 c7 42 3a 00
	00		 mov	 WORD PTR [edx+58], 0

; 1604 : 	SetFlash();

  02075	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02078	e8 00 00 00 00	 call	 ?SetFlash@EditClass@@QAEXXZ ; EditClass::SetFlash

; 1605 : }

  0207d	8b e5		 mov	 esp, ebp
  0207f	5d		 pop	 ebp
  02080	c3		 ret	 0
?EraseCursor@EditClass@@QAEXXZ ENDP			; EditClass::EraseCursor
_TEXT	ENDS
EXTRN	?timeMgr@@3PAVTimeMgr@@A:DWORD			; timeMgr
_TEXT	SEGMENT
_this$ = -12
?FlashCursor@EditClass@@QAEXXZ PROC NEAR		; EditClass::FlashCursor

; 1610 : {

  02081	55		 push	 ebp
  02082	8b ec		 mov	 ebp, esp
  02084	83 ec 0c	 sub	 esp, 12			; 0000000cH
  02087	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1611 : 
; 1612 : 	if (flash < timeMgr->GetTickCount()) {

  0208a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0208f	8b 10		 mov	 edx, DWORD PTR [eax]
  02091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  02097	ff 52 04	 call	 DWORD PTR [edx+4]
  0209a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0209d	39 41 54	 cmp	 DWORD PTR [ecx+84], eax
  020a0	73 62		 jae	 SHORT $L166742

; 1613 : 		fntMgr->InvertRect(
; 1614 : 					  BM,
; 1615 : 					  BMWidth,
; 1616 : 					  cursorRect,
; 1617 : 					  fore,
; 1618 : 					  back);

  020a2	6a 01		 push	 1
  020a4	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  020a7	8a 42 2a	 mov	 al, BYTE PTR [edx+42]
  020aa	50		 push	 eax
  020ab	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  020ae	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  020b1	52		 push	 edx
  020b2	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  020b5	83 c0 3c	 add	 eax, 60			; 0000003cH
  020b8	83 ec 10	 sub	 esp, 16			; 00000010H
  020bb	8b cc		 mov	 ecx, esp
  020bd	50		 push	 eax
  020be	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  020c3	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  020c6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  020c9	52		 push	 edx
  020ca	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  020cd	83 c0 04	 add	 eax, 4
  020d0	51		 push	 ecx
  020d1	8b cc		 mov	 ecx, esp
  020d3	50		 push	 eax
  020d4	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  020d9	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  020dc	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  020e2	e8 00 00 00 00	 call	 ?InvertRect@FontMgr@@QAEXVMemID@@HVSOL_Rect@@DDH@Z ; FontMgr::InvertRect

; 1619 : 		cursorOn = !cursorOn;

  020e7	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  020ea	33 c0		 xor	 eax, eax
  020ec	66 8b 42 3a	 mov	 ax, WORD PTR [edx+58]
  020f0	f7 d8		 neg	 eax
  020f2	1b c0		 sbb	 eax, eax
  020f4	40		 inc	 eax
  020f5	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  020f8	66 89 41 3a	 mov	 WORD PTR [ecx+58], ax

; 1620 : 		SetFlash();

  020fc	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  020ff	e8 00 00 00 00	 call	 ?SetFlash@EditClass@@QAEXXZ ; EditClass::SetFlash
$L166742:

; 1622 : }

  02104	8b e5		 mov	 esp, ebp
  02106	5d		 pop	 ebp
  02107	c3		 ret	 0
?FlashCursor@EditClass@@QAEXXZ ENDP			; EditClass::FlashCursor
_this$ = -4
?SetFlash@EditClass@@QAEXXZ PROC NEAR			; EditClass::SetFlash

; 1627 : {

  02108	55		 push	 ebp
  02109	8b ec		 mov	 ebp, esp
  0210b	51		 push	 ecx
  0210c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1628 : 	flash = 30L + timeMgr->GetTickCount();

  0210f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  02114	8b 10		 mov	 edx, DWORD PTR [eax]
  02116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?timeMgr@@3PAVTimeMgr@@A ; timeMgr
  0211c	ff 52 04	 call	 DWORD PTR [edx+4]
  0211f	83 c0 1e	 add	 eax, 30			; 0000001eH
  02122	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02125	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 1629 : }  

  02128	8b e5		 mov	 esp, ebp
  0212a	5d		 pop	 ebp
  0212b	c3		 ret	 0
?SetFlash@EditClass@@QAEXXZ ENDP			; EditClass::SetFlash
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
PUBLIC	?InvertRect@EditClass@@QAEXAAVSOL_Rect@@HDD@Z	; EditClass::InvertRect
_TEXT	SEGMENT
_theRect$ = 8
_BMWidth$ = 12
_fore$ = 16
_back$ = 20
_this$ = -20
_penAddr$ = -4
_vRun$ = -8
_hRun$ = -12
_i$166762 = -16
?InvertRect@EditClass@@QAEXAAVSOL_Rect@@HDD@Z PROC NEAR	; EditClass::InvertRect

; 1633 : {

  0212c	55		 push	 ebp
  0212d	8b ec		 mov	 ebp, esp
  0212f	83 ec 14	 sub	 esp, 20			; 00000014H
  02132	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1634 : 	// Switches the fore ground and background colors
; 1635 : 	// Calculate the box address
; 1636 : 	char* penAddr = (char*) memMgr->GetAddr(BM);

  02135	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02138	83 c1 04	 add	 ecx, 4
  0213b	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02140	50		 push	 eax
  02141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  02147	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr
  0214c	89 45 fc	 mov	 DWORD PTR _penAddr$[ebp], eax

; 1637 : 	penAddr += 	theRect.A.y*BMWidth + theRect.A.x + CELHEADERSIZE;

  0214f	8b 45 08	 mov	 eax, DWORD PTR _theRect$[ebp]
  02152	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02155	0f af 4d 0c	 imul	 ecx, DWORD PTR _BMWidth$[ebp]
  02159	8b 55 08	 mov	 edx, DWORD PTR _theRect$[ebp]
  0215c	03 0a		 add	 ecx, DWORD PTR [edx]
  0215e	8b 45 fc	 mov	 eax, DWORD PTR _penAddr$[ebp]
  02161	8d 4c 08 2e	 lea	 ecx, DWORD PTR [eax+ecx+46]
  02165	89 4d fc	 mov	 DWORD PTR _penAddr$[ebp], ecx

; 1638 : 	// Setup
; 1639 : 	int vRun = theRect.Ylen();

  02168	8b 4d 08	 mov	 ecx, DWORD PTR _theRect$[ebp]
  0216b	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  02170	89 45 f8	 mov	 DWORD PTR _vRun$[ebp], eax

; 1640 : 	int hRun = theRect.Xlen();

  02173	8b 4d 08	 mov	 ecx, DWORD PTR _theRect$[ebp]
  02176	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  0217b	89 45 f4	 mov	 DWORD PTR _hRun$[ebp], eax
$L166760:

; 1641 : 
; 1642 : 	while(vRun--) {

  0217e	8b 55 f8	 mov	 edx, DWORD PTR _vRun$[ebp]
  02181	8b 45 f8	 mov	 eax, DWORD PTR _vRun$[ebp]
  02184	83 e8 01	 sub	 eax, 1
  02187	89 45 f8	 mov	 DWORD PTR _vRun$[ebp], eax
  0218a	85 d2		 test	 edx, edx
  0218c	74 50		 je	 SHORT $L166761

; 1643 : 		for (int i = 0;i < hRun;++i) {

  0218e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$166762[ebp], 0
  02195	eb 09		 jmp	 SHORT $L166763
$L166764:
  02197	8b 4d f0	 mov	 ecx, DWORD PTR _i$166762[ebp]
  0219a	83 c1 01	 add	 ecx, 1
  0219d	89 4d f0	 mov	 DWORD PTR _i$166762[ebp], ecx
$L166763:
  021a0	8b 55 f0	 mov	 edx, DWORD PTR _i$166762[ebp]
  021a3	3b 55 f4	 cmp	 edx, DWORD PTR _hRun$[ebp]
  021a6	7d 2b		 jge	 SHORT $L166765

; 1644 : 			if (penAddr[i] == fore)

  021a8	8b 45 fc	 mov	 eax, DWORD PTR _penAddr$[ebp]
  021ab	03 45 f0	 add	 eax, DWORD PTR _i$166762[ebp]
  021ae	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  021b1	0f be 55 10	 movsx	 edx, BYTE PTR _fore$[ebp]
  021b5	3b ca		 cmp	 ecx, edx
  021b7	75 0d		 jne	 SHORT $L166766

; 1645 : 				penAddr[i] = back;

  021b9	8b 45 fc	 mov	 eax, DWORD PTR _penAddr$[ebp]
  021bc	03 45 f0	 add	 eax, DWORD PTR _i$166762[ebp]
  021bf	8a 4d 14	 mov	 cl, BYTE PTR _back$[ebp]
  021c2	88 08		 mov	 BYTE PTR [eax], cl

; 1646 : 			else

  021c4	eb 0b		 jmp	 SHORT $L166767
$L166766:

; 1647 : 				penAddr[i] = fore;

  021c6	8b 55 fc	 mov	 edx, DWORD PTR _penAddr$[ebp]
  021c9	03 55 f0	 add	 edx, DWORD PTR _i$166762[ebp]
  021cc	8a 45 10	 mov	 al, BYTE PTR _fore$[ebp]
  021cf	88 02		 mov	 BYTE PTR [edx], al
$L166767:

; 1648 : 		}

  021d1	eb c4		 jmp	 SHORT $L166764
$L166765:

; 1649 : 		penAddr += BMWidth;

  021d3	8b 4d fc	 mov	 ecx, DWORD PTR _penAddr$[ebp]
  021d6	03 4d 0c	 add	 ecx, DWORD PTR _BMWidth$[ebp]
  021d9	89 4d fc	 mov	 DWORD PTR _penAddr$[ebp], ecx

; 1650 : 	}

  021dc	eb a0		 jmp	 SHORT $L166760
$L166761:

; 1651 : }

  021de	8b e5		 mov	 esp, ebp
  021e0	5d		 pop	 ebp
  021e1	c2 10 00	 ret	 16			; 00000010H
?InvertRect@EditClass@@QAEXAAVSOL_Rect@@HDD@Z ENDP	; EditClass::InvertRect
_where$ = 8
_this$ = -12
_i$ = -8
_indices$ = -4
?SetCursor@EditClass@@QAEXH@Z PROC NEAR			; EditClass::SetCursor

; 1655 : {

  021e4	55		 push	 ebp
  021e5	8b ec		 mov	 ebp, esp
  021e7	83 ec 0c	 sub	 esp, 12			; 0000000cH
  021ea	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1656 : 	if(where > -1)

  021ed	83 7d 08 ff	 cmp	 DWORD PTR _where$[ebp], -1
  021f1	7e 0b		 jle	 SHORT $L166772

; 1657 :    	cursor = where;

  021f3	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  021f6	66 8b 4d 08	 mov	 cx, WORD PTR _where$[ebp]
  021fa	66 89 48 34	 mov	 WORD PTR [eax+52], cx
$L166772:

; 1659 : 	uint* indices = (uint*) *lineIndicesID;

  021fe	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02201	83 c1 32	 add	 ecx, 50			; 00000032H
  02204	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  02209	89 45 fc	 mov	 DWORD PTR _indices$[ebp], eax

; 1660 : 
; 1661 :    if (maxHeight == 1) i = cursorY = 0;

  0220c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0220f	33 c0		 xor	 eax, eax
  02211	66 8b 42 4e	 mov	 ax, WORD PTR [edx+78]
  02215	83 f8 01	 cmp	 eax, 1
  02218	75 12		 jne	 SHORT $L166776
  0221a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0221d	66 c7 41 38 00
	00		 mov	 WORD PTR [ecx+56], 0
  02223	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 1662 :    else {

  0222a	eb 40		 jmp	 SHORT $L166777
$L166776:

; 1663 :       for(i = 1; cursor >= indices[i+1] && i < indices[0]; i++);

  0222c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  02233	eb 09		 jmp	 SHORT $L166778
$L166779:
  02235	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  02238	83 c2 01	 add	 edx, 1
  0223b	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L166778:
  0223e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  02241	33 c9		 xor	 ecx, ecx
  02243	66 8b 48 34	 mov	 cx, WORD PTR [eax+52]
  02247	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0224a	8b 45 fc	 mov	 eax, DWORD PTR _indices$[ebp]
  0224d	3b 4c 90 04	 cmp	 ecx, DWORD PTR [eax+edx*4+4]
  02251	72 0c		 jb	 SHORT $L166780
  02253	8b 4d fc	 mov	 ecx, DWORD PTR _indices$[ebp]
  02256	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  02259	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0225b	73 02		 jae	 SHORT $L166780
  0225d	eb d6		 jmp	 SHORT $L166779
$L166780:

; 1664 :    	cursorY = i-1;

  0225f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  02262	83 e8 01	 sub	 eax, 1
  02265	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02268	66 89 41 38	 mov	 WORD PTR [ecx+56], ax
$L166777:

; 1666 : 	cursorX = cursor - indices[i];

  0226c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0226f	33 c0		 xor	 eax, eax
  02271	66 8b 42 34	 mov	 ax, WORD PTR [edx+52]
  02275	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  02278	8b 55 fc	 mov	 edx, DWORD PTR _indices$[ebp]
  0227b	2b 04 8a	 sub	 eax, DWORD PTR [edx+ecx*4]
  0227e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  02281	66 89 41 36	 mov	 WORD PTR [ecx+54], ax

; 1667 : }

  02285	8b e5		 mov	 esp, ebp
  02287	5d		 pop	 ebp
  02288	c2 04 00	 ret	 4
?SetCursor@EditClass@@QAEXH@Z ENDP			; EditClass::SetCursor
_TEXT	ENDS
PUBLIC	?Inset@SOL_Rect@@QAEXHH@Z			; SOL_Rect::Inset
PUBLIC	??0SOL_Line@@QAE@HHHH@Z				; SOL_Line::SOL_Line
PUBLIC	?Highlight@EditClass@@QAEXH@Z			; EditClass::Highlight
EXTRN	?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z:NEAR	; SOL_Line::DrawThin
_TEXT	SEGMENT
_col$ = 8
_this$ = -104
_editBMWidth$ = -84
_r$ = -16
_line1$ = -32
_line2$ = -48
_line3$ = -64
_line4$ = -80
?Highlight@EditClass@@QAEXH@Z PROC NEAR			; EditClass::Highlight

; 1671 : {

  0228b	55		 push	 ebp
  0228c	8b ec		 mov	 ebp, esp
  0228e	83 ec 68	 sub	 esp, 104		; 00000068H
  02291	89 4d 98	 mov	 DWORD PTR _this$[ebp], ecx

; 1672 : 	
; 1673 : 	int editBMWidth = BMWidth;

  02294	8b 45 98	 mov	 eax, DWORD PTR _this$[ebp]
  02297	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0229a	89 4d ac	 mov	 DWORD PTR _editBMWidth$[ebp], ecx

; 1674 : 
; 1675 : 	hiColor = col;

  0229d	8b 55 98	 mov	 edx, DWORD PTR _this$[ebp]
  022a0	66 8b 45 08	 mov	 ax, WORD PTR _col$[ebp]
  022a4	66 89 42 2c	 mov	 WORD PTR [edx+44], ax

; 1676 : 
; 1677 : 	SOL_Rect r(textBox);

  022a8	8b 4d 98	 mov	 ecx, DWORD PTR _this$[ebp]
  022ab	83 c1 10	 add	 ecx, 16			; 00000010H
  022ae	51		 push	 ecx
  022af	8d 4d f0	 lea	 ecx, DWORD PTR _r$[ebp]
  022b2	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 1678 : 
; 1679 : //	xRes = fntMgr->GetXRes();
; 1680 : //	yRes = fntMgr->GetYRes();
; 1681 : //	r.B.x = (r.B.x * xRes) / LOWRESX;
; 1682 : //	r.B.y = (r.B.y * yRes) / LOWRESY;
; 1683 : //	editBMWidth = (editBMWidth * xRes) / LOWRESX;
; 1684 : 
; 1685 : 	r.Inset(-2,-2);

  022b7	6a fe		 push	 -2			; fffffffeH
  022b9	6a fe		 push	 -2			; fffffffeH
  022bb	8d 4d f0	 lea	 ecx, DWORD PTR _r$[ebp]
  022be	e8 00 00 00 00	 call	 ?Inset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Inset

; 1686 : 	r.B.x--;

  022c3	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp+8]
  022c6	83 ea 01	 sub	 edx, 1
  022c9	89 55 f8	 mov	 DWORD PTR _r$[ebp+8], edx

; 1687 : 	r.B.y--;

  022cc	8b 45 fc	 mov	 eax, DWORD PTR _r$[ebp+12]
  022cf	83 e8 01	 sub	 eax, 1
  022d2	89 45 fc	 mov	 DWORD PTR _r$[ebp+12], eax

; 1688 : 	SOL_Line line1(r.A.x, r.A.y, r.B.x, r.A.y);

  022d5	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp+4]
  022d8	51		 push	 ecx
  022d9	8b 55 f8	 mov	 edx, DWORD PTR _r$[ebp+8]
  022dc	52		 push	 edx
  022dd	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp+4]
  022e0	50		 push	 eax
  022e1	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  022e4	51		 push	 ecx
  022e5	8d 4d e0	 lea	 ecx, DWORD PTR _line1$[ebp]
  022e8	e8 00 00 00 00	 call	 ??0SOL_Line@@QAE@HHHH@Z	; SOL_Line::SOL_Line

; 1689 : 	line1.DrawThin(hiColor,SOL_Line::tSolid,0,BM,editBMWidth);

  022ed	8b 55 ac	 mov	 edx, DWORD PTR _editBMWidth$[ebp]
  022f0	52		 push	 edx
  022f1	8b 45 98	 mov	 eax, DWORD PTR _this$[ebp]
  022f4	83 c0 04	 add	 eax, 4
  022f7	51		 push	 ecx
  022f8	8b cc		 mov	 ecx, esp
  022fa	50		 push	 eax
  022fb	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  02300	6a 00		 push	 0
  02302	6a 00		 push	 0
  02304	8b 4d 98	 mov	 ecx, DWORD PTR _this$[ebp]
  02307	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  0230a	52		 push	 edx
  0230b	8d 4d e0	 lea	 ecx, DWORD PTR _line1$[ebp]
  0230e	e8 00 00 00 00	 call	 ?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z ; SOL_Line::DrawThin

; 1690 : 	SOL_Line line2(r.B.x, r.A.y, r.B.x, r.B.y);

  02313	8b 45 fc	 mov	 eax, DWORD PTR _r$[ebp+12]
  02316	50		 push	 eax
  02317	8b 4d f8	 mov	 ecx, DWORD PTR _r$[ebp+8]
  0231a	51		 push	 ecx
  0231b	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp+4]
  0231e	52		 push	 edx
  0231f	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp+8]
  02322	50		 push	 eax
  02323	8d 4d d0	 lea	 ecx, DWORD PTR _line2$[ebp]
  02326	e8 00 00 00 00	 call	 ??0SOL_Line@@QAE@HHHH@Z	; SOL_Line::SOL_Line

; 1691 : 	line2.DrawThin(hiColor,SOL_Line::tSolid,0,BM,editBMWidth);

  0232b	8b 4d ac	 mov	 ecx, DWORD PTR _editBMWidth$[ebp]
  0232e	51		 push	 ecx
  0232f	8b 55 98	 mov	 edx, DWORD PTR _this$[ebp]
  02332	83 c2 04	 add	 edx, 4
  02335	51		 push	 ecx
  02336	8b cc		 mov	 ecx, esp
  02338	52		 push	 edx
  02339	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0233e	6a 00		 push	 0
  02340	6a 00		 push	 0
  02342	8b 45 98	 mov	 eax, DWORD PTR _this$[ebp]
  02345	8a 48 2c	 mov	 cl, BYTE PTR [eax+44]
  02348	51		 push	 ecx
  02349	8d 4d d0	 lea	 ecx, DWORD PTR _line2$[ebp]
  0234c	e8 00 00 00 00	 call	 ?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z ; SOL_Line::DrawThin

; 1692 : 	SOL_Line line3(r.A.x, r.B.y, r.B.x, r.B.y);

  02351	8b 55 fc	 mov	 edx, DWORD PTR _r$[ebp+12]
  02354	52		 push	 edx
  02355	8b 45 f8	 mov	 eax, DWORD PTR _r$[ebp+8]
  02358	50		 push	 eax
  02359	8b 4d fc	 mov	 ecx, DWORD PTR _r$[ebp+12]
  0235c	51		 push	 ecx
  0235d	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  02360	52		 push	 edx
  02361	8d 4d c0	 lea	 ecx, DWORD PTR _line3$[ebp]
  02364	e8 00 00 00 00	 call	 ??0SOL_Line@@QAE@HHHH@Z	; SOL_Line::SOL_Line

; 1693 : 	line3.DrawThin(hiColor,SOL_Line::tSolid,0,BM,editBMWidth);

  02369	8b 45 ac	 mov	 eax, DWORD PTR _editBMWidth$[ebp]
  0236c	50		 push	 eax
  0236d	8b 4d 98	 mov	 ecx, DWORD PTR _this$[ebp]
  02370	83 c1 04	 add	 ecx, 4
  02373	51		 push	 ecx
  02374	8b d4		 mov	 edx, esp
  02376	51		 push	 ecx
  02377	8b ca		 mov	 ecx, edx
  02379	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0237e	6a 00		 push	 0
  02380	6a 00		 push	 0
  02382	8b 45 98	 mov	 eax, DWORD PTR _this$[ebp]
  02385	8a 48 2c	 mov	 cl, BYTE PTR [eax+44]
  02388	51		 push	 ecx
  02389	8d 4d c0	 lea	 ecx, DWORD PTR _line3$[ebp]
  0238c	e8 00 00 00 00	 call	 ?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z ; SOL_Line::DrawThin

; 1694 : 	SOL_Line line4(r.A.x, r.A.y, r.A.x, r.B.y);

  02391	8b 55 fc	 mov	 edx, DWORD PTR _r$[ebp+12]
  02394	52		 push	 edx
  02395	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  02398	50		 push	 eax
  02399	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp+4]
  0239c	51		 push	 ecx
  0239d	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  023a0	52		 push	 edx
  023a1	8d 4d b0	 lea	 ecx, DWORD PTR _line4$[ebp]
  023a4	e8 00 00 00 00	 call	 ??0SOL_Line@@QAE@HHHH@Z	; SOL_Line::SOL_Line

; 1695 : 	line4.DrawThin(hiColor,SOL_Line::tSolid,0,BM,editBMWidth);

  023a9	8b 45 ac	 mov	 eax, DWORD PTR _editBMWidth$[ebp]
  023ac	50		 push	 eax
  023ad	8b 4d 98	 mov	 ecx, DWORD PTR _this$[ebp]
  023b0	83 c1 04	 add	 ecx, 4
  023b3	51		 push	 ecx
  023b4	8b d4		 mov	 edx, esp
  023b6	51		 push	 ecx
  023b7	8b ca		 mov	 ecx, edx
  023b9	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  023be	6a 00		 push	 0
  023c0	6a 00		 push	 0
  023c2	8b 45 98	 mov	 eax, DWORD PTR _this$[ebp]
  023c5	8a 48 2c	 mov	 cl, BYTE PTR [eax+44]
  023c8	51		 push	 ecx
  023c9	8d 4d b0	 lea	 ecx, DWORD PTR _line4$[ebp]
  023cc	e8 00 00 00 00	 call	 ?DrawThin@SOL_Line@@QAEXEHHVMemID@@H@Z ; SOL_Line::DrawThin

; 1696 : 
; 1697 : 	if (col == back)

  023d1	8b 55 98	 mov	 edx, DWORD PTR _this$[ebp]
  023d4	33 c0		 xor	 eax, eax
  023d6	66 8b 42 2a	 mov	 ax, WORD PTR [edx+42]
  023da	39 45 08	 cmp	 DWORD PTR _col$[ebp], eax
  023dd	75 0a		 jne	 SHORT $L166795

; 1698 : 		EraseCursor();

  023df	8b 4d 98	 mov	 ecx, DWORD PTR _this$[ebp]
  023e2	e8 00 00 00 00	 call	 ?EraseCursor@EditClass@@QAEXXZ ; EditClass::EraseCursor

; 1699 : 	else

  023e7	eb 08		 jmp	 SHORT $L166796
$L166795:

; 1700 : 		DrawCursor();

  023e9	8b 4d 98	 mov	 ecx, DWORD PTR _this$[ebp]
  023ec	e8 00 00 00 00	 call	 ?DrawCursor@EditClass@@QAEXXZ ; EditClass::DrawCursor
$L166796:

; 1701 : 
; 1702 :    if (visible) {

  023f1	8b 4d 98	 mov	 ecx, DWORD PTR _this$[ebp]
  023f4	83 79 70 00	 cmp	 DWORD PTR [ecx+112], 0
  023f8	74 12		 je	 SHORT $L166797

; 1703 : 		graphMgr->UpdateScreenItem(si);

  023fa	8b 55 98	 mov	 edx, DWORD PTR _this$[ebp]
  023fd	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  02400	50		 push	 eax
  02401	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02407	e8 00 00 00 00	 call	 ?UpdateScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ; GraphicsMgr::UpdateScreenItem
$L166797:

; 1706 : }

  0240c	8b e5		 mov	 esp, ebp
  0240e	5d		 pop	 ebp
  0240f	c2 04 00	 ret	 4
?Highlight@EditClass@@QAEXH@Z ENDP			; EditClass::Highlight
_TEXT	ENDS
PUBLIC	??2@YAPAXIG@Z					; operator new
PUBLIC	?KEdit@@YAXPAF@Z				; KEdit
PUBLIC	??0ArrayID@@QAE@G@Z				; ArrayID::ArrayID
PUBLIC	?Data@ArrayID@@QAEPAXXZ				; ArrayID::Data
PUBLIC	??0EventObjectID@@QAE@G@Z			; EventObjectID::EventObjectID
PUBLIC	??0EventObjectID@@QAE@ABV0@@Z			; EventObjectID::EventObjectID
EXTRN	??0SOL_Event@@QAE@VEventObjectID@@@Z:NEAR	; SOL_Event::SOL_Event
EXTRN	?Fatal@MsgMgr@@QAAXPADZZ:NEAR			; MsgMgr::Fatal
_DATA	SEGMENT
	ORG $+3
$SG166860 DB	'EditItem moved during EditShow', 00H
	ORG $+1
$SG166869 DB	'EditItem moved during EditHide', 00H
	ORG $+1
$SG166882 DB	'EditItem moved during EditText', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T174109 DD	019930520H
	DD	02H
	DD	FLAT:$T174112
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T174112 DD	0ffffffffH
	DD	FLAT:$L174106
	DD	0ffffffffH
	DD	FLAT:$L174107
xdata$x	ENDS
_TEXT	SEGMENT
$T174086 = -420
$T174087 = -424
$T174088 = -428
$T174089 = -432
$T174090 = -436
$T174091 = -440
$T174094 = -444
$T174097 = -448
$T174098 = -452
$T174099 = -456
$T174100 = -460
$T174103 = -464
$T174104 = -468
$T174105 = -472
__$EHRec$ = -12
_args$ = 8
_priority$166816 = -16
_ec$166821 = -164
_ec$166825 = -312
_thunk$166829 = -316
_thunk$166849 = -320
_thunk$166854 = -328
_editPtr$166855 = -324
_thunk$166863 = -336
_editPtr$166864 = -332
_thunk$166872 = -384
_evt$166875 = -380
_editPtr$166877 = -340
_thunk$166885 = -408
_data$166886 = -404
_thisEdit$166890 = -412
_r$166892 = -400
_thunk$166896 = -416
?KEdit@@YAXPAF@Z PROC NEAR				; KEdit

; 1710 : {

  02412	55		 push	 ebp
  02413	8b ec		 mov	 ebp, esp
  02415	6a ff		 push	 -1
  02417	68 00 00 00 00	 push	 $L174110
  0241c	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02422	50		 push	 eax
  02423	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0242a	81 ec e4 01 00
	00		 sub	 esp, 484		; 000001e4H

; 1711 :    enum {
; 1712 :       editModal,
; 1713 :       editCreate,
; 1714 :       editDestroy,
; 1715 :       editShow,
; 1716 :       editHide,
; 1717 :       editHandleEvent,
; 1718 : 		editGetRect,
; 1719 : 		editHighlight
; 1720 :    };
; 1721 : 
; 1722 :    switch (arg(1)) {

  02430	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  02433	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  02437	89 8d 24 fe ff
	ff		 mov	 DWORD PTR -476+[ebp], ecx
  0243d	83 bd 24 fe ff
	ff 07		 cmp	 DWORD PTR -476+[ebp], 7
  02444	0f 87 55 05 00
	00		 ja	 $L166811
  0244a	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR -476+[ebp]
  02450	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L174111[edx*4]
$L166814:

; 1723 :       case editModal: 
; 1724 :          if (argCount > 2) {

  02457	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0245a	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0245d	83 f9 02	 cmp	 ecx, 2
  02460	0f 8e da 00 00
	00		 jle	 $L166815

; 1725 :  	         int priority = graphMgr->TopSCIPlane() + 1;

  02466	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0246c	e8 00 00 00 00	 call	 ?TopSCIPlane@GraphicsMgr@@QBEHXZ ; GraphicsMgr::TopSCIPlane
  02471	83 c0 01	 add	 eax, 1
  02474	89 45 f0	 mov	 DWORD PTR _priority$166816[ebp], eax

; 1726 :  	         EditClass ec((TextID) arg(2),(TextID) arg(3),arg(4),argCount > 4 ? arg(5) : 1);

  02477	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0247a	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0247d	83 f8 04	 cmp	 eax, 4
  02480	7e 0f		 jle	 SHORT $L174084
  02482	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  02485	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  02489	89 95 20 fe ff
	ff		 mov	 DWORD PTR -480+[ebp], edx
  0248f	eb 0a		 jmp	 SHORT $L174085
$L174084:
  02491	c7 85 20 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR -480+[ebp], 1
$L174085:
  0249b	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR -480+[ebp]
  024a1	50		 push	 eax
  024a2	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  024a5	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  024a9	52		 push	 edx
  024aa	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  024ad	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  024b1	51		 push	 ecx
  024b2	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T174087[ebp]
  024b8	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  024bd	51		 push	 ecx
  024be	8b cc		 mov	 ecx, esp
  024c0	89 a5 5c fe ff
	ff		 mov	 DWORD PTR $T174086[ebp], esp
  024c6	50		 push	 eax
  024c7	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  024cc	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  024cf	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  024d3	50		 push	 eax
  024d4	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T174089[ebp]
  024da	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  024df	51		 push	 ecx
  024e0	8b cc		 mov	 ecx, esp
  024e2	89 a5 54 fe ff
	ff		 mov	 DWORD PTR $T174088[ebp], esp
  024e8	50		 push	 eax
  024e9	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  024ee	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166821[ebp]
  024f4	e8 00 00 00 00	 call	 ??0EditClass@@QAE@VTextID@@0HH@Z ; EditClass::EditClass
  024f9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1727 :  	         ec.Show(priority);

  02500	8b 4d f0	 mov	 ecx, DWORD PTR _priority$166816[ebp]
  02503	51		 push	 ecx
  02504	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166821[ebp]
  0250a	e8 00 00 00 00	 call	 ?Show@EditClass@@QAEXH@Z ; EditClass::Show

; 1728 :  	         pm.acc = ec.HandleEvent();

  0250f	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166821[ebp]
  02515	e8 00 00 00 00	 call	 ?HandleEvent@EditClass@@QAEHXZ ; EditClass::HandleEvent
  0251a	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1729 :             ec.Hide();

  0251f	6a 01		 push	 1
  02521	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166821[ebp]
  02527	e8 00 00 00 00	 call	 ?Hide@EditClass@@QAEXH@Z ; EditClass::Hide

; 1730 :          } else {

  0252c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02533	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166821[ebp]
  02539	e8 00 00 00 00	 call	 ??1EditClass@@UAE@XZ	; EditClass::~EditClass
  0253e	eb 74		 jmp	 SHORT $L166824
$L166815:

; 1731 : 	         EditClass ec(arg(2));

  02540	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  02543	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  02547	50		 push	 eax
  02548	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ec$166825[ebp]
  0254e	e8 00 00 00 00	 call	 ??0EditClass@@QAE@F@Z	; EditClass::EditClass
  02553	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1732 : 	         ec.Show();

  0255a	6a ff		 push	 -1
  0255c	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ec$166825[ebp]
  02562	e8 00 00 00 00	 call	 ?Show@EditClass@@QAEXH@Z ; EditClass::Show

; 1733 : 	         pm.acc = ec.HandleEvent();

  02567	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ec$166825[ebp]
  0256d	e8 00 00 00 00	 call	 ?HandleEvent@EditClass@@QAEHXZ ; EditClass::HandleEvent
  02572	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1734 :             ec.Hide(((ObjectID)arg(1)).GetProperty(s_frameOut));

  02577	6a 7f		 push	 127			; 0000007fH
  02579	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0257c	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  02580	52		 push	 edx
  02581	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR $T174090[ebp]
  02587	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0258c	8b c8		 mov	 ecx, eax
  0258e	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  02593	0f bf c0	 movsx	 eax, ax
  02596	50		 push	 eax
  02597	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ec$166825[ebp]
  0259d	e8 00 00 00 00	 call	 ?Hide@EditClass@@QAEXH@Z ; EditClass::Hide

; 1735 :          }

  025a2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  025a9	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ec$166825[ebp]
  025af	e8 00 00 00 00	 call	 ??1EditClass@@UAE@XZ	; EditClass::~EditClass
$L166824:

; 1736 :          break;

  025b4	e9 e6 03 00 00	 jmp	 $L166811
$L166828:

; 1739 :             MemID thunk;

  025b9	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166829[ebp]
  025bf	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 1740 :             thunk.Get(MemEdit, sizeof(EditClass),LOCKED);

  025c4	6a 00		 push	 0
  025c6	6a 00		 push	 0
  025c8	6a 00		 push	 0
  025ca	6a 00		 push	 0
  025cc	6a 00		 push	 0
  025ce	68 94 00 00 00	 push	 148			; 00000094H
  025d3	6a 55		 push	 85			; 00000055H
  025d5	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166829[ebp]
  025db	e8 00 00 00 00	 call	 ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemID::Get

; 1741 :             if (argCount == 2) 

  025e0	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  025e3	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  025e6	83 fa 02	 cmp	 edx, 2
  025e9	75 52		 jne	 SHORT $L166831

; 1742 :                	new(thunk) EditClass(arg(2));

  025eb	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166829[ebp]
  025f1	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  025f6	50		 push	 eax
  025f7	68 94 00 00 00	 push	 148			; 00000094H
  025fc	e8 00 00 00 00	 call	 ??2@YAPAXIG@Z		; operator new
  02601	83 c4 08	 add	 esp, 8
  02604	89 85 48 fe ff
	ff		 mov	 DWORD PTR $T174091[ebp], eax
  0260a	83 bd 48 fe ff
	ff 00		 cmp	 DWORD PTR $T174091[ebp], 0
  02611	74 1b		 je	 SHORT $L174092
  02613	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  02616	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  0261a	51		 push	 ecx
  0261b	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR $T174091[ebp]
  02621	e8 00 00 00 00	 call	 ??0EditClass@@QAE@F@Z	; EditClass::EditClass
  02626	89 85 1c fe ff
	ff		 mov	 DWORD PTR -484+[ebp], eax
  0262c	eb 0a		 jmp	 SHORT $L174093
$L174092:
  0262e	c7 85 1c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -484+[ebp], 0
$L174093:

; 1743 : 					else

  02638	e9 c0 00 00 00	 jmp	 $L174102
$L166831:

; 1744 :                	new(thunk) EditClass((TextID) arg(2), (TextID) arg(3), arg(4), argCount > 4 ? arg(5) : 1);

  0263d	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166829[ebp]
  02643	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02648	50		 push	 eax
  02649	68 94 00 00 00	 push	 148			; 00000094H
  0264e	e8 00 00 00 00	 call	 ??2@YAPAXIG@Z		; operator new
  02653	83 c4 08	 add	 esp, 8
  02656	89 85 44 fe ff
	ff		 mov	 DWORD PTR $T174094[ebp], eax
  0265c	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR $T174094[ebp], 0
  02663	0f 84 8a 00 00
	00		 je	 $L174101
  02669	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0266c	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0266f	83 f8 04	 cmp	 eax, 4
  02672	7e 0f		 jle	 SHORT $L174095
  02674	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  02677	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  0267b	89 95 18 fe ff
	ff		 mov	 DWORD PTR -488+[ebp], edx
  02681	eb 0a		 jmp	 SHORT $L174096
$L174095:
  02683	c7 85 18 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR -488+[ebp], 1
$L174096:
  0268d	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR -488+[ebp]
  02693	50		 push	 eax
  02694	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  02697	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  0269b	52		 push	 edx
  0269c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0269f	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  026a3	51		 push	 ecx
  026a4	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR $T174098[ebp]
  026aa	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  026af	51		 push	 ecx
  026b0	8b cc		 mov	 ecx, esp
  026b2	89 a5 40 fe ff
	ff		 mov	 DWORD PTR $T174097[ebp], esp
  026b8	50		 push	 eax
  026b9	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  026be	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  026c1	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  026c5	50		 push	 eax
  026c6	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T174100[ebp]
  026cc	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  026d1	51		 push	 ecx
  026d2	8b cc		 mov	 ecx, esp
  026d4	89 a5 38 fe ff
	ff		 mov	 DWORD PTR $T174099[ebp], esp
  026da	50		 push	 eax
  026db	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  026e0	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR $T174094[ebp]
  026e6	e8 00 00 00 00	 call	 ??0EditClass@@QAE@VTextID@@0HH@Z ; EditClass::EditClass
  026eb	89 85 14 fe ff
	ff		 mov	 DWORD PTR -492+[ebp], eax
  026f1	eb 0a		 jmp	 SHORT $L174102
$L174101:
  026f3	c7 85 14 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -492+[ebp], 0
$L174102:

; 1745 :             pm.acc = thunk;

  026fd	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166829[ebp]
  02703	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  02708	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0270d	a3 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, eax

; 1747 :          break;

  02712	e9 88 02 00 00	 jmp	 $L166811
$L166847:

; 1750 :             MemID thunk((SOL_Handle)arg(2));

  02717	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0271a	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  0271e	52		 push	 edx
  0271f	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166849[ebp]
  02725	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 1751 :             ((EditClass *)*thunk)->Hide(False);

  0272a	6a 00		 push	 0
  0272c	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166849[ebp]
  02732	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  02737	8b c8		 mov	 ecx, eax
  02739	e8 00 00 00 00	 call	 ?Hide@EditClass@@QAEXH@Z ; EditClass::Hide

; 1752 :             ((EditClass *)*thunk)->~EditClass();

  0273e	6a 00		 push	 0
  02740	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166849[ebp]
  02746	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0274b	89 85 10 fe ff
	ff		 mov	 DWORD PTR -496+[ebp], eax
  02751	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR -496+[ebp]
  02757	8b 10		 mov	 edx, DWORD PTR [eax]
  02759	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR -496+[ebp]
  0275f	ff 12		 call	 DWORD PTR [edx]

; 1753 :             thunk.Free();

  02761	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166849[ebp]
  02767	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1755 :          break;

  0276c	e9 2e 02 00 00	 jmp	 $L166811
$L166852:

; 1758 :             MemID thunk((SOL_Handle)arg(2));

  02771	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  02774	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  02778	51		 push	 ecx
  02779	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166854[ebp]
  0277f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 1759 : 			EditClass *editPtr = (EditClass *)*thunk;

  02784	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166854[ebp]
  0278a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0278f	89 85 bc fe ff
	ff		 mov	 DWORD PTR _editPtr$166855[ebp], eax

; 1760 :             ((EditClass *)*thunk)->Show();

  02795	6a ff		 push	 -1
  02797	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166854[ebp]
  0279d	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  027a2	8b c8		 mov	 ecx, eax
  027a4	e8 00 00 00 00	 call	 ?Show@EditClass@@QAEXH@Z ; EditClass::Show

; 1761 : 
; 1762 : 			if ( (EditClass *)*thunk != editPtr ) 

  027a9	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166854[ebp]
  027af	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  027b4	3b 85 bc fe ff
	ff		 cmp	 eax, DWORD PTR _editPtr$166855[ebp]
  027ba	74 14		 je	 SHORT $L166859

; 1763 : 				msgMgr->Fatal ( "EditItem moved during EditShow" );

  027bc	68 00 00 00 00	 push	 OFFSET FLAT:$SG166860
  027c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  027c7	52		 push	 edx
  027c8	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  027cd	83 c4 08	 add	 esp, 8
$L166859:

; 1765 :          break;

  027d0	e9 ca 01 00 00	 jmp	 $L166811
$L166861:

; 1767 :             MemID thunk((SOL_Handle)arg(2));

  027d5	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  027d8	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  027dc	51		 push	 ecx
  027dd	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166863[ebp]
  027e3	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 1768 : 			EditClass *editPtr = (EditClass *)*thunk;

  027e8	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166863[ebp]
  027ee	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  027f3	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _editPtr$166864[ebp], eax

; 1769 :             ((EditClass *)*thunk)->Hide();

  027f9	6a 01		 push	 1
  027fb	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166863[ebp]
  02801	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  02806	8b c8		 mov	 ecx, eax
  02808	e8 00 00 00 00	 call	 ?Hide@EditClass@@QAEXH@Z ; EditClass::Hide

; 1770 : 
; 1771 : 			if ( (EditClass *)*thunk != editPtr ) 

  0280d	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166863[ebp]
  02813	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  02818	3b 85 b4 fe ff
	ff		 cmp	 eax, DWORD PTR _editPtr$166864[ebp]
  0281e	74 14		 je	 SHORT $L166868

; 1772 : 				msgMgr->Fatal ( "EditItem moved during EditHide" );

  02820	68 00 00 00 00	 push	 OFFSET FLAT:$SG166869
  02825	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0282b	52		 push	 edx
  0282c	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  02831	83 c4 08	 add	 esp, 8
$L166868:

; 1774 :          break;

  02834	e9 66 01 00 00	 jmp	 $L166811
$L166870:

; 1777 : 				MemID thunk((SOL_Handle)arg(2));

  02839	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0283c	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  02840	51		 push	 ecx
  02841	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166872[ebp]
  02847	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 1778 : 				SOL_Event evt((EventObjectID)arg(3));

  0284c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0284f	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  02853	50		 push	 eax
  02854	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR $T174104[ebp]
  0285a	e8 00 00 00 00	 call	 ??0EventObjectID@@QAE@G@Z ; EventObjectID::EventObjectID
  0285f	51		 push	 ecx
  02860	8b cc		 mov	 ecx, esp
  02862	89 a5 30 fe ff
	ff		 mov	 DWORD PTR $T174103[ebp], esp
  02868	50		 push	 eax
  02869	e8 00 00 00 00	 call	 ??0EventObjectID@@QAE@ABV0@@Z ; EventObjectID::EventObjectID
  0286e	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _evt$166875[ebp]
  02874	e8 00 00 00 00	 call	 ??0SOL_Event@@QAE@VEventObjectID@@@Z ; SOL_Event::SOL_Event

; 1779 : 				EditClass *editPtr = (EditClass *)*thunk;

  02879	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166872[ebp]
  0287f	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  02884	89 85 ac fe ff
	ff		 mov	 DWORD PTR _editPtr$166877[ebp], eax

; 1780 : 				((EditClass *)*thunk)->EditText(evt);

  0288a	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _evt$166875[ebp]
  02890	51		 push	 ecx
  02891	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166872[ebp]
  02897	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0289c	8b c8		 mov	 ecx, eax
  0289e	e8 00 00 00 00	 call	 ?EditText@EditClass@@QAEHAAVSOL_Event@@@Z ; EditClass::EditText

; 1781 : 
; 1782 : 				if ( (EditClass *)*thunk != editPtr ) 

  028a3	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166872[ebp]
  028a9	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  028ae	3b 85 ac fe ff
	ff		 cmp	 eax, DWORD PTR _editPtr$166877[ebp]
  028b4	74 14		 je	 SHORT $L166881

; 1783 : 					msgMgr->Fatal ( "EditItem moved during EditText" );

  028b6	68 00 00 00 00	 push	 OFFSET FLAT:$SG166882
  028bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  028c1	52		 push	 edx
  028c2	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXPADZZ ; MsgMgr::Fatal
  028c7	83 c4 08	 add	 esp, 8
$L166881:

; 1785 :          break;

  028ca	e9 d0 00 00 00	 jmp	 $L166811
$L166883:

; 1788 : 				MemID thunk((SOL_Handle)arg(2));

  028cf	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  028d2	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  028d6	51		 push	 ecx
  028d7	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166885[ebp]
  028dd	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 1789 : 				SCIWord* data = (SCIWord*) ((ArrayID) arg(3)).Data();

  028e2	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  028e5	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  028e9	50		 push	 eax
  028ea	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR $T174105[ebp]
  028f0	e8 00 00 00 00	 call	 ??0ArrayID@@QAE@G@Z	; ArrayID::ArrayID
  028f5	8b c8		 mov	 ecx, eax
  028f7	e8 00 00 00 00	 call	 ?Data@ArrayID@@QAEPAXXZ	; ArrayID::Data
  028fc	89 85 6c fe ff
	ff		 mov	 DWORD PTR _data$166886[ebp], eax

; 1790 : 				EditClass *thisEdit = ((EditClass *)*thunk);

  02902	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166885[ebp]
  02908	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0290d	89 85 64 fe ff
	ff		 mov	 DWORD PTR _thisEdit$166890[ebp], eax

; 1791 : 
; 1792 : 				SOL_Rect r = ((EditClass *)*thunk)->window;

  02913	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166885[ebp]
  02919	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0291e	83 c0 78	 add	 eax, 120		; 00000078H
  02921	50		 push	 eax
  02922	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _r$166892[ebp]
  02928	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 1793 : 				data[0] = r.A.x;

  0292d	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _data$166886[ebp]
  02933	66 8b 95 70 fe
	ff ff		 mov	 dx, WORD PTR _r$166892[ebp]
  0293a	66 89 11	 mov	 WORD PTR [ecx], dx

; 1794 : 				data[1] = r.A.y;

  0293d	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _data$166886[ebp]
  02943	66 8b 8d 74 fe
	ff ff		 mov	 cx, WORD PTR _r$166892[ebp+4]
  0294a	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 1795 : 				data[2] = r.B.x;

  0294e	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _data$166886[ebp]
  02954	66 8b 85 78 fe
	ff ff		 mov	 ax, WORD PTR _r$166892[ebp+8]
  0295b	66 89 42 04	 mov	 WORD PTR [edx+4], ax

; 1796 : 				data[3] = r.B.y;

  0295f	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _data$166886[ebp]
  02965	66 8b 95 7c fe
	ff ff		 mov	 dx, WORD PTR _r$166892[ebp+12]
  0296c	66 89 51 06	 mov	 WORD PTR [ecx+6], dx

; 1798 : 			break;

  02970	eb 2d		 jmp	 SHORT $L166811
$L166894:

; 1801 : 				MemID thunk((SOL_Handle)arg(2));

  02972	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  02975	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  02979	51		 push	 ecx
  0297a	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166896[ebp]
  02980	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 1802 : 	            ((EditClass *)*thunk)->Highlight(arg(3));

  02985	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  02988	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  0298c	50		 push	 eax
  0298d	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _thunk$166896[ebp]
  02993	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  02998	8b c8		 mov	 ecx, eax
  0299a	e8 00 00 00 00	 call	 ?Highlight@EditClass@@QAEXH@Z ; EditClass::Highlight
$L166811:

; 1806 : }

  0299f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  029a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  029a9	8b e5		 mov	 esp, ebp
  029ab	5d		 pop	 ebp
  029ac	c3		 ret	 0
$L174111:
  029ad	00 00 00 00	 DD	 $L166814
  029b1	00 00 00 00	 DD	 $L166828
  029b5	00 00 00 00	 DD	 $L166847
  029b9	00 00 00 00	 DD	 $L166852
  029bd	00 00 00 00	 DD	 $L166861
  029c1	00 00 00 00	 DD	 $L166870
  029c5	00 00 00 00	 DD	 $L166883
  029c9	00 00 00 00	 DD	 $L166894
_TEXT	ENDS
text$x	SEGMENT
$L174106:
  0004a	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166821[ebp]
  00050	e8 00 00 00 00	 call	 ??1EditClass@@UAE@XZ	; EditClass::~EditClass
  00055	c3		 ret	 0
$L174107:
  00056	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ec$166825[ebp]
  0005c	e8 00 00 00 00	 call	 ??1EditClass@@UAE@XZ	; EditClass::~EditClass
  00061	c3		 ret	 0
$L174110:
  00062	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T174109
  00067	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KEdit@@YAXPAF@Z ENDP					; KEdit
;	COMDAT ??0EventObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0EventObjectID@@QAE@ABV0@@Z PROC NEAR			; EventObjectID::EventObjectID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0EventObjectID@@QAE@ABV0@@Z ENDP			; EventObjectID::EventObjectID
_TEXT	ENDS
PUBLIC	?TopPlane@GraphicsMgr@@QBEHXZ			; GraphicsMgr::TopPlane
PUBLIC	?GetInput@@YAHPAD0H@Z				; GetInput
EXTRN	?Add@TextID@@QAEXPBD@Z:NEAR			; TextID::Add
xdata$x	SEGMENT
$T174119 DD	019930520H
	DD	01H
	DD	FLAT:$T174121
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T174121 DD	0ffffffffH
	DD	FLAT:$L174117
xdata$x	ENDS
_TEXT	SEGMENT
$T174115 = -180
$T174116 = -184
__$EHRec$ = -12
_theText$ = 8
_theTitle$ = 12
_boxWidth$ = 16
_theTextID$ = -28
_theTitleID$ = -16
_priority$ = -20
_retVal$ = -24
_ec$166911 = -176
?GetInput@@YAHPAD0H@Z PROC NEAR				; GetInput

; 1810 : {

  029cd	55		 push	 ebp
  029ce	8b ec		 mov	 ebp, esp
  029d0	6a ff		 push	 -1
  029d2	68 00 00 00 00	 push	 $L174120
  029d7	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  029dd	50		 push	 eax
  029de	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  029e5	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH

; 1811 : 	// Gets input from a titled font box
; 1812 : 	// input
; 1813 : 	//		theText is the default input string
; 1814 : 	//		theTitle is the title string
; 1815 : 	//		boxWidth is the width of the input box	in characters
; 1816 : 
; 1817 : 	TextID theTextID;

  029eb	8d 4d e4	 lea	 ecx, DWORD PTR _theTextID$[ebp]
  029ee	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID

; 1818 : 	TextID theTitleID;

  029f3	8d 4d f0	 lea	 ecx, DWORD PTR _theTitleID$[ebp]
  029f6	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID

; 1819 : 
; 1820 : 	// Make copies of the character strings
; 1821 : 	theTextID.Add(theText);

  029fb	8b 45 08	 mov	 eax, DWORD PTR _theText$[ebp]
  029fe	50		 push	 eax
  029ff	8d 4d e4	 lea	 ecx, DWORD PTR _theTextID$[ebp]
  02a02	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXPBD@Z	; TextID::Add

; 1822 : 	theTitleID.Add(theTitle);

  02a07	8b 4d 0c	 mov	 ecx, DWORD PTR _theTitle$[ebp]
  02a0a	51		 push	 ecx
  02a0b	8d 4d f0	 lea	 ecx, DWORD PTR _theTitleID$[ebp]
  02a0e	e8 00 00 00 00	 call	 ?Add@TextID@@QAEXPBD@Z	; TextID::Add

; 1823 : 
; 1824 :    // The priority of this plane will be higher than SCI planes
; 1825 : 	int priority = graphMgr->TopPlane() + 1;

  02a13	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02a19	e8 00 00 00 00	 call	 ?TopPlane@GraphicsMgr@@QBEHXZ ; GraphicsMgr::TopPlane
  02a1e	83 c0 01	 add	 eax, 1
  02a21	89 45 ec	 mov	 DWORD PTR _priority$[ebp], eax

; 1826 :    if (priority < PLANEPRIORITYSTART)

  02a24	81 7d ec 10 27
	00 00		 cmp	 DWORD PTR _priority$[ebp], 10000 ; 00002710H
  02a2b	7d 07		 jge	 SHORT $L166909

; 1827 :       priority = PLANEPRIORITYSTART;

  02a2d	c7 45 ec 10 27
	00 00		 mov	 DWORD PTR _priority$[ebp], 10000 ; 00002710H
$L166909:

; 1828 : 
; 1829 : 	Bool retVal = 0;

  02a34	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _retVal$[ebp], 0

; 1832 : 	EditClass ec(theTextID,theTitleID,boxWidth);

  02a3b	6a 01		 push	 1
  02a3d	8b 55 10	 mov	 edx, DWORD PTR _boxWidth$[ebp]
  02a40	52		 push	 edx
  02a41	51		 push	 ecx
  02a42	8b cc		 mov	 ecx, esp
  02a44	89 a5 4c ff ff
	ff		 mov	 DWORD PTR $T174115[ebp], esp
  02a4a	8d 45 f0	 lea	 eax, DWORD PTR _theTitleID$[ebp]
  02a4d	50		 push	 eax
  02a4e	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  02a53	51		 push	 ecx
  02a54	8b cc		 mov	 ecx, esp
  02a56	89 a5 48 ff ff
	ff		 mov	 DWORD PTR $T174116[ebp], esp
  02a5c	8d 55 e4	 lea	 edx, DWORD PTR _theTextID$[ebp]
  02a5f	52		 push	 edx
  02a60	e8 00 00 00 00	 call	 ??0TextID@@QAE@ABV0@@Z	; TextID::TextID
  02a65	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166911[ebp]
  02a6b	e8 00 00 00 00	 call	 ??0EditClass@@QAE@VTextID@@0HH@Z ; EditClass::EditClass
  02a70	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1833 : 	ec.Show(priority);

  02a77	8b 45 ec	 mov	 eax, DWORD PTR _priority$[ebp]
  02a7a	50		 push	 eax
  02a7b	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166911[ebp]
  02a81	e8 00 00 00 00	 call	 ?Show@EditClass@@QAEXH@Z ; EditClass::Show

; 1834 : 	retVal = ec.HandleEvent();

  02a86	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166911[ebp]
  02a8c	e8 00 00 00 00	 call	 ?HandleEvent@EditClass@@QAEHXZ ; EditClass::HandleEvent
  02a91	89 45 e8	 mov	 DWORD PTR _retVal$[ebp], eax

; 1835 :    ec.Hide();

  02a94	6a 01		 push	 1
  02a96	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166911[ebp]
  02a9c	e8 00 00 00 00	 call	 ?Hide@EditClass@@QAEXH@Z ; EditClass::Hide

; 1836 : 	}

  02aa1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02aa8	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166911[ebp]
  02aae	e8 00 00 00 00	 call	 ??1EditClass@@UAE@XZ	; EditClass::~EditClass

; 1837 : 
; 1838 : 	if (retVal) {

  02ab3	83 7d e8 00	 cmp	 DWORD PTR _retVal$[ebp], 0
  02ab7	74 15		 je	 SHORT $L166914

; 1839 : 		strcpy(theText,*theTextID);

  02ab9	8d 4d e4	 lea	 ecx, DWORD PTR _theTextID$[ebp]
  02abc	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  02ac1	50		 push	 eax
  02ac2	8b 4d 08	 mov	 ecx, DWORD PTR _theText$[ebp]
  02ac5	51		 push	 ecx
  02ac6	e8 00 00 00 00	 call	 _strcpy
  02acb	83 c4 08	 add	 esp, 8
$L166914:

; 1841 : 
; 1842 : 	theTextID.Free();

  02ace	8d 4d e4	 lea	 ecx, DWORD PTR _theTextID$[ebp]
  02ad1	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1843 : 	theTitleID.Free();

  02ad6	8d 4d f0	 lea	 ecx, DWORD PTR _theTitleID$[ebp]
  02ad9	e8 00 00 00 00	 call	 ?Free@MemID@@QAEXXZ	; MemID::Free

; 1844 : 	return retVal;

  02ade	8b 45 e8	 mov	 eax, DWORD PTR _retVal$[ebp]

; 1845 : }   

  02ae1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  02ae4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  02aeb	8b e5		 mov	 esp, ebp
  02aed	5d		 pop	 ebp
  02aee	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L174117:
  0006c	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _ec$166911[ebp]
  00072	e8 00 00 00 00	 call	 ??1EditClass@@UAE@XZ	; EditClass::~EditClass
  00077	c3		 ret	 0
$L174120:
  00078	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T174119
  0007d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetInput@@YAHPAD0H@Z ENDP				; GetInput
PUBLIC	?MsgBox@@YAHPAD0ZZ				; MsgBox
EXTRN	__imp__vsprintf:NEAR
EXTRN	__imp__GetFocus@0:NEAR
EXTRN	__imp__MessageBoxA@16:NEAR
_TEXT	SEGMENT
_title$ = 8
_fmt$ = 12
_buf$ = -1028
_escape$ = -1032
_args$ = -4
?MsgBox@@YAHPAD0ZZ PROC NEAR				; MsgBox

; 1849 : {

  02aef	55		 push	 ebp
  02af0	8b ec		 mov	 ebp, esp
  02af2	81 ec 10 04 00
	00		 sub	 esp, 1040		; 00000410H

; 1850 : 	char buf[MsgMgr::MaxStr];
; 1851 : 	Bool escape;
; 1852 : 
; 1853 : 	va_list args;
; 1854 : 	va_start(args, fmt);

  02af8	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  02afb	89 45 fc	 mov	 DWORD PTR _args$[ebp], eax

; 1855 : 	vsprintf(buf, fmt, args);

  02afe	8b 4d fc	 mov	 ecx, DWORD PTR _args$[ebp]
  02b01	51		 push	 ecx
  02b02	8b 55 0c	 mov	 edx, DWORD PTR _fmt$[ebp]
  02b05	52		 push	 edx
  02b06	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  02b0c	50		 push	 eax
  02b0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__vsprintf
  02b13	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1856 : 	va_end(args);

  02b16	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 1857 : 
; 1858 : #ifdef DEBUG	
; 1859 : 	if (configMgr && configMgr->Get(configMgr->MonoEcho)) {
; 1860 : 		msgMgr->Mono("{");
; 1861 : 		msgMgr->Mono(title);
; 1862 : 		msgMgr->Mono("}");
; 1863 : 		msgMgr->Mono(buf);
; 1864 : 		msgMgr->Mono("<Enter or Esc>");
; 1865 : 		msgMgr->Mono("\n");
; 1866 : 	}
; 1867 : #endif
; 1868 : 
; 1869 : 	if (graphMgr)

  02b1d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A, 0 ; graphMgr
  02b24	74 28		 je	 SHORT $L166927

; 1870 : 		graphMgr->GCursor().Hide();

  02b26	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02b2c	8b 11		 mov	 edx, DWORD PTR [ecx]
  02b2e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02b34	ff 52 18	 call	 DWORD PTR [edx+24]
  02b37	89 85 f4 fb ff
	ff		 mov	 DWORD PTR -1036+[ebp], eax
  02b3d	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR -1036+[ebp]
  02b43	8b 10		 mov	 edx, DWORD PTR [eax]
  02b45	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR -1036+[ebp]
  02b4b	ff 52 04	 call	 DWORD PTR [edx+4]
$L166927:

; 1871 : 	
; 1872 :     escape = (MessageBox ( GetFocus(), buf, title, MB_OKCANCEL ) == IDOK);

  02b4e	6a 01		 push	 1
  02b50	8b 45 08	 mov	 eax, DWORD PTR _title$[ebp]
  02b53	50		 push	 eax
  02b54	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  02b5a	51		 push	 ecx
  02b5b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFocus@0
  02b61	50		 push	 eax
  02b62	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  02b68	83 e8 01	 sub	 eax, 1
  02b6b	f7 d8		 neg	 eax
  02b6d	1b c0		 sbb	 eax, eax
  02b6f	40		 inc	 eax
  02b70	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _escape$[ebp], eax

; 1873 : 
; 1874 : 	if (graphMgr)

  02b76	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A, 0 ; graphMgr
  02b7d	74 28		 je	 SHORT $L166928

; 1875 : 		graphMgr->GCursor().UnHide();

  02b7f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02b85	8b 02		 mov	 eax, DWORD PTR [edx]
  02b87	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  02b8d	ff 50 18	 call	 DWORD PTR [eax+24]
  02b90	89 85 f0 fb ff
	ff		 mov	 DWORD PTR -1040+[ebp], eax
  02b96	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR -1040+[ebp]
  02b9c	8b 11		 mov	 edx, DWORD PTR [ecx]
  02b9e	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR -1040+[ebp]
  02ba4	ff 52 08	 call	 DWORD PTR [edx+8]
$L166928:

; 1876 : 
; 1877 : 	return !escape;

  02ba7	33 c0		 xor	 eax, eax
  02ba9	83 bd f8 fb ff
	ff 00		 cmp	 DWORD PTR _escape$[ebp], 0
  02bb0	0f 94 c0	 sete	 al

; 1878 : }

  02bb3	8b e5		 mov	 esp, ebp
  02bb5	5d		 pop	 ebp
  02bb6	c3		 ret	 0
?MsgBox@@YAHPAD0ZZ ENDP					; MsgBox
_TEXT	ENDS
PUBLIC	??0CSCI_WorldActor@@QAE@ABVObjectID@@@Z		; CSCI_WorldActor::CSCI_WorldActor
PUBLIC	?AfxGetApp@@YGPAVCWinApp@@XZ			; AfxGetApp
PUBLIC	??0ServerInfo@@QAE@XZ				; ServerInfo::ServerInfo
PUBLIC	??0CSCI_Script@@QAE@G@Z				; CSCI_Script::CSCI_Script
PUBLIC	?SetViewMode@CTalkDlg@@QAEX_N@Z			; CTalkDlg::SetViewMode
PUBLIC	??0CSCI_CharInfo@@QAE@G@Z			; CSCI_CharInfo::CSCI_CharInfo
PUBLIC	?Match@CMakeItemDlg@@QAEHVCSCI_WorldObject@@@Z	; CMakeItemDlg::Match
PUBLIC	?getChat_Profanity@CToonSettings@@QAEHXZ	; CToonSettings::getChat_Profanity
PUBLIC	??0CSCI_WorldObject@@QAE@G@Z			; CSCI_WorldObject::CSCI_WorldObject
PUBLIC	?KDialog@@YAXPAF@Z				; KDialog
PUBLIC	??2CObject@@SGPAXI@Z				; CObject::operator new
PUBLIC	??0CSCI_NetMsg@@QAE@G@Z				; CSCI_NetMsg::CSCI_NetMsg
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ	; CSCI_NetMsg::get_pInfo
PUBLIC	??0CSCI_NetMsg@@QAE@ABV0@@Z			; CSCI_NetMsg::CSCI_NetMsg
PUBLIC	??0StringID@@QAE@ABVMemID@@@Z			; StringID::StringID
PUBLIC	??DStringID@@QAEPADXZ				; StringID::operator*
PUBLIC	??0StringID@@QAE@ABV0@@Z			; StringID::StringID
PUBLIC	??0CSCI_Object@@QAE@G@Z				; CSCI_Object::CSCI_Object
PUBLIC	?SetCharInfo@CLookAt@@SAXVCSCI_CharInfo@@@Z	; CLookAt::SetCharInfo
PUBLIC	?set_scratch@CSCI_Object@@QAEXF@Z		; CSCI_Object::set_scratch
PUBLIC	?size@SOL_List@@QAEAAHXZ			; SOL_List::size
PUBLIC	?BringWindowToTop@CWnd@@QAEXXZ			; CWnd::BringWindowToTop
PUBLIC	?SetEventProcessing@CSkinWnd@@QAEX_N@Z		; CSkinWnd::SetEventProcessing
PUBLIC	?SetTransientState@CSkinWnd@@QAEX_N@Z		; CSkinWnd::SetTransientState
PUBLIC	??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ		; FakeSOL_ListID::operator->
PUBLIC	?UpdateWindow@CWnd@@QAEXXZ			; CWnd::UpdateWindow
PUBLIC	?IsWindowVisible@CWnd@@QBEHXZ			; CWnd::IsWindowVisible
PUBLIC	??0CSCI_WorldObject@@QAE@ABV0@@Z		; CSCI_WorldObject::CSCI_WorldObject
PUBLIC	??0SOL_ListID@@QAE@G@Z				; SOL_ListID::SOL_ListID
PUBLIC	??0SOL_ListID@@QAE@ABU0@@Z			; SOL_ListID::SOL_ListID
PUBLIC	??0CSCI_GroupMember@@QAE@G@Z			; CSCI_GroupMember::CSCI_GroupMember
PUBLIC	??0CSCI_List@@QAE@G@Z				; CSCI_List::CSCI_List
PUBLIC	??0CSCI_ServerInfo@@QAE@G@Z			; CSCI_ServerInfo::CSCI_ServerInfo
PUBLIC	?get_pServerName@CSCI_ServerInfo@@QAE?AVStringID@@XZ ; CSCI_ServerInfo::get_pServerName
PUBLIC	?set_pServerName@CSCI_ServerInfo@@QAEXF@Z	; CSCI_ServerInfo::set_pServerName
PUBLIC	?get_pStatus@CSCI_ServerInfo@@QAE?AVStringID@@XZ ; CSCI_ServerInfo::get_pStatus
PUBLIC	?set_pStatus@CSCI_ServerInfo@@QAEXF@Z		; CSCI_ServerInfo::set_pStatus
PUBLIC	?get_pNumberOfUsers@CSCI_ServerInfo@@QAEFXZ	; CSCI_ServerInfo::get_pNumberOfUsers
PUBLIC	?set_pNumberOfUsers@CSCI_ServerInfo@@QAEXF@Z	; CSCI_ServerInfo::set_pNumberOfUsers
PUBLIC	?get_pIP@CSCI_ServerInfo@@QAE?AVStringID@@XZ	; CSCI_ServerInfo::get_pIP
PUBLIC	??0CSCI_LongInt@@QAE@G@Z			; CSCI_LongInt::CSCI_LongInt
PUBLIC	?set_pIP@CSCI_ServerInfo@@QAEXF@Z		; CSCI_ServerInfo::set_pIP
PUBLIC	?get_lowWord@CSCI_LongInt@@QAEFXZ		; CSCI_LongInt::get_lowWord
PUBLIC	?get_pPort@CSCI_ServerInfo@@QAE?AVStringID@@XZ	; CSCI_ServerInfo::get_pPort
PUBLIC	?set_pPort@CSCI_ServerInfo@@QAEXF@Z		; CSCI_ServerInfo::set_pPort
PUBLIC	?get_nValue@CSCI_LongInt@@QAEHXZ		; CSCI_LongInt::get_nValue
PUBLIC	?set_nValue@CSCI_LongInt@@QAEXH@Z		; CSCI_LongInt::set_nValue
PUBLIC	??0CSCI_LongInt@@QAE@ABV0@@Z			; CSCI_LongInt::CSCI_LongInt
PUBLIC	??0CPoint@@QAE@HH@Z				; CPoint::CPoint
EXTRN	?Look@CLookAtItem@@SAXVCSCI_WorldObject@@VStringID@@@Z:NEAR ; CLookAtItem::Look
EXTRN	??0CPasswordDoubleButtonDlg@@QAE@VStringID@@VCSCI_Object@@F1F@Z:NEAR ; CPasswordDoubleButtonDlg::CPasswordDoubleButtonDlg
EXTRN	?Create@CPasswordDoubleButtonDlg@@QAEHPAD0H00_N@Z:NEAR ; CPasswordDoubleButtonDlg::Create
EXTRN	?g_nGenerator@@3KA:DWORD			; g_nGenerator
EXTRN	?g_nIncrement@@3KA:DWORD			; g_nIncrement
EXTRN	??0CGroupQuestionDlg@@QAE@H@Z:NEAR		; CGroupQuestionDlg::CGroupQuestionDlg
EXTRN	?Create@CGroupQuestionDlg@@QAEHPAD000_N1@Z:NEAR	; CGroupQuestionDlg::Create
EXTRN	?g_pGroupQuestion@@3PAVCGroupQuestionDlg@@A:DWORD ; g_pGroupQuestion
EXTRN	??0CGenericDlg@@QAE@XZ:NEAR			; CGenericDlg::CGenericDlg
EXTRN	?Create@CGenericDlg@@QAEHPBD0_N1@Z:NEAR		; CGenericDlg::Create
EXTRN	?Create@CGenericDlg@@QAEHPBDVCSCI_Object@@_N2@Z:NEAR ; CGenericDlg::Create
EXTRN	?g_pQuests@@3PAVCQuestDlg@@A:DWORD		; g_pQuests
EXTRN	__imp__PostMessageA@16:NEAR
EXTRN	??0CDeadDlg@@QAE@XZ:NEAR			; CDeadDlg::CDeadDlg
EXTRN	??0CSpellListDlg@@QAE@VCSCI_Object@@F@Z:NEAR	; CSpellListDlg::CSpellListDlg
EXTRN	?Create@CDeadDlg@@QAEHVCSCI_Script@@@Z:NEAR	; CDeadDlg::Create
EXTRN	?Create@CSpellListDlg@@QAEHPAVCWnd@@@Z:NEAR	; CSpellListDlg::Create
EXTRN	??0CNetworkErrorDlg@@QAE@XZ:NEAR		; CNetworkErrorDlg::CNetworkErrorDlg
EXTRN	??0CToonMakeWnd@@QAE@VObjectID@@00000@Z:NEAR	; CToonMakeWnd::CToonMakeWnd
EXTRN	?Create@CNetworkErrorDlg@@QAEHXZ:NEAR		; CNetworkErrorDlg::Create
EXTRN	?Create@CToonMakeWnd@@QAEHXZ:NEAR		; CToonMakeWnd::Create
EXTRN	?g_pSpellList@@3PAFA:DWORD			; g_pSpellList
EXTRN	__imp__LoadCursorA@8:NEAR
EXTRN	??0CTalkDlg@@QAE@XZ:NEAR			; CTalkDlg::CTalkDlg
EXTRN	?Create@CTalkDlg@@QAEHPAD0F@Z:NEAR		; CTalkDlg::Create
EXTRN	?SetBio@CTalkDlg@@QAEXPADK@Z:NEAR		; CTalkDlg::SetBio
EXTRN	??0CString@@QAE@PBD@Z:NEAR			; CString::CString
EXTRN	?AddButton@CTalkDlg@@QAEXPADVCSCI_Object@@FFF@Z:NEAR ; CTalkDlg::AddButton
EXTRN	??0CServerDlg@@QAE@XZ:NEAR			; CServerDlg::CServerDlg
EXTRN	?AddTalkPath@CTalkDlg@@QAEXPADVCSCI_Object@@FFF@Z:NEAR ; CTalkDlg::AddTalkPath
EXTRN	?ClearTalk@CTalkDlg@@QAEXXZ:NEAR		; CTalkDlg::ClearTalk
EXTRN	?Create@CServerDlg@@QAEHPAVCWnd@@VCSCI_Object@@1F@Z:NEAR ; CServerDlg::Create
EXTRN	?g_pNetworkError@@3PAVCNetworkErrorDlg@@A:DWORD	; g_pNetworkError
EXTRN	?g_pCurrentServer@@3PAUServerInfo@@A:DWORD	; g_pCurrentServer
EXTRN	?g_pTalkDlg@@3PAVCTalkDlg@@A:DWORD		; g_pTalkDlg
EXTRN	??0CWhatsNewDlg@@QAE@XZ:NEAR			; CWhatsNewDlg::CWhatsNewDlg
EXTRN	?Create@CWhatsNewDlg@@QAEHVCSCI_Object@@@Z:NEAR	; CWhatsNewDlg::Create
EXTRN	??0CItemListDlg@@QAE@XZ:NEAR			; CItemListDlg::CItemListDlg
EXTRN	?Create@CItemListDlg@@QAEHVCSCI_List@@VCSCI_Object@@@Z:NEAR ; CItemListDlg::Create
EXTRN	?g_pWhatsNewDlg@@3PAVCWhatsNewDlg@@A:DWORD	; g_pWhatsNewDlg
EXTRN	??0CMakeItemDlg@@QAE@VCSCI_WorldObject@@@Z:NEAR	; CMakeItemDlg::CMakeItemDlg
EXTRN	?Create@CMakeItemDlg@@QAEHF@Z:NEAR		; CMakeItemDlg::Create
EXTRN	??0PackedData@@QAE@VObjectID@@@Z:NEAR		; PackedData::PackedData
EXTRN	??1PackedData@@UAE@XZ:NEAR			; PackedData::~PackedData
EXTRN	??0CMailBox@@QAE@XZ:NEAR			; CMailBox::CMailBox
EXTRN	?g_pMakeItemDlg@@3PAVCMakeItemDlg@@A:DWORD	; g_pMakeItemDlg
EXTRN	?getByte@PackedData@@QAEEXZ:NEAR		; PackedData::getByte
EXTRN	?getWord@PackedData@@QAEFXZ:NEAR		; PackedData::getWord
EXTRN	??0CTeleportDlg@@QAE@XZ:NEAR			; CTeleportDlg::CTeleportDlg
EXTRN	?getLong@PackedData@@QAEHXZ:NEAR		; PackedData::getLong
EXTRN	?Create@CTeleportDlg@@QAEHVCSCI_Object@@@Z:NEAR	; CTeleportDlg::Create
EXTRN	?getCharString@PackedData@@QAEPADH@Z:NEAR	; PackedData::getCharString
EXTRN	?getArray@PackedData@@QAEXPADH@Z:NEAR		; PackedData::getArray
EXTRN	??0CToonSettings@@QAE@H@Z:NEAR			; CToonSettings::CToonSettings
EXTRN	?load@CToonSettings@@QAEXPBD0@Z:NEAR		; CToonSettings::load
EXTRN	?g_MouseLocation@@3UtagPOINT@@A:QWORD		; g_MouseLocation
EXTRN	?HandleMsg@CMailBox@@QAEXVCSCI_NetMsg@@@Z:NEAR	; CMailBox::HandleMsg
EXTRN	?g_pTeleportDlg@@3PAVCTeleportDlg@@A:DWORD	; g_pTeleportDlg
EXTRN	?Add@CGroupListWnd@@QAEXVCSCI_GroupMember@@@Z:NEAR ; CGroupListWnd::Add
EXTRN	?fromPacket@CChannelMemberList@@QAEXPAVPackedData@@@Z:NEAR ; CChannelMemberList::fromPacket
EXTRN	?Delete@CGroupListWnd@@QAEXVCSCI_GroupMember@@@Z:NEAR ; CGroupListWnd::Delete
EXTRN	?HandleMsg@CChannelMemberList@@QAEXPAD@Z:NEAR	; CChannelMemberList::HandleMsg
EXTRN	?g_pGroupListWnd@@3PAVCGroupListWnd@@A:DWORD	; g_pGroupListWnd
EXTRN	??0CRepairDlg@@QAE@XZ:NEAR			; CRepairDlg::CRepairDlg
EXTRN	?Create@CRepairDlg@@QAEHVCSCI_Object@@@Z:NEAR	; CRepairDlg::Create
EXTRN	?fromPacket@CChannelBannedList@@QAEXPAVPackedData@@@Z:NEAR ; CChannelBannedList::fromPacket
EXTRN	__imp__strdup:NEAR
EXTRN	??1CString@@QAE@XZ:NEAR				; CString::~CString
EXTRN	?HandleMsg@CRepairDlg@@SAXVCSCI_NetMsg@@@Z:NEAR	; CRepairDlg::HandleMsg
EXTRN	??0CChanListWnd@@QAE@XZ:NEAR			; CChanListWnd::CChanListWnd
EXTRN	?Create@CChanListWnd@@QAEHPAVPackedData@@@Z:NEAR ; CChanListWnd::Create
EXTRN	??0CMainPanelWnd@@QAE@XZ:NEAR			; CMainPanelWnd::CMainPanelWnd
EXTRN	?Create@CMainPanelWnd@@QAEHPAVCWnd@@AAVCString@@HHH_N2@Z:NEAR ; CMainPanelWnd::Create
EXTRN	??0CChMemberListWnd@@QAE@XZ:NEAR		; CChMemberListWnd::CChMemberListWnd
EXTRN	?Create@CChMemberListWnd@@QAEHPAVPackedData@@@Z:NEAR ; CChMemberListWnd::Create
EXTRN	?AddChatText@CMainPanelWnd@@QAEHPBD@Z:NEAR	; CMainPanelWnd::AddChatText
EXTRN	?SetRoomName@CMainPanelWnd@@QAEXPBD@Z:NEAR	; CMainPanelWnd::SetRoomName
EXTRN	?SetMana@CMainPanelWnd@@QAEXH@Z:NEAR		; CMainPanelWnd::SetMana
EXTRN	?SetHealth@CMainPanelWnd@@QAEXHH@Z:NEAR		; CMainPanelWnd::SetHealth
EXTRN	??0CQuantityDlg@@QAE@VCSCI_Script@@VCSCI_LongInt@@@Z:NEAR ; CQuantityDlg::CQuantityDlg
EXTRN	?g_pToonWnd@@3PAVCToonMakeWndBase@@A:DWORD	; g_pToonWnd
EXTRN	?Create@CQuantityDlg@@QAEH_N@Z:NEAR		; CQuantityDlg::Create
EXTRN	??0CChBannedListWnd@@QAE@XZ:NEAR		; CChBannedListWnd::CChBannedListWnd
EXTRN	?EnableSpellButton@CMainPanelWnd@@QAEXXZ:NEAR	; CMainPanelWnd::EnableSpellButton
EXTRN	?DisableSpellButton@CMainPanelWnd@@QAEXXZ:NEAR	; CMainPanelWnd::DisableSpellButton
EXTRN	?AddFriend@CFriendMgr@@QAEXAAVCString@@@Z:NEAR	; CFriendMgr::AddFriend
EXTRN	?Create@CChBannedListWnd@@QAEHPAVPackedData@@@Z:NEAR ; CChBannedListWnd::Create
EXTRN	?g_pToonSettings@@3PAVCToonSettings@@A:DWORD	; g_pToonSettings
EXTRN	?g_pFriendMgr@@3PAVCFriendMgr@@A:DWORD		; g_pFriendMgr
EXTRN	??0CGossipWnd@@QAE@XZ:NEAR			; CGossipWnd::CGossipWnd
EXTRN	?Create@CGossipWnd@@QAEHXZ:NEAR			; CGossipWnd::Create
EXTRN	??0CPatchDlg@@QAE@XZ:NEAR			; CPatchDlg::CPatchDlg
EXTRN	?Create@CPatchDlg@@QAEHVCSCI_LongInt@@00@Z:NEAR	; CPatchDlg::Create
EXTRN	??0CInventoryDlg@@QAE@XZ:NEAR			; CInventoryDlg::CInventoryDlg
EXTRN	?Create@CInventoryDlg@@QAEHVCSCI_WorldObject@@@Z:NEAR ; CInventoryDlg::Create
EXTRN	?Update@CGossipWnd@@QAEXVObjectID@@@Z:NEAR	; CGossipWnd::Update
EXTRN	?UpdatePatch@CPatchDlg@@QAEXVCSCI_LongInt@@00@Z:NEAR ; CPatchDlg::UpdatePatch
EXTRN	?Show@CMainPanelWnd@@QAEXXZ:NEAR		; CMainPanelWnd::Show
EXTRN	?UpdateProgressBar@CPatchDlg@@QAEXXZ:NEAR	; CPatchDlg::UpdateProgressBar
EXTRN	?AddObject@CInventoryDlg@@QAEXVCSCI_WorldObject@@@Z:NEAR ; CInventoryDlg::AddObject
EXTRN	??0CPrivateTellMgr@@QAE@XZ:NEAR			; CPrivateTellMgr::CPrivateTellMgr
EXTRN	?DelObject@CInventoryDlg@@QAEXVCSCI_WorldObject@@@Z:NEAR ; CInventoryDlg::DelObject
EXTRN	?UpdateObject@CInventoryDlg@@QAEXVCSCI_WorldObject@@@Z:NEAR ; CInventoryDlg::UpdateObject
EXTRN	?g_pPatchDlg@@3PAVCPatchDlg@@A:DWORD		; g_pPatchDlg
EXTRN	?AddEnemy@CEnemyMgr@@QAEXAAVCString@@_N@Z:NEAR	; CEnemyMgr::AddEnemy
EXTRN	?FromObject@CInventoryDlg@@SAPAV1@VCSCI_WorldObject@@@Z:NEAR ; CInventoryDlg::FromObject
EXTRN	?g_pEnemyMgr@@3PAVCEnemyMgr@@A:DWORD		; g_pEnemyMgr
EXTRN	??0CWorldObjectDraggable@@QAE@VCSCI_WorldObject@@AAVCPoint@@@Z:NEAR ; CWorldObjectDraggable::CWorldObjectDraggable
EXTRN	??4TextID@@QAEAAV0@PBD@Z:NEAR			; TextID::operator=
EXTRN	?g_nWindowVersion@@3KA:DWORD			; g_nWindowVersion
EXTRN	?g_hHandCursor@@3PAUHICON__@@A:DWORD		; g_hHandCursor
EXTRN	?g_hWalkCursor@@3PAUHICON__@@A:DWORD		; g_hWalkCursor
EXTRN	?g_hSwordCursor@@3PAUHICON__@@A:DWORD		; g_hSwordCursor
EXTRN	?g_hSpellCursor@@3PAUHICON__@@A:DWORD		; g_hSpellCursor
EXTRN	?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A:DWORD	; g_pMainPanelWnd
EXTRN	?Hide@CMinRestoreClose@@QAEXXZ:NEAR		; CMinRestoreClose::Hide
EXTRN	?Show@CMinRestoreClose@@QAEXXZ:NEAR		; CMinRestoreClose::Show
EXTRN	?g_pMinRestoreClose@@3PAVCMinRestoreClose@@A:DWORD ; g_pMinRestoreClose
EXTRN	??4StringID@@QAEAAV0@PBD@Z:NEAR			; StringID::operator=
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:NEAR
EXTRN	?FilterString@@YAXPAD@Z:NEAR			; FilterString
EXTRN	??0CLookAt@@QAE@H@Z:NEAR			; CLookAt::CLookAt
EXTRN	?Create@CLookAt@@QAEHPBD@Z:NEAR			; CLookAt::Create
EXTRN	??0CBuyDlg@@QAE@VCSCI_Object@@@Z:NEAR		; CBuyDlg::CBuyDlg
EXTRN	?hMyCur@@3PAUHICON__@@A:DWORD			; hMyCur
EXTRN	?Create@CBuyDlg@@QAEHVCSCI_Object@@@Z:NEAR	; CBuyDlg::Create
EXTRN	?g_pGossipWnd@@3PAVCGossipWnd@@A:DWORD		; g_pGossipWnd
EXTRN	?g_pMainWindow@@3PAVCMainWindow@@A:DWORD	; g_pMainWindow
EXTRN	?g_pChBannedListWnd@@3PAVCChBannedListWnd@@A:DWORD ; g_pChBannedListWnd
EXTRN	??0CLookAtFiller@@QAE@XZ:NEAR			; CLookAtFiller::CLookAtFiller
EXTRN	?g_pChMemberListWnd@@3PAVCChMemberListWnd@@A:DWORD ; g_pChMemberListWnd
EXTRN	?HandleMsg@CBuyDlg@@SAXVCSCI_NetMsg@@@Z:NEAR	; CBuyDlg::HandleMsg
EXTRN	?g_pChannelMembers@@3PAVCChannelMemberList@@A:DWORD ; g_pChannelMembers
EXTRN	?g_pChannelBanned@@3PAVCChannelBannedList@@A:DWORD ; g_pChannelBanned
EXTRN	?Create@CLookAtFiller@@QAEHPAVCWnd@@@Z:NEAR	; CLookAtFiller::Create
EXTRN	?LookAtScreenNames@@3PAY0DC@DA:BYTE		; LookAtScreenNames
EXTRN	??0CPlayerListWnd@@QAE@XZ:NEAR			; CPlayerListWnd::CPlayerListWnd
EXTRN	??0CChangePasswordDlg@@QAE@VCSCI_Script@@VStringID@@1@Z:NEAR ; CChangePasswordDlg::CChangePasswordDlg
EXTRN	?StartDrag@CDragDropMgr@@QAEXPAVCDraggable@@@Z:NEAR ; CDragDropMgr::StartDrag
EXTRN	?StopDrag@CDragDropMgr@@QAEXXZ:NEAR		; CDragDropMgr::StopDrag
EXTRN	?Create@CChangePasswordDlg@@QAEHXZ:NEAR		; CChangePasswordDlg::Create
EXTRN	?at@SOL_List@@QAEGH@Z:NEAR			; SOL_List::at
EXTRN	?Create@CPlayerListWnd@@QAEHPAVPackedData@@PAD1PAPAV1@PAVCSkinListCtrl@@@Z:NEAR ; CPlayerListWnd::Create
EXTRN	?g_pChangePassword@@3PAVCChangePasswordDlg@@A:DWORD ; g_pChangePassword
EXTRN	?g_pWhoListWnd@@3PAVCPlayerListWnd@@A:DWORD	; g_pWhoListWnd
EXTRN	?g_pEventListWnd@@3PAVCPlayerListWnd@@A:DWORD	; g_pEventListWnd
EXTRN	?g_pGMListWnd@@3PAVCPlayerListWnd@@A:DWORD	; g_pGMListWnd
EXTRN	?MoveWindow@CWnd@@QAEXHHHHH@Z:NEAR		; CWnd::MoveWindow
EXTRN	?g_pDragDropMgr@@3PAVCDragDropMgr@@A:DWORD	; g_pDragDropMgr
EXTRN	__imp__malloc:NEAR
EXTRN	?StopTracking@CSkinWnd@@QAEXXZ:NEAR		; CSkinWnd::StopTracking
EXTRN	?SetPriority@CSkinWnd@@QAEXH@Z:NEAR		; CSkinWnd::SetPriority
EXTRN	?g_pSCIWnd@@3PAVCSCIWnd@@A:DWORD		; g_pSCIWnd
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
EXTRN	??0CSellDlg@@QAE@XZ:NEAR			; CSellDlg::CSellDlg
EXTRN	?Create@CSellDlg@@QAEHVCSCI_Object@@@Z:NEAR	; CSellDlg::Create
EXTRN	?HandleMsg@CSellDlg@@SAXVCSCI_NetMsg@@@Z:NEAR	; CSellDlg::HandleMsg
EXTRN	?EnableWindow@CWnd@@QAEHH@Z:NEAR		; CWnd::EnableWindow
EXTRN	?SkinMessage@@YA_NPAD0H@Z:NEAR			; SkinMessage
EXTRN	?SetFocus@CWnd@@QAEPAV1@XZ:NEAR			; CWnd::SetFocus
EXTRN	__imp__GetCursor@0:NEAR
EXTRN	??0CTreasureDlg@@QAE@VCSCI_Object@@F0F@Z:NEAR	; CTreasureDlg::CTreasureDlg
EXTRN	?Create@CTreasureDlg@@QAEH_N@Z:NEAR		; CTreasureDlg::Create
EXTRN	?AddItem@CTreasureDlg@@QAEXVCSCI_WorldObject@@@Z:NEAR ; CTreasureDlg::AddItem
EXTRN	?DeleteItem@CTreasureDlg@@QAEXVCSCI_WorldObject@@@Z:NEAR ; CTreasureDlg::DeleteItem
EXTRN	?Show@CTreasureDlg@@QAEXXZ:NEAR			; CTreasureDlg::Show
EXTRN	__imp__WindowFromPoint@8:NEAR
EXTRN	??0CLogInDlg@@QAE@XZ:NEAR			; CLogInDlg::CLogInDlg
EXTRN	?Create@CLogInDlg@@QAEHPAD0@Z:NEAR		; CLogInDlg::Create
EXTRN	?AddText@CLogInDlg@@QAEXPADH@Z:NEAR		; CLogInDlg::AddText
EXTRN	?g_pTrackingWindow@@3PAVCSkinWnd@@A:DWORD	; g_pTrackingWindow
EXTRN	?g_pTreasureDlg@@3PAVCTreasureDlg@@A:DWORD	; g_pTreasureDlg
EXTRN	??0CLoginWnd@@QAE@XZ:NEAR			; CLoginWnd::CLoginWnd
EXTRN	?Create@CLoginWnd@@QAEHXZ:NEAR			; CLoginWnd::Create
EXTRN	??0CCharSelectWnd@@QAE@XZ:NEAR			; CCharSelectWnd::CCharSelectWnd
EXTRN	?Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z:NEAR	; CCharSelectWnd::Create
EXTRN	?AddPlayButton@CCharSelectWnd@@QAEHVCSCI_WorldActor@@@Z:NEAR ; CCharSelectWnd::AddPlayButton
EXTRN	?AddCreateButton@CCharSelectWnd@@QAEHXZ:NEAR	; CCharSelectWnd::AddCreateButton
EXTRN	??0CLogInPassword@@QAE@VCSCI_Script@@VStringID@@1VCSCI_LongInt@@1@Z:NEAR ; CLogInPassword::CLogInPassword
EXTRN	??0CNoButtonDlg@@QAE@XZ:NEAR			; CNoButtonDlg::CNoButtonDlg
EXTRN	?Create@CLogInPassword@@QAEHXZ:NEAR		; CLogInPassword::Create
EXTRN	?Create@CNoButtonDlg@@QAEHPAD0_N@Z:NEAR		; CNoButtonDlg::Create
EXTRN	??0CAccountDlg@@QAE@VCSCI_Script@@@Z:NEAR	; CAccountDlg::CAccountDlg
EXTRN	?Create@CAccountDlg@@QAEHXZ:NEAR		; CAccountDlg::Create
EXTRN	?Dispose@CNoButtonDlg@@SAXVCSCI_Object@@@Z:NEAR	; CNoButtonDlg::Dispose
EXTRN	?EnterGameModal@CWindowMgr@@QAEXH@Z:NEAR	; CWindowMgr::EnterGameModal
EXTRN	?LeaveGameModal@CWindowMgr@@QAEXH@Z:NEAR	; CWindowMgr::LeaveGameModal
EXTRN	?CloseAllTransientWindows@CWindowMgr@@QAEXXZ:NEAR ; CWindowMgr::CloseAllTransientWindows
EXTRN	?g_pMailBox@@3PAVCMailBox@@A:DWORD		; g_pMailBox
EXTRN	?GetFullScreen@CWindowMgr@@QAEHXZ:NEAR		; CWindowMgr::GetFullScreen
EXTRN	??0CSingleButtonDlg@@QAE@VCSCI_Object@@F@Z:NEAR	; CSingleButtonDlg::CSingleButtonDlg
EXTRN	?Create@CSingleButtonDlg@@QAEHPAD00_N@Z:NEAR	; CSingleButtonDlg::Create
EXTRN	?g_pLogInDlg@@3PAVCLogInDlg@@A:DWORD		; g_pLogInDlg
EXTRN	?g_pWindowMgr@@3PAVCWindowMgr@@A:DWORD		; g_pWindowMgr
EXTRN	??0CVerbDialog@@QAE@XZ:NEAR			; CVerbDialog::CVerbDialog
EXTRN	?Create@CVerbDialog@@QAEHVCSCI_WorldObject@@PAVCVerbHandler@@@Z:NEAR ; CVerbDialog::Create
EXTRN	??0CDoubleButtonDlg@@QAE@VCSCI_Object@@F0F@Z:NEAR ; CDoubleButtonDlg::CDoubleButtonDlg
EXTRN	?g_pCharSelWnd@@3PAVCCharSelectWnd@@A:DWORD	; g_pCharSelWnd
EXTRN	?g_sCharacterName@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A:BYTE ; g_sCharacterName
EXTRN	?Create@CDoubleButtonDlg@@QAEHPAD000_N1@Z:NEAR	; CDoubleButtonDlg::Create
EXTRN	?AddVerbs@CVerbDialog@@QAEXUSOL_ListID@@@Z:NEAR	; CVerbDialog::AddVerbs
EXTRN	?Show@CVerbDialog@@QAEXXZ:NEAR			; CVerbDialog::Show
EXTRN	??0CCombatVerbDialog@@QAE@XZ:NEAR		; CCombatVerbDialog::CCombatVerbDialog
EXTRN	?UpdateTimer@CCombatVerbDialog@@QAEXH@Z:NEAR	; CCombatVerbDialog::UpdateTimer
EXTRN	??0CTextDoubleButtonDlg@@QAE@VStringID@@VCSCI_Object@@F1F@Z:NEAR ; CTextDoubleButtonDlg::CTextDoubleButtonDlg
EXTRN	?Create@CTextDoubleButtonDlg@@QAEHPAD0H00_N1@Z:NEAR ; CTextDoubleButtonDlg::Create
EXTRN	?g_pCombatVerbDialog@@3PAVCCombatVerbDialog@@A:DWORD ; g_pCombatVerbDialog
EXTRN	??0CCombatExitDialog@@QAE@XZ:NEAR		; CCombatExitDialog::CCombatExitDialog
EXTRN	?g_pVerbDialog@@3PAVCVerbDialog@@A:DWORD	; g_pVerbDialog
EXTRN	?g_pCombatExitDialog@@3PAVCCombatExitDialog@@A:DWORD ; g_pCombatExitDialog
_BSS	SEGMENT
$SG167054 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
	ORG $+1
$SG167156 DB	'Error:', 00H
	ORG $+1
$SG167223 DB	'Player(s) On-Line', 00H
	ORG $+2
$SG167224 DB	'dlg_whol.skn', 00H
	ORG $+3
$SG167244 DB	'Event Staff On-Line', 00H
$SG167245 DB	'dlg_whol.skn', 00H
	ORG $+3
$SG167251 DB	'In Game Staff On-Line', 00H
	ORG $+2
$SG167252 DB	'dlg_modwhol.skn', 00H
$SG167601 DB	'Quest List', 00H
	ORG $+1
$SG167699 DB	'Yes', 00H
$SG167700 DB	'No', 00H
	ORG $+1
$SG167701 DB	'Group Join', 00H
	ORG $+1
$SG167970 DB	'Sorry there are no available channels.', 00H
	ORG $+1
$SG167971 DB	'Error', 00H
	ORG $+2
$SG167973 DB	'That channel is already in use.', 00H
$SG167974 DB	'Error', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T174591 DD	019930520H
	DD	039H
	DD	FLAT:$T174605
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T174605 DD	0ffffffffH
	DD	FLAT:$L174533
	DD	0ffffffffH
	DD	FLAT:$L174534
	DD	0ffffffffH
	DD	FLAT:$L174535
	DD	0ffffffffH
	DD	FLAT:$L174536
	DD	03H
	DD	FLAT:$L174537
	DD	0ffffffffH
	DD	FLAT:$L174538
	DD	0ffffffffH
	DD	FLAT:$L174539
	DD	0ffffffffH
	DD	FLAT:$L174540
	DD	0ffffffffH
	DD	FLAT:$L174541
	DD	0ffffffffH
	DD	FLAT:$L174542
	DD	0ffffffffH
	DD	FLAT:$L174543
	DD	0ffffffffH
	DD	FLAT:$L174544
	DD	0bH
	DD	FLAT:$L174545
	DD	0bH
	DD	FLAT:$L174546
	DD	0bH
	DD	FLAT:$L174547
	DD	0bH
	DD	FLAT:$L174548
	DD	0bH
	DD	FLAT:$L174549
	DD	0bH
	DD	FLAT:$L174550
	DD	0ffffffffH
	DD	FLAT:$L174551
	DD	0ffffffffH
	DD	FLAT:$L174552
	DD	0ffffffffH
	DD	FLAT:$L174553
	DD	0ffffffffH
	DD	FLAT:$L174554
	DD	0ffffffffH
	DD	FLAT:$L174555
	DD	0ffffffffH
	DD	FLAT:$L174556
	DD	0ffffffffH
	DD	FLAT:$L174557
	DD	0ffffffffH
	DD	FLAT:$L174558
	DD	0ffffffffH
	DD	FLAT:$L174559
	DD	0ffffffffH
	DD	FLAT:$L174560
	DD	0ffffffffH
	DD	FLAT:$L174561
	DD	0ffffffffH
	DD	FLAT:$L174562
	DD	0ffffffffH
	DD	FLAT:$L174563
	DD	0ffffffffH
	DD	FLAT:$L174564
	DD	0ffffffffH
	DD	FLAT:$L174565
	DD	0ffffffffH
	DD	FLAT:$L174566
	DD	0ffffffffH
	DD	FLAT:$L174567
	DD	0ffffffffH
	DD	FLAT:$L174568
	DD	0ffffffffH
	DD	FLAT:$L174569
	DD	0ffffffffH
	DD	FLAT:$L174570
	DD	0ffffffffH
	DD	FLAT:$L174571
	DD	0ffffffffH
	DD	FLAT:$L174572
	DD	0ffffffffH
	DD	FLAT:$L174573
	DD	0ffffffffH
	DD	FLAT:$L174574
	DD	0ffffffffH
	DD	FLAT:$L174575
	DD	0ffffffffH
	DD	FLAT:$L174576
	DD	0ffffffffH
	DD	FLAT:$L174577
	DD	0ffffffffH
	DD	FLAT:$L174578
	DD	0ffffffffH
	DD	FLAT:$L174579
	DD	0ffffffffH
	DD	FLAT:$L174580
	DD	0ffffffffH
	DD	FLAT:$L174581
	DD	0ffffffffH
	DD	FLAT:$L174582
	DD	0ffffffffH
	DD	FLAT:$L174583
	DD	0ffffffffH
	DD	FLAT:$L174584
	DD	0ffffffffH
	DD	FLAT:$L174585
	DD	0ffffffffH
	DD	FLAT:$L174586
	DD	0ffffffffH
	DD	FLAT:$L174587
	DD	036H
	DD	FLAT:$L174588
	DD	036H
	DD	FLAT:$L174589
xdata$x	ENDS
_TEXT	SEGMENT
_args$ = 8
_hMsg$167963 = -228
$T174124 = -268
$T174125 = -272
$T174128 = -276
$T174129 = -280
$T174132 = -284
$T174133 = -288
$T174134 = -292
$T174135 = -296
$T174138 = -300
$T174139 = -304
$T174140 = -308
$T174141 = -312
$T174144 = -316
$T174145 = -320
$T174148 = -324
$T174149 = -328
_loginWnd$166983 = -16
$T174152 = -332
$T174153 = -336
$T174154 = -340
$T174155 = -344
$T174156 = -348
$T174157 = -352
$T174158 = -356
_data$168015 = -240
$T174161 = -360
_nSize$168017 = -232
$T174162 = -364
$T174163 = -368
_nLoop$168019 = -244
$T174164 = -372
$T174165 = -376
$T174166 = -380
$T174167 = -384
_pName$168023 = -248
_list$166999 = -20
$T174168 = -388
_sName$168024 = -252
_numChars$167000 = -24
$T174169 = -392
$T174170 = -396
$T174171 = -400
_nLoop$168027 = -256
$T174172 = -404
$T174173 = -408
_i$167005 = -28
$T174174 = -412
_pName$168031 = -260
_sName$168032 = -264
$T174177 = -416
_theChar$167009 = -32
$T174178 = -420
$T174181 = -424
$T174182 = -428
$T174183 = -432
_list$167016 = -40
_numChars$167017 = -44
$T174186 = -436
_pWnd$167018 = -36
$T174187 = -440
$T174190 = -444
$T174191 = -448
_i$167023 = -48
$T174192 = -452
$T174195 = -456
_theChar$167027 = -52
$T174196 = -460
$T174197 = -464
$T174198 = -468
$T174199 = -472
$T174200 = -476
$T174201 = -480
$T174204 = -484
$T174205 = -488
$T174208 = -492
$T174209 = -496
$T174212 = -500
$T174213 = -504
$T174216 = -508
$T174217 = -512
$T174220 = -516
$T174221 = -520
_strNull$167053 = -56
$T174224 = -524
$T174225 = -528
$T174228 = -532
$T174229 = -536
$T174230 = -540
$T174231 = -544
$T174234 = -548
$T174235 = -552
$T174238 = -556
$T174239 = -560
$T174240 = -564
$T174241 = -568
$T174242 = -572
$T174243 = -576
$T174244 = -580
$T174245 = -584
$T174246 = -588
$T174249 = -592
_chatText$167081 = -64
$T174250 = -596
$T174251 = -600
$T174252 = -604
$T174253 = -608
_pText$167085 = -60
$T174254 = -612
$T174255 = -616
$T174256 = -620
_pText$167088 = -68
$T174257 = -624
$T174258 = -628
$T174259 = -632
_name$167093 = -72
$T174262 = -636
$T174263 = -640
$T174264 = -644
$T174265 = -648
$T174266 = -652
$T174267 = -656
_hLong$167099 = -76
$T174268 = -660
_nValue$167101 = -80
$T174271 = -664
$T174272 = -668
$T174273 = -672
$T174274 = -676
$T174275 = -680
$T174276 = -684
$T174277 = -688
_nValue$167109 = -84
$T174278 = -692
$T174281 = -696
$T174282 = -700
$T174283 = -704
$T174284 = -708
$T174285 = -712
$T174286 = -716
$T174287 = -720
$T174288 = -724
$T174291 = -728
$T174292 = -732
$T174293 = -736
$T174294 = -740
$T174295 = -744
$T174296 = -748
$T174297 = -752
$T174298 = -756
$T174299 = -760
$T174300 = -764
$T174303 = -768
$T174304 = -772
$T174305 = -776
$T174306 = -780
$T174307 = -784
$T174308 = -788
$T174309 = -792
$T174310 = -796
$T174311 = -800
$T174312 = -804
$T174313 = -808
$T174314 = -812
$T174315 = -816
$T174316 = -820
$T174317 = -824
$T174320 = -828
$T174321 = -832
$T174322 = -836
$T174323 = -840
_sMessage$167155 = -88
$T174324 = -844
$T174325 = -848
$T174326 = -852
$T174327 = -856
$T174328 = -860
$T174331 = -864
$T174332 = -868
$T174333 = -872
$T174334 = -876
$T174335 = -880
$T174336 = -884
$T174337 = -888
$T174338 = -892
$T174339 = -896
$T174342 = -900
$T174343 = -904
$T174344 = -908
$T174345 = -912
$T174346 = -916
$T174349 = -920
$T174350 = -924
$T174353 = -928
$T174354 = -932
$T174355 = -936
$T174356 = -940
$T174359 = -944
$T174360 = -948
$T174361 = -952
$T174362 = -956
$T174363 = -960
$T174364 = -964
$T174365 = -968
$T174368 = -972
$T174369 = -976
$T174370 = -980
$T174373 = -984
$T174374 = -988
_packed$167206 = -100
$T174375 = -992
$T174376 = -996
_nType$167208 = -92
$T174379 = -1000
$T174380 = -1004
$T174381 = -1008
$T174384 = -1012
$T174385 = -1016
$T174386 = -1020
$T174387 = -1024
$T174388 = -1028
$T174389 = -1032
$T174392 = -1036
$T174393 = -1040
$T174394 = -1044
$T174395 = -1048
$T174396 = -1052
$T174399 = -1056
$T174400 = -1060
$T174403 = -1064
$T174404 = -1068
$T174405 = -1072
$T174406 = -1076
$T174407 = -1080
$T174410 = -1084
$T174411 = -1088
$T174412 = -1092
$T174413 = -1096
$T174414 = -1100
$T174415 = -1104
$T174416 = -1108
$T174417 = -1112
$T174418 = -1116
$T174419 = -1120
$T174420 = -1124
$T174421 = -1128
$T174422 = -1132
$T174423 = -1136
$T174424 = -1140
$T174425 = -1144
$T174426 = -1148
$T174427 = -1152
$T174428 = -1156
$T174429 = -1160
$T174432 = -1164
$T174433 = -1168
$T174434 = -1172
_list$167266 = -108
$T174435 = -1176
_hTargetObj$167267 = -104
$T174436 = -1184
_pVerbDialog$167268 = -112
$T174437 = -1188
$T174438 = -1192
$T174441 = -1196
$T174442 = -1200
$T174443 = -1204
_nFlags$167276 = -116
$T174446 = -1208
_pVerbDialog$167278 = -120
$T174447 = -1212
$T174448 = -1216
$T174449 = -1220
$T174452 = -1224
$T174453 = -1228
$T174454 = -1232
$T174455 = -1236
$T174456 = -1240
$T174457 = -1244
$T174458 = -1248
$T174459 = -1252
$T174462 = -1256
$T174463 = -1260
$T174464 = -1264
$T174465 = -1268
$T174466 = -1272
$T174467 = -1276
$T174468 = -1280
$T174469 = -1284
$T174470 = -1288
$T174471 = -1292
$T174472 = -1296
$T174473 = -1300
$T174474 = -1304
$T174475 = -1308
$T174478 = -1312
$T174479 = -1316
$T174482 = -1320
$T174483 = -1324
$T174484 = -1328
$T174485 = -1332
$T174488 = -1336
$T174489 = -1340
$T174490 = -1344
$T174491 = -1348
$T174492 = -1352
$T174493 = -1356
_nCount$167325 = -132
$T174496 = -1360
$T174497 = -1364
$T174498 = -1368
$T174499 = -1372
$T174502 = -1376
$T174503 = -1380
$T174504 = -1384
$T174505 = -1388
$T174506 = -1392
$T174509 = -1396
$T174510 = -1400
$T174511 = -1404
$T174512 = -1408
$T174513 = -1412
$T174514 = -1416
$T174515 = -1420
$T174518 = -1424
$T174519 = -1428
$T174520 = -1432
$T174521 = -1436
$T174524 = -1440
$T174525 = -1444
$T174526 = -1448
$T174529 = -1452
$T174530 = -1456
$T174531 = -1460
$T174532 = -1464
_pDlg$167375 = -136
__$EHRec$ = -12
_pTmp$167452 = -128
_hInfo$167512 = -140
_pTitle$167575 = -148
_pDlg$167579 = -144
_hObject$167614 = -152
_pDialog$167617 = -156
_hObject$167629 = -160
_pDialog$167632 = -164
_hOwner$167636 = -176
_hObject$167639 = -168
_pDialog$167642 = -172
_hOwner$167647 = -188
_hObject$167650 = -180
_pDialog$167653 = -184
_hOwner$167658 = -200
_hObject$167661 = -192
_pDialog$167664 = -196
_hLong$167689 = -204
_nValue$167691 = -208
_pDragObj$167712 = -212
_hOldCursor$167831 = -216
_hCursor$167852 = -220
_hWnd$167856 = -224
?KDialog@@YAXPAF@Z PROC NEAR				; KDialog

; 1887 : {

  02bb7	55		 push	 ebp
  02bb8	8b ec		 mov	 ebp, esp
  02bba	6a ff		 push	 -1
  02bbc	68 00 00 00 00	 push	 $L174592
  02bc1	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02bc7	50		 push	 eax
  02bc8	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  02bcf	81 ec 00 07 00
	00		 sub	 esp, 1792		; 00000700H

; 1888 : 	enum {
; 1889 : 		DialogCreateLogin,
; 1890 : 		DialogCharSel,
; 1891 : 		DialogSCIWnd,
; 1892 : 		DialogCreateMainPanel,
; 1893 : 		DialogDestroyMainPanel,
; 1894 : 		DialogCharCreation,
; 1895 : 		DialogMainPanel,
; 1896 : 		DialogLookAt,
; 1897 : 		DialogList,
; 1898 : 		DialogVerbList,
; 1899 : 		DialogMailList,
; 1900 : 		DialogGetInput,
; 1901 : 		DialogCloseTransientDialogs,
; 1902 : 		DialogTreasureDialog,
; 1903 : 		DialogSpellDialog,
; 1904 : 		DialogServerListDialog,
; 1905 : 		DialogTeleportDialog,
; 1906 : 		DialogWhatsNewDialog,
; 1907 : 		DialogMakeItemDialog,
; 1908 : 		DialogGenericDialog,
; 1909 : 		DialogChooseItemDialog,
; 1910 : 		DialogInventory,
; 1911 : 		DialogLoadSettings,
; 1912 : 		DialogQuestDialog,
; 1913 : 		DialogGroupDialog,
; 1914 : 		DialogDrag,
; 1915 : 		DialogBuyDialog,
; 1916 : 		DialogLogIn,
; 1917 : 		DialogTalk,
; 1918 : 		DialogSellDialog,
; 1919 : 		DialogCursor,
; 1920 : 		DialogQuantity,
; 1921 : 		DialogStopTracking,
; 1922 : 		DialogPatch,
; 1923 : 		DialogInfoQueue,
; 1924 : 		DialogChannelCreate,
; 1925 : 		DialogNetworkError,
; 1926 : 		DialogLoginFirst,
; 1927 : 		DialogRepairDialog,
; 1928 : 		DialogRandomFuncs,
; 1929 : 		DialogConfig,
; 1930 : 
; 1931 : 		//DialogTradeDialog,
; 1932 : 		
; 1933 : 		DialogEncodeDecodeStub,
; 1934 : 		DialogFunctionMax			
; 1935 : 	};
; 1936 : 
; 1937 : 	switch ( arg(1) ) {

  02bd5	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  02bd8	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  02bdc	89 8d 44 fa ff
	ff		 mov	 DWORD PTR -1468+[ebp], ecx
  02be2	83 bd 44 fa ff
	ff 28		 cmp	 DWORD PTR -1468+[ebp], 40 ; 00000028H
  02be9	0f 87 43 3b 00
	00		 ja	 $L166979
  02bef	8b 95 44 fa ff
	ff		 mov	 edx, DWORD PTR -1468+[ebp]
  02bf5	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L174593[edx*4]
$L166982:

; 1940 : 			CLoginWnd *loginWnd = new CLoginWnd;

  02bfc	68 a0 00 00 00	 push	 160			; 000000a0H
  02c01	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  02c06	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T174125[ebp], eax
  02c0c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  02c13	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR $T174125[ebp], 0
  02c1a	74 13		 je	 SHORT $L174126
  02c1c	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR $T174125[ebp]
  02c22	e8 00 00 00 00	 call	 ??0CLoginWnd@@QAE@XZ	; CLoginWnd::CLoginWnd
  02c27	89 85 40 fa ff
	ff		 mov	 DWORD PTR -1472+[ebp], eax
  02c2d	eb 0a		 jmp	 SHORT $L174127
$L174126:
  02c2f	c7 85 40 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1472+[ebp], 0
$L174127:
  02c39	8b 85 40 fa ff
	ff		 mov	 eax, DWORD PTR -1472+[ebp]
  02c3f	89 85 f4 fe ff
	ff		 mov	 DWORD PTR $T174124[ebp], eax
  02c45	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02c4c	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR $T174124[ebp]
  02c52	89 4d f0	 mov	 DWORD PTR _loginWnd$166983[ebp], ecx

; 1941 : 			loginWnd->Create();

  02c55	8b 4d f0	 mov	 ecx, DWORD PTR _loginWnd$166983[ebp]
  02c58	e8 00 00 00 00	 call	 ?Create@CLoginWnd@@QAEHXZ ; CLoginWnd::Create

; 1942 : 			pm.acc = 0;

  02c5d	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 1944 : 
; 1945 : 		break;

  02c67	e9 c6 3a 00 00	 jmp	 $L166979
$L166988:

; 1949 : 			enum {
; 1950 : 				dcsCreate,
; 1951 : 				dcsDestroy,
; 1952 : 				dcsSelected,
; 1953 : 				dcsUpdate,
; 1954 : 			};
; 1955 : 
; 1956 : 			switch ( arg(2) ) {

  02c6c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  02c6f	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  02c73	89 85 3c fa ff
	ff		 mov	 DWORD PTR -1476+[ebp], eax
  02c79	83 bd 3c fa ff
	ff 00		 cmp	 DWORD PTR -1476+[ebp], 0
  02c80	74 1f		 je	 SHORT $L166998
  02c82	83 bd 3c fa ff
	ff 01		 cmp	 DWORD PTR -1476+[ebp], 1
  02c89	0f 84 21 01 00
	00		 je	 $L167013
  02c8f	83 bd 3c fa ff
	ff 03		 cmp	 DWORD PTR -1476+[ebp], 3
  02c96	0f 84 41 01 00
	00		 je	 $L167015
  02c9c	e9 88 02 00 00	 jmp	 $L166995
$L166998:

; 1958 : 					// step through the list of characters provided
; 1959 : 					SOL_ListID list = arg(3);

  02ca1	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  02ca4	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  02ca8	52		 push	 edx
  02ca9	8d 4d ec	 lea	 ecx, DWORD PTR _list$166999[ebp]
  02cac	e8 00 00 00 00	 call	 ??0SOL_ListID@@QAE@G@Z	; SOL_ListID::SOL_ListID

; 1960 : 					int numChars = list->size();

  02cb1	8d 4d ec	 lea	 ecx, DWORD PTR _list$166999[ebp]
  02cb4	e8 00 00 00 00	 call	 ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ; FakeSOL_ListID::operator->
  02cb9	8b c8		 mov	 ecx, eax
  02cbb	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  02cc0	8b 00		 mov	 eax, DWORD PTR [eax]
  02cc2	89 45 e8	 mov	 DWORD PTR _numChars$167000[ebp], eax

; 1961 : 
; 1962 : 					// create the window...
; 1963 : 					g_pCharSelWnd = new CCharSelectWnd;

  02cc5	68 64 01 00 00	 push	 356			; 00000164H
  02cca	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  02ccf	89 85 e8 fe ff
	ff		 mov	 DWORD PTR $T174129[ebp], eax
  02cd5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  02cdc	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR $T174129[ebp], 0
  02ce3	74 13		 je	 SHORT $L174130
  02ce5	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR $T174129[ebp]
  02ceb	e8 00 00 00 00	 call	 ??0CCharSelectWnd@@QAE@XZ ; CCharSelectWnd::CCharSelectWnd
  02cf0	89 85 38 fa ff
	ff		 mov	 DWORD PTR -1480+[ebp], eax
  02cf6	eb 0a		 jmp	 SHORT $L174131
$L174130:
  02cf8	c7 85 38 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1480+[ebp], 0
$L174131:
  02d02	8b 8d 38 fa ff
	ff		 mov	 ecx, DWORD PTR -1480+[ebp]
  02d08	89 8d ec fe ff
	ff		 mov	 DWORD PTR $T174128[ebp], ecx
  02d0e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02d15	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR $T174128[ebp]
  02d1b	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, edx ; g_pCharSelWnd

; 1964 : 					g_pCharSelWnd->Create ( AfxGetApp()->m_pMainWnd );

  02d21	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  02d26	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  02d29	50		 push	 eax
  02d2a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  02d30	e8 00 00 00 00	 call	 ?Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z ; CCharSelectWnd::Create

; 1965 : 
; 1966 : 					for ( int i=0; i<numChars; i++ ) {

  02d35	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$167005[ebp], 0
  02d3c	eb 09		 jmp	 SHORT $L167006
$L167007:
  02d3e	8b 4d e4	 mov	 ecx, DWORD PTR _i$167005[ebp]
  02d41	83 c1 01	 add	 ecx, 1
  02d44	89 4d e4	 mov	 DWORD PTR _i$167005[ebp], ecx
$L167006:
  02d47	8b 55 e4	 mov	 edx, DWORD PTR _i$167005[ebp]
  02d4a	3b 55 e8	 cmp	 edx, DWORD PTR _numChars$167000[ebp]
  02d4d	7d 47		 jge	 SHORT $L167008

; 1967 : 						CSCI_WorldObject theChar = (CSCI_WorldObject) list->at ( i );

  02d4f	8b 45 e4	 mov	 eax, DWORD PTR _i$167005[ebp]
  02d52	50		 push	 eax
  02d53	8d 4d ec	 lea	 ecx, DWORD PTR _list$166999[ebp]
  02d56	e8 00 00 00 00	 call	 ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ; FakeSOL_ListID::operator->
  02d5b	8b c8		 mov	 ecx, eax
  02d5d	e8 00 00 00 00	 call	 ?at@SOL_List@@QAEGH@Z	; SOL_List::at
  02d62	50		 push	 eax
  02d63	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T174132[ebp]
  02d69	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  02d6e	50		 push	 eax
  02d6f	8d 4d e0	 lea	 ecx, DWORD PTR _theChar$167009[ebp]
  02d72	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 1968 : 
; 1969 : 						g_pCharSelWnd->AddPlayButton ( theChar );

  02d77	51		 push	 ecx
  02d78	8b cc		 mov	 ecx, esp
  02d7a	89 a5 e0 fe ff
	ff		 mov	 DWORD PTR $T174133[ebp], esp
  02d80	8d 55 e0	 lea	 edx, DWORD PTR _theChar$167009[ebp]
  02d83	52		 push	 edx
  02d84	e8 00 00 00 00	 call	 ??0CSCI_WorldActor@@QAE@ABVObjectID@@@Z ; CSCI_WorldActor::CSCI_WorldActor
  02d89	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  02d8f	e8 00 00 00 00	 call	 ?AddPlayButton@CCharSelectWnd@@QAEHVCSCI_WorldActor@@@Z ; CCharSelectWnd::AddPlayButton

; 1970 : 					}

  02d94	eb a8		 jmp	 SHORT $L167007
$L167008:

; 1971 : 
; 1972 : 					g_pCharSelWnd->AddCreateButton();

  02d96	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  02d9c	e8 00 00 00 00	 call	 ?AddCreateButton@CCharSelectWnd@@QAEHXZ ; CCharSelectWnd::AddCreateButton

; 1973 : 					
; 1974 : 					pm.acc = 0;

  02da1	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 1976 : 
; 1977 : 				break;

  02dab	e9 79 01 00 00	 jmp	 $L166995
$L167013:

; 1980 : 					if ( NULL != g_pCharSelWnd ) {

  02db0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, 0 ; g_pCharSelWnd
  02db7	74 1f		 je	 SHORT $L167014

; 1981 :  						g_pCharSelWnd->CloseSelf();

  02db9	6a 00		 push	 0
  02dbb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  02dc0	8b 10		 mov	 edx, DWORD PTR [eax]
  02dc2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  02dc8	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 1982 :                         g_pCharSelWnd = NULL;

  02dce	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, 0 ; g_pCharSelWnd
$L167014:

; 1985 : 
; 1986 : 				break;

  02dd8	e9 4c 01 00 00	 jmp	 $L166995
$L167015:

; 1989 : 					// step through the list of characters provided
; 1990 : 					SOL_ListID list = arg(3);

  02ddd	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  02de0	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  02de4	51		 push	 ecx
  02de5	8d 4d d8	 lea	 ecx, DWORD PTR _list$167016[ebp]
  02de8	e8 00 00 00 00	 call	 ??0SOL_ListID@@QAE@G@Z	; SOL_ListID::SOL_ListID

; 1991 : 					int numChars = list->size();

  02ded	8d 4d d8	 lea	 ecx, DWORD PTR _list$167016[ebp]
  02df0	e8 00 00 00 00	 call	 ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ; FakeSOL_ListID::operator->
  02df5	8b c8		 mov	 ecx, eax
  02df7	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  02dfc	8b 10		 mov	 edx, DWORD PTR [eax]
  02dfe	89 55 d4	 mov	 DWORD PTR _numChars$167017[ebp], edx

; 1992 : 
; 1993 : 					// create the window...
; 1994 : 					CCharSelectWnd* pWnd = new CCharSelectWnd;

  02e01	68 64 01 00 00	 push	 356			; 00000164H
  02e06	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  02e0b	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T174135[ebp], eax
  02e11	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  02e18	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR $T174135[ebp], 0
  02e1f	74 13		 je	 SHORT $L174136
  02e21	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR $T174135[ebp]
  02e27	e8 00 00 00 00	 call	 ??0CCharSelectWnd@@QAE@XZ ; CCharSelectWnd::CCharSelectWnd
  02e2c	89 85 34 fa ff
	ff		 mov	 DWORD PTR -1484+[ebp], eax
  02e32	eb 0a		 jmp	 SHORT $L174137
$L174136:
  02e34	c7 85 34 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1484+[ebp], 0
$L174137:
  02e3e	8b 85 34 fa ff
	ff		 mov	 eax, DWORD PTR -1484+[ebp]
  02e44	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T174134[ebp], eax
  02e4a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02e51	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR $T174134[ebp]
  02e57	89 4d dc	 mov	 DWORD PTR _pWnd$167018[ebp], ecx

; 1995 : 					pWnd->Create ( AfxGetApp()->m_pMainWnd );

  02e5a	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  02e5f	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  02e62	52		 push	 edx
  02e63	8b 4d dc	 mov	 ecx, DWORD PTR _pWnd$167018[ebp]
  02e66	e8 00 00 00 00	 call	 ?Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z ; CCharSelectWnd::Create

; 1996 : 
; 1997 : 					for ( int i=0; i<numChars; i++ ) {

  02e6b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$167023[ebp], 0
  02e72	eb 09		 jmp	 SHORT $L167024
$L167025:
  02e74	8b 45 d0	 mov	 eax, DWORD PTR _i$167023[ebp]
  02e77	83 c0 01	 add	 eax, 1
  02e7a	89 45 d0	 mov	 DWORD PTR _i$167023[ebp], eax
$L167024:
  02e7d	8b 4d d0	 mov	 ecx, DWORD PTR _i$167023[ebp]
  02e80	3b 4d d4	 cmp	 ecx, DWORD PTR _numChars$167017[ebp]
  02e83	7d 44		 jge	 SHORT $L167026

; 1998 : 						CSCI_WorldObject theChar = (CSCI_WorldObject) list->at ( i );

  02e85	8b 55 d0	 mov	 edx, DWORD PTR _i$167023[ebp]
  02e88	52		 push	 edx
  02e89	8d 4d d8	 lea	 ecx, DWORD PTR _list$167016[ebp]
  02e8c	e8 00 00 00 00	 call	 ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ; FakeSOL_ListID::operator->
  02e91	8b c8		 mov	 ecx, eax
  02e93	e8 00 00 00 00	 call	 ?at@SOL_List@@QAEGH@Z	; SOL_List::at
  02e98	50		 push	 eax
  02e99	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T174138[ebp]
  02e9f	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  02ea4	50		 push	 eax
  02ea5	8d 4d cc	 lea	 ecx, DWORD PTR _theChar$167027[ebp]
  02ea8	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 1999 : 
; 2000 : 						pWnd->AddPlayButton ( theChar );

  02ead	51		 push	 ecx
  02eae	8b cc		 mov	 ecx, esp
  02eb0	89 a5 d0 fe ff
	ff		 mov	 DWORD PTR $T174139[ebp], esp
  02eb6	8d 45 cc	 lea	 eax, DWORD PTR _theChar$167027[ebp]
  02eb9	50		 push	 eax
  02eba	e8 00 00 00 00	 call	 ??0CSCI_WorldActor@@QAE@ABVObjectID@@@Z ; CSCI_WorldActor::CSCI_WorldActor
  02ebf	8b 4d dc	 mov	 ecx, DWORD PTR _pWnd$167018[ebp]
  02ec2	e8 00 00 00 00	 call	 ?AddPlayButton@CCharSelectWnd@@QAEHVCSCI_WorldActor@@@Z ; CCharSelectWnd::AddPlayButton

; 2001 : 					}

  02ec7	eb ab		 jmp	 SHORT $L167025
$L167026:

; 2002 : 
; 2003 : 					pWnd->AddCreateButton();

  02ec9	8b 4d dc	 mov	 ecx, DWORD PTR _pWnd$167018[ebp]
  02ecc	e8 00 00 00 00	 call	 ?AddCreateButton@CCharSelectWnd@@QAEHXZ ; CCharSelectWnd::AddCreateButton

; 2004 : 					
; 2005 : 					delete g_pCharSelWnd;

  02ed1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  02ed7	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T174141[ebp], ecx
  02edd	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR $T174141[ebp]
  02ee3	89 95 cc fe ff
	ff		 mov	 DWORD PTR $T174140[ebp], edx
  02ee9	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR $T174140[ebp], 0
  02ef0	74 1b		 je	 SHORT $L174142
  02ef2	6a 01		 push	 1
  02ef4	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T174140[ebp]
  02efa	8b 10		 mov	 edx, DWORD PTR [eax]
  02efc	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR $T174140[ebp]
  02f02	ff 52 04	 call	 DWORD PTR [edx+4]
  02f05	89 85 30 fa ff
	ff		 mov	 DWORD PTR -1488+[ebp], eax
  02f0b	eb 0a		 jmp	 SHORT $L174143
$L174142:
  02f0d	c7 85 30 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1488+[ebp], 0
$L174143:

; 2006 : 					g_pCharSelWnd = pWnd;

  02f17	8b 45 dc	 mov	 eax, DWORD PTR _pWnd$167018[ebp]
  02f1a	a3 00 00 00 00	 mov	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, eax ; g_pCharSelWnd

; 2007 : 
; 2008 : 					pm.acc = 0;

  02f1f	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0
$L166995:

; 2014 : 
; 2015 : 		break;

  02f29	e9 04 38 00 00	 jmp	 $L166979
$L167033:

; 2019 : 			enum {
; 2020 : 				dswShow,
; 2021 : 				dswHide,
; 2022 : 				dswSet,
; 2023 : 				dswEnable,
; 2024 : 				dswDisable,
; 2025 : 			};
; 2026 : 
; 2027 : 			switch ( arg(2) ) {

  02f2e	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  02f31	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  02f35	89 95 2c fa ff
	ff		 mov	 DWORD PTR -1492+[ebp], edx
  02f3b	83 bd 2c fa ff
	ff 04		 cmp	 DWORD PTR -1492+[ebp], 4
  02f42	0f 87 a6 00 00
	00		 ja	 $L167041
  02f48	8b 85 2c fa ff
	ff		 mov	 eax, DWORD PTR -1492+[ebp]
  02f4e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L174594[eax*4]
$L167044:

; 2028 : 				case dswShow:
; 2029 : 					g_pSCIWnd->ShowWindow ( SW_SHOW );

  02f55	6a 05		 push	 5
  02f57	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A ; g_pSCIWnd
  02f5d	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 2030 : 
; 2031 : 					// show the min/restore/close buttons if we have an ego and are in full screen..
; 2032 : 					if ( g_pWindowMgr->GetFullScreen() ) {

  02f62	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A ; g_pWindowMgr
  02f68	e8 00 00 00 00	 call	 ?GetFullScreen@CWindowMgr@@QAEHXZ ; CWindowMgr::GetFullScreen
  02f6d	85 c0		 test	 eax, eax
  02f6f	74 0b		 je	 SHORT $L167045

; 2033 : 						g_pMinRestoreClose->Show();

  02f71	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMinRestoreClose@@3PAVCMinRestoreClose@@A ; g_pMinRestoreClose
  02f77	e8 00 00 00 00	 call	 ?Show@CMinRestoreClose@@QAEXXZ ; CMinRestoreClose::Show
$L167045:

; 2035 : 						
; 2036 : 
; 2037 : 					break;

  02f7c	eb 70		 jmp	 SHORT $L167041
$L167046:

; 2038 : 
; 2039 : 				case dswHide:
; 2040 : 					g_pSCIWnd->ShowWindow ( SW_HIDE );

  02f7e	6a 00		 push	 0
  02f80	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A ; g_pSCIWnd
  02f86	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 2041 : 					g_pMinRestoreClose->Hide();

  02f8b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMinRestoreClose@@3PAVCMinRestoreClose@@A ; g_pMinRestoreClose
  02f91	e8 00 00 00 00	 call	 ?Hide@CMinRestoreClose@@QAEXXZ ; CMinRestoreClose::Hide

; 2042 : 
; 2043 : 					break;

  02f96	eb 56		 jmp	 SHORT $L167041
$L167047:

; 2047 : 						if ( argCount >= 6 ) {

  02f98	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  02f9b	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  02f9e	83 fa 06	 cmp	 edx, 6
  02fa1	7c 2d		 jl	 SHORT $L167048

; 2048 : 							g_pSCIWnd->MoveWindow ( arg(3), arg(4), arg(5), arg(6) );

  02fa3	6a 01		 push	 1
  02fa5	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  02fa8	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  02fac	51		 push	 ecx
  02fad	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  02fb0	0f bf 42 0a	 movsx	 eax, WORD PTR [edx+10]
  02fb4	50		 push	 eax
  02fb5	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  02fb8	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  02fbc	52		 push	 edx
  02fbd	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  02fc0	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  02fc4	51		 push	 ecx
  02fc5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A ; g_pSCIWnd
  02fcb	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXHHHHH@Z ; CWnd::MoveWindow
$L167048:

; 2051 : 
; 2052 : 					break;

  02fd0	eb 1c		 jmp	 SHORT $L167041
$L167049:

; 2053 : 
; 2054 : 				case dswEnable:
; 2055 : 					g_pSCIWnd->EnableWindow( true );

  02fd2	6a 01		 push	 1
  02fd4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A ; g_pSCIWnd
  02fda	e8 00 00 00 00	 call	 ?EnableWindow@CWnd@@QAEHH@Z ; CWnd::EnableWindow

; 2056 : 
; 2057 : 					break;

  02fdf	eb 0d		 jmp	 SHORT $L167041
$L167050:

; 2058 : 
; 2059 : 				case dswDisable:
; 2060 : 					g_pSCIWnd->EnableWindow( false );

  02fe1	6a 00		 push	 0
  02fe3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A ; g_pSCIWnd
  02fe9	e8 00 00 00 00	 call	 ?EnableWindow@CWnd@@QAEHH@Z ; CWnd::EnableWindow
$L167041:

; 2065 : 
; 2066 : 		break;

  02fee	e9 3f 37 00 00	 jmp	 $L166979
$L167051:

; 2070 : 			if ( NULL == g_pMainPanelWnd ) {

  02ff3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  02ffa	0f 85 9a 00 00
	00		 jne	 $L167052

; 2071 :                 CString strNull = "";

  03000	68 00 00 00 00	 push	 OFFSET FLAT:$SG167054
  03005	8d 4d c8	 lea	 ecx, DWORD PTR _strNull$167053[ebp]
  03008	e8 00 00 00 00	 call	 ??0CString@@QAE@PBD@Z	; CString::CString
  0300d	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 2072 : 				g_pMainPanelWnd = new CMainPanelWnd;

  03014	68 e8 00 00 00	 push	 232			; 000000e8H
  03019	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0301e	89 85 c0 fe ff
	ff		 mov	 DWORD PTR $T174145[ebp], eax
  03024	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  03028	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR $T174145[ebp], 0
  0302f	74 13		 je	 SHORT $L174146
  03031	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR $T174145[ebp]
  03037	e8 00 00 00 00	 call	 ??0CMainPanelWnd@@QAE@XZ ; CMainPanelWnd::CMainPanelWnd
  0303c	89 85 28 fa ff
	ff		 mov	 DWORD PTR -1496+[ebp], eax
  03042	eb 0a		 jmp	 SHORT $L174147
$L174146:
  03044	c7 85 28 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1496+[ebp], 0
$L174147:
  0304e	8b 95 28 fa ff
	ff		 mov	 edx, DWORD PTR -1496+[ebp]
  03054	89 95 c4 fe ff
	ff		 mov	 DWORD PTR $T174144[ebp], edx
  0305a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0305e	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR $T174144[ebp]
  03064	a3 00 00 00 00	 mov	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, eax ; g_pMainPanelWnd

; 2073 : 				g_pMainPanelWnd->Create ( AfxGetApp()->m_pMainWnd, strNull, 0, 0, 0 );

  03069	6a 00		 push	 0
  0306b	6a 00		 push	 0
  0306d	6a 00		 push	 0
  0306f	6a 00		 push	 0
  03071	6a 00		 push	 0
  03073	8d 4d c8	 lea	 ecx, DWORD PTR _strNull$167053[ebp]
  03076	51		 push	 ecx
  03077	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  0307c	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  0307f	52		 push	 edx
  03080	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  03086	e8 00 00 00 00	 call	 ?Create@CMainPanelWnd@@QAEHPAVCWnd@@AAVCString@@HHH_N2@Z ; CMainPanelWnd::Create

; 2074 : 			}

  0308b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03092	8d 4d c8	 lea	 ecx, DWORD PTR _strNull$167053[ebp]
  03095	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
$L167052:

; 2076 : 
; 2077 : 		break;

  0309a	e9 93 36 00 00	 jmp	 $L166979
$L167059:

; 2081 : 			if ( NULL != g_pMainPanelWnd ) {

  0309f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  030a6	74 4f		 je	 SHORT $L167060

; 2082 : 				delete g_pMainPanelWnd;

  030a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  030ad	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T174149[ebp], eax
  030b3	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR $T174149[ebp]
  030b9	89 8d bc fe ff
	ff		 mov	 DWORD PTR $T174148[ebp], ecx
  030bf	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR $T174148[ebp], 0
  030c6	74 1b		 je	 SHORT $L174150
  030c8	6a 01		 push	 1
  030ca	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR $T174148[ebp]
  030d0	8b 02		 mov	 eax, DWORD PTR [edx]
  030d2	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T174148[ebp]
  030d8	ff 50 04	 call	 DWORD PTR [eax+4]
  030db	89 85 24 fa ff
	ff		 mov	 DWORD PTR -1500+[ebp], eax
  030e1	eb 0a		 jmp	 SHORT $L174151
$L174150:
  030e3	c7 85 24 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1500+[ebp], 0
$L174151:

; 2083 : 				g_pMainPanelWnd = NULL;

  030ed	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
$L167060:

; 2086 : 
; 2087 : 		break;

  030f7	e9 36 36 00 00	 jmp	 $L166979
$L167063:

; 2091 : 			// enum the special sub functions for the main panel interface
; 2092 : 			enum {
; 2093 : 				dmpCreate,
; 2094 : 				dmpDestroy,
; 2095 : 				dmpAddChatText,
; 2096 : 				dmpUpdateName,
; 2097 : 				dmpUpdateMana,
; 2098 :  				dmpUpdateHealth,
; 2099 :  				dmpDisableButtons,
; 2100 :  				dmpEnableButtons,
; 2101 : 				dmpUpdateRights,
; 2102 : 				dmpSpellButton,
; 2103 : 				dmpShowWindow,
; 2104 : 			};
; 2105 : 
; 2106 : 			switch ( arg(2) ) {

  030fc	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  030ff	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  03103	89 95 20 fa ff
	ff		 mov	 DWORD PTR -1504+[ebp], edx
  03109	8b 85 20 fa ff
	ff		 mov	 eax, DWORD PTR -1504+[ebp]
  0310f	83 e8 02	 sub	 eax, 2
  03112	89 85 20 fa ff
	ff		 mov	 DWORD PTR -1504+[ebp], eax
  03118	83 bd 20 fa ff
	ff 08		 cmp	 DWORD PTR -1504+[ebp], 8
  0311f	0f 87 a2 02 00
	00		 ja	 $L167077
  03125	8b 8d 20 fa ff
	ff		 mov	 ecx, DWORD PTR -1504+[ebp]
  0312b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L174595[ecx*4]
$L167080:

; 2108 : 					StringID chatText = (StringID)arg(3);

  03132	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03135	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  03139	50		 push	 eax
  0313a	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T174153[ebp]
  03140	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03145	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T174153[ebp]
  0314b	51		 push	 ecx
  0314c	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T174152[ebp]
  03152	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03157	50		 push	 eax
  03158	8d 4d c0	 lea	 ecx, DWORD PTR _chatText$167081[ebp]
  0315b	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID

; 2109 : 					char* pText = *chatText;

  03160	8d 4d c0	 lea	 ecx, DWORD PTR _chatText$167081[ebp]
  03163	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03168	89 45 c4	 mov	 DWORD PTR _pText$167085[ebp], eax

; 2110 : 
; 2111 : 					if ( NULL != g_pMainPanelWnd ) {

  0316b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  03172	0f 84 86 00 00
	00		 je	 $L167090

; 2112 : 						if ( g_pToonSettings && g_pToonSettings->getChat_Profanity() && **chatText != '-' ) {

  03178	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pToonSettings@@3PAVCToonSettings@@A, 0 ; g_pToonSettings
  0317f	74 69		 je	 SHORT $L167087
  03181	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pToonSettings@@3PAVCToonSettings@@A ; g_pToonSettings
  03187	e8 00 00 00 00	 call	 ?getChat_Profanity@CToonSettings@@QAEHXZ ; CToonSettings::getChat_Profanity
  0318c	85 c0		 test	 eax, eax
  0318e	74 5a		 je	 SHORT $L167087
  03190	8d 4d c0	 lea	 ecx, DWORD PTR _chatText$167081[ebp]
  03193	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03198	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0319b	83 fa 2d	 cmp	 edx, 45			; 0000002dH
  0319e	74 4a		 je	 SHORT $L167087

; 2113 : 							char* pText = strdup( *chatText );

  031a0	8d 4d c0	 lea	 ecx, DWORD PTR _chatText$167081[ebp]
  031a3	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  031a8	50		 push	 eax
  031a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strdup
  031af	83 c4 04	 add	 esp, 4
  031b2	89 45 bc	 mov	 DWORD PTR _pText$167088[ebp], eax

; 2114 : 
; 2115 : 							FilterString( pText );

  031b5	8b 45 bc	 mov	 eax, DWORD PTR _pText$167088[ebp]
  031b8	50		 push	 eax
  031b9	e8 00 00 00 00	 call	 ?FilterString@@YAXPAD@Z	; FilterString
  031be	83 c4 04	 add	 esp, 4

; 2116 : 							g_pMainPanelWnd->AddChatText ( pText );

  031c1	8b 4d bc	 mov	 ecx, DWORD PTR _pText$167088[ebp]
  031c4	51		 push	 ecx
  031c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  031cb	e8 00 00 00 00	 call	 ?AddChatText@CMainPanelWnd@@QAEHPBD@Z ; CMainPanelWnd::AddChatText

; 2117 : 
; 2118 : 							delete pText;

  031d0	8b 55 bc	 mov	 edx, DWORD PTR _pText$167088[ebp]
  031d3	89 95 ac fe ff
	ff		 mov	 DWORD PTR $T174154[ebp], edx
  031d9	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR $T174154[ebp]
  031df	50		 push	 eax
  031e0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  031e5	83 c4 04	 add	 esp, 4

; 2119 : 						} else {

  031e8	eb 14		 jmp	 SHORT $L167090
$L167087:

; 2120 : 							g_pMainPanelWnd->AddChatText ( *chatText );

  031ea	8d 4d c0	 lea	 ecx, DWORD PTR _chatText$167081[ebp]
  031ed	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  031f2	50		 push	 eax
  031f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  031f9	e8 00 00 00 00	 call	 ?AddChatText@CMainPanelWnd@@QAEHPBD@Z ; CMainPanelWnd::AddChatText
$L167090:

; 2124 : 
; 2125 : 				break;

  031fe	e9 c4 01 00 00	 jmp	 $L167077
$L167091:

; 2129 : 					if ( NULL != g_pMainPanelWnd ) {

  03203	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  0320a	74 42		 je	 SHORT $L167092

; 2130 : 						StringID name = (StringID)arg(3);

  0320c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0320f	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  03213	52		 push	 edx
  03214	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T174156[ebp]
  0321a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0321f	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR $T174156[ebp]
  03225	50		 push	 eax
  03226	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T174155[ebp]
  0322c	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03231	50		 push	 eax
  03232	8d 4d b8	 lea	 ecx, DWORD PTR _name$167093[ebp]
  03235	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID

; 2131 : 						g_pMainPanelWnd->SetRoomName ( *name );

  0323a	8d 4d b8	 lea	 ecx, DWORD PTR _name$167093[ebp]
  0323d	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  03242	50		 push	 eax
  03243	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  03249	e8 00 00 00 00	 call	 ?SetRoomName@CMainPanelWnd@@QAEXPBD@Z ; CMainPanelWnd::SetRoomName
$L167092:

; 2134 : 
; 2135 : 				break;

  0324e	e9 74 01 00 00	 jmp	 $L167077
$L167097:

; 2139 : 					if ( NULL != g_pMainPanelWnd ) {

  03253	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  0325a	74 36		 je	 SHORT $L167100

; 2140 : 						CSCI_LongInt hLong = arg(3);

  0325c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0325f	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  03263	52		 push	 edx
  03264	8d 4d b4	 lea	 ecx, DWORD PTR _hLong$167099[ebp]
  03267	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt

; 2141 : 
; 2142 : 						if ( hLong.IsObject() ) {

  0326c	8d 4d b4	 lea	 ecx, DWORD PTR _hLong$167099[ebp]
  0326f	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  03274	85 c0		 test	 eax, eax
  03276	74 1a		 je	 SHORT $L167100

; 2143 : 							long nValue = hLong.get_nValue();

  03278	8d 4d b4	 lea	 ecx, DWORD PTR _hLong$167099[ebp]
  0327b	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  03280	89 45 b0	 mov	 DWORD PTR _nValue$167101[ebp], eax

; 2144 : 							g_pMainPanelWnd->SetMana ( nValue );

  03283	8b 45 b0	 mov	 eax, DWORD PTR _nValue$167101[ebp]
  03286	50		 push	 eax
  03287	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  0328d	e8 00 00 00 00	 call	 ?SetMana@CMainPanelWnd@@QAEXH@Z ; CMainPanelWnd::SetMana
$L167100:

; 2148 : 
; 2149 : 				break;

  03292	e9 30 01 00 00	 jmp	 $L167077
$L167102:

; 2153 : 					if ( NULL != g_pMainPanelWnd ) {

  03297	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  0329e	74 3e		 je	 SHORT $L167103

; 2154 : 						g_pMainPanelWnd->SetHealth ( ( ( arg(3) & 0x0000ffff ) + ( arg(4) << 16 ) ), ( ( arg(5) & 0x0000ffff ) + ( arg(6) << 16 ) ) );

  032a0	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  032a3	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  032a7	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  032ad	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  032b0	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  032b4	c1 e1 10	 shl	 ecx, 16			; 00000010H
  032b7	03 d1		 add	 edx, ecx
  032b9	52		 push	 edx
  032ba	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  032bd	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  032c1	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  032c6	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  032c9	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  032cd	c1 e2 10	 shl	 edx, 16			; 00000010H
  032d0	03 c2		 add	 eax, edx
  032d2	50		 push	 eax
  032d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  032d9	e8 00 00 00 00	 call	 ?SetHealth@CMainPanelWnd@@QAEXHH@Z ; CMainPanelWnd::SetHealth
$L167103:

; 2157 : 
; 2158 : 				break;

  032de	e9 e4 00 00 00	 jmp	 $L167077
$L167104:

; 2162 : 					if ( g_pWindowMgr )

  032e3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A, 0 ; g_pWindowMgr
  032ea	74 0d		 je	 SHORT $L167105

; 2163 : 						g_pWindowMgr->EnterGameModal( gmCombatModal );

  032ec	6a 01		 push	 1
  032ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A ; g_pWindowMgr
  032f4	e8 00 00 00 00	 call	 ?EnterGameModal@CWindowMgr@@QAEXH@Z ; CWindowMgr::EnterGameModal
$L167105:

; 2165 : 
; 2166 : 				break;

  032f9	e9 c9 00 00 00	 jmp	 $L167077
$L167106:

; 2170 : 					if ( g_pWindowMgr )

  032fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A, 0 ; g_pWindowMgr
  03305	74 0d		 je	 SHORT $L167107

; 2171 : 						g_pWindowMgr->LeaveGameModal( gmCombatModal );

  03307	6a 01		 push	 1
  03309	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A ; g_pWindowMgr
  0330f	e8 00 00 00 00	 call	 ?LeaveGameModal@CWindowMgr@@QAEXH@Z ; CWindowMgr::LeaveGameModal
$L167107:

; 2173 : 
; 2174 : 				break;

  03314	e9 ae 00 00 00	 jmp	 $L167077
$L167108:

; 2177 : 					CSCI_LongInt nValue( arg(3) );

  03319	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0331c	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  03320	51		 push	 ecx
  03321	8d 4d ac	 lea	 ecx, DWORD PTR _nValue$167109[ebp]
  03324	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt

; 2178 : 
; 2179 : 					new CToonSettings( nValue.get_nValue() );

  03329	6a 64		 push	 100			; 00000064H
  0332b	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03330	89 85 9c fe ff
	ff		 mov	 DWORD PTR $T174158[ebp], eax
  03336	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  0333d	83 bd 9c fe ff
	ff 00		 cmp	 DWORD PTR $T174158[ebp], 0
  03344	74 1c		 je	 SHORT $L174159
  03346	8d 4d ac	 lea	 ecx, DWORD PTR _nValue$167109[ebp]
  03349	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  0334e	50		 push	 eax
  0334f	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR $T174158[ebp]
  03355	e8 00 00 00 00	 call	 ??0CToonSettings@@QAE@H@Z ; CToonSettings::CToonSettings
  0335a	89 85 1c fa ff
	ff		 mov	 DWORD PTR -1508+[ebp], eax
  03360	eb 0a		 jmp	 SHORT $L174160
$L174159:
  03362	c7 85 1c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1508+[ebp], 0
$L174160:
  0336c	8b 95 1c fa ff
	ff		 mov	 edx, DWORD PTR -1508+[ebp]
  03372	89 95 a0 fe ff
	ff		 mov	 DWORD PTR $T174157[ebp], edx
  03378	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
$L167114:

; 2184 : 					if ( NULL != g_pMainPanelWnd ) {

  0337f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  03386	74 29		 je	 SHORT $L167117

; 2185 : 						if ( arg(3) & _RM_FLAG_NO_MAGIC ) {

  03388	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0338b	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0338f	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  03395	85 c9		 test	 ecx, ecx
  03397	74 0d		 je	 SHORT $L167116

; 2186 : 							g_pMainPanelWnd->DisableSpellButton();

  03399	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  0339f	e8 00 00 00 00	 call	 ?DisableSpellButton@CMainPanelWnd@@QAEXXZ ; CMainPanelWnd::DisableSpellButton

; 2187 : 						} else {

  033a4	eb 0b		 jmp	 SHORT $L167117
$L167116:

; 2188 : 							g_pMainPanelWnd->EnableSpellButton();

  033a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  033ac	e8 00 00 00 00	 call	 ?EnableSpellButton@CMainPanelWnd@@QAEXXZ ; CMainPanelWnd::EnableSpellButton
$L167117:

; 2192 : 
; 2193 : 				break;

  033b1	eb 14		 jmp	 SHORT $L167077
$L167118:

; 2196 : 					if ( NULL != g_pMainPanelWnd ) {

  033b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  033ba	74 0b		 je	 SHORT $L167119

; 2197 : 						g_pMainPanelWnd->Show();

  033bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  033c2	e8 00 00 00 00	 call	 ?Show@CMainPanelWnd@@QAEXXZ ; CMainPanelWnd::Show
$L167119:
$L167077:

; 2204 : 
; 2205 : 		break;

  033c7	e9 66 33 00 00	 jmp	 $L166979
$L167120:

; 2208 : 			// Toon Creation Screen
; 2209 : 			enum {
; 2210 : 				dtmCreate,
; 2211 : 				dtmDestroy,
; 2212 : 				dtmMessage,
; 2213 : 			};
; 2214 : 
; 2215 : 			switch ( arg(2) ) {

  033cc	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  033cf	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  033d3	89 85 18 fa ff
	ff		 mov	 DWORD PTR -1512+[ebp], eax
  033d9	83 bd 18 fa ff
	ff 00		 cmp	 DWORD PTR -1512+[ebp], 0
  033e0	74 1f		 je	 SHORT $L167129
  033e2	83 bd 18 fa ff
	ff 01		 cmp	 DWORD PTR -1512+[ebp], 1
  033e9	0f 84 3f 01 00
	00		 je	 $L167152
  033ef	83 bd 18 fa ff
	ff 02		 cmp	 DWORD PTR -1512+[ebp], 2
  033f6	0f 84 53 01 00
	00		 je	 $L167154
  033fc	e9 83 01 00 00	 jmp	 $L167126
$L167129:

; 2217 : 					// create the window...
; 2218 : 					(new CToonMakeWnd ( (ObjectID) arg(3), (ObjectID) arg(4), (ObjectID) arg(5), (ObjectID) arg(6), (ObjectID) arg(7), (ObjectID) arg(8) ))->Create();

  03401	68 e0 00 00 00	 push	 224			; 000000e0H
  03406	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0340b	89 85 94 fe ff
	ff		 mov	 DWORD PTR $T174162[ebp], eax
  03411	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  03418	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR $T174162[ebp], 0
  0341f	0f 84 df 00 00
	00		 je	 $L174175
  03425	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03428	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  0342c	52		 push	 edx
  0342d	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T174164[ebp]
  03433	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  03438	51		 push	 ecx
  03439	8b cc		 mov	 ecx, esp
  0343b	89 a5 90 fe ff
	ff		 mov	 DWORD PTR $T174163[ebp], esp
  03441	50		 push	 eax
  03442	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  03447	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0344a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  0344e	51		 push	 ecx
  0344f	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR $T174166[ebp]
  03455	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0345a	51		 push	 ecx
  0345b	8b cc		 mov	 ecx, esp
  0345d	89 a5 88 fe ff
	ff		 mov	 DWORD PTR $T174165[ebp], esp
  03463	50		 push	 eax
  03464	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  03469	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0346c	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  03470	50		 push	 eax
  03471	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T174168[ebp]
  03477	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0347c	51		 push	 ecx
  0347d	8b cc		 mov	 ecx, esp
  0347f	89 a5 80 fe ff
	ff		 mov	 DWORD PTR $T174167[ebp], esp
  03485	50		 push	 eax
  03486	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  0348b	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0348e	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  03492	52		 push	 edx
  03493	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR $T174170[ebp]
  03499	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0349e	51		 push	 ecx
  0349f	8b cc		 mov	 ecx, esp
  034a1	89 a5 78 fe ff
	ff		 mov	 DWORD PTR $T174169[ebp], esp
  034a7	50		 push	 eax
  034a8	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  034ad	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  034b0	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  034b4	51		 push	 ecx
  034b5	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T174172[ebp]
  034bb	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  034c0	51		 push	 ecx
  034c1	8b cc		 mov	 ecx, esp
  034c3	89 a5 70 fe ff
	ff		 mov	 DWORD PTR $T174171[ebp], esp
  034c9	50		 push	 eax
  034ca	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  034cf	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  034d2	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  034d6	50		 push	 eax
  034d7	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T174174[ebp]
  034dd	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  034e2	51		 push	 ecx
  034e3	8b cc		 mov	 ecx, esp
  034e5	89 a5 68 fe ff
	ff		 mov	 DWORD PTR $T174173[ebp], esp
  034eb	50		 push	 eax
  034ec	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  034f1	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR $T174162[ebp]
  034f7	e8 00 00 00 00	 call	 ??0CToonMakeWnd@@QAE@VObjectID@@00000@Z ; CToonMakeWnd::CToonMakeWnd
  034fc	89 85 14 fa ff
	ff		 mov	 DWORD PTR -1516+[ebp], eax
  03502	eb 0a		 jmp	 SHORT $L174176
$L174175:
  03504	c7 85 14 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1516+[ebp], 0
$L174176:
  0350e	8b 8d 14 fa ff
	ff		 mov	 ecx, DWORD PTR -1516+[ebp]
  03514	89 8d 98 fe ff
	ff		 mov	 DWORD PTR $T174161[ebp], ecx
  0351a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03521	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR $T174161[ebp]
  03527	e8 00 00 00 00	 call	 ?Create@CToonMakeWnd@@QAEHXZ ; CToonMakeWnd::Create

; 2220 : 
; 2221 : 				break;

  0352c	eb 56		 jmp	 SHORT $L167126
$L167152:

; 2224 : 					if ( NULL != g_pToonWnd ) {

  0352e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pToonWnd@@3PAVCToonMakeWndBase@@A, 0 ; g_pToonWnd
  03535	74 16		 je	 SHORT $L167153

; 2225 : 						g_pToonWnd->CloseSelf();

  03537	6a 00		 push	 0
  03539	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pToonWnd@@3PAVCToonMakeWndBase@@A ; g_pToonWnd
  0353f	8b 02		 mov	 eax, DWORD PTR [edx]
  03541	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pToonWnd@@3PAVCToonMakeWndBase@@A ; g_pToonWnd
  03547	ff 90 c4 00 00
	00		 call	 DWORD PTR [eax+196]
$L167153:

; 2228 : 
; 2229 : 				break;

  0354d	eb 35		 jmp	 SHORT $L167126
$L167154:

; 2232 : 					g_pToonWnd->SetEventProcessing ( TRUE );

  0354f	6a 01		 push	 1
  03551	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pToonWnd@@3PAVCToonMakeWndBase@@A ; g_pToonWnd
  03557	e8 00 00 00 00	 call	 ?SetEventProcessing@CSkinWnd@@QAEX_N@Z ; CSkinWnd::SetEventProcessing

; 2233 : 
; 2234 : 					TextID sMessage = arg(3);

  0355c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0355f	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  03563	52		 push	 edx
  03564	8d 4d a8	 lea	 ecx, DWORD PTR _sMessage$167155[ebp]
  03567	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID

; 2235 : 					SkinMessage ( "Error:", *sMessage );

  0356c	6a 00		 push	 0
  0356e	8d 4d a8	 lea	 ecx, DWORD PTR _sMessage$167155[ebp]
  03571	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  03576	50		 push	 eax
  03577	68 00 00 00 00	 push	 OFFSET FLAT:$SG167156
  0357c	e8 00 00 00 00	 call	 ?SkinMessage@@YA_NPAD0H@Z ; SkinMessage
  03581	83 c4 0c	 add	 esp, 12			; 0000000cH
$L167126:

; 2241 : 
; 2242 : 		break;

  03584	e9 a9 31 00 00	 jmp	 $L166979
$L167157:

; 2245 : 			// Look At
; 2246 : 			enum {
; 2247 : 				laStatus,
; 2248 : 				laAbout,
; 2249 : 				laItem,
; 2250 : 			};
; 2251 : 
; 2252 : 			switch ( arg(2) ) {

  03589	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0358c	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  03590	89 8d 10 fa ff
	ff		 mov	 DWORD PTR -1520+[ebp], ecx
  03596	83 bd 10 fa ff
	ff 00		 cmp	 DWORD PTR -1520+[ebp], 0
  0359d	74 1f		 je	 SHORT $L167166
  0359f	83 bd 10 fa ff
	ff 01		 cmp	 DWORD PTR -1520+[ebp], 1
  035a6	0f 84 47 01 00
	00		 je	 $L167179
  035ac	83 bd 10 fa ff
	ff 02		 cmp	 DWORD PTR -1520+[ebp], 2
  035b3	0f 84 6c 02 00
	00		 je	 $L167192
  035b9	e9 b9 02 00 00	 jmp	 $L167163
$L167166:

; 2254 : 					g_pWindowMgr->CloseAllTransientWindows();

  035be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A ; g_pWindowMgr
  035c4	e8 00 00 00 00	 call	 ?CloseAllTransientWindows@CWindowMgr@@QAEXXZ ; CWindowMgr::CloseAllTransientWindows

; 2255 : 
; 2256 : 					if ( g_pCharSelWnd && g_pCharSelWnd->IsWindowVisible() ) {

  035c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, 0 ; g_pCharSelWnd
  035d0	0f 84 82 00 00
	00		 je	 $L167167
  035d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  035dc	e8 00 00 00 00	 call	 ?IsWindowVisible@CWnd@@QBEHXZ ; CWnd::IsWindowVisible
  035e1	85 c0		 test	 eax, eax
  035e3	74 73		 je	 SHORT $L167167

; 2257 : 						g_pCharSelWnd->ShowWindow( SW_HIDE );

  035e5	6a 00		 push	 0
  035e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  035ed	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 2258 : 						(new CLookAtFiller())->Create( AfxGetApp()->m_pMainWnd );

  035f2	68 94 00 00 00	 push	 148			; 00000094H
  035f7	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  035fc	89 85 5c fe ff
	ff		 mov	 DWORD PTR $T174178[ebp], eax
  03602	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  03609	83 bd 5c fe ff
	ff 00		 cmp	 DWORD PTR $T174178[ebp], 0
  03610	74 13		 je	 SHORT $L174179
  03612	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR $T174178[ebp]
  03618	e8 00 00 00 00	 call	 ??0CLookAtFiller@@QAE@XZ ; CLookAtFiller::CLookAtFiller
  0361d	89 85 0c fa ff
	ff		 mov	 DWORD PTR -1524+[ebp], eax
  03623	eb 0a		 jmp	 SHORT $L174180
$L174179:
  03625	c7 85 0c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1524+[ebp], 0
$L174180:
  0362f	8b 95 0c fa ff
	ff		 mov	 edx, DWORD PTR -1524+[ebp]
  03635	89 95 60 fe ff
	ff		 mov	 DWORD PTR $T174177[ebp], edx
  0363b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03642	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  03647	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0364a	50		 push	 eax
  0364b	8b 8d 60 fe ff
	ff		 mov	 ecx, DWORD PTR $T174177[ebp]
  03651	e8 00 00 00 00	 call	 ?Create@CLookAtFiller@@QAEHPAVCWnd@@@Z ; CLookAtFiller::Create

; 2259 : 					} else if ( g_pSCIWnd ) {

  03656	eb 16		 jmp	 SHORT $L167173
$L167167:
  03658	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A, 0 ; g_pSCIWnd
  0365f	74 0d		 je	 SHORT $L167173

; 2260 : 						g_pSCIWnd->ShowWindow( SW_HIDE );

  03661	6a 00		 push	 0
  03663	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A ; g_pSCIWnd
  03669	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L167173:

; 2262 : 
; 2263 : 					// set the charinfo
; 2264 : 					CLookAt::SetCharInfo( arg(3) );

  0366e	51		 push	 ecx
  0366f	8b cc		 mov	 ecx, esp
  03671	89 a5 58 fe ff
	ff		 mov	 DWORD PTR $T174181[ebp], esp
  03677	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0367a	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  0367e	50		 push	 eax
  0367f	e8 00 00 00 00	 call	 ??0CSCI_CharInfo@@QAE@G@Z ; CSCI_CharInfo::CSCI_CharInfo
  03684	e8 00 00 00 00	 call	 ?SetCharInfo@CLookAt@@SAXVCSCI_CharInfo@@@Z ; CLookAt::SetCharInfo
  03689	83 c4 04	 add	 esp, 4

; 2265 : 
; 2266 : 					// create the window...
; 2267 : 					(new CLookAt( 0 ))->Create( LookAtScreenNames[ 0 ] );

  0368c	68 b4 00 00 00	 push	 180			; 000000b4H
  03691	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03696	89 85 50 fe ff
	ff		 mov	 DWORD PTR $T174183[ebp], eax
  0369c	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  036a3	83 bd 50 fe ff
	ff 00		 cmp	 DWORD PTR $T174183[ebp], 0
  036aa	74 15		 je	 SHORT $L174184
  036ac	6a 00		 push	 0
  036ae	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR $T174183[ebp]
  036b4	e8 00 00 00 00	 call	 ??0CLookAt@@QAE@H@Z	; CLookAt::CLookAt
  036b9	89 85 08 fa ff
	ff		 mov	 DWORD PTR -1528+[ebp], eax
  036bf	eb 0a		 jmp	 SHORT $L174185
$L174184:
  036c1	c7 85 08 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1528+[ebp], 0
$L174185:
  036cb	8b 8d 08 fa ff
	ff		 mov	 ecx, DWORD PTR -1528+[ebp]
  036d1	89 8d 54 fe ff
	ff		 mov	 DWORD PTR $T174182[ebp], ecx
  036d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  036de	68 00 00 00 00	 push	 OFFSET FLAT:?LookAtScreenNames@@3PAY0DC@DA
  036e3	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR $T174182[ebp]
  036e9	e8 00 00 00 00	 call	 ?Create@CLookAt@@QAEHPBD@Z ; CLookAt::Create

; 2269 : 
; 2270 : 				break;

  036ee	e9 84 01 00 00	 jmp	 $L167163
$L167179:

; 2273 : 					g_pWindowMgr->CloseAllTransientWindows();

  036f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A ; g_pWindowMgr
  036f9	e8 00 00 00 00	 call	 ?CloseAllTransientWindows@CWindowMgr@@QAEXXZ ; CWindowMgr::CloseAllTransientWindows

; 2274 : 
; 2275 : 					if ( g_pCharSelWnd && g_pCharSelWnd->IsWindowVisible() ) {

  036fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A, 0 ; g_pCharSelWnd
  03705	0f 84 82 00 00
	00		 je	 $L167180
  0370b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  03711	e8 00 00 00 00	 call	 ?IsWindowVisible@CWnd@@QBEHXZ ; CWnd::IsWindowVisible
  03716	85 c0		 test	 eax, eax
  03718	74 73		 je	 SHORT $L167180

; 2276 : 						g_pCharSelWnd->ShowWindow( SW_HIDE );

  0371a	6a 00		 push	 0
  0371c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCharSelWnd@@3PAVCCharSelectWnd@@A ; g_pCharSelWnd
  03722	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 2277 : 						(new CLookAtFiller())->Create( AfxGetApp()->m_pMainWnd );

  03727	68 94 00 00 00	 push	 148			; 00000094H
  0372c	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03731	89 85 48 fe ff
	ff		 mov	 DWORD PTR $T174187[ebp], eax
  03737	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  0373e	83 bd 48 fe ff
	ff 00		 cmp	 DWORD PTR $T174187[ebp], 0
  03745	74 13		 je	 SHORT $L174188
  03747	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR $T174187[ebp]
  0374d	e8 00 00 00 00	 call	 ??0CLookAtFiller@@QAE@XZ ; CLookAtFiller::CLookAtFiller
  03752	89 85 04 fa ff
	ff		 mov	 DWORD PTR -1532+[ebp], eax
  03758	eb 0a		 jmp	 SHORT $L174189
$L174188:
  0375a	c7 85 04 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1532+[ebp], 0
$L174189:
  03764	8b 95 04 fa ff
	ff		 mov	 edx, DWORD PTR -1532+[ebp]
  0376a	89 95 4c fe ff
	ff		 mov	 DWORD PTR $T174186[ebp], edx
  03770	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03777	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  0377c	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0377f	50		 push	 eax
  03780	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR $T174186[ebp]
  03786	e8 00 00 00 00	 call	 ?Create@CLookAtFiller@@QAEHPAVCWnd@@@Z ; CLookAtFiller::Create

; 2278 : 					} else if ( g_pSCIWnd ) {

  0378b	eb 16		 jmp	 SHORT $L167186
$L167180:
  0378d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A, 0 ; g_pSCIWnd
  03794	74 0d		 je	 SHORT $L167186

; 2279 : 						g_pSCIWnd->ShowWindow( SW_HIDE );

  03796	6a 00		 push	 0
  03798	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSCIWnd@@3PAVCSCIWnd@@A ; g_pSCIWnd
  0379e	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L167186:

; 2281 : 
; 2282 : 					// set the charinfo
; 2283 : 					CLookAt::SetCharInfo( arg(3) );

  037a3	51		 push	 ecx
  037a4	8b cc		 mov	 ecx, esp
  037a6	89 a5 44 fe ff
	ff		 mov	 DWORD PTR $T174190[ebp], esp
  037ac	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  037af	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  037b3	50		 push	 eax
  037b4	e8 00 00 00 00	 call	 ??0CSCI_CharInfo@@QAE@G@Z ; CSCI_CharInfo::CSCI_CharInfo
  037b9	e8 00 00 00 00	 call	 ?SetCharInfo@CLookAt@@SAXVCSCI_CharInfo@@@Z ; CLookAt::SetCharInfo
  037be	83 c4 04	 add	 esp, 4

; 2284 : 
; 2285 : 					// create the window...
; 2286 : 					(new CLookAt( 3 ))->Create( LookAtScreenNames[ 3 ] );

  037c1	68 b4 00 00 00	 push	 180			; 000000b4H
  037c6	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  037cb	89 85 3c fe ff
	ff		 mov	 DWORD PTR $T174192[ebp], eax
  037d1	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  037d8	83 bd 3c fe ff
	ff 00		 cmp	 DWORD PTR $T174192[ebp], 0
  037df	74 15		 je	 SHORT $L174193
  037e1	6a 03		 push	 3
  037e3	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR $T174192[ebp]
  037e9	e8 00 00 00 00	 call	 ??0CLookAt@@QAE@H@Z	; CLookAt::CLookAt
  037ee	89 85 00 fa ff
	ff		 mov	 DWORD PTR -1536+[ebp], eax
  037f4	eb 0a		 jmp	 SHORT $L174194
$L174193:
  037f6	c7 85 00 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR -1536+[ebp], 0
$L174194:
  03800	8b 8d 00 fa ff
	ff		 mov	 ecx, DWORD PTR -1536+[ebp]
  03806	89 8d 40 fe ff
	ff		 mov	 DWORD PTR $T174191[ebp], ecx
  0380c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03813	68 96 00 00 00	 push	 OFFSET FLAT:?LookAtScreenNames@@3PAY0DC@DA+150
  03818	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR $T174191[ebp]
  0381e	e8 00 00 00 00	 call	 ?Create@CLookAt@@QAEHPBD@Z ; CLookAt::Create

; 2288 : 
; 2289 : 				break;

  03823	eb 52		 jmp	 SHORT $L167163
$L167192:

; 2292 : 					CLookAtItem::Look( arg(3), (StringID) arg(4) );

  03825	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03828	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  0382c	50		 push	 eax
  0382d	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T174197[ebp]
  03833	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03838	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T174197[ebp]
  0383e	51		 push	 ecx
  0383f	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T174196[ebp]
  03845	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0384a	51		 push	 ecx
  0384b	8b cc		 mov	 ecx, esp
  0384d	89 a5 38 fe ff
	ff		 mov	 DWORD PTR $T174195[ebp], esp
  03853	50		 push	 eax
  03854	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  03859	51		 push	 ecx
  0385a	8b cc		 mov	 ecx, esp
  0385c	89 a5 2c fe ff
	ff		 mov	 DWORD PTR $T174198[ebp], esp
  03862	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03865	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  03869	50		 push	 eax
  0386a	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0386f	e8 00 00 00 00	 call	 ?Look@CLookAtItem@@SAXVCSCI_WorldObject@@VStringID@@@Z ; CLookAtItem::Look
  03874	83 c4 08	 add	 esp, 8
$L167163:

; 2298 : 
; 2299 : 		break;

  03877	e9 b6 2e 00 00	 jmp	 $L166979
$L167198:

; 2302 : 			// Dlg Who
; 2303 : 			enum {
; 2304 : 				dlCreate,
; 2305 : 			};
; 2306 : 
; 2307 : 			switch ( arg(2) ) {

  0387c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0387f	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  03883	89 95 fc f9 ff
	ff		 mov	 DWORD PTR -1540+[ebp], edx
  03889	83 bd fc f9 ff
	ff 00		 cmp	 DWORD PTR -1540+[ebp], 0
  03890	74 05		 je	 SHORT $L167205
  03892	e9 03 03 00 00	 jmp	 $L167202
$L167205:

; 2309 : 					PackedData packed( arg(3) );

  03897	51		 push	 ecx
  03898	8b cc		 mov	 ecx, esp
  0389a	89 a5 28 fe ff
	ff		 mov	 DWORD PTR $T174199[ebp], esp
  038a0	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  038a3	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  038a7	52		 push	 edx
  038a8	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  038ad	8d 4d 9c	 lea	 ecx, DWORD PTR _packed$167206[ebp]
  038b0	e8 00 00 00 00	 call	 ??0PackedData@@QAE@VObjectID@@@Z ; PackedData::PackedData
  038b5	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH

; 2310 : 
; 2311 : 					int nType = packed.getByte();

  038bc	8d 4d 9c	 lea	 ecx, DWORD PTR _packed$167206[ebp]
  038bf	e8 00 00 00 00	 call	 ?getByte@PackedData@@QAEEXZ ; PackedData::getByte
  038c4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  038c9	89 45 a4	 mov	 DWORD PTR _nType$167208[ebp], eax

; 2312 : 
; 2313 : 					switch ( nType ) {

  038cc	8b 45 a4	 mov	 eax, DWORD PTR _nType$167208[ebp]
  038cf	89 85 f8 f9 ff
	ff		 mov	 DWORD PTR -1544+[ebp], eax
  038d5	83 bd f8 f9 ff
	ff 05		 cmp	 DWORD PTR -1544+[ebp], 5
  038dc	0f 87 a0 02 00
	00		 ja	 $L167210
  038e2	8b 8d f8 f9 ff
	ff		 mov	 ecx, DWORD PTR -1544+[ebp]
  038e8	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L174596[ecx*4]
$L167213:

; 2314 : 						case 0:
; 2315 : 							(new CChanListWnd)->Create( &packed );

  038ef	68 98 00 00 00	 push	 152			; 00000098H
  038f4	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  038f9	89 85 20 fe ff
	ff		 mov	 DWORD PTR $T174201[ebp], eax
  038ff	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  03903	83 bd 20 fe ff
	ff 00		 cmp	 DWORD PTR $T174201[ebp], 0
  0390a	74 13		 je	 SHORT $L174202
  0390c	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR $T174201[ebp]
  03912	e8 00 00 00 00	 call	 ??0CChanListWnd@@QAE@XZ	; CChanListWnd::CChanListWnd
  03917	89 85 f4 f9 ff
	ff		 mov	 DWORD PTR -1548+[ebp], eax
  0391d	eb 0a		 jmp	 SHORT $L174203
$L174202:
  0391f	c7 85 f4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1548+[ebp], 0
$L174203:
  03929	8b 95 f4 f9 ff
	ff		 mov	 edx, DWORD PTR -1548+[ebp]
  0392f	89 95 24 fe ff
	ff		 mov	 DWORD PTR $T174200[ebp], edx
  03935	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  03939	8d 45 9c	 lea	 eax, DWORD PTR _packed$167206[ebp]
  0393c	50		 push	 eax
  0393d	8b 8d 24 fe ff
	ff		 mov	 ecx, DWORD PTR $T174200[ebp]
  03943	e8 00 00 00 00	 call	 ?Create@CChanListWnd@@QAEHPAVPackedData@@@Z ; CChanListWnd::Create

; 2316 : 							break;

  03948	e9 35 02 00 00	 jmp	 $L167210
$L167218:

; 2317 : 						case 1:
; 2318 : 							(new CPlayerListWnd)->Create( &packed, "dlg_whol.skn", "Player(s) On-Line", &g_pWhoListWnd );

  0394d	68 9c 00 00 00	 push	 156			; 0000009cH
  03952	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03957	89 85 18 fe ff
	ff		 mov	 DWORD PTR $T174205[ebp], eax
  0395d	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  03961	83 bd 18 fe ff
	ff 00		 cmp	 DWORD PTR $T174205[ebp], 0
  03968	74 13		 je	 SHORT $L174206
  0396a	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR $T174205[ebp]
  03970	e8 00 00 00 00	 call	 ??0CPlayerListWnd@@QAE@XZ ; CPlayerListWnd::CPlayerListWnd
  03975	89 85 f0 f9 ff
	ff		 mov	 DWORD PTR -1552+[ebp], eax
  0397b	eb 0a		 jmp	 SHORT $L174207
$L174206:
  0397d	c7 85 f0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1552+[ebp], 0
$L174207:
  03987	8b 8d f0 f9 ff
	ff		 mov	 ecx, DWORD PTR -1552+[ebp]
  0398d	89 8d 1c fe ff
	ff		 mov	 DWORD PTR $T174204[ebp], ecx
  03993	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  03997	6a 00		 push	 0
  03999	68 00 00 00 00	 push	 OFFSET FLAT:?g_pWhoListWnd@@3PAVCPlayerListWnd@@A ; g_pWhoListWnd
  0399e	68 00 00 00 00	 push	 OFFSET FLAT:$SG167223
  039a3	68 00 00 00 00	 push	 OFFSET FLAT:$SG167224
  039a8	8d 55 9c	 lea	 edx, DWORD PTR _packed$167206[ebp]
  039ab	52		 push	 edx
  039ac	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR $T174204[ebp]
  039b2	e8 00 00 00 00	 call	 ?Create@CPlayerListWnd@@QAEHPAVPackedData@@PAD1PAPAV1@PAVCSkinListCtrl@@@Z ; CPlayerListWnd::Create

; 2319 : 							break;

  039b7	e9 c6 01 00 00	 jmp	 $L167210
$L167225:

; 2320 : 						case 2:
; 2321 : 							if ( g_pChMemberListWnd )

  039bc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pChMemberListWnd@@3PAVCChMemberListWnd@@A, 0 ; g_pChMemberListWnd
  039c3	74 11		 je	 SHORT $L167226

; 2322 : 								g_pChannelMembers->fromPacket( &packed );

  039c5	8d 45 9c	 lea	 eax, DWORD PTR _packed$167206[ebp]
  039c8	50		 push	 eax
  039c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pChannelMembers@@3PAVCChannelMemberList@@A ; g_pChannelMembers
  039cf	e8 00 00 00 00	 call	 ?fromPacket@CChannelMemberList@@QAEXPAVPackedData@@@Z ; CChannelMemberList::fromPacket

; 2323 : 							else

  039d4	eb 59		 jmp	 SHORT $L167227
$L167226:

; 2324 : 								(new CChMemberListWnd)->Create( &packed );

  039d6	68 98 00 00 00	 push	 152			; 00000098H
  039db	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  039e0	89 85 10 fe ff
	ff		 mov	 DWORD PTR $T174209[ebp], eax
  039e6	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  039ea	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR $T174209[ebp], 0
  039f1	74 13		 je	 SHORT $L174210
  039f3	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR $T174209[ebp]
  039f9	e8 00 00 00 00	 call	 ??0CChMemberListWnd@@QAE@XZ ; CChMemberListWnd::CChMemberListWnd
  039fe	89 85 ec f9 ff
	ff		 mov	 DWORD PTR -1556+[ebp], eax
  03a04	eb 0a		 jmp	 SHORT $L174211
$L174210:
  03a06	c7 85 ec f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1556+[ebp], 0
$L174211:
  03a10	8b 8d ec f9 ff
	ff		 mov	 ecx, DWORD PTR -1556+[ebp]
  03a16	89 8d 14 fe ff
	ff		 mov	 DWORD PTR $T174208[ebp], ecx
  03a1c	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  03a20	8d 55 9c	 lea	 edx, DWORD PTR _packed$167206[ebp]
  03a23	52		 push	 edx
  03a24	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR $T174208[ebp]
  03a2a	e8 00 00 00 00	 call	 ?Create@CChMemberListWnd@@QAEHPAVPackedData@@@Z ; CChMemberListWnd::Create
$L167227:

; 2325 : 							break;

  03a2f	e9 4e 01 00 00	 jmp	 $L167210
$L167232:

; 2326 : 						case 3:
; 2327 : 							if ( g_pChBannedListWnd )

  03a34	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pChBannedListWnd@@3PAVCChBannedListWnd@@A, 0 ; g_pChBannedListWnd
  03a3b	74 11		 je	 SHORT $L167233

; 2328 : 								g_pChannelBanned->fromPacket( &packed );

  03a3d	8d 45 9c	 lea	 eax, DWORD PTR _packed$167206[ebp]
  03a40	50		 push	 eax
  03a41	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pChannelBanned@@3PAVCChannelBannedList@@A ; g_pChannelBanned
  03a47	e8 00 00 00 00	 call	 ?fromPacket@CChannelBannedList@@QAEXPAVPackedData@@@Z ; CChannelBannedList::fromPacket

; 2329 : 							else

  03a4c	eb 59		 jmp	 SHORT $L167234
$L167233:

; 2330 : 								(new CChBannedListWnd)->Create( &packed );

  03a4e	68 98 00 00 00	 push	 152			; 00000098H
  03a53	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03a58	89 85 08 fe ff
	ff		 mov	 DWORD PTR $T174213[ebp], eax
  03a5e	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  03a62	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR $T174213[ebp], 0
  03a69	74 13		 je	 SHORT $L174214
  03a6b	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR $T174213[ebp]
  03a71	e8 00 00 00 00	 call	 ??0CChBannedListWnd@@QAE@XZ ; CChBannedListWnd::CChBannedListWnd
  03a76	89 85 e8 f9 ff
	ff		 mov	 DWORD PTR -1560+[ebp], eax
  03a7c	eb 0a		 jmp	 SHORT $L174215
$L174214:
  03a7e	c7 85 e8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1560+[ebp], 0
$L174215:
  03a88	8b 8d e8 f9 ff
	ff		 mov	 ecx, DWORD PTR -1560+[ebp]
  03a8e	89 8d 0c fe ff
	ff		 mov	 DWORD PTR $T174212[ebp], ecx
  03a94	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  03a98	8d 55 9c	 lea	 edx, DWORD PTR _packed$167206[ebp]
  03a9b	52		 push	 edx
  03a9c	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR $T174212[ebp]
  03aa2	e8 00 00 00 00	 call	 ?Create@CChBannedListWnd@@QAEHPAVPackedData@@@Z ; CChBannedListWnd::Create
$L167234:

; 2331 : 							break;

  03aa7	e9 d6 00 00 00	 jmp	 $L167210
$L167239:

; 2332 : 						case 4:
; 2333 : 							(new CPlayerListWnd)->Create( &packed, "dlg_whol.skn", "Event Staff On-Line", &g_pEventListWnd );

  03aac	68 9c 00 00 00	 push	 156			; 0000009cH
  03ab1	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03ab6	89 85 00 fe ff
	ff		 mov	 DWORD PTR $T174217[ebp], eax
  03abc	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  03ac0	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR $T174217[ebp], 0
  03ac7	74 13		 je	 SHORT $L174218
  03ac9	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR $T174217[ebp]
  03acf	e8 00 00 00 00	 call	 ??0CPlayerListWnd@@QAE@XZ ; CPlayerListWnd::CPlayerListWnd
  03ad4	89 85 e4 f9 ff
	ff		 mov	 DWORD PTR -1564+[ebp], eax
  03ada	eb 0a		 jmp	 SHORT $L174219
$L174218:
  03adc	c7 85 e4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1564+[ebp], 0
$L174219:
  03ae6	8b 85 e4 f9 ff
	ff		 mov	 eax, DWORD PTR -1564+[ebp]
  03aec	89 85 04 fe ff
	ff		 mov	 DWORD PTR $T174216[ebp], eax
  03af2	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  03af6	6a 00		 push	 0
  03af8	68 00 00 00 00	 push	 OFFSET FLAT:?g_pEventListWnd@@3PAVCPlayerListWnd@@A ; g_pEventListWnd
  03afd	68 00 00 00 00	 push	 OFFSET FLAT:$SG167244
  03b02	68 00 00 00 00	 push	 OFFSET FLAT:$SG167245
  03b07	8d 4d 9c	 lea	 ecx, DWORD PTR _packed$167206[ebp]
  03b0a	51		 push	 ecx
  03b0b	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR $T174216[ebp]
  03b11	e8 00 00 00 00	 call	 ?Create@CPlayerListWnd@@QAEHPAVPackedData@@PAD1PAPAV1@PAVCSkinListCtrl@@@Z ; CPlayerListWnd::Create

; 2334 : 							break;

  03b16	eb 6a		 jmp	 SHORT $L167210
$L167246:

; 2335 : 						case 5:
; 2336 : 							(new CPlayerListWnd)->Create( &packed, "dlg_modwhol.skn", "In Game Staff On-Line", &g_pGMListWnd );

  03b18	68 9c 00 00 00	 push	 156			; 0000009cH
  03b1d	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03b22	89 85 f8 fd ff
	ff		 mov	 DWORD PTR $T174221[ebp], eax
  03b28	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  03b2c	83 bd f8 fd ff
	ff 00		 cmp	 DWORD PTR $T174221[ebp], 0
  03b33	74 13		 je	 SHORT $L174222
  03b35	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR $T174221[ebp]
  03b3b	e8 00 00 00 00	 call	 ??0CPlayerListWnd@@QAE@XZ ; CPlayerListWnd::CPlayerListWnd
  03b40	89 85 e0 f9 ff
	ff		 mov	 DWORD PTR -1568+[ebp], eax
  03b46	eb 0a		 jmp	 SHORT $L174223
$L174222:
  03b48	c7 85 e0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1568+[ebp], 0
$L174223:
  03b52	8b 95 e0 f9 ff
	ff		 mov	 edx, DWORD PTR -1568+[ebp]
  03b58	89 95 fc fd ff
	ff		 mov	 DWORD PTR $T174220[ebp], edx
  03b5e	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  03b62	6a 00		 push	 0
  03b64	68 00 00 00 00	 push	 OFFSET FLAT:?g_pGMListWnd@@3PAVCPlayerListWnd@@A ; g_pGMListWnd
  03b69	68 00 00 00 00	 push	 OFFSET FLAT:$SG167251
  03b6e	68 00 00 00 00	 push	 OFFSET FLAT:$SG167252
  03b73	8d 45 9c	 lea	 eax, DWORD PTR _packed$167206[ebp]
  03b76	50		 push	 eax
  03b77	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR $T174220[ebp]
  03b7d	e8 00 00 00 00	 call	 ?Create@CPlayerListWnd@@QAEHPAVPackedData@@PAD1PAPAV1@PAVCSkinListCtrl@@@Z ; CPlayerListWnd::Create
$L167210:

; 2339 : 
; 2340 : 					pm.acc = nType;

  03b82	8b 4d a4	 mov	 ecx, DWORD PTR _nType$167208[ebp]
  03b85	89 0d 04 00 00
	00		 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, ecx

; 2341 : 				}

  03b8b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03b92	8d 4d 9c	 lea	 ecx, DWORD PTR _packed$167206[ebp]
  03b95	e8 00 00 00 00	 call	 ??1PackedData@@UAE@XZ	; PackedData::~PackedData
$L167202:

; 2346 : 
; 2347 : 		break;

  03b9a	e9 93 2b 00 00	 jmp	 $L166979
$L167253:

; 2350 : 			// Dlg Gossip List
; 2351 : 			enum {
; 2352 : 				dvlCreate,
; 2353 : 				dvlDestroy,
; 2354 : 				dvlCreateCombat,
; 2355 : 				dvlCombatUpdateTimer,
; 2356 : 				dvlCombatExitShow,
; 2357 : 				dvlCombatExitHide
; 2358 : 			};
; 2359 : 
; 2360 : 			switch ( arg(2) ) {

  03b9f	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03ba2	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  03ba6	89 85 dc f9 ff
	ff		 mov	 DWORD PTR -1572+[ebp], eax
  03bac	83 bd dc f9 ff
	ff 05		 cmp	 DWORD PTR -1572+[ebp], 5
  03bb3	0f 87 ac 02 00
	00		 ja	 $L167262
  03bb9	8b 8d dc f9 ff
	ff		 mov	 ecx, DWORD PTR -1572+[ebp]
  03bbf	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L174597[ecx*4]
$L167265:

; 2362 : 					SOL_ListID list = arg(3);

  03bc6	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03bc9	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  03bcd	50		 push	 eax
  03bce	8d 4d 94	 lea	 ecx, DWORD PTR _list$167266[ebp]
  03bd1	e8 00 00 00 00	 call	 ??0SOL_ListID@@QAE@G@Z	; SOL_ListID::SOL_ListID

; 2363 : 					CSCI_WorldObject hTargetObj = arg(4);

  03bd6	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03bd9	66 8b 51 08	 mov	 dx, WORD PTR [ecx+8]
  03bdd	52		 push	 edx
  03bde	8d 4d 98	 lea	 ecx, DWORD PTR _hTargetObj$167267[ebp]
  03be1	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject

; 2364 : 
; 2365 : 					CVerbDialog *pVerbDialog = new CVerbDialog;

  03be6	68 e8 00 00 00	 push	 232			; 000000e8H
  03beb	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03bf0	89 85 f0 fd ff
	ff		 mov	 DWORD PTR $T174225[ebp], eax
  03bf6	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 18 ; 00000012H
  03bfd	83 bd f0 fd ff
	ff 00		 cmp	 DWORD PTR $T174225[ebp], 0
  03c04	74 13		 je	 SHORT $L174226
  03c06	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR $T174225[ebp]
  03c0c	e8 00 00 00 00	 call	 ??0CVerbDialog@@QAE@XZ	; CVerbDialog::CVerbDialog
  03c11	89 85 d8 f9 ff
	ff		 mov	 DWORD PTR -1576+[ebp], eax
  03c17	eb 0a		 jmp	 SHORT $L174227
$L174226:
  03c19	c7 85 d8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1576+[ebp], 0
$L174227:
  03c23	8b 85 d8 f9 ff
	ff		 mov	 eax, DWORD PTR -1576+[ebp]
  03c29	89 85 f4 fd ff
	ff		 mov	 DWORD PTR $T174224[ebp], eax
  03c2f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03c36	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR $T174224[ebp]
  03c3c	89 4d 90	 mov	 DWORD PTR _pVerbDialog$167268[ebp], ecx

; 2366 : 					pVerbDialog->Create ( hTargetObj, NULL );

  03c3f	6a 00		 push	 0
  03c41	51		 push	 ecx
  03c42	8b cc		 mov	 ecx, esp
  03c44	89 a5 ec fd ff
	ff		 mov	 DWORD PTR $T174228[ebp], esp
  03c4a	8d 55 98	 lea	 edx, DWORD PTR _hTargetObj$167267[ebp]
  03c4d	52		 push	 edx
  03c4e	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  03c53	8b 4d 90	 mov	 ecx, DWORD PTR _pVerbDialog$167268[ebp]
  03c56	e8 00 00 00 00	 call	 ?Create@CVerbDialog@@QAEHVCSCI_WorldObject@@PAVCVerbHandler@@@Z ; CVerbDialog::Create

; 2367 : 					pVerbDialog->AddVerbs( list );

  03c5b	51		 push	 ecx
  03c5c	8b cc		 mov	 ecx, esp
  03c5e	89 a5 e8 fd ff
	ff		 mov	 DWORD PTR $T174229[ebp], esp
  03c64	8d 45 94	 lea	 eax, DWORD PTR _list$167266[ebp]
  03c67	50		 push	 eax
  03c68	e8 00 00 00 00	 call	 ??0SOL_ListID@@QAE@ABU0@@Z ; SOL_ListID::SOL_ListID
  03c6d	8b 4d 90	 mov	 ecx, DWORD PTR _pVerbDialog$167268[ebp]
  03c70	e8 00 00 00 00	 call	 ?AddVerbs@CVerbDialog@@QAEXUSOL_ListID@@@Z ; CVerbDialog::AddVerbs

; 2368 : 					pVerbDialog->Show();

  03c75	8b 4d 90	 mov	 ecx, DWORD PTR _pVerbDialog$167268[ebp]
  03c78	e8 00 00 00 00	 call	 ?Show@CVerbDialog@@QAEXXZ ; CVerbDialog::Show

; 2369 : 
; 2370 : 					pm.acc = 0;

  03c7d	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 2372 : 
; 2373 : 				break;

  03c87	e9 d9 01 00 00	 jmp	 $L167262
$L167275:

; 2377 : 					int nFlags = arg(3);

  03c8c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03c8f	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  03c93	89 55 8c	 mov	 DWORD PTR _nFlags$167276[ebp], edx

; 2378 : 
; 2379 : 					// toss the existing verb dialog (if any)
; 2380 : 					if ( g_pVerbDialog ) 

  03c96	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pVerbDialog@@3PAVCVerbDialog@@A, 0 ; g_pVerbDialog
  03c9d	74 15		 je	 SHORT $L167277

; 2382 : 						g_pVerbDialog->CloseSelf();

  03c9f	6a 00		 push	 0
  03ca1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pVerbDialog@@3PAVCVerbDialog@@A ; g_pVerbDialog
  03ca6	8b 10		 mov	 edx, DWORD PTR [eax]
  03ca8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pVerbDialog@@3PAVCVerbDialog@@A ; g_pVerbDialog
  03cae	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L167277:

; 2384 : 
; 2385 : 					CCombatVerbDialog *pVerbDialog = new CCombatVerbDialog;

  03cb4	68 f8 00 00 00	 push	 248			; 000000f8H
  03cb9	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03cbe	89 85 e0 fd ff
	ff		 mov	 DWORD PTR $T174231[ebp], eax
  03cc4	c7 45 fc 13 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 19 ; 00000013H
  03ccb	83 bd e0 fd ff
	ff 00		 cmp	 DWORD PTR $T174231[ebp], 0
  03cd2	74 13		 je	 SHORT $L174232
  03cd4	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR $T174231[ebp]
  03cda	e8 00 00 00 00	 call	 ??0CCombatVerbDialog@@QAE@XZ ; CCombatVerbDialog::CCombatVerbDialog
  03cdf	89 85 d4 f9 ff
	ff		 mov	 DWORD PTR -1580+[ebp], eax
  03ce5	eb 0a		 jmp	 SHORT $L174233
$L174232:
  03ce7	c7 85 d4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1580+[ebp], 0
$L174233:
  03cf1	8b 85 d4 f9 ff
	ff		 mov	 eax, DWORD PTR -1580+[ebp]
  03cf7	89 85 e4 fd ff
	ff		 mov	 DWORD PTR $T174230[ebp], eax
  03cfd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03d04	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR $T174230[ebp]
  03d0a	89 4d 88	 mov	 DWORD PTR _pVerbDialog$167278[ebp], ecx

; 2386 : 					pVerbDialog->Create ( nFlags );

  03d0d	8b 55 8c	 mov	 edx, DWORD PTR _nFlags$167276[ebp]
  03d10	52		 push	 edx
  03d11	8b 45 88	 mov	 eax, DWORD PTR _pVerbDialog$167278[ebp]
  03d14	8b 10		 mov	 edx, DWORD PTR [eax]
  03d16	8b 4d 88	 mov	 ecx, DWORD PTR _pVerbDialog$167278[ebp]
  03d19	ff 92 fc 00 00
	00		 call	 DWORD PTR [edx+252]

; 2387 : 					pVerbDialog->Show();

  03d1f	8b 4d 88	 mov	 ecx, DWORD PTR _pVerbDialog$167278[ebp]
  03d22	e8 00 00 00 00	 call	 ?Show@CVerbDialog@@QAEXXZ ; CVerbDialog::Show

; 2389 : 
; 2390 : 				break;

  03d27	e9 39 01 00 00	 jmp	 $L167262
$L167283:

; 2394 : 					if ( g_pCombatVerbDialog && g_pCombatVerbDialog->m_hWnd ) {

  03d2c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCombatVerbDialog@@3PAVCCombatVerbDialog@@A, 0 ; g_pCombatVerbDialog
  03d33	74 1e		 je	 SHORT $L167284
  03d35	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pCombatVerbDialog@@3PAVCCombatVerbDialog@@A ; g_pCombatVerbDialog
  03d3a	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  03d3e	74 13		 je	 SHORT $L167284

; 2395 : 						g_pCombatVerbDialog->UpdateTimer ( arg(3) );

  03d40	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03d43	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  03d47	52		 push	 edx
  03d48	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCombatVerbDialog@@3PAVCCombatVerbDialog@@A ; g_pCombatVerbDialog
  03d4e	e8 00 00 00 00	 call	 ?UpdateTimer@CCombatVerbDialog@@QAEXH@Z ; CCombatVerbDialog::UpdateTimer
$L167284:

; 2398 : 
; 2399 : 				break;

  03d53	e9 0d 01 00 00	 jmp	 $L167262
$L167285:

; 2403 : 					if ( !g_pCombatExitDialog )

  03d58	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCombatExitDialog@@3PAVCCombatExitDialog@@A, 0 ; g_pCombatExitDialog
  03d5f	75 50		 jne	 SHORT $L167286

; 2404 : 						new CCombatExitDialog;

  03d61	68 94 00 00 00	 push	 148			; 00000094H
  03d66	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03d6b	89 85 d8 fd ff
	ff		 mov	 DWORD PTR $T174235[ebp], eax
  03d71	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 20 ; 00000014H
  03d78	83 bd d8 fd ff
	ff 00		 cmp	 DWORD PTR $T174235[ebp], 0
  03d7f	74 13		 je	 SHORT $L174236
  03d81	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR $T174235[ebp]
  03d87	e8 00 00 00 00	 call	 ??0CCombatExitDialog@@QAE@XZ ; CCombatExitDialog::CCombatExitDialog
  03d8c	89 85 d0 f9 ff
	ff		 mov	 DWORD PTR -1584+[ebp], eax
  03d92	eb 0a		 jmp	 SHORT $L174237
$L174236:
  03d94	c7 85 d0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1584+[ebp], 0
$L174237:
  03d9e	8b 85 d0 f9 ff
	ff		 mov	 eax, DWORD PTR -1584+[ebp]
  03da4	89 85 dc fd ff
	ff		 mov	 DWORD PTR $T174234[ebp], eax
  03daa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
$L167286:

; 2405 : 						g_pCombatExitDialog->Create( AfxGetApp()->m_pMainWnd );

  03db1	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  03db6	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  03db9	51		 push	 ecx
  03dba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pCombatExitDialog@@3PAVCCombatExitDialog@@A ; g_pCombatExitDialog
  03dc0	8b 02		 mov	 eax, DWORD PTR [edx]
  03dc2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCombatExitDialog@@3PAVCCombatExitDialog@@A ; g_pCombatExitDialog
  03dc8	ff 90 ec 00 00
	00		 call	 DWORD PTR [eax+236]

; 2407 : 
; 2408 : 				break;

  03dce	e9 92 00 00 00	 jmp	 $L167262
$L167291:

; 2412 : 					if ( g_pCombatExitDialog ) {

  03dd3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCombatExitDialog@@3PAVCCombatExitDialog@@A, 0 ; g_pCombatExitDialog
  03dda	74 2d		 je	 SHORT $L167292

; 2413 : 						g_pCombatExitDialog->SetEventProcessing ( FALSE );

  03ddc	6a 00		 push	 0
  03dde	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCombatExitDialog@@3PAVCCombatExitDialog@@A ; g_pCombatExitDialog
  03de4	e8 00 00 00 00	 call	 ?SetEventProcessing@CSkinWnd@@QAEX_N@Z ; CSkinWnd::SetEventProcessing

; 2414 : 						g_pCombatExitDialog->CloseSelf();

  03de9	6a 00		 push	 0
  03deb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCombatExitDialog@@3PAVCCombatExitDialog@@A ; g_pCombatExitDialog
  03df1	8b 11		 mov	 edx, DWORD PTR [ecx]
  03df3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCombatExitDialog@@3PAVCCombatExitDialog@@A ; g_pCombatExitDialog
  03df9	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 2415 :                         g_pCombatExitDialog = NULL;

  03dff	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pCombatExitDialog@@3PAVCCombatExitDialog@@A, 0 ; g_pCombatExitDialog
$L167292:

; 2418 : 
; 2419 : 				break;

  03e09	eb 5a		 jmp	 SHORT $L167262
$L167293:

; 2423 : 					if ( NULL != g_pVerbDialog ) {

  03e0b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pVerbDialog@@3PAVCVerbDialog@@A, 0 ; g_pVerbDialog
  03e12	74 1f		 je	 SHORT $L167294

; 2424 : 						g_pVerbDialog->CloseSelf();

  03e14	6a 00		 push	 0
  03e16	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pVerbDialog@@3PAVCVerbDialog@@A ; g_pVerbDialog
  03e1b	8b 10		 mov	 edx, DWORD PTR [eax]
  03e1d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pVerbDialog@@3PAVCVerbDialog@@A ; g_pVerbDialog
  03e23	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 2425 :                         g_pVerbDialog = NULL;

  03e29	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pVerbDialog@@3PAVCVerbDialog@@A, 0 ; g_pVerbDialog
$L167294:

; 2427 : 
; 2428 : 					if ( NULL != g_pCombatVerbDialog ) {

  03e33	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pCombatVerbDialog@@3PAVCCombatVerbDialog@@A, 0 ; g_pCombatVerbDialog
  03e3a	74 1f		 je	 SHORT $L167295

; 2429 : 						g_pCombatVerbDialog->CloseSelf();

  03e3c	6a 00		 push	 0
  03e3e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pCombatVerbDialog@@3PAVCCombatVerbDialog@@A ; g_pCombatVerbDialog
  03e43	8b 10		 mov	 edx, DWORD PTR [eax]
  03e45	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCombatVerbDialog@@3PAVCCombatVerbDialog@@A ; g_pCombatVerbDialog
  03e4b	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 2430 :                         g_pCombatVerbDialog = NULL;

  03e51	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pCombatVerbDialog@@3PAVCCombatVerbDialog@@A, 0 ; g_pCombatVerbDialog
$L167295:

; 2432 : 
; 2433 : 					pm.acc = 0;

  03e5b	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0
$L167262:

; 2439 : 
; 2440 : 		break;

  03e65	e9 c8 28 00 00	 jmp	 $L166979
$L167296:

; 2443 : 			// Dlg Mail List
; 2444 : 			enum {
; 2445 : 				dmlHandleMsg,
; 2446 : 			};
; 2447 : 
; 2448 : 			switch ( arg(2) ) {

  03e6a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03e6d	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  03e71	89 8d cc f9 ff
	ff		 mov	 DWORD PTR -1588+[ebp], ecx
  03e77	83 bd cc f9 ff
	ff 00		 cmp	 DWORD PTR -1588+[ebp], 0
  03e7e	74 02		 je	 SHORT $L167303
  03e80	eb 36		 jmp	 SHORT $L167300
$L167303:

; 2451 : 					if (g_pMailBox)

  03e82	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMailBox@@3PAVCMailBox@@A, 0 ; g_pMailBox
  03e89	74 2d		 je	 SHORT $L167304

; 2452 : 						g_pMailBox->HandleMsg( (CSCI_NetMsg) arg(3) );

  03e8b	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03e8e	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  03e92	50		 push	 eax
  03e93	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T174239[ebp]
  03e99	e8 00 00 00 00	 call	 ??0CSCI_NetMsg@@QAE@G@Z	; CSCI_NetMsg::CSCI_NetMsg
  03e9e	51		 push	 ecx
  03e9f	8b cc		 mov	 ecx, esp
  03ea1	89 a5 d4 fd ff
	ff		 mov	 DWORD PTR $T174238[ebp], esp
  03ea7	50		 push	 eax
  03ea8	e8 00 00 00 00	 call	 ??0CSCI_NetMsg@@QAE@ABV0@@Z ; CSCI_NetMsg::CSCI_NetMsg
  03ead	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMailBox@@3PAVCMailBox@@A ; g_pMailBox
  03eb3	e8 00 00 00 00	 call	 ?HandleMsg@CMailBox@@QAEXVCSCI_NetMsg@@@Z ; CMailBox::HandleMsg
$L167304:
$L167300:

; 2457 : 
; 2458 : 		break;

  03eb8	e9 75 28 00 00	 jmp	 $L166979
$L167308:

; 2461 : 			enum {
; 2462 : 				dgiString,
; 2463 : 				dgiPassword,
; 2464 : 				dgiSingle,
; 2465 : 				dgiMessage,
; 2466 : 				dgiDoubleButton,
; 2467 : 				dgiDead,
; 2468 : 				dgiLogin,
; 2469 : 				dgiChangePassword,
; 2470 : 				dgiClose,
; 2471 : 				dgiLoginInfo,
; 2472 : 			};
; 2473 : 			switch ( arg(2) ) {

  03ebd	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03ec0	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  03ec4	89 95 c8 f9 ff
	ff		 mov	 DWORD PTR -1592+[ebp], edx
  03eca	83 bd c8 f9 ff
	ff 09		 cmp	 DWORD PTR -1592+[ebp], 9
  03ed1	0f 87 58 09 00
	00		 ja	 $L167321
  03ed7	8b 85 c8 f9 ff
	ff		 mov	 eax, DWORD PTR -1592+[ebp]
  03edd	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L174598[eax*4]
$L167324:

; 2475 : 					int nCount = argCount;

  03ee4	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03ee7	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  03eea	89 95 7c ff ff
	ff		 mov	 DWORD PTR _nCount$167325[ebp], edx

; 2476 : 
; 2477 : 					(new CTextDoubleButtonDlg( (StringID) arg(5), arg(7), arg(8), arg(9), arg(10) ) )->Create( * ((StringID) arg(3)), * ((StringID) arg(4)), arg(6), NULL, NULL, false, arg(11) );

  03ef0	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03ef3	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  03ef7	51		 push	 ecx
  03ef8	8d 8d ac fd ff
	ff		 lea	 ecx, DWORD PTR $T174250[ebp]
  03efe	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03f03	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03f06	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  03f0a	50		 push	 eax
  03f0b	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T174252[ebp]
  03f11	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03f16	68 c0 00 00 00	 push	 192			; 000000c0H
  03f1b	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  03f20	89 85 c8 fd ff
	ff		 mov	 DWORD PTR $T174241[ebp], eax
  03f26	c7 45 fc 15 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 21 ; 00000015H
  03f2d	83 bd c8 fd ff
	ff 00		 cmp	 DWORD PTR $T174241[ebp], 0
  03f34	0f 84 83 00 00
	00		 je	 $L174247
  03f3a	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03f3d	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  03f41	52		 push	 edx
  03f42	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T174246[ebp]
  03f48	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  03f4d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03f50	66 8b 48 14	 mov	 cx, WORD PTR [eax+20]
  03f54	51		 push	 ecx
  03f55	51		 push	 ecx
  03f56	8b cc		 mov	 ecx, esp
  03f58	89 a5 c4 fd ff
	ff		 mov	 DWORD PTR $T174242[ebp], esp
  03f5e	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03f61	66 8b 42 12	 mov	 ax, WORD PTR [edx+18]
  03f65	50		 push	 eax
  03f66	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  03f6b	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03f6e	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  03f72	52		 push	 edx
  03f73	51		 push	 ecx
  03f74	8b cc		 mov	 ecx, esp
  03f76	89 a5 c0 fd ff
	ff		 mov	 DWORD PTR $T174243[ebp], esp
  03f7c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  03f7f	66 8b 50 0e	 mov	 dx, WORD PTR [eax+14]
  03f83	52		 push	 edx
  03f84	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  03f89	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR $T174246[ebp]
  03f8f	50		 push	 eax
  03f90	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR $T174245[ebp]
  03f96	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  03f9b	51		 push	 ecx
  03f9c	8b cc		 mov	 ecx, esp
  03f9e	89 a5 bc fd ff
	ff		 mov	 DWORD PTR $T174244[ebp], esp
  03fa4	50		 push	 eax
  03fa5	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  03faa	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR $T174241[ebp]
  03fb0	e8 00 00 00 00	 call	 ??0CTextDoubleButtonDlg@@QAE@VStringID@@VCSCI_Object@@F1F@Z ; CTextDoubleButtonDlg::CTextDoubleButtonDlg
  03fb5	89 85 c4 f9 ff
	ff		 mov	 DWORD PTR -1596+[ebp], eax
  03fbb	eb 0a		 jmp	 SHORT $L174248
$L174247:
  03fbd	c7 85 c4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1596+[ebp], 0
$L174248:
  03fc7	8b 8d c4 f9 ff
	ff		 mov	 ecx, DWORD PTR -1596+[ebp]
  03fcd	89 8d cc fd ff
	ff		 mov	 DWORD PTR $T174240[ebp], ecx
  03fd3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03fda	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  03fdd	0f bf 42 16	 movsx	 eax, WORD PTR [edx+22]
  03fe1	f7 d8		 neg	 eax
  03fe3	1b c0		 sbb	 eax, eax
  03fe5	f7 d8		 neg	 eax
  03fe7	50		 push	 eax
  03fe8	6a 00		 push	 0
  03fea	6a 00		 push	 0
  03fec	6a 00		 push	 0
  03fee	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  03ff1	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  03ff5	52		 push	 edx
  03ff6	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR $T174250[ebp]
  03ffc	50		 push	 eax
  03ffd	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T174249[ebp]
  04003	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04008	8b c8		 mov	 ecx, eax
  0400a	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0400f	50		 push	 eax
  04010	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T174252[ebp]
  04016	51		 push	 ecx
  04017	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR $T174251[ebp]
  0401d	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04022	8b c8		 mov	 ecx, eax
  04024	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04029	50		 push	 eax
  0402a	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR $T174240[ebp]
  04030	e8 00 00 00 00	 call	 ?Create@CTextDoubleButtonDlg@@QAEHPAD0H00_N1@Z ; CTextDoubleButtonDlg::Create

; 2479 : 					break;

  04035	e9 f5 07 00 00	 jmp	 $L167321
$L167342:

; 2480 : 				case dgiPassword:
; 2481 : 					(new CPasswordDoubleButtonDlg( (StringID) arg(5), arg(7), arg(8), arg(9), arg(10) ) )->Create( * ((StringID) arg(3)), * ((StringID) arg(4)), arg(6), NULL, NULL, false);

  0403a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0403d	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  04041	50		 push	 eax
  04042	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T174263[ebp]
  04048	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0404d	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04050	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  04054	52		 push	 edx
  04055	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR $T174265[ebp]
  0405b	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04060	68 c0 00 00 00	 push	 192			; 000000c0H
  04065	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0406a	89 85 9c fd ff
	ff		 mov	 DWORD PTR $T174254[ebp], eax
  04070	c7 45 fc 16 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 22 ; 00000016H
  04077	83 bd 9c fd ff
	ff 00		 cmp	 DWORD PTR $T174254[ebp], 0
  0407e	0f 84 83 00 00
	00		 je	 $L174260
  04084	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04087	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0408b	51		 push	 ecx
  0408c	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T174259[ebp]
  04092	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04097	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0409a	66 8b 42 14	 mov	 ax, WORD PTR [edx+20]
  0409e	50		 push	 eax
  0409f	51		 push	 ecx
  040a0	8b cc		 mov	 ecx, esp
  040a2	89 a5 98 fd ff
	ff		 mov	 DWORD PTR $T174255[ebp], esp
  040a8	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  040ab	66 8b 42 12	 mov	 ax, WORD PTR [edx+18]
  040af	50		 push	 eax
  040b0	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  040b5	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  040b8	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  040bc	52		 push	 edx
  040bd	51		 push	 ecx
  040be	8b cc		 mov	 ecx, esp
  040c0	89 a5 94 fd ff
	ff		 mov	 DWORD PTR $T174256[ebp], esp
  040c6	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  040c9	66 8b 50 0e	 mov	 dx, WORD PTR [eax+14]
  040cd	52		 push	 edx
  040ce	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  040d3	8d 85 88 fd ff
	ff		 lea	 eax, DWORD PTR $T174259[ebp]
  040d9	50		 push	 eax
  040da	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR $T174258[ebp]
  040e0	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  040e5	51		 push	 ecx
  040e6	8b cc		 mov	 ecx, esp
  040e8	89 a5 90 fd ff
	ff		 mov	 DWORD PTR $T174257[ebp], esp
  040ee	50		 push	 eax
  040ef	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  040f4	8b 8d 9c fd ff
	ff		 mov	 ecx, DWORD PTR $T174254[ebp]
  040fa	e8 00 00 00 00	 call	 ??0CPasswordDoubleButtonDlg@@QAE@VStringID@@VCSCI_Object@@F1F@Z ; CPasswordDoubleButtonDlg::CPasswordDoubleButtonDlg
  040ff	89 85 c0 f9 ff
	ff		 mov	 DWORD PTR -1600+[ebp], eax
  04105	eb 0a		 jmp	 SHORT $L174261
$L174260:
  04107	c7 85 c0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1600+[ebp], 0
$L174261:
  04111	8b 8d c0 f9 ff
	ff		 mov	 ecx, DWORD PTR -1600+[ebp]
  04117	89 8d a0 fd ff
	ff		 mov	 DWORD PTR $T174253[ebp], ecx
  0411d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04124	6a 00		 push	 0
  04126	6a 00		 push	 0
  04128	6a 00		 push	 0
  0412a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0412d	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  04131	50		 push	 eax
  04132	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T174263[ebp]
  04138	51		 push	 ecx
  04139	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR $T174262[ebp]
  0413f	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04144	8b c8		 mov	 ecx, eax
  04146	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0414b	50		 push	 eax
  0414c	8d 95 78 fd ff
	ff		 lea	 edx, DWORD PTR $T174265[ebp]
  04152	52		 push	 edx
  04153	8d 8d 7c fd ff
	ff		 lea	 ecx, DWORD PTR $T174264[ebp]
  04159	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0415e	8b c8		 mov	 ecx, eax
  04160	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04165	50		 push	 eax
  04166	8b 8d a0 fd ff
	ff		 mov	 ecx, DWORD PTR $T174253[ebp]
  0416c	e8 00 00 00 00	 call	 ?Create@CPasswordDoubleButtonDlg@@QAEHPAD0H00_N@Z ; CPasswordDoubleButtonDlg::Create

; 2482 : 					break;

  04171	e9 b9 06 00 00	 jmp	 $L167321
$L167359:

; 2483 : 				case dgiSingle:
; 2484 : 					(new CSingleButtonDlg( arg(6), arg(7) ))->Create( * ((StringID) arg(3)), * ((StringID) arg(4)), * ((StringID) arg(5)), false);

  04176	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04179	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0417d	51		 push	 ecx
  0417e	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR $T174272[ebp]
  04184	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04189	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0418c	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  04190	50		 push	 eax
  04191	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR $T174274[ebp]
  04197	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0419c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0419f	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  041a3	52		 push	 edx
  041a4	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T174276[ebp]
  041aa	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  041af	68 b8 00 00 00	 push	 184			; 000000b8H
  041b4	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  041b9	89 85 70 fd ff
	ff		 mov	 DWORD PTR $T174267[ebp], eax
  041bf	c7 45 fc 17 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 23 ; 00000017H
  041c6	83 bd 70 fd ff
	ff 00		 cmp	 DWORD PTR $T174267[ebp], 0
  041cd	74 31		 je	 SHORT $L174269
  041cf	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  041d2	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  041d6	51		 push	 ecx
  041d7	51		 push	 ecx
  041d8	8b cc		 mov	 ecx, esp
  041da	89 a5 6c fd ff
	ff		 mov	 DWORD PTR $T174268[ebp], esp
  041e0	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  041e3	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  041e7	50		 push	 eax
  041e8	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  041ed	8b 8d 70 fd ff
	ff		 mov	 ecx, DWORD PTR $T174267[ebp]
  041f3	e8 00 00 00 00	 call	 ??0CSingleButtonDlg@@QAE@VCSCI_Object@@F@Z ; CSingleButtonDlg::CSingleButtonDlg
  041f8	89 85 bc f9 ff
	ff		 mov	 DWORD PTR -1604+[ebp], eax
  041fe	eb 0a		 jmp	 SHORT $L174270
$L174269:
  04200	c7 85 bc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1604+[ebp], 0
$L174270:
  0420a	8b 8d bc f9 ff
	ff		 mov	 ecx, DWORD PTR -1604+[ebp]
  04210	89 8d 74 fd ff
	ff		 mov	 DWORD PTR $T174266[ebp], ecx
  04216	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0421d	6a 00		 push	 0
  0421f	8d 95 64 fd ff
	ff		 lea	 edx, DWORD PTR $T174272[ebp]
  04225	52		 push	 edx
  04226	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR $T174271[ebp]
  0422c	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04231	8b c8		 mov	 ecx, eax
  04233	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04238	50		 push	 eax
  04239	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR $T174274[ebp]
  0423f	50		 push	 eax
  04240	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR $T174273[ebp]
  04246	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0424b	8b c8		 mov	 ecx, eax
  0424d	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04252	50		 push	 eax
  04253	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T174276[ebp]
  04259	51		 push	 ecx
  0425a	8d 8d 58 fd ff
	ff		 lea	 ecx, DWORD PTR $T174275[ebp]
  04260	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04265	8b c8		 mov	 ecx, eax
  04267	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0426c	50		 push	 eax
  0426d	8b 8d 74 fd ff
	ff		 mov	 ecx, DWORD PTR $T174266[ebp]
  04273	e8 00 00 00 00	 call	 ?Create@CSingleButtonDlg@@QAEHPAD00_N@Z ; CSingleButtonDlg::Create

; 2485 : 					break;

  04278	e9 b2 05 00 00	 jmp	 $L167321
$L167374:

; 2488 : 						CNoButtonDlg *pDlg = new CNoButtonDlg();

  0427d	68 b8 00 00 00	 push	 184			; 000000b8H
  04282	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  04287	89 85 4c fd ff
	ff		 mov	 DWORD PTR $T174278[ebp], eax
  0428d	c7 45 fc 18 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 24 ; 00000018H
  04294	83 bd 4c fd ff
	ff 00		 cmp	 DWORD PTR $T174278[ebp], 0
  0429b	74 13		 je	 SHORT $L174279
  0429d	8b 8d 4c fd ff
	ff		 mov	 ecx, DWORD PTR $T174278[ebp]
  042a3	e8 00 00 00 00	 call	 ??0CNoButtonDlg@@QAE@XZ	; CNoButtonDlg::CNoButtonDlg
  042a8	89 85 b8 f9 ff
	ff		 mov	 DWORD PTR -1608+[ebp], eax
  042ae	eb 0a		 jmp	 SHORT $L174280
$L174279:
  042b0	c7 85 b8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1608+[ebp], 0
$L174280:
  042ba	8b 95 b8 f9 ff
	ff		 mov	 edx, DWORD PTR -1608+[ebp]
  042c0	89 95 50 fd ff
	ff		 mov	 DWORD PTR $T174277[ebp], edx
  042c6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  042cd	8b 85 50 fd ff
	ff		 mov	 eax, DWORD PTR $T174277[ebp]
  042d3	89 85 78 ff ff
	ff		 mov	 DWORD PTR _pDlg$167375[ebp], eax

; 2489 : 						pDlg->SetTransientState( true );

  042d9	6a 01		 push	 1
  042db	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pDlg$167375[ebp]
  042e1	e8 00 00 00 00	 call	 ?SetTransientState@CSkinWnd@@QAEX_N@Z ; CSkinWnd::SetTransientState

; 2490 :                         pDlg->SetPriority( swPriDefault );

  042e6	6a 01		 push	 1
  042e8	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pDlg$167375[ebp]
  042ee	e8 00 00 00 00	 call	 ?SetPriority@CSkinWnd@@QAEXH@Z ; CSkinWnd::SetPriority

; 2491 :                         pDlg->Create( * ((StringID) arg(3)), * ((StringID) arg(4)), false );

  042f3	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  042f6	66 8b 51 08	 mov	 dx, WORD PTR [ecx+8]
  042fa	52		 push	 edx
  042fb	8d 8d 44 fd ff
	ff		 lea	 ecx, DWORD PTR $T174282[ebp]
  04301	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04306	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04309	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  0430d	51		 push	 ecx
  0430e	8d 8d 3c fd ff
	ff		 lea	 ecx, DWORD PTR $T174284[ebp]
  04314	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04319	6a 00		 push	 0
  0431b	8d 95 44 fd ff
	ff		 lea	 edx, DWORD PTR $T174282[ebp]
  04321	52		 push	 edx
  04322	8d 8d 48 fd ff
	ff		 lea	 ecx, DWORD PTR $T174281[ebp]
  04328	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0432d	8b c8		 mov	 ecx, eax
  0432f	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04334	50		 push	 eax
  04335	8d 85 3c fd ff
	ff		 lea	 eax, DWORD PTR $T174284[ebp]
  0433b	50		 push	 eax
  0433c	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T174283[ebp]
  04342	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04347	8b c8		 mov	 ecx, eax
  04349	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0434e	50		 push	 eax
  0434f	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pDlg$167375[ebp]
  04355	e8 00 00 00 00	 call	 ?Create@CNoButtonDlg@@QAEHPAD0_N@Z ; CNoButtonDlg::Create

; 2492 :                         pDlg->UpdateWindow();

  0435a	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pDlg$167375[ebp]
  04360	e8 00 00 00 00	 call	 ?UpdateWindow@CWnd@@QAEXXZ ; CWnd::UpdateWindow

; 2493 :                         if (g_pMainWindow) g_pMainWindow->UpdateWindow();

  04365	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainWindow@@3PAVCMainWindow@@A, 0 ; g_pMainWindow
  0436c	74 0b		 je	 SHORT $L167386
  0436e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainWindow@@3PAVCMainWindow@@A ; g_pMainWindow
  04374	e8 00 00 00 00	 call	 ?UpdateWindow@CWnd@@QAEXXZ ; CWnd::UpdateWindow
$L167386:

; 2495 : 					break;

  04379	e9 b1 04 00 00	 jmp	 $L167321
$L167387:

; 2496 : 				case dgiDoubleButton:
; 2497 : 					(new CDoubleButtonDlg( arg(6), arg(7), arg(9), arg(10) ))->Create( * ((StringID) arg(3)), * ((StringID) arg(4)), * ((StringID) arg(5)), * ((StringID) arg(8)), false, arg(10) );

  0437e	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04381	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  04385	52		 push	 edx
  04386	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR $T174292[ebp]
  0438c	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04391	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04394	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  04398	51		 push	 ecx
  04399	8d 8d 1c fd ff
	ff		 lea	 ecx, DWORD PTR $T174294[ebp]
  0439f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  043a4	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  043a7	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  043ab	50		 push	 eax
  043ac	8d 8d 14 fd ff
	ff		 lea	 ecx, DWORD PTR $T174296[ebp]
  043b2	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  043b7	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  043ba	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  043be	52		 push	 edx
  043bf	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T174298[ebp]
  043c5	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  043ca	68 b8 00 00 00	 push	 184			; 000000b8H
  043cf	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  043d4	89 85 34 fd ff
	ff		 mov	 DWORD PTR $T174286[ebp], eax
  043da	c7 45 fc 19 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 25 ; 00000019H
  043e1	83 bd 34 fd ff
	ff 00		 cmp	 DWORD PTR $T174286[ebp], 0
  043e8	74 4f		 je	 SHORT $L174289
  043ea	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  043ed	66 8b 48 14	 mov	 cx, WORD PTR [eax+20]
  043f1	51		 push	 ecx
  043f2	51		 push	 ecx
  043f3	8b cc		 mov	 ecx, esp
  043f5	89 a5 30 fd ff
	ff		 mov	 DWORD PTR $T174287[ebp], esp
  043fb	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  043fe	66 8b 42 12	 mov	 ax, WORD PTR [edx+18]
  04402	50		 push	 eax
  04403	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  04408	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0440b	66 8b 51 0e	 mov	 dx, WORD PTR [ecx+14]
  0440f	52		 push	 edx
  04410	51		 push	 ecx
  04411	8b cc		 mov	 ecx, esp
  04413	89 a5 2c fd ff
	ff		 mov	 DWORD PTR $T174288[ebp], esp
  04419	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0441c	66 8b 50 0c	 mov	 dx, WORD PTR [eax+12]
  04420	52		 push	 edx
  04421	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  04426	8b 8d 34 fd ff
	ff		 mov	 ecx, DWORD PTR $T174286[ebp]
  0442c	e8 00 00 00 00	 call	 ??0CDoubleButtonDlg@@QAE@VCSCI_Object@@F0F@Z ; CDoubleButtonDlg::CDoubleButtonDlg
  04431	89 85 b4 f9 ff
	ff		 mov	 DWORD PTR -1612+[ebp], eax
  04437	eb 0a		 jmp	 SHORT $L174290
$L174289:
  04439	c7 85 b4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1612+[ebp], 0
$L174290:
  04443	8b 85 b4 f9 ff
	ff		 mov	 eax, DWORD PTR -1612+[ebp]
  04449	89 85 38 fd ff
	ff		 mov	 DWORD PTR $T174285[ebp], eax
  0444f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04456	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04459	0f bf 51 14	 movsx	 edx, WORD PTR [ecx+20]
  0445d	f7 da		 neg	 edx
  0445f	1b d2		 sbb	 edx, edx
  04461	f7 da		 neg	 edx
  04463	52		 push	 edx
  04464	6a 00		 push	 0
  04466	8d 85 24 fd ff
	ff		 lea	 eax, DWORD PTR $T174292[ebp]
  0446c	50		 push	 eax
  0446d	8d 8d 28 fd ff
	ff		 lea	 ecx, DWORD PTR $T174291[ebp]
  04473	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04478	8b c8		 mov	 ecx, eax
  0447a	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0447f	50		 push	 eax
  04480	8d 8d 1c fd ff
	ff		 lea	 ecx, DWORD PTR $T174294[ebp]
  04486	51		 push	 ecx
  04487	8d 8d 20 fd ff
	ff		 lea	 ecx, DWORD PTR $T174293[ebp]
  0448d	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04492	8b c8		 mov	 ecx, eax
  04494	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04499	50		 push	 eax
  0449a	8d 95 14 fd ff
	ff		 lea	 edx, DWORD PTR $T174296[ebp]
  044a0	52		 push	 edx
  044a1	8d 8d 18 fd ff
	ff		 lea	 ecx, DWORD PTR $T174295[ebp]
  044a7	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  044ac	8b c8		 mov	 ecx, eax
  044ae	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  044b3	50		 push	 eax
  044b4	8d 85 0c fd ff
	ff		 lea	 eax, DWORD PTR $T174298[ebp]
  044ba	50		 push	 eax
  044bb	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T174297[ebp]
  044c1	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  044c6	8b c8		 mov	 ecx, eax
  044c8	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  044cd	50		 push	 eax
  044ce	8b 8d 38 fd ff
	ff		 mov	 ecx, DWORD PTR $T174285[ebp]
  044d4	e8 00 00 00 00	 call	 ?Create@CDoubleButtonDlg@@QAEHPAD000_N1@Z ; CDoubleButtonDlg::Create

; 2498 : 					break;

  044d9	e9 51 03 00 00	 jmp	 $L167321
$L167406:

; 2499 : 				case dgiDead:
; 2500 : 					(new CDeadDlg())->Create( arg(3) );

  044de	68 98 00 00 00	 push	 152			; 00000098H
  044e3	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  044e8	89 85 04 fd ff
	ff		 mov	 DWORD PTR $T174300[ebp], eax
  044ee	c7 45 fc 1a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  044f5	83 bd 04 fd ff
	ff 00		 cmp	 DWORD PTR $T174300[ebp], 0
  044fc	74 13		 je	 SHORT $L174301
  044fe	8b 8d 04 fd ff
	ff		 mov	 ecx, DWORD PTR $T174300[ebp]
  04504	e8 00 00 00 00	 call	 ??0CDeadDlg@@QAE@XZ	; CDeadDlg::CDeadDlg
  04509	89 85 b0 f9 ff
	ff		 mov	 DWORD PTR -1616+[ebp], eax
  0450f	eb 0a		 jmp	 SHORT $L174302
$L174301:
  04511	c7 85 b0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1616+[ebp], 0
$L174302:
  0451b	8b 8d b0 f9 ff
	ff		 mov	 ecx, DWORD PTR -1616+[ebp]
  04521	89 8d 08 fd ff
	ff		 mov	 DWORD PTR $T174299[ebp], ecx
  04527	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0452e	51		 push	 ecx
  0452f	8b cc		 mov	 ecx, esp
  04531	89 a5 00 fd ff
	ff		 mov	 DWORD PTR $T174303[ebp], esp
  04537	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0453a	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  0453e	50		 push	 eax
  0453f	e8 00 00 00 00	 call	 ??0CSCI_Script@@QAE@G@Z	; CSCI_Script::CSCI_Script
  04544	8b 8d 08 fd ff
	ff		 mov	 ecx, DWORD PTR $T174299[ebp]
  0454a	e8 00 00 00 00	 call	 ?Create@CDeadDlg@@QAEHVCSCI_Script@@@Z ; CDeadDlg::Create

; 2501 : 					break;

  0454f	e9 db 02 00 00	 jmp	 $L167321
$L167412:

; 2502 : 				case dgiLogin:
; 2503 : 					(new CLogInPassword( arg(3), (StringID) arg(4), (StringID) arg(5), (CSCI_LongInt) arg(6), (StringID) arg(7) ))->Create();

  04554	68 ac 00 00 00	 push	 172			; 000000acH
  04559	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0455e	89 85 f8 fc ff
	ff		 mov	 DWORD PTR $T174305[ebp], eax
  04564	c7 45 fc 1b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  0456b	83 bd f8 fc ff
	ff 00		 cmp	 DWORD PTR $T174305[ebp], 0
  04572	0f 84 e7 00 00
	00		 je	 $L174318
  04578	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0457b	66 8b 51 0e	 mov	 dx, WORD PTR [ecx+14]
  0457f	52		 push	 edx
  04580	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T174308[ebp]
  04586	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0458b	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0458e	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  04592	51		 push	 ecx
  04593	8d 8d d8 fc ff
	ff		 lea	 ecx, DWORD PTR $T174313[ebp]
  04599	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0459e	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  045a1	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  045a5	50		 push	 eax
  045a6	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T174316[ebp]
  045ac	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  045b1	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T174308[ebp]
  045b7	51		 push	 ecx
  045b8	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T174307[ebp]
  045be	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  045c3	51		 push	 ecx
  045c4	8b cc		 mov	 ecx, esp
  045c6	89 a5 f4 fc ff
	ff		 mov	 DWORD PTR $T174306[ebp], esp
  045cc	50		 push	 eax
  045cd	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  045d2	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  045d5	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  045d9	50		 push	 eax
  045da	8d 8d e4 fc ff
	ff		 lea	 ecx, DWORD PTR $T174310[ebp]
  045e0	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  045e5	51		 push	 ecx
  045e6	8b cc		 mov	 ecx, esp
  045e8	89 a5 e8 fc ff
	ff		 mov	 DWORD PTR $T174309[ebp], esp
  045ee	50		 push	 eax
  045ef	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@ABV0@@Z ; CSCI_LongInt::CSCI_LongInt
  045f4	8d 8d d8 fc ff
	ff		 lea	 ecx, DWORD PTR $T174313[ebp]
  045fa	51		 push	 ecx
  045fb	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T174312[ebp]
  04601	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04606	51		 push	 ecx
  04607	8b cc		 mov	 ecx, esp
  04609	89 a5 e0 fc ff
	ff		 mov	 DWORD PTR $T174311[ebp], esp
  0460f	50		 push	 eax
  04610	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  04615	8d 95 cc fc ff
	ff		 lea	 edx, DWORD PTR $T174316[ebp]
  0461b	52		 push	 edx
  0461c	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T174315[ebp]
  04622	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04627	51		 push	 ecx
  04628	8b cc		 mov	 ecx, esp
  0462a	89 a5 d4 fc ff
	ff		 mov	 DWORD PTR $T174314[ebp], esp
  04630	50		 push	 eax
  04631	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  04636	51		 push	 ecx
  04637	8b cc		 mov	 ecx, esp
  04639	89 a5 c8 fc ff
	ff		 mov	 DWORD PTR $T174317[ebp], esp
  0463f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04642	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  04646	52		 push	 edx
  04647	e8 00 00 00 00	 call	 ??0CSCI_Script@@QAE@G@Z	; CSCI_Script::CSCI_Script
  0464c	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR $T174305[ebp]
  04652	e8 00 00 00 00	 call	 ??0CLogInPassword@@QAE@VCSCI_Script@@VStringID@@1VCSCI_LongInt@@1@Z ; CLogInPassword::CLogInPassword
  04657	89 85 ac f9 ff
	ff		 mov	 DWORD PTR -1620+[ebp], eax
  0465d	eb 0a		 jmp	 SHORT $L174319
$L174318:
  0465f	c7 85 ac f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1620+[ebp], 0
$L174319:
  04669	8b 85 ac f9 ff
	ff		 mov	 eax, DWORD PTR -1620+[ebp]
  0466f	89 85 fc fc ff
	ff		 mov	 DWORD PTR $T174304[ebp], eax
  04675	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0467c	8b 8d fc fc ff
	ff		 mov	 ecx, DWORD PTR $T174304[ebp]
  04682	e8 00 00 00 00	 call	 ?Create@CLogInPassword@@QAEHXZ ; CLogInPassword::Create

; 2504 : 					break;

  04687	e9 a3 01 00 00	 jmp	 $L167321
$L167433:

; 2505 : 				case dgiChangePassword:
; 2506 : 					if ( g_pChangePassword ) 

  0468c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pChangePassword@@3PAVCChangePasswordDlg@@A, 0 ; g_pChangePassword
  04693	74 10		 je	 SHORT $L167434

; 2507 : 						g_pChangePassword->SetFocus();

  04695	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pChangePassword@@3PAVCChangePasswordDlg@@A ; g_pChangePassword
  0469b	e8 00 00 00 00	 call	 ?SetFocus@CWnd@@QAEPAV1@XZ ; CWnd::SetFocus

; 2508 : 					else

  046a0	e9 dd 00 00 00	 jmp	 $L167435
$L167434:

; 2509 : 						(new CChangePasswordDlg( arg(3), (StringID) arg(4), (StringID) arg(5) ))->Create();

  046a5	68 b0 00 00 00	 push	 176			; 000000b0H
  046aa	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  046af	89 85 c0 fc ff
	ff		 mov	 DWORD PTR $T174321[ebp], eax
  046b5	c7 45 fc 1c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  046bc	83 bd c0 fc ff
	ff 00		 cmp	 DWORD PTR $T174321[ebp], 0
  046c3	0f 84 91 00 00
	00		 je	 $L174329
  046c9	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  046cc	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  046d0	52		 push	 edx
  046d1	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T174324[ebp]
  046d7	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  046dc	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  046df	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  046e3	51		 push	 ecx
  046e4	8d 8d a8 fc ff
	ff		 lea	 ecx, DWORD PTR $T174327[ebp]
  046ea	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  046ef	8d 95 b4 fc ff
	ff		 lea	 edx, DWORD PTR $T174324[ebp]
  046f5	52		 push	 edx
  046f6	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T174323[ebp]
  046fc	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04701	51		 push	 ecx
  04702	8b cc		 mov	 ecx, esp
  04704	89 a5 bc fc ff
	ff		 mov	 DWORD PTR $T174322[ebp], esp
  0470a	50		 push	 eax
  0470b	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  04710	8d 85 a8 fc ff
	ff		 lea	 eax, DWORD PTR $T174327[ebp]
  04716	50		 push	 eax
  04717	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR $T174326[ebp]
  0471d	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04722	51		 push	 ecx
  04723	8b cc		 mov	 ecx, esp
  04725	89 a5 b0 fc ff
	ff		 mov	 DWORD PTR $T174325[ebp], esp
  0472b	50		 push	 eax
  0472c	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  04731	51		 push	 ecx
  04732	8b cc		 mov	 ecx, esp
  04734	89 a5 a4 fc ff
	ff		 mov	 DWORD PTR $T174328[ebp], esp
  0473a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0473d	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  04741	50		 push	 eax
  04742	e8 00 00 00 00	 call	 ??0CSCI_Script@@QAE@G@Z	; CSCI_Script::CSCI_Script
  04747	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR $T174321[ebp]
  0474d	e8 00 00 00 00	 call	 ??0CChangePasswordDlg@@QAE@VCSCI_Script@@VStringID@@1@Z ; CChangePasswordDlg::CChangePasswordDlg
  04752	89 85 a8 f9 ff
	ff		 mov	 DWORD PTR -1624+[ebp], eax
  04758	eb 0a		 jmp	 SHORT $L174330
$L174329:
  0475a	c7 85 a8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1624+[ebp], 0
$L174330:
  04764	8b 8d a8 f9 ff
	ff		 mov	 ecx, DWORD PTR -1624+[ebp]
  0476a	89 8d c4 fc ff
	ff		 mov	 DWORD PTR $T174320[ebp], ecx
  04770	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04777	8b 8d c4 fc ff
	ff		 mov	 ecx, DWORD PTR $T174320[ebp]
  0477d	e8 00 00 00 00	 call	 ?Create@CChangePasswordDlg@@QAEHXZ ; CChangePasswordDlg::Create
$L167435:

; 2510 : 					break;

  04782	e9 a8 00 00 00	 jmp	 $L167321
$L167449:

; 2511 : 				case dgiClose:
; 2512 : 					CNoButtonDlg::Dispose( arg(3) );

  04787	51		 push	 ecx
  04788	8b cc		 mov	 ecx, esp
  0478a	89 a5 a0 fc ff
	ff		 mov	 DWORD PTR $T174331[ebp], esp
  04790	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04793	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  04797	50		 push	 eax
  04798	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  0479d	e8 00 00 00 00	 call	 ?Dispose@CNoButtonDlg@@SAXVCSCI_Object@@@Z ; CNoButtonDlg::Dispose
  047a2	83 c4 04	 add	 esp, 4

; 2513 : 					break;

  047a5	e9 85 00 00 00	 jmp	 $L167321
$L167451:

; 2514 : 				case dgiLoginInfo:
; 2515 : 					char pTmp[5] = { 0, 0, 0, 0, 0 };

  047aa	c6 45 80 00	 mov	 BYTE PTR _pTmp$167452[ebp], 0
  047ae	c6 45 81 00	 mov	 BYTE PTR _pTmp$167452[ebp+1], 0
  047b2	c6 45 82 00	 mov	 BYTE PTR _pTmp$167452[ebp+2], 0
  047b6	c6 45 83 00	 mov	 BYTE PTR _pTmp$167452[ebp+3], 0
  047ba	c6 45 84 00	 mov	 BYTE PTR _pTmp$167452[ebp+4], 0

; 2516 : 
; 2517 : 					( (CSCI_Script) arg(3)).set_scratch( pTmp[ 0 ] );

  047be	66 0f be 4d 80	 movsx	 cx, BYTE PTR _pTmp$167452[ebp]
  047c3	51		 push	 ecx
  047c4	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  047c7	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  047cb	50		 push	 eax
  047cc	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T174332[ebp]
  047d2	e8 00 00 00 00	 call	 ??0CSCI_Script@@QAE@G@Z	; CSCI_Script::CSCI_Script
  047d7	8b c8		 mov	 ecx, eax
  047d9	e8 00 00 00 00	 call	 ?set_scratch@CSCI_Object@@QAEXF@Z ; CSCI_Object::set_scratch

; 2518 : 
; 2519 : 					( (CSCI_LongInt) arg(4) ).set_nValue( g_nWindowVersion );

  047de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nWindowVersion@@3KA ; g_nWindowVersion
  047e4	51		 push	 ecx
  047e5	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  047e8	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  047ec	50		 push	 eax
  047ed	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T174333[ebp]
  047f3	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  047f8	8b c8		 mov	 ecx, eax
  047fa	e8 00 00 00 00	 call	 ?set_nValue@CSCI_LongInt@@QAEXH@Z ; CSCI_LongInt::set_nValue

; 2520 : 					( (StringID) arg(5) ) = &pTmp[1];

  047ff	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04802	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  04806	52		 push	 edx
  04807	8d 8d 90 fc ff
	ff		 lea	 ecx, DWORD PTR $T174335[ebp]
  0480d	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04812	8d 45 81	 lea	 eax, DWORD PTR _pTmp$167452[ebp+1]
  04815	50		 push	 eax
  04816	8d 8d 90 fc ff
	ff		 lea	 ecx, DWORD PTR $T174335[ebp]
  0481c	51		 push	 ecx
  0481d	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR $T174334[ebp]
  04823	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04828	8b c8		 mov	 ecx, eax
  0482a	e8 00 00 00 00	 call	 ??4StringID@@QAEAAV0@PBD@Z ; StringID::operator=
$L167321:

; 2525 : 
; 2526 : 		break;

  0482f	e9 fe 1e 00 00	 jmp	 $L166979
$L167460:

; 2529 : 			g_pWindowMgr->CloseAllTransientWindows();

  04834	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A ; g_pWindowMgr
  0483a	e8 00 00 00 00	 call	 ?CloseAllTransientWindows@CWindowMgr@@QAEXXZ ; CWindowMgr::CloseAllTransientWindows

; 2531 : 
; 2532 : 		break;

  0483f	e9 ee 1e 00 00	 jmp	 $L166979
$L167461:

; 2535 : 			enum {
; 2536 : 				dtdCreate,
; 2537 : 				dtdAdd,
; 2538 : 				dtdDelete,
; 2539 : 				dtdGot,
; 2540 : 				dtdShow,
; 2541 : 			};
; 2542 : 
; 2543 : 			switch ( arg(2) ) {

  04844	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04847	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  0484b	89 85 a4 f9 ff
	ff		 mov	 DWORD PTR -1628+[ebp], eax
  04851	83 bd a4 f9 ff
	ff 04		 cmp	 DWORD PTR -1628+[ebp], 4
  04858	0f 87 2d 01 00
	00		 ja	 $L167469
  0485e	8b 8d a4 f9 ff
	ff		 mov	 ecx, DWORD PTR -1628+[ebp]
  04864	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L174599[ecx*4]
$L167472:

; 2544 : 				case dtdCreate:
; 2545 : 					if ( !g_pTreasureDlg ) {

  0486b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTreasureDlg@@3PAVCTreasureDlg@@A, 0 ; g_pTreasureDlg
  04872	0f 85 a5 00 00
	00		 jne	 $L167473

; 2546 : 						(new CTreasureDlg( arg(3), arg(4), arg(5), arg(6) ))->Create( arg(7) );

  04878	68 c8 00 00 00	 push	 200			; 000000c8H
  0487d	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  04882	89 85 88 fc ff
	ff		 mov	 DWORD PTR $T174337[ebp], eax
  04888	c7 45 fc 1d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  0488f	83 bd 88 fc ff
	ff 00		 cmp	 DWORD PTR $T174337[ebp], 0
  04896	74 4f		 je	 SHORT $L174340
  04898	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0489b	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  0489f	50		 push	 eax
  048a0	51		 push	 ecx
  048a1	8b cc		 mov	 ecx, esp
  048a3	89 a5 84 fc ff
	ff		 mov	 DWORD PTR $T174338[ebp], esp
  048a9	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  048ac	66 8b 42 0a	 mov	 ax, WORD PTR [edx+10]
  048b0	50		 push	 eax
  048b1	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  048b6	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  048b9	66 8b 51 08	 mov	 dx, WORD PTR [ecx+8]
  048bd	52		 push	 edx
  048be	51		 push	 ecx
  048bf	8b cc		 mov	 ecx, esp
  048c1	89 a5 80 fc ff
	ff		 mov	 DWORD PTR $T174339[ebp], esp
  048c7	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  048ca	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  048ce	52		 push	 edx
  048cf	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  048d4	8b 8d 88 fc ff
	ff		 mov	 ecx, DWORD PTR $T174337[ebp]
  048da	e8 00 00 00 00	 call	 ??0CTreasureDlg@@QAE@VCSCI_Object@@F0F@Z ; CTreasureDlg::CTreasureDlg
  048df	89 85 a0 f9 ff
	ff		 mov	 DWORD PTR -1632+[ebp], eax
  048e5	eb 0a		 jmp	 SHORT $L174341
$L174340:
  048e7	c7 85 a0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1632+[ebp], 0
$L174341:
  048f1	8b 85 a0 f9 ff
	ff		 mov	 eax, DWORD PTR -1632+[ebp]
  048f7	89 85 8c fc ff
	ff		 mov	 DWORD PTR $T174336[ebp], eax
  048fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04904	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04907	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  0490b	f7 da		 neg	 edx
  0490d	1b d2		 sbb	 edx, edx
  0490f	f7 da		 neg	 edx
  04911	52		 push	 edx
  04912	8b 8d 8c fc ff
	ff		 mov	 ecx, DWORD PTR $T174336[ebp]
  04918	e8 00 00 00 00	 call	 ?Create@CTreasureDlg@@QAEH_N@Z ; CTreasureDlg::Create
$L167473:

; 2548 : 
; 2549 : 					break;

  0491d	eb 6c		 jmp	 SHORT $L167469
$L167480:

; 2550 : 				case dtdAdd:
; 2551 : 					if ( g_pTreasureDlg ) {

  0491f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTreasureDlg@@3PAVCTreasureDlg@@A, 0 ; g_pTreasureDlg
  04926	74 21		 je	 SHORT $L167481

; 2552 : 						g_pTreasureDlg->AddItem( arg(3) );

  04928	51		 push	 ecx
  04929	8b cc		 mov	 ecx, esp
  0492b	89 a5 7c fc ff
	ff		 mov	 DWORD PTR $T174342[ebp], esp
  04931	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04934	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  04938	52		 push	 edx
  04939	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0493e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTreasureDlg@@3PAVCTreasureDlg@@A ; g_pTreasureDlg
  04944	e8 00 00 00 00	 call	 ?AddItem@CTreasureDlg@@QAEXVCSCI_WorldObject@@@Z ; CTreasureDlg::AddItem
$L167481:

; 2554 : 					break;

  04949	eb 40		 jmp	 SHORT $L167469
$L167483:

; 2555 : 				case dtdDelete:
; 2556 : 					if ( g_pTreasureDlg ) {

  0494b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTreasureDlg@@3PAVCTreasureDlg@@A, 0 ; g_pTreasureDlg
  04952	74 21		 je	 SHORT $L167484

; 2557 : 						g_pTreasureDlg->DeleteItem( arg(3) );

  04954	51		 push	 ecx
  04955	8b cc		 mov	 ecx, esp
  04957	89 a5 78 fc ff
	ff		 mov	 DWORD PTR $T174343[ebp], esp
  0495d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04960	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  04964	52		 push	 edx
  04965	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0496a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTreasureDlg@@3PAVCTreasureDlg@@A ; g_pTreasureDlg
  04970	e8 00 00 00 00	 call	 ?DeleteItem@CTreasureDlg@@QAEXVCSCI_WorldObject@@@Z ; CTreasureDlg::DeleteItem
$L167484:

; 2559 : 					break;

  04975	eb 14		 jmp	 SHORT $L167469
$L167486:

; 2560 : 				case dtdShow:
; 2561 : 					if ( g_pTreasureDlg ) {

  04977	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTreasureDlg@@3PAVCTreasureDlg@@A, 0 ; g_pTreasureDlg
  0497e	74 0b		 je	 SHORT $L167487

; 2562 : 						g_pTreasureDlg->Show();

  04980	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTreasureDlg@@3PAVCTreasureDlg@@A ; g_pTreasureDlg
  04986	e8 00 00 00 00	 call	 ?Show@CTreasureDlg@@QAEXXZ ; CTreasureDlg::Show
$L167487:
$L167469:

; 2567 : 
; 2568 : 		break;

  0498b	e9 a2 1d 00 00	 jmp	 $L166979
$L167488:

; 2571 : 			(new CSpellListDlg( arg(2), arg(3) ))->Create( AfxGetApp()->m_pMainWnd );

  04990	68 bc 00 00 00	 push	 188			; 000000bcH
  04995	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0499a	89 85 70 fc ff
	ff		 mov	 DWORD PTR $T174345[ebp], eax
  049a0	c7 45 fc 1e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  049a7	83 bd 70 fc ff
	ff 00		 cmp	 DWORD PTR $T174345[ebp], 0
  049ae	74 31		 je	 SHORT $L174347
  049b0	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  049b3	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  049b7	51		 push	 ecx
  049b8	51		 push	 ecx
  049b9	8b cc		 mov	 ecx, esp
  049bb	89 a5 6c fc ff
	ff		 mov	 DWORD PTR $T174346[ebp], esp
  049c1	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  049c4	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  049c8	50		 push	 eax
  049c9	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  049ce	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR $T174345[ebp]
  049d4	e8 00 00 00 00	 call	 ??0CSpellListDlg@@QAE@VCSCI_Object@@F@Z ; CSpellListDlg::CSpellListDlg
  049d9	89 85 9c f9 ff
	ff		 mov	 DWORD PTR -1636+[ebp], eax
  049df	eb 0a		 jmp	 SHORT $L174348
$L174347:
  049e1	c7 85 9c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1636+[ebp], 0
$L174348:
  049eb	8b 8d 9c f9 ff
	ff		 mov	 ecx, DWORD PTR -1636+[ebp]
  049f1	89 8d 74 fc ff
	ff		 mov	 DWORD PTR $T174344[ebp], ecx
  049f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  049fe	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  04a03	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  04a06	52		 push	 edx
  04a07	8b 8d 74 fc ff
	ff		 mov	 ecx, DWORD PTR $T174344[ebp]
  04a0d	e8 00 00 00 00	 call	 ?Create@CSpellListDlg@@QAEHPAVCWnd@@@Z ; CSpellListDlg::Create

; 2573 : 
; 2574 : 		break;

  04a12	e9 1b 1d 00 00	 jmp	 $L166979
$L167494:

; 2577 : 			enum {
; 2578 : 				dsldCreate,
; 2579 : 				dsldUpdate,
; 2580 : 				dsldDefault,
; 2581 : 			};
; 2582 : 
; 2583 : 			switch ( arg(2) ) {

  04a17	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04a1a	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  04a1e	89 8d 98 f9 ff
	ff		 mov	 DWORD PTR -1640+[ebp], ecx
  04a24	83 bd 98 f9 ff
	ff 00		 cmp	 DWORD PTR -1640+[ebp], 0
  04a2b	74 12		 je	 SHORT $L167503
  04a2d	83 bd 98 f9 ff
	ff 02		 cmp	 DWORD PTR -1640+[ebp], 2
  04a34	0f 84 a2 00 00
	00		 je	 $L167511
  04a3a	e9 50 02 00 00	 jmp	 $L167500
$L167503:

; 2584 : 				case dsldCreate: 
; 2585 : 					(new CServerDlg())->Create( AfxGetApp()->m_pMainWnd, arg(3), arg(4), arg(5) );

  04a3f	68 a8 00 00 00	 push	 168			; 000000a8H
  04a44	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  04a49	89 85 64 fc ff
	ff		 mov	 DWORD PTR $T174350[ebp], eax
  04a4f	c7 45 fc 1f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  04a56	83 bd 64 fc ff
	ff 00		 cmp	 DWORD PTR $T174350[ebp], 0
  04a5d	74 13		 je	 SHORT $L174351
  04a5f	8b 8d 64 fc ff
	ff		 mov	 ecx, DWORD PTR $T174350[ebp]
  04a65	e8 00 00 00 00	 call	 ??0CServerDlg@@QAE@XZ	; CServerDlg::CServerDlg
  04a6a	89 85 94 f9 ff
	ff		 mov	 DWORD PTR -1644+[ebp], eax
  04a70	eb 0a		 jmp	 SHORT $L174352
$L174351:
  04a72	c7 85 94 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1644+[ebp], 0
$L174352:
  04a7c	8b 95 94 f9 ff
	ff		 mov	 edx, DWORD PTR -1644+[ebp]
  04a82	89 95 68 fc ff
	ff		 mov	 DWORD PTR $T174349[ebp], edx
  04a88	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04a8f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04a92	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  04a96	51		 push	 ecx
  04a97	51		 push	 ecx
  04a98	8b cc		 mov	 ecx, esp
  04a9a	89 a5 60 fc ff
	ff		 mov	 DWORD PTR $T174353[ebp], esp
  04aa0	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04aa3	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  04aa7	50		 push	 eax
  04aa8	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  04aad	51		 push	 ecx
  04aae	8b cc		 mov	 ecx, esp
  04ab0	89 a5 5c fc ff
	ff		 mov	 DWORD PTR $T174354[ebp], esp
  04ab6	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04ab9	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  04abd	50		 push	 eax
  04abe	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  04ac3	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  04ac8	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  04acb	51		 push	 ecx
  04acc	8b 8d 68 fc ff
	ff		 mov	 ecx, DWORD PTR $T174349[ebp]
  04ad2	e8 00 00 00 00	 call	 ?Create@CServerDlg@@QAEHPAVCWnd@@VCSCI_Object@@1F@Z ; CServerDlg::Create

; 2586 : 					break;

  04ad7	e9 b3 01 00 00	 jmp	 $L167500
$L167511:

; 2590 : 					// Save the selected server info in this global pointer.
; 2591 : 					CSCI_ServerInfo hInfo = arg(3);

  04adc	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04adf	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  04ae3	50		 push	 eax
  04ae4	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04aea	e8 00 00 00 00	 call	 ??0CSCI_ServerInfo@@QAE@G@Z ; CSCI_ServerInfo::CSCI_ServerInfo

; 2592 : 
; 2593 : 					g_pCurrentServer = new ServerInfo;

  04aef	6a 0a		 push	 10			; 0000000aH
  04af1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  04af6	83 c4 04	 add	 esp, 4
  04af9	89 85 54 fc ff
	ff		 mov	 DWORD PTR $T174356[ebp], eax
  04aff	c7 45 fc 20 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 32 ; 00000020H
  04b06	83 bd 54 fc ff
	ff 00		 cmp	 DWORD PTR $T174356[ebp], 0
  04b0d	74 13		 je	 SHORT $L174357
  04b0f	8b 8d 54 fc ff
	ff		 mov	 ecx, DWORD PTR $T174356[ebp]
  04b15	e8 00 00 00 00	 call	 ??0ServerInfo@@QAE@XZ	; ServerInfo::ServerInfo
  04b1a	89 85 90 f9 ff
	ff		 mov	 DWORD PTR -1648+[ebp], eax
  04b20	eb 0a		 jmp	 SHORT $L174358
$L174357:
  04b22	c7 85 90 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1648+[ebp], 0
$L174358:
  04b2c	8b 8d 90 f9 ff
	ff		 mov	 ecx, DWORD PTR -1648+[ebp]
  04b32	89 8d 58 fc ff
	ff		 mov	 DWORD PTR $T174355[ebp], ecx
  04b38	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04b3f	8b 95 58 fc ff
	ff		 mov	 edx, DWORD PTR $T174355[ebp]
  04b45	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A, edx ; g_pCurrentServer

; 2594 : 
; 2595 : 					g_pCurrentServer->m_hName = *hInfo.get_pServerName();

  04b4b	8d 85 50 fc ff
	ff		 lea	 eax, DWORD PTR $T174359[ebp]
  04b51	50		 push	 eax
  04b52	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04b58	e8 00 00 00 00	 call	 ?get_pServerName@CSCI_ServerInfo@@QAE?AVStringID@@XZ ; CSCI_ServerInfo::get_pServerName
  04b5d	8b c8		 mov	 ecx, eax
  04b5f	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04b64	50		 push	 eax
  04b65	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04b6b	e8 00 00 00 00	 call	 ??4TextID@@QAEAAV0@PBD@Z ; TextID::operator=

; 2596 : 					g_pCurrentServer->m_hStatus = *hInfo.get_pStatus();

  04b70	8d 8d 4c fc ff
	ff		 lea	 ecx, DWORD PTR $T174360[ebp]
  04b76	51		 push	 ecx
  04b77	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04b7d	e8 00 00 00 00	 call	 ?get_pStatus@CSCI_ServerInfo@@QAE?AVStringID@@XZ ; CSCI_ServerInfo::get_pStatus
  04b82	8b c8		 mov	 ecx, eax
  04b84	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04b89	50		 push	 eax
  04b8a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04b90	83 c1 02	 add	 ecx, 2
  04b93	e8 00 00 00 00	 call	 ??4TextID@@QAEAAV0@PBD@Z ; TextID::operator=

; 2597 : 					g_pCurrentServer->m_hNumberOfUsers = hInfo.get_pNumberOfUsers();

  04b98	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04b9e	e8 00 00 00 00	 call	 ?get_pNumberOfUsers@CSCI_ServerInfo@@QAEFXZ ; CSCI_ServerInfo::get_pNumberOfUsers
  04ba3	50		 push	 eax
  04ba4	8d 8d 48 fc ff
	ff		 lea	 ecx, DWORD PTR $T174361[ebp]
  04baa	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  04baf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04bb5	66 8b 85 48 fc
	ff ff		 mov	 ax, WORD PTR $T174361[ebp]
  04bbc	66 89 42 04	 mov	 WORD PTR [edx+4], ax

; 2598 : 					g_pCurrentServer->m_hIP = *hInfo.get_pIP();

  04bc0	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR $T174362[ebp]
  04bc6	51		 push	 ecx
  04bc7	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04bcd	e8 00 00 00 00	 call	 ?get_pIP@CSCI_ServerInfo@@QAE?AVStringID@@XZ ; CSCI_ServerInfo::get_pIP
  04bd2	8b c8		 mov	 ecx, eax
  04bd4	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04bd9	50		 push	 eax
  04bda	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04be0	83 c1 06	 add	 ecx, 6
  04be3	e8 00 00 00 00	 call	 ??4TextID@@QAEAAV0@PBD@Z ; TextID::operator=

; 2599 : 					g_pCurrentServer->m_hPort = *hInfo.get_pPort();

  04be8	8d 95 40 fc ff
	ff		 lea	 edx, DWORD PTR $T174363[ebp]
  04bee	52		 push	 edx
  04bef	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04bf5	e8 00 00 00 00	 call	 ?get_pPort@CSCI_ServerInfo@@QAE?AVStringID@@XZ ; CSCI_ServerInfo::get_pPort
  04bfa	8b c8		 mov	 ecx, eax
  04bfc	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04c01	50		 push	 eax
  04c02	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04c08	83 c1 08	 add	 ecx, 8
  04c0b	e8 00 00 00 00	 call	 ??4TextID@@QAEAAV0@PBD@Z ; TextID::operator=

; 2600 : 
; 2601 : 					// Save the selected server info in the SCI storage location
; 2602 : 					hInfo.set_pServerName( g_pCurrentServer->m_hName );

  04c10	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04c16	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04c1b	50		 push	 eax
  04c1c	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04c22	e8 00 00 00 00	 call	 ?set_pServerName@CSCI_ServerInfo@@QAEXF@Z ; CSCI_ServerInfo::set_pServerName

; 2603 : 					hInfo.set_pStatus( g_pCurrentServer->m_hStatus );

  04c27	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04c2d	83 c1 02	 add	 ecx, 2
  04c30	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04c35	50		 push	 eax
  04c36	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04c3c	e8 00 00 00 00	 call	 ?set_pStatus@CSCI_ServerInfo@@QAEXF@Z ; CSCI_ServerInfo::set_pStatus

; 2604 : 					hInfo.set_pNumberOfUsers( g_pCurrentServer->m_hNumberOfUsers );

  04c41	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04c47	83 c1 04	 add	 ecx, 4
  04c4a	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04c4f	50		 push	 eax
  04c50	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04c56	e8 00 00 00 00	 call	 ?set_pNumberOfUsers@CSCI_ServerInfo@@QAEXF@Z ; CSCI_ServerInfo::set_pNumberOfUsers

; 2605 : 					hInfo.set_pIP( g_pCurrentServer->m_hIP );

  04c5b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04c61	83 c1 06	 add	 ecx, 6
  04c64	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04c69	50		 push	 eax
  04c6a	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04c70	e8 00 00 00 00	 call	 ?set_pIP@CSCI_ServerInfo@@QAEXF@Z ; CSCI_ServerInfo::set_pIP

; 2606 : 					hInfo.set_pPort( g_pCurrentServer->m_hPort );

  04c75	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  04c7b	83 c1 08	 add	 ecx, 8
  04c7e	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  04c83	50		 push	 eax
  04c84	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hInfo$167512[ebp]
  04c8a	e8 00 00 00 00	 call	 ?set_pPort@CSCI_ServerInfo@@QAEXF@Z ; CSCI_ServerInfo::set_pPort
$L167500:

; 2613 : 
; 2614 : 		break;

  04c8f	e9 9e 1a 00 00	 jmp	 $L166979
$L167522:

; 2617 : 			enum {
; 2618 : 				dtldCreate,
; 2619 : 				dtldDestroy,
; 2620 : 			};
; 2621 : 
; 2622 : 			switch ( arg(2) ) {

  04c94	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04c97	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  04c9b	89 8d 8c f9 ff
	ff		 mov	 DWORD PTR -1652+[ebp], ecx
  04ca1	83 bd 8c f9 ff
	ff 00		 cmp	 DWORD PTR -1652+[ebp], 0
  04ca8	74 12		 je	 SHORT $L167530
  04caa	83 bd 8c f9 ff
	ff 01		 cmp	 DWORD PTR -1652+[ebp], 1
  04cb1	0f 84 8e 00 00
	00		 je	 $L167538
  04cb7	e9 a7 00 00 00	 jmp	 $L167527
$L167530:

; 2623 : 				case dtldCreate:
; 2624 : 					if ( g_pTeleportDlg )

  04cbc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTeleportDlg@@3PAVCTeleportDlg@@A, 0 ; g_pTeleportDlg
  04cc3	74 0d		 je	 SHORT $L167531

; 2625 : 						g_pTeleportDlg->SetFocus();

  04cc5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTeleportDlg@@3PAVCTeleportDlg@@A ; g_pTeleportDlg
  04ccb	e8 00 00 00 00	 call	 ?SetFocus@CWnd@@QAEPAV1@XZ ; CWnd::SetFocus

; 2626 : 					else

  04cd0	eb 71		 jmp	 SHORT $L167532
$L167531:

; 2627 : 						(new CTeleportDlg())->Create( arg(3) );

  04cd2	68 9c 00 00 00	 push	 156			; 0000009cH
  04cd7	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  04cdc	89 85 38 fc ff
	ff		 mov	 DWORD PTR $T174365[ebp], eax
  04ce2	c7 45 fc 21 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 33 ; 00000021H
  04ce9	83 bd 38 fc ff
	ff 00		 cmp	 DWORD PTR $T174365[ebp], 0
  04cf0	74 13		 je	 SHORT $L174366
  04cf2	8b 8d 38 fc ff
	ff		 mov	 ecx, DWORD PTR $T174365[ebp]
  04cf8	e8 00 00 00 00	 call	 ??0CTeleportDlg@@QAE@XZ	; CTeleportDlg::CTeleportDlg
  04cfd	89 85 88 f9 ff
	ff		 mov	 DWORD PTR -1656+[ebp], eax
  04d03	eb 0a		 jmp	 SHORT $L174367
$L174366:
  04d05	c7 85 88 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1656+[ebp], 0
$L174367:
  04d0f	8b 95 88 f9 ff
	ff		 mov	 edx, DWORD PTR -1656+[ebp]
  04d15	89 95 3c fc ff
	ff		 mov	 DWORD PTR $T174364[ebp], edx
  04d1b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04d22	51		 push	 ecx
  04d23	8b cc		 mov	 ecx, esp
  04d25	89 a5 34 fc ff
	ff		 mov	 DWORD PTR $T174368[ebp], esp
  04d2b	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04d2e	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  04d32	52		 push	 edx
  04d33	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  04d38	8b 8d 3c fc ff
	ff		 mov	 ecx, DWORD PTR $T174364[ebp]
  04d3e	e8 00 00 00 00	 call	 ?Create@CTeleportDlg@@QAEHVCSCI_Object@@@Z ; CTeleportDlg::Create
$L167532:

; 2628 : 
; 2629 : 					break;

  04d43	eb 1e		 jmp	 SHORT $L167527
$L167538:

; 2630 : 
; 2631 : 				case dtldDestroy:
; 2632 : 					if ( g_pTeleportDlg )

  04d45	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTeleportDlg@@3PAVCTeleportDlg@@A, 0 ; g_pTeleportDlg
  04d4c	74 15		 je	 SHORT $L167539

; 2633 : 						g_pTeleportDlg->CloseSelf();

  04d4e	6a 00		 push	 0
  04d50	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pTeleportDlg@@3PAVCTeleportDlg@@A ; g_pTeleportDlg
  04d55	8b 10		 mov	 edx, DWORD PTR [eax]
  04d57	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTeleportDlg@@3PAVCTeleportDlg@@A ; g_pTeleportDlg
  04d5d	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L167539:
$L167527:

; 2639 : 
; 2640 : 		break;

  04d63	e9 ca 19 00 00	 jmp	 $L166979
$L167540:

; 2643 : 			if ( g_pWhatsNewDlg )

  04d68	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWhatsNewDlg@@3PAVCWhatsNewDlg@@A, 0 ; g_pWhatsNewDlg
  04d6f	74 0d		 je	 SHORT $L167541

; 2644 : 				g_pWhatsNewDlg->SetFocus();

  04d71	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWhatsNewDlg@@3PAVCWhatsNewDlg@@A ; g_pWhatsNewDlg
  04d77	e8 00 00 00 00	 call	 ?SetFocus@CWnd@@QAEPAV1@XZ ; CWnd::SetFocus

; 2645 : 			else

  04d7c	eb 71		 jmp	 SHORT $L167542
$L167541:

; 2646 : 				(new CWhatsNewDlg())->Create( arg(2) );

  04d7e	68 98 00 00 00	 push	 152			; 00000098H
  04d83	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  04d88	89 85 2c fc ff
	ff		 mov	 DWORD PTR $T174370[ebp], eax
  04d8e	c7 45 fc 22 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 34 ; 00000022H
  04d95	83 bd 2c fc ff
	ff 00		 cmp	 DWORD PTR $T174370[ebp], 0
  04d9c	74 13		 je	 SHORT $L174371
  04d9e	8b 8d 2c fc ff
	ff		 mov	 ecx, DWORD PTR $T174370[ebp]
  04da4	e8 00 00 00 00	 call	 ??0CWhatsNewDlg@@QAE@XZ	; CWhatsNewDlg::CWhatsNewDlg
  04da9	89 85 84 f9 ff
	ff		 mov	 DWORD PTR -1660+[ebp], eax
  04daf	eb 0a		 jmp	 SHORT $L174372
$L174371:
  04db1	c7 85 84 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1660+[ebp], 0
$L174372:
  04dbb	8b 85 84 f9 ff
	ff		 mov	 eax, DWORD PTR -1660+[ebp]
  04dc1	89 85 30 fc ff
	ff		 mov	 DWORD PTR $T174369[ebp], eax
  04dc7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04dce	51		 push	 ecx
  04dcf	8b cc		 mov	 ecx, esp
  04dd1	89 a5 28 fc ff
	ff		 mov	 DWORD PTR $T174373[ebp], esp
  04dd7	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04dda	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  04dde	50		 push	 eax
  04ddf	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  04de4	8b 8d 30 fc ff
	ff		 mov	 ecx, DWORD PTR $T174369[ebp]
  04dea	e8 00 00 00 00	 call	 ?Create@CWhatsNewDlg@@QAEHVCSCI_Object@@@Z ; CWhatsNewDlg::Create
$L167542:

; 2648 : 
; 2649 : 		break;

  04def	e9 3e 19 00 00	 jmp	 $L166979
$L167548:

; 2652 : 			enum {
; 2653 : 				dmidCreate,
; 2654 : 				dmidDestroy,
; 2655 : 			};
; 2656 : 
; 2657 : 			switch ( arg(2) ) {

  04df4	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04df7	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  04dfb	89 95 80 f9 ff
	ff		 mov	 DWORD PTR -1664+[ebp], edx
  04e01	83 bd 80 f9 ff
	ff 00		 cmp	 DWORD PTR -1664+[ebp], 0
  04e08	74 12		 je	 SHORT $L167556
  04e0a	83 bd 80 f9 ff
	ff 01		 cmp	 DWORD PTR -1664+[ebp], 1
  04e11	0f 84 96 00 00
	00		 je	 $L167564
  04e17	e9 d4 00 00 00	 jmp	 $L167553
$L167556:

; 2659 : 					if ( g_pMakeItemDlg )

  04e1c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMakeItemDlg@@3PAVCMakeItemDlg@@A, 0 ; g_pMakeItemDlg
  04e23	74 0d		 je	 SHORT $L167557

; 2660 : 						g_pMakeItemDlg->SetFocus();

  04e25	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMakeItemDlg@@3PAVCMakeItemDlg@@A ; g_pMakeItemDlg
  04e2b	e8 00 00 00 00	 call	 ?SetFocus@CWnd@@QAEPAV1@XZ ; CWnd::SetFocus

; 2661 : 					else

  04e30	eb 79		 jmp	 SHORT $L167558
$L167557:

; 2662 : 						(new CMakeItemDlg( arg(4) ))->Create( arg(3) );

  04e32	68 9c 00 00 00	 push	 156			; 0000009cH
  04e37	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  04e3c	89 85 20 fc ff
	ff		 mov	 DWORD PTR $T174375[ebp], eax
  04e42	c7 45 fc 23 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 35 ; 00000023H
  04e49	83 bd 20 fc ff
	ff 00		 cmp	 DWORD PTR $T174375[ebp], 0
  04e50	74 29		 je	 SHORT $L174377
  04e52	51		 push	 ecx
  04e53	8b cc		 mov	 ecx, esp
  04e55	89 a5 1c fc ff
	ff		 mov	 DWORD PTR $T174376[ebp], esp
  04e5b	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04e5e	66 8b 50 08	 mov	 dx, WORD PTR [eax+8]
  04e62	52		 push	 edx
  04e63	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  04e68	8b 8d 20 fc ff
	ff		 mov	 ecx, DWORD PTR $T174375[ebp]
  04e6e	e8 00 00 00 00	 call	 ??0CMakeItemDlg@@QAE@VCSCI_WorldObject@@@Z ; CMakeItemDlg::CMakeItemDlg
  04e73	89 85 7c f9 ff
	ff		 mov	 DWORD PTR -1668+[ebp], eax
  04e79	eb 0a		 jmp	 SHORT $L174378
$L174377:
  04e7b	c7 85 7c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1668+[ebp], 0
$L174378:
  04e85	8b 85 7c f9 ff
	ff		 mov	 eax, DWORD PTR -1668+[ebp]
  04e8b	89 85 24 fc ff
	ff		 mov	 DWORD PTR $T174374[ebp], eax
  04e91	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04e98	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04e9b	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  04e9f	52		 push	 edx
  04ea0	8b 8d 24 fc ff
	ff		 mov	 ecx, DWORD PTR $T174374[ebp]
  04ea6	e8 00 00 00 00	 call	 ?Create@CMakeItemDlg@@QAEHF@Z ; CMakeItemDlg::Create
$L167558:

; 2664 : 
; 2665 : 				break;

  04eab	eb 43		 jmp	 SHORT $L167553
$L167564:

; 2668 : 					if ( g_pMakeItemDlg && g_pMakeItemDlg->Match( arg(3) ) )

  04ead	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMakeItemDlg@@3PAVCMakeItemDlg@@A, 0 ; g_pMakeItemDlg
  04eb4	74 3a		 je	 SHORT $L167566
  04eb6	51		 push	 ecx
  04eb7	8b cc		 mov	 ecx, esp
  04eb9	89 a5 18 fc ff
	ff		 mov	 DWORD PTR $T174379[ebp], esp
  04ebf	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  04ec2	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  04ec6	52		 push	 edx
  04ec7	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  04ecc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMakeItemDlg@@3PAVCMakeItemDlg@@A ; g_pMakeItemDlg
  04ed2	e8 00 00 00 00	 call	 ?Match@CMakeItemDlg@@QAEHVCSCI_WorldObject@@@Z ; CMakeItemDlg::Match
  04ed7	85 c0		 test	 eax, eax
  04ed9	74 15		 je	 SHORT $L167566

; 2669 : 						g_pMakeItemDlg->CloseSelf();

  04edb	6a 00		 push	 0
  04edd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pMakeItemDlg@@3PAVCMakeItemDlg@@A ; g_pMakeItemDlg
  04ee2	8b 10		 mov	 edx, DWORD PTR [eax]
  04ee4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMakeItemDlg@@3PAVCMakeItemDlg@@A ; g_pMakeItemDlg
  04eea	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L167566:
$L167553:

; 2675 : 
; 2676 : 		break;

  04ef0	e9 3d 18 00 00	 jmp	 $L166979
$L167567:

; 2679 : 			(new CItemListDlg())->Create( arg(2), arg(3) );

  04ef5	68 a4 00 00 00	 push	 164			; 000000a4H
  04efa	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  04eff	89 85 10 fc ff
	ff		 mov	 DWORD PTR $T174381[ebp], eax
  04f05	c7 45 fc 24 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 36 ; 00000024H
  04f0c	83 bd 10 fc ff
	ff 00		 cmp	 DWORD PTR $T174381[ebp], 0
  04f13	74 13		 je	 SHORT $L174382
  04f15	8b 8d 10 fc ff
	ff		 mov	 ecx, DWORD PTR $T174381[ebp]
  04f1b	e8 00 00 00 00	 call	 ??0CItemListDlg@@QAE@XZ	; CItemListDlg::CItemListDlg
  04f20	89 85 78 f9 ff
	ff		 mov	 DWORD PTR -1672+[ebp], eax
  04f26	eb 0a		 jmp	 SHORT $L174383
$L174382:
  04f28	c7 85 78 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1672+[ebp], 0
$L174383:
  04f32	8b 85 78 f9 ff
	ff		 mov	 eax, DWORD PTR -1672+[ebp]
  04f38	89 85 14 fc ff
	ff		 mov	 DWORD PTR $T174380[ebp], eax
  04f3e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  04f45	51		 push	 ecx
  04f46	8b cc		 mov	 ecx, esp
  04f48	89 a5 0c fc ff
	ff		 mov	 DWORD PTR $T174384[ebp], esp
  04f4e	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04f51	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  04f55	50		 push	 eax
  04f56	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  04f5b	51		 push	 ecx
  04f5c	8b cc		 mov	 ecx, esp
  04f5e	89 a5 08 fc ff
	ff		 mov	 DWORD PTR $T174385[ebp], esp
  04f64	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  04f67	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  04f6b	50		 push	 eax
  04f6c	e8 00 00 00 00	 call	 ??0CSCI_List@@QAE@G@Z	; CSCI_List::CSCI_List
  04f71	8b 8d 14 fc ff
	ff		 mov	 ecx, DWORD PTR $T174380[ebp]
  04f77	e8 00 00 00 00	 call	 ?Create@CItemListDlg@@QAEHVCSCI_List@@VCSCI_Object@@@Z ; CItemListDlg::Create

; 2681 : 
; 2682 : 		break;

  04f7c	e9 b1 17 00 00	 jmp	 $L166979
$L167574:

; 2685 : 			char* pTitle = *((StringID) arg(2));

  04f81	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  04f84	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  04f88	52		 push	 edx
  04f89	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR $T174387[ebp]
  04f8f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  04f94	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR $T174387[ebp]
  04f9a	50		 push	 eax
  04f9b	8d 8d 04 fc ff
	ff		 lea	 ecx, DWORD PTR $T174386[ebp]
  04fa1	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  04fa6	8b c8		 mov	 ecx, eax
  04fa8	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  04fad	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pTitle$167575[ebp], eax

; 2686 : 
; 2687 : 			CGenericDlg *pDlg = new CGenericDlg();

  04fb3	68 a0 00 00 00	 push	 160			; 000000a0H
  04fb8	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  04fbd	89 85 f8 fb ff
	ff		 mov	 DWORD PTR $T174389[ebp], eax
  04fc3	c7 45 fc 25 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 37 ; 00000025H
  04fca	83 bd f8 fb ff
	ff 00		 cmp	 DWORD PTR $T174389[ebp], 0
  04fd1	74 13		 je	 SHORT $L174390
  04fd3	8b 8d f8 fb ff
	ff		 mov	 ecx, DWORD PTR $T174389[ebp]
  04fd9	e8 00 00 00 00	 call	 ??0CGenericDlg@@QAE@XZ	; CGenericDlg::CGenericDlg
  04fde	89 85 74 f9 ff
	ff		 mov	 DWORD PTR -1676+[ebp], eax
  04fe4	eb 0a		 jmp	 SHORT $L174391
$L174390:
  04fe6	c7 85 74 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1676+[ebp], 0
$L174391:
  04ff0	8b 8d 74 f9 ff
	ff		 mov	 ecx, DWORD PTR -1676+[ebp]
  04ff6	89 8d fc fb ff
	ff		 mov	 DWORD PTR $T174388[ebp], ecx
  04ffc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05003	8b 95 fc fb ff
	ff		 mov	 edx, DWORD PTR $T174388[ebp]
  05009	89 95 70 ff ff
	ff		 mov	 DWORD PTR _pDlg$167579[ebp], edx

; 2688 : //			pDlg->SetPriority( swPriModal );
; 2689 : 			pDlg->Create( pTitle, *((StringID) arg(3)), true );

  0500f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05012	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  05016	51		 push	 ecx
  05017	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T174393[ebp]
  0501d	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  05022	6a 01		 push	 1
  05024	6a 01		 push	 1
  05026	8d 95 f0 fb ff
	ff		 lea	 edx, DWORD PTR $T174393[ebp]
  0502c	52		 push	 edx
  0502d	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR $T174392[ebp]
  05033	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  05038	8b c8		 mov	 ecx, eax
  0503a	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0503f	50		 push	 eax
  05040	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pTitle$167575[ebp]
  05046	50		 push	 eax
  05047	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _pDlg$167579[ebp]
  0504d	e8 00 00 00 00	 call	 ?Create@CGenericDlg@@QAEHPBD0_N1@Z ; CGenericDlg::Create

; 2691 : 
; 2692 : 		break;

  05052	e9 db 16 00 00	 jmp	 $L166979
$L167587:

; 2695 : 			g_pToonSettings->load( g_sCharacterName.c_str(), *( (StringID) g_pCurrentServer->m_hName ) );

  05057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pCurrentServer@@3PAUServerInfo@@A ; g_pCurrentServer
  0505d	51		 push	 ecx
  0505e	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR $T174394[ebp]
  05064	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  05069	8b c8		 mov	 ecx, eax
  0506b	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05070	50		 push	 eax
  05071	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_sCharacterName@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  05076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0507c	50		 push	 eax
  0507d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pToonSettings@@3PAVCToonSettings@@A ; g_pToonSettings
  05083	e8 00 00 00 00	 call	 ?load@CToonSettings@@QAEXPBD0@Z ; CToonSettings::load

; 2696 : 			new CPrivateTellMgr();

  05088	6a 14		 push	 20			; 00000014H
  0508a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0508f	83 c4 04	 add	 esp, 4
  05092	89 85 e4 fb ff
	ff		 mov	 DWORD PTR $T174396[ebp], eax
  05098	c7 45 fc 26 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 38 ; 00000026H
  0509f	83 bd e4 fb ff
	ff 00		 cmp	 DWORD PTR $T174396[ebp], 0
  050a6	74 13		 je	 SHORT $L174397
  050a8	8b 8d e4 fb ff
	ff		 mov	 ecx, DWORD PTR $T174396[ebp]
  050ae	e8 00 00 00 00	 call	 ??0CPrivateTellMgr@@QAE@XZ ; CPrivateTellMgr::CPrivateTellMgr
  050b3	89 85 70 f9 ff
	ff		 mov	 DWORD PTR -1680+[ebp], eax
  050b9	eb 0a		 jmp	 SHORT $L174398
$L174397:
  050bb	c7 85 70 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1680+[ebp], 0
$L174398:
  050c5	8b 95 70 f9 ff
	ff		 mov	 edx, DWORD PTR -1680+[ebp]
  050cb	89 95 e8 fb ff
	ff		 mov	 DWORD PTR $T174395[ebp], edx
  050d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 2697 : 			new CMailBox();

  050d8	6a 28		 push	 40			; 00000028H
  050da	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  050df	83 c4 04	 add	 esp, 4
  050e2	89 85 dc fb ff
	ff		 mov	 DWORD PTR $T174400[ebp], eax
  050e8	c7 45 fc 27 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 39 ; 00000027H
  050ef	83 bd dc fb ff
	ff 00		 cmp	 DWORD PTR $T174400[ebp], 0
  050f6	74 13		 je	 SHORT $L174401
  050f8	8b 8d dc fb ff
	ff		 mov	 ecx, DWORD PTR $T174400[ebp]
  050fe	e8 00 00 00 00	 call	 ??0CMailBox@@QAE@XZ	; CMailBox::CMailBox
  05103	89 85 6c f9 ff
	ff		 mov	 DWORD PTR -1684+[ebp], eax
  05109	eb 0a		 jmp	 SHORT $L174402
$L174401:
  0510b	c7 85 6c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1684+[ebp], 0
$L174402:
  05115	8b 85 6c f9 ff
	ff		 mov	 eax, DWORD PTR -1684+[ebp]
  0511b	89 85 e0 fb ff
	ff		 mov	 DWORD PTR $T174399[ebp], eax
  05121	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 2699 : 
; 2700 : 		break;

  05128	e9 05 16 00 00	 jmp	 $L166979
$L167598:

; 2703 : 			if ( g_pQuests ) 

  0512d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pQuests@@3PAVCQuestDlg@@A, 0 ; g_pQuests
  05134	74 2a		 je	 SHORT $L167599

; 2704 : 				g_pQuests->Create( "Quest List", arg(2), true );

  05136	6a 01		 push	 1
  05138	6a 01		 push	 1
  0513a	51		 push	 ecx
  0513b	8b cc		 mov	 ecx, esp
  0513d	89 a5 d8 fb ff
	ff		 mov	 DWORD PTR $T174403[ebp], esp
  05143	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05146	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  0514a	50		 push	 eax
  0514b	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  05150	68 00 00 00 00	 push	 OFFSET FLAT:$SG167601
  05155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pQuests@@3PAVCQuestDlg@@A ; g_pQuests
  0515b	e8 00 00 00 00	 call	 ?Create@CGenericDlg@@QAEHPBDVCSCI_Object@@_N2@Z ; CGenericDlg::Create
$L167599:

; 2706 : 
; 2707 : 		break;

  05160	e9 cd 15 00 00	 jmp	 $L166979
$L167602:

; 2710 : 			enum {
; 2711 : 				diCreate,
; 2712 : 				diDestroy,
; 2713 : 				diAddObject,
; 2714 : 				diDelObject,
; 2715 : 				diUpdateObject
; 2716 : 			};
; 2717 : 
; 2718 : 			switch ( arg(2) ) {

  05165	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05168	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  0516c	89 95 68 f9 ff
	ff		 mov	 DWORD PTR -1688+[ebp], edx
  05172	83 bd 68 f9 ff
	ff 04		 cmp	 DWORD PTR -1688+[ebp], 4
  05179	0f 87 05 03 00
	00		 ja	 $L167610
  0517f	8b 85 68 f9 ff
	ff		 mov	 eax, DWORD PTR -1688+[ebp]
  05185	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L174600[eax*4]
$L167613:

; 2723 : 					CSCI_WorldObject hObject = (CSCI_WorldObject)arg(3);

  0518c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0518f	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  05193	52		 push	 edx
  05194	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR $T174404[ebp]
  0519a	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0519f	50		 push	 eax
  051a0	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _hObject$167614[ebp]
  051a6	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 2724 : 
; 2725 : 					CInventoryDlg *pDialog = CInventoryDlg::FromObject ( hObject );

  051ab	51		 push	 ecx
  051ac	8b cc		 mov	 ecx, esp
  051ae	89 a5 d0 fb ff
	ff		 mov	 DWORD PTR $T174405[ebp], esp
  051b4	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _hObject$167614[ebp]
  051ba	50		 push	 eax
  051bb	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  051c0	e8 00 00 00 00	 call	 ?FromObject@CInventoryDlg@@SAPAV1@VCSCI_WorldObject@@@Z ; CInventoryDlg::FromObject
  051c5	83 c4 04	 add	 esp, 4
  051c8	89 85 64 ff ff
	ff		 mov	 DWORD PTR _pDialog$167617[ebp], eax

; 2726 : 
; 2727 : 					if ( NULL == pDialog ) {

  051ce	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _pDialog$167617[ebp], 0
  051d5	0f 85 8b 00 00
	00		 jne	 $L167619

; 2728 : 						pDialog = new CInventoryDlg;

  051db	68 a4 00 00 00	 push	 164			; 000000a4H
  051e0	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  051e5	89 85 c8 fb ff
	ff		 mov	 DWORD PTR $T174407[ebp], eax
  051eb	c7 45 fc 28 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 40 ; 00000028H
  051f2	83 bd c8 fb ff
	ff 00		 cmp	 DWORD PTR $T174407[ebp], 0
  051f9	74 13		 je	 SHORT $L174408
  051fb	8b 8d c8 fb ff
	ff		 mov	 ecx, DWORD PTR $T174407[ebp]
  05201	e8 00 00 00 00	 call	 ??0CInventoryDlg@@QAE@XZ ; CInventoryDlg::CInventoryDlg
  05206	89 85 64 f9 ff
	ff		 mov	 DWORD PTR -1692+[ebp], eax
  0520c	eb 0a		 jmp	 SHORT $L174409
$L174408:
  0520e	c7 85 64 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1692+[ebp], 0
$L174409:
  05218	8b 8d 64 f9 ff
	ff		 mov	 ecx, DWORD PTR -1692+[ebp]
  0521e	89 8d cc fb ff
	ff		 mov	 DWORD PTR $T174406[ebp], ecx
  05224	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0522b	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR $T174406[ebp]
  05231	89 95 64 ff ff
	ff		 mov	 DWORD PTR _pDialog$167617[ebp], edx

; 2729 : 						pDialog->Create ( (CSCI_WorldObject)arg(3) );

  05237	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0523a	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  0523e	51		 push	 ecx
  0523f	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T174411[ebp]
  05245	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0524a	51		 push	 ecx
  0524b	8b cc		 mov	 ecx, esp
  0524d	89 a5 c4 fb ff
	ff		 mov	 DWORD PTR $T174410[ebp], esp
  05253	50		 push	 eax
  05254	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  05259	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _pDialog$167617[ebp]
  0525f	e8 00 00 00 00	 call	 ?Create@CInventoryDlg@@QAEHVCSCI_WorldObject@@@Z ; CInventoryDlg::Create

; 2730 : 					} else {

  05264	eb 0b		 jmp	 SHORT $L167627
$L167619:

; 2731 : 						pDialog->BringWindowToTop();

  05266	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _pDialog$167617[ebp]
  0526c	e8 00 00 00 00	 call	 ?BringWindowToTop@CWnd@@QAEXXZ ; CWnd::BringWindowToTop
$L167627:

; 2734 : 
; 2735 : 				break;

  05271	e9 0e 02 00 00	 jmp	 $L167610
$L167628:

; 2741 : 					CSCI_WorldObject hObject = (CSCI_WorldObject)arg(3);

  05276	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05279	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  0527d	50		 push	 eax
  0527e	8d 8d bc fb ff
	ff		 lea	 ecx, DWORD PTR $T174412[ebp]
  05284	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  05289	50		 push	 eax
  0528a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _hObject$167629[ebp]
  05290	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 2742 : 
; 2743 : 					CInventoryDlg *pDialog = CInventoryDlg::FromObject ( hObject );

  05295	51		 push	 ecx
  05296	8b cc		 mov	 ecx, esp
  05298	89 a5 b8 fb ff
	ff		 mov	 DWORD PTR $T174413[ebp], esp
  0529e	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _hObject$167629[ebp]
  052a4	52		 push	 edx
  052a5	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  052aa	e8 00 00 00 00	 call	 ?FromObject@CInventoryDlg@@SAPAV1@VCSCI_WorldObject@@@Z ; CInventoryDlg::FromObject
  052af	83 c4 04	 add	 esp, 4
  052b2	89 85 5c ff ff
	ff		 mov	 DWORD PTR _pDialog$167632[ebp], eax

; 2744 : 
; 2745 : 					// only destroy if exists...
; 2746 : 					if ( NULL != pDialog ) {

  052b8	83 bd 5c ff ff
	ff 00		 cmp	 DWORD PTR _pDialog$167632[ebp], 0
  052bf	74 16		 je	 SHORT $L167634

; 2747 : 						pDialog->CloseSelf();

  052c1	6a 00		 push	 0
  052c3	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _pDialog$167632[ebp]
  052c9	8b 10		 mov	 edx, DWORD PTR [eax]
  052cb	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pDialog$167632[ebp]
  052d1	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L167634:

; 2750 : 
; 2751 : 				break;

  052d7	e9 a8 01 00 00	 jmp	 $L167610
$L167635:

; 2757 : 					CSCI_WorldObject hOwner = (CSCI_WorldObject)arg(3);

  052dc	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  052df	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  052e3	51		 push	 ecx
  052e4	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T174414[ebp]
  052ea	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  052ef	50		 push	 eax
  052f0	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _hOwner$167636[ebp]
  052f6	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 2758 : 					CSCI_WorldObject hObject = (CSCI_WorldObject)arg(4);

  052fb	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  052fe	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  05302	50		 push	 eax
  05303	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T174415[ebp]
  05309	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0530e	50		 push	 eax
  0530f	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _hObject$167639[ebp]
  05315	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 2759 : 
; 2760 : 					CInventoryDlg *pDialog = CInventoryDlg::FromObject ( hOwner );

  0531a	51		 push	 ecx
  0531b	8b cc		 mov	 ecx, esp
  0531d	89 a5 ac fb ff
	ff		 mov	 DWORD PTR $T174416[ebp], esp
  05323	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR _hOwner$167636[ebp]
  05329	52		 push	 edx
  0532a	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  0532f	e8 00 00 00 00	 call	 ?FromObject@CInventoryDlg@@SAPAV1@VCSCI_WorldObject@@@Z ; CInventoryDlg::FromObject
  05334	83 c4 04	 add	 esp, 4
  05337	89 85 54 ff ff
	ff		 mov	 DWORD PTR _pDialog$167642[ebp], eax

; 2761 : 
; 2762 : 					// only add if a dialog already exists
; 2763 : 					if ( NULL != pDialog ) {

  0533d	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _pDialog$167642[ebp], 0
  05344	74 20		 je	 SHORT $L167644

; 2764 : 						pDialog->AddObject ( hObject );

  05346	51		 push	 ecx
  05347	8b cc		 mov	 ecx, esp
  05349	89 a5 a8 fb ff
	ff		 mov	 DWORD PTR $T174417[ebp], esp
  0534f	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _hObject$167639[ebp]
  05355	50		 push	 eax
  05356	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  0535b	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _pDialog$167642[ebp]
  05361	e8 00 00 00 00	 call	 ?AddObject@CInventoryDlg@@QAEXVCSCI_WorldObject@@@Z ; CInventoryDlg::AddObject
$L167644:

; 2767 : 
; 2768 : 				break;

  05366	e9 19 01 00 00	 jmp	 $L167610
$L167646:

; 2774 : 					CSCI_WorldObject hOwner = (CSCI_WorldObject)arg(3);

  0536b	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0536e	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  05372	52		 push	 edx
  05373	8d 8d a4 fb ff
	ff		 lea	 ecx, DWORD PTR $T174418[ebp]
  05379	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0537e	50		 push	 eax
  0537f	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _hOwner$167647[ebp]
  05385	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 2775 : 					CSCI_WorldObject hObject = (CSCI_WorldObject)arg(4);

  0538a	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0538d	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  05391	51		 push	 ecx
  05392	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR $T174419[ebp]
  05398	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0539d	50		 push	 eax
  0539e	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _hObject$167650[ebp]
  053a4	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 2776 : 
; 2777 : 					CInventoryDlg *pDialog = CInventoryDlg::FromObject ( hOwner );

  053a9	51		 push	 ecx
  053aa	8b cc		 mov	 ecx, esp
  053ac	89 a5 9c fb ff
	ff		 mov	 DWORD PTR $T174420[ebp], esp
  053b2	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _hOwner$167647[ebp]
  053b8	52		 push	 edx
  053b9	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  053be	e8 00 00 00 00	 call	 ?FromObject@CInventoryDlg@@SAPAV1@VCSCI_WorldObject@@@Z ; CInventoryDlg::FromObject
  053c3	83 c4 04	 add	 esp, 4
  053c6	89 85 48 ff ff
	ff		 mov	 DWORD PTR _pDialog$167653[ebp], eax

; 2778 : 
; 2779 : 					// only delete if a dialog already exists
; 2780 : 					if ( NULL != pDialog ) {

  053cc	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _pDialog$167653[ebp], 0
  053d3	74 20		 je	 SHORT $L167655

; 2781 : 						pDialog->DelObject ( hObject );

  053d5	51		 push	 ecx
  053d6	8b cc		 mov	 ecx, esp
  053d8	89 a5 98 fb ff
	ff		 mov	 DWORD PTR $T174421[ebp], esp
  053de	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _hObject$167650[ebp]
  053e4	50		 push	 eax
  053e5	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  053ea	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _pDialog$167653[ebp]
  053f0	e8 00 00 00 00	 call	 ?DelObject@CInventoryDlg@@QAEXVCSCI_WorldObject@@@Z ; CInventoryDlg::DelObject
$L167655:

; 2784 : 
; 2785 : 				break;

  053f5	e9 8a 00 00 00	 jmp	 $L167610
$L167657:

; 2791 : 					CSCI_WorldObject hOwner = (CSCI_WorldObject)arg(3);

  053fa	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  053fd	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  05401	52		 push	 edx
  05402	8d 8d 94 fb ff
	ff		 lea	 ecx, DWORD PTR $T174422[ebp]
  05408	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0540d	50		 push	 eax
  0540e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _hOwner$167658[ebp]
  05414	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 2792 : 					CSCI_WorldObject hObject = (CSCI_WorldObject)arg(4);

  05419	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0541c	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  05420	51		 push	 ecx
  05421	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR $T174423[ebp]
  05427	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0542c	50		 push	 eax
  0542d	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _hObject$167661[ebp]
  05433	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 2793 : 
; 2794 : 					CInventoryDlg *pDialog = CInventoryDlg::FromObject ( hOwner );

  05438	51		 push	 ecx
  05439	8b cc		 mov	 ecx, esp
  0543b	89 a5 8c fb ff
	ff		 mov	 DWORD PTR $T174424[ebp], esp
  05441	8d 95 38 ff ff
	ff		 lea	 edx, DWORD PTR _hOwner$167658[ebp]
  05447	52		 push	 edx
  05448	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  0544d	e8 00 00 00 00	 call	 ?FromObject@CInventoryDlg@@SAPAV1@VCSCI_WorldObject@@@Z ; CInventoryDlg::FromObject
  05452	83 c4 04	 add	 esp, 4
  05455	89 85 3c ff ff
	ff		 mov	 DWORD PTR _pDialog$167664[ebp], eax

; 2795 : 
; 2796 : 					// only update if a dialog already exists
; 2797 : 					if ( NULL != pDialog ) {

  0545b	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _pDialog$167664[ebp], 0
  05462	74 20		 je	 SHORT $L167666

; 2798 : 						pDialog->UpdateObject ( hObject );

  05464	51		 push	 ecx
  05465	8b cc		 mov	 ecx, esp
  05467	89 a5 88 fb ff
	ff		 mov	 DWORD PTR $T174425[ebp], esp
  0546d	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _hObject$167661[ebp]
  05473	50		 push	 eax
  05474	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  05479	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pDialog$167664[ebp]
  0547f	e8 00 00 00 00	 call	 ?UpdateObject@CInventoryDlg@@QAEXVCSCI_WorldObject@@@Z ; CInventoryDlg::UpdateObject
$L167666:
$L167610:

; 2805 : 
; 2806 : 		break;

  05484	e9 a9 12 00 00	 jmp	 $L166979
$L167668:

; 2809 : 			enum {
; 2810 : 				dgdAdd,
; 2811 : 				dgdDelete,
; 2812 : 				dgdClose,
; 2813 : 				dgdQuestion,
; 2814 : 			};
; 2815 : 
; 2816 : 			switch ( arg(2) ) {

  05489	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0548c	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  05490	89 95 60 f9 ff
	ff		 mov	 DWORD PTR -1696+[ebp], edx
  05496	83 bd 60 f9 ff
	ff 03		 cmp	 DWORD PTR -1696+[ebp], 3
  0549d	0f 87 8b 01 00
	00		 ja	 $L167675
  054a3	8b 85 60 f9 ff
	ff		 mov	 eax, DWORD PTR -1696+[ebp]
  054a9	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L174601[eax*4]
$L167678:

; 2817 : 				case dgdAdd:
; 2818 : 					if ( g_pGroupListWnd )

  054b0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pGroupListWnd@@3PAVCGroupListWnd@@A, 0 ; g_pGroupListWnd
  054b7	74 21		 je	 SHORT $L167679

; 2819 : 						g_pGroupListWnd->Add( arg(3) );

  054b9	51		 push	 ecx
  054ba	8b cc		 mov	 ecx, esp
  054bc	89 a5 84 fb ff
	ff		 mov	 DWORD PTR $T174426[ebp], esp
  054c2	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  054c5	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  054c9	50		 push	 eax
  054ca	e8 00 00 00 00	 call	 ??0CSCI_GroupMember@@QAE@G@Z ; CSCI_GroupMember::CSCI_GroupMember
  054cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pGroupListWnd@@3PAVCGroupListWnd@@A ; g_pGroupListWnd
  054d5	e8 00 00 00 00	 call	 ?Add@CGroupListWnd@@QAEXVCSCI_GroupMember@@@Z ; CGroupListWnd::Add
$L167679:

; 2820 : 
; 2821 : 				break;

  054da	e9 4f 01 00 00	 jmp	 $L167675
$L167681:

; 2822 : 
; 2823 : 				case dgdDelete:
; 2824 : 					if ( g_pGroupListWnd )

  054df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pGroupListWnd@@3PAVCGroupListWnd@@A, 0 ; g_pGroupListWnd
  054e6	74 21		 je	 SHORT $L167682

; 2825 : 						g_pGroupListWnd->Delete( arg(3) );

  054e8	51		 push	 ecx
  054e9	8b cc		 mov	 ecx, esp
  054eb	89 a5 80 fb ff
	ff		 mov	 DWORD PTR $T174427[ebp], esp
  054f1	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  054f4	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  054f8	50		 push	 eax
  054f9	e8 00 00 00 00	 call	 ??0CSCI_GroupMember@@QAE@G@Z ; CSCI_GroupMember::CSCI_GroupMember
  054fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pGroupListWnd@@3PAVCGroupListWnd@@A ; g_pGroupListWnd
  05504	e8 00 00 00 00	 call	 ?Delete@CGroupListWnd@@QAEXVCSCI_GroupMember@@@Z ; CGroupListWnd::Delete
$L167682:

; 2826 : 
; 2827 : 				break;

  05509	e9 20 01 00 00	 jmp	 $L167675
$L167684:

; 2828 : 
; 2829 : 				case dgdClose:
; 2830 : 					if ( g_pGroupListWnd )

  0550e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pGroupListWnd@@3PAVCGroupListWnd@@A, 0 ; g_pGroupListWnd
  05515	74 16		 je	 SHORT $L167685

; 2831 : 						g_pGroupListWnd->CloseSelf();

  05517	6a 00		 push	 0
  05519	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pGroupListWnd@@3PAVCGroupListWnd@@A ; g_pGroupListWnd
  0551f	8b 11		 mov	 edx, DWORD PTR [ecx]
  05521	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pGroupListWnd@@3PAVCGroupListWnd@@A ; g_pGroupListWnd
  05527	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L167685:

; 2832 : 
; 2833 : 				break;

  0552d	e9 fc 00 00 00	 jmp	 $L167675
$L167686:

; 2834 : 
; 2835 : 				case dgdQuestion:
; 2836 : 					if ( g_pGroupQuestion ) {

  05532	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pGroupQuestion@@3PAVCGroupQuestionDlg@@A, 0 ; g_pGroupQuestion
  05539	74 1a		 je	 SHORT $L167687

; 2837 : 						g_pGroupQuestion->CloseSelf();

  0553b	6a 00		 push	 0
  0553d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pGroupQuestion@@3PAVCGroupQuestionDlg@@A ; g_pGroupQuestion
  05542	8b 10		 mov	 edx, DWORD PTR [eax]
  05544	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pGroupQuestion@@3PAVCGroupQuestionDlg@@A ; g_pGroupQuestion
  0554a	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 2838 : 					} else {

  05550	e9 d9 00 00 00	 jmp	 $L167690
$L167687:

; 2839 : 						CSCI_LongInt hLong = arg(3);

  05555	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05558	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  0555c	51		 push	 ecx
  0555d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _hLong$167689[ebp]
  05563	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt

; 2840 : 
; 2841 : 						if ( hLong.IsObject() ) {

  05568	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _hLong$167689[ebp]
  0556e	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  05573	85 c0		 test	 eax, eax
  05575	0f 84 b3 00 00
	00		 je	 $L167690

; 2842 : 							long nValue = hLong.get_nValue();

  0557b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _hLong$167689[ebp]
  05581	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  05586	89 85 30 ff ff
	ff		 mov	 DWORD PTR _nValue$167691[ebp], eax

; 2843 : 							(new CGroupQuestionDlg( nValue ))->Create( "Group Join", * ((StringID) arg(4)), "No", "Yes", true, true );

  0558c	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0558f	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  05593	50		 push	 eax
  05594	8d 8d 70 fb ff
	ff		 lea	 ecx, DWORD PTR $T174433[ebp]
  0559a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0559f	68 bc 00 00 00	 push	 188			; 000000bcH
  055a4	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  055a9	89 85 78 fb ff
	ff		 mov	 DWORD PTR $T174429[ebp], eax
  055af	c7 45 fc 29 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 41 ; 00000029H
  055b6	83 bd 78 fb ff
	ff 00		 cmp	 DWORD PTR $T174429[ebp], 0
  055bd	74 1a		 je	 SHORT $L174430
  055bf	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _nValue$167691[ebp]
  055c5	51		 push	 ecx
  055c6	8b 8d 78 fb ff
	ff		 mov	 ecx, DWORD PTR $T174429[ebp]
  055cc	e8 00 00 00 00	 call	 ??0CGroupQuestionDlg@@QAE@H@Z ; CGroupQuestionDlg::CGroupQuestionDlg
  055d1	89 85 5c f9 ff
	ff		 mov	 DWORD PTR -1700+[ebp], eax
  055d7	eb 0a		 jmp	 SHORT $L174431
$L174430:
  055d9	c7 85 5c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1700+[ebp], 0
$L174431:
  055e3	8b 95 5c f9 ff
	ff		 mov	 edx, DWORD PTR -1700+[ebp]
  055e9	89 95 7c fb ff
	ff		 mov	 DWORD PTR $T174428[ebp], edx
  055ef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  055f6	6a 01		 push	 1
  055f8	6a 01		 push	 1
  055fa	68 00 00 00 00	 push	 OFFSET FLAT:$SG167699
  055ff	68 00 00 00 00	 push	 OFFSET FLAT:$SG167700
  05604	8d 85 70 fb ff
	ff		 lea	 eax, DWORD PTR $T174433[ebp]
  0560a	50		 push	 eax
  0560b	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR $T174432[ebp]
  05611	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  05616	8b c8		 mov	 ecx, eax
  05618	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  0561d	50		 push	 eax
  0561e	68 00 00 00 00	 push	 OFFSET FLAT:$SG167701
  05623	8b 8d 7c fb ff
	ff		 mov	 ecx, DWORD PTR $T174428[ebp]
  05629	e8 00 00 00 00	 call	 ?Create@CGroupQuestionDlg@@QAEHPAD000_N1@Z ; CGroupQuestionDlg::Create
$L167690:
$L167675:

; 2850 : 
; 2851 : 		break;

  0562e	e9 ff 10 00 00	 jmp	 $L166979
$L167702:

; 2854 : 			enum {
; 2855 : 				ddStart,
; 2856 : 				ddEnd
; 2857 : 			};
; 2858 : 
; 2859 : 			switch ( arg(2) ) {

  05633	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05636	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  0563a	89 95 58 f9 ff
	ff		 mov	 DWORD PTR -1704+[ebp], edx
  05640	83 bd 58 f9 ff
	ff 00		 cmp	 DWORD PTR -1704+[ebp], 0
  05647	74 12		 je	 SHORT $L167710
  05649	83 bd 58 f9 ff
	ff 01		 cmp	 DWORD PTR -1704+[ebp], 1
  05650	0f 84 c4 00 00
	00		 je	 $L167721
  05656	e9 d3 00 00 00	 jmp	 $L167707
$L167710:

; 2861 : 					if ( g_pDragDropMgr ) {

  0565b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pDragDropMgr@@3PAVCDragDropMgr@@A, 0 ; g_pDragDropMgr
  05662	0f 84 b0 00 00
	00		 je	 $L167711

; 2862 : 						CWorldObjectDraggable *pDragObj = new CWorldObjectDraggable ( (CSCI_WorldObject)arg(3), CPoint ( -arg(4), -arg(5) ) ); 

  05668	6a 14		 push	 20			; 00000014H
  0566a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0566f	83 c4 04	 add	 esp, 4
  05672	89 85 68 fb ff
	ff		 mov	 DWORD PTR $T174435[ebp], eax
  05678	c7 45 fc 2a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 42 ; 0000002aH
  0567f	83 bd 68 fb ff
	ff 00		 cmp	 DWORD PTR $T174435[ebp], 0
  05686	74 55		 je	 SHORT $L174439
  05688	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0568b	0f bf 48 0a	 movsx	 ecx, WORD PTR [eax+10]
  0568f	f7 d9		 neg	 ecx
  05691	51		 push	 ecx
  05692	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05695	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  05699	f7 d8		 neg	 eax
  0569b	50		 push	 eax
  0569c	8d 8d 60 fb ff
	ff		 lea	 ecx, DWORD PTR $T174436[ebp]
  056a2	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  056a7	50		 push	 eax
  056a8	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  056ab	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  056af	52		 push	 edx
  056b0	8d 8d 58 fb ff
	ff		 lea	 ecx, DWORD PTR $T174438[ebp]
  056b6	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  056bb	51		 push	 ecx
  056bc	8b cc		 mov	 ecx, esp
  056be	89 a5 5c fb ff
	ff		 mov	 DWORD PTR $T174437[ebp], esp
  056c4	50		 push	 eax
  056c5	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  056ca	8b 8d 68 fb ff
	ff		 mov	 ecx, DWORD PTR $T174435[ebp]
  056d0	e8 00 00 00 00	 call	 ??0CWorldObjectDraggable@@QAE@VCSCI_WorldObject@@AAVCPoint@@@Z ; CWorldObjectDraggable::CWorldObjectDraggable
  056d5	89 85 54 f9 ff
	ff		 mov	 DWORD PTR -1708+[ebp], eax
  056db	eb 0a		 jmp	 SHORT $L174440
$L174439:
  056dd	c7 85 54 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1708+[ebp], 0
$L174440:
  056e7	8b 85 54 f9 ff
	ff		 mov	 eax, DWORD PTR -1708+[ebp]
  056ed	89 85 6c fb ff
	ff		 mov	 DWORD PTR $T174434[ebp], eax
  056f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  056fa	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR $T174434[ebp]
  05700	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _pDragObj$167712[ebp], ecx

; 2863 : 						g_pDragDropMgr->StartDrag ( pDragObj );

  05706	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _pDragObj$167712[ebp]
  0570c	52		 push	 edx
  0570d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pDragDropMgr@@3PAVCDragDropMgr@@A ; g_pDragDropMgr
  05713	e8 00 00 00 00	 call	 ?StartDrag@CDragDropMgr@@QAEXPAVCDraggable@@@Z ; CDragDropMgr::StartDrag
$L167711:

; 2866 : 
; 2867 : 				break;

  05718	eb 14		 jmp	 SHORT $L167707
$L167721:

; 2870 : 					if ( g_pDragDropMgr )

  0571a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pDragDropMgr@@3PAVCDragDropMgr@@A, 0 ; g_pDragDropMgr
  05721	74 0b		 je	 SHORT $L167722

; 2871 : 						g_pDragDropMgr->StopDrag();

  05723	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pDragDropMgr@@3PAVCDragDropMgr@@A ; g_pDragDropMgr
  05729	e8 00 00 00 00	 call	 ?StopDrag@CDragDropMgr@@QAEXXZ ; CDragDropMgr::StopDrag
$L167722:
$L167707:

; 2877 : 
; 2878 : 		break;

  0572e	e9 ff 0f 00 00	 jmp	 $L166979
$L167723:

; 2887 : 			{

  05733	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05736	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  0573a	89 8d 50 f9 ff
	ff		 mov	 DWORD PTR -1712+[ebp], ecx
  05740	83 bd 50 f9 ff
	ff 00		 cmp	 DWORD PTR -1712+[ebp], 0
  05747	74 12		 je	 SHORT $L167731
  05749	83 bd 50 f9 ff
	ff 01		 cmp	 DWORD PTR -1712+[ebp], 1
  05750	0f 84 99 00 00
	00		 je	 $L167738
  05756	e9 b2 00 00 00	 jmp	 $L167728
$L167731:

; 2889 : 					g_pWindowMgr->CloseAllTransientWindows();

  0575b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A ; g_pWindowMgr
  05761	e8 00 00 00 00	 call	 ?CloseAllTransientWindows@CWindowMgr@@QAEXXZ ; CWindowMgr::CloseAllTransientWindows

; 2890 : 
; 2891 : 					(new CBuyDlg( arg(3) ))->Create( arg(4) );

  05766	68 d0 00 00 00	 push	 208			; 000000d0H
  0576b	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  05770	89 85 50 fb ff
	ff		 mov	 DWORD PTR $T174442[ebp], eax
  05776	c7 45 fc 2b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 43 ; 0000002bH
  0577d	83 bd 50 fb ff
	ff 00		 cmp	 DWORD PTR $T174442[ebp], 0
  05784	74 29		 je	 SHORT $L174444
  05786	51		 push	 ecx
  05787	8b cc		 mov	 ecx, esp
  05789	89 a5 4c fb ff
	ff		 mov	 DWORD PTR $T174443[ebp], esp
  0578f	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05792	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  05796	50		 push	 eax
  05797	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  0579c	8b 8d 50 fb ff
	ff		 mov	 ecx, DWORD PTR $T174442[ebp]
  057a2	e8 00 00 00 00	 call	 ??0CBuyDlg@@QAE@VCSCI_Object@@@Z ; CBuyDlg::CBuyDlg
  057a7	89 85 4c f9 ff
	ff		 mov	 DWORD PTR -1716+[ebp], eax
  057ad	eb 0a		 jmp	 SHORT $L174445
$L174444:
  057af	c7 85 4c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1716+[ebp], 0
$L174445:
  057b9	8b 8d 4c f9 ff
	ff		 mov	 ecx, DWORD PTR -1716+[ebp]
  057bf	89 8d 54 fb ff
	ff		 mov	 DWORD PTR $T174441[ebp], ecx
  057c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  057cc	51		 push	 ecx
  057cd	8b cc		 mov	 ecx, esp
  057cf	89 a5 48 fb ff
	ff		 mov	 DWORD PTR $T174446[ebp], esp
  057d5	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  057d8	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  057dc	50		 push	 eax
  057dd	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  057e2	8b 8d 54 fb ff
	ff		 mov	 ecx, DWORD PTR $T174441[ebp]
  057e8	e8 00 00 00 00	 call	 ?Create@CBuyDlg@@QAEHVCSCI_Object@@@Z ; CBuyDlg::Create

; 2893 : 
; 2894 : 				break;

  057ed	eb 1e		 jmp	 SHORT $L167728
$L167738:

; 2897 : 					CBuyDlg::HandleMsg( arg(3) );

  057ef	51		 push	 ecx
  057f0	8b cc		 mov	 ecx, esp
  057f2	89 a5 44 fb ff
	ff		 mov	 DWORD PTR $T174447[ebp], esp
  057f8	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  057fb	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  057ff	50		 push	 eax
  05800	e8 00 00 00 00	 call	 ??0CSCI_NetMsg@@QAE@G@Z	; CSCI_NetMsg::CSCI_NetMsg
  05805	e8 00 00 00 00	 call	 ?HandleMsg@CBuyDlg@@SAXVCSCI_NetMsg@@@Z ; CBuyDlg::HandleMsg
  0580a	83 c4 04	 add	 esp, 4
$L167728:

; 2903 : 
; 2904 : 		break;

  0580d	e9 20 0f 00 00	 jmp	 $L166979
$L167740:

; 2917 : 			{

  05812	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05815	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  05819	89 95 48 f9 ff
	ff		 mov	 DWORD PTR -1720+[ebp], edx
  0581f	83 bd 48 f9 ff
	ff 00		 cmp	 DWORD PTR -1720+[ebp], 0
  05826	74 1f		 je	 SHORT $L167749
  05828	83 bd 48 f9 ff
	ff 01		 cmp	 DWORD PTR -1720+[ebp], 1
  0582f	0f 84 e2 00 00
	00		 je	 $L167761
  05835	83 bd 48 f9 ff
	ff 02		 cmp	 DWORD PTR -1720+[ebp], 2
  0583c	0f 84 20 01 00
	00		 je	 $L167766
  05842	e9 44 01 00 00	 jmp	 $L167746
$L167749:

; 2919 : 					if ( !g_pLogInDlg )

  05847	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pLogInDlg@@3PAVCLogInDlg@@A, 0 ; g_pLogInDlg
  0584e	0f 85 c1 00 00
	00		 jne	 $L167750

; 2921 : 						g_pLogInDlg = new CLogInDlg;

  05854	68 98 00 00 00	 push	 152			; 00000098H
  05859	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0585e	89 85 3c fb ff
	ff		 mov	 DWORD PTR $T174449[ebp], eax
  05864	c7 45 fc 2c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 44 ; 0000002cH
  0586b	83 bd 3c fb ff
	ff 00		 cmp	 DWORD PTR $T174449[ebp], 0
  05872	74 13		 je	 SHORT $L174450
  05874	8b 8d 3c fb ff
	ff		 mov	 ecx, DWORD PTR $T174449[ebp]
  0587a	e8 00 00 00 00	 call	 ??0CLogInDlg@@QAE@XZ	; CLogInDlg::CLogInDlg
  0587f	89 85 44 f9 ff
	ff		 mov	 DWORD PTR -1724+[ebp], eax
  05885	eb 0a		 jmp	 SHORT $L174451
$L174450:
  05887	c7 85 44 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1724+[ebp], 0
$L174451:
  05891	8b 85 44 f9 ff
	ff		 mov	 eax, DWORD PTR -1724+[ebp]
  05897	89 85 40 fb ff
	ff		 mov	 DWORD PTR $T174448[ebp], eax
  0589d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  058a4	8b 8d 40 fb ff
	ff		 mov	 ecx, DWORD PTR $T174448[ebp]
  058aa	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_pLogInDlg@@3PAVCLogInDlg@@A, ecx ; g_pLogInDlg

; 2922 : 						g_pLogInDlg->Create( *((StringID) arg(3)), *((StringID) arg(4)) );

  058b0	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  058b3	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  058b7	50		 push	 eax
  058b8	8d 8d 34 fb ff
	ff		 lea	 ecx, DWORD PTR $T174453[ebp]
  058be	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  058c3	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  058c6	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  058ca	52		 push	 edx
  058cb	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T174455[ebp]
  058d1	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  058d6	8d 85 34 fb ff
	ff		 lea	 eax, DWORD PTR $T174453[ebp]
  058dc	50		 push	 eax
  058dd	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR $T174452[ebp]
  058e3	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  058e8	8b c8		 mov	 ecx, eax
  058ea	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  058ef	50		 push	 eax
  058f0	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T174455[ebp]
  058f6	51		 push	 ecx
  058f7	8d 8d 30 fb ff
	ff		 lea	 ecx, DWORD PTR $T174454[ebp]
  058fd	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  05902	8b c8		 mov	 ecx, eax
  05904	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05909	50		 push	 eax
  0590a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogInDlg@@3PAVCLogInDlg@@A ; g_pLogInDlg
  05910	e8 00 00 00 00	 call	 ?Create@CLogInDlg@@QAEHPAD0@Z ; CLogInDlg::Create
$L167750:

; 2925 : 				break;

  05915	eb 74		 jmp	 SHORT $L167746
$L167761:

; 2928 : 					if ( g_pLogInDlg )

  05917	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pLogInDlg@@3PAVCLogInDlg@@A, 0 ; g_pLogInDlg
  0591e	74 40		 je	 SHORT $L167762

; 2930 : 						g_pLogInDlg->AddText( *((StringID) arg(3)), arg(4) );

  05920	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05923	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  05927	50		 push	 eax
  05928	8d 8d 24 fb ff
	ff		 lea	 ecx, DWORD PTR $T174457[ebp]
  0592e	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  05933	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05936	0f bf 51 08	 movsx	 edx, WORD PTR [ecx+8]
  0593a	52		 push	 edx
  0593b	8d 85 24 fb ff
	ff		 lea	 eax, DWORD PTR $T174457[ebp]
  05941	50		 push	 eax
  05942	8d 8d 28 fb ff
	ff		 lea	 ecx, DWORD PTR $T174456[ebp]
  05948	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0594d	8b c8		 mov	 ecx, eax
  0594f	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05954	50		 push	 eax
  05955	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogInDlg@@3PAVCLogInDlg@@A ; g_pLogInDlg
  0595b	e8 00 00 00 00	 call	 ?AddText@CLogInDlg@@QAEXPADH@Z ; CLogInDlg::AddText
$L167762:

; 2933 : 				break;

  05960	eb 29		 jmp	 SHORT $L167746
$L167766:

; 2936 : 					if ( g_pLogInDlg )

  05962	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pLogInDlg@@3PAVCLogInDlg@@A, 0 ; g_pLogInDlg
  05969	74 20		 je	 SHORT $L167767

; 2938 :  						g_pLogInDlg->CloseSelf( false );

  0596b	6a 00		 push	 0
  0596d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogInDlg@@3PAVCLogInDlg@@A ; g_pLogInDlg
  05973	8b 11		 mov	 edx, DWORD PTR [ecx]
  05975	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogInDlg@@3PAVCLogInDlg@@A ; g_pLogInDlg
  0597b	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 2939 :                         g_pLogInDlg = NULL;

  05981	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pLogInDlg@@3PAVCLogInDlg@@A, 0 ; g_pLogInDlg
$L167767:
$L167746:

; 2945 : 
; 2946 : 		break;	

  0598b	e9 a2 0d 00 00	 jmp	 $L166979
$L167768:

; 2963 : 			{

  05990	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05993	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  05997	89 8d 40 f9 ff
	ff		 mov	 DWORD PTR -1728+[ebp], ecx
  0599d	83 bd 40 f9 ff
	ff 07		 cmp	 DWORD PTR -1728+[ebp], 7
  059a4	0f 87 be 02 00
	00		 ja	 $L167779
  059aa	8b 95 40 f9 ff
	ff		 mov	 edx, DWORD PTR -1728+[ebp]
  059b0	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L174602[edx*4]
$L167782:

; 2965 : 
; 2966 : 					if ( !g_pTalkDlg )

  059b7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, 0 ; g_pTalkDlg
  059be	75 5c		 jne	 SHORT $L167783

; 2968 : 						g_pTalkDlg = new CTalkDlg;

  059c0	68 14 01 00 00	 push	 276			; 00000114H
  059c5	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  059ca	89 85 1c fb ff
	ff		 mov	 DWORD PTR $T174459[ebp], eax
  059d0	c7 45 fc 2d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 45 ; 0000002dH
  059d7	83 bd 1c fb ff
	ff 00		 cmp	 DWORD PTR $T174459[ebp], 0
  059de	74 13		 je	 SHORT $L174460
  059e0	8b 8d 1c fb ff
	ff		 mov	 ecx, DWORD PTR $T174459[ebp]
  059e6	e8 00 00 00 00	 call	 ??0CTalkDlg@@QAE@XZ	; CTalkDlg::CTalkDlg
  059eb	89 85 3c f9 ff
	ff		 mov	 DWORD PTR -1732+[ebp], eax
  059f1	eb 0a		 jmp	 SHORT $L174461
$L174460:
  059f3	c7 85 3c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1732+[ebp], 0
$L174461:
  059fd	8b 85 3c f9 ff
	ff		 mov	 eax, DWORD PTR -1732+[ebp]
  05a03	89 85 20 fb ff
	ff		 mov	 DWORD PTR $T174458[ebp], eax
  05a09	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05a10	8b 8d 20 fb ff
	ff		 mov	 ecx, DWORD PTR $T174458[ebp]
  05a16	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, ecx ; g_pTalkDlg
$L167783:

; 2971 : 				break;

  05a1c	e9 47 02 00 00	 jmp	 $L167779
$L167788:

; 2974 : 
; 2975 : 					if ( g_pTalkDlg )

  05a21	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, 0 ; g_pTalkDlg
  05a28	74 6d		 je	 SHORT $L167789

; 2977 : 						g_pTalkDlg->Create( *((StringID) arg(3)), *((StringID) arg(4)), arg(5));

  05a2a	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05a2d	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  05a31	50		 push	 eax
  05a32	8d 8d 14 fb ff
	ff		 lea	 ecx, DWORD PTR $T174463[ebp]
  05a38	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  05a3d	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05a40	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  05a44	52		 push	 edx
  05a45	8d 8d 0c fb ff
	ff		 lea	 ecx, DWORD PTR $T174465[ebp]
  05a4b	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  05a50	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05a53	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  05a57	51		 push	 ecx
  05a58	8d 95 14 fb ff
	ff		 lea	 edx, DWORD PTR $T174463[ebp]
  05a5e	52		 push	 edx
  05a5f	8d 8d 18 fb ff
	ff		 lea	 ecx, DWORD PTR $T174462[ebp]
  05a65	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  05a6a	8b c8		 mov	 ecx, eax
  05a6c	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05a71	50		 push	 eax
  05a72	8d 85 0c fb ff
	ff		 lea	 eax, DWORD PTR $T174465[ebp]
  05a78	50		 push	 eax
  05a79	8d 8d 10 fb ff
	ff		 lea	 ecx, DWORD PTR $T174464[ebp]
  05a7f	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  05a84	8b c8		 mov	 ecx, eax
  05a86	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05a8b	50		 push	 eax
  05a8c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A ; g_pTalkDlg
  05a92	e8 00 00 00 00	 call	 ?Create@CTalkDlg@@QAEHPAD0F@Z ; CTalkDlg::Create
$L167789:

; 2980 : 				break;

  05a97	e9 cc 01 00 00	 jmp	 $L167779
$L167796:

; 2981 : 
; 2982 : 				// Functions to manage the state and display of the Talk dialog
; 2983 : 				case dtkAddTalkPath: if ( g_pTalkDlg ) g_pTalkDlg->AddTalkPath( *((StringID) arg(3)), arg(4), arg(5), arg(6), arg(7) ); break;

  05a9c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, 0 ; g_pTalkDlg
  05aa3	74 66		 je	 SHORT $L167797
  05aa5	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05aa8	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  05aac	52		 push	 edx
  05aad	8d 8d 00 fb ff
	ff		 lea	 ecx, DWORD PTR $T174468[ebp]
  05ab3	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  05ab8	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05abb	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  05abf	51		 push	 ecx
  05ac0	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05ac3	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  05ac7	50		 push	 eax
  05ac8	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05acb	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  05acf	52		 push	 edx
  05ad0	51		 push	 ecx
  05ad1	8b cc		 mov	 ecx, esp
  05ad3	89 a5 08 fb ff
	ff		 mov	 DWORD PTR $T174466[ebp], esp
  05ad9	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05adc	66 8b 50 08	 mov	 dx, WORD PTR [eax+8]
  05ae0	52		 push	 edx
  05ae1	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  05ae6	8d 85 00 fb ff
	ff		 lea	 eax, DWORD PTR $T174468[ebp]
  05aec	50		 push	 eax
  05aed	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR $T174467[ebp]
  05af3	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  05af8	8b c8		 mov	 ecx, eax
  05afa	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05aff	50		 push	 eax
  05b00	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A ; g_pTalkDlg
  05b06	e8 00 00 00 00	 call	 ?AddTalkPath@CTalkDlg@@QAEXPADVCSCI_Object@@FFF@Z ; CTalkDlg::AddTalkPath
$L167797:
  05b0b	e9 58 01 00 00	 jmp	 $L167779
$L167802:

; 2984 : 				case dtkAddButton:   if ( g_pTalkDlg ) g_pTalkDlg->AddButton( *((StringID) arg(3)), arg(4), arg(5), arg(6), arg(7) ); break;

  05b10	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, 0 ; g_pTalkDlg
  05b17	74 66		 je	 SHORT $L167803
  05b19	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05b1c	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  05b20	52		 push	 edx
  05b21	8d 8d f4 fa ff
	ff		 lea	 ecx, DWORD PTR $T174471[ebp]
  05b27	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  05b2c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05b2f	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  05b33	51		 push	 ecx
  05b34	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05b37	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  05b3b	50		 push	 eax
  05b3c	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05b3f	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  05b43	52		 push	 edx
  05b44	51		 push	 ecx
  05b45	8b cc		 mov	 ecx, esp
  05b47	89 a5 fc fa ff
	ff		 mov	 DWORD PTR $T174469[ebp], esp
  05b4d	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05b50	66 8b 50 08	 mov	 dx, WORD PTR [eax+8]
  05b54	52		 push	 edx
  05b55	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  05b5a	8d 85 f4 fa ff
	ff		 lea	 eax, DWORD PTR $T174471[ebp]
  05b60	50		 push	 eax
  05b61	8d 8d f8 fa ff
	ff		 lea	 ecx, DWORD PTR $T174470[ebp]
  05b67	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  05b6c	8b c8		 mov	 ecx, eax
  05b6e	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05b73	50		 push	 eax
  05b74	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A ; g_pTalkDlg
  05b7a	e8 00 00 00 00	 call	 ?AddButton@CTalkDlg@@QAEXPADVCSCI_Object@@FFF@Z ; CTalkDlg::AddButton
$L167803:
  05b7f	e9 e4 00 00 00	 jmp	 $L167779
$L167808:

; 2985 : 				case dtkSetViewMode: if ( g_pTalkDlg ) g_pTalkDlg->SetViewMode( arg(3) );                       break;

  05b84	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, 0 ; g_pTalkDlg
  05b8b	74 19		 je	 SHORT $L167809
  05b8d	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05b90	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  05b94	f7 da		 neg	 edx
  05b96	1b d2		 sbb	 edx, edx
  05b98	f7 da		 neg	 edx
  05b9a	52		 push	 edx
  05b9b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A ; g_pTalkDlg
  05ba1	e8 00 00 00 00	 call	 ?SetViewMode@CTalkDlg@@QAEX_N@Z ; CTalkDlg::SetViewMode
$L167809:
  05ba6	e9 bd 00 00 00	 jmp	 $L167779
$L167810:

; 2986 : 				case dtkClearTalk:   if ( g_pTalkDlg ) g_pTalkDlg->ClearTalk();                                 break;

  05bab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, 0 ; g_pTalkDlg
  05bb2	74 0b		 je	 SHORT $L167811
  05bb4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A ; g_pTalkDlg
  05bba	e8 00 00 00 00	 call	 ?ClearTalk@CTalkDlg@@QAEXXZ ; CTalkDlg::ClearTalk
$L167811:
  05bbf	e9 a4 00 00 00	 jmp	 $L167779
$L167812:

; 2987 : 				case dtkSetBio:      if ( g_pTalkDlg ) g_pTalkDlg->SetBio( *((StringID) arg(3)), arg(4) );      break;

  05bc4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, 0 ; g_pTalkDlg
  05bcb	74 40		 je	 SHORT $L167813
  05bcd	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05bd0	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  05bd4	51		 push	 ecx
  05bd5	8d 8d ec fa ff
	ff		 lea	 ecx, DWORD PTR $T174473[ebp]
  05bdb	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  05be0	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05be3	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  05be7	50		 push	 eax
  05be8	8d 8d ec fa ff
	ff		 lea	 ecx, DWORD PTR $T174473[ebp]
  05bee	51		 push	 ecx
  05bef	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR $T174472[ebp]
  05bf5	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  05bfa	8b c8		 mov	 ecx, eax
  05bfc	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  05c01	50		 push	 eax
  05c02	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A ; g_pTalkDlg
  05c08	e8 00 00 00 00	 call	 ?SetBio@CTalkDlg@@QAEXPADK@Z ; CTalkDlg::SetBio
$L167813:
  05c0d	eb 59		 jmp	 SHORT $L167779
$L167817:

; 2990 : 					if ( g_pTalkDlg )

  05c0f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, 0 ; g_pTalkDlg
  05c16	74 50		 je	 SHORT $L167818

; 2992 : 						delete g_pTalkDlg;

  05c18	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A ; g_pTalkDlg
  05c1e	89 95 e4 fa ff
	ff		 mov	 DWORD PTR $T174475[ebp], edx
  05c24	8b 85 e4 fa ff
	ff		 mov	 eax, DWORD PTR $T174475[ebp]
  05c2a	89 85 e8 fa ff
	ff		 mov	 DWORD PTR $T174474[ebp], eax
  05c30	83 bd e8 fa ff
	ff 00		 cmp	 DWORD PTR $T174474[ebp], 0
  05c37	74 1b		 je	 SHORT $L174476
  05c39	6a 01		 push	 1
  05c3b	8b 8d e8 fa ff
	ff		 mov	 ecx, DWORD PTR $T174474[ebp]
  05c41	8b 11		 mov	 edx, DWORD PTR [ecx]
  05c43	8b 8d e8 fa ff
	ff		 mov	 ecx, DWORD PTR $T174474[ebp]
  05c49	ff 52 04	 call	 DWORD PTR [edx+4]
  05c4c	89 85 38 f9 ff
	ff		 mov	 DWORD PTR -1736+[ebp], eax
  05c52	eb 0a		 jmp	 SHORT $L174477
$L174476:
  05c54	c7 85 38 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1736+[ebp], 0
$L174477:

; 2993 : 						g_pTalkDlg = NULL;

  05c5e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pTalkDlg@@3PAVCTalkDlg@@A, 0 ; g_pTalkDlg
$L167818:
$L167779:

; 2999 : 
; 3000 : 		break;	

  05c68	e9 c5 0a 00 00	 jmp	 $L166979
$L167821:

; 3004 : 			enum {
; 3005 : 				dcGetCursor,
; 3006 : 				dcClearCursor,
; 3007 : 				dcSwordCursor,
; 3008 : 				dcSpellCursor,
; 3009 : 				dcWalkCursor,
; 3010 : 				dcNoCursor,
; 3011 : 				dcUpdateCursor,
; 3012 : 				dcIsHandCursor
; 3013 : 			};
; 3014 : 
; 3015 : 			// hold the old cursor...
; 3016 : 			HCURSOR hOldCursor = hMyCur;

  05c6d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hMyCur@@3PAUHICON__@@A ; hMyCur
  05c72	89 85 28 ff ff
	ff		 mov	 DWORD PTR _hOldCursor$167831[ebp], eax

; 3017 : 
; 3018 : 			switch ( arg(2) ) {

  05c78	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  05c7b	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  05c7f	89 95 34 f9 ff
	ff		 mov	 DWORD PTR -1740+[ebp], edx
  05c85	83 bd 34 f9 ff
	ff 07		 cmp	 DWORD PTR -1740+[ebp], 7
  05c8c	0f 87 dc 00 00
	00		 ja	 $L167833
  05c92	8b 85 34 f9 ff
	ff		 mov	 eax, DWORD PTR -1740+[ebp]
  05c98	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L174603[eax*4]
$L167836:

; 3020 : 					if ( hMyCur == g_hSwordCursor ) {

  05c9f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hMyCur@@3PAUHICON__@@A ; hMyCur
  05ca5	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?g_hSwordCursor@@3PAUHICON__@@A ; g_hSwordCursor
  05cab	75 0c		 jne	 SHORT $L167837

; 3021 : 						pm.acc = dcSwordCursor;

  05cad	c7 05 04 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 2

; 3023 : 
; 3024 : 					else if ( hMyCur == g_hSpellCursor ) {

  05cb7	eb 3d		 jmp	 SHORT $L167842
$L167837:
  05cb9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hMyCur@@3PAUHICON__@@A ; hMyCur
  05cbf	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_hSpellCursor@@3PAUHICON__@@A ; g_hSpellCursor
  05cc5	75 0c		 jne	 SHORT $L167839

; 3025 : 						pm.acc = dcSpellCursor;

  05cc7	c7 05 04 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 3

; 3027 : 
; 3028 : 					else if ( hMyCur == g_hWalkCursor ) {

  05cd1	eb 23		 jmp	 SHORT $L167842
$L167839:
  05cd3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hMyCur@@3PAUHICON__@@A ; hMyCur
  05cd8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_hWalkCursor@@3PAUHICON__@@A ; g_hWalkCursor
  05cde	75 0c		 jne	 SHORT $L167841

; 3029 : 						pm.acc = dcWalkCursor;

  05ce0	c7 05 04 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 4

; 3031 : 
; 3032 : 					else {

  05cea	eb 0a		 jmp	 SHORT $L167842
$L167841:

; 3033 : 						pm.acc = 0;

  05cec	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0
$L167842:

; 3036 : 
; 3037 : 				break;

  05cf6	eb 76		 jmp	 SHORT $L167833
$L167843:

; 3040 : 					hMyCur = 0;

  05cf8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hMyCur@@3PAUHICON__@@A, 0 ; hMyCur

; 3042 : 
; 3043 : 				break;

  05d02	eb 6a		 jmp	 SHORT $L167833
$L167844:

; 3046 : 					hMyCur = g_hSwordCursor;

  05d04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hSwordCursor@@3PAUHICON__@@A ; g_hSwordCursor
  05d0a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?hMyCur@@3PAUHICON__@@A, ecx ; hMyCur

; 3048 : 
; 3049 : 				break;

  05d10	eb 5c		 jmp	 SHORT $L167833
$L167845:

; 3052 : 					hMyCur = g_hSpellCursor;

  05d12	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_hSpellCursor@@3PAUHICON__@@A ; g_hSpellCursor
  05d18	89 15 00 00 00
	00		 mov	 DWORD PTR ?hMyCur@@3PAUHICON__@@A, edx ; hMyCur

; 3054 : 
; 3055 : 				break;

  05d1e	eb 4e		 jmp	 SHORT $L167833
$L167846:

; 3058 : 					hMyCur = g_hWalkCursor;

  05d20	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hWalkCursor@@3PAUHICON__@@A ; g_hWalkCursor
  05d25	a3 00 00 00 00	 mov	 DWORD PTR ?hMyCur@@3PAUHICON__@@A, eax ; hMyCur

; 3060 : 
; 3061 : 				break;

  05d2a	eb 42		 jmp	 SHORT $L167833
$L167847:

; 3064 : 					hMyCur = LoadCursor ( NULL, IDC_NO );

  05d2c	68 88 7f 00 00	 push	 32648			; 00007f88H
  05d31	6a 00		 push	 0
  05d33	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  05d39	a3 00 00 00 00	 mov	 DWORD PTR ?hMyCur@@3PAUHICON__@@A, eax ; hMyCur

; 3066 : 
; 3067 : 				break;

  05d3e	eb 2e		 jmp	 SHORT $L167833
$L167851:

; 3070 : 					HCURSOR hCursor = ::GetCursor();

  05d40	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursor@0
  05d46	89 85 24 ff ff
	ff		 mov	 DWORD PTR _hCursor$167852[ebp], eax

; 3071 : 					pm.acc = 0;

  05d4c	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 0

; 3072 : 
; 3073 : 					if ( hCursor == g_hHandCursor )

  05d56	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _hCursor$167852[ebp]
  05d5c	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?g_hHandCursor@@3PAUHICON__@@A ; g_hHandCursor
  05d62	75 0a		 jne	 SHORT $L167853

; 3074 : 						pm.acc = 1;

  05d64	c7 05 04 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pm@@3VPMachine@@A+4, 1
$L167853:
$L167833:

; 3079 : 
; 3080 : 			// if the cursor changed, update it
; 3081 : 			if ( (hMyCur != hOldCursor) || (arg(2) == dcUpdateCursor) ) {

  05d6e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hMyCur@@3PAUHICON__@@A ; hMyCur
  05d74	3b 95 28 ff ff
	ff		 cmp	 edx, DWORD PTR _hOldCursor$167831[ebp]
  05d7a	75 0c		 jne	 SHORT $L167855
  05d7c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05d7f	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  05d83	83 f9 06	 cmp	 ecx, 6
  05d86	75 3d		 jne	 SHORT $L167857
$L167855:

; 3082 : 				HWND hWnd = ::WindowFromPoint ( g_MouseLocation );

  05d88	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?g_MouseLocation@@3UtagPOINT@@A+4
  05d8e	52		 push	 edx
  05d8f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_MouseLocation@@3UtagPOINT@@A
  05d94	50		 push	 eax
  05d95	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WindowFromPoint@8
  05d9b	89 85 20 ff ff
	ff		 mov	 DWORD PTR _hWnd$167856[ebp], eax

; 3083 : 
; 3084 : 				if ( hWnd ) {

  05da1	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _hWnd$167856[ebp], 0
  05da8	74 1b		 je	 SHORT $L167857

; 3085 : 					::PostMessage ( hWnd, WM_SETCURSOR, (unsigned int)hWnd, MAKELONG(HTCLIENT, WM_MOUSEMOVE) );

  05daa	68 01 00 00 02	 push	 33554433		; 02000001H
  05daf	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _hWnd$167856[ebp]
  05db5	51		 push	 ecx
  05db6	6a 20		 push	 32			; 00000020H
  05db8	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _hWnd$167856[ebp]
  05dbe	52		 push	 edx
  05dbf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
$L167857:

; 3089 : 
; 3090 : 		break;

  05dc5	e9 68 09 00 00	 jmp	 $L166979
$L167863:

; 3099 : 			{

  05dca	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05dcd	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  05dd1	89 8d 30 f9 ff
	ff		 mov	 DWORD PTR -1744+[ebp], ecx
  05dd7	83 bd 30 f9 ff
	ff 00		 cmp	 DWORD PTR -1744+[ebp], 0
  05dde	74 12		 je	 SHORT $L167871
  05de0	83 bd 30 f9 ff
	ff 01		 cmp	 DWORD PTR -1744+[ebp], 1
  05de7	0f 84 83 00 00
	00		 je	 $L167877
  05ded	e9 9c 00 00 00	 jmp	 $L167868
$L167871:

; 3101 : 					g_pWindowMgr->CloseAllTransientWindows();

  05df2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A ; g_pWindowMgr
  05df8	e8 00 00 00 00	 call	 ?CloseAllTransientWindows@CWindowMgr@@QAEXXZ ; CWindowMgr::CloseAllTransientWindows

; 3102 : 
; 3103 : 					(new CSellDlg())->Create( arg(3) );

  05dfd	68 b0 00 00 00	 push	 176			; 000000b0H
  05e02	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  05e07	89 85 dc fa ff
	ff		 mov	 DWORD PTR $T174479[ebp], eax
  05e0d	c7 45 fc 2e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 46 ; 0000002eH
  05e14	83 bd dc fa ff
	ff 00		 cmp	 DWORD PTR $T174479[ebp], 0
  05e1b	74 13		 je	 SHORT $L174480
  05e1d	8b 8d dc fa ff
	ff		 mov	 ecx, DWORD PTR $T174479[ebp]
  05e23	e8 00 00 00 00	 call	 ??0CSellDlg@@QAE@XZ	; CSellDlg::CSellDlg
  05e28	89 85 2c f9 ff
	ff		 mov	 DWORD PTR -1748+[ebp], eax
  05e2e	eb 0a		 jmp	 SHORT $L174481
$L174480:
  05e30	c7 85 2c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1748+[ebp], 0
$L174481:
  05e3a	8b 95 2c f9 ff
	ff		 mov	 edx, DWORD PTR -1748+[ebp]
  05e40	89 95 e0 fa ff
	ff		 mov	 DWORD PTR $T174478[ebp], edx
  05e46	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05e4d	51		 push	 ecx
  05e4e	8b cc		 mov	 ecx, esp
  05e50	89 a5 d8 fa ff
	ff		 mov	 DWORD PTR $T174482[ebp], esp
  05e56	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05e59	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  05e5d	52		 push	 edx
  05e5e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  05e63	8b 8d e0 fa ff
	ff		 mov	 ecx, DWORD PTR $T174478[ebp]
  05e69	e8 00 00 00 00	 call	 ?Create@CSellDlg@@QAEHVCSCI_Object@@@Z ; CSellDlg::Create

; 3105 : 
; 3106 : 				break;

  05e6e	eb 1e		 jmp	 SHORT $L167868
$L167877:

; 3109 : 					CSellDlg::HandleMsg( arg(3) );

  05e70	51		 push	 ecx
  05e71	8b cc		 mov	 ecx, esp
  05e73	89 a5 d4 fa ff
	ff		 mov	 DWORD PTR $T174483[ebp], esp
  05e79	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05e7c	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  05e80	52		 push	 edx
  05e81	e8 00 00 00 00	 call	 ??0CSCI_NetMsg@@QAE@G@Z	; CSCI_NetMsg::CSCI_NetMsg
  05e86	e8 00 00 00 00	 call	 ?HandleMsg@CSellDlg@@SAXVCSCI_NetMsg@@@Z ; CSellDlg::HandleMsg
  05e8b	83 c4 04	 add	 esp, 4
$L167868:

; 3115 : 
; 3116 : 		break;

  05e8e	e9 9f 08 00 00	 jmp	 $L166979
$L167879:

; 3125 : 			{

  05e93	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05e96	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  05e9a	89 8d 28 f9 ff
	ff		 mov	 DWORD PTR -1752+[ebp], ecx
  05ea0	83 bd 28 f9 ff
	ff 00		 cmp	 DWORD PTR -1752+[ebp], 0
  05ea7	74 12		 je	 SHORT $L167887
  05ea9	83 bd 28 f9 ff
	ff 01		 cmp	 DWORD PTR -1752+[ebp], 1
  05eb0	0f 84 83 00 00
	00		 je	 $L167893
  05eb6	e9 9c 00 00 00	 jmp	 $L167884
$L167887:

; 3127 : 					g_pWindowMgr->CloseAllTransientWindows();

  05ebb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWindowMgr@@3PAVCWindowMgr@@A ; g_pWindowMgr
  05ec1	e8 00 00 00 00	 call	 ?CloseAllTransientWindows@CWindowMgr@@QAEXXZ ; CWindowMgr::CloseAllTransientWindows

; 3128 : 
; 3129 : 					(new CRepairDlg())->Create( arg(3) );

  05ec6	68 b4 00 00 00	 push	 180			; 000000b4H
  05ecb	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  05ed0	89 85 cc fa ff
	ff		 mov	 DWORD PTR $T174485[ebp], eax
  05ed6	c7 45 fc 2f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 47 ; 0000002fH
  05edd	83 bd cc fa ff
	ff 00		 cmp	 DWORD PTR $T174485[ebp], 0
  05ee4	74 13		 je	 SHORT $L174486
  05ee6	8b 8d cc fa ff
	ff		 mov	 ecx, DWORD PTR $T174485[ebp]
  05eec	e8 00 00 00 00	 call	 ??0CRepairDlg@@QAE@XZ	; CRepairDlg::CRepairDlg
  05ef1	89 85 24 f9 ff
	ff		 mov	 DWORD PTR -1756+[ebp], eax
  05ef7	eb 0a		 jmp	 SHORT $L174487
$L174486:
  05ef9	c7 85 24 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1756+[ebp], 0
$L174487:
  05f03	8b 95 24 f9 ff
	ff		 mov	 edx, DWORD PTR -1756+[ebp]
  05f09	89 95 d0 fa ff
	ff		 mov	 DWORD PTR $T174484[ebp], edx
  05f0f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  05f16	51		 push	 ecx
  05f17	8b cc		 mov	 ecx, esp
  05f19	89 a5 c8 fa ff
	ff		 mov	 DWORD PTR $T174488[ebp], esp
  05f1f	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05f22	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  05f26	52		 push	 edx
  05f27	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  05f2c	8b 8d d0 fa ff
	ff		 mov	 ecx, DWORD PTR $T174484[ebp]
  05f32	e8 00 00 00 00	 call	 ?Create@CRepairDlg@@QAEHVCSCI_Object@@@Z ; CRepairDlg::Create

; 3131 : 
; 3132 : 				break;

  05f37	eb 1e		 jmp	 SHORT $L167884
$L167893:

; 3135 : 					CRepairDlg::HandleMsg( arg(3) );

  05f39	51		 push	 ecx
  05f3a	8b cc		 mov	 ecx, esp
  05f3c	89 a5 c4 fa ff
	ff		 mov	 DWORD PTR $T174489[ebp], esp
  05f42	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05f45	66 8b 50 06	 mov	 dx, WORD PTR [eax+6]
  05f49	52		 push	 edx
  05f4a	e8 00 00 00 00	 call	 ??0CSCI_NetMsg@@QAE@G@Z	; CSCI_NetMsg::CSCI_NetMsg
  05f4f	e8 00 00 00 00	 call	 ?HandleMsg@CRepairDlg@@SAXVCSCI_NetMsg@@@Z ; CRepairDlg::HandleMsg
  05f54	83 c4 04	 add	 esp, 4
$L167884:

; 3141 : 
; 3142 : 		break;

  05f57	e9 d6 07 00 00	 jmp	 $L166979
$L167895:

; 3145 : 			enum {
; 3146 : 				dqMana,
; 3147 : 				dqMoney,
; 3148 : 			};
; 3149 : 
; 3150 : 			switch ( arg(2) ) {

  05f5c	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  05f5f	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  05f63	89 8d 20 f9 ff
	ff		 mov	 DWORD PTR -1760+[ebp], ecx
  05f69	83 bd 20 f9 ff
	ff 00		 cmp	 DWORD PTR -1760+[ebp], 0
  05f70	74 12		 je	 SHORT $L167903
  05f72	83 bd 20 f9 ff
	ff 01		 cmp	 DWORD PTR -1760+[ebp], 1
  05f79	0f 84 93 00 00
	00		 je	 $L167910
  05f7f	e9 17 01 00 00	 jmp	 $L167900
$L167903:

; 3151 : 				case dqMana:
; 3152 : 					(new CQuantityDlg( arg(3), arg(4) ))->Create( true );

  05f84	68 a4 00 00 00	 push	 164			; 000000a4H
  05f89	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  05f8e	89 85 bc fa ff
	ff		 mov	 DWORD PTR $T174491[ebp], eax
  05f94	c7 45 fc 30 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 48 ; 00000030H
  05f9b	83 bd bc fa ff
	ff 00		 cmp	 DWORD PTR $T174491[ebp], 0
  05fa2	74 3f		 je	 SHORT $L174494
  05fa4	51		 push	 ecx
  05fa5	8b cc		 mov	 ecx, esp
  05fa7	89 a5 b8 fa ff
	ff		 mov	 DWORD PTR $T174492[ebp], esp
  05fad	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05fb0	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  05fb4	50		 push	 eax
  05fb5	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  05fba	51		 push	 ecx
  05fbb	8b cc		 mov	 ecx, esp
  05fbd	89 a5 b4 fa ff
	ff		 mov	 DWORD PTR $T174493[ebp], esp
  05fc3	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  05fc6	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  05fca	50		 push	 eax
  05fcb	e8 00 00 00 00	 call	 ??0CSCI_Script@@QAE@G@Z	; CSCI_Script::CSCI_Script
  05fd0	8b 8d bc fa ff
	ff		 mov	 ecx, DWORD PTR $T174491[ebp]
  05fd6	e8 00 00 00 00	 call	 ??0CQuantityDlg@@QAE@VCSCI_Script@@VCSCI_LongInt@@@Z ; CQuantityDlg::CQuantityDlg
  05fdb	89 85 1c f9 ff
	ff		 mov	 DWORD PTR -1764+[ebp], eax
  05fe1	eb 0a		 jmp	 SHORT $L174495
$L174494:
  05fe3	c7 85 1c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1764+[ebp], 0
$L174495:
  05fed	8b 8d 1c f9 ff
	ff		 mov	 ecx, DWORD PTR -1764+[ebp]
  05ff3	89 8d c0 fa ff
	ff		 mov	 DWORD PTR $T174490[ebp], ecx
  05ff9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06000	6a 01		 push	 1
  06002	8b 8d c0 fa ff
	ff		 mov	 ecx, DWORD PTR $T174490[ebp]
  06008	e8 00 00 00 00	 call	 ?Create@CQuantityDlg@@QAEH_N@Z ; CQuantityDlg::Create

; 3153 : 					break;

  0600d	e9 89 00 00 00	 jmp	 $L167900
$L167910:

; 3154 : 				case dqMoney:
; 3155 : 					(new CQuantityDlg( arg(3), arg(4) ))->Create( false );

  06012	68 a4 00 00 00	 push	 164			; 000000a4H
  06017	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0601c	89 85 ac fa ff
	ff		 mov	 DWORD PTR $T174497[ebp], eax
  06022	c7 45 fc 31 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 49 ; 00000031H
  06029	83 bd ac fa ff
	ff 00		 cmp	 DWORD PTR $T174497[ebp], 0
  06030	74 3f		 je	 SHORT $L174500
  06032	51		 push	 ecx
  06033	8b cc		 mov	 ecx, esp
  06035	89 a5 a8 fa ff
	ff		 mov	 DWORD PTR $T174498[ebp], esp
  0603b	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0603e	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  06042	50		 push	 eax
  06043	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  06048	51		 push	 ecx
  06049	8b cc		 mov	 ecx, esp
  0604b	89 a5 a4 fa ff
	ff		 mov	 DWORD PTR $T174499[ebp], esp
  06051	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  06054	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  06058	50		 push	 eax
  06059	e8 00 00 00 00	 call	 ??0CSCI_Script@@QAE@G@Z	; CSCI_Script::CSCI_Script
  0605e	8b 8d ac fa ff
	ff		 mov	 ecx, DWORD PTR $T174497[ebp]
  06064	e8 00 00 00 00	 call	 ??0CQuantityDlg@@QAE@VCSCI_Script@@VCSCI_LongInt@@@Z ; CQuantityDlg::CQuantityDlg
  06069	89 85 18 f9 ff
	ff		 mov	 DWORD PTR -1768+[ebp], eax
  0606f	eb 0a		 jmp	 SHORT $L174501
$L174500:
  06071	c7 85 18 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1768+[ebp], 0
$L174501:
  0607b	8b 8d 18 f9 ff
	ff		 mov	 ecx, DWORD PTR -1768+[ebp]
  06081	89 8d b0 fa ff
	ff		 mov	 DWORD PTR $T174496[ebp], ecx
  06087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0608e	6a 00		 push	 0
  06090	8b 8d b0 fa ff
	ff		 mov	 ecx, DWORD PTR $T174496[ebp]
  06096	e8 00 00 00 00	 call	 ?Create@CQuantityDlg@@QAEH_N@Z ; CQuantityDlg::Create
$L167900:

; 3159 : 
; 3160 : 		break;

  0609b	e9 92 06 00 00	 jmp	 $L166979
$L167917:

; 3163 : 			if ( g_pTrackingWindow ) {

  060a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pTrackingWindow@@3PAVCSkinWnd@@A, 0 ; g_pTrackingWindow
  060a7	74 0b		 je	 SHORT $L167918

; 3164 : 				g_pTrackingWindow->StopTracking();

  060a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pTrackingWindow@@3PAVCSkinWnd@@A ; g_pTrackingWindow
  060af	e8 00 00 00 00	 call	 ?StopTracking@CSkinWnd@@QAEXXZ ; CSkinWnd::StopTracking
$L167918:

; 3167 : 
; 3168 : 		break;

  060b4	e9 79 06 00 00	 jmp	 $L166979
$L167919:

; 3171 : 			enum {
; 3172 : 				dpCreate,
; 3173 : 				dpUpdateProgressBar,
; 3174 : 			};
; 3175 : 
; 3176 : 			switch ( arg(2) ) {

  060b9	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  060bc	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  060c0	89 85 14 f9 ff
	ff		 mov	 DWORD PTR -1772+[ebp], eax
  060c6	83 bd 14 f9 ff
	ff 00		 cmp	 DWORD PTR -1772+[ebp], 0
  060cd	74 12		 je	 SHORT $L167927
  060cf	83 bd 14 f9 ff
	ff 01		 cmp	 DWORD PTR -1772+[ebp], 1
  060d6	0f 84 ff 00 00
	00		 je	 $L167940
  060dc	e9 0e 01 00 00	 jmp	 $L167924
$L167927:

; 3178 : 					if ( g_pPatchDlg ) {

  060e1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pPatchDlg@@3PAVCPatchDlg@@A, 0 ; g_pPatchDlg
  060e8	74 52		 je	 SHORT $L167928

; 3179 : 						g_pPatchDlg->UpdatePatch( arg(3), arg(4), arg(5) );

  060ea	51		 push	 ecx
  060eb	8b cc		 mov	 ecx, esp
  060ed	89 a5 a0 fa ff
	ff		 mov	 DWORD PTR $T174502[ebp], esp
  060f3	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  060f6	66 8b 42 0a	 mov	 ax, WORD PTR [edx+10]
  060fa	50		 push	 eax
  060fb	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  06100	51		 push	 ecx
  06101	8b cc		 mov	 ecx, esp
  06103	89 a5 9c fa ff
	ff		 mov	 DWORD PTR $T174503[ebp], esp
  06109	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0610c	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  06110	50		 push	 eax
  06111	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  06116	51		 push	 ecx
  06117	8b cc		 mov	 ecx, esp
  06119	89 a5 98 fa ff
	ff		 mov	 DWORD PTR $T174504[ebp], esp
  0611f	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  06122	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  06126	50		 push	 eax
  06127	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0612c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPatchDlg@@3PAVCPatchDlg@@A ; g_pPatchDlg
  06132	e8 00 00 00 00	 call	 ?UpdatePatch@CPatchDlg@@QAEXVCSCI_LongInt@@00@Z ; CPatchDlg::UpdatePatch

; 3180 : 					} else {

  06137	e9 9d 00 00 00	 jmp	 $L167932
$L167928:

; 3181 : 						(new CPatchDlg())->Create( arg(3), arg(4), arg(5) );

  0613c	68 b8 00 00 00	 push	 184			; 000000b8H
  06141	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  06146	89 85 90 fa ff
	ff		 mov	 DWORD PTR $T174506[ebp], eax
  0614c	c7 45 fc 32 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 50 ; 00000032H
  06153	83 bd 90 fa ff
	ff 00		 cmp	 DWORD PTR $T174506[ebp], 0
  0615a	74 13		 je	 SHORT $L174507
  0615c	8b 8d 90 fa ff
	ff		 mov	 ecx, DWORD PTR $T174506[ebp]
  06162	e8 00 00 00 00	 call	 ??0CPatchDlg@@QAE@XZ	; CPatchDlg::CPatchDlg
  06167	89 85 10 f9 ff
	ff		 mov	 DWORD PTR -1776+[ebp], eax
  0616d	eb 0a		 jmp	 SHORT $L174508
$L174507:
  0616f	c7 85 10 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1776+[ebp], 0
$L174508:
  06179	8b 8d 10 f9 ff
	ff		 mov	 ecx, DWORD PTR -1776+[ebp]
  0617f	89 8d 94 fa ff
	ff		 mov	 DWORD PTR $T174505[ebp], ecx
  06185	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0618c	51		 push	 ecx
  0618d	8b cc		 mov	 ecx, esp
  0618f	89 a5 8c fa ff
	ff		 mov	 DWORD PTR $T174509[ebp], esp
  06195	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  06198	66 8b 42 0a	 mov	 ax, WORD PTR [edx+10]
  0619c	50		 push	 eax
  0619d	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  061a2	51		 push	 ecx
  061a3	8b cc		 mov	 ecx, esp
  061a5	89 a5 88 fa ff
	ff		 mov	 DWORD PTR $T174510[ebp], esp
  061ab	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  061ae	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  061b2	50		 push	 eax
  061b3	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  061b8	51		 push	 ecx
  061b9	8b cc		 mov	 ecx, esp
  061bb	89 a5 84 fa ff
	ff		 mov	 DWORD PTR $T174511[ebp], esp
  061c1	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  061c4	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  061c8	50		 push	 eax
  061c9	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  061ce	8b 8d 94 fa ff
	ff		 mov	 ecx, DWORD PTR $T174505[ebp]
  061d4	e8 00 00 00 00	 call	 ?Create@CPatchDlg@@QAEHVCSCI_LongInt@@00@Z ; CPatchDlg::Create
$L167932:

; 3184 : 
; 3185 : 				break;

  061d9	eb 14		 jmp	 SHORT $L167924
$L167940:

; 3188 : 					if ( g_pPatchDlg ) {

  061db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pPatchDlg@@3PAVCPatchDlg@@A, 0 ; g_pPatchDlg
  061e2	74 0b		 je	 SHORT $L167941

; 3189 : 						g_pPatchDlg->UpdateProgressBar();

  061e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPatchDlg@@3PAVCPatchDlg@@A ; g_pPatchDlg
  061ea	e8 00 00 00 00	 call	 ?UpdateProgressBar@CPatchDlg@@QAEXXZ ; CPatchDlg::UpdateProgressBar
$L167941:
$L167924:

; 3196 : 
; 3197 : 		break;

  061ef	e9 3e 05 00 00	 jmp	 $L166979
$L167942:

; 3200 : 			if ( g_pChannelMembers )

  061f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pChannelMembers@@3PAVCChannelMemberList@@A, 0 ; g_pChannelMembers
  061fb	74 38		 je	 SHORT $L167943

; 3201 : 				g_pChannelMembers->HandleMsg( * ((StringID) arg(2) ) );

  061fd	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  06200	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  06204	52		 push	 edx
  06205	8d 8d 7c fa ff
	ff		 lea	 ecx, DWORD PTR $T174513[ebp]
  0620b	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  06210	8d 85 7c fa ff
	ff		 lea	 eax, DWORD PTR $T174513[ebp]
  06216	50		 push	 eax
  06217	8d 8d 80 fa ff
	ff		 lea	 ecx, DWORD PTR $T174512[ebp]
  0621d	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  06222	8b c8		 mov	 ecx, eax
  06224	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  06229	50		 push	 eax
  0622a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pChannelMembers@@3PAVCChannelMemberList@@A ; g_pChannelMembers
  06230	e8 00 00 00 00	 call	 ?HandleMsg@CChannelMemberList@@QAEXPAD@Z ; CChannelMemberList::HandleMsg
$L167943:

; 3203 : 
; 3204 : 		break;

  06235	e9 f8 04 00 00	 jmp	 $L166979
$L167947:

; 3207 : 			enum {
; 3208 : 				dccCreate,
; 3209 : 				dccError,
; 3210 : 			};
; 3211 : 
; 3212 : 			switch ( arg(2 ) ) {

  0623a	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  0623d	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  06241	89 95 0c f9 ff
	ff		 mov	 DWORD PTR -1780+[ebp], edx
  06247	83 bd 0c f9 ff
	ff 00		 cmp	 DWORD PTR -1780+[ebp], 0
  0624e	74 12		 je	 SHORT $L167955
  06250	83 bd 0c f9 ff
	ff 01		 cmp	 DWORD PTR -1780+[ebp], 1
  06257	0f 84 8c 00 00
	00		 je	 $L167962
  0625d	e9 00 01 00 00	 jmp	 $L167952
$L167955:

; 3214 : 					if ( !g_pGossipWnd )

  06262	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pGossipWnd@@3PAVCGossipWnd@@A, 0 ; g_pGossipWnd
  06269	75 5b		 jne	 SHORT $L167956

; 3215 : 						(new CGossipWnd())->Create();

  0626b	68 b0 00 00 00	 push	 176			; 000000b0H
  06270	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  06275	89 85 74 fa ff
	ff		 mov	 DWORD PTR $T174515[ebp], eax
  0627b	c7 45 fc 33 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 51 ; 00000033H
  06282	83 bd 74 fa ff
	ff 00		 cmp	 DWORD PTR $T174515[ebp], 0
  06289	74 13		 je	 SHORT $L174516
  0628b	8b 8d 74 fa ff
	ff		 mov	 ecx, DWORD PTR $T174515[ebp]
  06291	e8 00 00 00 00	 call	 ??0CGossipWnd@@QAE@XZ	; CGossipWnd::CGossipWnd
  06296	89 85 08 f9 ff
	ff		 mov	 DWORD PTR -1784+[ebp], eax
  0629c	eb 0a		 jmp	 SHORT $L174517
$L174516:
  0629e	c7 85 08 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1784+[ebp], 0
$L174517:
  062a8	8b 85 08 f9 ff
	ff		 mov	 eax, DWORD PTR -1784+[ebp]
  062ae	89 85 78 fa ff
	ff		 mov	 DWORD PTR $T174514[ebp], eax
  062b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  062bb	8b 8d 78 fa ff
	ff		 mov	 ecx, DWORD PTR $T174514[ebp]
  062c1	e8 00 00 00 00	 call	 ?Create@CGossipWnd@@QAEHXZ ; CGossipWnd::Create
$L167956:

; 3216 : 
; 3217 : 				    g_pGossipWnd->Update( arg(3) );

  062c6	51		 push	 ecx
  062c7	8b cc		 mov	 ecx, esp
  062c9	89 a5 70 fa ff
	ff		 mov	 DWORD PTR $T174518[ebp], esp
  062cf	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  062d2	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  062d6	50		 push	 eax
  062d7	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  062dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pGossipWnd@@3PAVCGossipWnd@@A ; g_pGossipWnd
  062e2	e8 00 00 00 00	 call	 ?Update@CGossipWnd@@QAEXVObjectID@@@Z ; CGossipWnd::Update

; 3219 : 
; 3220 : 				break;

  062e7	eb 79		 jmp	 SHORT $L167952
$L167962:

; 3223 : 					CSCI_NetMsg hMsg( arg(3) );

  062e9	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  062ec	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  062f0	52		 push	 edx
  062f1	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _hMsg$167963[ebp]
  062f7	e8 00 00 00 00	 call	 ??0CSCI_NetMsg@@QAE@G@Z	; CSCI_NetMsg::CSCI_NetMsg

; 3224 : 
; 3225 : 					switch ( hMsg.get_pInfo().get_lowWord() ) {

  062fc	8d 85 6c fa ff
	ff		 lea	 eax, DWORD PTR $T174519[ebp]
  06302	50		 push	 eax
  06303	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _hMsg$167963[ebp]
  06309	e8 00 00 00 00	 call	 ?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ; CSCI_NetMsg::get_pInfo
  0630e	8b c8		 mov	 ecx, eax
  06310	e8 00 00 00 00	 call	 ?get_lowWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_lowWord
  06315	0f bf c8	 movsx	 ecx, ax
  06318	89 8d 04 f9 ff
	ff		 mov	 DWORD PTR -1788+[ebp], ecx
  0631e	81 bd 04 f9 ff
	ff 15 27 00 00	 cmp	 DWORD PTR -1788+[ebp], 10005 ; 00002715H
  06328	74 24		 je	 SHORT $L167972
  0632a	81 bd 04 f9 ff
	ff 1e 27 00 00	 cmp	 DWORD PTR -1788+[ebp], 10014 ; 0000271eH
  06334	74 02		 je	 SHORT $L167969
  06336	eb 2a		 jmp	 SHORT $L167966
$L167969:

; 3226 : 						case _ERR_TOO_EXPENSIVE:
; 3227 : 							SkinMessage( "Error", "Sorry there are no available channels." );

  06338	6a 00		 push	 0
  0633a	68 00 00 00 00	 push	 OFFSET FLAT:$SG167970
  0633f	68 00 00 00 00	 push	 OFFSET FLAT:$SG167971
  06344	e8 00 00 00 00	 call	 ?SkinMessage@@YA_NPAD0H@Z ; SkinMessage
  06349	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3228 : 						break;

  0634c	eb 14		 jmp	 SHORT $L167966
$L167972:

; 3229 : 
; 3230 : 						case _ERR_BAD_ROOM:
; 3231 : 							SkinMessage( "Error", "That channel is already in use." );

  0634e	6a 00		 push	 0
  06350	68 00 00 00 00	 push	 OFFSET FLAT:$SG167973
  06355	68 00 00 00 00	 push	 OFFSET FLAT:$SG167974
  0635a	e8 00 00 00 00	 call	 ?SkinMessage@@YA_NPAD0H@Z ; SkinMessage
  0635f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L167966:
$L167952:

; 3239 : 
; 3240 : 		break;

  06362	e9 cb 03 00 00	 jmp	 $L166979
$L167975:

; 3243 : 			enum {
; 3244 : 				dneCreate,
; 3245 : 				dneDestroy,
; 3246 : 			};
; 3247 : 
; 3248 : 			switch ( arg(2) ) {

  06367	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  0636a	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  0636e	89 85 00 f9 ff
	ff		 mov	 DWORD PTR -1792+[ebp], eax
  06374	83 bd 00 f9 ff
	ff 00		 cmp	 DWORD PTR -1792+[ebp], 0
  0637b	74 0b		 je	 SHORT $L167983
  0637d	83 bd 00 f9 ff
	ff 01		 cmp	 DWORD PTR -1792+[ebp], 1
  06384	74 5f		 je	 SHORT $L167988
  06386	eb 7c		 jmp	 SHORT $L167980
$L167983:

; 3249 : 				case dneCreate:
; 3250 : 					(new CNetworkErrorDlg())->Create();

  06388	68 98 00 00 00	 push	 152			; 00000098H
  0638d	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  06392	89 85 64 fa ff
	ff		 mov	 DWORD PTR $T174521[ebp], eax
  06398	c7 45 fc 34 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 52 ; 00000034H
  0639f	83 bd 64 fa ff
	ff 00		 cmp	 DWORD PTR $T174521[ebp], 0
  063a6	74 13		 je	 SHORT $L174522
  063a8	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR $T174521[ebp]
  063ae	e8 00 00 00 00	 call	 ??0CNetworkErrorDlg@@QAE@XZ ; CNetworkErrorDlg::CNetworkErrorDlg
  063b3	89 85 fc f8 ff
	ff		 mov	 DWORD PTR -1796+[ebp], eax
  063b9	eb 0a		 jmp	 SHORT $L174523
$L174522:
  063bb	c7 85 fc f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1796+[ebp], 0
$L174523:
  063c5	8b 8d fc f8 ff
	ff		 mov	 ecx, DWORD PTR -1796+[ebp]
  063cb	89 8d 68 fa ff
	ff		 mov	 DWORD PTR $T174520[ebp], ecx
  063d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  063d8	8b 8d 68 fa ff
	ff		 mov	 ecx, DWORD PTR $T174520[ebp]
  063de	e8 00 00 00 00	 call	 ?Create@CNetworkErrorDlg@@QAEHXZ ; CNetworkErrorDlg::Create

; 3251 : 					break;

  063e3	eb 1f		 jmp	 SHORT $L167980
$L167988:

; 3252 : 				case dneDestroy:
; 3253 : 					if ( g_pNetworkError )

  063e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pNetworkError@@3PAVCNetworkErrorDlg@@A, 0 ; g_pNetworkError
  063ec	74 16		 je	 SHORT $L167989

; 3254 : 						g_pNetworkError->CloseSelf( false );

  063ee	6a 00		 push	 0
  063f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pNetworkError@@3PAVCNetworkErrorDlg@@A ; g_pNetworkError
  063f6	8b 02		 mov	 eax, DWORD PTR [edx]
  063f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pNetworkError@@3PAVCNetworkErrorDlg@@A ; g_pNetworkError
  063fe	ff 90 c4 00 00
	00		 call	 DWORD PTR [eax+196]
$L167989:
$L167980:

; 3258 : 
; 3259 : 		break;

  06404	e9 29 03 00 00	 jmp	 $L166979
$L167990:

; 3262 : 			(new CAccountDlg( arg(2) ))->Create();

  06409	68 9c 00 00 00	 push	 156			; 0000009cH
  0640e	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  06413	89 85 5c fa ff
	ff		 mov	 DWORD PTR $T174525[ebp], eax
  06419	c7 45 fc 35 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 53 ; 00000035H
  06420	83 bd 5c fa ff
	ff 00		 cmp	 DWORD PTR $T174525[ebp], 0
  06427	74 29		 je	 SHORT $L174527
  06429	51		 push	 ecx
  0642a	8b cc		 mov	 ecx, esp
  0642c	89 a5 58 fa ff
	ff		 mov	 DWORD PTR $T174526[ebp], esp
  06432	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  06435	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  06439	50		 push	 eax
  0643a	e8 00 00 00 00	 call	 ??0CSCI_Script@@QAE@G@Z	; CSCI_Script::CSCI_Script
  0643f	8b 8d 5c fa ff
	ff		 mov	 ecx, DWORD PTR $T174525[ebp]
  06445	e8 00 00 00 00	 call	 ??0CAccountDlg@@QAE@VCSCI_Script@@@Z ; CAccountDlg::CAccountDlg
  0644a	89 85 f8 f8 ff
	ff		 mov	 DWORD PTR -1800+[ebp], eax
  06450	eb 0a		 jmp	 SHORT $L174528
$L174527:
  06452	c7 85 f8 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1800+[ebp], 0
$L174528:
  0645c	8b 8d f8 f8 ff
	ff		 mov	 ecx, DWORD PTR -1800+[ebp]
  06462	89 8d 60 fa ff
	ff		 mov	 DWORD PTR $T174524[ebp], ecx
  06468	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0646f	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR $T174524[ebp]
  06475	e8 00 00 00 00	 call	 ?Create@CAccountDlg@@QAEHXZ ; CAccountDlg::Create

; 3264 : 
; 3265 : 		break;

  0647a	e9 b3 02 00 00	 jmp	 $L166979
$L167996:

; 3268 : 			enum {
; 3269 : 				drfSetInc,
; 3270 : 				drfMulInc,
; 3271 : 				drfAddInc,
; 3272 : 				drfSetGen,
; 3273 : 				drfMulGen,
; 3274 : 				drfAddGen,
; 3275 : 			};
; 3276 : 
; 3277 : 			switch ( arg(2) ) {

  0647f	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  06482	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  06486	89 85 f4 f8 ff
	ff		 mov	 DWORD PTR -1804+[ebp], eax
  0648c	83 bd f4 f8 ff
	ff 05		 cmp	 DWORD PTR -1804+[ebp], 5
  06493	0f 87 82 00 00
	00		 ja	 $L168005
  06499	8b 8d f4 f8 ff
	ff		 mov	 ecx, DWORD PTR -1804+[ebp]
  0649f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L174604[ecx*4]
$L168008:

; 3278 : 				case drfSetInc:
; 3279 : 					g_nIncrement = arg(3);

  064a6	8b 55 08	 mov	 edx, DWORD PTR _args$[ebp]
  064a9	0f bf 42 06	 movsx	 eax, WORD PTR [edx+6]
  064ad	a3 00 00 00 00	 mov	 DWORD PTR ?g_nIncrement@@3KA, eax ; g_nIncrement

; 3280 : 
; 3281 : 					break;

  064b2	eb 67		 jmp	 SHORT $L168005
$L168009:

; 3282 : 				case drfMulInc:
; 3283 : 					g_nIncrement *= arg(3);

  064b4	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  064b7	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  064bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nIncrement@@3KA ; g_nIncrement
  064c0	0f af c2	 imul	 eax, edx
  064c3	a3 00 00 00 00	 mov	 DWORD PTR ?g_nIncrement@@3KA, eax ; g_nIncrement

; 3284 : 					
; 3285 : 					break;

  064c8	eb 51		 jmp	 SHORT $L168005
$L168010:

; 3286 : 				case drfAddInc:
; 3287 : 					g_nIncrement += arg(3);

  064ca	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  064cd	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  064d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nIncrement@@3KA ; g_nIncrement
  064d6	03 c2		 add	 eax, edx
  064d8	a3 00 00 00 00	 mov	 DWORD PTR ?g_nIncrement@@3KA, eax ; g_nIncrement

; 3288 : 					
; 3289 : 					break;

  064dd	eb 3c		 jmp	 SHORT $L168005
$L168011:

; 3290 : 				case drfSetGen:
; 3291 : 					g_nGenerator = arg(3);

  064df	8b 4d 08	 mov	 ecx, DWORD PTR _args$[ebp]
  064e2	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  064e6	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nGenerator@@3KA, edx ; g_nGenerator

; 3292 : 
; 3293 : 					break;

  064ec	eb 2d		 jmp	 SHORT $L168005
$L168012:

; 3294 : 				case drfMulGen:
; 3295 : 					g_nGenerator *= arg(3);

  064ee	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  064f1	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  064f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nGenerator@@3KA ; g_nGenerator
  064fb	0f af d1	 imul	 edx, ecx
  064fe	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nGenerator@@3KA, edx ; g_nGenerator

; 3296 : 
; 3297 : 					break;

  06504	eb 15		 jmp	 SHORT $L168005
$L168013:

; 3298 : 				case drfAddGen:
; 3299 : 					g_nGenerator += arg(3);

  06506	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  06509	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0650d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nGenerator@@3KA ; g_nGenerator
  06513	03 d1		 add	 edx, ecx
  06515	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nGenerator@@3KA, edx ; g_nGenerator
$L168005:

; 3304 : 
; 3305 : 		break;

  0651b	e9 12 02 00 00	 jmp	 $L166979
$L168014:

; 3308 : 			PackedData data( arg(2) );

  06520	51		 push	 ecx
  06521	8b cc		 mov	 ecx, esp
  06523	89 a5 54 fa ff
	ff		 mov	 DWORD PTR $T174529[ebp], esp
  06529	8b 45 08	 mov	 eax, DWORD PTR _args$[ebp]
  0652c	66 8b 50 04	 mov	 dx, WORD PTR [eax+4]
  06530	52		 push	 edx
  06531	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  06536	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _data$168015[ebp]
  0653c	e8 00 00 00 00	 call	 ??0PackedData@@QAE@VObjectID@@@Z ; PackedData::PackedData
  06541	c7 45 fc 36 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 54 ; 00000036H

; 3309 : 
; 3310 : 			// Friends
; 3311 : 			int nSize = data.getWord();

  06548	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _data$168015[ebp]
  0654e	e8 00 00 00 00	 call	 ?getWord@PackedData@@QAEFXZ ; PackedData::getWord
  06553	0f bf c0	 movsx	 eax, ax
  06556	89 85 18 ff ff
	ff		 mov	 DWORD PTR _nSize$168017[ebp], eax

; 3312 : 
; 3313 : 			if ( nSize ) {

  0655c	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _nSize$168017[ebp], 0
  06563	0f 84 93 00 00
	00		 je	 $L168022

; 3314 : 				for (int nLoop = 0;nLoop < nSize;nLoop++) {

  06569	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nLoop$168019[ebp], 0
  06573	eb 0f		 jmp	 SHORT $L168020
$L168021:
  06575	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _nLoop$168019[ebp]
  0657b	83 c1 01	 add	 ecx, 1
  0657e	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _nLoop$168019[ebp], ecx
$L168020:
  06584	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _nLoop$168019[ebp]
  0658a	3b 95 18 ff ff
	ff		 cmp	 edx, DWORD PTR _nSize$168017[ebp]
  06590	7d 6a		 jge	 SHORT $L168022

; 3315 : 					char* pName = data.getCharString();

  06592	6a 00		 push	 0
  06594	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _data$168015[ebp]
  0659a	e8 00 00 00 00	 call	 ?getCharString@PackedData@@QAEPADH@Z ; PackedData::getCharString
  0659f	89 85 08 ff ff
	ff		 mov	 DWORD PTR _pName$168023[ebp], eax

; 3316 : 
; 3317 : 					CString sName = pName;

  065a5	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _pName$168023[ebp]
  065ab	50		 push	 eax
  065ac	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _sName$168024[ebp]
  065b2	e8 00 00 00 00	 call	 ??0CString@@QAE@PBD@Z	; CString::CString
  065b7	c6 45 fc 37	 mov	 BYTE PTR __$EHRec$[ebp+8], 55 ; 00000037H

; 3318 : 
; 3319 : 					g_pFriendMgr->AddFriend( sName );

  065bb	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _sName$168024[ebp]
  065c1	51		 push	 ecx
  065c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pFriendMgr@@3PAVCFriendMgr@@A ; g_pFriendMgr
  065c8	e8 00 00 00 00	 call	 ?AddFriend@CFriendMgr@@QAEXAAVCString@@@Z ; CFriendMgr::AddFriend

; 3320 : 
; 3321 : 					delete pName;

  065cd	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _pName$168023[ebp]
  065d3	89 95 50 fa ff
	ff		 mov	 DWORD PTR $T174530[ebp], edx
  065d9	8b 85 50 fa ff
	ff		 mov	 eax, DWORD PTR $T174530[ebp]
  065df	50		 push	 eax
  065e0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  065e5	83 c4 04	 add	 esp, 4

; 3322 : 				}

  065e8	c6 45 fc 36	 mov	 BYTE PTR __$EHRec$[ebp+8], 54 ; 00000036H
  065ec	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _sName$168024[ebp]
  065f2	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  065f7	e9 79 ff ff ff	 jmp	 $L168021
$L168022:

; 3324 : 
; 3325 : 			// Foes
; 3326 : 			nSize = data.getWord();

  065fc	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _data$168015[ebp]
  06602	e8 00 00 00 00	 call	 ?getWord@PackedData@@QAEFXZ ; PackedData::getWord
  06607	0f bf c8	 movsx	 ecx, ax
  0660a	89 8d 18 ff ff
	ff		 mov	 DWORD PTR _nSize$168017[ebp], ecx

; 3327 : 
; 3328 : 			if ( nSize ) {

  06610	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _nSize$168017[ebp], 0
  06617	0f 84 95 00 00
	00		 je	 $L168030

; 3329 : 				for (int nLoop = 0;nLoop < nSize;nLoop++) {

  0661d	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nLoop$168027[ebp], 0
  06627	eb 0f		 jmp	 SHORT $L168028
$L168029:
  06629	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _nLoop$168027[ebp]
  0662f	83 c2 01	 add	 edx, 1
  06632	89 95 00 ff ff
	ff		 mov	 DWORD PTR _nLoop$168027[ebp], edx
$L168028:
  06638	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _nLoop$168027[ebp]
  0663e	3b 85 18 ff ff
	ff		 cmp	 eax, DWORD PTR _nSize$168017[ebp]
  06644	7d 6c		 jge	 SHORT $L168030

; 3330 : 					char* pName = data.getCharString();

  06646	6a 00		 push	 0
  06648	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _data$168015[ebp]
  0664e	e8 00 00 00 00	 call	 ?getCharString@PackedData@@QAEPADH@Z ; PackedData::getCharString
  06653	89 85 fc fe ff
	ff		 mov	 DWORD PTR _pName$168031[ebp], eax

; 3331 : 
; 3332 : 					CString sName = pName;

  06659	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _pName$168031[ebp]
  0665f	51		 push	 ecx
  06660	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _sName$168032[ebp]
  06666	e8 00 00 00 00	 call	 ??0CString@@QAE@PBD@Z	; CString::CString
  0666b	c6 45 fc 38	 mov	 BYTE PTR __$EHRec$[ebp+8], 56 ; 00000038H

; 3333 : 
; 3334 : 					g_pEnemyMgr->AddEnemy( sName, true );

  0666f	6a 01		 push	 1
  06671	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _sName$168032[ebp]
  06677	52		 push	 edx
  06678	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pEnemyMgr@@3PAVCEnemyMgr@@A ; g_pEnemyMgr
  0667e	e8 00 00 00 00	 call	 ?AddEnemy@CEnemyMgr@@QAEXAAVCString@@_N@Z ; CEnemyMgr::AddEnemy

; 3335 : 
; 3336 : 					delete pName;

  06683	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _pName$168031[ebp]
  06689	89 85 4c fa ff
	ff		 mov	 DWORD PTR $T174531[ebp], eax
  0668f	8b 8d 4c fa ff
	ff		 mov	 ecx, DWORD PTR $T174531[ebp]
  06695	51		 push	 ecx
  06696	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0669b	83 c4 04	 add	 esp, 4

; 3337 : 				}

  0669e	c6 45 fc 36	 mov	 BYTE PTR __$EHRec$[ebp+8], 54 ; 00000036H
  066a2	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _sName$168032[ebp]
  066a8	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  066ad	e9 77 ff ff ff	 jmp	 $L168029
$L168030:

; 3339 : 
; 3340 : 			// Spells
; 3341 : 			nSize = data.getLong();

  066b2	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _data$168015[ebp]
  066b8	e8 00 00 00 00	 call	 ?getLong@PackedData@@QAEHXZ ; PackedData::getLong
  066bd	89 85 18 ff ff
	ff		 mov	 DWORD PTR _nSize$168017[ebp], eax

; 3342 : 
; 3343 : 			if ( nSize ) {

  066c3	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _nSize$168017[ebp], 0
  066ca	74 54		 je	 SHORT $L168034

; 3344 : 				if ( g_pSpellList ) {

  066cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pSpellList@@3PAFA, 0 ; g_pSpellList
  066d3	74 1b		 je	 SHORT $L168035

; 3345 : 					delete g_pSpellList;

  066d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pSpellList@@3PAFA ; g_pSpellList
  066db	89 95 48 fa ff
	ff		 mov	 DWORD PTR $T174532[ebp], edx
  066e1	8b 85 48 fa ff
	ff		 mov	 eax, DWORD PTR $T174532[ebp]
  066e7	50		 push	 eax
  066e8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  066ed	83 c4 04	 add	 esp, 4
$L168035:

; 3347 : 
; 3348 : 				g_pSpellList = (Property*) malloc( nSize + 1 );

  066f0	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _nSize$168017[ebp]
  066f6	83 c1 01	 add	 ecx, 1
  066f9	51		 push	 ecx
  066fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  06700	83 c4 04	 add	 esp, 4
  06703	a3 00 00 00 00	 mov	 DWORD PTR ?g_pSpellList@@3PAFA, eax ; g_pSpellList

; 3349 : 
; 3350 : 				data.getArray( (char*) g_pSpellList, nSize );

  06708	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _nSize$168017[ebp]
  0670e	52		 push	 edx
  0670f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pSpellList@@3PAFA ; g_pSpellList
  06714	50		 push	 eax
  06715	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _data$168015[ebp]
  0671b	e8 00 00 00 00	 call	 ?getArray@PackedData@@QAEXPADH@Z ; PackedData::getArray
$L168034:

; 3352 : 		}

  06720	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  06727	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _data$168015[ebp]
  0672d	e8 00 00 00 00	 call	 ??1PackedData@@UAE@XZ	; PackedData::~PackedData
$L166979:

; 3471 : }

  06732	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06735	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0673c	8b e5		 mov	 esp, ebp
  0673e	5d		 pop	 ebp
  0673f	c3		 ret	 0
$L174593:
  06740	00 00 00 00	 DD	 $L166982
  06744	00 00 00 00	 DD	 $L166988
  06748	00 00 00 00	 DD	 $L167033
  0674c	00 00 00 00	 DD	 $L167051
  06750	00 00 00 00	 DD	 $L167059
  06754	00 00 00 00	 DD	 $L167120
  06758	00 00 00 00	 DD	 $L167063
  0675c	00 00 00 00	 DD	 $L167157
  06760	00 00 00 00	 DD	 $L167198
  06764	00 00 00 00	 DD	 $L167253
  06768	00 00 00 00	 DD	 $L167296
  0676c	00 00 00 00	 DD	 $L167308
  06770	00 00 00 00	 DD	 $L167460
  06774	00 00 00 00	 DD	 $L167461
  06778	00 00 00 00	 DD	 $L167488
  0677c	00 00 00 00	 DD	 $L167494
  06780	00 00 00 00	 DD	 $L167522
  06784	00 00 00 00	 DD	 $L167540
  06788	00 00 00 00	 DD	 $L167548
  0678c	00 00 00 00	 DD	 $L167574
  06790	00 00 00 00	 DD	 $L167567
  06794	00 00 00 00	 DD	 $L167602
  06798	00 00 00 00	 DD	 $L167587
  0679c	00 00 00 00	 DD	 $L167598
  067a0	00 00 00 00	 DD	 $L167668
  067a4	00 00 00 00	 DD	 $L167702
  067a8	00 00 00 00	 DD	 $L167723
  067ac	00 00 00 00	 DD	 $L167740
  067b0	00 00 00 00	 DD	 $L167768
  067b4	00 00 00 00	 DD	 $L167863
  067b8	00 00 00 00	 DD	 $L167821
  067bc	00 00 00 00	 DD	 $L167895
  067c0	00 00 00 00	 DD	 $L167917
  067c4	00 00 00 00	 DD	 $L167919
  067c8	00 00 00 00	 DD	 $L167942
  067cc	00 00 00 00	 DD	 $L167947
  067d0	00 00 00 00	 DD	 $L167975
  067d4	00 00 00 00	 DD	 $L167990
  067d8	00 00 00 00	 DD	 $L167879
  067dc	00 00 00 00	 DD	 $L167996
  067e0	00 00 00 00	 DD	 $L168014
$L174594:
  067e4	00 00 00 00	 DD	 $L167044
  067e8	00 00 00 00	 DD	 $L167046
  067ec	00 00 00 00	 DD	 $L167047
  067f0	00 00 00 00	 DD	 $L167049
  067f4	00 00 00 00	 DD	 $L167050
$L174595:
  067f8	00 00 00 00	 DD	 $L167080
  067fc	00 00 00 00	 DD	 $L167091
  06800	00 00 00 00	 DD	 $L167097
  06804	00 00 00 00	 DD	 $L167102
  06808	00 00 00 00	 DD	 $L167104
  0680c	00 00 00 00	 DD	 $L167106
  06810	00 00 00 00	 DD	 $L167108
  06814	00 00 00 00	 DD	 $L167114
  06818	00 00 00 00	 DD	 $L167118
$L174596:
  0681c	00 00 00 00	 DD	 $L167213
  06820	00 00 00 00	 DD	 $L167218
  06824	00 00 00 00	 DD	 $L167225
  06828	00 00 00 00	 DD	 $L167232
  0682c	00 00 00 00	 DD	 $L167239
  06830	00 00 00 00	 DD	 $L167246
$L174597:
  06834	00 00 00 00	 DD	 $L167265
  06838	00 00 00 00	 DD	 $L167293
  0683c	00 00 00 00	 DD	 $L167275
  06840	00 00 00 00	 DD	 $L167283
  06844	00 00 00 00	 DD	 $L167285
  06848	00 00 00 00	 DD	 $L167291
$L174598:
  0684c	00 00 00 00	 DD	 $L167324
  06850	00 00 00 00	 DD	 $L167342
  06854	00 00 00 00	 DD	 $L167359
  06858	00 00 00 00	 DD	 $L167374
  0685c	00 00 00 00	 DD	 $L167387
  06860	00 00 00 00	 DD	 $L167406
  06864	00 00 00 00	 DD	 $L167412
  06868	00 00 00 00	 DD	 $L167433
  0686c	00 00 00 00	 DD	 $L167449
  06870	00 00 00 00	 DD	 $L167451
$L174599:
  06874	00 00 00 00	 DD	 $L167472
  06878	00 00 00 00	 DD	 $L167480
  0687c	00 00 00 00	 DD	 $L167483
  06880	00 00 00 00	 DD	 $L167469
  06884	00 00 00 00	 DD	 $L167486
$L174600:
  06888	00 00 00 00	 DD	 $L167613
  0688c	00 00 00 00	 DD	 $L167628
  06890	00 00 00 00	 DD	 $L167635
  06894	00 00 00 00	 DD	 $L167646
  06898	00 00 00 00	 DD	 $L167657
$L174601:
  0689c	00 00 00 00	 DD	 $L167678
  068a0	00 00 00 00	 DD	 $L167681
  068a4	00 00 00 00	 DD	 $L167684
  068a8	00 00 00 00	 DD	 $L167686
$L174602:
  068ac	00 00 00 00	 DD	 $L167782
  068b0	00 00 00 00	 DD	 $L167788
  068b4	00 00 00 00	 DD	 $L167796
  068b8	00 00 00 00	 DD	 $L167802
  068bc	00 00 00 00	 DD	 $L167808
  068c0	00 00 00 00	 DD	 $L167810
  068c4	00 00 00 00	 DD	 $L167812
  068c8	00 00 00 00	 DD	 $L167817
$L174603:
  068cc	00 00 00 00	 DD	 $L167836
  068d0	00 00 00 00	 DD	 $L167843
  068d4	00 00 00 00	 DD	 $L167844
  068d8	00 00 00 00	 DD	 $L167845
  068dc	00 00 00 00	 DD	 $L167846
  068e0	00 00 00 00	 DD	 $L167847
  068e4	00 00 00 00	 DD	 $L167833
  068e8	00 00 00 00	 DD	 $L167851
$L174604:
  068ec	00 00 00 00	 DD	 $L168008
  068f0	00 00 00 00	 DD	 $L168009
  068f4	00 00 00 00	 DD	 $L168010
  068f8	00 00 00 00	 DD	 $L168011
  068fc	00 00 00 00	 DD	 $L168012
  06900	00 00 00 00	 DD	 $L168013
_TEXT	ENDS
text$x	SEGMENT
$L174533:
  00082	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR $T174125[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0008e	c3		 ret	 0
$L174534:
  0008f	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T174129[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0009b	c3		 ret	 0
$L174535:
  0009c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR $T174135[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000a8	c3		 ret	 0
$L174536:
  000a9	8d 4d c8	 lea	 ecx, DWORD PTR _strNull$167053[ebp]
  000ac	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  000b1	c3		 ret	 0
$L174537:
  000b2	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR $T174145[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000be	c3		 ret	 0
$L174538:
  000bf	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR $T174158[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000cb	c3		 ret	 0
$L174539:
  000cc	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR $T174162[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000d8	c3		 ret	 0
$L174540:
  000d9	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR $T174178[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000e5	c3		 ret	 0
$L174541:
  000e6	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR $T174183[ebp]
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000f2	c3		 ret	 0
$L174542:
  000f3	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR $T174187[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000ff	c3		 ret	 0
$L174543:
  00100	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR $T174192[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0010c	c3		 ret	 0
$L174544:
  0010d	8d 4d 9c	 lea	 ecx, DWORD PTR _packed$167206[ebp]
  00110	e8 00 00 00 00	 call	 ??1PackedData@@UAE@XZ	; PackedData::~PackedData
  00115	c3		 ret	 0
$L174545:
  00116	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR $T174201[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00122	c3		 ret	 0
$L174546:
  00123	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR $T174205[ebp]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0012f	c3		 ret	 0
$L174547:
  00130	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR $T174209[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0013c	c3		 ret	 0
$L174548:
  0013d	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR $T174213[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00149	c3		 ret	 0
$L174549:
  0014a	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR $T174217[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00156	c3		 ret	 0
$L174550:
  00157	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR $T174221[ebp]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00163	c3		 ret	 0
$L174551:
  00164	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR $T174225[ebp]
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00170	c3		 ret	 0
$L174552:
  00171	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR $T174231[ebp]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0017d	c3		 ret	 0
$L174553:
  0017e	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR $T174235[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0018a	c3		 ret	 0
$L174554:
  0018b	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR $T174241[ebp]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00197	c3		 ret	 0
$L174555:
  00198	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR $T174254[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001a4	c3		 ret	 0
$L174556:
  001a5	8b 85 70 fd ff
	ff		 mov	 eax, DWORD PTR $T174267[ebp]
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001b1	c3		 ret	 0
$L174557:
  001b2	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR $T174278[ebp]
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001be	c3		 ret	 0
$L174558:
  001bf	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR $T174286[ebp]
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001cb	c3		 ret	 0
$L174559:
  001cc	8b 85 04 fd ff
	ff		 mov	 eax, DWORD PTR $T174300[ebp]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001d8	c3		 ret	 0
$L174560:
  001d9	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR $T174305[ebp]
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001e5	c3		 ret	 0
$L174561:
  001e6	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR $T174321[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001f2	c3		 ret	 0
$L174562:
  001f3	8b 85 88 fc ff
	ff		 mov	 eax, DWORD PTR $T174337[ebp]
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001ff	c3		 ret	 0
$L174563:
  00200	8b 85 70 fc ff
	ff		 mov	 eax, DWORD PTR $T174345[ebp]
  00206	50		 push	 eax
  00207	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0020c	c3		 ret	 0
$L174564:
  0020d	8b 85 64 fc ff
	ff		 mov	 eax, DWORD PTR $T174350[ebp]
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00219	c3		 ret	 0
$L174565:
  0021a	8b 85 54 fc ff
	ff		 mov	 eax, DWORD PTR $T174356[ebp]
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00226	59		 pop	 ecx
  00227	c3		 ret	 0
$L174566:
  00228	8b 85 38 fc ff
	ff		 mov	 eax, DWORD PTR $T174365[ebp]
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00234	c3		 ret	 0
$L174567:
  00235	8b 85 2c fc ff
	ff		 mov	 eax, DWORD PTR $T174370[ebp]
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00241	c3		 ret	 0
$L174568:
  00242	8b 85 20 fc ff
	ff		 mov	 eax, DWORD PTR $T174375[ebp]
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0024e	c3		 ret	 0
$L174569:
  0024f	8b 85 10 fc ff
	ff		 mov	 eax, DWORD PTR $T174381[ebp]
  00255	50		 push	 eax
  00256	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0025b	c3		 ret	 0
$L174570:
  0025c	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR $T174389[ebp]
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00268	c3		 ret	 0
$L174571:
  00269	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR $T174396[ebp]
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00275	59		 pop	 ecx
  00276	c3		 ret	 0
$L174572:
  00277	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR $T174400[ebp]
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00283	59		 pop	 ecx
  00284	c3		 ret	 0
$L174573:
  00285	8b 85 c8 fb ff
	ff		 mov	 eax, DWORD PTR $T174407[ebp]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00291	c3		 ret	 0
$L174574:
  00292	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR $T174429[ebp]
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0029e	c3		 ret	 0
$L174575:
  0029f	8b 85 68 fb ff
	ff		 mov	 eax, DWORD PTR $T174435[ebp]
  002a5	50		 push	 eax
  002a6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002ab	59		 pop	 ecx
  002ac	c3		 ret	 0
$L174576:
  002ad	8b 85 50 fb ff
	ff		 mov	 eax, DWORD PTR $T174442[ebp]
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  002b9	c3		 ret	 0
$L174577:
  002ba	8b 85 3c fb ff
	ff		 mov	 eax, DWORD PTR $T174449[ebp]
  002c0	50		 push	 eax
  002c1	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  002c6	c3		 ret	 0
$L174578:
  002c7	8b 85 1c fb ff
	ff		 mov	 eax, DWORD PTR $T174459[ebp]
  002cd	50		 push	 eax
  002ce	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  002d3	c3		 ret	 0
$L174579:
  002d4	8b 85 dc fa ff
	ff		 mov	 eax, DWORD PTR $T174479[ebp]
  002da	50		 push	 eax
  002db	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  002e0	c3		 ret	 0
$L174580:
  002e1	8b 85 cc fa ff
	ff		 mov	 eax, DWORD PTR $T174485[ebp]
  002e7	50		 push	 eax
  002e8	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  002ed	c3		 ret	 0
$L174581:
  002ee	8b 85 bc fa ff
	ff		 mov	 eax, DWORD PTR $T174491[ebp]
  002f4	50		 push	 eax
  002f5	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  002fa	c3		 ret	 0
$L174582:
  002fb	8b 85 ac fa ff
	ff		 mov	 eax, DWORD PTR $T174497[ebp]
  00301	50		 push	 eax
  00302	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00307	c3		 ret	 0
$L174583:
  00308	8b 85 90 fa ff
	ff		 mov	 eax, DWORD PTR $T174506[ebp]
  0030e	50		 push	 eax
  0030f	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00314	c3		 ret	 0
$L174584:
  00315	8b 85 74 fa ff
	ff		 mov	 eax, DWORD PTR $T174515[ebp]
  0031b	50		 push	 eax
  0031c	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00321	c3		 ret	 0
$L174585:
  00322	8b 85 64 fa ff
	ff		 mov	 eax, DWORD PTR $T174521[ebp]
  00328	50		 push	 eax
  00329	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0032e	c3		 ret	 0
$L174586:
  0032f	8b 85 5c fa ff
	ff		 mov	 eax, DWORD PTR $T174525[ebp]
  00335	50		 push	 eax
  00336	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0033b	c3		 ret	 0
$L174587:
  0033c	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _data$168015[ebp]
  00342	e8 00 00 00 00	 call	 ??1PackedData@@UAE@XZ	; PackedData::~PackedData
  00347	c3		 ret	 0
$L174588:
  00348	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _sName$168024[ebp]
  0034e	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00353	c3		 ret	 0
$L174589:
  00354	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _sName$168032[ebp]
  0035a	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0035f	c3		 ret	 0
$L174592:
  00360	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T174591
  00365	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?KDialog@@YAXPAF@Z ENDP					; KDialog
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 27   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8
??2CObject@@SGPAXI@Z PROC NEAR				; CObject::operator new, COMDAT

; 33   : 	{ return ::operator new(nSize); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nSize$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??2CObject@@SGPAXI@Z ENDP				; CObject::operator new
_TEXT	ENDS
EXTRN	?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ:NEAR ; AfxGetModuleState
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT
?AfxGetApp@@YGPAVCWinApp@@XZ PROC NEAR			; AfxGetApp, COMDAT

; 17   : 	{ return afxCurrentWinApp; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState
  00008	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?AfxGetApp@@YGPAVCWinApp@@XZ ENDP			; AfxGetApp
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT
_initX$ = 8
_initY$ = 12
_this$ = -4
??0CPoint@@QAE@HH@Z PROC NEAR				; CPoint::CPoint, COMDAT

; 85   : 	{ x = initX; y = initY; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _initX$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _initY$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0CPoint@@QAE@HH@Z ENDP				; CPoint::CPoint
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0StringID@@QAE@ABV0@@Z PROC NEAR			; StringID::StringID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0StringID@@QAE@ABV0@@Z ENDP				; StringID::StringID
_TEXT	ENDS
PUBLIC	??0FakeSOL_ListID@@QAE@ABU0@@Z			; FakeSOL_ListID::FakeSOL_ListID
;	COMDAT ??0SOL_ListID@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_ListID@@QAE@ABU0@@Z PROC NEAR			; SOL_ListID::SOL_ListID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeSOL_ListID@@QAE@ABU0@@Z ; FakeSOL_ListID::FakeSOL_ListID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0SOL_ListID@@QAE@ABU0@@Z ENDP				; SOL_ListID::SOL_ListID
_TEXT	ENDS
PUBLIC	??0CSCI_PackedData@@QAE@ABV0@@Z			; CSCI_PackedData::CSCI_PackedData
;	COMDAT ??0CSCI_NetMsg@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_NetMsg@@QAE@ABV0@@Z PROC NEAR			; CSCI_NetMsg::CSCI_NetMsg, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_PackedData@@QAE@ABV0@@Z ; CSCI_PackedData::CSCI_PackedData
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_NetMsg@@QAE@ABV0@@Z ENDP			; CSCI_NetMsg::CSCI_NetMsg
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@ABV0@@Z			; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_LongInt@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_LongInt@@QAE@ABV0@@Z PROC NEAR			; CSCI_LongInt::CSCI_LongInt, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABV0@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_LongInt@@QAE@ABV0@@Z ENDP			; CSCI_LongInt::CSCI_LongInt
_TEXT	ENDS
;	COMDAT ??0ServerInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ServerInfo@@QAE@XZ PROC NEAR				; ServerInfo::ServerInfo, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 02	 add	 ecx, 2
  00015	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 04	 add	 ecx, 4
  00020	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 06	 add	 ecx, 6
  0002b	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 08	 add	 ecx, 8
  00036	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??0ServerInfo@@QAE@XZ ENDP				; ServerInfo::ServerInfo
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0FakeSOL_ListID@@QAE@ABU0@@Z PROC NEAR		; FakeSOL_ListID::FakeSOL_ListID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeSOL_ListID@@QAE@ABU0@@Z ENDP			; FakeSOL_ListID::FakeSOL_ListID
_TEXT	ENDS
PUBLIC	??0CSCI_ByteArray@@QAE@ABV0@@Z			; CSCI_ByteArray::CSCI_ByteArray
;	COMDAT ??0CSCI_PackedData@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_PackedData@@QAE@ABV0@@Z PROC NEAR		; CSCI_PackedData::CSCI_PackedData, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_ByteArray@@QAE@ABV0@@Z ; CSCI_ByteArray::CSCI_ByteArray
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_PackedData@@QAE@ABV0@@Z ENDP			; CSCI_PackedData::CSCI_PackedData
_TEXT	ENDS
PUBLIC	??0CSCI_Array@@QAE@ABV0@@Z			; CSCI_Array::CSCI_Array
;	COMDAT ??0CSCI_ByteArray@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_ByteArray@@QAE@ABV0@@Z PROC NEAR		; CSCI_ByteArray::CSCI_ByteArray, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Array@@QAE@ABV0@@Z ; CSCI_Array::CSCI_Array
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_ByteArray@@QAE@ABV0@@Z ENDP			; CSCI_ByteArray::CSCI_ByteArray
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Array@@QAE@ABV0@@Z PROC NEAR			; CSCI_Array::CSCI_Array, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABV0@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Array@@QAE@ABV0@@Z ENDP				; CSCI_Array::CSCI_Array
_TEXT	ENDS
EXTRN	__imp__BringWindowToTop@4:NEAR
;	COMDAT ?BringWindowToTop@CWnd@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?BringWindowToTop@CWnd@@QAEXXZ PROC NEAR		; CWnd::BringWindowToTop, COMDAT

; 94   : 	{ ASSERT(::IsWindow(m_hWnd)); ::BringWindowToTop(m_hWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BringWindowToTop@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?BringWindowToTop@CWnd@@QAEXXZ ENDP			; CWnd::BringWindowToTop
_TEXT	ENDS
EXTRN	__imp__UpdateWindow@4:NEAR
;	COMDAT ?UpdateWindow@CWnd@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?UpdateWindow@CWnd@@QAEXXZ PROC NEAR			; CWnd::UpdateWindow, COMDAT

; 118  : 	{ ASSERT(::IsWindow(m_hWnd)); ::UpdateWindow(m_hWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UpdateWindow@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?UpdateWindow@CWnd@@QAEXXZ ENDP				; CWnd::UpdateWindow
_TEXT	ENDS
EXTRN	__imp__IsWindowVisible@4:NEAR
;	COMDAT ?IsWindowVisible@CWnd@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsWindowVisible@CWnd@@QBEHXZ PROC NEAR			; CWnd::IsWindowVisible, COMDAT

; 140  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::IsWindowVisible(m_hWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindowVisible@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsWindowVisible@CWnd@@QBEHXZ ENDP			; CWnd::IsWindowVisible
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
EXTRN	?Free@MemoryMgr@@QAEXG@Z:NEAR			; MemoryMgr::Free
;	COMDAT ?Free@MemID@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Free@MemID@@QAEXXZ PROC NEAR				; MemID::Free, COMDAT

; 32   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 		if (handle) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 1a		 je	 SHORT $L113991

; 34   : 			memMgr->Free(handle);

  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	66 8b 02	 mov	 ax, WORD PTR [edx]
  00019	50		 push	 eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00020	e8 00 00 00 00	 call	 ?Free@MemoryMgr@@QAEXG@Z ; MemoryMgr::Free

; 35   : 			handle = 0;

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
$L113991:

; 37   : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?Free@MemID@@QAEXXZ ENDP				; MemID::Free
_TEXT	ENDS
EXTRN	?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z:NEAR ; MemoryMgr::Alloc
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT
_type$ = 8
_size$ = 12
_a$ = 16
_num$ = 20
_client$ = 24
_initChar$ = 28
_h$ = 32
_this$ = -4
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z PROC NEAR ; MemID::Get, COMDAT

; 42   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		handle = memMgr->Alloc(type | a, size, num, client, initChar, h);

  00007	8b 45 20	 mov	 eax, DWORD PTR _h$[ebp]
  0000a	50		 push	 eax
  0000b	8a 4d 1c	 mov	 cl, BYTE PTR _initChar$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR _client$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR _num$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0001e	0b 55 10	 or	 edx, DWORD PTR _a$[ebp]
  00021	52		 push	 edx
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00028	e8 00 00 00 00	 call	 ?Alloc@MemoryMgr@@QAEGIIIPAUMemClient@@DW4ReservedHandle@@@Z ; MemoryMgr::Alloc
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	66 89 01	 mov	 WORD PTR [ecx], ax

; 44   : 	}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 1c 00	 ret	 28			; 0000001cH
?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z ENDP ; MemID::Get
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
??7MemID@@QBEHXZ PROC NEAR				; MemID::operator!, COMDAT

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 		return handle == 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	8b c1		 mov	 eax, ecx
  00011	f7 d8		 neg	 eax
  00013	1b c0		 sbb	 eax, eax
  00015	40		 inc	 eax

; 120  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??7MemID@@QBEHXZ ENDP					; MemID::operator!
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT
_handle$ = 12
??2@YAPAXIG@Z PROC NEAR					; operator new, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 	return memMgr->GetAddr(handle);

  00003	66 8b 45 0c	 mov	 ax, WORD PTR _handle$[ebp]
  00007	50		 push	 eax
  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  0000e	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 188  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??2@YAPAXIG@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??0FakeArrayID@@QAE@G@Z				; FakeArrayID::FakeArrayID
;	COMDAT ??0ArrayID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ArrayID@@QAE@G@Z PROC NEAR				; ArrayID::ArrayID, COMDAT

; 38   : 	ArrayID(SOL_Handle h) : FakeArrayID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeArrayID@@QAE@G@Z	; FakeArrayID::FakeArrayID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ArrayID@@QAE@G@Z ENDP				; ArrayID::ArrayID
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeArrayID@@QAE@G@Z PROC NEAR			; FakeArrayID::FakeArrayID, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeArrayID@@QAE@G@Z ENDP				; FakeArrayID::FakeArrayID
_TEXT	ENDS
PUBLIC	??DFakeArrayID@@QBEPAUArrayHeader@@XZ		; FakeArrayID::operator*
;	COMDAT ?Data@ArrayID@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4
?Data@ArrayID@@QAEPAXXZ PROC NEAR			; ArrayID::Data, COMDAT

; 64   : 	void *Data ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 		return ((char *)**this) + sizeof ( ArrayHeader );

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DFakeArrayID@@QBEPAUArrayHeader@@XZ ; FakeArrayID::operator*
  0000f	83 c0 04	 add	 eax, 4

; 66   : 	}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Data@ArrayID@@QAEPAXXZ ENDP				; ArrayID::Data
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT
_this$ = -4
??DFakeArrayID@@QBEPAUArrayHeader@@XZ PROC NEAR		; FakeArrayID::operator*, COMDAT

; 34   : FakeTemplateID ( FakeArrayID, ArrayHeader, MemArray )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??DFakeArrayID@@QBEPAUArrayHeader@@XZ ENDP		; FakeArrayID::operator*
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1Array@@QAE@XZ PROC NEAR				; Array::~Array, COMDAT

; 88   : 	~Array() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1Array@@QAE@XZ ENDP					; Array::~Array
_TEXT	ENDS
PUBLIC	??0Array@@QAE@XZ				; Array::Array
;	COMDAT xdata$x
; File C:\Documents and Settings\don\Desktop\sciw\Interp\list.hpp
xdata$x	SEGMENT
$T174640 DD	019930520H
	DD	01H
	DD	FLAT:$T174642
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T174642 DD	0ffffffffH
	DD	FLAT:$L174638
xdata$x	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??0SOL_List@@QAE@XZ PROC NEAR				; SOL_List::SOL_List, COMDAT

; 19   : 	SOL_List() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L174641
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0Array@@QAE@XZ	; Array::Array
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 20   : 		size() = 0;

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?size@SOL_List@@QAEAAHXZ ; SOL_List::size
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 21   : 	} 

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L174638:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1Array@@QAE@XZ	; Array::~Array
  00008	c3		 ret	 0
$L174641:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T174640
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0SOL_List@@QAE@XZ ENDP				; SOL_List::SOL_List
PUBLIC	?dataID@Array@@QAEXVMemID@@@Z			; Array::dataID
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8
??0Array@@QAE@XZ PROC NEAR				; Array::Array, COMDAT

; 74   : 	Array() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 75   : 		dataID ( 0 );

  00011	51		 push	 ecx
  00012	8b cc		 mov	 ecx, esp
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?dataID@Array@@QAEXVMemID@@@Z ; Array::dataID

; 76   : 	}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0Array@@QAE@XZ ENDP					; Array::Array
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT
_memID$ = 8
_this$ = -4
?dataID@Array@@QAEXVMemID@@@Z PROC NEAR			; Array::dataID, COMDAT

; 111  : 	void dataID ( MemID memID ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 		_dataID = memID;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _memID$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 113  : 	}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?dataID@Array@@QAEXVMemID@@@Z ENDP			; Array::dataID
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT
_this$ = -4
?size@SOL_List@@QAEAAHXZ PROC NEAR			; SOL_List::size, COMDAT

; 24   : 	inline int &size ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return _size;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4

; 26   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?size@SOL_List@@QAEAAHXZ ENDP				; SOL_List::size
_TEXT	ENDS
;	COMDAT ??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ PROC NEAR		; FakeSOL_ListID::operator->, COMDAT

; 84   : FakeTemplateID(FakeSOL_ListID, SOL_List, MemList)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeSOL_ListID@@QBEPAVSOL_List@@XZ ENDP		; FakeSOL_ListID::operator->
_TEXT	ENDS
PUBLIC	??0FakeSOL_ListID@@QAE@G@Z			; FakeSOL_ListID::FakeSOL_ListID
;	COMDAT ??0SOL_ListID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0SOL_ListID@@QAE@G@Z PROC NEAR			; SOL_ListID::SOL_ListID, COMDAT

; 88   : 	SOL_ListID(SOL_Handle h) : FakeSOL_ListID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeSOL_ListID@@QAE@G@Z ; FakeSOL_ListID::FakeSOL_ListID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0SOL_ListID@@QAE@G@Z ENDP				; SOL_ListID::SOL_ListID
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeSOL_ListID@@QAE@G@Z PROC NEAR			; FakeSOL_ListID::FakeSOL_ListID, COMDAT

; 84   : FakeTemplateID(FakeSOL_ListID, SOL_List, MemList)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeSOL_ListID@@QAE@G@Z ENDP				; FakeSOL_ListID::FakeSOL_ListID
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@XZ				; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ObjectID@@QAE@XZ PROC NEAR				; ObjectID::ObjectID, COMDAT

; 227  : 	ObjectID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@XZ	; FakeObjectID::FakeObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ObjectID@@QAE@XZ ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeObjectID@@QAE@XZ PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeObjectID@@QAE@XZ ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@ABVMemID@@@Z		; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ObjectID@@QAE@ABVMemID@@@Z PROC NEAR			; ObjectID::ObjectID, COMDAT

; 228  : 	ObjectID(const MemID& id) : FakeObjectID(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@ABVMemID@@@Z ; FakeObjectID::FakeObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ObjectID@@QAE@ABVMemID@@@Z ENDP			; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0FakeObjectID@@QAE@ABVMemID@@@Z PROC NEAR		; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@ABVMemID@@@Z ENDP			; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ObjectID@@QAE@ABV0@@Z PROC NEAR			; ObjectID::ObjectID, COMDAT

; 229  : 	ObjectID(const ObjectID& id) : FakeObjectID((MemID&) id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@ABVMemID@@@Z ; FakeObjectID::FakeObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ObjectID@@QAE@ABV0@@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	?IsValid@MemID@@QBEHXZ				; MemID::IsValid
EXTRN	?GetMemType@MemID@@QBE?AW4MemType@@XZ:NEAR	; MemID::GetMemType
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsObject@ObjectID@@QBEHXZ PROC NEAR			; ObjectID::IsObject, COMDAT

; 247  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 		return IsValid() && GetMemType() == MemObject;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00011	85 c0		 test	 eax, eax
  00013	74 16		 je	 SHORT $L174660
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0001d	83 f8 34	 cmp	 eax, 52			; 00000034H
  00020	75 09		 jne	 SHORT $L174660
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  00029	eb 07		 jmp	 SHORT $L174661
$L174660:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L174661:
  00032	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 249  : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?IsObject@ObjectID@@QBEHXZ ENDP				; ObjectID::IsObject
_TEXT	ENDS
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@MemID@@QBEHXZ PROC NEAR			; MemID::IsValid, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return memMgr->IsValid(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid

; 64   : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IsValid@MemID@@QBEHXZ ENDP				; MemID::IsValid
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L174664
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L174664
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L174664
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L174664
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L174665
$L174664:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L174665:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
PUBLIC	?GetProperty@Object@@QAEFG@Z			; Object::GetProperty
PUBLIC	??CFakeObjectID@@QBEPAUObject@@XZ		; FakeObjectID::operator->
PUBLIC	?AssureValid@ObjectID@@QBEXXZ			; ObjectID::AssureValid
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@ObjectID@@QBEFG@Z PROC NEAR		; ObjectID::GetProperty, COMDAT

; 290  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 		//	get a property given a selector
; 292  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 293  : 		return (*this)->GetProperty(selector);

  0000f	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty

; 294  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetProperty@ObjectID@@QBEFG@Z ENDP			; ObjectID::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddrCheck@Object@@QAEPAFG@Z		; Object::GetPropAddrCheck
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@Object@@QAEFG@Z PROC NEAR			; Object::GetProperty, COMDAT

; 170  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		//	get a property given a selector
; 172  : 		return *GetPropAddrCheck(selector);

  00007	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00014	66 8b 00	 mov	 ax, WORD PTR [eax]

; 173  : 	}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetProperty@Object@@QAEFG@Z ENDP			; Object::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddr@Object@@QAEPAFG@Z			; Object::GetPropAddr
EXTRN	?Fatal@MsgMgr@@QAAXHZZ:NEAR			; MsgMgr::Fatal
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -8
_property$ = -4
?GetPropAddrCheck@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddrCheck, COMDAT

; 153  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 		//	get a property's address, checking for valid property
; 155  : 		Property* property = GetPropAddr(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddr@Object@@QAEPAFG@Z ; Object::GetPropAddr
  00016	89 45 fc	 mov	 DWORD PTR _property$[ebp], eax

; 156  : 		if (!property)

  00019	83 7d fc 00	 cmp	 DWORD PTR _property$[ebp], 0
  0001d	75 1b		 jne	 SHORT $L116903

; 157  : 			msgMgr->Fatal(Msg_InvalidProperty, selector);

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _selector$[ebp]
  00022	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00028	51		 push	 ecx
  00029	6a 29		 push	 41			; 00000029H
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
$L116903:

; 158  : 		return property;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _property$[ebp]

; 159  : 	}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetPropAddrCheck@Object@@QAEPAFG@Z ENDP		; Object::GetPropAddrCheck
_TEXT	ENDS
PUBLIC	?selectorDict@Object@@QAEPAVSelectorDict@@XZ	; Object::selectorDict
PUBLIC	??AObject@@QAEAAFH@Z				; Object::operator[]
EXTRN	?get@SelectorDict@@QAEHG@Z:NEAR			; SelectorDict::get
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -8
_index$ = -4
?GetPropAddr@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddr, COMDAT

; 127  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 		int index = selectorDict()->get ( selector );

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?get@SelectorDict@@QAEHG@Z ; SelectorDict::get
  0001d	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 129  : 
; 130  : 		if ( index != -1 && !selectorDict()->script )

  00020	83 7d fc ff	 cmp	 DWORD PTR _index$[ebp], -1
  00024	74 2b		 je	 SHORT $L116894
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  0002e	33 c9		 xor	 ecx, ecx
  00030	66 8b 48 16	 mov	 cx, WORD PTR [eax+22]
  00034	85 c9		 test	 ecx, ecx
  00036	75 19		 jne	 SHORT $L116894

; 131  : 			return &(*this)[selectorDict()->offset]; 

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00040	33 d2		 xor	 edx, edx
  00042	66 8b 50 14	 mov	 dx, WORD PTR [eax+20]
  00046	52		 push	 edx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ??AObject@@QAEAAFH@Z	; Object::operator[]
  0004f	eb 02		 jmp	 SHORT $L116892
$L116894:

; 132  : 
; 133  : 		return 0;

  00051	33 c0		 xor	 eax, eax
$L116892:

; 134  : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?GetPropAddr@Object@@QAEPAFG@Z ENDP			; Object::GetPropAddr
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT
_this$ = -4
?selectorDict@Object@@QAEPAVSelectorDict@@XZ PROC NEAR	; Object::selectorDict, COMDAT

; 102  : 	SelectorDict *selectorDict ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 		return _selectorDict;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 104  : 	};

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?selectorDict@Object@@QAEPAVSelectorDict@@XZ ENDP	; Object::selectorDict
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
??AObject@@QAEAAFH@Z PROC NEAR				; Object::operator[], COMDAT

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		//	get a reference to a property given the number of the property
; 119  : 		return ((Property*) this)[index];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 120  : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??AObject@@QAEAAFH@Z ENDP				; Object::operator[]
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeObjectID@@QBEPAUObject@@XZ PROC NEAR		; FakeObjectID::operator->, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeObjectID@@QBEPAUObject@@XZ ENDP			; FakeObjectID::operator->
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssureValid@ObjectID@@QBEXXZ PROC NEAR			; ObjectID::AssureValid, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 239  : 		if (!IsObject())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  0000f	85 c0		 test	 eax, eax
  00011	75 1e		 jne	 SHORT $L117062

; 240  : 			msgMgr->Fatal(Msg_NotObject, (int) *this);

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0001b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00020	50		 push	 eax
  00021	6a 2f		 push	 47			; 0000002fH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L117062:

; 241  : 	}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?AssureValid@ObjectID@@QBEXXZ ENDP			; ObjectID::AssureValid
_TEXT	ENDS
EXTRN	?RespondsTo@Object@@QAEHG@Z:NEAR		; Object::RespondsTo
;	COMDAT ?RespondsTo@ObjectID@@QBEHG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?RespondsTo@ObjectID@@QBEHG@Z PROC NEAR			; ObjectID::RespondsTo, COMDAT

; 315  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 316  : 		//	return whether 'selector' is a property or method of us or our
; 317  : 		//	superclasses
; 318  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 319  : 		return (*this)->RespondsTo(selector);

  0000f	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?RespondsTo@Object@@QAEHG@Z ; Object::RespondsTo

; 320  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?RespondsTo@ObjectID@@QBEHG@Z ENDP			; ObjectID::RespondsTo
_TEXT	ENDS
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\textid.hpp
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4
??DTextID@@QAEPADXZ PROC NEAR				; TextID::operator*, COMDAT

; 24   : 	char	*operator *() { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return handle ? (char *)MemID::operator*() : ""; 

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	33 c9		 xor	 ecx, ecx
  0000e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0d		 je	 SHORT $L174676
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0001d	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00020	eb 07		 jmp	 SHORT $L174677
$L174676:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L174677:
  00029	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 26   : 	}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??DTextID@@QAEPADXZ ENDP				; TextID::operator*
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0StringID@@QAE@ABVMemID@@@Z PROC NEAR			; StringID::StringID, COMDAT

; 58   : 	StringID ( const MemID &id ) : MemID ( id ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0StringID@@QAE@ABVMemID@@@Z ENDP			; StringID::StringID
_TEXT	ENDS
;	COMDAT ??DStringID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -16
_obj$ = -4
$T174681 = -8
$T174682 = -12
??DStringID@@QAEPADXZ PROC NEAR				; StringID::operator*, COMDAT

; 63   : 	char * operator *() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 		ObjectID obj ( handle );

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	51		 push	 ecx
  00010	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  00013	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 65   : 
; 66   : 		if ( obj.IsObject() ) {

  00018	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  0001b	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  00020	85 c0		 test	 eax, eax
  00022	74 23		 je	 SHORT $L117287

; 67   : 			return *(TextID)obj->GetProperty ( s_data );

  00024	6a 71		 push	 113			; 00000071H
  00026	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  00029	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0002e	8b c8		 mov	 ecx, eax
  00030	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty
  00035	50		 push	 eax
  00036	8d 4d f8	 lea	 ecx, DWORD PTR $T174681[ebp]
  00039	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00045	eb 16		 jmp	 SHORT $L117285
$L117287:

; 69   : 
; 70   : 		return *(TextID)handle;

  00047	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	66 8b 02	 mov	 ax, WORD PTR [edx]
  0004d	50		 push	 eax
  0004e	8d 4d f4	 lea	 ecx, DWORD PTR $T174682[ebp]
  00051	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
$L117285:

; 71   : 	}

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??DStringID@@QAEPADXZ ENDP				; StringID::operator*
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Object@@QAE@G@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 13   : 	CSCI_Object(SOL_Handle h) : ObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@G@Z ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	?SetProperty@ObjectID@@QBEXGF@Z			; ObjectID::SetProperty
;	COMDAT ?set_scratch@CSCI_Object@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_scratch@CSCI_Object@@QAEXF@Z PROC NEAR		; CSCI_Object::set_scratch, COMDAT

; 43   : 	void set_scratch( Property value ) { SetProperty ( s_scratch, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 8c 00 00 00	 push	 140			; 0000008cH
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_scratch@CSCI_Object@@QAEXF@Z ENDP			; CSCI_Object::set_scratch
_TEXT	ENDS
PUBLIC	?SetProperty@Object@@QAEXGF@Z			; Object::SetProperty
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT
_selector$ = 8
_value$ = 12
_this$ = -4
?SetProperty@ObjectID@@QBEXGF@Z PROC NEAR		; ObjectID::SetProperty, COMDAT

; 340  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 341  : 		//	set a property given a selector
; 342  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 343  : 		(*this)->SetProperty(selector, value);

  0000f	66 8b 45 0c	 mov	 ax, WORD PTR _value$[ebp]
  00013	50		 push	 eax
  00014	66 8b 4d 08	 mov	 cx, WORD PTR _selector$[ebp]
  00018	51		 push	 ecx
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ?SetProperty@Object@@QAEXGF@Z ; Object::SetProperty

; 344  : 	}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?SetProperty@ObjectID@@QBEXGF@Z ENDP			; ObjectID::SetProperty
_TEXT	ENDS
PUBLIC	?SetGraphicsUpdate@Object@@QAEXXZ		; Object::SetGraphicsUpdate
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT
_selector$ = 8
_value$ = 12
_this$ = -12
_property$ = -8
_index$ = -4
?SetProperty@Object@@QAEXGF@Z PROC NEAR			; Object::SetProperty, COMDAT

; 206  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		//	set a property given a selector
; 208  : 		Property* property = GetPropAddrCheck(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00016	89 45 f8	 mov	 DWORD PTR _property$[ebp], eax

; 209  : 		int index = property - (Property*) this;

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _property$[ebp]
  0001c	2b 4d f4	 sub	 ecx, DWORD PTR _this$[ebp]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4d fc	 mov	 DWORD PTR _index$[ebp], ecx

; 210  : 		if (index <= MaxGraphUpdateIndex && index >= MinGraphUpdateIndex)

  00024	83 7d fc 2b	 cmp	 DWORD PTR _index$[ebp], 43 ; 0000002bH
  00028	7f 0e		 jg	 SHORT $L116927
  0002a	83 7d fc 18	 cmp	 DWORD PTR _index$[ebp], 24 ; 00000018H
  0002e	7c 08		 jl	 SHORT $L116927

; 211  : 			SetGraphicsUpdate();

  00030	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?SetGraphicsUpdate@Object@@QAEXXZ ; Object::SetGraphicsUpdate
$L116927:

; 212  : 		*property = value;

  00038	8b 55 f8	 mov	 edx, DWORD PTR _property$[ebp]
  0003b	66 8b 45 0c	 mov	 ax, WORD PTR _value$[ebp]
  0003f	66 89 02	 mov	 WORD PTR [edx], ax

; 213  : 	}

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?SetProperty@Object@@QAEXGF@Z ENDP			; Object::SetProperty
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?SetGraphicsUpdate@Object@@QAEXXZ PROC NEAR		; Object::SetGraphicsUpdate, COMDAT

; 97   : 	void		SetGraphicsUpdate()		{ info |= GRAPH_UPD; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  0000e	80 c9 08	 or	 cl, 8
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?SetGraphicsUpdate@Object@@QAEXXZ ENDP			; Object::SetGraphicsUpdate
_TEXT	ENDS
PUBLIC	??0CSCI_Collection@@QAE@G@Z			; CSCI_Collection::CSCI_Collection
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_List@@QAE@G@Z PROC NEAR				; CSCI_List::CSCI_List, COMDAT

; 117  : 	CSCI_List(SOL_Handle h) : CSCI_Collection(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Collection@@QAE@G@Z ; CSCI_Collection::CSCI_Collection
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_List@@QAE@G@Z ENDP				; CSCI_List::CSCI_List
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Collection@@QAE@G@Z PROC NEAR			; CSCI_Collection::CSCI_Collection, COMDAT

; 84   : 	CSCI_Collection(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Collection@@QAE@G@Z ENDP			; CSCI_Collection::CSCI_Collection
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Script@@QAE@G@Z PROC NEAR			; CSCI_Script::CSCI_Script, COMDAT

; 341  : 	CSCI_Script(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Script@@QAE@G@Z ENDP				; CSCI_Script::CSCI_Script
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_LongInt@@QAE@G@Z PROC NEAR			; CSCI_LongInt::CSCI_LongInt, COMDAT

; 724  : 	CSCI_LongInt(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_LongInt@@QAE@G@Z ENDP				; CSCI_LongInt::CSCI_LongInt
_TEXT	ENDS
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_lowWord@CSCI_LongInt@@QAEFXZ PROC NEAR		; CSCI_LongInt::get_lowWord, COMDAT

; 726  : 	Property get_lowWord() { return GetProperty ( s_lowWord ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0d 01 00 00	 push	 269			; 0000010dH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_lowWord@CSCI_LongInt@@QAEFXZ ENDP			; CSCI_LongInt::get_lowWord
_TEXT	ENDS
PUBLIC	?get_hiWord@CSCI_LongInt@@QAEFXZ		; CSCI_LongInt::get_hiWord
;	COMDAT ?get_nValue@CSCI_LongInt@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?get_nValue@CSCI_LongInt@@QAEHXZ PROC NEAR		; CSCI_LongInt::get_nValue, COMDAT

; 732  : 	int get_nValue() { return ( ( ((int) get_hiWord()) << 16) + ( (int) get_lowWord() & 0x0000ffff ) ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?get_hiWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_hiWord
  00010	0f bf f0	 movsx	 esi, ax
  00013	c1 e6 10	 shl	 esi, 16			; 00000010H
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?get_lowWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_lowWord
  0001e	0f bf c0	 movsx	 eax, ax
  00021	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00026	03 c6		 add	 eax, esi
  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?get_nValue@CSCI_LongInt@@QAEHXZ ENDP			; CSCI_LongInt::get_nValue
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_hiWord@CSCI_LongInt@@QAEFXZ PROC NEAR		; CSCI_LongInt::get_hiWord, COMDAT

; 729  : 	Property get_hiWord() { return GetProperty ( s_hiWord ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0e 01 00 00	 push	 270			; 0000010eH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_hiWord@CSCI_LongInt@@QAEFXZ ENDP			; CSCI_LongInt::get_hiWord
_TEXT	ENDS
PUBLIC	?set_lowWord@CSCI_LongInt@@QAEXF@Z		; CSCI_LongInt::set_lowWord
PUBLIC	?set_hiWord@CSCI_LongInt@@QAEXF@Z		; CSCI_LongInt::set_hiWord
;	COMDAT ?set_nValue@CSCI_LongInt@@QAEXH@Z
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -4
?set_nValue@CSCI_LongInt@@QAEXH@Z PROC NEAR		; CSCI_LongInt::set_nValue, COMDAT

; 733  : 	void set_nValue( int nValue) { set_hiWord( nValue >> 16 ); set_lowWord( nValue & 0x0000ffff ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nValue$[ebp]
  0000a	c1 f8 10	 sar	 eax, 16			; 00000010H
  0000d	50		 push	 eax
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?set_hiWord@CSCI_LongInt@@QAEXF@Z ; CSCI_LongInt::set_hiWord
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _nValue$[ebp]
  00019	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?set_lowWord@CSCI_LongInt@@QAEXF@Z ; CSCI_LongInt::set_lowWord
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?set_nValue@CSCI_LongInt@@QAEXH@Z ENDP			; CSCI_LongInt::set_nValue
_TEXT	ENDS
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_lowWord@CSCI_LongInt@@QAEXF@Z PROC NEAR		; CSCI_LongInt::set_lowWord, COMDAT

; 727  : 	void set_lowWord( Property value ) { SetProperty ( s_lowWord, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 0d 01 00 00	 push	 269			; 0000010dH
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_lowWord@CSCI_LongInt@@QAEXF@Z ENDP			; CSCI_LongInt::set_lowWord
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_hiWord@CSCI_LongInt@@QAEXF@Z PROC NEAR		; CSCI_LongInt::set_hiWord, COMDAT

; 730  : 	void set_hiWord( Property value ) { SetProperty ( s_hiWord, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 0e 01 00 00	 push	 270			; 0000010eH
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_hiWord@CSCI_LongInt@@QAEXF@Z ENDP			; CSCI_LongInt::set_hiWord
_TEXT	ENDS
PUBLIC	??0CSCI_PackedData@@QAE@G@Z			; CSCI_PackedData::CSCI_PackedData
;	COMDAT ??0CSCI_NetMsg@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_NetMsg@@QAE@G@Z PROC NEAR			; CSCI_NetMsg::CSCI_NetMsg, COMDAT

; 3556 : 	CSCI_NetMsg(SOL_Handle h) : CSCI_PackedData(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_PackedData@@QAE@G@Z ; CSCI_PackedData::CSCI_PackedData
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_NetMsg@@QAE@G@Z ENDP				; CSCI_NetMsg::CSCI_NetMsg
_TEXT	ENDS
PUBLIC	??0CSCI_ByteArray@@QAE@G@Z			; CSCI_ByteArray::CSCI_ByteArray
;	COMDAT ??0CSCI_PackedData@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_PackedData@@QAE@G@Z PROC NEAR			; CSCI_PackedData::CSCI_PackedData, COMDAT

; 781  : 	CSCI_PackedData(SOL_Handle h) : CSCI_ByteArray(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_ByteArray@@QAE@G@Z ; CSCI_ByteArray::CSCI_ByteArray
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_PackedData@@QAE@G@Z ENDP			; CSCI_PackedData::CSCI_PackedData
_TEXT	ENDS
PUBLIC	??0CSCI_Array@@QAE@G@Z				; CSCI_Array::CSCI_Array
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_ByteArray@@QAE@G@Z PROC NEAR			; CSCI_ByteArray::CSCI_ByteArray, COMDAT

; 508  : 	CSCI_ByteArray(SOL_Handle h) : CSCI_Array(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Array@@QAE@G@Z	; CSCI_Array::CSCI_Array
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_ByteArray@@QAE@G@Z ENDP				; CSCI_ByteArray::CSCI_ByteArray
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Array@@QAE@G@Z PROC NEAR			; CSCI_Array::CSCI_Array, COMDAT

; 460  : 	CSCI_Array(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Array@@QAE@G@Z ENDP				; CSCI_Array::CSCI_Array
_TEXT	ENDS
;	COMDAT ?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_NetMsg::get_pInfo, COMDAT

; 3576 : 	CSCI_LongInt get_pInfo() { return GetProperty ( s_pInfo ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 e1 02 00 00	 push	 737			; 000002e1H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ENDP	; CSCI_NetMsg::get_pInfo
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@G@Z				; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_WorldObject@@QAE@G@Z PROC NEAR			; CSCI_WorldObject::CSCI_WorldObject, COMDAT

; 4475 : 	CSCI_WorldObject(SOL_Handle h) : CSCI_Actor(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@G@Z	; CSCI_Actor::CSCI_Actor
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_WorldObject@@QAE@G@Z ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@G@Z				; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Actor@@QAE@G@Z PROC NEAR			; CSCI_Actor::CSCI_Actor, COMDAT

; 1596 : 	CSCI_Actor(SOL_Handle h) : CSCI_Prop(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@G@Z	; CSCI_Prop::CSCI_Prop
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Actor@@QAE@G@Z ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@G@Z				; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Prop@@QAE@G@Z PROC NEAR				; CSCI_Prop::CSCI_Prop, COMDAT

; 1560 : 	CSCI_Prop(SOL_Handle h) : CSCI_View(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@G@Z	; CSCI_View::CSCI_View
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Prop@@QAE@G@Z ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@G@Z			; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_View@@QAE@G@Z PROC NEAR				; CSCI_View::CSCI_View, COMDAT

; 1515 : 	CSCI_View(SOL_Handle h) : CSCI_Feature(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@G@Z ; CSCI_Feature::CSCI_Feature
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_View@@QAE@G@Z ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@G@Z				; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Feature@@QAE@G@Z PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT

; 1437 : 	CSCI_Feature(SOL_Handle h) : CSCI_BitMap(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@G@Z	; CSCI_BitMap::CSCI_BitMap
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Feature@@QAE@G@Z ENDP				; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@G@Z			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BitMap@@QAE@G@Z PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT

; 1358 : 	CSCI_BitMap(SOL_Handle h) : CSCI_Rectangle(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@G@Z ; CSCI_Rectangle::CSCI_Rectangle
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BitMap@@QAE@G@Z ENDP				; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Rectangle@@QAE@G@Z PROC NEAR			; CSCI_Rectangle::CSCI_Rectangle, COMDAT

; 517  : 	CSCI_Rectangle(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Rectangle@@QAE@G@Z ENDP				; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
PUBLIC	??0CSCI_WorldObject@@QAE@ABVMemID@@@Z		; CSCI_WorldObject::CSCI_WorldObject
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVObjectID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_WorldActor@@QAE@ABVObjectID@@@Z PROC NEAR	; CSCI_WorldActor::CSCI_WorldActor, COMDAT

; 4931 : 	CSCI_WorldActor(const ObjectID& id) : CSCI_WorldObject((MemID&) id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z ; CSCI_WorldObject::CSCI_WorldObject
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_WorldActor@@QAE@ABVObjectID@@@Z ENDP		; CSCI_WorldActor::CSCI_WorldActor
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@ABVMemID@@@Z			; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_WorldObject@@QAE@ABVMemID@@@Z PROC NEAR		; CSCI_WorldObject::CSCI_WorldObject, COMDAT

; 4473 : 	CSCI_WorldObject(const MemID& id) : CSCI_Actor(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@ABVMemID@@@Z ; CSCI_Actor::CSCI_Actor
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_WorldObject@@QAE@ABVMemID@@@Z ENDP		; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@ABVMemID@@@Z			; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_Actor@@QAE@ABVMemID@@@Z PROC NEAR		; CSCI_Actor::CSCI_Actor, COMDAT

; 1594 : 	CSCI_Actor(const MemID& id) : CSCI_Prop(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@ABVMemID@@@Z ; CSCI_Prop::CSCI_Prop
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Actor@@QAE@ABVMemID@@@Z ENDP			; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@ABVMemID@@@Z			; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_Prop@@QAE@ABVMemID@@@Z PROC NEAR		; CSCI_Prop::CSCI_Prop, COMDAT

; 1558 : 	CSCI_Prop(const MemID& id) : CSCI_View(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@ABVMemID@@@Z ; CSCI_View::CSCI_View
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Prop@@QAE@ABVMemID@@@Z ENDP			; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@ABVMemID@@@Z		; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_View@@QAE@ABVMemID@@@Z PROC NEAR		; CSCI_View::CSCI_View, COMDAT

; 1513 : 	CSCI_View(const MemID& id) : CSCI_Feature(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@ABVMemID@@@Z ; CSCI_Feature::CSCI_Feature
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_View@@QAE@ABVMemID@@@Z ENDP			; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@ABVMemID@@@Z		; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_Feature@@QAE@ABVMemID@@@Z PROC NEAR		; CSCI_Feature::CSCI_Feature, COMDAT

; 1435 : 	CSCI_Feature(const MemID& id) : CSCI_BitMap(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@ABVMemID@@@Z ; CSCI_BitMap::CSCI_BitMap
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Feature@@QAE@ABVMemID@@@Z ENDP			; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@ABVMemID@@@Z		; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_BitMap@@QAE@ABVMemID@@@Z PROC NEAR		; CSCI_BitMap::CSCI_BitMap, COMDAT

; 1356 : 	CSCI_BitMap(const MemID& id) : CSCI_Rectangle(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z ; CSCI_Rectangle::CSCI_Rectangle
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_BitMap@@QAE@ABVMemID@@@Z ENDP			; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@ABVMemID@@@Z		; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_Rectangle@@QAE@ABVMemID@@@Z PROC NEAR		; CSCI_Rectangle::CSCI_Rectangle, COMDAT

; 515  : 	CSCI_Rectangle(const MemID& id) : CSCI_Object(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABVMemID@@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Rectangle@@QAE@ABVMemID@@@Z ENDP		; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_Object@@QAE@ABVMemID@@@Z PROC NEAR		; CSCI_Object::CSCI_Object, COMDAT

; 11   : 	CSCI_Object(const MemID& id) : ObjectID(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@ABVMemID@@@Z ENDP			; CSCI_Object::CSCI_Object
_TEXT	ENDS
;	COMDAT ??0CSCI_CharInfo@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_CharInfo@@QAE@G@Z PROC NEAR			; CSCI_CharInfo::CSCI_CharInfo, COMDAT

; 6385 : 	CSCI_CharInfo(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_CharInfo@@QAE@G@Z ENDP				; CSCI_CharInfo::CSCI_CharInfo
_TEXT	ENDS
;	COMDAT ??0CSCI_GroupMember@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_GroupMember@@QAE@G@Z PROC NEAR			; CSCI_GroupMember::CSCI_GroupMember, COMDAT

; 7038 : 	CSCI_GroupMember(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_GroupMember@@QAE@G@Z ENDP			; CSCI_GroupMember::CSCI_GroupMember
_TEXT	ENDS
;	COMDAT ??0CSCI_ServerInfo@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_ServerInfo@@QAE@G@Z PROC NEAR			; CSCI_ServerInfo::CSCI_ServerInfo, COMDAT

; 10279: 	CSCI_ServerInfo(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_ServerInfo@@QAE@G@Z ENDP			; CSCI_ServerInfo::CSCI_ServerInfo
_TEXT	ENDS
;	COMDAT ?get_pServerName@CSCI_ServerInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
$T174723 = -4
___$ReturnUdt$ = 8
_this$ = -8
?get_pServerName@CSCI_ServerInfo@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_ServerInfo::get_pServerName, COMDAT

; 10281: 	StringID get_pServerName() { return GetProperty ( s_pServerName ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 27 06 00 00	 push	 1575			; 00000627H
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T174723[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T174723[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pServerName@CSCI_ServerInfo@@QAE?AVStringID@@XZ ENDP ; CSCI_ServerInfo::get_pServerName
_TEXT	ENDS
;	COMDAT ?set_pServerName@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_pServerName@CSCI_ServerInfo@@QAEXF@Z PROC NEAR	; CSCI_ServerInfo::set_pServerName, COMDAT

; 10282: 	void set_pServerName( Property value ) { SetProperty ( s_pServerName, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 27 06 00 00	 push	 1575			; 00000627H
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_pServerName@CSCI_ServerInfo@@QAEXF@Z ENDP		; CSCI_ServerInfo::set_pServerName
_TEXT	ENDS
;	COMDAT ?get_pStatus@CSCI_ServerInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
$T174726 = -4
___$ReturnUdt$ = 8
_this$ = -8
?get_pStatus@CSCI_ServerInfo@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_ServerInfo::get_pStatus, COMDAT

; 10284: 	StringID get_pStatus() { return GetProperty ( s_pStatus ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 28 06 00 00	 push	 1576			; 00000628H
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T174726[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T174726[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pStatus@CSCI_ServerInfo@@QAE?AVStringID@@XZ ENDP	; CSCI_ServerInfo::get_pStatus
_TEXT	ENDS
;	COMDAT ?set_pStatus@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_pStatus@CSCI_ServerInfo@@QAEXF@Z PROC NEAR		; CSCI_ServerInfo::set_pStatus, COMDAT

; 10285: 	void set_pStatus( Property value ) { SetProperty ( s_pStatus, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 28 06 00 00	 push	 1576			; 00000628H
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_pStatus@CSCI_ServerInfo@@QAEXF@Z ENDP		; CSCI_ServerInfo::set_pStatus
_TEXT	ENDS
;	COMDAT ?get_pNumberOfUsers@CSCI_ServerInfo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pNumberOfUsers@CSCI_ServerInfo@@QAEFXZ PROC NEAR	; CSCI_ServerInfo::get_pNumberOfUsers, COMDAT

; 10287: 	Property get_pNumberOfUsers() { return GetProperty ( s_pNumberOfUsers ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 29 06 00 00	 push	 1577			; 00000629H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pNumberOfUsers@CSCI_ServerInfo@@QAEFXZ ENDP	; CSCI_ServerInfo::get_pNumberOfUsers
_TEXT	ENDS
;	COMDAT ?set_pNumberOfUsers@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_pNumberOfUsers@CSCI_ServerInfo@@QAEXF@Z PROC NEAR	; CSCI_ServerInfo::set_pNumberOfUsers, COMDAT

; 10288: 	void set_pNumberOfUsers( Property value ) { SetProperty ( s_pNumberOfUsers, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 29 06 00 00	 push	 1577			; 00000629H
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_pNumberOfUsers@CSCI_ServerInfo@@QAEXF@Z ENDP	; CSCI_ServerInfo::set_pNumberOfUsers
_TEXT	ENDS
;	COMDAT ?get_pIP@CSCI_ServerInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
$T174731 = -4
___$ReturnUdt$ = 8
_this$ = -8
?get_pIP@CSCI_ServerInfo@@QAE?AVStringID@@XZ PROC NEAR	; CSCI_ServerInfo::get_pIP, COMDAT

; 10290: 	StringID get_pIP() { return GetProperty ( s_pIP ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 2a 06 00 00	 push	 1578			; 0000062aH
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T174731[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T174731[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pIP@CSCI_ServerInfo@@QAE?AVStringID@@XZ ENDP	; CSCI_ServerInfo::get_pIP
_TEXT	ENDS
;	COMDAT ?set_pIP@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_pIP@CSCI_ServerInfo@@QAEXF@Z PROC NEAR		; CSCI_ServerInfo::set_pIP, COMDAT

; 10291: 	void set_pIP( Property value ) { SetProperty ( s_pIP, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 2a 06 00 00	 push	 1578			; 0000062aH
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_pIP@CSCI_ServerInfo@@QAEXF@Z ENDP			; CSCI_ServerInfo::set_pIP
_TEXT	ENDS
;	COMDAT ?get_pPort@CSCI_ServerInfo@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
$T174734 = -4
___$ReturnUdt$ = 8
_this$ = -8
?get_pPort@CSCI_ServerInfo@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_ServerInfo::get_pPort, COMDAT

; 10293: 	StringID get_pPort() { return GetProperty ( s_pPort ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 2b 06 00 00	 push	 1579			; 0000062bH
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T174734[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T174734[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pPort@CSCI_ServerInfo@@QAE?AVStringID@@XZ ENDP	; CSCI_ServerInfo::get_pPort
_TEXT	ENDS
;	COMDAT ?set_pPort@CSCI_ServerInfo@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_pPort@CSCI_ServerInfo@@QAEXF@Z PROC NEAR		; CSCI_ServerInfo::set_pPort, COMDAT

; 10294: 	void set_pPort( Property value ) { SetProperty ( s_pPort, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 2b 06 00 00	 push	 1579			; 0000062bH
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_pPort@CSCI_ServerInfo@@QAEXF@Z ENDP		; CSCI_ServerInfo::set_pPort
_TEXT	ENDS
PUBLIC	?SetProcessEvents@CSkinWnd@@IAEX_N@Z		; CSkinWnd::SetProcessEvents
;	COMDAT ?SetEventProcessing@CSkinWnd@@QAEX_N@Z
_TEXT	SEGMENT
_bValue$ = 8
_this$ = -4
?SetEventProcessing@CSkinWnd@@QAEX_N@Z PROC NEAR	; CSkinWnd::SetEventProcessing, COMDAT

; 254  : 	void SetEventProcessing ( bool bValue ) { SetProcessEvents ( bValue ); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?SetProcessEvents@CSkinWnd@@IAEX_N@Z ; CSkinWnd::SetProcessEvents
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetEventProcessing@CSkinWnd@@QAEX_N@Z ENDP		; CSkinWnd::SetEventProcessing
_TEXT	ENDS
PUBLIC	??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z	; std::bitset<6>::reference::operator=
PUBLIC	??A?$bitset@$05@std@@QAE?AVreference@01@I@Z	; std::bitset<6>::operator[]
;	COMDAT ?SetProcessEvents@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT
_bValue$ = 8
$T174738 = -8
_this$ = -12
?SetProcessEvents@CSkinWnd@@IAEX_N@Z PROC NEAR		; CSkinWnd::SetProcessEvents, COMDAT

; 144  : 	void SetProcessEvents ( bool bValue ) { m_state[sknWndProcessEvents] = bValue; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000c	50		 push	 eax
  0000d	6a 01		 push	 1
  0000f	8d 4d f8	 lea	 ecx, DWORD PTR $T174738[ebp]
  00012	51		 push	 ecx
  00013	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0001c	e8 00 00 00 00	 call	 ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ; std::bitset<6>::operator[]
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ; std::bitset<6>::reference::operator=
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetProcessEvents@CSkinWnd@@IAEX_N@Z ENDP		; CSkinWnd::SetProcessEvents
_TEXT	ENDS
PUBLIC	??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z	; std::bitset<6>::reference::reference
;	COMDAT ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
__P$ = 12
$T174740 = -8
??A?$bitset@$05@std@@QAE?AVreference@01@I@Z PROC NEAR	; std::bitset<6>::operator[], COMDAT

; 54   : 		{return (reference(*this, _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	51		 push	 ecx
  00011	8d 4d f8	 lea	 ecx, DWORD PTR $T174740[ebp]
  00014	e8 00 00 00 00	 call	 ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z ; std::bitset<6>::reference::reference
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	89 11		 mov	 DWORD PTR [ecx], edx
  00023	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ENDP	; std::bitset<6>::operator[]
_TEXT	ENDS
PUBLIC	?set@?$bitset@$05@std@@QAEAAV12@I_N@Z		; std::bitset<6>::set
;	COMDAT ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z PROC NEAR	; std::bitset<6>::reference::operator=, COMDAT

; 24   : 			{_Pbs->set(_Off, _X);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 08	 mov	 al, BYTE PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	e8 00 00 00 00	 call	 ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z ; std::bitset<6>::set

; 25   : 			return (*this); }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ENDP	; std::bitset<6>::reference::operator=
_TEXT	ENDS
PUBLIC	?_Xran@?$bitset@$05@std@@ABEXXZ			; std::bitset<6>::_Xran
;	COMDAT ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
__X$ = 12
?set@?$bitset@$05@std@@QAEAAV12@I_N@Z PROC NEAR		; std::bitset<6>::set, COMDAT

; 119  : 		{if (_N <= _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 7d 08 06	 cmp	 DWORD PTR __P$[ebp], 6
  0000c	72 08		 jb	 SHORT $L170351

; 120  : 			_Xran();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Xran@?$bitset@$05@std@@ABEXXZ ; std::bitset<6>::_Xran
$L170351:

; 121  : 		if (_X)

  00016	8b 45 0c	 mov	 eax, DWORD PTR __X$[ebp]
  00019	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001e	85 c0		 test	 eax, eax
  00020	74 31		 je	 SHORT $L170352

; 122  : 			_A[_P / _Nb] |= (_Ty)1 << _P % _Nb;

  00022	8b 75 08	 mov	 esi, DWORD PTR __P$[ebp]
  00025	c1 ee 05	 shr	 esi, 5
  00028	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0002b	33 d2		 xor	 edx, edx
  0002d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00032	f7 f1		 div	 ecx
  00034	8b ca		 mov	 ecx, edx
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	d3 e2		 shl	 edx, cl
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00043	0b ca		 or	 ecx, edx
  00045	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  00048	c1 ea 05	 shr	 edx, 5
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 123  : 		else

  00051	eb 31		 jmp	 SHORT $L170354
$L170352:

; 124  : 			_A[_P / _Nb] &= ~((_Ty)1 << _P % _Nb);

  00053	8b 75 08	 mov	 esi, DWORD PTR __P$[ebp]
  00056	c1 ee 05	 shr	 esi, 5
  00059	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0005c	33 d2		 xor	 edx, edx
  0005e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00063	f7 f1		 div	 ecx
  00065	8b ca		 mov	 ecx, edx
  00067	ba 01 00 00 00	 mov	 edx, 1
  0006c	d3 e2		 shl	 edx, cl
  0006e	f7 d2		 not	 edx
  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00076	23 ca		 and	 ecx, edx
  00078	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  0007b	c1 ea 05	 shr	 edx, 5
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
$L170354:

; 125  : 		return (*this); }

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	5e		 pop	 esi
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
?set@?$bitset@$05@std@@QAEAAV12@I_N@Z ENDP		; std::bitset<6>::set
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
__P$ = 12
??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z PROC NEAR	; std::bitset<6>::reference::reference, COMDAT

; 37   : 		reference(bitset<_N>& _X, size_t _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __X$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z ENDP	; std::bitset<6>::reference::reference
_TEXT	ENDS
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
PUBLIC	??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ ; `string'
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
EXTRN	__imp_??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	__CxxThrowException@8:NEAR
EXTRN	??0logic_error@std@@QAE@ABV01@@Z:NEAR		; std::logic_error::logic_error
EXTRN	??1out_of_range@std@@UAE@XZ:NEAR		; std::out_of_range::~out_of_range
EXTRN	??0out_of_range@std@@QAE@ABV01@@Z:NEAR		; std::out_of_range::out_of_range
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT ??_R0?AVexception@@@8
; File C:\Program Files\Microsoft Visual Studio\VC98\INCLUDE\bitset
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@
_DATA	SEGMENT
??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ DB 'invalid bitset'
	DB	'<N> position', 00H				; `string'
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T174751 DD	019930520H
	DD	01H
	DD	FLAT:$T174753
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T174753 DD	0ffffffffH
	DD	FLAT:$L174749
xdata$x	ENDS
;	COMDAT ?_Xran@?$bitset@$05@std@@ABEXXZ
_TEXT	SEGMENT
_this$ = -64
$T174745 = -40
$T174746 = -56
$T174747 = -60
__$EHRec$ = -12
?_Xran@?$bitset@$05@std@@ABEXXZ PROC NEAR		; std::bitset<6>::_Xran, COMDAT

; 250  : 		{_THROW(out_of_range, "invalid bitset<N> position"); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L174752
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8d 45 c4	 lea	 eax, DWORD PTR $T174747[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ ; `string'
  00027	8d 4d c8	 lea	 ecx, DWORD PTR $T174746[ebp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	8d 4d c8	 lea	 ecx, DWORD PTR $T174746[ebp]
  0003a	51		 push	 ecx
  0003b	8d 4d d8	 lea	 ecx, DWORD PTR $T174745[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00044	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00049	8d 55 d8	 lea	 edx, DWORD PTR $T174745[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$L170634:
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L174749:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T174746[ebp]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00009	c3		 ret	 0
$L174752:
  0000a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T174751
  0000f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xran@?$bitset@$05@std@@ABEXXZ ENDP			; std::bitset<6>::_Xran
PUBLIC	?SetTransient@CSkinWnd@@IAEX_N@Z		; CSkinWnd::SetTransient
;	COMDAT ?SetTransientState@CSkinWnd@@QAEX_N@Z
_TEXT	SEGMENT
_bValue$ = 8
_this$ = -4
?SetTransientState@CSkinWnd@@QAEX_N@Z PROC NEAR		; CSkinWnd::SetTransientState, COMDAT

; 260  : 	void SetTransientState ( bool bValue ) { SetTransient(bValue); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?SetTransient@CSkinWnd@@IAEX_N@Z ; CSkinWnd::SetTransient
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetTransientState@CSkinWnd@@QAEX_N@Z ENDP		; CSkinWnd::SetTransientState
_TEXT	ENDS
;	COMDAT ?SetTransient@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT
_bValue$ = 8
$T174758 = -8
_this$ = -12
?SetTransient@CSkinWnd@@IAEX_N@Z PROC NEAR		; CSkinWnd::SetTransient, COMDAT

; 150  : 	void SetTransient ( bool bValue ) { m_state[sknWndTransient] = bValue; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000c	50		 push	 eax
  0000d	6a 04		 push	 4
  0000f	8d 4d f8	 lea	 ecx, DWORD PTR $T174758[ebp]
  00012	51		 push	 ecx
  00013	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0001c	e8 00 00 00 00	 call	 ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ; std::bitset<6>::operator[]
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ; std::bitset<6>::reference::operator=
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetTransient@CSkinWnd@@IAEX_N@Z ENDP			; CSkinWnd::SetTransient
_TEXT	ENDS
EXTRN	?m_pChar@CLookAt@@1VCSCI_CharInfo@@A:WORD	; CLookAt::m_pChar
;	COMDAT ?SetCharInfo@CLookAt@@SAXVCSCI_CharInfo@@@Z
_TEXT	SEGMENT
_pChar$ = 8
?SetCharInfo@CLookAt@@SAXVCSCI_CharInfo@@@Z PROC NEAR	; CLookAt::SetCharInfo, COMDAT

; 73   : 	static void	SetCharInfo( CSCI_CharInfo pChar ) { m_pChar = pChar; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	66 8b 45 08	 mov	 ax, WORD PTR _pChar$[ebp]
  00007	66 a3 00 00 00
	00		 mov	 WORD PTR ?m_pChar@CLookAt@@1VCSCI_CharInfo@@A, ax ; CLookAt::m_pChar
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?SetCharInfo@CLookAt@@SAXVCSCI_CharInfo@@@Z ENDP	; CLookAt::SetCharInfo
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Object@@QAE@ABV0@@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@ABV0@@Z ENDP			; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@ABV0@@Z			; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_WorldObject@@QAE@ABV0@@Z PROC NEAR		; CSCI_WorldObject::CSCI_WorldObject, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@ABV0@@Z ; CSCI_Actor::CSCI_Actor
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_WorldObject@@QAE@ABV0@@Z ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@ABV0@@Z			; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Actor@@QAE@ABV0@@Z PROC NEAR			; CSCI_Actor::CSCI_Actor, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@ABV0@@Z ; CSCI_Prop::CSCI_Prop
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Actor@@QAE@ABV0@@Z ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@ABV0@@Z			; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Prop@@QAE@ABV0@@Z PROC NEAR			; CSCI_Prop::CSCI_Prop, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@ABV0@@Z ; CSCI_View::CSCI_View
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Prop@@QAE@ABV0@@Z ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@ABV0@@Z			; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_View@@QAE@ABV0@@Z PROC NEAR			; CSCI_View::CSCI_View, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@ABV0@@Z ; CSCI_Feature::CSCI_Feature
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_View@@QAE@ABV0@@Z ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@ABV0@@Z			; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Feature@@QAE@ABV0@@Z PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@ABV0@@Z ; CSCI_BitMap::CSCI_BitMap
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Feature@@QAE@ABV0@@Z ENDP			; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@ABV0@@Z			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_BitMap@@QAE@ABV0@@Z PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@ABV0@@Z ; CSCI_Rectangle::CSCI_Rectangle
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_BitMap@@QAE@ABV0@@Z ENDP			; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Rectangle@@QAE@ABV0@@Z PROC NEAR		; CSCI_Rectangle::CSCI_Rectangle, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABV0@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Rectangle@@QAE@ABV0@@Z ENDP			; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Point@@QAE@XZ PROC NEAR				; SOL_Point::SOL_Point, COMDAT

; 20   : 	SOL_Point() : x(DefaultCoord), y(DefaultCoord) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 ef cd ab
	89		 mov	 DWORD PTR [eax], -1985229329 ; 89abcdefH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 ef cd
	ab 89		 mov	 DWORD PTR [ecx+4], -1985229329 ; 89abcdefH
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Point@@QAE@XZ ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_this$ = -4
??0SOL_Point@@QAE@HH@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 21   : 	SOL_Point(Coord x, Coord y) : x(x), y(y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0SOL_Point@@QAE@HH@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??0SOL_Point@@QAE@ABV0@@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 22   : 	SOL_Point(const SOL_Point& p) : x(p.x), y(p.y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0SOL_Point@@QAE@ABV0@@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Rect@@QAE@XZ PROC NEAR				; SOL_Rect::SOL_Rect, COMDAT

; 13   : 	SOL_Rect()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Rect@@QAE@XZ ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
??0SOL_Rect@@QAE@HHHH@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 56   : 	A.x = xa;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 	A.y = ya;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00028	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 	B.x = xb;

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  00031	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 59   : 	B.y = yb;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  0003a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 60   : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
??0SOL_Rect@@QAE@HHHH@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Xlen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Xlen, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	return B.x - A.x + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	83 c0 01	 add	 eax, 1

; 155  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?Xlen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Xlen
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Ylen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Ylen, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 	return B.y - A.y + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	83 c0 01	 add	 eax, 1

; 163  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Ylen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Ylen
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT
_P$ = 8
_this$ = -4
?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z PROC NEAR	; SOL_Rect::Intersect, COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 178  : 	if (P.x < A.x  ||  P.x > B.x)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _P$[ebp]
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	7c 0b		 jl	 SHORT $L158329
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	8b 45 08	 mov	 eax, DWORD PTR _P$[ebp]
  00017	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0001a	7e 04		 jle	 SHORT $L158328
$L158329:

; 179  : 		return False;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 1f		 jmp	 SHORT $L158327
$L158328:

; 180  : 	if (P.y < A.y  ||  P.y > B.y)

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 55 0c	 mov	 edx, DWORD PTR _P$[ebp+4]
  00026	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00029	7c 0b		 jl	 SHORT $L158331
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _P$[ebp+4]
  00031	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00034	7e 04		 jle	 SHORT $L158330
$L158331:

; 181  : 		return False;

  00036	33 c0		 xor	 eax, eax
  00038	eb 05		 jmp	 SHORT $L158327
$L158330:

; 182  : 	return True;

  0003a	b8 01 00 00 00	 mov	 eax, 1
$L158327:

; 183  : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z ENDP		; SOL_Rect::Intersect
_TEXT	ENDS
;	COMDAT ?Offset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT
_dx$ = 8
_dy$ = 12
_this$ = -4
?Offset@SOL_Rect@@QAEXHH@Z PROC NEAR			; SOL_Rect::Offset, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 318  : 	A.x += dx;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	03 4d 08	 add	 ecx, DWORD PTR _dx$[ebp]
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx

; 319  : 	B.x += dx;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001a	03 4d 08	 add	 ecx, DWORD PTR _dx$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 320  : 	A.y += dy;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	03 4d 0c	 add	 ecx, DWORD PTR _dy$[ebp]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 321  : 	B.y += dy;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00038	03 4d 0c	 add	 ecx, DWORD PTR _dy$[ebp]
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 322  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?Offset@SOL_Rect@@QAEXHH@Z ENDP				; SOL_Rect::Offset
_TEXT	ENDS
;	COMDAT ?Inset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT
_dx$ = 8
_dy$ = 12
_this$ = -4
?Inset@SOL_Rect@@QAEXHH@Z PROC NEAR			; SOL_Rect::Inset, COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  : 	A.x += dx;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	03 4d 08	 add	 ecx, DWORD PTR _dx$[ebp]
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx

; 330  : 	B.x -= dx;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001a	2b 4d 08	 sub	 ecx, DWORD PTR _dx$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 331  : 	A.y += dy;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	03 4d 0c	 add	 ecx, DWORD PTR _dy$[ebp]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 332  : 	B.y -= dy;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00038	2b 4d 0c	 sub	 ecx, DWORD PTR _dy$[ebp]
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 333  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?Inset@SOL_Rect@@QAEXHH@Z ENDP				; SOL_Rect::Inset
_TEXT	ENDS
;	COMDAT ??0EventObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0EventObjectID@@QAE@G@Z PROC NEAR			; EventObjectID::EventObjectID, COMDAT

; 43   : 	EventObjectID(SOL_Handle h) : ObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0EventObjectID@@QAE@G@Z ENDP				; EventObjectID::EventObjectID
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT
_v$ = 8
_l$ = 12
_c$ = 16
_this$ = -4
??0Bitmap@@QAE@HHH@Z PROC NEAR				; Bitmap::Bitmap, COMDAT

; 126  : 	Bitmap(const int v, const int l, const int c)	{view = v; loop = l; cel = c; type = tView;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00018	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _l$[ebp]
  00021	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	8b 55 10	 mov	 edx, DWORD PTR _c$[ebp]
  0002a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
??0Bitmap@@QAE@HHH@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0Bitmap@@QAE@VMemID@@@Z PROC NEAR			; Bitmap::Bitmap, COMDAT

; 128  : 	Bitmap(const MemID id)									{view = loop = cel = 0; type = tMem; memid = id;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	66 8b 55 08	 mov	 dx, WORD PTR _id$[ebp]
  00040	66 89 51 10	 mov	 WORD PTR [ecx+16], dx
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
??0Bitmap@@QAE@VMemID@@@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
;	COMDAT ??0ScaleInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ScaleInfo@@QAE@XZ PROC NEAR				; ScaleInfo::ScaleInfo, COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	scaleX = 128;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 80 00 00
	00		 mov	 DWORD PTR [eax], 128	; 00000080H

; 42   : 	scaleY = 128;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 80 00
	00 00		 mov	 DWORD PTR [ecx+4], 128	; 00000080H

; 43   : 	maxScale = 100;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 64 00
	00 00		 mov	 DWORD PTR [edx+8], 100	; 00000064H

; 44   : 	scaleType = SCALE_OFF;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 45   : }

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0ScaleInfo@@QAE@XZ ENDP				; ScaleInfo::ScaleInfo
_TEXT	ENDS
PUBLIC	??4SOL_Point@@QAEAAV0@ABV0@@Z			; SOL_Point::operator=
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4SOL_Rect@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Rect::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??4SOL_Rect@@QAEAAV0@ABV0@@Z ENDP			; SOL_Rect::operator=
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??4SOL_Point@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Point::operator=, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	x = p.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 119  : 	y = p.y;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 120  : 	return *this;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 121  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4SOL_Point@@QAEAAV0@ABV0@@Z ENDP			; SOL_Point::operator=
_TEXT	ENDS
;	COMDAT ?Id@SOL_Plane@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Id@SOL_Plane@@QBEJXZ PROC NEAR				; SOL_Plane::Id, COMDAT

; 64   : 	long				Id() const					{return planeId;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?Id@SOL_Plane@@QBEJXZ ENDP				; SOL_Plane::Id
_TEXT	ENDS
EXTRN	?SetType@SOL_Plane@@QAEXXZ:NEAR			; SOL_Plane::SetType
EXTRN	?ChangePic@SOL_Plane@@IAEXXZ:NEAR		; SOL_Plane::ChangePic
;	COMDAT ?SetPicNum@SOL_Plane@@QAEXH@Z
_TEXT	SEGMENT
_num$ = 8
_this$ = -4
?SetPicNum@SOL_Plane@@QAEXH@Z PROC NEAR			; SOL_Plane::SetPicNum, COMDAT

; 119  : 	void				SetPicNum(int num)		{picResNum = num;SetType();ChangePic();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _num$[ebp]
  0000d	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?SetType@SOL_Plane@@QAEXXZ ; SOL_Plane::SetType
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?ChangePic@SOL_Plane@@IAEXXZ ; SOL_Plane::ChangePic
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetPicNum@SOL_Plane@@QAEXH@Z ENDP			; SOL_Plane::SetPicNum
_TEXT	ENDS
;	COMDAT ?SetPriority@SOL_Plane@@QAEXH@Z
_TEXT	SEGMENT
_pri$ = 8
_this$ = -4
?SetPriority@SOL_Plane@@QAEXH@Z PROC NEAR		; SOL_Plane::SetPriority, COMDAT

; 120  : 	void				SetPriority(int pri)		{priority = pri;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pri$[ebp]
  0000d	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetPriority@SOL_Plane@@QAEXH@Z ENDP			; SOL_Plane::SetPriority
_TEXT	ENDS
PUBLIC	?TopPlane@Screen@@QBEHXZ			; Screen::TopPlane
;	COMDAT ?TopPlane@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?TopPlane@GraphicsMgr@@QBEHXZ PROC NEAR			; GraphicsMgr::TopPlane, COMDAT

; 55   : 	int		TopPlane() const						{return next.TopPlane();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ?TopPlane@Screen@@QBEHXZ ; Screen::TopPlane
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?TopPlane@GraphicsMgr@@QBEHXZ ENDP			; GraphicsMgr::TopPlane
_TEXT	ENDS
EXTRN	?TopPlane@PlaneList@@QBEHXZ:NEAR		; PlaneList::TopPlane
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?TopPlane@Screen@@QBEHXZ PROC NEAR			; Screen::TopPlane, COMDAT

; 30   : 	int	TopPlane() const					{return planes.TopPlane();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?TopPlane@PlaneList@@QBEHXZ ; PlaneList::TopPlane
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?TopPlane@Screen@@QBEHXZ ENDP				; Screen::TopPlane
_TEXT	ENDS
PUBLIC	?TopSCIPlane@Screen@@QBEHXZ			; Screen::TopSCIPlane
;	COMDAT ?TopSCIPlane@GraphicsMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?TopSCIPlane@GraphicsMgr@@QBEHXZ PROC NEAR		; GraphicsMgr::TopSCIPlane, COMDAT

; 56   : 	int		TopSCIPlane() const					{return next.TopSCIPlane();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ?TopSCIPlane@Screen@@QBEHXZ ; Screen::TopSCIPlane
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?TopSCIPlane@GraphicsMgr@@QBEHXZ ENDP			; GraphicsMgr::TopSCIPlane
_TEXT	ENDS
EXTRN	?TopSCIPlane@PlaneList@@QBEHXZ:NEAR		; PlaneList::TopSCIPlane
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?TopSCIPlane@Screen@@QBEHXZ PROC NEAR			; Screen::TopSCIPlane, COMDAT

; 31   : 	int	TopSCIPlane() const				{return planes.TopSCIPlane();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?TopSCIPlane@PlaneList@@QBEHXZ ; PlaneList::TopSCIPlane
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?TopSCIPlane@Screen@@QBEHXZ ENDP			; Screen::TopSCIPlane
_TEXT	ENDS
EXTRN	?AddPlane@Screen@@QAEXPAVSOL_Plane@@@Z:NEAR	; Screen::AddPlane
;	COMDAT ?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z
_TEXT	SEGMENT
_plane$ = 8
_this$ = -4
?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z PROC NEAR	; GraphicsMgr::AddPlane, COMDAT

; 59   : 	void		AddPlane(SOL_Plane* plane)				{next.AddPlane(plane);}	// cant be const

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e8 00 00 00 00	 call	 ?AddPlane@Screen@@QAEXPAVSOL_Plane@@@Z ; Screen::AddPlane
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?AddPlane@GraphicsMgr@@QAEXPAVSOL_Plane@@@Z ENDP	; GraphicsMgr::AddPlane
_TEXT	ENDS
EXTRN	?AddScreenItem@Screen@@QAEXPAVScreenItem@@@Z:NEAR ; Screen::AddScreenItem
;	COMDAT ?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z
_TEXT	SEGMENT
_si$ = 8
_this$ = -4
?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z PROC NEAR ; GraphicsMgr::AddScreenItem, COMDAT

; 60   : 	void		AddScreenItem(ScreenItem* si)		{next.AddScreenItem(si);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e8 00 00 00 00	 call	 ?AddScreenItem@Screen@@QAEXPAVScreenItem@@@Z ; Screen::AddScreenItem
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?AddScreenItem@GraphicsMgr@@QAEXPAVScreenItem@@@Z ENDP	; GraphicsMgr::AddScreenItem
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_Rect@@QAE@ABV0@@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0SOL_Rect@@QAE@ABV0@@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
PUBLIC	??0Bitmap@@QAE@XZ				; Bitmap::Bitmap
EXTRN	?BuildFontTable@FontMgr@@IAEXH@Z:NEAR		; FontMgr::BuildFontTable
;	COMDAT ??0FontMgr@@QAE@G@Z
_TEXT	SEGMENT
_theFont$ = 8
_this$ = -4
??0FontMgr@@QAE@G@Z PROC NEAR				; FontMgr::FontMgr, COMDAT

; 45   : 	FontMgr(ushort theFont = systemFont) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 14	 add	 ecx, 20			; 00000014H
  00018	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 24	 add	 ecx, 36			; 00000024H
  00023	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 30	 add	 ecx, 48			; 00000030H
  0002e	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@XZ	; Bitmap::Bitmap
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	83 c1 4e	 add	 ecx, 78			; 0000004eH
  00039	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 46   : 		font = theFont+1;	// if font==theFont BuildFontTable just returns

  0003e	8b 45 08	 mov	 eax, DWORD PTR _theFont$[ebp]
  00041	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00046	83 c0 01	 add	 eax, 1
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	66 89 41 28	 mov	 WORD PTR [ecx+40], ax

; 47   : 		BuildFontTable(theFont);

  00050	8b 55 08	 mov	 edx, DWORD PTR _theFont$[ebp]
  00053	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00059	52		 push	 edx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?BuildFontTable@FontMgr@@IAEXH@Z ; FontMgr::BuildFontTable

; 48   : 	}

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
??0FontMgr@@QAE@G@Z ENDP				; FontMgr::FontMgr
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Bitmap@@QAE@XZ PROC NEAR				; Bitmap::Bitmap, COMDAT

; 130  : 	Bitmap() 													{view = loop = cel = 0; type = tMem;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0Bitmap@@QAE@XZ ENDP					; Bitmap::Bitmap
_TEXT	ENDS
EXTRN	?yRes@FontMgr@@1HA:DWORD			; FontMgr::yRes
;	COMDAT ?PointSize@FontMgr@@QAEHH@Z
_TEXT	SEGMENT
_scale$ = 8
_this$ = -4
?PointSize@FontMgr@@QAEHH@Z PROC NEAR			; FontMgr::PointSize, COMDAT

; 110  : 	int 				PointSize(Bool scale = True) {if (scale) return (pointSize * SCIRESY + yRes - 1) / yRes; return pointSize;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	83 7d 08 00	 cmp	 DWORD PTR _scale$[ebp], 0
  0000b	74 22		 je	 SHORT $L161291
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	33 c9		 xor	 ecx, ecx
  00012	66 8b 48 4c	 mov	 cx, WORD PTR [eax+76]
  00016	69 c9 e0 01 00
	00		 imul	 ecx, 480		; 000001e0H
  0001c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?yRes@FontMgr@@1HA ; FontMgr::yRes
  00022	8d 44 11 ff	 lea	 eax, DWORD PTR [ecx+edx-1]
  00026	99		 cdq
  00027	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?yRes@FontMgr@@1HA ; FontMgr::yRes
  0002d	eb 0b		 jmp	 SHORT $L161290
$L161291:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	33 c9		 xor	 ecx, ecx
  00034	66 8b 48 4c	 mov	 cx, WORD PTR [eax+76]
  00038	8b c1		 mov	 eax, ecx
$L161290:
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?PointSize@FontMgr@@QAEHH@Z ENDP			; FontMgr::PointSize
_TEXT	ENDS
;	COMDAT ?SetBM@FontMgr@@QAEXVMemID@@@Z
_TEXT	SEGMENT
_theBM$ = 8
_this$ = -4
?SetBM@FontMgr@@QAEXVMemID@@@Z PROC NEAR		; FontMgr::SetBM, COMDAT

; 113  : 	void 				SetBM(MemID theBM) {BM =theBM;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _theBM$[ebp]
  0000e	66 89 48 4e	 mov	 WORD PTR [eax+78], cx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?SetBM@FontMgr@@QAEXVMemID@@@Z ENDP			; FontMgr::SetBM
_TEXT	ENDS
EXTRN	?xRes@FontMgr@@1HA:DWORD			; FontMgr::xRes
;	COMDAT ?GetXRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetXRes@FontMgr@@QBEHXZ PROC NEAR			; FontMgr::GetXRes, COMDAT

; 121  : 	int 				GetXRes() const {return xRes;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?xRes@FontMgr@@1HA ; FontMgr::xRes
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetXRes@FontMgr@@QBEHXZ ENDP				; FontMgr::GetXRes
_TEXT	ENDS
;	COMDAT ?GetYRes@FontMgr@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetYRes@FontMgr@@QBEHXZ PROC NEAR			; FontMgr::GetYRes, COMDAT

; 122  : 	int 				GetYRes() const {return yRes;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?yRes@FontMgr@@1HA ; FontMgr::yRes
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetYRes@FontMgr@@QBEHXZ ENDP				; FontMgr::GetYRes
_TEXT	ENDS
;	COMDAT ??0TextID@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0TextID@@QAE@ABV0@@Z PROC NEAR			; TextID::TextID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0TextID@@QAE@ABV0@@Z ENDP				; TextID::TextID
_TEXT	ENDS
;	COMDAT ??0SOL_Line@@QAE@HHHH@Z
_TEXT	SEGMENT
_x1$ = 8
_y1$ = 12
_x2$ = 16
_y2$ = 20
_this$ = -4
??0SOL_Line@@QAE@HHHH@Z PROC NEAR			; SOL_Line::SOL_Line, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 55   : 	// All lines have A.x <= B.x
; 56   : 	if (x1 <= x2) {

  0001a	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  0001d	3b 45 10	 cmp	 eax, DWORD PTR _x2$[ebp]
  00020	7f 25		 jg	 SHORT $L162429

; 57   : 		A.x=x1;

  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 55 08	 mov	 edx, DWORD PTR _x1$[ebp]
  00028	89 11		 mov	 DWORD PTR [ecx], edx

; 58   : 		A.y=y1;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _y1$[ebp]
  00030	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 59   : 		B.x=x2;

  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00039	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 60   : 		B.y=y2;

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  00042	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 62   : 	else {

  00045	eb 23		 jmp	 SHORT $L162430
$L162429:

; 63   : 		A.x=x2;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  0004d	89 08		 mov	 DWORD PTR [eax], ecx

; 64   : 		A.y=y2;

  0004f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00055	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 65   : 		B.x=x1;

  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 55 08	 mov	 edx, DWORD PTR _x1$[ebp]
  0005e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 66   : 		B.y=y1;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _y1$[ebp]
  00067	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$L162430:

; 68   : }

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 10 00	 ret	 16			; 00000010H
??0SOL_Line@@QAE@HHHH@Z ENDP				; SOL_Line::SOL_Line
_TEXT	ENDS
PUBLIC	??8MemID@@QBEHABV0@@Z				; MemID::operator==
;	COMDAT ?Match@CMakeItemDlg@@QAEHVCSCI_WorldObject@@@Z
_TEXT	SEGMENT
_hObject$ = 8
_this$ = -4
?Match@CMakeItemDlg@@QAEHVCSCI_WorldObject@@@Z PROC NEAR ; CMakeItemDlg::Match, COMDAT

; 47   : 	BOOL Match( CSCI_WorldObject hObject ) { return ( m_hObject == hObject ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8d 45 08	 lea	 eax, DWORD PTR _hObject$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00014	e8 00 00 00 00	 call	 ??8MemID@@QBEHABV0@@Z	; MemID::operator==
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?Match@CMakeItemDlg@@QAEHVCSCI_WorldObject@@@Z ENDP	; CMakeItemDlg::Match
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??8MemID@@QBEHABV0@@Z PROC NEAR				; MemID::operator==, COMDAT

; 108  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 		return handle == id.handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _id$[ebp]
  00012	33 c0		 xor	 eax, eax
  00014	66 8b 02	 mov	 ax, WORD PTR [edx]
  00017	33 d2		 xor	 edx, edx
  00019	3b c8		 cmp	 ecx, eax
  0001b	0f 94 c2	 sete	 dl
  0001e	8b c2		 mov	 eax, edx

; 110  : 	}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??8MemID@@QBEHABV0@@Z ENDP				; MemID::operator==
_TEXT	ENDS
;	COMDAT ?SetViewMode@CTalkDlg@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4
?SetViewMode@CTalkDlg@@QAEX_N@Z PROC NEAR		; CTalkDlg::SetViewMode, COMDAT

; 135  : 	void SetViewMode ( bool boFullBio ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetViewMode@CTalkDlg@@QAEX_N@Z ENDP			; CTalkDlg::SetViewMode
_TEXT	ENDS
;	COMDAT ?getChat_Profanity@CToonSettings@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?getChat_Profanity@CToonSettings@@QAEHXZ PROC NEAR	; CToonSettings::getChat_Profanity, COMDAT

; 65   : 	BOOL	getChat_Profanity() { return m_bChat_Profanity; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?getChat_Profanity@CToonSettings@@QAEHXZ ENDP		; CToonSettings::getChat_Profanity
_TEXT	ENDS
END

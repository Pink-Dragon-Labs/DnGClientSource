	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\packdataC.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ?CheckBounds@OCArray@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Data@OCArray@@QAEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ByteAt@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetByte@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetByte@CPackedData@@QAEXHE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutByte@CPackedData@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWord@CPackedData@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutWord@CPackedData@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LongAt@CPackedData@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPackedData@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CPackedData@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??0CPackedData@@QAE@XZ				; CPackedData::CPackedData
PUBLIC	??_7CPackedData@@6B@				; CPackedData::`vftable'
PUBLIC	??_GCPackedData@@UAEPAXI@Z			; CPackedData::`scalar deleting destructor'
PUBLIC	??_ECPackedData@@UAEPAXI@Z			; CPackedData::`vector deleting destructor'
EXTRN	??0OCArray@@QAE@XZ:NEAR				; OCArray::OCArray
;	COMDAT ??_7CPackedData@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\packdataC.cpp
CONST	SEGMENT
??_7CPackedData@@6B@ DD FLAT:??_ECPackedData@@UAEPAXI@Z	; CPackedData::`vftable'
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4
??0CPackedData@@QAE@XZ PROC NEAR			; CPackedData::CPackedData

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	e8 00 00 00 00	 call	 ??0OCArray@@QAE@XZ	; OCArray::OCArray
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPackedData@@6B@ ; CPackedData::`vftable'

; 20   : 	m_nGetIndex = m_nPutIndex = 0;

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 21   : }

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??0CPackedData@@QAE@XZ ENDP				; CPackedData::CPackedData
_TEXT	ENDS
PUBLIC	??1CPackedData@@UAE@XZ				; CPackedData::~CPackedData
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ??_GCPackedData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCPackedData@@UAEPAXI@Z PROC NEAR			; CPackedData::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPackedData@@UAE@XZ	; CPackedData::~CPackedData
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L1442
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L1442:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCPackedData@@UAEPAXI@Z ENDP				; CPackedData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CPackedData@@QAE@PADH@Z			; CPackedData::CPackedData
_TEXT	SEGMENT
_ptr$ = 8
_size$ = 12
_this$ = -4
??0CPackedData@@QAE@PADH@Z PROC NEAR			; CPackedData::CPackedData

; 24   : {

  00036	55		 push	 ebp
  00037	8b ec		 mov	 ebp, esp
  00039	51		 push	 ecx
  0003a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 04	 add	 ecx, 4
  00043	e8 00 00 00 00	 call	 ??0OCArray@@QAE@XZ	; OCArray::OCArray
  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPackedData@@6B@ ; CPackedData::`vftable'

; 25   : 	m_bFreeBuffer = false;

  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0

; 26   : 	m_pData = (unsigned char *)ptr; 

  00058	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  0005e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 27   : 
; 28   : 	m_nActualSize = size;

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  00067	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 29   : 	m_nSize = size;

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  00070	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 30   : 	m_nGetIndex = 0;

  00073	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00076	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 31   : 	m_nPutIndex = size;

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  00083	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 32   : }

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
??0CPackedData@@QAE@PADH@Z ENDP				; CPackedData::CPackedData
_TEXT	ENDS
EXTRN	??1OCArray@@QAE@XZ:NEAR				; OCArray::~OCArray
_TEXT	SEGMENT
_this$ = -4
??1CPackedData@@UAE@XZ PROC NEAR			; CPackedData::~CPackedData

; 35   : {

  0008f	55		 push	 ebp
  00090	8b ec		 mov	 ebp, esp
  00092	83 ec 08	 sub	 esp, 8
  00095	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPackedData@@6B@ ; CPackedData::`vftable'

; 36   : }

  000a1	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  000a5	74 0b		 je	 SHORT $L1481
  000a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	83 c1 04	 add	 ecx, 4
  000ad	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
  000b0	eb 07		 jmp	 SHORT $L1482
$L1481:
  000b2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L1482:
  000b9	8b 4d f8	 mov	 ecx, DWORD PTR -8+[ebp]
  000bc	e8 00 00 00 00	 call	 ??1OCArray@@QAE@XZ	; OCArray::~OCArray
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
??1CPackedData@@UAE@XZ ENDP				; CPackedData::~CPackedData
_TEXT	ENDS
PUBLIC	?Init@CPackedData@@QAEXPADH@Z			; CPackedData::Init
EXTRN	__imp__free:NEAR
EXTRN	__imp__malloc:NEAR
EXTRN	_memcpy:NEAR
_TEXT	SEGMENT
_ptr$ = 8
_size$ = 12
_this$ = -4
?Init@CPackedData@@QAEXPADH@Z PROC NEAR			; CPackedData::Init

; 39   : {

  000c5	55		 push	 ebp
  000c6	8b ec		 mov	 ebp, esp
  000c8	51		 push	 ecx
  000c9	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 	if ( (m_bFreeBuffer == true) && m_pData ) {

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	33 c9		 xor	 ecx, ecx
  000d1	8a 48 10	 mov	 cl, BYTE PTR [eax+16]
  000d4	83 f9 01	 cmp	 ecx, 1
  000d7	75 23		 jne	 SHORT $L1457
  000d9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000e0	74 1a		 je	 SHORT $L1457

; 41   : 		free ( m_pData );

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e8	51		 push	 ecx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000ef	83 c4 04	 add	 esp, 4

; 42   : 		m_pData = NULL;

  000f2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f5	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L1457:

; 44   : 
; 45   : 	m_pData = (unsigned char *)malloc ( size );

  000fc	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  000ff	50		 push	 eax
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00106	83 c4 04	 add	 esp, 4
  00109	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 46   : 	memcpy ( m_pData, ptr, size );

  0010f	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  00112	52		 push	 edx
  00113	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  00116	50		 push	 eax
  00117	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0011d	52		 push	 edx
  0011e	e8 00 00 00 00	 call	 _memcpy
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH

; 47   : 
; 48   : 	m_nActualSize = size;

  00126	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00129	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0012c	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 49   : 	m_nGetIndex = 0;

  0012f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00132	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 50   : 	m_nPutIndex = size;

  00139	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013c	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0013f	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 51   : }

  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 08 00	 ret	 8
?Init@CPackedData@@QAEXPADH@Z ENDP			; CPackedData::Init
_TEXT	ENDS
END

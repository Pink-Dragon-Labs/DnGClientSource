	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Si.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clip@SOL_Rect@@QAEXABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Offset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsOne@Ratio@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLargerThanOne@Ratio@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??T@YAHHABVRatio@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScaleInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPic@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsColor@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?View@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Loop@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cel@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Color@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Handle@Bitmap@@QBE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetType@Bitmap@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetMemID@Bitmap@@QAEXABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?XOrg@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?YOrg@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Pos@CelObjPic@@QBE?AVSOL_Point@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetCel@ScreenItem@@QAEXPAVCelObj@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefRect@SOL_Plane@@QBEABVSOL_Rect@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetVanish@SOL_Plane@@QBE?AVSOL_Point@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScreen@SOL_Plane@@QBEABVSOL_Rect@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TopSCIPlane@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xdim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ydim@Screen@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@ObjectID@@QBEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@ObjectID@@QBEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7Buffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?nextId@ScreenItem@@1JA				; ScreenItem::nextId
_DATA	SEGMENT
?nextId@ScreenItem@@1JA DD 0186a0H			; ScreenItem::nextId
_DATA	ENDS
PUBLIC	??1ScreenItem@@QAE@XZ				; ScreenItem::~ScreenItem
PUBLIC	?SetCel@ScreenItem@@QAEXPAVCelObj@@@Z		; ScreenItem::SetCel
_TEXT	SEGMENT
_this$ = -4
??1ScreenItem@@QAE@XZ PROC NEAR				; ScreenItem::~ScreenItem

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	SetCel(NULL);

  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetCel@ScreenItem@@QAEXPAVCelObj@@@Z ; ScreenItem::SetCel

; 29   : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??1ScreenItem@@QAE@XZ ENDP				; ScreenItem::~ScreenItem
_TEXT	ENDS
;	COMDAT ?SetCel@ScreenItem@@QAEXPAVCelObj@@@Z
_TEXT	SEGMENT
_theCel$ = 8
_this$ = -12
$T62220 = -4
$T62221 = -8
?SetCel@ScreenItem@@QAEXPAVCelObj@@@Z PROC NEAR		; ScreenItem::SetCel, COMDAT

; 93   : 	void			SetCel(CelObj* theCel)  {delete cel; cel = theCel;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0000f	89 4d f8	 mov	 DWORD PTR $T62221[ebp], ecx
  00012	8b 55 f8	 mov	 edx, DWORD PTR $T62221[ebp]
  00015	89 55 fc	 mov	 DWORD PTR $T62220[ebp], edx
  00018	83 7d fc 00	 cmp	 DWORD PTR $T62220[ebp], 0
  0001c	74 11		 je	 SHORT $L62222
  0001e	6a 01		 push	 1
  00020	8b 45 fc	 mov	 eax, DWORD PTR $T62220[ebp]
  00023	8b 10		 mov	 edx, DWORD PTR [eax]
  00025	8b 4d fc	 mov	 ecx, DWORD PTR $T62220[ebp]
  00028	ff 12		 call	 DWORD PTR [edx]
  0002a	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
  0002d	eb 07		 jmp	 SHORT $L62223
$L62222:
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR -16+[ebp], 0
$L62223:
  00036	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _theCel$[ebp]
  0003c	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?SetCel@ScreenItem@@QAEXPAVCelObj@@@Z ENDP		; ScreenItem::SetCel
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@XZ				; SOL_Rect::SOL_Rect
PUBLIC	??4SOL_Rect@@QAEAAV0@ABV0@@Z			; SOL_Rect::operator=
PUBLIC	??0ScreenItem@@QAE@PBV0@@Z			; ScreenItem::ScreenItem
PUBLIC	??0Ratio@@QAE@XZ				; Ratio::Ratio
PUBLIC	??0Bitmap@@QAE@XZ				; Bitmap::Bitmap
PUBLIC	??0SOL_Point@@QAE@XZ				; SOL_Point::SOL_Point
PUBLIC	??0ScaleInfo@@QAE@XZ				; ScaleInfo::ScaleInfo
_TEXT	SEGMENT
_si$ = 8
_this$ = -4
??0ScreenItem@@QAE@PBV0@@Z PROC NEAR			; ScreenItem::ScreenItem

; 36   : {

  00015	55		 push	 ebp
  00016	8b ec		 mov	 ebp, esp
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002c	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@XZ	; Bitmap::Bitmap
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 20	 add	 ecx, 32			; 00000020H
  00037	e8 00 00 00 00	 call	 ??0ScaleInfo@@QAE@XZ	; ScaleInfo::ScaleInfo
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 68	 add	 ecx, 104		; 00000068H
  00042	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 78	 add	 ecx, 120		; 00000078H
  0004d	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  0005b	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00069	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 37   : 	// Screen item created for adding
; 38   : 	// to the last screen when a screen
; 39   : 	// item is added to the next screen
; 40   : 	id = si->id;

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _si$[ebp]
  00074	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00077	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 41   : 	planeId = si->planeId;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _si$[ebp]
  00080	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00083	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 42   : 	cel = NULL;

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0

; 43   : 
; 44   : // HOOK
; 45   : //	pos = si->pos;
; 46   : //	z = si->z;
; 47   : //	priority = si->priority;
; 48   : 	bitmap = si->bitmap;

  00090	8b 75 08	 mov	 esi, DWORD PTR _si$[ebp]
  00093	83 c6 0c	 add	 esi, 12			; 0000000cH
  00096	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00099	83 c7 0c	 add	 edi, 12			; 0000000cH
  0009c	b9 05 00 00 00	 mov	 ecx, 5
  000a1	f3 a5		 rep movsd

; 49   : 	onScreen = si->onScreen;

  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _si$[ebp]
  000a6	83 c1 68	 add	 ecx, 104		; 00000068H
  000a9	51		 push	 ecx
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	83 c1 68	 add	 ecx, 104		; 00000068H
  000b0	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 50   : 
; 51   : 	// Needed for IsOnMe() checks
; 52   : 	userMirror = si->userMirror;

  000b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b8	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  000bb	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  000be	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 53   : 	useInsetRect = si->useInsetRect;

  000c1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  000c7	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  000ca	89 4a 58	 mov	 DWORD PTR [edx+88], ecx

; 54   : 	if (useInsetRect)

  000cd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d0	83 7a 58 00	 cmp	 DWORD PTR [edx+88], 0
  000d4	74 17		 je	 SHORT $L61743

; 55   : 		insetRect = si->insetRect;

  000d6	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  000d9	05 88 00 00 00	 add	 eax, 136		; 00000088H
  000de	50		 push	 eax
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e2	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  000e8	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=
$L61743:

; 56   : 	scale	= si->scale;

  000ed	8b 4d 08	 mov	 ecx, DWORD PTR _si$[ebp]
  000f0	83 c1 20	 add	 ecx, 32			; 00000020H
  000f3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f6	83 c2 20	 add	 edx, 32			; 00000020H
  000f9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fb	89 02		 mov	 DWORD PTR [edx], eax
  000fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00100	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00103	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00106	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00109	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0010c	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 57   : 	x1 = si->x1;

  0010f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00112	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  00115	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00118	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 58   : 	y1 = si->y1;

  0011b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011e	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  00121	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00124	89 4a 64	 mov	 DWORD PTR [edx+100], ecx

; 59   : }

  00127	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 04 00	 ret	 4
??0ScreenItem@@QAE@PBV0@@Z ENDP				; ScreenItem::ScreenItem
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Point@@QAE@XZ PROC NEAR				; SOL_Point::SOL_Point, COMDAT

; 20   : 	SOL_Point() : x(DefaultCoord), y(DefaultCoord) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 ef cd ab
	89		 mov	 DWORD PTR [eax], -1985229329 ; 89abcdefH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 ef cd
	ab 89		 mov	 DWORD PTR [ecx+4], -1985229329 ; 89abcdefH
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Point@@QAE@XZ ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Rect@@QAE@XZ PROC NEAR				; SOL_Rect::SOL_Rect, COMDAT

; 13   : 	SOL_Rect()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Rect@@QAE@XZ ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Ratio@@QAE@XZ PROC NEAR				; Ratio::Ratio, COMDAT

; 7    : 	Ratio()							:	numer(1), denom(1) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0Ratio@@QAE@XZ ENDP					; Ratio::Ratio
_TEXT	ENDS
;	COMDAT ??0ScaleInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ScaleInfo@@QAE@XZ PROC NEAR				; ScaleInfo::ScaleInfo, COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	scaleX = 128;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 80 00 00
	00		 mov	 DWORD PTR [eax], 128	; 00000080H

; 42   : 	scaleY = 128;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 80 00
	00 00		 mov	 DWORD PTR [ecx+4], 128	; 00000080H

; 43   : 	maxScale = 100;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 64 00
	00 00		 mov	 DWORD PTR [edx+8], 100	; 00000064H

; 44   : 	scaleType = SCALE_OFF;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 45   : }

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0ScaleInfo@@QAE@XZ ENDP				; ScaleInfo::ScaleInfo
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
;	COMDAT ??0Bitmap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Bitmap@@QAE@XZ PROC NEAR				; Bitmap::Bitmap, COMDAT

; 130  : 	Bitmap() 													{view = loop = cel = 0; type = tMem;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0Bitmap@@QAE@XZ ENDP					; Bitmap::Bitmap
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
PUBLIC	??4SOL_Point@@QAEAAV0@ABV0@@Z			; SOL_Point::operator=
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4SOL_Rect@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Rect::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??4SOL_Rect@@QAEAAV0@ABV0@@Z ENDP			; SOL_Rect::operator=
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??4SOL_Point@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Point::operator=, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	x = p.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 119  : 	y = p.y;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 120  : 	return *this;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 121  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4SOL_Point@@QAEAAV0@ABV0@@Z ENDP			; SOL_Point::operator=
_TEXT	ENDS
PUBLIC	??0ScreenItem@@QAE@JABVBitmap@@@Z		; ScreenItem::ScreenItem
EXTRN	?graphMgr@@3PAVGraphicsMgr@@A:DWORD		; graphMgr
_TEXT	SEGMENT
_plane$ = 8
_theBitmap$ = 12
_this$ = -4
??0ScreenItem@@QAE@JABVBitmap@@@Z PROC NEAR		; ScreenItem::ScreenItem

; 62   : {

  00132	55		 push	 ebp
  00133	8b ec		 mov	 ebp, esp
  00135	51		 push	 ecx
  00136	56		 push	 esi
  00137	57		 push	 edi
  00138	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0013b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  00143	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00149	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@XZ	; Bitmap::Bitmap
  0014e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00151	83 c1 20	 add	 ecx, 32			; 00000020H
  00154	e8 00 00 00 00	 call	 ??0ScaleInfo@@QAE@XZ	; ScaleInfo::ScaleInfo
  00159	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	83 c1 68	 add	 ecx, 104		; 00000068H
  0015f	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	83 c1 78	 add	 ecx, 120		; 00000078H
  0016a	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  0016f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00172	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00178	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  0017d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00186	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 63   : 	// This constructor is used for pictures
; 64   : 	id = nextId++;

  0018b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nextId@ScreenItem@@1JA ; ScreenItem::nextId
  00194	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  00197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nextId@ScreenItem@@1JA ; ScreenItem::nextId
  0019d	83 c2 01	 add	 edx, 1
  001a0	89 15 00 00 00
	00		 mov	 DWORD PTR ?nextId@ScreenItem@@1JA, edx ; ScreenItem::nextId

; 65   : 	pos.x = 0;

  001a6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a9	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 66   : 	pos.y = 0;

  001af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b2	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 67   : 	z = 0;

  001b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001bc	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 68   : 	planeId = plane;

  001c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c6	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  001c9	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 69   : 	bitmap = theBitmap;

  001cc	8b 75 0c	 mov	 esi, DWORD PTR _theBitmap$[ebp]
  001cf	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  001d2	83 c7 0c	 add	 edi, 12			; 0000000cH
  001d5	b9 05 00 00 00	 mov	 ecx, 5
  001da	f3 a5		 rep movsd

; 70   : 	cel = NULL;

  001dc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001df	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], 0

; 71   : 	useInsetRect = False;

  001e6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e9	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 72   : 	fixedPriFlag = False;

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f3	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 73   : 	userMirror = False;

  001fa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001fd	c7 42 5c 00 00
	00 00		 mov	 DWORD PTR [edx+92], 0

; 74   : 	picResNum = -1;

  00204	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00207	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 75   : 	updateCount = 0;

  0020e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00211	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 76   : 	addCount = graphMgr->ScreenCount();

  00218	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0021e	8b 02		 mov	 eax, DWORD PTR [edx]
  00220	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00226	ff 50 04	 call	 DWORD PTR [eax+4]
  00229	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022c	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 77   : 	deleteCount = 0;

  0022f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00232	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], 0

; 78   : }

  00239	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c2 08 00	 ret	 8
??0ScreenItem@@QAE@JABVBitmap@@@Z ENDP			; ScreenItem::ScreenItem
_TEXT	ENDS
PUBLIC	??0ScreenItem@@QAE@JABVBitmap@@ABVSOL_Rect@@@Z	; ScreenItem::ScreenItem
PUBLIC	?IsColor@Bitmap@@QBEHXZ				; Bitmap::IsColor
_TEXT	SEGMENT
_plane$ = 8
_theBitmap$ = 12
_r$ = 16
_this$ = -4
??0ScreenItem@@QAE@JABVBitmap@@ABVSOL_Rect@@@Z PROC NEAR ; ScreenItem::ScreenItem

; 81   : {

  00244	55		 push	 ebp
  00245	8b ec		 mov	 ebp, esp
  00247	51		 push	 ecx
  00248	56		 push	 esi
  00249	57		 push	 edi
  0024a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0024d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00250	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  00255	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00258	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0025b	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@XZ	; Bitmap::Bitmap
  00260	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00263	83 c1 20	 add	 ecx, 32			; 00000020H
  00266	e8 00 00 00 00	 call	 ??0ScaleInfo@@QAE@XZ	; ScaleInfo::ScaleInfo
  0026b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0026e	83 c1 68	 add	 ecx, 104		; 00000068H
  00271	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  00276	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00279	83 c1 78	 add	 ecx, 120		; 00000078H
  0027c	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  00281	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00284	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  0028a	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  0028f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00292	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00298	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 82   : 	id = nextId++;

  0029d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nextId@ScreenItem@@1JA ; ScreenItem::nextId
  002a6	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  002a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nextId@ScreenItem@@1JA ; ScreenItem::nextId
  002af	83 c2 01	 add	 edx, 1
  002b2	89 15 00 00 00
	00		 mov	 DWORD PTR ?nextId@ScreenItem@@1JA, edx ; ScreenItem::nextId

; 83   : 	pos.x = r.A.x;

  002b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002bb	8b 4d 10	 mov	 ecx, DWORD PTR _r$[ebp]
  002be	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c0	89 10		 mov	 DWORD PTR [eax], edx

; 84   : 	pos.y = r.A.y;

  002c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c5	8b 4d 10	 mov	 ecx, DWORD PTR _r$[ebp]
  002c8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002cb	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 85   : 	z = 0;

  002ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d1	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 86   : 	planeId = plane;

  002d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002db	8b 55 08	 mov	 edx, DWORD PTR _plane$[ebp]
  002de	89 51 3c	 mov	 DWORD PTR [ecx+60], edx

; 87   : 	bitmap = theBitmap;

  002e1	8b 75 0c	 mov	 esi, DWORD PTR _theBitmap$[ebp]
  002e4	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  002e7	83 c7 0c	 add	 edi, 12			; 0000000cH
  002ea	b9 05 00 00 00	 mov	 ecx, 5
  002ef	f3 a5		 rep movsd

; 88   : 	cel = NULL;

  002f1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002f4	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0

; 89   : 	fixedPriFlag = False;

  002fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002fe	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 90   : 	userMirror = False;

  00305	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00308	c7 42 5c 00 00
	00 00		 mov	 DWORD PTR [edx+92], 0

; 91   : 	picResNum = -1;

  0030f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00312	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 92   : 	updateCount = 0;

  00319	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0031c	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 93   : 	addCount = graphMgr->ScreenCount();

  00323	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00329	8b 02		 mov	 eax, DWORD PTR [edx]
  0032b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00331	ff 50 04	 call	 DWORD PTR [eax+4]
  00334	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00337	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 94   : 	deleteCount = 0;

  0033a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0033d	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], 0

; 95   : 	useInsetRect = False;

  00344	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00347	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 96   : 	if (bitmap.IsColor())

  0034e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00351	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00354	e8 00 00 00 00	 call	 ?IsColor@Bitmap@@QBEHXZ	; Bitmap::IsColor
  00359	85 c0		 test	 eax, eax
  0035b	74 12		 je	 SHORT $L61755

; 97   : 		// Color screenitem
; 98   : 		insetRect = r;

  0035d	8b 4d 10	 mov	 ecx, DWORD PTR _r$[ebp]
  00360	51		 push	 ecx
  00361	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00364	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0036a	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=
$L61755:

; 99   : }

  0036f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00372	5f		 pop	 edi
  00373	5e		 pop	 esi
  00374	8b e5		 mov	 esp, ebp
  00376	5d		 pop	 ebp
  00377	c2 0c 00	 ret	 12			; 0000000cH
??0ScreenItem@@QAE@JABVBitmap@@ABVSOL_Rect@@@Z ENDP	; ScreenItem::ScreenItem
_TEXT	ENDS
;	COMDAT ?IsColor@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsColor@Bitmap@@QBEHXZ PROC NEAR			; Bitmap::IsColor, COMDAT

; 136  : 	Bool	IsColor() const		{return type == tColor;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 38 03	 cmp	 DWORD PTR [eax], 3
  0000f	0f 94 c1	 sete	 cl
  00012	8b c1		 mov	 eax, ecx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsColor@Bitmap@@QBEHXZ ENDP				; Bitmap::IsColor
_TEXT	ENDS
PUBLIC	??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@@Z ; ScreenItem::ScreenItem
_TEXT	SEGMENT
_plane$ = 8
_theBitmap$ = 12
_p$ = 16
_scaleInfo$ = 24
_this$ = -4
??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@@Z PROC NEAR ; ScreenItem::ScreenItem

; 102  : {

  0037a	55		 push	 ebp
  0037b	8b ec		 mov	 ebp, esp
  0037d	51		 push	 ecx
  0037e	56		 push	 esi
  0037f	57		 push	 edi
  00380	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00383	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00386	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0038b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0038e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00391	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@XZ	; Bitmap::Bitmap
  00396	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00399	83 c1 20	 add	 ecx, 32			; 00000020H
  0039c	e8 00 00 00 00	 call	 ??0ScaleInfo@@QAE@XZ	; ScaleInfo::ScaleInfo
  003a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a4	83 c1 68	 add	 ecx, 104		; 00000068H
  003a7	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  003ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003af	83 c1 78	 add	 ecx, 120		; 00000078H
  003b2	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  003b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003ba	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  003c0	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  003c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003c8	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  003ce	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 103  : 	id = nextId++;

  003d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nextId@ScreenItem@@1JA ; ScreenItem::nextId
  003dc	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  003df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nextId@ScreenItem@@1JA ; ScreenItem::nextId
  003e5	83 c2 01	 add	 edx, 1
  003e8	89 15 00 00 00
	00		 mov	 DWORD PTR ?nextId@ScreenItem@@1JA, edx ; ScreenItem::nextId

; 104  : 	pos = p;

  003ee	8d 45 10	 lea	 eax, DWORD PTR _p$[ebp]
  003f1	50		 push	 eax
  003f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003f5	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 105  : 	z = 0;

  003fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fd	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 106  : 	planeId = plane;

  00404	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00407	8b 45 08	 mov	 eax, DWORD PTR _plane$[ebp]
  0040a	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 107  : 	bitmap = theBitmap;

  0040d	8b 75 0c	 mov	 esi, DWORD PTR _theBitmap$[ebp]
  00410	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00413	83 c7 0c	 add	 edi, 12			; 0000000cH
  00416	b9 05 00 00 00	 mov	 ecx, 5
  0041b	f3 a5		 rep movsd

; 108  : 	cel = NULL;

  0041d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00420	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0

; 109  : 	scale = scaleInfo;

  00427	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0042a	83 c2 20	 add	 edx, 32			; 00000020H
  0042d	8b 45 18	 mov	 eax, DWORD PTR _scaleInfo$[ebp]
  00430	89 02		 mov	 DWORD PTR [edx], eax
  00432	8b 4d 1c	 mov	 ecx, DWORD PTR _scaleInfo$[ebp+4]
  00435	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00438	8b 45 20	 mov	 eax, DWORD PTR _scaleInfo$[ebp+8]
  0043b	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0043e	8b 4d 24	 mov	 ecx, DWORD PTR _scaleInfo$[ebp+12]
  00441	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 110  : 	useInsetRect = False;

  00444	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00447	c7 42 58 00 00
	00 00		 mov	 DWORD PTR [edx+88], 0

; 111  : 	fixedPriFlag = False;

  0044e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00451	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 112  : 	userMirror = False;

  00458	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0045b	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0

; 113  : 	picResNum = -1;

  00462	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00465	c7 42 38 ff ff
	ff ff		 mov	 DWORD PTR [edx+56], -1

; 114  : 	updateCount = 0;

  0046c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0046f	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 115  : 	addCount = graphMgr->ScreenCount();

  00476	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0047c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0047e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00484	ff 52 04	 call	 DWORD PTR [edx+4]
  00487	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0048a	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 116  : 	deleteCount = 0;

  0048d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00490	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], 0

; 117  : }

  00497	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0049a	5f		 pop	 edi
  0049b	5e		 pop	 esi
  0049c	8b e5		 mov	 esp, ebp
  0049e	5d		 pop	 ebp
  0049f	c2 20 00	 ret	 32			; 00000020H
??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@@Z ENDP ; ScreenItem::ScreenItem
_TEXT	ENDS
PUBLIC	??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@H@Z ; ScreenItem::ScreenItem
_TEXT	SEGMENT
_plane$ = 8
_theBitmap$ = 12
_p$ = 16
_scaleInfo$ = 24
_theID$ = 40
_this$ = -4
??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@H@Z PROC NEAR ; ScreenItem::ScreenItem

; 120  : {

  004a2	55		 push	 ebp
  004a3	8b ec		 mov	 ebp, esp
  004a5	51		 push	 ecx
  004a6	56		 push	 esi
  004a7	57		 push	 edi
  004a8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  004ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ae	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  004b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004b6	83 c1 0c	 add	 ecx, 12			; 0000000cH
  004b9	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@XZ	; Bitmap::Bitmap
  004be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004c1	83 c1 20	 add	 ecx, 32			; 00000020H
  004c4	e8 00 00 00 00	 call	 ??0ScaleInfo@@QAE@XZ	; ScaleInfo::ScaleInfo
  004c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004cc	83 c1 68	 add	 ecx, 104		; 00000068H
  004cf	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  004d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004d7	83 c1 78	 add	 ecx, 120		; 00000078H
  004da	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  004df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004e2	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  004e8	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  004ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f0	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  004f6	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 121  : 	id = theID;

  004fb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004fe	8b 4d 28	 mov	 ecx, DWORD PTR _theID$[ebp]
  00501	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 122  : 	pos = p;

  00504	8d 55 10	 lea	 edx, DWORD PTR _p$[ebp]
  00507	52		 push	 edx
  00508	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0050b	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 123  : 	z = 0;

  00510	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00513	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 124  : 	planeId = plane;

  0051a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0051d	8b 55 08	 mov	 edx, DWORD PTR _plane$[ebp]
  00520	89 51 3c	 mov	 DWORD PTR [ecx+60], edx

; 125  : 	bitmap = theBitmap;

  00523	8b 75 0c	 mov	 esi, DWORD PTR _theBitmap$[ebp]
  00526	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00529	83 c7 0c	 add	 edi, 12			; 0000000cH
  0052c	b9 05 00 00 00	 mov	 ecx, 5
  00531	f3 a5		 rep movsd

; 126  : 	cel = NULL;

  00533	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00536	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0

; 127  : 	scale = scaleInfo;

  0053d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00540	83 c1 20	 add	 ecx, 32			; 00000020H
  00543	8b 55 18	 mov	 edx, DWORD PTR _scaleInfo$[ebp]
  00546	89 11		 mov	 DWORD PTR [ecx], edx
  00548	8b 45 1c	 mov	 eax, DWORD PTR _scaleInfo$[ebp+4]
  0054b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0054e	8b 55 20	 mov	 edx, DWORD PTR _scaleInfo$[ebp+8]
  00551	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00554	8b 45 24	 mov	 eax, DWORD PTR _scaleInfo$[ebp+12]
  00557	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 128  : 	useInsetRect = False;

  0055a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0055d	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0

; 129  : 	fixedPriFlag = False;

  00564	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00567	c7 42 44 00 00
	00 00		 mov	 DWORD PTR [edx+68], 0

; 130  : 	userMirror = False;

  0056e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00571	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 131  : 	picResNum = -1;

  00578	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0057b	c7 41 38 ff ff
	ff ff		 mov	 DWORD PTR [ecx+56], -1

; 132  : 	updateCount = 0;

  00582	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00585	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 133  : 	addCount = graphMgr->ScreenCount();

  0058c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00591	8b 10		 mov	 edx, DWORD PTR [eax]
  00593	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00599	ff 52 04	 call	 DWORD PTR [edx+4]
  0059c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0059f	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 134  : 	deleteCount = 0;

  005a2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005a5	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], 0

; 135  : }

  005ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005af	5f		 pop	 edi
  005b0	5e		 pop	 esi
  005b1	8b e5		 mov	 esp, ebp
  005b3	5d		 pop	 ebp
  005b4	c2 24 00	 ret	 36			; 00000024H
??0ScreenItem@@QAE@JABVBitmap@@VSOL_Point@@UScaleInfo@@H@Z ENDP ; ScreenItem::ScreenItem
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
PUBLIC	??0ScreenItem@@QAE@ABVObjectID@@@Z		; ScreenItem::ScreenItem
PUBLIC	?ClearGraphicsUpdate@Object@@QAEXXZ		; Object::ClearGraphicsUpdate
PUBLIC	??CFakeObjectID@@QBEPAUObject@@XZ		; FakeObjectID::operator->
PUBLIC	??0ObjectID@@QAE@XZ				; ObjectID::ObjectID
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
PUBLIC	?GetIndexedProperty@ObjectID@@QBEFH@Z		; ObjectID::GetIndexedProperty
PUBLIC	?SetIndexedProperty@ObjectID@@QBEXHF@Z		; ObjectID::SetIndexedProperty
PUBLIC	??0Bitmap@@QAE@HHH@Z				; Bitmap::Bitmap
PUBLIC	?SetType@Bitmap@@QAEXH@Z			; Bitmap::SetType
PUBLIC	?SetMemID@Bitmap@@QAEXABVMemID@@@Z		; Bitmap::SetMemID
EXTRN	?resMgr@@3PAVResourceMgr@@A:DWORD		; resMgr
_TEXT	SEGMENT
_theId$ = 8
_this$ = -64
_newView$ = -16
_newLoop$ = -8
_newCel$ = -20
_viewID$61784 = -32
_viewPtr$61786 = -28
_loopPtr$61789 = -24
_FBM$ = -12
_rectID$ = -4
$T62239 = -36
$T62240 = -56
$T62241 = -60
??0ScreenItem@@QAE@ABVObjectID@@@Z PROC NEAR		; ScreenItem::ScreenItem

; 138  : {

  005b7	55		 push	 ebp
  005b8	8b ec		 mov	 ebp, esp
  005ba	83 ec 40	 sub	 esp, 64			; 00000040H
  005bd	56		 push	 esi
  005be	57		 push	 edi
  005bf	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx
  005c2	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  005c5	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  005ca	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  005cd	83 c1 0c	 add	 ecx, 12			; 0000000cH
  005d0	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@XZ	; Bitmap::Bitmap
  005d5	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  005d8	83 c1 20	 add	 ecx, 32			; 00000020H
  005db	e8 00 00 00 00	 call	 ??0ScaleInfo@@QAE@XZ	; ScaleInfo::ScaleInfo
  005e0	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  005e3	83 c1 68	 add	 ecx, 104		; 00000068H
  005e6	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect
  005eb	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  005ee	83 c1 78	 add	 ecx, 120		; 00000078H
  005f1	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  005f6	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  005f9	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  005ff	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio
  00604	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00607	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0060d	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 139  : 	// This assignment operator is used for creating
; 140  : 	// a ScreenItem from an SCI screen object.
; 141  : 
; 142  : 	id = theId;

  00612	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00615	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0061a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0061f	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00622	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 143  : 
; 144  : 	// Set critical properties
; 145  : 	pos.x = (int)(signed short)theId.GetIndexedProperty(actX);

  00625	6a 00		 push	 0
  00627	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  0062a	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  0062f	0f bf d0	 movsx	 edx, ax
  00632	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00635	89 10		 mov	 DWORD PTR [eax], edx

; 146  : 	pos.y = (int)(signed short)theId.GetIndexedProperty(actY);

  00637	6a 01		 push	 1
  00639	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  0063c	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00641	0f bf c8	 movsx	 ecx, ax
  00644	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00647	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 147  : 
; 148  : 	scale.scaleX = theId.GetIndexedProperty(actScaleX);

  0064a	6a 15		 push	 21			; 00000015H
  0064c	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  0064f	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00654	0f bf c0	 movsx	 eax, ax
  00657	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0065a	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 149  : 	scale.scaleY = theId.GetIndexedProperty(actScaleY);

  0065d	6a 16		 push	 22			; 00000016H
  0065f	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00662	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00667	0f bf d0	 movsx	 edx, ax
  0066a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0066d	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 150  : 	scale.maxScale = theId.GetIndexedProperty(actMaxScale);

  00670	6a 17		 push	 23			; 00000017H
  00672	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00675	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  0067a	0f bf c8	 movsx	 ecx, ax
  0067d	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00680	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 151  : 	scale.scaleType = theId.GetIndexedProperty(actScaleSignal) & 3;

  00683	6a 18		 push	 24			; 00000018H
  00685	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00688	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  0068d	0f bf c0	 movsx	 eax, ax
  00690	83 e0 03	 and	 eax, 3
  00693	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00696	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 152  : 
; 153  : 	uint newView = theId.GetIndexedProperty(actView);

  00699	6a 03		 push	 3
  0069b	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  0069e	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  006a3	0f bf d0	 movsx	 edx, ax
  006a6	89 55 f0	 mov	 DWORD PTR _newView$[ebp], edx

; 154  : 	uint newLoop = theId.GetIndexedProperty(actLoop);

  006a9	6a 04		 push	 4
  006ab	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  006ae	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  006b3	0f bf c0	 movsx	 eax, ax
  006b6	89 45 f8	 mov	 DWORD PTR _newLoop$[ebp], eax

; 155  : 	uint newCel = theId.GetIndexedProperty(actCel);

  006b9	6a 05		 push	 5
  006bb	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  006be	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  006c3	0f bf c8	 movsx	 ecx, ax
  006c6	89 4d ec	 mov	 DWORD PTR _newCel$[ebp], ecx

; 156  : 
; 157  :    if (newView < (uint) -2)

  006c9	83 7d f0 fe	 cmp	 DWORD PTR _newView$[ebp], -2 ; fffffffeH
  006cd	0f 83 dc 00 00
	00		 jae	 $L61795

; 159  : 	   // Load the view into memory
; 160  : 		MemID viewID;

  006d3	8d 4d e0	 lea	 ecx, DWORD PTR _viewID$61784[ebp]
  006d6	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID

; 161  : 	   viewID = resMgr->Get(MemResView, newView);

  006db	6a 00		 push	 0
  006dd	66 8b 55 f0	 mov	 dx, WORD PTR _newView$[ebp]
  006e1	52		 push	 edx
  006e2	6a 00		 push	 0
  006e4	8d 45 dc	 lea	 eax, DWORD PTR $T62239[ebp]
  006e7	50		 push	 eax
  006e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  006ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  006f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  006f6	ff 52 20	 call	 DWORD PTR [edx+32]
  006f9	66 8b 00	 mov	 ax, WORD PTR [eax]
  006fc	66 89 45 e0	 mov	 WORD PTR _viewID$61784[ebp], ax

; 162  : 
; 163  : 	   ViewHeader* viewPtr = (ViewHeader*) *viewID;

  00700	8d 4d e0	 lea	 ecx, DWORD PTR _viewID$61784[ebp]
  00703	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00708	89 45 e4	 mov	 DWORD PTR _viewPtr$61786[ebp], eax

; 164  : 
; 165  : 	   if (viewPtr->loopCount <= newLoop)

  0070b	8b 4d e4	 mov	 ecx, DWORD PTR _viewPtr$61786[ebp]
  0070e	33 d2		 xor	 edx, edx
  00710	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00713	3b 55 f8	 cmp	 edx, DWORD PTR _newLoop$[ebp]
  00716	77 1d		 ja	 SHORT $L61788

; 167  :          newLoop = viewPtr->loopCount - 1;

  00718	8b 45 e4	 mov	 eax, DWORD PTR _viewPtr$61786[ebp]
  0071b	33 c9		 xor	 ecx, ecx
  0071d	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00720	83 e9 01	 sub	 ecx, 1
  00723	89 4d f8	 mov	 DWORD PTR _newLoop$[ebp], ecx

; 168  : 			theId.SetIndexedProperty(actLoop, newLoop);

  00726	66 8b 55 f8	 mov	 dx, WORD PTR _newLoop$[ebp]
  0072a	52		 push	 edx
  0072b	6a 04		 push	 4
  0072d	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00730	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty
$L61788:

; 170  : 
; 171  : 	   LoopHeader* loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize * newLoop + viewPtr->viewHeaderSize + 2); 

  00735	8b 45 e4	 mov	 eax, DWORD PTR _viewPtr$61786[ebp]
  00738	33 c9		 xor	 ecx, ecx
  0073a	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  0073d	0f af 4d f8	 imul	 ecx, DWORD PTR _newLoop$[ebp]
  00741	8b 55 e4	 mov	 edx, DWORD PTR _viewPtr$61786[ebp]
  00744	03 d1		 add	 edx, ecx
  00746	8b 45 e4	 mov	 eax, DWORD PTR _viewPtr$61786[ebp]
  00749	33 c9		 xor	 ecx, ecx
  0074b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0074e	8d 54 0a 02	 lea	 edx, DWORD PTR [edx+ecx+2]
  00752	89 55 e8	 mov	 DWORD PTR _loopPtr$61789[ebp], edx

; 172  :       if (loopPtr->altLoop != -1)       

  00755	8b 45 e8	 mov	 eax, DWORD PTR _loopPtr$61789[ebp]
  00758	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0075b	83 f9 ff	 cmp	 ecx, -1
  0075e	74 25		 je	 SHORT $L61792

; 173  :  		   loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize*loopPtr->altLoop + viewPtr->viewHeaderSize + 2);

  00760	8b 55 e4	 mov	 edx, DWORD PTR _viewPtr$61786[ebp]
  00763	33 c0		 xor	 eax, eax
  00765	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  00768	8b 4d e8	 mov	 ecx, DWORD PTR _loopPtr$61789[ebp]
  0076b	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0076e	0f af c2	 imul	 eax, edx
  00771	8b 4d e4	 mov	 ecx, DWORD PTR _viewPtr$61786[ebp]
  00774	03 c8		 add	 ecx, eax
  00776	8b 55 e4	 mov	 edx, DWORD PTR _viewPtr$61786[ebp]
  00779	33 c0		 xor	 eax, eax
  0077b	66 8b 02	 mov	 ax, WORD PTR [edx]
  0077e	8d 4c 01 02	 lea	 ecx, DWORD PTR [ecx+eax+2]
  00782	89 4d e8	 mov	 DWORD PTR _loopPtr$61789[ebp], ecx
$L61792:

; 174  : 
; 175  : 	   if (loopPtr->numCels <= newCel)

  00785	8b 55 e8	 mov	 edx, DWORD PTR _loopPtr$61789[ebp]
  00788	33 c0		 xor	 eax, eax
  0078a	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  0078d	3b 45 ec	 cmp	 eax, DWORD PTR _newCel$[ebp]
  00790	77 1d		 ja	 SHORT $L61795

; 177  :          newCel = loopPtr->numCels - 1;

  00792	8b 4d e8	 mov	 ecx, DWORD PTR _loopPtr$61789[ebp]
  00795	33 d2		 xor	 edx, edx
  00797	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  0079a	83 ea 01	 sub	 edx, 1
  0079d	89 55 ec	 mov	 DWORD PTR _newCel$[ebp], edx

; 178  : 			theId.SetIndexedProperty(actCel, newCel);

  007a0	66 8b 45 ec	 mov	 ax, WORD PTR _newCel$[ebp]
  007a4	50		 push	 eax
  007a5	6a 05		 push	 5
  007a7	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  007aa	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty
$L61795:

; 181  :    bitmap = Bitmap(newView, newLoop, newCel);

  007af	8b 4d ec	 mov	 ecx, DWORD PTR _newCel$[ebp]
  007b2	51		 push	 ecx
  007b3	8b 55 f8	 mov	 edx, DWORD PTR _newLoop$[ebp]
  007b6	52		 push	 edx
  007b7	8b 45 f0	 mov	 eax, DWORD PTR _newView$[ebp]
  007ba	50		 push	 eax
  007bb	8d 4d c8	 lea	 ecx, DWORD PTR $T62240[ebp]
  007be	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@HHH@Z	; Bitmap::Bitmap
  007c3	8b f0		 mov	 esi, eax
  007c5	8b 7d c0	 mov	 edi, DWORD PTR _this$[ebp]
  007c8	83 c7 0c	 add	 edi, 12			; 0000000cH
  007cb	b9 05 00 00 00	 mov	 ecx, 5
  007d0	f3 a5		 rep movsd

; 182  : 	
; 183  :    // If there is a font bitmap use it
; 184  : 	MemID FBM = theId.GetIndexedProperty(actBitmap);

  007d2	6a 19		 push	 25			; 00000019H
  007d4	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  007d7	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  007dc	50		 push	 eax
  007dd	8d 4d f4	 lea	 ecx, DWORD PTR _FBM$[ebp]
  007e0	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 185  :    if (FBM)

  007e5	8d 4d f4	 lea	 ecx, DWORD PTR _FBM$[ebp]
  007e8	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  007ed	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  007f2	85 c0		 test	 eax, eax
  007f4	74 1c		 je	 SHORT $L61798

; 187  :       bitmap.SetMemID(FBM);

  007f6	8d 4d f4	 lea	 ecx, DWORD PTR _FBM$[ebp]
  007f9	51		 push	 ecx
  007fa	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  007fd	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00800	e8 00 00 00 00	 call	 ?SetMemID@Bitmap@@QAEXABVMemID@@@Z ; Bitmap::SetMemID

; 188  :       bitmap.SetType(Bitmap::tMem);

  00805	6a 02		 push	 2
  00807	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0080a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0080d	e8 00 00 00 00	 call	 ?SetType@Bitmap@@QAEXH@Z ; Bitmap::SetType
$L61798:

; 190  : 
; 191  : 	planeId = (unsigned int)((unsigned short)theId.GetIndexedProperty(actPlaneID));

  00812	6a 1a		 push	 26			; 0000001aH
  00814	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00817	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  0081c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00821	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00824	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 192  : 
; 193  : 	if (theId.GetIndexedProperty(actFixedPri))

  00827	6a 1b		 push	 27			; 0000001bH
  00829	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  0082c	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00831	0f bf c0	 movsx	 eax, ax
  00834	85 c0		 test	 eax, eax
  00836	74 1f		 je	 SHORT $L61801

; 195  : 		priority = theId.GetIndexedProperty(actPri);

  00838	6a 06		 push	 6
  0083a	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  0083d	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00842	0f bf c8	 movsx	 ecx, ax
  00845	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00848	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 196  : 		fixedPriFlag = True;

  0084b	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0084e	c7 40 44 01 00
	00 00		 mov	 DWORD PTR [eax+68], 1

; 198  : 	else

  00855	eb 1c		 jmp	 SHORT $L61802
$L61801:

; 200  : 		fixedPriFlag = False;

  00857	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0085a	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 201  : 		theId.SetIndexedProperty(actPri, pos.y);

  00861	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00864	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  00868	50		 push	 eax
  00869	6a 06		 push	 6
  0086b	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  0086e	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty
$L61802:

; 203  : 
; 204  : 	//  Adjust for Z property
; 205  : 	z = theId.GetIndexedProperty(actZ);

  00873	6a 1f		 push	 31			; 0000001fH
  00875	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00878	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  0087d	0f bf c8	 movsx	 ecx, ax
  00880	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00883	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 206  : 	pos.y -= z;

  00886	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00889	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0088c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0088f	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  00892	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00895	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 207  : 
; 208  : 	ObjectID rectID;

  00898	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  0089b	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@XZ	; ObjectID::ObjectID

; 209  : 
; 210  : 	if (rectID = theId.GetIndexedProperty(actSeenRect)) {

  008a0	6a 1c		 push	 28			; 0000001cH
  008a2	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  008a5	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  008aa	50		 push	 eax
  008ab	8d 4d c4	 lea	 ecx, DWORD PTR $T62241[ebp]
  008ae	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  008b3	66 8b 4d c4	 mov	 cx, WORD PTR $T62241[ebp]
  008b7	66 89 4d fc	 mov	 WORD PTR _rectID$[ebp], cx
  008bb	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  008be	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  008c3	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  008c8	85 c0		 test	 eax, eax
  008ca	74 64		 je	 SHORT $L61805

; 211  : 		insetRect.A.x =	rectID.GetIndexedProperty(actLeft);

  008cc	6a 07		 push	 7
  008ce	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  008d1	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  008d6	0f bf d0	 movsx	 edx, ax
  008d9	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  008dc	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 212  : 		insetRect.A.y =	rectID.GetIndexedProperty(actTop);

  008e2	6a 08		 push	 8
  008e4	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  008e7	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  008ec	0f bf c8	 movsx	 ecx, ax
  008ef	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  008f2	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 213  : 		insetRect.B.x =	rectID.GetIndexedProperty(actRight);

  008f8	6a 09		 push	 9
  008fa	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  008fd	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00902	0f bf c0	 movsx	 eax, ax
  00905	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00908	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 214  : 		insetRect.B.y =	rectID.GetIndexedProperty(actBottom);

  0090e	6a 0a		 push	 10			; 0000000aH
  00910	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  00913	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00918	0f bf d0	 movsx	 edx, ax
  0091b	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0091e	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx

; 215  : 		useInsetRect = True;

  00924	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00927	c7 41 58 01 00
	00 00		 mov	 DWORD PTR [ecx+88], 1

; 216  : 	} else {

  0092e	eb 0a		 jmp	 SHORT $L61806
$L61805:

; 217  : 		useInsetRect = False;

  00930	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00933	c7 42 58 00 00
	00 00		 mov	 DWORD PTR [edx+88], 0
$L61806:

; 219  : 
; 220  : 	userMirror = False;

  0093a	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0093d	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 221  : 	picResNum = -1;

  00944	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00947	c7 41 38 ff ff
	ff ff		 mov	 DWORD PTR [ecx+56], -1

; 222  : 
; 223  : 	theId->ClearGraphicsUpdate();

  0094e	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00951	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  00956	8b c8		 mov	 ecx, eax
  00958	e8 00 00 00 00	 call	 ?ClearGraphicsUpdate@Object@@QAEXXZ ; Object::ClearGraphicsUpdate

; 224  : 
; 225  : 	cel = NULL;

  0095d	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00960	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], 0

; 226  : 
; 227  : 	addCount = graphMgr->ScreenCount();

  00967	a1 00 00 00 00	 mov	 eax, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  0096c	8b 10		 mov	 edx, DWORD PTR [eax]
  0096e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00974	ff 52 04	 call	 DWORD PTR [edx+4]
  00977	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0097a	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 228  : 	deleteCount = 0;

  0097d	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00980	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], 0

; 229  : 	updateCount = 0;

  00987	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0098a	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 230  : }

  00991	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00994	5f		 pop	 edi
  00995	5e		 pop	 esi
  00996	8b e5		 mov	 esp, ebp
  00998	5d		 pop	 ebp
  00999	c2 04 00	 ret	 4
??0ScreenItem@@QAE@ABVObjectID@@@Z ENDP			; ScreenItem::ScreenItem
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
EXTRN	_memMgr:DWORD
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT
_v$ = 8
_l$ = 12
_c$ = 16
_this$ = -4
??0Bitmap@@QAE@HHH@Z PROC NEAR				; Bitmap::Bitmap, COMDAT

; 126  : 	Bitmap(const int v, const int l, const int c)	{view = v; loop = l; cel = c; type = tView;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00018	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _l$[ebp]
  00021	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	8b 55 10	 mov	 edx, DWORD PTR _c$[ebp]
  0002a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
??0Bitmap@@QAE@HHH@Z ENDP				; Bitmap::Bitmap
_TEXT	ENDS
;	COMDAT ?SetType@Bitmap@@QAEXH@Z
_TEXT	SEGMENT
_theType$ = 8
_this$ = -4
?SetType@Bitmap@@QAEXH@Z PROC NEAR			; Bitmap::SetType, COMDAT

; 151  : 	void	SetType(int theType)	{type = theType;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _theType$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetType@Bitmap@@QAEXH@Z ENDP				; Bitmap::SetType
_TEXT	ENDS
;	COMDAT ?SetMemID@Bitmap@@QAEXABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
?SetMemID@Bitmap@@QAEXABVMemID@@@Z PROC NEAR		; Bitmap::SetMemID, COMDAT

; 152  : 	void	SetMemID(const MemID& id)	{memid = id;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00010	66 89 4a 10	 mov	 WORD PTR [edx+16], cx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?SetMemID@Bitmap@@QAEXABVMemID@@@Z ENDP			; Bitmap::SetMemID
_TEXT	ENDS
;	COMDAT ?ClearGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?ClearGraphicsUpdate@Object@@QAEXXZ PROC NEAR		; Object::ClearGraphicsUpdate, COMDAT

; 98   : 	void		ClearGraphicsUpdate()	{ info &= ~GRAPH_UPD; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  0000e	80 e1 f7	 and	 cl, -9			; fffffff7H
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?ClearGraphicsUpdate@Object@@QAEXXZ ENDP		; Object::ClearGraphicsUpdate
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeObjectID@@QBEPAUObject@@XZ PROC NEAR		; FakeObjectID::operator->, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeObjectID@@QBEPAUObject@@XZ ENDP			; FakeObjectID::operator->
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@XZ				; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ObjectID@@QAE@XZ PROC NEAR				; ObjectID::ObjectID, COMDAT

; 227  : 	ObjectID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@XZ	; FakeObjectID::FakeObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ObjectID@@QAE@XZ ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeObjectID@@QAE@XZ PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeObjectID@@QAE@XZ ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	?GetIndexedProperty@Object@@QAEFH@Z		; Object::GetIndexedProperty
PUBLIC	?AssureValid@ObjectID@@QBEXXZ			; ObjectID::AssureValid
;	COMDAT ?GetIndexedProperty@ObjectID@@QBEFH@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
?GetIndexedProperty@ObjectID@@QBEFH@Z PROC NEAR		; ObjectID::GetIndexedProperty, COMDAT

; 266  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 267  : 		//	get a property given an index in the property offsets table
; 268  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 269  : 		return (*this)->GetIndexedProperty(index);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001b	8b c8		 mov	 ecx, eax
  0001d	e8 00 00 00 00	 call	 ?GetIndexedProperty@Object@@QAEFH@Z ; Object::GetIndexedProperty

; 270  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetIndexedProperty@ObjectID@@QBEFH@Z ENDP		; ObjectID::GetIndexedProperty
_TEXT	ENDS
PUBLIC	?GetIndexedPropAddr@Object@@QAEPBFH@Z		; Object::GetIndexedPropAddr
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
?GetIndexedProperty@Object@@QAEFH@Z PROC NEAR		; Object::GetIndexedProperty, COMDAT

; 146  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 147  : 		//	get a property given an index in the property offsets table
; 148  : 		return *GetIndexedPropAddr(index);

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetIndexedPropAddr@Object@@QAEPBFH@Z ; Object::GetIndexedPropAddr
  00013	66 8b 00	 mov	 ax, WORD PTR [eax]

; 149  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetIndexedProperty@Object@@QAEFH@Z ENDP		; Object::GetIndexedProperty
_TEXT	ENDS
PUBLIC	??AObject@@QAEAAFH@Z				; Object::operator[]
EXTRN	?indexedPropertyOffsets@@3PAIA:BYTE		; indexedPropertyOffsets
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
?GetIndexedPropAddr@Object@@QAEPBFH@Z PROC NEAR		; Object::GetIndexedPropAddr, COMDAT

; 138  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 139  : 		//	get a property address given an index into the property offsets table
; 140  : 		extern size_t indexedPropertyOffsets[];
; 141  : 		return &(*this)[indexedPropertyOffsets[index]];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?indexedPropertyOffsets@@3PAIA[eax*4]
  00011	51		 push	 ecx
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??AObject@@QAEAAFH@Z	; Object::operator[]

; 142  : 	}

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetIndexedPropAddr@Object@@QAEPBFH@Z ENDP		; Object::GetIndexedPropAddr
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
??AObject@@QAEAAFH@Z PROC NEAR				; Object::operator[], COMDAT

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		//	get a reference to a property given the number of the property
; 119  : 		return ((Property*) this)[index];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 120  : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??AObject@@QAEAAFH@Z ENDP				; Object::operator[]
_TEXT	ENDS
PUBLIC	?IsObject@ObjectID@@QBEHXZ			; ObjectID::IsObject
EXTRN	?Fatal@MsgMgr@@QAAXHZZ:NEAR			; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssureValid@ObjectID@@QBEXXZ PROC NEAR			; ObjectID::AssureValid, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 239  : 		if (!IsObject())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  0000f	85 c0		 test	 eax, eax
  00011	75 1e		 jne	 SHORT $L60970

; 240  : 			msgMgr->Fatal(Msg_NotObject, (int) *this);

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0001b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00020	50		 push	 eax
  00021	6a 2f		 push	 47			; 0000002fH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L60970:

; 241  : 	}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?AssureValid@ObjectID@@QBEXXZ ENDP			; ObjectID::AssureValid
_TEXT	ENDS
PUBLIC	?IsValid@MemID@@QBEHXZ				; MemID::IsValid
EXTRN	?GetMemType@MemID@@QBE?AW4MemType@@XZ:NEAR	; MemID::GetMemType
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsObject@ObjectID@@QBEHXZ PROC NEAR			; ObjectID::IsObject, COMDAT

; 247  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 		return IsValid() && GetMemType() == MemObject;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00011	85 c0		 test	 eax, eax
  00013	74 16		 je	 SHORT $L62261
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0001d	83 f8 34	 cmp	 eax, 52			; 00000034H
  00020	75 09		 jne	 SHORT $L62261
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  00029	eb 07		 jmp	 SHORT $L62262
$L62261:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L62262:
  00032	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 249  : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?IsObject@ObjectID@@QBEHXZ ENDP				; ObjectID::IsObject
_TEXT	ENDS
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@MemID@@QBEHXZ PROC NEAR			; MemID::IsValid, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return memMgr->IsValid(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid

; 64   : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IsValid@MemID@@QBEHXZ ENDP				; MemID::IsValid
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L62265
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L62265
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L62265
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L62265
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L62266
$L62265:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L62266:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
PUBLIC	?SetIndexedProperty@Object@@QAEXHF@Z		; Object::SetIndexedProperty
;	COMDAT ?SetIndexedProperty@ObjectID@@QBEXHF@Z
_TEXT	SEGMENT
_index$ = 8
_property$ = 12
_this$ = -4
?SetIndexedProperty@ObjectID@@QBEXHF@Z PROC NEAR	; ObjectID::SetIndexedProperty, COMDAT

; 324  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  : 		//	set a property given an index into property offsets table
; 326  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 327  : 		(*this)->SetIndexedProperty(index, property);

  0000f	66 8b 45 0c	 mov	 ax, WORD PTR _property$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  00017	51		 push	 ecx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?SetIndexedProperty@Object@@QAEXHF@Z ; Object::SetIndexedProperty

; 328  : 	}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?SetIndexedProperty@ObjectID@@QBEXHF@Z ENDP		; ObjectID::SetIndexedProperty
_TEXT	ENDS
PUBLIC	?SetPropAtOffset@Object@@QAEAAFI@Z		; Object::SetPropAtOffset
EXTRN	?indexedPropertyOffsets@@3PAIA:BYTE		; indexedPropertyOffsets
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT
_index$ = 8
_property$ = 12
_this$ = -4
?SetIndexedProperty@Object@@QAEXHF@Z PROC NEAR		; Object::SetIndexedProperty, COMDAT

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 189  : 		//	set a property given an index into property offsets table
; 190  : 		extern size_t indexedPropertyOffsets[];
; 191  : 		SetPropAtOffset(indexedPropertyOffsets[index] * sizeof(Property)) =
; 192  : 			property;

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?indexedPropertyOffsets@@3PAIA[eax*4]
  00011	d1 e1		 shl	 ecx, 1
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?SetPropAtOffset@Object@@QAEAAFI@Z ; Object::SetPropAtOffset
  0001c	66 8b 55 0c	 mov	 dx, WORD PTR _property$[ebp]
  00020	66 89 10	 mov	 WORD PTR [eax], dx

; 193  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?SetIndexedProperty@Object@@QAEXHF@Z ENDP		; Object::SetIndexedProperty
_TEXT	ENDS
PUBLIC	?SetGraphicsUpdate@Object@@QAEXXZ		; Object::SetGraphicsUpdate
PUBLIC	?GetPropAtOffset@Object@@QAEAAFI@Z		; Object::GetPropAtOffset
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT
_offset$ = 8
_this$ = -4
?SetPropAtOffset@Object@@QAEAAFI@Z PROC NEAR		; Object::SetPropAtOffset, COMDAT

; 197  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 198  : 		//	return reference to property that is about to be changed
; 199  : 		if (offset <= MaxGraphUpdateOffset && offset >= MinGraphUpdateOffset)

  00007	83 7d 08 56	 cmp	 DWORD PTR _offset$[ebp], 86 ; 00000056H
  0000b	77 0e		 ja	 SHORT $L60829
  0000d	83 7d 08 30	 cmp	 DWORD PTR _offset$[ebp], 48 ; 00000030H
  00011	72 08		 jb	 SHORT $L60829

; 200  : 			SetGraphicsUpdate();

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?SetGraphicsUpdate@Object@@QAEXXZ ; Object::SetGraphicsUpdate
$L60829:

; 201  : 		return GetPropAtOffset(offset);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _offset$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?GetPropAtOffset@Object@@QAEAAFI@Z ; Object::GetPropAtOffset

; 202  : 	}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetPropAtOffset@Object@@QAEAAFI@Z ENDP			; Object::SetPropAtOffset
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?SetGraphicsUpdate@Object@@QAEXXZ PROC NEAR		; Object::SetGraphicsUpdate, COMDAT

; 97   : 	void		SetGraphicsUpdate()		{ info |= GRAPH_UPD; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  0000e	80 c9 08	 or	 cl, 8
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?SetGraphicsUpdate@Object@@QAEXXZ ENDP			; Object::SetGraphicsUpdate
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT
_offset$ = 8
_this$ = -4
?GetPropAtOffset@Object@@QAEAAFI@Z PROC NEAR		; Object::GetPropAtOffset, COMDAT

; 163  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 		//	get a property given an offset into the object
; 165  : 		return (Property&) ((char*) this)[offset];

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	03 45 08	 add	 eax, DWORD PTR _offset$[ebp]

; 166  : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?GetPropAtOffset@Object@@QAEAAFI@Z ENDP			; Object::GetPropAtOffset
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
PUBLIC	??4ScreenItem@@QAEAAV0@ABVObjectID@@@Z		; ScreenItem::operator=
PUBLIC	?View@Bitmap@@QBEHXZ				; Bitmap::View
PUBLIC	?Loop@Bitmap@@QBEHXZ				; Bitmap::Loop
PUBLIC	?Cel@Bitmap@@QBEHXZ				; Bitmap::Cel
_TEXT	SEGMENT
_theId$ = 8
_this$ = -64
_newView$ = -16
_newLoop$ = -8
_newCel$ = -20
_viewID$61822 = -32
_viewPtr$61824 = -28
_loopPtr$61827 = -24
_FBM$ = -12
_rectID$ = -4
$T62273 = -36
$T62274 = -56
$T62275 = -60
??4ScreenItem@@QAEAAV0@ABVObjectID@@@Z PROC NEAR	; ScreenItem::operator=

; 237  : {

  0099c	55		 push	 ebp
  0099d	8b ec		 mov	 ebp, esp
  0099f	83 ec 40	 sub	 esp, 64			; 00000040H
  009a2	56		 push	 esi
  009a3	57		 push	 edi
  009a4	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 238  : 	// This assignment operator is used for updating
; 239  : 	// a ScreenItem from an SCI screen object.
; 240  : 
; 241  : 	// Set critical properties
; 242  : 	pos.x = (int)(signed short)theId.GetIndexedProperty(actX);

  009a7	6a 00		 push	 0
  009a9	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  009ac	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  009b1	0f bf c0	 movsx	 eax, ax
  009b4	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  009b7	89 01		 mov	 DWORD PTR [ecx], eax

; 243  : 	pos.y = (int)(signed short)theId.GetIndexedProperty(actY);

  009b9	6a 01		 push	 1
  009bb	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  009be	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  009c3	0f bf d0	 movsx	 edx, ax
  009c6	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  009c9	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 244  : 
; 245  : 	scale.scaleX = theId.GetIndexedProperty(actScaleX);

  009cc	6a 15		 push	 21			; 00000015H
  009ce	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  009d1	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  009d6	0f bf c8	 movsx	 ecx, ax
  009d9	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  009dc	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 246  : 	scale.scaleY = theId.GetIndexedProperty(actScaleY);

  009df	6a 16		 push	 22			; 00000016H
  009e1	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  009e4	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  009e9	0f bf c0	 movsx	 eax, ax
  009ec	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  009ef	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 247  : 	scale.maxScale = theId.GetIndexedProperty(actMaxScale);

  009f2	6a 17		 push	 23			; 00000017H
  009f4	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  009f7	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  009fc	0f bf d0	 movsx	 edx, ax
  009ff	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00a02	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 248  : 	scale.scaleType = theId.GetIndexedProperty(actScaleSignal) & 3;

  00a05	6a 18		 push	 24			; 00000018H
  00a07	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00a0a	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00a0f	0f bf c8	 movsx	 ecx, ax
  00a12	83 e1 03	 and	 ecx, 3
  00a15	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00a18	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 249  : 
; 250  : 	uint newView = theId.GetIndexedProperty(actView);

  00a1b	6a 03		 push	 3
  00a1d	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00a20	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00a25	0f bf c0	 movsx	 eax, ax
  00a28	89 45 f0	 mov	 DWORD PTR _newView$[ebp], eax

; 251  : 	uint newLoop = theId.GetIndexedProperty(actLoop);

  00a2b	6a 04		 push	 4
  00a2d	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00a30	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00a35	0f bf c8	 movsx	 ecx, ax
  00a38	89 4d f8	 mov	 DWORD PTR _newLoop$[ebp], ecx

; 252  : 	uint newCel = theId.GetIndexedProperty(actCel);

  00a3b	6a 05		 push	 5
  00a3d	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00a40	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00a45	0f bf d0	 movsx	 edx, ax
  00a48	89 55 ec	 mov	 DWORD PTR _newCel$[ebp], edx

; 255  : 		 (newLoop != bitmap.Loop())	||
; 256  : 		 (newCel != bitmap.Cel()))

  00a4b	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a4e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00a51	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  00a56	39 45 f0	 cmp	 DWORD PTR _newView$[ebp], eax
  00a59	75 24		 jne	 SHORT $L61819
  00a5b	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a5e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00a61	e8 00 00 00 00	 call	 ?Loop@Bitmap@@QBEHXZ	; Bitmap::Loop
  00a66	39 45 f8	 cmp	 DWORD PTR _newLoop$[ebp], eax
  00a69	75 14		 jne	 SHORT $L61819
  00a6b	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a6e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00a71	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  00a76	39 45 ec	 cmp	 DWORD PTR _newCel$[ebp], eax
  00a79	0f 84 0d 01 00
	00		 je	 $L61818
$L61819:

; 258  : 
; 259  :    	if (newView < (uint) -2)

  00a7f	83 7d f0 fe	 cmp	 DWORD PTR _newView$[ebp], -2 ; fffffffeH
  00a83	0f 83 d6 00 00
	00		 jae	 $L61833

; 261  : 	   	// Load the view into memory
; 262  : 	   	MemID viewID = resMgr->Get(MemResView, newView);

  00a89	6a 00		 push	 0
  00a8b	66 8b 45 f0	 mov	 ax, WORD PTR _newView$[ebp]
  00a8f	50		 push	 eax
  00a90	6a 00		 push	 0
  00a92	8d 4d dc	 lea	 ecx, DWORD PTR $T62273[ebp]
  00a95	51		 push	 ecx
  00a96	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00a9c	8b 02		 mov	 eax, DWORD PTR [edx]
  00a9e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resMgr@@3PAVResourceMgr@@A ; resMgr
  00aa4	ff 50 20	 call	 DWORD PTR [eax+32]
  00aa7	50		 push	 eax
  00aa8	8d 4d e0	 lea	 ecx, DWORD PTR _viewID$61822[ebp]
  00aab	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID

; 263  : 	   	ViewHeader* viewPtr = (ViewHeader*) *viewID;

  00ab0	8d 4d e0	 lea	 ecx, DWORD PTR _viewID$61822[ebp]
  00ab3	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  00ab8	89 45 e4	 mov	 DWORD PTR _viewPtr$61824[ebp], eax

; 264  : 
; 265  : 	   	if (viewPtr->loopCount <= newLoop)

  00abb	8b 4d e4	 mov	 ecx, DWORD PTR _viewPtr$61824[ebp]
  00abe	33 d2		 xor	 edx, edx
  00ac0	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00ac3	3b 55 f8	 cmp	 edx, DWORD PTR _newLoop$[ebp]
  00ac6	77 1d		 ja	 SHORT $L61826

; 267  :          	newLoop = viewPtr->loopCount - 1;

  00ac8	8b 45 e4	 mov	 eax, DWORD PTR _viewPtr$61824[ebp]
  00acb	33 c9		 xor	 ecx, ecx
  00acd	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00ad0	83 e9 01	 sub	 ecx, 1
  00ad3	89 4d f8	 mov	 DWORD PTR _newLoop$[ebp], ecx

; 268  : 				theId.SetIndexedProperty(actLoop, newLoop);

  00ad6	66 8b 55 f8	 mov	 dx, WORD PTR _newLoop$[ebp]
  00ada	52		 push	 edx
  00adb	6a 04		 push	 4
  00add	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00ae0	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty
$L61826:

; 270  : 
; 271  : 	   	LoopHeader* loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize * newLoop + viewPtr->viewHeaderSize + 2); 

  00ae5	8b 45 e4	 mov	 eax, DWORD PTR _viewPtr$61824[ebp]
  00ae8	33 c9		 xor	 ecx, ecx
  00aea	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  00aed	0f af 4d f8	 imul	 ecx, DWORD PTR _newLoop$[ebp]
  00af1	8b 55 e4	 mov	 edx, DWORD PTR _viewPtr$61824[ebp]
  00af4	03 d1		 add	 edx, ecx
  00af6	8b 45 e4	 mov	 eax, DWORD PTR _viewPtr$61824[ebp]
  00af9	33 c9		 xor	 ecx, ecx
  00afb	66 8b 08	 mov	 cx, WORD PTR [eax]
  00afe	8d 54 0a 02	 lea	 edx, DWORD PTR [edx+ecx+2]
  00b02	89 55 e8	 mov	 DWORD PTR _loopPtr$61827[ebp], edx

; 272  :       	if (loopPtr->altLoop != -1)       

  00b05	8b 45 e8	 mov	 eax, DWORD PTR _loopPtr$61827[ebp]
  00b08	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00b0b	83 f9 ff	 cmp	 ecx, -1
  00b0e	74 25		 je	 SHORT $L61830

; 273  :  		   	loopPtr = (LoopHeader*) ((char*) viewPtr + viewPtr->loopHeaderSize*loopPtr->altLoop + viewPtr->viewHeaderSize + 2);

  00b10	8b 55 e4	 mov	 edx, DWORD PTR _viewPtr$61824[ebp]
  00b13	33 c0		 xor	 eax, eax
  00b15	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  00b18	8b 4d e8	 mov	 ecx, DWORD PTR _loopPtr$61827[ebp]
  00b1b	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00b1e	0f af c2	 imul	 eax, edx
  00b21	8b 4d e4	 mov	 ecx, DWORD PTR _viewPtr$61824[ebp]
  00b24	03 c8		 add	 ecx, eax
  00b26	8b 55 e4	 mov	 edx, DWORD PTR _viewPtr$61824[ebp]
  00b29	33 c0		 xor	 eax, eax
  00b2b	66 8b 02	 mov	 ax, WORD PTR [edx]
  00b2e	8d 4c 01 02	 lea	 ecx, DWORD PTR [ecx+eax+2]
  00b32	89 4d e8	 mov	 DWORD PTR _loopPtr$61827[ebp], ecx
$L61830:

; 274  : 
; 275  : 	   	if (loopPtr->numCels <= newCel)

  00b35	8b 55 e8	 mov	 edx, DWORD PTR _loopPtr$61827[ebp]
  00b38	33 c0		 xor	 eax, eax
  00b3a	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00b3d	3b 45 ec	 cmp	 eax, DWORD PTR _newCel$[ebp]
  00b40	77 1d		 ja	 SHORT $L61833

; 277  :          	newCel = loopPtr->numCels - 1;

  00b42	8b 4d e8	 mov	 ecx, DWORD PTR _loopPtr$61827[ebp]
  00b45	33 d2		 xor	 edx, edx
  00b47	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00b4a	83 ea 01	 sub	 edx, 1
  00b4d	89 55 ec	 mov	 DWORD PTR _newCel$[ebp], edx

; 278  : 				theId.SetIndexedProperty(actCel, newCel);

  00b50	66 8b 45 ec	 mov	 ax, WORD PTR _newCel$[ebp]
  00b54	50		 push	 eax
  00b55	6a 05		 push	 5
  00b57	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00b5a	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty
$L61833:

; 281  :    	bitmap = Bitmap(newView,newLoop,newCel);

  00b5f	8b 4d ec	 mov	 ecx, DWORD PTR _newCel$[ebp]
  00b62	51		 push	 ecx
  00b63	8b 55 f8	 mov	 edx, DWORD PTR _newLoop$[ebp]
  00b66	52		 push	 edx
  00b67	8b 45 f0	 mov	 eax, DWORD PTR _newView$[ebp]
  00b6a	50		 push	 eax
  00b6b	8d 4d c8	 lea	 ecx, DWORD PTR $T62274[ebp]
  00b6e	e8 00 00 00 00	 call	 ??0Bitmap@@QAE@HHH@Z	; Bitmap::Bitmap
  00b73	8b f0		 mov	 esi, eax
  00b75	8b 7d c0	 mov	 edi, DWORD PTR _this$[ebp]
  00b78	83 c7 0c	 add	 edi, 12			; 0000000cH
  00b7b	b9 05 00 00 00	 mov	 ecx, 5
  00b80	f3 a5		 rep movsd

; 282  : 		SetCel(NULL);

  00b82	6a 00		 push	 0
  00b84	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b87	e8 00 00 00 00	 call	 ?SetCel@ScreenItem@@QAEXPAVCelObj@@@Z ; ScreenItem::SetCel
$L61818:

; 284  : 	
; 285  :    // If there is a font bitmap use it
; 286  : 	MemID FBM = theId.GetIndexedProperty(actBitmap);

  00b8c	6a 19		 push	 25			; 00000019H
  00b8e	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00b91	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00b96	50		 push	 eax
  00b97	8d 4d f4	 lea	 ecx, DWORD PTR _FBM$[ebp]
  00b9a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID

; 287  :    if (FBM)

  00b9f	8d 4d f4	 lea	 ecx, DWORD PTR _FBM$[ebp]
  00ba2	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00ba7	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00bac	85 c0		 test	 eax, eax
  00bae	74 26		 je	 SHORT $L61836

; 289  : //		msgMgr->Mono ( "SI::ObjectID (setting bitmap to 0x%x)\n", (SOL_Handle)FBM );
; 290  :       bitmap.SetMemID(FBM);

  00bb0	8d 4d f4	 lea	 ecx, DWORD PTR _FBM$[ebp]
  00bb3	51		 push	 ecx
  00bb4	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00bb7	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00bba	e8 00 00 00 00	 call	 ?SetMemID@Bitmap@@QAEXABVMemID@@@Z ; Bitmap::SetMemID

; 291  :       bitmap.SetType(Bitmap::tMem);

  00bbf	6a 02		 push	 2
  00bc1	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00bc4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00bc7	e8 00 00 00 00	 call	 ?SetType@Bitmap@@QAEXH@Z ; Bitmap::SetType

; 292  : 		SetCel(NULL);

  00bcc	6a 00		 push	 0
  00bce	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00bd1	e8 00 00 00 00	 call	 ?SetCel@ScreenItem@@QAEXPAVCelObj@@@Z ; ScreenItem::SetCel
$L61836:

; 294  : 
; 295  : 	if (theId.GetIndexedProperty(actFixedPri))

  00bd6	6a 1b		 push	 27			; 0000001bH
  00bd8	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00bdb	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00be0	0f bf d0	 movsx	 edx, ax
  00be3	85 d2		 test	 edx, edx
  00be5	74 1f		 je	 SHORT $L61837

; 297  : 		priority = theId.GetIndexedProperty(actPri);

  00be7	6a 06		 push	 6
  00be9	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00bec	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00bf1	0f bf c0	 movsx	 eax, ax
  00bf4	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00bf7	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 298  : 		fixedPriFlag = True;

  00bfa	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00bfd	c7 42 44 01 00
	00 00		 mov	 DWORD PTR [edx+68], 1

; 300  : 	else

  00c04	eb 1c		 jmp	 SHORT $L61838
$L61837:

; 302  : 		fixedPriFlag = False;

  00c06	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00c09	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 303  : 		theId.SetIndexedProperty(actPri, pos.y);

  00c10	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00c13	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  00c17	52		 push	 edx
  00c18	6a 06		 push	 6
  00c1a	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00c1d	e8 00 00 00 00	 call	 ?SetIndexedProperty@ObjectID@@QBEXHF@Z ; ObjectID::SetIndexedProperty
$L61838:

; 305  : 
; 306  : 	//  Adjust for Z property
; 307  : 	z = theId.GetIndexedProperty(actZ);

  00c22	6a 1f		 push	 31			; 0000001fH
  00c24	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00c27	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00c2c	0f bf c0	 movsx	 eax, ax
  00c2f	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00c32	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 308  : 	pos.y -= z;

  00c35	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00c38	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00c3b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00c3e	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  00c41	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00c44	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 309  : 
; 310  : #ifdef NETWORK
; 311  : 	ObjectID rectID;

  00c47	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  00c4a	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@XZ	; ObjectID::ObjectID

; 312  : 
; 313  : 	if (rectID = theId.GetIndexedProperty(actSeenRect))

  00c4f	6a 1c		 push	 28			; 0000001cH
  00c51	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00c54	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00c59	50		 push	 eax
  00c5a	8d 4d c4	 lea	 ecx, DWORD PTR $T62275[ebp]
  00c5d	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00c62	66 8b 45 c4	 mov	 ax, WORD PTR $T62275[ebp]
  00c66	66 89 45 fc	 mov	 WORD PTR _rectID$[ebp], ax
  00c6a	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  00c6d	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00c72	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00c77	85 c0		 test	 eax, eax
  00c79	74 64		 je	 SHORT $L61841

; 315  : 		insetRect.A.x =	rectID.GetIndexedProperty(actLeft);

  00c7b	6a 07		 push	 7
  00c7d	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  00c80	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00c85	0f bf c8	 movsx	 ecx, ax
  00c88	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00c8b	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 316  : 		insetRect.A.y =	rectID.GetIndexedProperty(actTop);

  00c91	6a 08		 push	 8
  00c93	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  00c96	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00c9b	0f bf c0	 movsx	 eax, ax
  00c9e	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ca1	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 317  : 		insetRect.B.x =	rectID.GetIndexedProperty(actRight);

  00ca7	6a 09		 push	 9
  00ca9	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  00cac	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00cb1	0f bf d0	 movsx	 edx, ax
  00cb4	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00cb7	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 318  : 		insetRect.B.y =	rectID.GetIndexedProperty(actBottom);

  00cbd	6a 0a		 push	 10			; 0000000aH
  00cbf	8d 4d fc	 lea	 ecx, DWORD PTR _rectID$[ebp]
  00cc2	e8 00 00 00 00	 call	 ?GetIndexedProperty@ObjectID@@QBEFH@Z ; ObjectID::GetIndexedProperty
  00cc7	0f bf c8	 movsx	 ecx, ax
  00cca	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00ccd	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 319  : 		useInsetRect = True;

  00cd3	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00cd6	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [eax+88], 1

; 321  : 	else

  00cdd	eb 0a		 jmp	 SHORT $L61842
$L61841:

; 323  : 		useInsetRect = False;

  00cdf	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ce2	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0
$L61842:

; 325  : #else
; 326  : 	if (theId.GetIndexedProperty(actUseInsetRect))
; 327  : 	{
; 328  : 		insetRect.A.x =	theId.GetIndexedProperty(actInsetRectL);
; 329  : 		insetRect.A.y =	theId.GetIndexedProperty(actInsetRectT);
; 330  : 		insetRect.B.x =	theId.GetIndexedProperty(actInsetRectR);
; 331  : 		insetRect.B.y =	theId.GetIndexedProperty(actInsetRectB);
; 332  : 		useInsetRect = True;
; 333  : 	}
; 334  : 	else
; 335  : 	{
; 336  : 		useInsetRect = False;
; 337  : 	}
; 338  : #endif
; 339  : 
; 340  : 	userMirror = False;

  00ce9	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00cec	c7 42 5c 00 00
	00 00		 mov	 DWORD PTR [edx+92], 0

; 341  : 	picResNum = -1;

  00cf3	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00cf6	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 342  : 
; 343  : 	theId->ClearGraphicsUpdate();

  00cfd	8b 4d 08	 mov	 ecx, DWORD PTR _theId$[ebp]
  00d00	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  00d05	8b c8		 mov	 ecx, eax
  00d07	e8 00 00 00 00	 call	 ?ClearGraphicsUpdate@Object@@QAEXXZ ; Object::ClearGraphicsUpdate

; 344  : 
; 345  : 	if (!addCount)

  00d0c	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00d0f	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  00d13	75 17		 jne	 SHORT $L61843

; 346  : 		updateCount = graphMgr->ScreenCount();

  00d15	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00d1b	8b 02		 mov	 eax, DWORD PTR [edx]
  00d1d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?graphMgr@@3PAVGraphicsMgr@@A ; graphMgr
  00d23	ff 50 04	 call	 DWORD PTR [eax+4]
  00d26	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00d29	89 41 48	 mov	 DWORD PTR [ecx+72], eax
$L61843:

; 347  : 	deleteCount = 0;

  00d2c	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00d2f	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], 0

; 348  : 
; 349  : 	return *this;

  00d36	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]

; 350  : }

  00d39	5f		 pop	 edi
  00d3a	5e		 pop	 esi
  00d3b	8b e5		 mov	 esp, ebp
  00d3d	5d		 pop	 ebp
  00d3e	c2 04 00	 ret	 4
??4ScreenItem@@QAEAAV0@ABVObjectID@@@Z ENDP		; ScreenItem::operator=
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
;	COMDAT ?View@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?View@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::View, COMDAT

; 137  : 	int	View() const			{return view;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?View@Bitmap@@QBEHXZ ENDP				; Bitmap::View
_TEXT	ENDS
;	COMDAT ?Loop@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Loop@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Loop, COMDAT

; 138  : 	int	Loop() const			{return loop;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Loop@Bitmap@@QBEHXZ ENDP				; Bitmap::Loop
_TEXT	ENDS
;	COMDAT ?Cel@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Cel@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Cel, COMDAT

; 139  : 	int	Cel() const				{return cel;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Cel@Bitmap@@QBEHXZ ENDP				; Bitmap::Cel
_TEXT	ENDS
PUBLIC	??4ScreenItem@@QAEAAV0@ABV0@@Z			; ScreenItem::operator=
_TEXT	SEGMENT
_si$ = 8
_this$ = -4
??4ScreenItem@@QAEAAV0@ABV0@@Z PROC NEAR		; ScreenItem::operator=

; 354  : {

  00d41	55		 push	 ebp
  00d42	8b ec		 mov	 ebp, esp
  00d44	51		 push	 ecx
  00d45	56		 push	 esi
  00d46	57		 push	 edi
  00d47	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 355  : 	// Used for Updating a screen item in the last screen
; 356  : 
; 357  : // HOOK
; 358  : //	pos = si.pos;
; 359  : //	z = si.z;
; 360  : //	priority = si.priority;
; 361  : 	bitmap = si.bitmap;

  00d4a	8b 75 08	 mov	 esi, DWORD PTR _si$[ebp]
  00d4d	83 c6 0c	 add	 esi, 12			; 0000000cH
  00d50	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00d53	83 c7 0c	 add	 edi, 12			; 0000000cH
  00d56	b9 05 00 00 00	 mov	 ecx, 5
  00d5b	f3 a5		 rep movsd

; 362  : 	onScreen = si.onScreen;

  00d5d	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  00d60	83 c0 68	 add	 eax, 104		; 00000068H
  00d63	50		 push	 eax
  00d64	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d67	83 c1 68	 add	 ecx, 104		; 00000068H
  00d6a	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 363  : 
; 364  : 	// Needed for IsOnMe() checks
; 365  : 	userMirror = si.userMirror;

  00d6f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d72	8b 55 08	 mov	 edx, DWORD PTR _si$[ebp]
  00d75	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00d78	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 366  : 	useInsetRect = si.useInsetRect;

  00d7b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d7e	8b 55 08	 mov	 edx, DWORD PTR _si$[ebp]
  00d81	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00d84	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 367  : 	if (useInsetRect)

  00d87	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d8a	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00d8e	74 18		 je	 SHORT $L61848

; 368  : 		insetRect = si.insetRect;

  00d90	8b 55 08	 mov	 edx, DWORD PTR _si$[ebp]
  00d93	81 c2 88 00 00
	00		 add	 edx, 136		; 00000088H
  00d99	52		 push	 edx
  00d9a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d9d	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00da3	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=
$L61848:

; 369  : 	scale	= si.scale;

  00da8	8b 45 08	 mov	 eax, DWORD PTR _si$[ebp]
  00dab	83 c0 20	 add	 eax, 32			; 00000020H
  00dae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00db1	83 c1 20	 add	 ecx, 32			; 00000020H
  00db4	8b 10		 mov	 edx, DWORD PTR [eax]
  00db6	89 11		 mov	 DWORD PTR [ecx], edx
  00db8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00dbb	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00dbe	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00dc1	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00dc4	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00dc7	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 370  : 	x1 = si.x1;

  00dca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dcd	8b 55 08	 mov	 edx, DWORD PTR _si$[ebp]
  00dd0	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00dd3	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 371  : 	y1 = si.y1;

  00dd6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00dd9	8b 55 08	 mov	 edx, DWORD PTR _si$[ebp]
  00ddc	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00ddf	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 372  : 	return *this;

  00de2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 373  : }

  00de5	5f		 pop	 edi
  00de6	5e		 pop	 esi
  00de7	8b e5		 mov	 esp, ebp
  00de9	5d		 pop	 ebp
  00dea	c2 04 00	 ret	 4
??4ScreenItem@@QAEAAV0@ABV0@@Z ENDP			; ScreenItem::operator=
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@HHHH@Z				; SOL_Rect::SOL_Rect
PUBLIC	?Xlen@SOL_Rect@@QBEHXZ				; SOL_Rect::Xlen
PUBLIC	?MakeEmpty@SOL_Rect@@QAEXXZ			; SOL_Rect::MakeEmpty
PUBLIC	?Set@SOL_Rect@@QAEXHHHH@Z			; SOL_Rect::Set
PUBLIC	?Clip@SOL_Rect@@QAEXABV1@@Z			; SOL_Rect::Clip
PUBLIC	?Offset@SOL_Rect@@QAEXHH@Z			; SOL_Rect::Offset
PUBLIC	??0SOL_Rect@@QAE@ABV0@@Z			; SOL_Rect::SOL_Rect
PUBLIC	?Pos@CelObjPic@@QBE?AVSOL_Point@@XZ		; CelObjPic::Pos
PUBLIC	??0Ratio@@QAE@HH@Z				; Ratio::Ratio
PUBLIC	?IsOne@Ratio@@QBEHXZ				; Ratio::IsOne
PUBLIC	?IsLargerThanOne@Ratio@@QBEHXZ			; Ratio::IsLargerThanOne
PUBLIC	?GetCelObj@ScreenItem@@QAEXXZ			; ScreenItem::GetCelObj
PUBLIC	??T@YAHHABVRatio@@@Z				; operator^
PUBLIC	?Update@ScreenItem@@IAEXABVSOL_Plane@@@Z	; ScreenItem::Update
PUBLIC	?DefRect@SOL_Plane@@QBEABVSOL_Rect@@XZ		; SOL_Plane::DefRect
PUBLIC	?GetVanish@SOL_Plane@@QBE?AVSOL_Point@@XZ	; SOL_Plane::GetVanish
PUBLIC	?OnScreen@SOL_Plane@@QBEABVSOL_Rect@@XZ		; SOL_Plane::OnScreen
PUBLIC	?IsPic@Bitmap@@QBEHXZ				; Bitmap::IsPic
PUBLIC	?Width@CelObj@@QBEHXZ				; CelObj::Width
PUBLIC	?Height@CelObj@@QBEHXZ				; CelObj::Height
PUBLIC	?XOrg@CelObj@@QBEHXZ				; CelObj::XOrg
PUBLIC	?YOrg@CelObj@@QBEHXZ				; CelObj::YOrg
PUBLIC	?Mirrored@CelObj@@QBEHXZ			; CelObj::Mirrored
EXTRN	?Normalize@Ratio@@QAEXXZ:NEAR			; Ratio::Normalize
_TEXT	SEGMENT
_plane$ = 8
_this$ = -144
_userScaleX$ = -16
_userScaleY$ = -8
_vanish$61865 = -24
_toDraw$61873 = -56
_xorg$61876 = -32
_yorg$61877 = -36
_x$61889 = -80
_draw$61892 = -76
_newx1$61893 = -60
_offx$61894 = -84
_planeX1$61895 = -28
_planeY1$61896 = -40
$T62282 = -100
$T62283 = -108
$T62284 = -116
$T62285 = -124
$T62286 = -132
$T62287 = -140
?Update@ScreenItem@@IAEXABVSOL_Plane@@@Z PROC NEAR	; ScreenItem::Update

; 385  : {

  00ded	55		 push	 ebp
  00dee	8b ec		 mov	 ebp, esp
  00df0	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00df6	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 386  : 	GetCelObj();

  00dfc	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00e02	e8 00 00 00 00	 call	 ?GetCelObj@ScreenItem@@QAEXXZ ; ScreenItem::GetCelObj

; 387  : 
; 388  : 	#ifdef DEBUG
; 389  : 	assert(graphMgr != NULL);
; 390  : 	assert(cel != NULL);
; 391  : //	assert(graphMgr->Xdim() == cel->ResX());
; 392  : //	assert(graphMgr->Ydim() == cel->ResY());
; 393  : //	assert(graphMgr->Xdim() == SCIRESX);
; 394  : //	assert(graphMgr->Ydim() == SCIRESY);
; 395  : //	if (useInsetRect)
; 396  : //		assert(insetRect.IsWithin(cel->Width(), cel->Height()));
; 397  : 	#endif
; 398  : 
; 399  : 	if (useInsetRect)

  00e07	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00e0d	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00e11	74 42		 je	 SHORT $L61853

; 400  : 		insetRect.Clip(SOL_Rect(0, 0, cel->Width() - 1, cel->Height() - 1));

  00e13	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00e19	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  00e1c	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  00e21	83 e8 01	 sub	 eax, 1
  00e24	50		 push	 eax
  00e25	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00e2b	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00e2e	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  00e33	83 e8 01	 sub	 eax, 1
  00e36	50		 push	 eax
  00e37	6a 00		 push	 0
  00e39	6a 00		 push	 0
  00e3b	8d 4d 9c	 lea	 ecx, DWORD PTR $T62282[ebp]
  00e3e	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  00e43	50		 push	 eax
  00e44	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00e4a	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00e50	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip
$L61853:

; 401  : 
; 402  : 
; 403  : 	// Calculate the scaling for either a vanishing point or manual scaling
; 404  : 	Ratio userScaleX;

  00e55	8d 4d f0	 lea	 ecx, DWORD PTR _userScaleX$[ebp]
  00e58	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio

; 405  : 	Ratio userScaleY;

  00e5d	8d 4d f8	 lea	 ecx, DWORD PTR _userScaleY$[ebp]
  00e60	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio

; 407  : 	{

  00e65	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00e6b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00e6e	89 8d 6c ff ff
	ff		 mov	 DWORD PTR -148+[ebp], ecx
  00e74	83 bd 6c ff ff
	ff 01		 cmp	 DWORD PTR -148+[ebp], 1
  00e7b	74 0e		 je	 SHORT $L61861
  00e7d	83 bd 6c ff ff
	ff 03		 cmp	 DWORD PTR -148+[ebp], 3
  00e84	74 4b		 je	 SHORT $L61864
  00e86	e9 b0 00 00 00	 jmp	 $L61870
$L61861:

; 408  : 		case SCALE_MANUAL:
; 409  : //			assert(scale.scaleX >= 0);
; 410  : //			assert(scale.scaleY >= 0);
; 411  : 			userScaleX = Ratio(scale.scaleX, 128);

  00e8b	68 80 00 00 00	 push	 128			; 00000080H
  00e90	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00e96	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00e99	50		 push	 eax
  00e9a	8d 4d 94	 lea	 ecx, DWORD PTR $T62283[ebp]
  00e9d	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  00ea2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ea4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00ea7	89 4d f0	 mov	 DWORD PTR _userScaleX$[ebp], ecx
  00eaa	89 55 f4	 mov	 DWORD PTR _userScaleX$[ebp+4], edx

; 412  : 			userScaleY = Ratio(scale.scaleY, 128);

  00ead	68 80 00 00 00	 push	 128			; 00000080H
  00eb2	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00eb8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00ebb	51		 push	 ecx
  00ebc	8d 4d 8c	 lea	 ecx, DWORD PTR $T62284[ebp]
  00ebf	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  00ec4	8b 10		 mov	 edx, DWORD PTR [eax]
  00ec6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00ec9	89 55 f8	 mov	 DWORD PTR _userScaleY$[ebp], edx
  00ecc	89 45 fc	 mov	 DWORD PTR _userScaleY$[ebp+4], eax

; 413  : 			break;

  00ecf	eb 6a		 jmp	 SHORT $L61858
$L61864:

; 417  : 			SOL_Point vanish;

  00ed1	8d 4d e8	 lea	 ecx, DWORD PTR _vanish$61865[ebp]
  00ed4	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 418  : 			vanish = plane.GetVanish();

  00ed9	8d 4d 84	 lea	 ecx, DWORD PTR $T62285[ebp]
  00edc	51		 push	 ecx
  00edd	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  00ee0	e8 00 00 00 00	 call	 ?GetVanish@SOL_Plane@@QBE?AVSOL_Point@@XZ ; SOL_Plane::GetVanish
  00ee5	50		 push	 eax
  00ee6	8d 4d e8	 lea	 ecx, DWORD PTR _vanish$61865[ebp]
  00ee9	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 419  : 			assert(scale.maxScale > 0);
; 420  : 			userScaleX = Ratio((scale.maxScale * (pos.y - vanish.y)) / (SCIRESY - vanish.y), 128);

  00eee	68 80 00 00 00	 push	 128			; 00000080H
  00ef3	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00ef9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00efc	2b 45 ec	 sub	 eax, DWORD PTR _vanish$61865[ebp+4]
  00eff	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f05	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00f08	0f af d0	 imul	 edx, eax
  00f0b	b9 e0 01 00 00	 mov	 ecx, 480		; 000001e0H
  00f10	2b 4d ec	 sub	 ecx, DWORD PTR _vanish$61865[ebp+4]
  00f13	8b c2		 mov	 eax, edx
  00f15	99		 cdq
  00f16	f7 f9		 idiv	 ecx
  00f18	50		 push	 eax
  00f19	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T62286[ebp]
  00f1f	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  00f24	8b 10		 mov	 edx, DWORD PTR [eax]
  00f26	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00f29	89 55 f0	 mov	 DWORD PTR _userScaleX$[ebp], edx
  00f2c	89 45 f4	 mov	 DWORD PTR _userScaleX$[ebp+4], eax

; 421  : 			userScaleY = userScaleX;

  00f2f	8b 4d f0	 mov	 ecx, DWORD PTR _userScaleX$[ebp]
  00f32	89 4d f8	 mov	 DWORD PTR _userScaleY$[ebp], ecx
  00f35	8b 55 f4	 mov	 edx, DWORD PTR _userScaleX$[ebp+4]
  00f38	89 55 fc	 mov	 DWORD PTR _userScaleY$[ebp+4], edx
$L61870:
$L61858:

; 432  : 	
; 433  : 	// If the screen item is scaled into non existance,  it won't get added to the draw list
; 434  : 	if (userScaleX.numer != 0  &&  userScaleY.numer != 0)

  00f3b	83 7d f0 00	 cmp	 DWORD PTR _userScaleX$[ebp], 0
  00f3f	0f 84 46 03 00
	00		 je	 $L61872
  00f45	83 7d f8 00	 cmp	 DWORD PTR _userScaleY$[ebp], 0
  00f49	0f 84 3c 03 00
	00		 je	 $L61872

; 436  : 		SOL_Rect	toDraw;

  00f4f	8d 4d c8	 lea	 ecx, DWORD PTR _toDraw$61873[ebp]
  00f52	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@XZ	; SOL_Rect::SOL_Rect

; 437  : 		if (useInsetRect)

  00f57	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00f5d	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00f61	74 17		 je	 SHORT $L61874

; 438  : 			toDraw = insetRect;

  00f63	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00f69	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00f6f	51		 push	 ecx
  00f70	8d 4d c8	 lea	 ecx, DWORD PTR _toDraw$61873[ebp]
  00f73	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 439  : 		else

  00f78	eb 30		 jmp	 SHORT $L61875
$L61874:

; 440  : 			toDraw.Set(0, 0, cel->Width() - 1, cel->Height() - 1);

  00f7a	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00f80	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00f83	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  00f88	83 e8 01	 sub	 eax, 1
  00f8b	50		 push	 eax
  00f8c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00f92	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00f95	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  00f9a	83 e8 01	 sub	 eax, 1
  00f9d	50		 push	 eax
  00f9e	6a 00		 push	 0
  00fa0	6a 00		 push	 0
  00fa2	8d 4d c8	 lea	 ecx, DWORD PTR _toDraw$61873[ebp]
  00fa5	e8 00 00 00 00	 call	 ?Set@SOL_Rect@@QAEXHHHH@Z ; SOL_Rect::Set
$L61875:

; 441  : 
; 442  : 		//  Flip origin if mirroring a non-pic Cel
; 443  : 		int xorg = cel->XOrg();

  00faa	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00fb0	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  00fb3	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  00fb8	89 45 e0	 mov	 DWORD PTR _xorg$61876[ebp], eax

; 444  : 		int yorg = cel->YOrg();

  00fbb	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00fc1	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00fc4	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  00fc9	89 45 dc	 mov	 DWORD PTR _yorg$61877[ebp], eax

; 445  : 
; 446  : //		if (!bitmap.IsPic()  &&  (userMirror ^ cel->Mirrored()))
; 447  : //			xorg = cel->Width() - xorg - 1;
; 448  : 
; 449  : 		//
; 450  : 		//  Multiply toDraw, origin by user scale
; 451  : 		//
; 452  : 
; 453  : 		if (!userScaleX.IsOne()  ||  !userScaleY.IsOne())

  00fcc	8d 4d f0	 lea	 ecx, DWORD PTR _userScaleX$[ebp]
  00fcf	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  00fd4	85 c0		 test	 eax, eax
  00fd6	74 10		 je	 SHORT $L61879
  00fd8	8d 4d f8	 lea	 ecx, DWORD PTR _userScaleY$[ebp]
  00fdb	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  00fe0	85 c0		 test	 eax, eax
  00fe2	0f 85 c0 00 00
	00		 jne	 $L61878
$L61879:

; 455  : 			toDraw.A.x = toDraw.A.x ^ userScaleX;

  00fe8	8d 45 f0	 lea	 eax, DWORD PTR _userScaleX$[ebp]
  00feb	50		 push	 eax
  00fec	8b 4d c8	 mov	 ecx, DWORD PTR _toDraw$61873[ebp]
  00fef	51		 push	 ecx
  00ff0	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  00ff5	83 c4 08	 add	 esp, 8
  00ff8	89 45 c8	 mov	 DWORD PTR _toDraw$61873[ebp], eax

; 456  : 			toDraw.A.y = toDraw.A.y ^ userScaleY;

  00ffb	8d 55 f8	 lea	 edx, DWORD PTR _userScaleY$[ebp]
  00ffe	52		 push	 edx
  00fff	8b 45 cc	 mov	 eax, DWORD PTR _toDraw$61873[ebp+4]
  01002	50		 push	 eax
  01003	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  01008	83 c4 08	 add	 esp, 8
  0100b	89 45 cc	 mov	 DWORD PTR _toDraw$61873[ebp+4], eax

; 457  : 
; 458  : 			if (userScaleX.IsLargerThanOne())

  0100e	8d 4d f0	 lea	 ecx, DWORD PTR _userScaleX$[ebp]
  01011	e8 00 00 00 00	 call	 ?IsLargerThanOne@Ratio@@QBEHXZ ; Ratio::IsLargerThanOne
  01016	85 c0		 test	 eax, eax
  01018	74 1b		 je	 SHORT $L61880

; 459  : 				toDraw.B.x = ((toDraw.B.x + 1) ^ userScaleX) - 1;

  0101a	8d 4d f0	 lea	 ecx, DWORD PTR _userScaleX$[ebp]
  0101d	51		 push	 ecx
  0101e	8b 55 d0	 mov	 edx, DWORD PTR _toDraw$61873[ebp+8]
  01021	83 c2 01	 add	 edx, 1
  01024	52		 push	 edx
  01025	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  0102a	83 c4 08	 add	 esp, 8
  0102d	83 e8 01	 sub	 eax, 1
  01030	89 45 d0	 mov	 DWORD PTR _toDraw$61873[ebp+8], eax

; 460  : 			else

  01033	eb 13		 jmp	 SHORT $L61881
$L61880:

; 461  : 				toDraw.B.x = toDraw.B.x ^ userScaleX;

  01035	8d 45 f0	 lea	 eax, DWORD PTR _userScaleX$[ebp]
  01038	50		 push	 eax
  01039	8b 4d d0	 mov	 ecx, DWORD PTR _toDraw$61873[ebp+8]
  0103c	51		 push	 ecx
  0103d	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  01042	83 c4 08	 add	 esp, 8
  01045	89 45 d0	 mov	 DWORD PTR _toDraw$61873[ebp+8], eax
$L61881:

; 462  : 
; 463  : 			if (userScaleY.IsLargerThanOne())

  01048	8d 4d f8	 lea	 ecx, DWORD PTR _userScaleY$[ebp]
  0104b	e8 00 00 00 00	 call	 ?IsLargerThanOne@Ratio@@QBEHXZ ; Ratio::IsLargerThanOne
  01050	85 c0		 test	 eax, eax
  01052	74 1b		 je	 SHORT $L61882

; 464  : 				toDraw.B.y = ((toDraw.B.y + 1) ^ userScaleY) - 1;

  01054	8d 55 f8	 lea	 edx, DWORD PTR _userScaleY$[ebp]
  01057	52		 push	 edx
  01058	8b 45 d4	 mov	 eax, DWORD PTR _toDraw$61873[ebp+12]
  0105b	83 c0 01	 add	 eax, 1
  0105e	50		 push	 eax
  0105f	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  01064	83 c4 08	 add	 esp, 8
  01067	83 e8 01	 sub	 eax, 1
  0106a	89 45 d4	 mov	 DWORD PTR _toDraw$61873[ebp+12], eax

; 465  : 			else

  0106d	eb 13		 jmp	 SHORT $L61883
$L61882:

; 466  : 				toDraw.B.y = toDraw.B.y ^ userScaleY;

  0106f	8d 4d f8	 lea	 ecx, DWORD PTR _userScaleY$[ebp]
  01072	51		 push	 ecx
  01073	8b 55 d4	 mov	 edx, DWORD PTR _toDraw$61873[ebp+12]
  01076	52		 push	 edx
  01077	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  0107c	83 c4 08	 add	 esp, 8
  0107f	89 45 d4	 mov	 DWORD PTR _toDraw$61873[ebp+12], eax
$L61883:

; 467  : 
; 468  : 			assert(toDraw.B.x >= toDraw.A.x);
; 469  : 			assert(toDraw.B.y >= toDraw.A.y);
; 470  : 
; 471  : 			xorg = xorg ^ userScaleX;

  01082	8d 45 f0	 lea	 eax, DWORD PTR _userScaleX$[ebp]
  01085	50		 push	 eax
  01086	8b 4d e0	 mov	 ecx, DWORD PTR _xorg$61876[ebp]
  01089	51		 push	 ecx
  0108a	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  0108f	83 c4 08	 add	 esp, 8
  01092	89 45 e0	 mov	 DWORD PTR _xorg$61876[ebp], eax

; 472  : 			yorg = yorg ^ userScaleY;

  01095	8d 55 f8	 lea	 edx, DWORD PTR _userScaleY$[ebp]
  01098	52		 push	 edx
  01099	8b 45 dc	 mov	 eax, DWORD PTR _yorg$61877[ebp]
  0109c	50		 push	 eax
  0109d	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  010a2	83 c4 08	 add	 esp, 8
  010a5	89 45 dc	 mov	 DWORD PTR _yorg$61877[ebp], eax
$L61878:

; 474  : 
; 475  : 		//  Use origin to determine cels upper left corner offset
; 476  : 	  	x1 = pos.x - xorg;

  010a8	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  010ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  010b0	2b 55 e0	 sub	 edx, DWORD PTR _xorg$61876[ebp]
  010b3	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  010b9	89 50 60	 mov	 DWORD PTR [eax+96], edx

; 477  : 	  	y1 = pos.y - yorg;

  010bc	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  010c2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  010c5	2b 55 dc	 sub	 edx, DWORD PTR _yorg$61877[ebp]
  010c8	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  010ce	89 50 64	 mov	 DWORD PTR [eax+100], edx

; 478  : 		toDraw.Offset(x1, y1);

  010d1	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  010d7	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  010da	52		 push	 edx
  010db	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  010e1	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  010e4	51		 push	 ecx
  010e5	8d 4d c8	 lea	 ecx, DWORD PTR _toDraw$61873[ebp]
  010e8	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 479  : 
; 480  : 		//  If mirroring a pic, adjust x1, toDraw
; 481  : 		if (bitmap.IsPic()  &&  (userMirror ^ cel->Mirrored()))

  010ed	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  010f3	83 c1 0c	 add	 ecx, 12			; 0000000cH
  010f6	e8 00 00 00 00	 call	 ?IsPic@Bitmap@@QBEHXZ	; Bitmap::IsPic
  010fb	85 c0		 test	 eax, eax
  010fd	0f 84 98 00 00
	00		 je	 $L61886
  01103	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01109	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  0110c	e8 00 00 00 00	 call	 ?Mirrored@CelObj@@QBEHXZ ; CelObj::Mirrored
  01111	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01117	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0111a	33 d0		 xor	 edx, eax
  0111c	85 d2		 test	 edx, edx
  0111e	74 7b		 je	 SHORT $L61886

; 483  : 			assert(userScaleX.IsOne());
; 484  : 			assert(userScaleY.IsOne());
; 485  : 
; 486  : 			int x = ((CelObjPic*) cel)->Pos().x;

  01120	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR $T62287[ebp]
  01126	50		 push	 eax
  01127	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0112d	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  01130	e8 00 00 00 00	 call	 ?Pos@CelObjPic@@QBE?AVSOL_Point@@XZ ; CelObjPic::Pos
  01135	8b 10		 mov	 edx, DWORD PTR [eax]
  01137	89 55 b0	 mov	 DWORD PTR _x$61889[ebp], edx

; 487  : 			SOL_Rect draw = toDraw;

  0113a	8d 45 c8	 lea	 eax, DWORD PTR _toDraw$61873[ebp]
  0113d	50		 push	 eax
  0113e	8d 4d b4	 lea	 ecx, DWORD PTR _draw$61892[ebp]
  01141	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect

; 488  : 			draw.Offset(x - xorg, 0);

  01146	6a 00		 push	 0
  01148	8b 4d b0	 mov	 ecx, DWORD PTR _x$61889[ebp]
  0114b	2b 4d e0	 sub	 ecx, DWORD PTR _xorg$61876[ebp]
  0114e	51		 push	 ecx
  0114f	8d 4d b4	 lea	 ecx, DWORD PTR _draw$61892[ebp]
  01152	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 489  : 			int newx1 = plane.DefRect().Xlen() - draw.B.x - 1;

  01157	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  0115a	e8 00 00 00 00	 call	 ?DefRect@SOL_Plane@@QBEABVSOL_Rect@@XZ ; SOL_Plane::DefRect
  0115f	8b c8		 mov	 ecx, eax
  01161	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  01166	2b 45 bc	 sub	 eax, DWORD PTR _draw$61892[ebp+8]
  01169	83 e8 01	 sub	 eax, 1
  0116c	89 45 c4	 mov	 DWORD PTR _newx1$61893[ebp], eax

; 490  : 			int offx = newx1 - draw.A.x;

  0116f	8b 55 c4	 mov	 edx, DWORD PTR _newx1$61893[ebp]
  01172	2b 55 b4	 sub	 edx, DWORD PTR _draw$61892[ebp]
  01175	89 55 ac	 mov	 DWORD PTR _offx$61894[ebp], edx

; 491  : 
; 492  : 			x1 += offx;

  01178	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0117e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01181	03 4d ac	 add	 ecx, DWORD PTR _offx$61894[ebp]
  01184	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0118a	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 493  : 			toDraw.Offset(offx, 0);

  0118d	6a 00		 push	 0
  0118f	8b 45 ac	 mov	 eax, DWORD PTR _offx$61894[ebp]
  01192	50		 push	 eax
  01193	8d 4d c8	 lea	 ecx, DWORD PTR _toDraw$61873[ebp]
  01196	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset
$L61886:

; 495  : 
; 496  : 		//  Make x1, y1, toDraw screen relative
; 497  : 		int planeX1 = plane.DefRect().A.x;

  0119b	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  0119e	e8 00 00 00 00	 call	 ?DefRect@SOL_Plane@@QBEABVSOL_Rect@@XZ ; SOL_Plane::DefRect
  011a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  011a5	89 4d e4	 mov	 DWORD PTR _planeX1$61895[ebp], ecx

; 498  : 		int planeY1 = plane.DefRect().A.y;

  011a8	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  011ab	e8 00 00 00 00	 call	 ?DefRect@SOL_Plane@@QBEABVSOL_Rect@@XZ ; SOL_Plane::DefRect
  011b0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  011b3	89 55 d8	 mov	 DWORD PTR _planeY1$61896[ebp], edx

; 499  : 		x1 += planeX1;

  011b6	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  011bc	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  011bf	03 4d e4	 add	 ecx, DWORD PTR _planeX1$61895[ebp]
  011c2	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  011c8	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 500  : 		y1 += planeY1;

  011cb	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  011d1	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  011d4	03 4d d8	 add	 ecx, DWORD PTR _planeY1$61896[ebp]
  011d7	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  011dd	89 4a 64	 mov	 DWORD PTR [edx+100], ecx

; 501  : 		toDraw.Offset(planeX1, planeY1);

  011e0	8b 45 d8	 mov	 eax, DWORD PTR _planeY1$61896[ebp]
  011e3	50		 push	 eax
  011e4	8b 4d e4	 mov	 ecx, DWORD PTR _planeX1$61895[ebp]
  011e7	51		 push	 ecx
  011e8	8d 4d c8	 lea	 ecx, DWORD PTR _toDraw$61873[ebp]
  011eb	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 502  : 
; 503  : 		//  Calculate scaling factors for CelObjDraw routines
; 504  : 		finalScaleX = userScaleX;

  011f0	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  011f6	8b 45 f0	 mov	 eax, DWORD PTR _userScaleX$[ebp]
  011f9	89 42 78	 mov	 DWORD PTR [edx+120], eax
  011fc	8b 4d f4	 mov	 ecx, DWORD PTR _userScaleX$[ebp+4]
  011ff	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx

; 505  : 		finalScaleX.Normalize();

  01202	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01208	83 c1 78	 add	 ecx, 120		; 00000078H
  0120b	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 506  : 
; 507  : 		finalScaleY = userScaleY;

  01210	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  01216	8b 45 f8	 mov	 eax, DWORD PTR _userScaleY$[ebp]
  01219	89 82 80 00 00
	00		 mov	 DWORD PTR [edx+128], eax
  0121f	8b 4d fc	 mov	 ecx, DWORD PTR _userScaleY$[ebp+4]
  01222	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 508  : 		finalScaleY.Normalize();

  01228	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0122e	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  01234	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 509  : 
; 510  : 		//  Clip the onScreen rectangle by the plane 
; 511  : 		//  The plane has been clipped by the screen
; 512  : 		assert(toDraw.IsValid());
; 513  : 		assert(plane.OnScreen().IsWithin(graphMgr->Xdim(), graphMgr->Ydim()));
; 514  : 
; 515  : 		onScreen = toDraw;

  01239	8d 55 c8	 lea	 edx, DWORD PTR _toDraw$61873[ebp]
  0123c	52		 push	 edx
  0123d	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01243	83 c1 68	 add	 ecx, 104		; 00000068H
  01246	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 516  : 		onScreen.Clip(plane.OnScreen());

  0124b	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  0124e	e8 00 00 00 00	 call	 ?OnScreen@SOL_Plane@@QBEABVSOL_Rect@@XZ ; SOL_Plane::OnScreen
  01253	50		 push	 eax
  01254	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0125a	83 c1 68	 add	 ecx, 104		; 00000068H
  0125d	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip

; 517  : 
; 518  : 		if (!fixedPriFlag)

  01262	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01268	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0126c	75 1b		 jne	 SHORT $L61899

; 519  : 			priority = pos.y + z;

  0126e	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01274	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01277	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0127d	03 50 08	 add	 edx, DWORD PTR [eax+8]
  01280	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01286	89 51 40	 mov	 DWORD PTR [ecx+64], edx
$L61899:

; 521  : 	else

  01289	eb 0e		 jmp	 SHORT $L61900
$L61872:

; 522  : 		onScreen.MakeEmpty();

  0128b	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  01291	83 c1 68	 add	 ecx, 104		; 00000068H
  01294	e8 00 00 00 00	 call	 ?MakeEmpty@SOL_Rect@@QAEXXZ ; SOL_Rect::MakeEmpty
$L61900:

; 523  : }

  01299	8b e5		 mov	 esp, ebp
  0129b	5d		 pop	 ebp
  0129c	c2 04 00	 ret	 4
?Update@ScreenItem@@IAEXABVSOL_Plane@@@Z ENDP		; ScreenItem::Update
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@HHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
??0SOL_Rect@@QAE@HHHH@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 56   : 	A.x = xa;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 	A.y = ya;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00028	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 	B.x = xb;

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  00031	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 59   : 	B.y = yb;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  0003a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 60   : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
??0SOL_Rect@@QAE@HHHH@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ?Set@SOL_Rect@@QAEXHHHH@Z
_TEXT	SEGMENT
_xa$ = 8
_ya$ = 12
_xb$ = 16
_yb$ = 20
_this$ = -4
?Set@SOL_Rect@@QAEXHHHH@Z PROC NEAR			; SOL_Rect::Set, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	A.x = xa;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _xa$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 75   : 	A.y = ya;

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _ya$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 76   : 	B.x = xb;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _xb$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 77   : 	B.y = yb;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _yb$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 78   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
?Set@SOL_Rect@@QAEXHHHH@Z ENDP				; SOL_Rect::Set
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?MakeEmpty@SOL_Rect@@QAEXXZ PROC NEAR			; SOL_Rect::MakeEmpty, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 	B.x = -1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 144  : 	B.y = -1;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 145  : 	A.x = 0;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 146  : 	A.y = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 147  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?MakeEmpty@SOL_Rect@@QAEXXZ ENDP			; SOL_Rect::MakeEmpty
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Xlen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Xlen, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	return B.x - A.x + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	83 c0 01	 add	 eax, 1

; 155  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?Xlen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Xlen
_TEXT	ENDS
PUBLIC	?Intersect@SOL_Rect@@QBEHABV1@@Z		; SOL_Rect::Intersect
;	COMDAT ?Clip@SOL_Rect@@QAEXABV1@@Z
_TEXT	SEGMENT
_r$ = 8
_this$ = -4
?Clip@SOL_Rect@@QAEXABV1@@Z PROC NEAR			; SOL_Rect::Clip, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 225  : 	if (Intersect(r))  {

  00007	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Intersect@SOL_Rect@@QBEHABV1@@Z ; SOL_Rect::Intersect
  00013	85 c0		 test	 eax, eax
  00015	74 66		 je	 SHORT $L1274

; 226  : 		if (A.x < r.A.x)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  0001d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001f	3b 02		 cmp	 eax, DWORD PTR [edx]
  00021	7d 0a		 jge	 SHORT $L1275

; 227  : 			A.x = r.A.x;

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00029	8b 02		 mov	 eax, DWORD PTR [edx]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$L1275:

; 228  : 		if (A.y < r.A.y)

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00033	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00036	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00039	7d 0c		 jge	 SHORT $L1276

; 229  : 			A.y = r.A.y;

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$L1276:

; 230  : 		if (B.x > r.B.x)

  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  0004d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00050	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00053	7e 0c		 jle	 SHORT $L1277

; 231  : 			B.x = r.B.x;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  0005b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L1277:

; 232  : 		if (B.y > r.B.y)

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00067	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0006a	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  0006d	7e 0c		 jle	 SHORT $L1278

; 233  : 			B.y = r.B.y;

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00075	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00078	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L1278:

; 235  : 	else

  0007b	eb 08		 jmp	 SHORT $L1279
$L1274:

; 236  : 		MakeEmpty();

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?MakeEmpty@SOL_Rect@@QAEXXZ ; SOL_Rect::MakeEmpty
$L1279:

; 237  : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
?Clip@SOL_Rect@@QAEXABV1@@Z ENDP			; SOL_Rect::Clip
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT
_r$ = 8
_this$ = -4
?Intersect@SOL_Rect@@QBEHABV1@@Z PROC NEAR		; SOL_Rect::Intersect, COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 190  : 	if (B.x < r.A.x)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0000d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00010	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00012	7d 04		 jge	 SHORT $L1257

; 191  : 		return False;

  00014	33 c0		 xor	 eax, eax
  00016	eb 3a		 jmp	 SHORT $L1256
$L1257:

; 192  : 	if (B.y < r.A.y)

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0001e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00021	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00024	7d 04		 jge	 SHORT $L1258

; 193  : 		return False;

  00026	33 c0		 xor	 eax, eax
  00028	eb 28		 jmp	 SHORT $L1256
$L1258:

; 194  : 	if (A.x > r.B.x)

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00030	8b 10		 mov	 edx, DWORD PTR [eax]
  00032	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00035	7e 04		 jle	 SHORT $L1259

; 195  : 		return False;

  00037	33 c0		 xor	 eax, eax
  00039	eb 17		 jmp	 SHORT $L1256
$L1259:

; 196  : 	if (A.y > r.B.y)

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00041	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00044	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00047	7e 04		 jle	 SHORT $L1260

; 197  : 		return False;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 05		 jmp	 SHORT $L1256
$L1260:

; 198  : 	return True;

  0004d	b8 01 00 00 00	 mov	 eax, 1
$L1256:

; 199  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Intersect@SOL_Rect@@QBEHABV1@@Z ENDP			; SOL_Rect::Intersect
_TEXT	ENDS
;	COMDAT ?Offset@SOL_Rect@@QAEXHH@Z
_TEXT	SEGMENT
_dx$ = 8
_dy$ = 12
_this$ = -4
?Offset@SOL_Rect@@QAEXHH@Z PROC NEAR			; SOL_Rect::Offset, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 318  : 	A.x += dx;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	03 4d 08	 add	 ecx, DWORD PTR _dx$[ebp]
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	89 0a		 mov	 DWORD PTR [edx], ecx

; 319  : 	B.x += dx;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001a	03 4d 08	 add	 ecx, DWORD PTR _dx$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 320  : 	A.y += dy;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	03 4d 0c	 add	 ecx, DWORD PTR _dy$[ebp]
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 321  : 	B.y += dy;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00038	03 4d 0c	 add	 ecx, DWORD PTR _dy$[ebp]
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 322  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?Offset@SOL_Rect@@QAEXHH@Z ENDP				; SOL_Rect::Offset
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT
_num$ = 8
_denom$ = 12
_this$ = -4
??0Ratio@@QAE@HH@Z PROC NEAR				; Ratio::Ratio, COMDAT

; 9    : 	Ratio(int num, int denom)	:	numer(num), denom(denom) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _num$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _denom$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0Ratio@@QAE@HH@Z ENDP					; Ratio::Ratio
_TEXT	ENDS
;	COMDAT ?IsOne@Ratio@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsOne@Ratio@@QBEHXZ PROC NEAR				; Ratio::IsOne, COMDAT

; 12   : 	Bool	IsOne() const				{return numer == denom;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	33 c0		 xor	 eax, eax
  00011	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00014	0f 94 c0	 sete	 al
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?IsOne@Ratio@@QBEHXZ ENDP				; Ratio::IsOne
_TEXT	ENDS
;	COMDAT ?IsLargerThanOne@Ratio@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsLargerThanOne@Ratio@@QBEHXZ PROC NEAR		; Ratio::IsLargerThanOne, COMDAT

; 13   : 	Bool	IsLargerThanOne() const {return numer > denom;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	33 c0		 xor	 eax, eax
  00011	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00014	0f 9f c0	 setg	 al
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?IsLargerThanOne@Ratio@@QBEHXZ ENDP			; Ratio::IsLargerThanOne
_TEXT	ENDS
;	COMDAT ??T@YAHHABVRatio@@@Z
_TEXT	SEGMENT
_i$ = 8
_ratio$ = 12
??T@YAHHABVRatio@@@Z PROC NEAR				; operator^, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 75   : 	return (i * ratio.numer) / ratio.denom;

  00004	8b 45 0c	 mov	 eax, DWORD PTR _ratio$[ebp]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  0000a	0f af 08	 imul	 ecx, DWORD PTR [eax]
  0000d	8b 75 0c	 mov	 esi, DWORD PTR _ratio$[ebp]
  00010	8b c1		 mov	 eax, ecx
  00012	99		 cdq
  00013	f7 7e 04	 idiv	 DWORD PTR [esi+4]

; 76   : }

  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??T@YAHHABVRatio@@@Z ENDP				; operator^
_TEXT	ENDS
;	COMDAT ?IsPic@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsPic@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::IsPic, COMDAT

; 134  : 	Bool	IsPic() const			{return type == tPic;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 38 01	 cmp	 DWORD PTR [eax], 1
  0000f	0f 94 c1	 sete	 cl
  00012	8b c1		 mov	 eax, ecx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsPic@Bitmap@@QBEHXZ ENDP				; Bitmap::IsPic
_TEXT	ENDS
;	COMDAT ?Width@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Width@CelObj@@QBEHXZ PROC NEAR				; CelObj::Width, COMDAT

; 177  : 	int	Width() const			{return width;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Width@CelObj@@QBEHXZ ENDP				; CelObj::Width
_TEXT	ENDS
;	COMDAT ?Height@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Height@CelObj@@QBEHXZ PROC NEAR			; CelObj::Height, COMDAT

; 178  : 	int	Height() const			{return height;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Height@CelObj@@QBEHXZ ENDP				; CelObj::Height
_TEXT	ENDS
;	COMDAT ?XOrg@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?XOrg@CelObj@@QBEHXZ PROC NEAR				; CelObj::XOrg, COMDAT

; 179  : 	int	XOrg() const			{return xorg;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?XOrg@CelObj@@QBEHXZ ENDP				; CelObj::XOrg
_TEXT	ENDS
;	COMDAT ?YOrg@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?YOrg@CelObj@@QBEHXZ PROC NEAR				; CelObj::YOrg, COMDAT

; 180  : 	int	YOrg() const			{return yorg;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?YOrg@CelObj@@QBEHXZ ENDP				; CelObj::YOrg
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Mirrored@CelObj@@QBEHXZ PROC NEAR			; CelObj::Mirrored, COMDAT

; 187  : 	Bool	Mirrored() const		{return mirrored;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Mirrored@CelObj@@QBEHXZ ENDP				; CelObj::Mirrored
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@ABV0@@Z			; SOL_Point::SOL_Point
;	COMDAT ?Pos@CelObjPic@@QBE?AVSOL_Point@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?Pos@CelObjPic@@QBE?AVSOL_Point@@XZ PROC NEAR		; CelObjPic::Pos, COMDAT

; 328  : 	SOL_Point	Pos() const 				{return pos;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 54	 add	 eax, 84			; 00000054H
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00011	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?Pos@CelObjPic@@QBE?AVSOL_Point@@XZ ENDP		; CelObjPic::Pos
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??0SOL_Point@@QAE@ABV0@@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 22   : 	SOL_Point(const SOL_Point& p) : x(p.x), y(p.y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0SOL_Point@@QAE@ABV0@@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ?DefRect@SOL_Plane@@QBEABVSOL_Rect@@XZ
_TEXT	SEGMENT
_this$ = -4
?DefRect@SOL_Plane@@QBEABVSOL_Rect@@XZ PROC NEAR	; SOL_Plane::DefRect, COMDAT

; 58   : 	const SOL_Rect& DefRect() const			{return plane;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 64	 add	 eax, 100		; 00000064H
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?DefRect@SOL_Plane@@QBEABVSOL_Rect@@XZ ENDP		; SOL_Plane::DefRect
_TEXT	ENDS
;	COMDAT ?GetVanish@SOL_Plane@@QBE?AVSOL_Point@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?GetVanish@SOL_Plane@@QBE?AVSOL_Point@@XZ PROC NEAR	; SOL_Plane::GetVanish, COMDAT

; 63   : 	SOL_Point		GetVanish() const			{return vanish;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 28	 add	 eax, 40			; 00000028H
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00011	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?GetVanish@SOL_Plane@@QBE?AVSOL_Point@@XZ ENDP		; SOL_Plane::GetVanish
_TEXT	ENDS
;	COMDAT ?OnScreen@SOL_Plane@@QBEABVSOL_Rect@@XZ
_TEXT	SEGMENT
_this$ = -4
?OnScreen@SOL_Plane@@QBEABVSOL_Rect@@XZ PROC NEAR	; SOL_Plane::OnScreen, COMDAT

; 76   : 	const SOL_Rect&	OnScreen() const		{return onScreen;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 4c	 add	 eax, 76			; 0000004cH
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?OnScreen@SOL_Plane@@QBEABVSOL_Rect@@XZ ENDP		; SOL_Plane::OnScreen
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_Rect@@QAE@ABV0@@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0SOL_Rect@@QAE@ABV0@@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
PUBLIC	?NowSeen@ScreenItem@@QAEXABVSOL_Plane@@AAVSOL_Rect@@@Z ; ScreenItem::NowSeen
_TEXT	SEGMENT
_plane$ = 8
_nowSeen$ = 12
_this$ = -108
_inset$ = -16
_userScaleX$ = -32
_userScaleY$ = -24
_vanish$61921 = -40
_xorg$61929 = -44
_yorg$61930 = -48
_x$61939 = -52
_y$61940 = -56
$T62312 = -72
$T62313 = -80
$T62314 = -88
$T62315 = -96
$T62316 = -104
?NowSeen@ScreenItem@@QAEXABVSOL_Plane@@AAVSOL_Rect@@@Z PROC NEAR ; ScreenItem::NowSeen

; 528  : {

  0129f	55		 push	 ebp
  012a0	8b ec		 mov	 ebp, esp
  012a2	83 ec 70	 sub	 esp, 112		; 00000070H
  012a5	89 4d 94	 mov	 DWORD PTR _this$[ebp], ecx

; 529  : 	GetCelObj();

  012a8	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  012ab	e8 00 00 00 00	 call	 ?GetCelObj@ScreenItem@@QAEXXZ ; ScreenItem::GetCelObj

; 530  : 
; 531  : 	#ifdef DEBUG
; 532  : 	assert(cel != NULL);
; 533  : //	assert(graphMgr->Xdim() == cel->ResX());
; 534  : //	assert(graphMgr->Ydim() == cel->ResY());
; 535  : //	assert(graphMgr->Xdim() == SCIRESX);
; 536  : //	assert(graphMgr->Ydim() == SCIRESY);
; 537  : //	if (useInsetRect)
; 538  : //		assert(insetRect.IsWithin(cel->Width(), cel->Height()));
; 539  : 	#endif
; 540  : 
; 541  : 
; 542  : 	SOL_Rect inset(0, 0, cel->Width() - 1, cel->Height() - 1);

  012b0	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  012b3	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  012b6	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  012bb	83 e8 01	 sub	 eax, 1
  012be	50		 push	 eax
  012bf	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  012c2	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  012c5	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  012ca	83 e8 01	 sub	 eax, 1
  012cd	50		 push	 eax
  012ce	6a 00		 push	 0
  012d0	6a 00		 push	 0
  012d2	8d 4d f0	 lea	 ecx, DWORD PTR _inset$[ebp]
  012d5	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect

; 543  : 	if (useInsetRect)

  012da	8b 55 94	 mov	 edx, DWORD PTR _this$[ebp]
  012dd	83 7a 58 00	 cmp	 DWORD PTR [edx+88], 0
  012e1	74 44		 je	 SHORT $L61907

; 545  : 		inset = insetRect;

  012e3	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  012e6	05 88 00 00 00	 add	 eax, 136		; 00000088H
  012eb	50		 push	 eax
  012ec	8d 4d f0	 lea	 ecx, DWORD PTR _inset$[ebp]
  012ef	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 546  : 		inset.Clip(SOL_Rect(0, 0, cel->Width() - 1, cel->Height() - 1));

  012f4	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  012f7	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  012fa	e8 00 00 00 00	 call	 ?Height@CelObj@@QBEHXZ	; CelObj::Height
  012ff	83 e8 01	 sub	 eax, 1
  01302	50		 push	 eax
  01303	8b 55 94	 mov	 edx, DWORD PTR _this$[ebp]
  01306	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  01309	e8 00 00 00 00	 call	 ?Width@CelObj@@QBEHXZ	; CelObj::Width
  0130e	83 e8 01	 sub	 eax, 1
  01311	50		 push	 eax
  01312	6a 00		 push	 0
  01314	6a 00		 push	 0
  01316	8d 4d b8	 lea	 ecx, DWORD PTR $T62312[ebp]
  01319	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@HHHH@Z	; SOL_Rect::SOL_Rect
  0131e	50		 push	 eax
  0131f	8d 4d f0	 lea	 ecx, DWORD PTR _inset$[ebp]
  01322	e8 00 00 00 00	 call	 ?Clip@SOL_Rect@@QAEXABV1@@Z ; SOL_Rect::Clip
$L61907:

; 548  : 
; 549  : 	// Calculate the scaling for either a vanishing point or manual scaling
; 550  : 	Ratio userScaleX;

  01327	8d 4d e0	 lea	 ecx, DWORD PTR _userScaleX$[ebp]
  0132a	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio

; 551  : 	Ratio userScaleY;

  0132f	8d 4d e8	 lea	 ecx, DWORD PTR _userScaleY$[ebp]
  01332	e8 00 00 00 00	 call	 ??0Ratio@@QAE@XZ	; Ratio::Ratio

; 553  : 	{

  01337	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  0133a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0133d	89 4d 90	 mov	 DWORD PTR -112+[ebp], ecx
  01340	83 7d 90 01	 cmp	 DWORD PTR -112+[ebp], 1
  01344	74 0b		 je	 SHORT $L61915
  01346	83 7d 90 03	 cmp	 DWORD PTR -112+[ebp], 3
  0134a	74 45		 je	 SHORT $L61920
  0134c	e9 99 00 00 00	 jmp	 $L61926
$L61915:

; 554  : 		case SCALE_MANUAL:
; 555  : 			assert(scale.scaleX >= 0);
; 556  : 			assert(scale.scaleY >= 0);
; 557  : 			userScaleX = Ratio(scale.scaleX, 128);

  01351	68 80 00 00 00	 push	 128			; 00000080H
  01356	8b 55 94	 mov	 edx, DWORD PTR _this$[ebp]
  01359	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0135c	50		 push	 eax
  0135d	8d 4d b0	 lea	 ecx, DWORD PTR $T62313[ebp]
  01360	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  01365	8b 08		 mov	 ecx, DWORD PTR [eax]
  01367	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0136a	89 4d e0	 mov	 DWORD PTR _userScaleX$[ebp], ecx
  0136d	89 55 e4	 mov	 DWORD PTR _userScaleX$[ebp+4], edx

; 558  : 			userScaleY = Ratio(scale.scaleY, 128);

  01370	68 80 00 00 00	 push	 128			; 00000080H
  01375	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  01378	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0137b	51		 push	 ecx
  0137c	8d 4d a8	 lea	 ecx, DWORD PTR $T62314[ebp]
  0137f	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  01384	8b 10		 mov	 edx, DWORD PTR [eax]
  01386	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01389	89 55 e8	 mov	 DWORD PTR _userScaleY$[ebp], edx
  0138c	89 45 ec	 mov	 DWORD PTR _userScaleY$[ebp+4], eax

; 559  : 			break;

  0138f	eb 59		 jmp	 SHORT $L61912
$L61920:

; 563  : 			SOL_Point vanish = plane.GetVanish();

  01391	8d 4d a0	 lea	 ecx, DWORD PTR $T62315[ebp]
  01394	51		 push	 ecx
  01395	8b 4d 08	 mov	 ecx, DWORD PTR _plane$[ebp]
  01398	e8 00 00 00 00	 call	 ?GetVanish@SOL_Plane@@QBE?AVSOL_Point@@XZ ; SOL_Plane::GetVanish
  0139d	50		 push	 eax
  0139e	8d 4d d8	 lea	 ecx, DWORD PTR _vanish$61921[ebp]
  013a1	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point

; 564  : 			assert(scale.maxScale > 0);
; 565  : 			userScaleX = Ratio((scale.maxScale * (pos.y - vanish.y)) / (SCIRESY - vanish.y), 128);

  013a6	68 80 00 00 00	 push	 128			; 00000080H
  013ab	8b 55 94	 mov	 edx, DWORD PTR _this$[ebp]
  013ae	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  013b1	2b 45 dc	 sub	 eax, DWORD PTR _vanish$61921[ebp+4]
  013b4	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  013b7	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  013ba	0f af d0	 imul	 edx, eax
  013bd	b9 e0 01 00 00	 mov	 ecx, 480		; 000001e0H
  013c2	2b 4d dc	 sub	 ecx, DWORD PTR _vanish$61921[ebp+4]
  013c5	8b c2		 mov	 eax, edx
  013c7	99		 cdq
  013c8	f7 f9		 idiv	 ecx
  013ca	50		 push	 eax
  013cb	8d 4d 98	 lea	 ecx, DWORD PTR $T62316[ebp]
  013ce	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio
  013d3	8b 10		 mov	 edx, DWORD PTR [eax]
  013d5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  013d8	89 55 e0	 mov	 DWORD PTR _userScaleX$[ebp], edx
  013db	89 45 e4	 mov	 DWORD PTR _userScaleX$[ebp+4], eax

; 566  : 			userScaleY = userScaleX;

  013de	8b 4d e0	 mov	 ecx, DWORD PTR _userScaleX$[ebp]
  013e1	89 4d e8	 mov	 DWORD PTR _userScaleY$[ebp], ecx
  013e4	8b 55 e4	 mov	 edx, DWORD PTR _userScaleX$[ebp+4]
  013e7	89 55 ec	 mov	 DWORD PTR _userScaleY$[ebp+4], edx
$L61926:
$L61912:

; 577  : 	
; 578  : 	// If the screen item is scaled into non existance
; 579  : 	// make sure the nowseen rectangle is empty
; 580  : 	if (userScaleX.numer != 0  &&  userScaleY.numer != 0)

  013ea	83 7d e0 00	 cmp	 DWORD PTR _userScaleX$[ebp], 0
  013ee	0f 84 59 01 00
	00		 je	 $L61928
  013f4	83 7d e8 00	 cmp	 DWORD PTR _userScaleY$[ebp], 0
  013f8	0f 84 4f 01 00
	00		 je	 $L61928

; 582  : 		//  Flip origin if mirroring a non-pic Cel
; 583  : 		nowSeen = inset;

  013fe	8d 45 f0	 lea	 eax, DWORD PTR _inset$[ebp]
  01401	50		 push	 eax
  01402	8b 4d 0c	 mov	 ecx, DWORD PTR _nowSeen$[ebp]
  01405	e8 00 00 00 00	 call	 ??4SOL_Rect@@QAEAAV0@ABV0@@Z ; SOL_Rect::operator=

; 584  : 		int xorg = cel->XOrg();

  0140a	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  0140d	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
  01410	e8 00 00 00 00	 call	 ?XOrg@CelObj@@QBEHXZ	; CelObj::XOrg
  01415	89 45 d4	 mov	 DWORD PTR _xorg$61929[ebp], eax

; 585  : 		int yorg = cel->YOrg();

  01418	8b 55 94	 mov	 edx, DWORD PTR _this$[ebp]
  0141b	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  0141e	e8 00 00 00 00	 call	 ?YOrg@CelObj@@QBEHXZ	; CelObj::YOrg
  01423	89 45 d0	 mov	 DWORD PTR _yorg$61930[ebp], eax

; 586  : 
; 587  : //		if ((userMirror ^ cel->Mirrored())  &&  !bitmap.IsPic())
; 588  : //			xorg = cel->Width() - xorg - 1;
; 589  : 
; 590  : 		//
; 591  : 		//  Multiply everything by user scale
; 592  : 		//
; 593  : 
; 594  : 		if (!userScaleX.IsOne()  ||  !userScaleY.IsOne())

  01426	8d 4d e0	 lea	 ecx, DWORD PTR _userScaleX$[ebp]
  01429	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  0142e	85 c0		 test	 eax, eax
  01430	74 10		 je	 SHORT $L61932
  01432	8d 4d e8	 lea	 ecx, DWORD PTR _userScaleY$[ebp]
  01435	e8 00 00 00 00	 call	 ?IsOne@Ratio@@QBEHXZ	; Ratio::IsOne
  0143a	85 c0		 test	 eax, eax
  0143c	0f 85 e2 00 00
	00		 jne	 $L61931
$L61932:

; 596  : 			nowSeen.A.x = nowSeen.A.x ^ userScaleX;

  01442	8d 45 e0	 lea	 eax, DWORD PTR _userScaleX$[ebp]
  01445	50		 push	 eax
  01446	8b 4d 0c	 mov	 ecx, DWORD PTR _nowSeen$[ebp]
  01449	8b 11		 mov	 edx, DWORD PTR [ecx]
  0144b	52		 push	 edx
  0144c	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  01451	83 c4 08	 add	 esp, 8
  01454	8b 4d 0c	 mov	 ecx, DWORD PTR _nowSeen$[ebp]
  01457	89 01		 mov	 DWORD PTR [ecx], eax

; 597  : 			nowSeen.A.y = nowSeen.A.y ^ userScaleY;

  01459	8d 55 e8	 lea	 edx, DWORD PTR _userScaleY$[ebp]
  0145c	52		 push	 edx
  0145d	8b 45 0c	 mov	 eax, DWORD PTR _nowSeen$[ebp]
  01460	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01463	51		 push	 ecx
  01464	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  01469	83 c4 08	 add	 esp, 8
  0146c	8b 55 0c	 mov	 edx, DWORD PTR _nowSeen$[ebp]
  0146f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 598  : 
; 599  : 			if (userScaleX.IsLargerThanOne())

  01472	8d 4d e0	 lea	 ecx, DWORD PTR _userScaleX$[ebp]
  01475	e8 00 00 00 00	 call	 ?IsLargerThanOne@Ratio@@QBEHXZ ; Ratio::IsLargerThanOne
  0147a	85 c0		 test	 eax, eax
  0147c	74 21		 je	 SHORT $L61933

; 600  : 				nowSeen.B.x = ((nowSeen.B.x + 1) ^ userScaleX) - 1;

  0147e	8d 45 e0	 lea	 eax, DWORD PTR _userScaleX$[ebp]
  01481	50		 push	 eax
  01482	8b 4d 0c	 mov	 ecx, DWORD PTR _nowSeen$[ebp]
  01485	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01488	83 c2 01	 add	 edx, 1
  0148b	52		 push	 edx
  0148c	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  01491	83 c4 08	 add	 esp, 8
  01494	83 e8 01	 sub	 eax, 1
  01497	8b 4d 0c	 mov	 ecx, DWORD PTR _nowSeen$[ebp]
  0149a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 601  : 			else

  0149d	eb 19		 jmp	 SHORT $L61934
$L61933:

; 602  : 				nowSeen.B.x = nowSeen.B.x ^ userScaleX;

  0149f	8d 55 e0	 lea	 edx, DWORD PTR _userScaleX$[ebp]
  014a2	52		 push	 edx
  014a3	8b 45 0c	 mov	 eax, DWORD PTR _nowSeen$[ebp]
  014a6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  014a9	51		 push	 ecx
  014aa	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  014af	83 c4 08	 add	 esp, 8
  014b2	8b 55 0c	 mov	 edx, DWORD PTR _nowSeen$[ebp]
  014b5	89 42 08	 mov	 DWORD PTR [edx+8], eax
$L61934:

; 603  : 
; 604  : 			if (userScaleY.IsLargerThanOne())

  014b8	8d 4d e8	 lea	 ecx, DWORD PTR _userScaleY$[ebp]
  014bb	e8 00 00 00 00	 call	 ?IsLargerThanOne@Ratio@@QBEHXZ ; Ratio::IsLargerThanOne
  014c0	85 c0		 test	 eax, eax
  014c2	74 21		 je	 SHORT $L61935

; 605  : 				nowSeen.B.y = ((nowSeen.B.y + 1) ^ userScaleY) - 1;

  014c4	8d 45 e8	 lea	 eax, DWORD PTR _userScaleY$[ebp]
  014c7	50		 push	 eax
  014c8	8b 4d 0c	 mov	 ecx, DWORD PTR _nowSeen$[ebp]
  014cb	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  014ce	83 c2 01	 add	 edx, 1
  014d1	52		 push	 edx
  014d2	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  014d7	83 c4 08	 add	 esp, 8
  014da	83 e8 01	 sub	 eax, 1
  014dd	8b 4d 0c	 mov	 ecx, DWORD PTR _nowSeen$[ebp]
  014e0	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 606  : 			else

  014e3	eb 19		 jmp	 SHORT $L61936
$L61935:

; 607  : 				nowSeen.B.y = nowSeen.B.y ^ userScaleY;

  014e5	8d 55 e8	 lea	 edx, DWORD PTR _userScaleY$[ebp]
  014e8	52		 push	 edx
  014e9	8b 45 0c	 mov	 eax, DWORD PTR _nowSeen$[ebp]
  014ec	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  014ef	51		 push	 ecx
  014f0	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  014f5	83 c4 08	 add	 esp, 8
  014f8	8b 55 0c	 mov	 edx, DWORD PTR _nowSeen$[ebp]
  014fb	89 42 0c	 mov	 DWORD PTR [edx+12], eax
$L61936:

; 608  : 
; 609  : 			assert(nowSeen.B.x >= nowSeen.A.x);
; 610  : 			assert(nowSeen.B.y >= nowSeen.A.y);
; 611  : 
; 612  : 			xorg = xorg ^ userScaleX;

  014fe	8d 45 e0	 lea	 eax, DWORD PTR _userScaleX$[ebp]
  01501	50		 push	 eax
  01502	8b 4d d4	 mov	 ecx, DWORD PTR _xorg$61929[ebp]
  01505	51		 push	 ecx
  01506	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  0150b	83 c4 08	 add	 esp, 8
  0150e	89 45 d4	 mov	 DWORD PTR _xorg$61929[ebp], eax

; 613  : 			yorg = yorg ^ userScaleY;

  01511	8d 55 e8	 lea	 edx, DWORD PTR _userScaleY$[ebp]
  01514	52		 push	 edx
  01515	8b 45 d0	 mov	 eax, DWORD PTR _yorg$61930[ebp]
  01518	50		 push	 eax
  01519	e8 00 00 00 00	 call	 ??T@YAHHABVRatio@@@Z	; operator^
  0151e	83 c4 08	 add	 esp, 8
  01521	89 45 d0	 mov	 DWORD PTR _yorg$61930[ebp], eax
$L61931:

; 615  : 
; 616  : 		//  Make x, y upper left of cel
; 617  : 		int x = pos.x - xorg;

  01524	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  01527	8b 11		 mov	 edx, DWORD PTR [ecx]
  01529	2b 55 d4	 sub	 edx, DWORD PTR _xorg$61929[ebp]
  0152c	89 55 cc	 mov	 DWORD PTR _x$61939[ebp], edx

; 618  : 		int y = pos.y - yorg;

  0152f	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  01532	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01535	2b 4d d0	 sub	 ecx, DWORD PTR _yorg$61930[ebp]
  01538	89 4d c8	 mov	 DWORD PTR _y$61940[ebp], ecx

; 619  : 		nowSeen.Offset(x, y);

  0153b	8b 55 c8	 mov	 edx, DWORD PTR _y$61940[ebp]
  0153e	52		 push	 edx
  0153f	8b 45 cc	 mov	 eax, DWORD PTR _x$61939[ebp]
  01542	50		 push	 eax
  01543	8b 4d 0c	 mov	 ecx, DWORD PTR _nowSeen$[ebp]
  01546	e8 00 00 00 00	 call	 ?Offset@SOL_Rect@@QAEXHH@Z ; SOL_Rect::Offset

; 621  : 	else

  0154b	eb 08		 jmp	 SHORT $L61941
$L61928:

; 622  : 		nowSeen.MakeEmpty();

  0154d	8b 4d 0c	 mov	 ecx, DWORD PTR _nowSeen$[ebp]
  01550	e8 00 00 00 00	 call	 ?MakeEmpty@SOL_Rect@@QAEXXZ ; SOL_Rect::MakeEmpty
$L61941:

; 623  : }

  01555	8b e5		 mov	 esp, ebp
  01557	5d		 pop	 ebp
  01558	c2 08 00	 ret	 8
?NowSeen@ScreenItem@@QAEXABVSOL_Plane@@AAVSOL_Rect@@@Z ENDP ; ScreenItem::NowSeen
_TEXT	ENDS
PUBLIC	?Ylen@SOL_Rect@@QBEHXZ				; SOL_Rect::Ylen
PUBLIC	?Type@Bitmap@@QBEHXZ				; Bitmap::Type
PUBLIC	?Color@Bitmap@@QBEHXZ				; Bitmap::Color
PUBLIC	?Handle@Bitmap@@QBE?AVMemID@@XZ			; Bitmap::Handle
EXTRN	??0CelObjView@@QAE@HHH@Z:NEAR			; CelObjView::CelObjView
EXTRN	??0CelObjMem@@QAE@VMemID@@@Z:NEAR		; CelObjMem::CelObjMem
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	??0CelObjColor@@QAE@EHH@Z:NEAR			; CelObjColor::CelObjColor
EXTRN	?Fatal@MsgMgr@@QAAXDPADH0ZZ:NEAR		; MsgMgr::Fatal
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
_DATA	SEGMENT
$SG61956 DB	'Internal error, pic screen item with no cel.', 00H
	ORG $+3
$SG61957 DB	'C:\Documents and Settings\don\Desktop\sciw\Interp\Si.cpp'
	DB	00H
_DATA	ENDS
xdata$x	SEGMENT
$T62338	DD	019930520H
	DD	03H
	DD	FLAT:$T62342
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T62342	DD	0ffffffffH
	DD	FLAT:$L62332
	DD	0ffffffffH
	DD	FLAT:$L62333
	DD	0ffffffffH
	DD	FLAT:$L62334
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -48
$T62318 = -16
$T62319 = -20
$T62322 = -24
$T62323 = -28
$T62324 = -32
$T62325 = -36
$T62328 = -40
$T62329 = -44
__$EHRec$ = -12
?GetCelObj@ScreenItem@@QAEXXZ PROC NEAR			; ScreenItem::GetCelObj

; 627  : {

  0155b	55		 push	 ebp
  0155c	8b ec		 mov	 ebp, esp
  0155e	6a ff		 push	 -1
  01560	68 00 00 00 00	 push	 $L62339
  01565	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0156b	50		 push	 eax
  0156c	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01573	83 ec 34	 sub	 esp, 52			; 00000034H
  01576	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 628  : 	if (cel == NULL)

  01579	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0157c	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  01580	0f 85 83 01 00
	00		 jne	 $L61947

; 631  : 		{

  01586	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  01589	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0158c	e8 00 00 00 00	 call	 ?Type@Bitmap@@QBEHXZ	; Bitmap::Type
  01591	89 45 cc	 mov	 DWORD PTR -52+[ebp], eax
  01594	83 7d cc 03	 cmp	 DWORD PTR -52+[ebp], 3
  01598	0f 87 6b 01 00
	00		 ja	 $L61970
  0159e	8b 4d cc	 mov	 ecx, DWORD PTR -52+[ebp]
  015a1	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L62341[ecx*4]
$L61950:

; 632  : 			case Bitmap::tView:
; 633  : 				cel = New CelObjView(bitmap.View(),bitmap.Loop(),bitmap.Cel());

  015a8	6a 50		 push	 80			; 00000050H
  015aa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  015af	83 c4 04	 add	 esp, 4
  015b2	89 45 ec	 mov	 DWORD PTR $T62319[ebp], eax
  015b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  015bc	83 7d ec 00	 cmp	 DWORD PTR $T62319[ebp], 0
  015c0	74 31		 je	 SHORT $L62320
  015c2	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  015c5	83 c1 0c	 add	 ecx, 12			; 0000000cH
  015c8	e8 00 00 00 00	 call	 ?Cel@Bitmap@@QBEHXZ	; Bitmap::Cel
  015cd	50		 push	 eax
  015ce	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  015d1	83 c1 0c	 add	 ecx, 12			; 0000000cH
  015d4	e8 00 00 00 00	 call	 ?Loop@Bitmap@@QBEHXZ	; Bitmap::Loop
  015d9	50		 push	 eax
  015da	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  015dd	83 c1 0c	 add	 ecx, 12			; 0000000cH
  015e0	e8 00 00 00 00	 call	 ?View@Bitmap@@QBEHXZ	; Bitmap::View
  015e5	50		 push	 eax
  015e6	8b 4d ec	 mov	 ecx, DWORD PTR $T62319[ebp]
  015e9	e8 00 00 00 00	 call	 ??0CelObjView@@QAE@HHH@Z ; CelObjView::CelObjView
  015ee	89 45 c8	 mov	 DWORD PTR -56+[ebp], eax
  015f1	eb 07		 jmp	 SHORT $L62321
$L62320:
  015f3	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR -56+[ebp], 0
$L62321:
  015fa	8b 55 c8	 mov	 edx, DWORD PTR -56+[ebp]
  015fd	89 55 f0	 mov	 DWORD PTR $T62318[ebp], edx
  01600	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01607	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0160a	8b 4d f0	 mov	 ecx, DWORD PTR $T62318[ebp]
  0160d	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 634  : 				break;

  01610	e9 f4 00 00 00	 jmp	 $L61947
$L61955:

; 635  : 
; 636  : 			case Bitmap::tPic:
; 637  : 				msgMgr->Fatal(SrcLoc,"Internal error, pic screen item with no cel.");

  01615	68 00 00 00 00	 push	 OFFSET FLAT:$SG61956
  0161a	68 7d 02 00 00	 push	 637			; 0000027dH
  0161f	68 00 00 00 00	 push	 OFFSET FLAT:$SG61957
  01624	6a 61		 push	 97			; 00000061H
  01626	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0162c	52		 push	 edx
  0162d	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  01632	83 c4 14	 add	 esp, 20			; 00000014H

; 638  : 				break;

  01635	e9 cf 00 00 00	 jmp	 $L61947
$L61958:

; 639  : 
; 640  : 			case Bitmap::tMem:
; 641  : 				cel = New CelObjMem(bitmap.Handle());

  0163a	6a 50		 push	 80			; 00000050H
  0163c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01641	83 c4 04	 add	 esp, 4
  01644	89 45 e4	 mov	 DWORD PTR $T62323[ebp], eax
  01647	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0164e	83 7d e4 00	 cmp	 DWORD PTR $T62323[ebp], 0
  01652	74 28		 je	 SHORT $L62326
  01654	8d 45 dc	 lea	 eax, DWORD PTR $T62325[ebp]
  01657	50		 push	 eax
  01658	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0165b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0165e	e8 00 00 00 00	 call	 ?Handle@Bitmap@@QBE?AVMemID@@XZ ; Bitmap::Handle
  01663	51		 push	 ecx
  01664	8b cc		 mov	 ecx, esp
  01666	89 65 e0	 mov	 DWORD PTR $T62324[ebp], esp
  01669	50		 push	 eax
  0166a	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  0166f	8b 4d e4	 mov	 ecx, DWORD PTR $T62323[ebp]
  01672	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  01677	89 45 c4	 mov	 DWORD PTR -60+[ebp], eax
  0167a	eb 07		 jmp	 SHORT $L62327
$L62326:
  0167c	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR -60+[ebp], 0
$L62327:
  01683	8b 4d c4	 mov	 ecx, DWORD PTR -60+[ebp]
  01686	89 4d e8	 mov	 DWORD PTR $T62322[ebp], ecx
  01689	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01690	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01693	8b 45 e8	 mov	 eax, DWORD PTR $T62322[ebp]
  01696	89 42 54	 mov	 DWORD PTR [edx+84], eax

; 642  : 				break;

  01699	eb 6e		 jmp	 SHORT $L61947
$L61965:

; 643  : 
; 644  : 			case Bitmap::tColor:
; 645  : 				cel = New CelObjColor(bitmap.Color(),insetRect.Xlen(),insetRect.Ylen());

  0169b	6a 50		 push	 80			; 00000050H
  0169d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  016a2	83 c4 04	 add	 esp, 4
  016a5	89 45 d4	 mov	 DWORD PTR $T62329[ebp], eax
  016a8	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  016af	83 7d d4 00	 cmp	 DWORD PTR $T62329[ebp], 0
  016b3	74 37		 je	 SHORT $L62330
  016b5	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  016b8	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  016be	e8 00 00 00 00	 call	 ?Ylen@SOL_Rect@@QBEHXZ	; SOL_Rect::Ylen
  016c3	50		 push	 eax
  016c4	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  016c7	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  016cd	e8 00 00 00 00	 call	 ?Xlen@SOL_Rect@@QBEHXZ	; SOL_Rect::Xlen
  016d2	50		 push	 eax
  016d3	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  016d6	83 c1 0c	 add	 ecx, 12			; 0000000cH
  016d9	e8 00 00 00 00	 call	 ?Color@Bitmap@@QBEHXZ	; Bitmap::Color
  016de	50		 push	 eax
  016df	8b 4d d4	 mov	 ecx, DWORD PTR $T62329[ebp]
  016e2	e8 00 00 00 00	 call	 ??0CelObjColor@@QAE@EHH@Z ; CelObjColor::CelObjColor
  016e7	89 45 c0	 mov	 DWORD PTR -64+[ebp], eax
  016ea	eb 07		 jmp	 SHORT $L62331
$L62330:
  016ec	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR -64+[ebp], 0
$L62331:
  016f3	8b 4d c0	 mov	 ecx, DWORD PTR -64+[ebp]
  016f6	89 4d d8	 mov	 DWORD PTR $T62328[ebp], ecx
  016f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01700	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  01703	8b 45 d8	 mov	 eax, DWORD PTR $T62328[ebp]
  01706	89 42 54	 mov	 DWORD PTR [edx+84], eax
$L61970:
$L61947:

; 652  : }

  01709	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0170c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01713	8b e5		 mov	 esp, ebp
  01715	5d		 pop	 ebp
  01716	c3		 ret	 0
$L62341:
  01717	00 00 00 00	 DD	 $L61950
  0171b	00 00 00 00	 DD	 $L61955
  0171f	00 00 00 00	 DD	 $L61958
  01723	00 00 00 00	 DD	 $L61965
_TEXT	ENDS
text$x	SEGMENT
$L62332:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T62319[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L62333:
  0000b	8b 45 e4	 mov	 eax, DWORD PTR $T62323[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
$L62334:
  00016	8b 45 d4	 mov	 eax, DWORD PTR $T62329[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	c3		 ret	 0
$L62339:
  00021	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T62338
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetCelObj@ScreenItem@@QAEXXZ ENDP			; ScreenItem::GetCelObj
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Ylen@SOL_Rect@@QBEHXZ PROC NEAR			; SOL_Rect::Ylen, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 	return B.y - A.y + 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	83 c0 01	 add	 eax, 1

; 163  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Ylen@SOL_Rect@@QBEHXZ ENDP				; SOL_Rect::Ylen
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Type@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Type, COMDAT

; 132  : 	int	Type() const			{return type;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?Type@Bitmap@@QBEHXZ ENDP				; Bitmap::Type
_TEXT	ENDS
;	COMDAT ?Color@Bitmap@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Color@Bitmap@@QBEHXZ PROC NEAR				; Bitmap::Color, COMDAT

; 141  : 	int	Color() const			{return color;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	8a 48 12	 mov	 cl, BYTE PTR [eax+18]
  0000f	8b c1		 mov	 eax, ecx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?Color@Bitmap@@QBEHXZ ENDP				; Bitmap::Color
_TEXT	ENDS
;	COMDAT ?Handle@Bitmap@@QBE?AVMemID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?Handle@Bitmap@@QBE?AVMemID@@XZ PROC NEAR		; Bitmap::Handle, COMDAT

; 142  : 	MemID	Handle() const			{return memid;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 10	 add	 eax, 16			; 00000010H
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00011	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?Handle@Bitmap@@QBE?AVMemID@@XZ ENDP			; Bitmap::Handle
_TEXT	ENDS
END

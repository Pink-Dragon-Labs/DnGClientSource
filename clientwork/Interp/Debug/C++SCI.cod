	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\C++SCI.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BCarryable@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BContainer@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BCharacter@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWeapon@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BNPC@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BHead@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDLo@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDHi@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GroupMember@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?perform@CSCI_Object@@QAEXF@Z			; CSCI_Object::perform
EXTRN	?pmQuickMessage@@YAXIIPAX@Z:NEAR		; pmQuickMessage
EXTRN	?pmPushMany@@YAXGIPAF@Z:NEAR			; pmPushMany
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?perform@CSCI_Object@@QAEXF@Z PROC NEAR			; CSCI_Object::perform

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	SetObject( handle )

  00009	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0000f	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00013	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00019	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 24   : 
; 25   : 	//	push the selector, # of Args, ptr to arg list
; 26   : 	pmPushMany( s_perform, 1, &nValue);

  00020	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00023	50		 push	 eax
  00024	6a 01		 push	 1
  00026	6a 63		 push	 99			; 00000063H
  00028	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 27   : 
; 28   : 	//	call the method
; 29   : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 30   : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00030	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00036	51		 push	 ecx
  00037	6a 06		 push	 6
  00039	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	33 c0		 xor	 eax, eax
  0003e	66 8b 02	 mov	 ax, WORD PTR [edx]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : 
; 32   : 	RestoreObject ()

  0004a	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  0004e	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 33   : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?perform@CSCI_Object@@QAEXF@Z ENDP			; CSCI_Object::perform
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
PUBLIC	?newInstance@CSCI_Object@@QAE?AVObjectID@@XZ	; CSCI_Object::newInstance
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
_saveObject$ = -4
?newInstance@CSCI_Object@@QAE?AVObjectID@@XZ PROC NEAR	; CSCI_Object::newInstance

; 35   : ObjectID CSCI_Object::newInstance() {

  0005b	55		 push	 ebp
  0005c	8b ec		 mov	 ebp, esp
  0005e	83 ec 08	 sub	 esp, 8
  00061	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 	SetObject( handle )

  00064	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0006a	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00074	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 37   : 
; 38   : 	//	push the selector, # of Args, ptr to arg list
; 39   : 	pmPushMany( s_new, 0, NULL);

  0007b	6a 00		 push	 0
  0007d	6a 00		 push	 0
  0007f	68 8d 00 00 00	 push	 141			; 0000008dH
  00084	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH

; 40   : 
; 41   : 	//	call the method
; 42   : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 43   : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  0008c	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  00091	50		 push	 eax
  00092	6a 04		 push	 4
  00094	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	33 d2		 xor	 edx, edx
  00099	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0009c	52		 push	 edx
  0009d	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 44   : 
; 45   : 	RestoreObject ()

  000a5	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  000a9	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 46   : 	return pm.acc;

  000af	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ?pm@@3VPMachine@@A+4
  000b6	51		 push	 ecx
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000ba	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  000bf	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 47   : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 04 00	 ret	 4
?newInstance@CSCI_Object@@QAE?AVObjectID@@XZ ENDP	; CSCI_Object::newInstance
_TEXT	ENDS
PUBLIC	?doit@CSCI_Object@@QAEFXZ			; CSCI_Object::doit
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?doit@CSCI_Object@@QAEFXZ PROC NEAR			; CSCI_Object::doit

; 49   : Property CSCI_Object::doit() {

  000c8	55		 push	 ebp
  000c9	8b ec		 mov	 ebp, esp
  000cb	83 ec 08	 sub	 esp, 8
  000ce	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 	SetObject( handle )

  000d1	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  000d7	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  000db	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	66 8b 11	 mov	 dx, WORD PTR [ecx]
  000e1	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 51   : 
; 52   : 	//	push the selector, # of Args, ptr to arg list
; 53   : 	pmPushMany( s_doit, 0, NULL);

  000e8	6a 00		 push	 0
  000ea	6a 00		 push	 0
  000ec	6a 45		 push	 69			; 00000045H
  000ee	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  000f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 54   : 
; 55   : 	//	call the method
; 56   : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 57   : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  000f6	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  000fb	50		 push	 eax
  000fc	6a 04		 push	 4
  000fe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	33 d2		 xor	 edx, edx
  00103	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00106	52		 push	 edx
  00107	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0010c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 58   : 
; 59   : 	RestoreObject ()

  0010f	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  00113	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 60   : 	return pm.acc;

  00119	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 61   : }

  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
?doit@CSCI_Object@@QAEFXZ ENDP				; CSCI_Object::doit
_TEXT	ENDS
PUBLIC	?doit@CSCI_Object@@QAEFF@Z			; CSCI_Object::doit
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?doit@CSCI_Object@@QAEFF@Z PROC NEAR			; CSCI_Object::doit

; 63   : Property CSCI_Object::doit( Property nValue ) {

  00123	55		 push	 ebp
  00124	8b ec		 mov	 ebp, esp
  00126	83 ec 08	 sub	 esp, 8
  00129	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 	SetObject( handle )

  0012c	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00132	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00136	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0013c	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 65   : 
; 66   : 	//	push the selector, # of Args, ptr to arg list
; 67   : 	pmPushMany( s_doit, 1, &nValue);

  00143	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00146	50		 push	 eax
  00147	6a 01		 push	 1
  00149	6a 45		 push	 69			; 00000045H
  0014b	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00150	83 c4 0c	 add	 esp, 12			; 0000000cH

; 68   : 
; 69   : 	//	call the method
; 70   : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 71   : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00153	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00159	51		 push	 ecx
  0015a	6a 06		 push	 6
  0015c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0015f	33 c0		 xor	 eax, eax
  00161	66 8b 02	 mov	 ax, WORD PTR [edx]
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0016a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   : 
; 73   : 	RestoreObject ()

  0016d	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00171	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 74   : 
; 75   : 	return pm.acc;

  00178	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 76   : }

  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 04 00	 ret	 4
?doit@CSCI_Object@@QAEFF@Z ENDP				; CSCI_Object::doit
_TEXT	ENDS
PUBLIC	?CallMethod@CSCI_Object@@QAEXF@Z		; CSCI_Object::CallMethod
_TEXT	SEGMENT
_nMethod$ = 8
_this$ = -8
_saveObject$ = -4
?CallMethod@CSCI_Object@@QAEXF@Z PROC NEAR		; CSCI_Object::CallMethod

; 79   : {

  00184	55		 push	 ebp
  00185	8b ec		 mov	 ebp, esp
  00187	83 ec 08	 sub	 esp, 8
  0018a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 	SetObject( handle )

  0018d	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00193	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00197	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019a	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0019d	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 81   : 
; 82   : 	//	push the selector, # of Args, ptr to arg list
; 83   : 	pmPushMany( nMethod, 0, NULL);

  001a4	6a 00		 push	 0
  001a6	6a 00		 push	 0
  001a8	66 8b 45 08	 mov	 ax, WORD PTR _nMethod$[ebp]
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 84   : 
; 85   : 	//	call the method
; 86   : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 87   : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  001b5	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  001bb	51		 push	 ecx
  001bc	6a 04		 push	 4
  001be	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001c1	33 c0		 xor	 eax, eax
  001c3	66 8b 02	 mov	 ax, WORD PTR [edx]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  001cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 88   : 
; 89   : 	RestoreObject ()

  001cf	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  001d3	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 90   : }

  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 04 00	 ret	 4
?CallMethod@CSCI_Object@@QAEXF@Z ENDP			; CSCI_Object::CallMethod
_TEXT	ENDS
PUBLIC	?CallMethod@CSCI_Object@@QAEXFF@Z		; CSCI_Object::CallMethod
_TEXT	SEGMENT
_nMethod$ = 8
_nValue$ = 12
_this$ = -8
_saveObject$ = -4
?CallMethod@CSCI_Object@@QAEXFF@Z PROC NEAR		; CSCI_Object::CallMethod

; 93   : {

  001e0	55		 push	 ebp
  001e1	8b ec		 mov	 ebp, esp
  001e3	83 ec 08	 sub	 esp, 8
  001e6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 	SetObject( handle )

  001e9	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  001ef	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  001f3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001f6	66 8b 11	 mov	 dx, WORD PTR [ecx]
  001f9	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 95   : 
; 96   : 	//	push the selector, # of Args, ptr to arg list
; 97   : 	pmPushMany( nMethod, 1, &nValue );

  00200	8d 45 0c	 lea	 eax, DWORD PTR _nValue$[ebp]
  00203	50		 push	 eax
  00204	6a 01		 push	 1
  00206	66 8b 4d 08	 mov	 cx, WORD PTR _nMethod$[ebp]
  0020a	51		 push	 ecx
  0020b	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00210	83 c4 0c	 add	 esp, 12			; 0000000cH

; 98   : 
; 99   : 	//	call the method
; 100  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 101  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00213	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?pm@@3VPMachine@@A+12
  00219	52		 push	 edx
  0021a	6a 06		 push	 6
  0021c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0021f	33 c9		 xor	 ecx, ecx
  00221	66 8b 08	 mov	 cx, WORD PTR [eax]
  00224	51		 push	 ecx
  00225	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0022a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 102  : 
; 103  : 	RestoreObject ()

  0022d	66 8b 55 fc	 mov	 dx, WORD PTR _saveObject$[ebp]
  00231	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 104  : }

  00238	8b e5		 mov	 esp, ebp
  0023a	5d		 pop	 ebp
  0023b	c2 08 00	 ret	 8
?CallMethod@CSCI_Object@@QAEXFF@Z ENDP			; CSCI_Object::CallMethod
_TEXT	ENDS
PUBLIC	?getAffectedState@CSCI_CharInfo@@QAEFF@Z	; CSCI_CharInfo::getAffectedState
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?getAffectedState@CSCI_CharInfo@@QAEFF@Z PROC NEAR	; CSCI_CharInfo::getAffectedState

; 106  : Property CSCI_CharInfo::getAffectedState( Property nValue ) {

  0023e	55		 push	 ebp
  0023f	8b ec		 mov	 ebp, esp
  00241	83 ec 08	 sub	 esp, 8
  00244	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 	SetObject( handle )

  00247	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0024d	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00251	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00254	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00257	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 108  : 
; 109  : 	//	push the selector, # of Args, ptr to arg list
; 110  : 	pmPushMany( s_getAffectedState, 1, &nValue );

  0025e	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00261	50		 push	 eax
  00262	6a 01		 push	 1
  00264	68 5f 03 00 00	 push	 863			; 0000035fH
  00269	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0026e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  : 
; 112  : 	//	call the method
; 113  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 114  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00271	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00277	51		 push	 ecx
  00278	6a 06		 push	 6
  0027a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0027d	33 c0		 xor	 eax, eax
  0027f	66 8b 02	 mov	 ax, WORD PTR [edx]
  00282	50		 push	 eax
  00283	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00288	83 c4 0c	 add	 esp, 12			; 0000000cH

; 115  : 
; 116  : 	RestoreObject ()

  0028b	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  0028f	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 117  : 
; 118  : 	return pm.acc;

  00296	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 119  : }

  0029c	8b e5		 mov	 esp, ebp
  0029e	5d		 pop	 ebp
  0029f	c2 04 00	 ret	 4
?getAffectedState@CSCI_CharInfo@@QAEFF@Z ENDP		; CSCI_CharInfo::getAffectedState
_TEXT	ENDS
PUBLIC	?play@CSCI_Sound@@QAEXF@Z			; CSCI_Sound::play
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?play@CSCI_Sound@@QAEXF@Z PROC NEAR			; CSCI_Sound::play

; 122  : {

  002a2	55		 push	 ebp
  002a3	8b ec		 mov	 ebp, esp
  002a5	83 ec 08	 sub	 esp, 8
  002a8	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 123  : 	SetObject( handle )

  002ab	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  002b1	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  002b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b8	66 8b 11	 mov	 dx, WORD PTR [ecx]
  002bb	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 124  : 
; 125  : 	//	push the selector, # of Args, ptr to arg list
; 126  : 	pmPushMany( s_play, 1, &nValue );

  002c2	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  002c5	50		 push	 eax
  002c6	6a 01		 push	 1
  002c8	6a 33		 push	 51			; 00000033H
  002ca	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  002cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 127  : 
; 128  : 	//	call the method
; 129  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 130  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  002d2	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  002d8	51		 push	 ecx
  002d9	6a 06		 push	 6
  002db	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002de	33 c0		 xor	 eax, eax
  002e0	66 8b 02	 mov	 ax, WORD PTR [edx]
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  002e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 131  : 
; 132  : 	RestoreObject ()

  002ec	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  002f0	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 133  : }

  002f7	8b e5		 mov	 esp, ebp
  002f9	5d		 pop	 ebp
  002fa	c2 04 00	 ret	 4
?play@CSCI_Sound@@QAEXF@Z ENDP				; CSCI_Sound::play
_TEXT	ENDS
PUBLIC	?equal@CSCI_LongInt@@QAEFFF@Z			; CSCI_LongInt::equal
_TEXT	SEGMENT
_nValue1$ = 8
_nValue2$ = 12
_this$ = -12
_nValues$ = -8
_saveObject$ = -4
?equal@CSCI_LongInt@@QAEFFF@Z PROC NEAR			; CSCI_LongInt::equal

; 136  : {

  002fd	55		 push	 ebp
  002fe	8b ec		 mov	 ebp, esp
  00300	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00303	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 137  : 	Property	nValues[2];
; 138  : 
; 139  : 	SetObject( handle )

  00306	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0030c	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00310	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00313	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00316	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 140  : 
; 141  : 	nValues[0] = nValue1;

  0031d	66 8b 45 08	 mov	 ax, WORD PTR _nValue1$[ebp]
  00321	66 89 45 f8	 mov	 WORD PTR _nValues$[ebp], ax

; 142  : 	nValues[1] = nValue2;

  00325	66 8b 4d 0c	 mov	 cx, WORD PTR _nValue2$[ebp]
  00329	66 89 4d fa	 mov	 WORD PTR _nValues$[ebp+2], cx

; 143  : 
; 144  : 	//	push the selector, # of Args, ptr to arg list
; 145  : 	pmPushMany( s_equal, 2, nValues );

  0032d	8d 55 f8	 lea	 edx, DWORD PTR _nValues$[ebp]
  00330	52		 push	 edx
  00331	6a 02		 push	 2
  00333	68 27 01 00 00	 push	 295			; 00000127H
  00338	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0033d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 146  : 
; 147  : 	//	call the method
; 148  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 149  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 2 ) * sizeof ( Property ), pm.StackPtr);

  00340	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  00345	50		 push	 eax
  00346	6a 08		 push	 8
  00348	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0034b	33 d2		 xor	 edx, edx
  0034d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00350	52		 push	 edx
  00351	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00356	83 c4 0c	 add	 esp, 12			; 0000000cH

; 150  : 
; 151  : 	RestoreObject ()

  00359	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  0035d	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 152  : 
; 153  : 	return pm.acc;

  00363	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 154  : }

  00369	8b e5		 mov	 esp, ebp
  0036b	5d		 pop	 ebp
  0036c	c2 08 00	 ret	 8
?equal@CSCI_LongInt@@QAEFFF@Z ENDP			; CSCI_LongInt::equal
_TEXT	ENDS
PUBLIC	?equalLong@CSCI_LongInt@@QAEFV1@@Z		; CSCI_LongInt::equalLong
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?equalLong@CSCI_LongInt@@QAEFV1@@Z PROC NEAR		; CSCI_LongInt::equalLong

; 157  : {

  0036f	55		 push	 ebp
  00370	8b ec		 mov	 ebp, esp
  00372	83 ec 08	 sub	 esp, 8
  00375	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 158  : 	SetObject( handle )

  00378	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0037e	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00382	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00385	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00388	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 159  : 
; 160  : 	//	push the selector, # of Args, ptr to arg list
; 161  : 	pmPushMany( s_equalLong, 1, (Property*) &nValue );

  0038f	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00392	50		 push	 eax
  00393	6a 01		 push	 1
  00395	68 28 01 00 00	 push	 296			; 00000128H
  0039a	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0039f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 162  : 
; 163  : 	//	call the method
; 164  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 165  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  003a2	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  003a8	51		 push	 ecx
  003a9	6a 06		 push	 6
  003ab	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003ae	33 c0		 xor	 eax, eax
  003b0	66 8b 02	 mov	 ax, WORD PTR [edx]
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  003b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 166  : 
; 167  : 	RestoreObject ()

  003bc	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  003c0	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 168  : 
; 169  : 	return pm.acc;

  003c7	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 170  : }

  003cd	8b e5		 mov	 esp, ebp
  003cf	5d		 pop	 ebp
  003d0	c2 04 00	 ret	 4
?equalLong@CSCI_LongInt@@QAEFV1@@Z ENDP			; CSCI_LongInt::equalLong
_TEXT	ENDS
PUBLIC	?set@CSCI_LongInt@@QAEXFF@Z			; CSCI_LongInt::set
_TEXT	SEGMENT
_nValue1$ = 8
_nValue2$ = 12
_this$ = -12
_nValues$ = -8
_saveObject$ = -4
?set@CSCI_LongInt@@QAEXFF@Z PROC NEAR			; CSCI_LongInt::set

; 173  : {

  003d3	55		 push	 ebp
  003d4	8b ec		 mov	 ebp, esp
  003d6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  003d9	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 174  : 	Property	nValues[2];
; 175  : 
; 176  : 	SetObject( handle )

  003dc	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  003e2	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  003e6	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003e9	66 8b 11	 mov	 dx, WORD PTR [ecx]
  003ec	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 177  : 
; 178  : 	nValues[0] = nValue1;

  003f3	66 8b 45 08	 mov	 ax, WORD PTR _nValue1$[ebp]
  003f7	66 89 45 f8	 mov	 WORD PTR _nValues$[ebp], ax

; 179  : 	nValues[1] = nValue2;

  003fb	66 8b 4d 0c	 mov	 cx, WORD PTR _nValue2$[ebp]
  003ff	66 89 4d fa	 mov	 WORD PTR _nValues$[ebp+2], cx

; 180  : 
; 181  : 	//	push the selector, # of Args, ptr to arg list
; 182  : 	pmPushMany( s_set, 2, nValues );

  00403	8d 55 f8	 lea	 edx, DWORD PTR _nValues$[ebp]
  00406	52		 push	 edx
  00407	6a 02		 push	 2
  00409	68 b5 00 00 00	 push	 181			; 000000b5H
  0040e	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00413	83 c4 0c	 add	 esp, 12			; 0000000cH

; 183  : 
; 184  : 	//	call the method
; 185  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 186  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 2 ) * sizeof ( Property ), pm.StackPtr);

  00416	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  0041b	50		 push	 eax
  0041c	6a 08		 push	 8
  0041e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00421	33 d2		 xor	 edx, edx
  00423	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00426	52		 push	 edx
  00427	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0042c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 187  : 
; 188  : 	RestoreObject ()

  0042f	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  00433	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 189  : }

  00439	8b e5		 mov	 esp, ebp
  0043b	5d		 pop	 ebp
  0043c	c2 08 00	 ret	 8
?set@CSCI_LongInt@@QAEXFF@Z ENDP			; CSCI_LongInt::set
_TEXT	ENDS
PUBLIC	?setLong@CSCI_LongInt@@QAEXF@Z			; CSCI_LongInt::setLong
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?setLong@CSCI_LongInt@@QAEXF@Z PROC NEAR		; CSCI_LongInt::setLong

; 192  : {

  0043f	55		 push	 ebp
  00440	8b ec		 mov	 ebp, esp
  00442	83 ec 08	 sub	 esp, 8
  00445	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 193  : 	SetObject( handle )

  00448	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0044e	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00452	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00455	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00458	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 194  : 
; 195  : 	//	push the selector, # of Args, ptr to arg list
; 196  : 	pmPushMany( s_setLong, 1, &nValue );

  0045f	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00462	50		 push	 eax
  00463	6a 01		 push	 1
  00465	68 0f 01 00 00	 push	 271			; 0000010fH
  0046a	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0046f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 197  : 
; 198  : 	//	call the method
; 199  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 200  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00472	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00478	51		 push	 ecx
  00479	6a 06		 push	 6
  0047b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0047e	33 c0		 xor	 eax, eax
  00480	66 8b 02	 mov	 ax, WORD PTR [edx]
  00483	50		 push	 eax
  00484	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00489	83 c4 0c	 add	 esp, 12			; 0000000cH

; 201  : 
; 202  : 	RestoreObject ()

  0048c	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00490	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 203  : }

  00497	8b e5		 mov	 esp, ebp
  00499	5d		 pop	 ebp
  0049a	c2 04 00	 ret	 4
?setLong@CSCI_LongInt@@QAEXF@Z ENDP			; CSCI_LongInt::setLong
_TEXT	ENDS
PUBLIC	?setMessage@CSCI_WorldObject@@QAEXF@Z		; CSCI_WorldObject::setMessage
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?setMessage@CSCI_WorldObject@@QAEXF@Z PROC NEAR		; CSCI_WorldObject::setMessage

; 206  : {

  0049d	55		 push	 ebp
  0049e	8b ec		 mov	 ebp, esp
  004a0	83 ec 08	 sub	 esp, 8
  004a3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 	SetObject( handle )

  004a6	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  004ac	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  004b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004b3	66 8b 11	 mov	 dx, WORD PTR [ecx]
  004b6	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 208  : 
; 209  : 	//	push the selector, # of Args, ptr to arg list
; 210  : 	pmPushMany( s_setMessage, 1, &nValue );

  004bd	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  004c0	50		 push	 eax
  004c1	6a 01		 push	 1
  004c3	68 8c 03 00 00	 push	 908			; 0000038cH
  004c8	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  004cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 211  : 
; 212  : 	//	call the method
; 213  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 214  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  004d0	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  004d6	51		 push	 ecx
  004d7	6a 06		 push	 6
  004d9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004dc	33 c0		 xor	 eax, eax
  004de	66 8b 02	 mov	 ax, WORD PTR [edx]
  004e1	50		 push	 eax
  004e2	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  004e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  : 
; 216  : 	RestoreObject ()

  004ea	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  004ee	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 217  : }

  004f5	8b e5		 mov	 esp, ebp
  004f7	5d		 pop	 ebp
  004f8	c2 04 00	 ret	 4
?setMessage@CSCI_WorldObject@@QAEXF@Z ENDP		; CSCI_WorldObject::setMessage
_TEXT	ENDS
PUBLIC	?handleVerb@CSCI_WorldObject@@QAEXF@Z		; CSCI_WorldObject::handleVerb
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?handleVerb@CSCI_WorldObject@@QAEXF@Z PROC NEAR		; CSCI_WorldObject::handleVerb

; 220  : {

  004fb	55		 push	 ebp
  004fc	8b ec		 mov	 ebp, esp
  004fe	83 ec 08	 sub	 esp, 8
  00501	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 221  : 	SetObject( handle )

  00504	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0050a	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0050e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00511	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00514	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 222  : 
; 223  : 	//	push the selector, # of Args, ptr to arg list
; 224  : 	pmPushMany( s_handleVerb, 1, &nValue );

  0051b	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  0051e	50		 push	 eax
  0051f	6a 01		 push	 1
  00521	68 16 03 00 00	 push	 790			; 00000316H
  00526	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0052b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 225  : 
; 226  : 	//	call the method
; 227  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 228  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  0052e	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00534	51		 push	 ecx
  00535	6a 06		 push	 6
  00537	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0053a	33 c0		 xor	 eax, eax
  0053c	66 8b 02	 mov	 ax, WORD PTR [edx]
  0053f	50		 push	 eax
  00540	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00545	83 c4 0c	 add	 esp, 12			; 0000000cH

; 229  : 
; 230  : 	RestoreObject ()

  00548	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  0054c	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 231  : }

  00553	8b e5		 mov	 esp, ebp
  00555	5d		 pop	 ebp
  00556	c2 04 00	 ret	 4
?handleVerb@CSCI_WorldObject@@QAEXF@Z ENDP		; CSCI_WorldObject::handleVerb
_TEXT	ENDS
PUBLIC	?look@CSCI_WorldObject@@QAEXF@Z			; CSCI_WorldObject::look
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?look@CSCI_WorldObject@@QAEXF@Z PROC NEAR		; CSCI_WorldObject::look

; 234  : {

  00559	55		 push	 ebp
  0055a	8b ec		 mov	 ebp, esp
  0055c	83 ec 08	 sub	 esp, 8
  0055f	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 	SetObject( handle )

  00562	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00568	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0056c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0056f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00572	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 236  : 
; 237  : 	//	push the selector, # of Args, ptr to arg list
; 238  : 	pmPushMany( s_look, 1, &nValue );

  00579	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  0057c	50		 push	 eax
  0057d	6a 01		 push	 1
  0057f	68 91 03 00 00	 push	 913			; 00000391H
  00584	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00589	83 c4 0c	 add	 esp, 12			; 0000000cH

; 239  : 
; 240  : 	//	call the method
; 241  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 242  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  0058c	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00592	51		 push	 ecx
  00593	6a 06		 push	 6
  00595	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00598	33 c0		 xor	 eax, eax
  0059a	66 8b 02	 mov	 ax, WORD PTR [edx]
  0059d	50		 push	 eax
  0059e	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  005a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 243  : 
; 244  : 	RestoreObject ()

  005a6	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  005aa	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 245  : }

  005b1	8b e5		 mov	 esp, ebp
  005b3	5d		 pop	 ebp
  005b4	c2 04 00	 ret	 4
?look@CSCI_WorldObject@@QAEXF@Z ENDP			; CSCI_WorldObject::look
_TEXT	ENDS
PUBLIC	?FindByServID@CSCI_WorldObject@@SA?AV1@H@Z	; CSCI_WorldObject::FindByServID
PUBLIC	??0CSCI_WorldObject@@QAE@ABV0@@Z		; CSCI_WorldObject::CSCI_WorldObject
EXTRN	?LookUp@CServIDTable@@SA?AVCSCI_WorldObject@@H@Z:NEAR ; CServIDTable::LookUp
_TEXT	SEGMENT
$T84634 = -4
_nServID$ = 12
___$ReturnUdt$ = 8
?FindByServID@CSCI_WorldObject@@SA?AV1@H@Z PROC NEAR	; CSCI_WorldObject::FindByServID

; 248  : {

  005b7	55		 push	 ebp
  005b8	8b ec		 mov	 ebp, esp
  005ba	51		 push	 ecx

; 249  : 	return CServIDTable::LookUp( nServID );

  005bb	8b 45 0c	 mov	 eax, DWORD PTR _nServID$[ebp]
  005be	50		 push	 eax
  005bf	8d 4d fc	 lea	 ecx, DWORD PTR $T84634[ebp]
  005c2	51		 push	 ecx
  005c3	e8 00 00 00 00	 call	 ?LookUp@CServIDTable@@SA?AVCSCI_WorldObject@@H@Z ; CServIDTable::LookUp
  005c8	83 c4 08	 add	 esp, 8
  005cb	50		 push	 eax
  005cc	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  005cf	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  005d4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 250  : }

  005d7	8b e5		 mov	 esp, ebp
  005d9	5d		 pop	 ebp
  005da	c3		 ret	 0
?FindByServID@CSCI_WorldObject@@SA?AV1@H@Z ENDP		; CSCI_WorldObject::FindByServID
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@ABV0@@Z			; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_WorldObject@@QAE@ABV0@@Z PROC NEAR		; CSCI_WorldObject::CSCI_WorldObject, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@ABV0@@Z ; CSCI_Actor::CSCI_Actor
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_WorldObject@@QAE@ABV0@@Z ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@ABV0@@Z			; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Actor@@QAE@ABV0@@Z PROC NEAR			; CSCI_Actor::CSCI_Actor, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@ABV0@@Z ; CSCI_Prop::CSCI_Prop
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Actor@@QAE@ABV0@@Z ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@ABV0@@Z			; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Prop@@QAE@ABV0@@Z PROC NEAR			; CSCI_Prop::CSCI_Prop, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@ABV0@@Z ; CSCI_View::CSCI_View
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Prop@@QAE@ABV0@@Z ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@ABV0@@Z			; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_View@@QAE@ABV0@@Z PROC NEAR			; CSCI_View::CSCI_View, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@ABV0@@Z ; CSCI_Feature::CSCI_Feature
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_View@@QAE@ABV0@@Z ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@ABV0@@Z			; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Feature@@QAE@ABV0@@Z PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@ABV0@@Z ; CSCI_BitMap::CSCI_BitMap
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Feature@@QAE@ABV0@@Z ENDP			; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@ABV0@@Z			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_BitMap@@QAE@ABV0@@Z PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@ABV0@@Z ; CSCI_Rectangle::CSCI_Rectangle
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_BitMap@@QAE@ABV0@@Z ENDP			; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@ABV0@@Z			; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Rectangle@@QAE@ABV0@@Z PROC NEAR		; CSCI_Rectangle::CSCI_Rectangle, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABV0@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Rectangle@@QAE@ABV0@@Z ENDP			; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@ABV0@@Z			; ObjectID::ObjectID
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Object@@QAE@ABV0@@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@ABV0@@Z ENDP			; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	?createDisplay@CSCI_WorldObject@@QAEFF@Z	; CSCI_WorldObject::createDisplay
_TEXT	SEGMENT
_nAction$ = 8
_this$ = -8
_saveObject$ = -4
?createDisplay@CSCI_WorldObject@@QAEFF@Z PROC NEAR	; CSCI_WorldObject::createDisplay

; 253  : {

  005db	55		 push	 ebp
  005dc	8b ec		 mov	 ebp, esp
  005de	83 ec 08	 sub	 esp, 8
  005e1	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 254  : 	SetObject( handle )

  005e4	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  005ea	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  005ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005f1	66 8b 11	 mov	 dx, WORD PTR [ecx]
  005f4	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 255  : 
; 256  : 	//	push the selector, # of Args, ptr to arg list
; 257  : 	pmPushMany( s_createDisplay, 1, &nAction );

  005fb	8d 45 08	 lea	 eax, DWORD PTR _nAction$[ebp]
  005fe	50		 push	 eax
  005ff	6a 01		 push	 1
  00601	68 aa 03 00 00	 push	 938			; 000003aaH
  00606	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0060b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 258  : 
; 259  : 	//	call the method
; 260  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 261  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  0060e	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00614	51		 push	 ecx
  00615	6a 06		 push	 6
  00617	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0061a	33 c0		 xor	 eax, eax
  0061c	66 8b 02	 mov	 ax, WORD PTR [edx]
  0061f	50		 push	 eax
  00620	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00625	83 c4 0c	 add	 esp, 12			; 0000000cH

; 262  : 
; 263  : 	RestoreObject ()

  00628	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  0062c	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 264  : 
; 265  : 	return pm.acc;

  00633	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 266  : }

  00639	8b e5		 mov	 esp, ebp
  0063b	5d		 pop	 ebp
  0063c	c2 04 00	 ret	 4
?createDisplay@CSCI_WorldObject@@QAEFF@Z ENDP		; CSCI_WorldObject::createDisplay
_TEXT	ENDS
PUBLIC	?fromPacket@CSCI_WorldObject@@QAEFFF@Z		; CSCI_WorldObject::fromPacket
_TEXT	SEGMENT
_nValue1$ = 8
_nValue2$ = 12
_this$ = -12
_nValue$ = -8
_saveObject$ = -4
?fromPacket@CSCI_WorldObject@@QAEFFF@Z PROC NEAR	; CSCI_WorldObject::fromPacket

; 269  : {

  0063f	55		 push	 ebp
  00640	8b ec		 mov	 ebp, esp
  00642	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00645	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 270  : 	short nValue[2];
; 271  : 
; 272  : 	nValue[0] = nValue1;

  00648	66 8b 45 08	 mov	 ax, WORD PTR _nValue1$[ebp]
  0064c	66 89 45 f8	 mov	 WORD PTR _nValue$[ebp], ax

; 273  : 	nValue[1] = nValue2;

  00650	66 8b 4d 0c	 mov	 cx, WORD PTR _nValue2$[ebp]
  00654	66 89 4d fa	 mov	 WORD PTR _nValue$[ebp+2], cx

; 274  : 
; 275  : 	SetObject( handle )

  00658	66 8b 15 02 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+2
  0065f	66 89 55 fc	 mov	 WORD PTR _saveObject$[ebp], dx
  00663	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00666	66 8b 08	 mov	 cx, WORD PTR [eax]
  00669	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 276  : 
; 277  : 	//	push the selector, # of Args, ptr to arg list
; 278  : 	pmPushMany( s_fromPacket, 2, nValue );

  00670	8d 55 f8	 lea	 edx, DWORD PTR _nValue$[ebp]
  00673	52		 push	 edx
  00674	6a 02		 push	 2
  00676	68 6c 03 00 00	 push	 876			; 0000036cH
  0067b	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00680	83 c4 0c	 add	 esp, 12			; 0000000cH

; 279  : 
; 280  : 	//	call the method
; 281  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 282  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 2 ) * sizeof ( Property ), pm.StackPtr);

  00683	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  00688	50		 push	 eax
  00689	6a 08		 push	 8
  0068b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0068e	33 d2		 xor	 edx, edx
  00690	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00693	52		 push	 edx
  00694	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00699	83 c4 0c	 add	 esp, 12			; 0000000cH

; 283  : 
; 284  : 	RestoreObject ()

  0069c	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  006a0	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 285  : 
; 286  : 	return pm.acc;

  006a6	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 287  : }

  006ac	8b e5		 mov	 esp, ebp
  006ae	5d		 pop	 ebp
  006af	c2 08 00	 ret	 8
?fromPacket@CSCI_WorldObject@@QAEFFF@Z ENDP		; CSCI_WorldObject::fromPacket
_TEXT	ENDS
PUBLIC	?fromExtendedPacket@CSCI_WorldObject@@QAEXF@Z	; CSCI_WorldObject::fromExtendedPacket
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?fromExtendedPacket@CSCI_WorldObject@@QAEXF@Z PROC NEAR	; CSCI_WorldObject::fromExtendedPacket

; 290  : {

  006b2	55		 push	 ebp
  006b3	8b ec		 mov	 ebp, esp
  006b5	83 ec 08	 sub	 esp, 8
  006b8	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 	SetObject( handle )

  006bb	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  006c1	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  006c5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006c8	66 8b 11	 mov	 dx, WORD PTR [ecx]
  006cb	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 292  : 
; 293  : 	//	push the selector, # of Args, ptr to arg list
; 294  : 	pmPushMany( s_fromExtendedPacket, 1, &nValue );

  006d2	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  006d5	50		 push	 eax
  006d6	6a 01		 push	 1
  006d8	68 c9 03 00 00	 push	 969			; 000003c9H
  006dd	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  006e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 295  : 
; 296  : 	//	call the method
; 297  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 298  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  006e5	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  006eb	51		 push	 ecx
  006ec	6a 06		 push	 6
  006ee	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  006f1	33 c0		 xor	 eax, eax
  006f3	66 8b 02	 mov	 ax, WORD PTR [edx]
  006f6	50		 push	 eax
  006f7	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  006fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 299  : 
; 300  : 	RestoreObject ()

  006ff	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00703	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 301  : }

  0070a	8b e5		 mov	 esp, ebp
  0070c	5d		 pop	 ebp
  0070d	c2 04 00	 ret	 4
?fromExtendedPacket@CSCI_WorldObject@@QAEXF@Z ENDP	; CSCI_WorldObject::fromExtendedPacket
_TEXT	ENDS
PUBLIC	?addValue@CSCI_WorldObject@@QAEXF@Z		; CSCI_WorldObject::addValue
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?addValue@CSCI_WorldObject@@QAEXF@Z PROC NEAR		; CSCI_WorldObject::addValue

; 304  : {

  00710	55		 push	 ebp
  00711	8b ec		 mov	 ebp, esp
  00713	83 ec 08	 sub	 esp, 8
  00716	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 305  : 	SetObject( handle )

  00719	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0071f	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00723	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00726	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00729	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 306  : 
; 307  : 	//	push the selector, # of Args, ptr to arg list
; 308  : 	pmPushMany( s_addValue, 1, &nValue );

  00730	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00733	50		 push	 eax
  00734	6a 01		 push	 1
  00736	68 d6 03 00 00	 push	 982			; 000003d6H
  0073b	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00740	83 c4 0c	 add	 esp, 12			; 0000000cH

; 309  : 
; 310  : 	//	call the method
; 311  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 312  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00743	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00749	51		 push	 ecx
  0074a	6a 06		 push	 6
  0074c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0074f	33 c0		 xor	 eax, eax
  00751	66 8b 02	 mov	 ax, WORD PTR [edx]
  00754	50		 push	 eax
  00755	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0075a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 313  : 
; 314  : 	RestoreObject ()

  0075d	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00761	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 315  : }

  00768	8b e5		 mov	 esp, ebp
  0076a	5d		 pop	 ebp
  0076b	c2 04 00	 ret	 4
?addValue@CSCI_WorldObject@@QAEXF@Z ENDP		; CSCI_WorldObject::addValue
_TEXT	ENDS
PUBLIC	?subValue@CSCI_WorldObject@@QAEXF@Z		; CSCI_WorldObject::subValue
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?subValue@CSCI_WorldObject@@QAEXF@Z PROC NEAR		; CSCI_WorldObject::subValue

; 318  : {

  0076e	55		 push	 ebp
  0076f	8b ec		 mov	 ebp, esp
  00771	83 ec 08	 sub	 esp, 8
  00774	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 319  : 	SetObject( handle )

  00777	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0077d	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00781	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00784	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00787	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 320  : 
; 321  : 	//	push the selector, # of Args, ptr to arg list
; 322  : 	pmPushMany( s_subValue, 1, &nValue );

  0078e	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00791	50		 push	 eax
  00792	6a 01		 push	 1
  00794	68 d7 03 00 00	 push	 983			; 000003d7H
  00799	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0079e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 323  : 
; 324  : 	//	call the method
; 325  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 326  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  007a1	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  007a7	51		 push	 ecx
  007a8	6a 06		 push	 6
  007aa	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  007ad	33 c0		 xor	 eax, eax
  007af	66 8b 02	 mov	 ax, WORD PTR [edx]
  007b2	50		 push	 eax
  007b3	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  007b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 327  : 
; 328  : 	RestoreObject ()

  007bb	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  007bf	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 329  : }

  007c6	8b e5		 mov	 esp, ebp
  007c8	5d		 pop	 ebp
  007c9	c2 04 00	 ret	 4
?subValue@CSCI_WorldObject@@QAEXF@Z ENDP		; CSCI_WorldObject::subValue
_TEXT	ENDS
PUBLIC	?addManaValue@CSCI_WorldObject@@QAEXF@Z		; CSCI_WorldObject::addManaValue
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?addManaValue@CSCI_WorldObject@@QAEXF@Z PROC NEAR	; CSCI_WorldObject::addManaValue

; 332  : {

  007cc	55		 push	 ebp
  007cd	8b ec		 mov	 ebp, esp
  007cf	83 ec 08	 sub	 esp, 8
  007d2	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 333  : 	SetObject( handle )

  007d5	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  007db	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  007df	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  007e2	66 8b 11	 mov	 dx, WORD PTR [ecx]
  007e5	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 334  : 
; 335  : 	//	push the selector, # of Args, ptr to arg list
; 336  : 	pmPushMany( s_addManaValue, 1, &nValue );

  007ec	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  007ef	50		 push	 eax
  007f0	6a 01		 push	 1
  007f2	68 d9 03 00 00	 push	 985			; 000003d9H
  007f7	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  007fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 337  : 
; 338  : 	//	call the method
; 339  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 340  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  007ff	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00805	51		 push	 ecx
  00806	6a 06		 push	 6
  00808	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0080b	33 c0		 xor	 eax, eax
  0080d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00810	50		 push	 eax
  00811	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00816	83 c4 0c	 add	 esp, 12			; 0000000cH

; 341  : 
; 342  : 	RestoreObject ()

  00819	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  0081d	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 343  : }

  00824	8b e5		 mov	 esp, ebp
  00826	5d		 pop	 ebp
  00827	c2 04 00	 ret	 4
?addManaValue@CSCI_WorldObject@@QAEXF@Z ENDP		; CSCI_WorldObject::addManaValue
_TEXT	ENDS
PUBLIC	?subManaValue@CSCI_WorldObject@@QAEXF@Z		; CSCI_WorldObject::subManaValue
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?subManaValue@CSCI_WorldObject@@QAEXF@Z PROC NEAR	; CSCI_WorldObject::subManaValue

; 346  : {

  0082a	55		 push	 ebp
  0082b	8b ec		 mov	 ebp, esp
  0082d	83 ec 08	 sub	 esp, 8
  00830	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 347  : 	SetObject( handle )

  00833	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00839	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0083d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00840	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00843	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 348  : 
; 349  : 	//	push the selector, # of Args, ptr to arg list
; 350  : 	pmPushMany( s_subManaValue, 1, &nValue );

  0084a	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  0084d	50		 push	 eax
  0084e	6a 01		 push	 1
  00850	68 da 03 00 00	 push	 986			; 000003daH
  00855	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0085a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 351  : 
; 352  : 	//	call the method
; 353  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 354  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  0085d	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00863	51		 push	 ecx
  00864	6a 06		 push	 6
  00866	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00869	33 c0		 xor	 eax, eax
  0086b	66 8b 02	 mov	 ax, WORD PTR [edx]
  0086e	50		 push	 eax
  0086f	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00874	83 c4 0c	 add	 esp, 12			; 0000000cH

; 355  : 
; 356  : 	RestoreObject ()

  00877	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  0087b	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 357  : }

  00882	8b e5		 mov	 esp, ebp
  00884	5d		 pop	 ebp
  00885	c2 04 00	 ret	 4
?subManaValue@CSCI_WorldObject@@QAEXF@Z ENDP		; CSCI_WorldObject::subManaValue
_TEXT	ENDS
PUBLIC	?getAffectedState@CSCI_WorldObject@@QAEFF@Z	; CSCI_WorldObject::getAffectedState
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?getAffectedState@CSCI_WorldObject@@QAEFF@Z PROC NEAR	; CSCI_WorldObject::getAffectedState

; 359  : Property CSCI_WorldObject::getAffectedState( Property nValue ) {

  00888	55		 push	 ebp
  00889	8b ec		 mov	 ebp, esp
  0088b	83 ec 08	 sub	 esp, 8
  0088e	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 360  : 	SetObject( handle )

  00891	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00897	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0089b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0089e	66 8b 11	 mov	 dx, WORD PTR [ecx]
  008a1	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 361  : 
; 362  : 	//	push the selector, # of Args, ptr to arg list
; 363  : 	pmPushMany( s_getAffectedState, 1, &nValue );

  008a8	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  008ab	50		 push	 eax
  008ac	6a 01		 push	 1
  008ae	68 5f 03 00 00	 push	 863			; 0000035fH
  008b3	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  008b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 364  : 
; 365  : 	//	call the method
; 366  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 367  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  008bb	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  008c1	51		 push	 ecx
  008c2	6a 06		 push	 6
  008c4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  008c7	33 c0		 xor	 eax, eax
  008c9	66 8b 02	 mov	 ax, WORD PTR [edx]
  008cc	50		 push	 eax
  008cd	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  008d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 368  : 
; 369  : 	RestoreObject ()

  008d5	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  008d9	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 370  : 
; 371  : 	return pm.acc;

  008e0	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 372  : }

  008e6	8b e5		 mov	 esp, ebp
  008e8	5d		 pop	 ebp
  008e9	c2 04 00	 ret	 4
?getAffectedState@CSCI_WorldObject@@QAEFF@Z ENDP	; CSCI_WorldObject::getAffectedState
_TEXT	ENDS
PUBLIC	?servIDEquals@CSCI_WorldObject@@QAEFF@Z		; CSCI_WorldObject::servIDEquals
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?servIDEquals@CSCI_WorldObject@@QAEFF@Z PROC NEAR	; CSCI_WorldObject::servIDEquals

; 375  : {

  008ec	55		 push	 ebp
  008ed	8b ec		 mov	 ebp, esp
  008ef	83 ec 08	 sub	 esp, 8
  008f2	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 376  : 	SetObject( handle )

  008f5	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  008fb	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  008ff	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00902	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00905	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 377  : 
; 378  : 	//	push the selector, # of Args, ptr to arg list
; 379  : 	pmPushMany( s_servIDEquals, 1, &nValue );

  0090c	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  0090f	50		 push	 eax
  00910	6a 01		 push	 1
  00912	68 7d 03 00 00	 push	 893			; 0000037dH
  00917	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0091c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 380  : 
; 381  : 	//	call the method
; 382  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 383  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  0091f	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00925	51		 push	 ecx
  00926	6a 06		 push	 6
  00928	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0092b	33 c0		 xor	 eax, eax
  0092d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00930	50		 push	 eax
  00931	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00936	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 
; 385  : 	RestoreObject ()

  00939	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  0093d	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 386  : 
; 387  : 	return pm.acc;

  00944	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 388  : }

  0094a	8b e5		 mov	 esp, ebp
  0094c	5d		 pop	 ebp
  0094d	c2 04 00	 ret	 4
?servIDEquals@CSCI_WorldObject@@QAEFF@Z ENDP		; CSCI_WorldObject::servIDEquals
_TEXT	ENDS
PUBLIC	??0CSCI_BCharacter@@QAE@G@Z			; CSCI_BCharacter::CSCI_BCharacter
PUBLIC	?getBaseCharacter@CSCI_WorldObject@@QAE?AVCSCI_BCharacter@@XZ ; CSCI_WorldObject::getBaseCharacter
EXTRN	?GetClassByName@@YAGPAD@Z:NEAR			; GetClassByName
_DATA	SEGMENT
$SG83853 DB	'BCharacter', 00H
_DATA	ENDS
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
_base$ = -8
_saveObject$ = -4
?getBaseCharacter@CSCI_WorldObject@@QAE?AVCSCI_BCharacter@@XZ PROC NEAR ; CSCI_WorldObject::getBaseCharacter

; 390  : CSCI_BCharacter CSCI_WorldObject::getBaseCharacter() {

  00950	55		 push	 ebp
  00951	8b ec		 mov	 ebp, esp
  00953	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00956	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 391  : 	ObjectID	base = GetClassByName ( "BCharacter" );

  00959	68 00 00 00 00	 push	 OFFSET FLAT:$SG83853
  0095e	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  00963	83 c4 04	 add	 esp, 4
  00966	50		 push	 eax
  00967	8d 4d f8	 lea	 ecx, DWORD PTR _base$[ebp]
  0096a	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 392  : 
; 393  : 	SetObject( handle )

  0096f	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00975	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00979	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0097c	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0097f	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 394  : 
; 395  : 	//	push the selector, # of Args, ptr to arg list
; 396  : 	pmPushMany( s_getBase, 1, (short*) &base);

  00986	8d 45 f8	 lea	 eax, DWORD PTR _base$[ebp]
  00989	50		 push	 eax
  0098a	6a 01		 push	 1
  0098c	68 5c 03 00 00	 push	 860			; 0000035cH
  00991	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00996	83 c4 0c	 add	 esp, 12			; 0000000cH

; 397  : 
; 398  : 	//	call the method
; 399  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 400  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00999	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  0099f	51		 push	 ecx
  009a0	6a 06		 push	 6
  009a2	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  009a5	33 c0		 xor	 eax, eax
  009a7	66 8b 02	 mov	 ax, WORD PTR [edx]
  009aa	50		 push	 eax
  009ab	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  009b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 401  : 
; 402  : 	RestoreObject ()

  009b3	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  009b7	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 403  : 	return pm.acc;

  009be	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+4
  009c5	52		 push	 edx
  009c6	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  009c9	e8 00 00 00 00	 call	 ??0CSCI_BCharacter@@QAE@G@Z ; CSCI_BCharacter::CSCI_BCharacter
  009ce	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 404  : }

  009d1	8b e5		 mov	 esp, ebp
  009d3	5d		 pop	 ebp
  009d4	c2 04 00	 ret	 4
?getBaseCharacter@CSCI_WorldObject@@QAE?AVCSCI_BCharacter@@XZ ENDP ; CSCI_WorldObject::getBaseCharacter
_TEXT	ENDS
PUBLIC	??0CSCI_BCarryable@@QAE@G@Z			; CSCI_BCarryable::CSCI_BCarryable
PUBLIC	?getBaseCarryable@CSCI_WorldObject@@QAE?AVCSCI_BCarryable@@XZ ; CSCI_WorldObject::getBaseCarryable
_DATA	SEGMENT
	ORG $+1
$SG83864 DB	'BCarryable', 00H
_DATA	ENDS
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
_base$ = -8
_saveObject$ = -4
?getBaseCarryable@CSCI_WorldObject@@QAE?AVCSCI_BCarryable@@XZ PROC NEAR ; CSCI_WorldObject::getBaseCarryable

; 406  : CSCI_BCarryable CSCI_WorldObject::getBaseCarryable() {

  009d7	55		 push	 ebp
  009d8	8b ec		 mov	 ebp, esp
  009da	83 ec 0c	 sub	 esp, 12			; 0000000cH
  009dd	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 407  : 	ObjectID	base = GetClassByName ( "BCarryable" );

  009e0	68 00 00 00 00	 push	 OFFSET FLAT:$SG83864
  009e5	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  009ea	83 c4 04	 add	 esp, 4
  009ed	50		 push	 eax
  009ee	8d 4d f8	 lea	 ecx, DWORD PTR _base$[ebp]
  009f1	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 408  : 
; 409  : 	SetObject( handle )

  009f6	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  009fc	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00a00	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00a03	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00a06	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 410  : 
; 411  : 	//	push the selector, # of Args, ptr to arg list
; 412  : 	pmPushMany( s_getBase, 1, (short*) &base);

  00a0d	8d 45 f8	 lea	 eax, DWORD PTR _base$[ebp]
  00a10	50		 push	 eax
  00a11	6a 01		 push	 1
  00a13	68 5c 03 00 00	 push	 860			; 0000035cH
  00a18	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00a1d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 413  : 
; 414  : 	//	call the method
; 415  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 416  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00a20	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00a26	51		 push	 ecx
  00a27	6a 06		 push	 6
  00a29	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00a2c	33 c0		 xor	 eax, eax
  00a2e	66 8b 02	 mov	 ax, WORD PTR [edx]
  00a31	50		 push	 eax
  00a32	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00a37	83 c4 0c	 add	 esp, 12			; 0000000cH

; 417  : 
; 418  : 	RestoreObject ()

  00a3a	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00a3e	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 419  : 	return pm.acc;

  00a45	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+4
  00a4c	52		 push	 edx
  00a4d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00a50	e8 00 00 00 00	 call	 ??0CSCI_BCarryable@@QAE@G@Z ; CSCI_BCarryable::CSCI_BCarryable
  00a55	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 420  : }

  00a58	8b e5		 mov	 esp, ebp
  00a5a	5d		 pop	 ebp
  00a5b	c2 04 00	 ret	 4
?getBaseCarryable@CSCI_WorldObject@@QAE?AVCSCI_BCarryable@@XZ ENDP ; CSCI_WorldObject::getBaseCarryable
_TEXT	ENDS
PUBLIC	?getBaseWearable@CSCI_WorldObject@@QAE?AVCSCI_BWearable@@XZ ; CSCI_WorldObject::getBaseWearable
PUBLIC	??0CSCI_BWearable@@QAE@G@Z			; CSCI_BWearable::CSCI_BWearable
_DATA	SEGMENT
	ORG $+1
$SG83875 DB	'BWearable', 00H
_DATA	ENDS
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
_base$ = -8
_saveObject$ = -4
?getBaseWearable@CSCI_WorldObject@@QAE?AVCSCI_BWearable@@XZ PROC NEAR ; CSCI_WorldObject::getBaseWearable

; 422  : CSCI_BWearable CSCI_WorldObject::getBaseWearable() {

  00a5e	55		 push	 ebp
  00a5f	8b ec		 mov	 ebp, esp
  00a61	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00a64	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 423  : 	ObjectID	base = GetClassByName ( "BWearable" );

  00a67	68 00 00 00 00	 push	 OFFSET FLAT:$SG83875
  00a6c	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  00a71	83 c4 04	 add	 esp, 4
  00a74	50		 push	 eax
  00a75	8d 4d f8	 lea	 ecx, DWORD PTR _base$[ebp]
  00a78	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 424  : 
; 425  : 	SetObject( handle )

  00a7d	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00a83	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00a87	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00a8a	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00a8d	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 426  : 
; 427  : 	//	push the selector, # of Args, ptr to arg list
; 428  : 	pmPushMany( s_getBase, 1, (short*) &base);

  00a94	8d 45 f8	 lea	 eax, DWORD PTR _base$[ebp]
  00a97	50		 push	 eax
  00a98	6a 01		 push	 1
  00a9a	68 5c 03 00 00	 push	 860			; 0000035cH
  00a9f	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00aa4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 429  : 
; 430  : 	//	call the method
; 431  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 432  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00aa7	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00aad	51		 push	 ecx
  00aae	6a 06		 push	 6
  00ab0	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00ab3	33 c0		 xor	 eax, eax
  00ab5	66 8b 02	 mov	 ax, WORD PTR [edx]
  00ab8	50		 push	 eax
  00ab9	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00abe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 433  : 
; 434  : 	RestoreObject ()

  00ac1	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00ac5	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 435  : 	return pm.acc;

  00acc	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+4
  00ad3	52		 push	 edx
  00ad4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00ad7	e8 00 00 00 00	 call	 ??0CSCI_BWearable@@QAE@G@Z ; CSCI_BWearable::CSCI_BWearable
  00adc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 436  : }

  00adf	8b e5		 mov	 esp, ebp
  00ae1	5d		 pop	 ebp
  00ae2	c2 04 00	 ret	 4
?getBaseWearable@CSCI_WorldObject@@QAE?AVCSCI_BWearable@@XZ ENDP ; CSCI_WorldObject::getBaseWearable
_TEXT	ENDS
PUBLIC	?getBaseWeapon@CSCI_WorldObject@@QAE?AVCSCI_BWeapon@@XZ ; CSCI_WorldObject::getBaseWeapon
PUBLIC	??0CSCI_BWeapon@@QAE@G@Z			; CSCI_BWeapon::CSCI_BWeapon
_DATA	SEGMENT
	ORG $+2
$SG83886 DB	'BWeapon', 00H
_DATA	ENDS
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
_base$ = -8
_saveObject$ = -4
?getBaseWeapon@CSCI_WorldObject@@QAE?AVCSCI_BWeapon@@XZ PROC NEAR ; CSCI_WorldObject::getBaseWeapon

; 438  : CSCI_BWeapon CSCI_WorldObject::getBaseWeapon() {

  00ae5	55		 push	 ebp
  00ae6	8b ec		 mov	 ebp, esp
  00ae8	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00aeb	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 439  : 	ObjectID	base = GetClassByName ( "BWeapon" );

  00aee	68 00 00 00 00	 push	 OFFSET FLAT:$SG83886
  00af3	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  00af8	83 c4 04	 add	 esp, 4
  00afb	50		 push	 eax
  00afc	8d 4d f8	 lea	 ecx, DWORD PTR _base$[ebp]
  00aff	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 440  : 
; 441  : 	SetObject( handle )

  00b04	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00b0a	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00b0e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b11	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00b14	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 442  : 
; 443  : 	//	push the selector, # of Args, ptr to arg list
; 444  : 	pmPushMany( s_getBase, 1, (short*) &base);

  00b1b	8d 45 f8	 lea	 eax, DWORD PTR _base$[ebp]
  00b1e	50		 push	 eax
  00b1f	6a 01		 push	 1
  00b21	68 5c 03 00 00	 push	 860			; 0000035cH
  00b26	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00b2b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 445  : 
; 446  : 	//	call the method
; 447  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 448  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00b2e	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00b34	51		 push	 ecx
  00b35	6a 06		 push	 6
  00b37	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00b3a	33 c0		 xor	 eax, eax
  00b3c	66 8b 02	 mov	 ax, WORD PTR [edx]
  00b3f	50		 push	 eax
  00b40	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00b45	83 c4 0c	 add	 esp, 12			; 0000000cH

; 449  : 
; 450  : 	RestoreObject ()

  00b48	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00b4c	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 451  : 	return pm.acc;

  00b53	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+4
  00b5a	52		 push	 edx
  00b5b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00b5e	e8 00 00 00 00	 call	 ??0CSCI_BWeapon@@QAE@G@Z ; CSCI_BWeapon::CSCI_BWeapon
  00b63	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 452  : }

  00b66	8b e5		 mov	 esp, ebp
  00b68	5d		 pop	 ebp
  00b69	c2 04 00	 ret	 4
?getBaseWeapon@CSCI_WorldObject@@QAE?AVCSCI_BWeapon@@XZ ENDP ; CSCI_WorldObject::getBaseWeapon
_TEXT	ENDS
PUBLIC	?getBaseNPC@CSCI_WorldObject@@QAE?AVCSCI_BNPC@@XZ ; CSCI_WorldObject::getBaseNPC
PUBLIC	??0CSCI_BNPC@@QAE@G@Z				; CSCI_BNPC::CSCI_BNPC
_DATA	SEGMENT
$SG83897 DB	'BNPC', 00H
_DATA	ENDS
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
_base$ = -8
_saveObject$ = -4
?getBaseNPC@CSCI_WorldObject@@QAE?AVCSCI_BNPC@@XZ PROC NEAR ; CSCI_WorldObject::getBaseNPC

; 454  : CSCI_BNPC CSCI_WorldObject::getBaseNPC() {

  00b6c	55		 push	 ebp
  00b6d	8b ec		 mov	 ebp, esp
  00b6f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00b72	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 455  : 	ObjectID	base = GetClassByName ( "BNPC" );

  00b75	68 00 00 00 00	 push	 OFFSET FLAT:$SG83897
  00b7a	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  00b7f	83 c4 04	 add	 esp, 4
  00b82	50		 push	 eax
  00b83	8d 4d f8	 lea	 ecx, DWORD PTR _base$[ebp]
  00b86	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 456  : 
; 457  : 	SetObject( handle )

  00b8b	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00b91	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00b95	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00b98	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00b9b	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 458  : 
; 459  : 	//	push the selector, # of Args, ptr to arg list
; 460  : 	pmPushMany( s_getBase, 1, (short*) &base);

  00ba2	8d 45 f8	 lea	 eax, DWORD PTR _base$[ebp]
  00ba5	50		 push	 eax
  00ba6	6a 01		 push	 1
  00ba8	68 5c 03 00 00	 push	 860			; 0000035cH
  00bad	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00bb2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 461  : 
; 462  : 	//	call the method
; 463  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 464  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00bb5	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00bbb	51		 push	 ecx
  00bbc	6a 06		 push	 6
  00bbe	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00bc1	33 c0		 xor	 eax, eax
  00bc3	66 8b 02	 mov	 ax, WORD PTR [edx]
  00bc6	50		 push	 eax
  00bc7	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00bcc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 465  : 
; 466  : 	RestoreObject ()

  00bcf	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00bd3	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 467  : 	return pm.acc;

  00bda	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+4
  00be1	52		 push	 edx
  00be2	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00be5	e8 00 00 00 00	 call	 ??0CSCI_BNPC@@QAE@G@Z	; CSCI_BNPC::CSCI_BNPC
  00bea	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 468  : }

  00bed	8b e5		 mov	 esp, ebp
  00bef	5d		 pop	 ebp
  00bf0	c2 04 00	 ret	 4
?getBaseNPC@CSCI_WorldObject@@QAE?AVCSCI_BNPC@@XZ ENDP	; CSCI_WorldObject::getBaseNPC
_TEXT	ENDS
PUBLIC	??0CSCI_BContainer@@QAE@G@Z			; CSCI_BContainer::CSCI_BContainer
PUBLIC	?getBaseContainer@CSCI_WorldObject@@QAE?AVCSCI_BContainer@@XZ ; CSCI_WorldObject::getBaseContainer
_DATA	SEGMENT
	ORG $+3
$SG83908 DB	'BContainer', 00H
_DATA	ENDS
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
_base$ = -8
_saveObject$ = -4
?getBaseContainer@CSCI_WorldObject@@QAE?AVCSCI_BContainer@@XZ PROC NEAR ; CSCI_WorldObject::getBaseContainer

; 470  : CSCI_BContainer CSCI_WorldObject::getBaseContainer() {

  00bf3	55		 push	 ebp
  00bf4	8b ec		 mov	 ebp, esp
  00bf6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00bf9	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 471  : 	ObjectID	base = GetClassByName ( "BContainer" );

  00bfc	68 00 00 00 00	 push	 OFFSET FLAT:$SG83908
  00c01	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  00c06	83 c4 04	 add	 esp, 4
  00c09	50		 push	 eax
  00c0a	8d 4d f8	 lea	 ecx, DWORD PTR _base$[ebp]
  00c0d	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 472  : 
; 473  : 	SetObject( handle )

  00c12	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00c18	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00c1c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00c1f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00c22	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 474  : 
; 475  : 	//	push the selector, # of Args, ptr to arg list
; 476  : 	pmPushMany( s_getBase, 1, (short*) &base);

  00c29	8d 45 f8	 lea	 eax, DWORD PTR _base$[ebp]
  00c2c	50		 push	 eax
  00c2d	6a 01		 push	 1
  00c2f	68 5c 03 00 00	 push	 860			; 0000035cH
  00c34	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00c39	83 c4 0c	 add	 esp, 12			; 0000000cH

; 477  : 
; 478  : 	//	call the method
; 479  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 480  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00c3c	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00c42	51		 push	 ecx
  00c43	6a 06		 push	 6
  00c45	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00c48	33 c0		 xor	 eax, eax
  00c4a	66 8b 02	 mov	 ax, WORD PTR [edx]
  00c4d	50		 push	 eax
  00c4e	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00c53	83 c4 0c	 add	 esp, 12			; 0000000cH

; 481  : 
; 482  : 	RestoreObject ()

  00c56	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00c5a	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 483  : 	return pm.acc;

  00c61	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+4
  00c68	52		 push	 edx
  00c69	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00c6c	e8 00 00 00 00	 call	 ??0CSCI_BContainer@@QAE@G@Z ; CSCI_BContainer::CSCI_BContainer
  00c71	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : }

  00c74	8b e5		 mov	 esp, ebp
  00c76	5d		 pop	 ebp
  00c77	c2 04 00	 ret	 4
?getBaseContainer@CSCI_WorldObject@@QAE?AVCSCI_BContainer@@XZ ENDP ; CSCI_WorldObject::getBaseContainer
_TEXT	ENDS
PUBLIC	??0CSCI_BHead@@QAE@G@Z				; CSCI_BHead::CSCI_BHead
PUBLIC	?getBaseHead@CSCI_WorldObject@@QAE?AVCSCI_BHead@@XZ ; CSCI_WorldObject::getBaseHead
_DATA	SEGMENT
	ORG $+1
$SG83919 DB	'BHead', 00H
_DATA	ENDS
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
_base$ = -8
_saveObject$ = -4
?getBaseHead@CSCI_WorldObject@@QAE?AVCSCI_BHead@@XZ PROC NEAR ; CSCI_WorldObject::getBaseHead

; 486  : CSCI_BHead CSCI_WorldObject::getBaseHead() {

  00c7a	55		 push	 ebp
  00c7b	8b ec		 mov	 ebp, esp
  00c7d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00c80	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 487  : 	ObjectID	base = GetClassByName ( "BHead" );

  00c83	68 00 00 00 00	 push	 OFFSET FLAT:$SG83919
  00c88	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  00c8d	83 c4 04	 add	 esp, 4
  00c90	50		 push	 eax
  00c91	8d 4d f8	 lea	 ecx, DWORD PTR _base$[ebp]
  00c94	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 488  : 
; 489  : 	SetObject( handle )

  00c99	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00c9f	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00ca3	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ca6	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00ca9	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 490  : 
; 491  : 	//	push the selector, # of Args, ptr to arg list
; 492  : 	pmPushMany( s_getBase, 1, (short*) &base);

  00cb0	8d 45 f8	 lea	 eax, DWORD PTR _base$[ebp]
  00cb3	50		 push	 eax
  00cb4	6a 01		 push	 1
  00cb6	68 5c 03 00 00	 push	 860			; 0000035cH
  00cbb	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00cc0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 493  : 
; 494  : 	//	call the method
; 495  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 496  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00cc3	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00cc9	51		 push	 ecx
  00cca	6a 06		 push	 6
  00ccc	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00ccf	33 c0		 xor	 eax, eax
  00cd1	66 8b 02	 mov	 ax, WORD PTR [edx]
  00cd4	50		 push	 eax
  00cd5	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00cda	83 c4 0c	 add	 esp, 12			; 0000000cH

; 497  : 
; 498  : 	RestoreObject ()

  00cdd	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00ce1	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 499  : 	return pm.acc;

  00ce8	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+4
  00cef	52		 push	 edx
  00cf0	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00cf3	e8 00 00 00 00	 call	 ??0CSCI_BHead@@QAE@G@Z	; CSCI_BHead::CSCI_BHead
  00cf8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 500  : }

  00cfb	8b e5		 mov	 esp, ebp
  00cfd	5d		 pop	 ebp
  00cfe	c2 04 00	 ret	 4
?getBaseHead@CSCI_WorldObject@@QAE?AVCSCI_BHead@@XZ ENDP ; CSCI_WorldObject::getBaseHead
_TEXT	ENDS
PUBLIC	?getVerb@CSCI_WorldObject@@QAEXV1@@Z		; CSCI_WorldObject::getVerb
_TEXT	SEGMENT
_hObject$ = 8
_this$ = -8
_saveObject$ = -4
?getVerb@CSCI_WorldObject@@QAEXV1@@Z PROC NEAR		; CSCI_WorldObject::getVerb

; 503  : {

  00d01	55		 push	 ebp
  00d02	8b ec		 mov	 ebp, esp
  00d04	83 ec 08	 sub	 esp, 8
  00d07	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 504  : 	SetObject( handle )

  00d0a	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00d10	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00d14	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d17	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00d1a	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 505  : 
; 506  : 	//	push the selector, # of Args, ptr to arg list
; 507  : 	pmPushMany ( s_getVerb, 1, (short *)&hObject );

  00d21	8d 45 08	 lea	 eax, DWORD PTR _hObject$[ebp]
  00d24	50		 push	 eax
  00d25	6a 01		 push	 1
  00d27	68 8a 03 00 00	 push	 906			; 0000038aH
  00d2c	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00d31	83 c4 0c	 add	 esp, 12			; 0000000cH

; 508  : 
; 509  : 	//	call the method
; 510  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 511  : 	pmQuickMessage( (unsigned short)handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr );

  00d34	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00d3a	51		 push	 ecx
  00d3b	6a 06		 push	 6
  00d3d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d40	33 c0		 xor	 eax, eax
  00d42	66 8b 02	 mov	 ax, WORD PTR [edx]
  00d45	50		 push	 eax
  00d46	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00d4b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 512  : 
; 513  : 	RestoreObject ()

  00d4e	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00d52	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 514  : }

  00d59	8b e5		 mov	 esp, ebp
  00d5b	5d		 pop	 ebp
  00d5c	c2 04 00	 ret	 4
?getVerb@CSCI_WorldObject@@QAEXV1@@Z ENDP		; CSCI_WorldObject::getVerb
_TEXT	ENDS
PUBLIC	?getBitmap@CSCI_WorldObject@@QAE?AVObjectID@@XZ	; CSCI_WorldObject::getBitmap
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
_saveObject$ = -4
?getBitmap@CSCI_WorldObject@@QAE?AVObjectID@@XZ PROC NEAR ; CSCI_WorldObject::getBitmap

; 516  : ObjectID CSCI_WorldObject::getBitmap() {

  00d5f	55		 push	 ebp
  00d60	8b ec		 mov	 ebp, esp
  00d62	83 ec 08	 sub	 esp, 8
  00d65	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 517  : 	SetObject( handle )

  00d68	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00d6e	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00d72	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d75	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00d78	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 518  : 
; 519  : 	//	push the selector, # of Args, ptr to arg list
; 520  : 	pmPushMany( s_getBitmap, 0, NULL);

  00d7f	6a 00		 push	 0
  00d81	6a 00		 push	 0
  00d83	68 21 06 00 00	 push	 1569			; 00000621H
  00d88	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00d8d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 521  : 
; 522  : 	//	call the method
; 523  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 524  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  00d90	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  00d95	50		 push	 eax
  00d96	6a 04		 push	 4
  00d98	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00d9b	33 d2		 xor	 edx, edx
  00d9d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00da0	52		 push	 edx
  00da1	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00da6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 525  : 
; 526  : 	RestoreObject ()

  00da9	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  00dad	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 527  : 	return pm.acc;

  00db3	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ?pm@@3VPMachine@@A+4
  00dba	51		 push	 ecx
  00dbb	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00dbe	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00dc3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 528  : }

  00dc6	8b e5		 mov	 esp, ebp
  00dc8	5d		 pop	 ebp
  00dc9	c2 04 00	 ret	 4
?getBitmap@CSCI_WorldObject@@QAE?AVObjectID@@XZ ENDP	; CSCI_WorldObject::getBitmap
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
PUBLIC	??0StringID@@QAE@ABVMemID@@@Z			; StringID::StringID
PUBLIC	?getName@CSCI_WorldObject@@QAE?AVStringID@@XZ	; CSCI_WorldObject::getName
_TEXT	SEGMENT
$T84662 = -8
___$ReturnUdt$ = 8
_this$ = -12
_saveObject$ = -4
?getName@CSCI_WorldObject@@QAE?AVStringID@@XZ PROC NEAR	; CSCI_WorldObject::getName

; 530  : StringID CSCI_WorldObject::getName() {

  00dcc	55		 push	 ebp
  00dcd	8b ec		 mov	 ebp, esp
  00dcf	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00dd2	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 531  : 	SetObject( handle )

  00dd5	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00ddb	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00ddf	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00de2	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00de5	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 532  : 
; 533  : 	//	push the selector, # of Args, ptr to arg list
; 534  : 	pmPushMany( s_getName, 0, NULL);

  00dec	6a 00		 push	 0
  00dee	6a 00		 push	 0
  00df0	68 92 01 00 00	 push	 402			; 00000192H
  00df5	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00dfa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 535  : 
; 536  : 	//	call the method
; 537  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 538  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  00dfd	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  00e02	50		 push	 eax
  00e03	6a 04		 push	 4
  00e05	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00e08	33 d2		 xor	 edx, edx
  00e0a	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00e0d	52		 push	 edx
  00e0e	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00e13	83 c4 0c	 add	 esp, 12			; 0000000cH

; 539  : 
; 540  : 	RestoreObject ()

  00e16	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  00e1a	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 541  : 	return pm.acc;

  00e20	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ?pm@@3VPMachine@@A+4
  00e27	51		 push	 ecx
  00e28	8d 4d f8	 lea	 ecx, DWORD PTR $T84662[ebp]
  00e2b	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00e30	8d 55 f8	 lea	 edx, DWORD PTR $T84662[ebp]
  00e33	52		 push	 edx
  00e34	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00e37	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  00e3c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 542  : }

  00e3f	8b e5		 mov	 esp, ebp
  00e41	5d		 pop	 ebp
  00e42	c2 04 00	 ret	 4
?getName@CSCI_WorldObject@@QAE?AVStringID@@XZ ENDP	; CSCI_WorldObject::getName
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
PUBLIC	?buildVerbList@CSCI_WorldObject@@QAEXV1@@Z	; CSCI_WorldObject::buildVerbList
_TEXT	SEGMENT
_hObject$ = 8
_this$ = -8
_saveObject$ = -4
?buildVerbList@CSCI_WorldObject@@QAEXV1@@Z PROC NEAR	; CSCI_WorldObject::buildVerbList

; 545  : {

  00e45	55		 push	 ebp
  00e46	8b ec		 mov	 ebp, esp
  00e48	83 ec 08	 sub	 esp, 8
  00e4b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 546  : 	SetObject( handle )

  00e4e	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00e54	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00e58	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e5b	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00e5e	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 547  : 
; 548  : 	//	push the selector, # of Args, ptr to arg list
; 549  : 	pmPushMany( s_buildVerbList, 1, (short*) &hObject);

  00e65	8d 45 08	 lea	 eax, DWORD PTR _hObject$[ebp]
  00e68	50		 push	 eax
  00e69	6a 01		 push	 1
  00e6b	68 66 03 00 00	 push	 870			; 00000366H
  00e70	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00e75	83 c4 0c	 add	 esp, 12			; 0000000cH

; 550  : 
; 551  : 	//	call the method
; 552  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 553  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00e78	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00e7e	51		 push	 ecx
  00e7f	6a 06		 push	 6
  00e81	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00e84	33 c0		 xor	 eax, eax
  00e86	66 8b 02	 mov	 ax, WORD PTR [edx]
  00e89	50		 push	 eax
  00e8a	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00e8f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 554  : 
; 555  : 	RestoreObject ()

  00e92	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00e96	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 556  : }

  00e9d	8b e5		 mov	 esp, ebp
  00e9f	5d		 pop	 ebp
  00ea0	c2 04 00	 ret	 4
?buildVerbList@CSCI_WorldObject@@QAEXV1@@Z ENDP		; CSCI_WorldObject::buildVerbList
_TEXT	ENDS
PUBLIC	?setProperName@CSCI_BCharacter@@QAEXF@Z		; CSCI_BCharacter::setProperName
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?setProperName@CSCI_BCharacter@@QAEXF@Z PROC NEAR	; CSCI_BCharacter::setProperName

; 559  : {

  00ea3	55		 push	 ebp
  00ea4	8b ec		 mov	 ebp, esp
  00ea6	83 ec 08	 sub	 esp, 8
  00ea9	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 560  : 	SetObject( handle )

  00eac	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00eb2	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00eb6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00eb9	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00ebc	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 561  : 
; 562  : 	//	push the selector, # of Args, ptr to arg list
; 563  : 	pmPushMany( s_setProperName, 1, &nValue );

  00ec3	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00ec6	50		 push	 eax
  00ec7	6a 01		 push	 1
  00ec9	68 c9 04 00 00	 push	 1225			; 000004c9H
  00ece	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00ed3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 564  : 
; 565  : 	//	call the method
; 566  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 567  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00ed6	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00edc	51		 push	 ecx
  00edd	6a 06		 push	 6
  00edf	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ee2	33 c0		 xor	 eax, eax
  00ee4	66 8b 02	 mov	 ax, WORD PTR [edx]
  00ee7	50		 push	 eax
  00ee8	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00eed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 568  : 
; 569  : 	RestoreObject ()

  00ef0	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00ef4	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 570  : }

  00efb	8b e5		 mov	 esp, ebp
  00efd	5d		 pop	 ebp
  00efe	c2 04 00	 ret	 4
?setProperName@CSCI_BCharacter@@QAEXF@Z ENDP		; CSCI_BCharacter::setProperName
_TEXT	ENDS
PUBLIC	?setTitle@CSCI_BCharacter@@QAEXF@Z		; CSCI_BCharacter::setTitle
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?setTitle@CSCI_BCharacter@@QAEXF@Z PROC NEAR		; CSCI_BCharacter::setTitle

; 573  : {

  00f01	55		 push	 ebp
  00f02	8b ec		 mov	 ebp, esp
  00f04	83 ec 08	 sub	 esp, 8
  00f07	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 574  : 	SetObject( handle )

  00f0a	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00f10	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00f14	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f17	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00f1a	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 575  : 
; 576  : 	//	push the selector, # of Args, ptr to arg list
; 577  : 	pmPushMany( s_setTitle, 1, &nValue );

  00f21	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00f24	50		 push	 eax
  00f25	6a 01		 push	 1
  00f27	68 2a 04 00 00	 push	 1066			; 0000042aH
  00f2c	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00f31	83 c4 0c	 add	 esp, 12			; 0000000cH

; 578  : 
; 579  : 	//	call the method
; 580  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 581  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00f34	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00f3a	51		 push	 ecx
  00f3b	6a 06		 push	 6
  00f3d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00f40	33 c0		 xor	 eax, eax
  00f42	66 8b 02	 mov	 ax, WORD PTR [edx]
  00f45	50		 push	 eax
  00f46	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00f4b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 582  : 
; 583  : 	RestoreObject ()

  00f4e	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00f52	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 584  : }

  00f59	8b e5		 mov	 esp, ebp
  00f5b	5d		 pop	 ebp
  00f5c	c2 04 00	 ret	 4
?setTitle@CSCI_BCharacter@@QAEXF@Z ENDP			; CSCI_BCharacter::setTitle
_TEXT	ENDS
PUBLIC	?setBiography@CSCI_BCharacter@@QAEXF@Z		; CSCI_BCharacter::setBiography
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?setBiography@CSCI_BCharacter@@QAEXF@Z PROC NEAR	; CSCI_BCharacter::setBiography

; 587  : {

  00f5f	55		 push	 ebp
  00f60	8b ec		 mov	 ebp, esp
  00f62	83 ec 08	 sub	 esp, 8
  00f65	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 588  : 	SetObject( handle )

  00f68	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  00f6e	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  00f72	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00f75	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00f78	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 589  : 
; 590  : 	//	push the selector, # of Args, ptr to arg list
; 591  : 	pmPushMany( s_setBiography, 1, &nValue );

  00f7f	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  00f82	50		 push	 eax
  00f83	6a 01		 push	 1
  00f85	68 ca 04 00 00	 push	 1226			; 000004caH
  00f8a	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00f8f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 592  : 
; 593  : 	//	call the method
; 594  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 595  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  00f92	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  00f98	51		 push	 ecx
  00f99	6a 06		 push	 6
  00f9b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00f9e	33 c0		 xor	 eax, eax
  00fa0	66 8b 02	 mov	 ax, WORD PTR [edx]
  00fa3	50		 push	 eax
  00fa4	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  00fa9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 596  : 
; 597  : 	RestoreObject ()

  00fac	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  00fb0	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 598  : }

  00fb7	8b e5		 mov	 esp, ebp
  00fb9	5d		 pop	 ebp
  00fba	c2 04 00	 ret	 4
?setBiography@CSCI_BCharacter@@QAEXF@Z ENDP		; CSCI_BCharacter::setBiography
_TEXT	ENDS
PUBLIC	?deltaFeatureSelect@CSCI_BHead@@QAEXFF@Z	; CSCI_BHead::deltaFeatureSelect
_TEXT	SEGMENT
_nFeature$ = 8
_nDelta$ = 12
_this$ = -12
_nValue$ = -8
_saveObject$ = -4
?deltaFeatureSelect@CSCI_BHead@@QAEXFF@Z PROC NEAR	; CSCI_BHead::deltaFeatureSelect

; 601  : {

  00fbd	55		 push	 ebp
  00fbe	8b ec		 mov	 ebp, esp
  00fc0	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00fc3	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 602  : 	short nValue[2];
; 603  : 
; 604  : 	nValue[0] = nFeature;

  00fc6	66 8b 45 08	 mov	 ax, WORD PTR _nFeature$[ebp]
  00fca	66 89 45 f8	 mov	 WORD PTR _nValue$[ebp], ax

; 605  : 	nValue[1] = nDelta;

  00fce	66 8b 4d 0c	 mov	 cx, WORD PTR _nDelta$[ebp]
  00fd2	66 89 4d fa	 mov	 WORD PTR _nValue$[ebp+2], cx

; 606  : 
; 607  : 	SetObject( handle )

  00fd6	66 8b 15 02 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+2
  00fdd	66 89 55 fc	 mov	 WORD PTR _saveObject$[ebp], dx
  00fe1	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00fe4	66 8b 08	 mov	 cx, WORD PTR [eax]
  00fe7	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 608  : 
; 609  : 	//	push the selector, # of Args, ptr to arg list
; 610  : 	pmPushMany( s_deltaFeatureSelect, 2, nValue );

  00fee	8d 55 f8	 lea	 edx, DWORD PTR _nValue$[ebp]
  00ff1	52		 push	 edx
  00ff2	6a 02		 push	 2
  00ff4	68 f2 04 00 00	 push	 1266			; 000004f2H
  00ff9	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  00ffe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 611  : 
; 612  : 	//	call the method
; 613  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 614  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 2 ) * sizeof ( Property ), pm.StackPtr);

  01001	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01006	50		 push	 eax
  01007	6a 08		 push	 8
  01009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0100c	33 d2		 xor	 edx, edx
  0100e	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01011	52		 push	 edx
  01012	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 615  : 
; 616  : 	RestoreObject ()

  0101a	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  0101e	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 617  : }

  01024	8b e5		 mov	 esp, ebp
  01026	5d		 pop	 ebp
  01027	c2 08 00	 ret	 8
?deltaFeatureSelect@CSCI_BHead@@QAEXFF@Z ENDP		; CSCI_BHead::deltaFeatureSelect
_TEXT	ENDS
PUBLIC	?nextFeature@CSCI_BHead@@QAEXF@Z		; CSCI_BHead::nextFeature
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?nextFeature@CSCI_BHead@@QAEXF@Z PROC NEAR		; CSCI_BHead::nextFeature

; 619  : void CSCI_BHead::nextFeature( short nValue ) {

  0102a	55		 push	 ebp
  0102b	8b ec		 mov	 ebp, esp
  0102d	83 ec 08	 sub	 esp, 8
  01030	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 620  : 	SetObject( handle )

  01033	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01039	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0103d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01040	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01043	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 621  : 
; 622  : 	//	push the selector, # of Args, ptr to arg list
; 623  : 	pmPushMany( s_nextFeature, 1, &nValue );

  0104a	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  0104d	50		 push	 eax
  0104e	6a 01		 push	 1
  01050	68 a2 03 00 00	 push	 930			; 000003a2H
  01055	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0105a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 624  : 
; 625  : 	//	call the method
; 626  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 627  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  0105d	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  01063	51		 push	 ecx
  01064	6a 06		 push	 6
  01066	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01069	33 c0		 xor	 eax, eax
  0106b	66 8b 02	 mov	 ax, WORD PTR [edx]
  0106e	50		 push	 eax
  0106f	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 628  : 	
; 629  : 	RestoreObject ()

  01077	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  0107b	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 630  : }

  01082	8b e5		 mov	 esp, ebp
  01084	5d		 pop	 ebp
  01085	c2 04 00	 ret	 4
?nextFeature@CSCI_BHead@@QAEXF@Z ENDP			; CSCI_BHead::nextFeature
_TEXT	ENDS
PUBLIC	?prevFeature@CSCI_BHead@@QAEXF@Z		; CSCI_BHead::prevFeature
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?prevFeature@CSCI_BHead@@QAEXF@Z PROC NEAR		; CSCI_BHead::prevFeature

; 632  : void CSCI_BHead::prevFeature( short nValue ) {

  01088	55		 push	 ebp
  01089	8b ec		 mov	 ebp, esp
  0108b	83 ec 08	 sub	 esp, 8
  0108e	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 633  : 	SetObject( handle )

  01091	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01097	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0109b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0109e	66 8b 11	 mov	 dx, WORD PTR [ecx]
  010a1	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 634  : 
; 635  : 	//	push the selector, # of Args, ptr to arg list
; 636  : 	pmPushMany( s_prevFeature, 1, &nValue );

  010a8	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  010ab	50		 push	 eax
  010ac	6a 01		 push	 1
  010ae	68 a3 03 00 00	 push	 931			; 000003a3H
  010b3	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  010b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 637  : 
; 638  : 	//	call the method
; 639  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 640  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  010bb	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  010c1	51		 push	 ecx
  010c2	6a 06		 push	 6
  010c4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  010c7	33 c0		 xor	 eax, eax
  010c9	66 8b 02	 mov	 ax, WORD PTR [edx]
  010cc	50		 push	 eax
  010cd	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  010d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 641  : 	
; 642  : 	RestoreObject ()

  010d5	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  010d9	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 643  : }

  010e0	8b e5		 mov	 esp, ebp
  010e2	5d		 pop	 ebp
  010e3	c2 04 00	 ret	 4
?prevFeature@CSCI_BHead@@QAEXF@Z ENDP			; CSCI_BHead::prevFeature
_TEXT	ENDS
PUBLIC	?getHeadBitmap@CSCI_fNBody@@QAE?AVObjectID@@XZ	; CSCI_fNBody::getHeadBitmap
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
_saveObject$ = -4
?getHeadBitmap@CSCI_fNBody@@QAE?AVObjectID@@XZ PROC NEAR ; CSCI_fNBody::getHeadBitmap

; 645  : ObjectID CSCI_fNBody::getHeadBitmap () {

  010e6	55		 push	 ebp
  010e7	8b ec		 mov	 ebp, esp
  010e9	83 ec 08	 sub	 esp, 8
  010ec	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 646  : 	SetObject( handle )

  010ef	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  010f5	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  010f9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  010fc	66 8b 11	 mov	 dx, WORD PTR [ecx]
  010ff	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 647  : 
; 648  : 	//	push the selector, # of Args, ptr to arg list
; 649  : 	pmPushMany( s_getHeadBitmap, 0, NULL);

  01106	6a 00		 push	 0
  01108	6a 00		 push	 0
  0110a	68 1d 06 00 00	 push	 1565			; 0000061dH
  0110f	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01114	83 c4 0c	 add	 esp, 12			; 0000000cH

; 650  : 
; 651  : 	//	call the method
; 652  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 653  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  01117	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  0111c	50		 push	 eax
  0111d	6a 04		 push	 4
  0111f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01122	33 d2		 xor	 edx, edx
  01124	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01127	52		 push	 edx
  01128	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0112d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 654  : 
; 655  : 	RestoreObject ()

  01130	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01134	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 656  : 	
; 657  : 	return pm.acc;

  0113a	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ?pm@@3VPMachine@@A+4
  01141	51		 push	 ecx
  01142	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01145	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  0114a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 658  : }

  0114d	8b e5		 mov	 esp, ebp
  0114f	5d		 pop	 ebp
  01150	c2 04 00	 ret	 4
?getHeadBitmap@CSCI_fNBody@@QAE?AVObjectID@@XZ ENDP	; CSCI_fNBody::getHeadBitmap
_TEXT	ENDS
PUBLIC	?getAttackBitmap@CSCI_fNBody@@QAE?AVObjectID@@XZ ; CSCI_fNBody::getAttackBitmap
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
_saveObject$ = -4
?getAttackBitmap@CSCI_fNBody@@QAE?AVObjectID@@XZ PROC NEAR ; CSCI_fNBody::getAttackBitmap

; 660  : ObjectID CSCI_fNBody::getAttackBitmap () {

  01153	55		 push	 ebp
  01154	8b ec		 mov	 ebp, esp
  01156	83 ec 08	 sub	 esp, 8
  01159	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 661  : 	SetObject( handle )

  0115c	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01162	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01166	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01169	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0116c	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 662  : 
; 663  : 	//	push the selector, # of Args, ptr to arg list
; 664  : 	pmPushMany( s_getAttackBitmap, 0, NULL);

  01173	6a 00		 push	 0
  01175	6a 00		 push	 0
  01177	68 22 06 00 00	 push	 1570			; 00000622H
  0117c	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01181	83 c4 0c	 add	 esp, 12			; 0000000cH

; 665  : 
; 666  : 	//	call the method
; 667  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 668  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  01184	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01189	50		 push	 eax
  0118a	6a 04		 push	 4
  0118c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0118f	33 d2		 xor	 edx, edx
  01191	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01194	52		 push	 edx
  01195	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0119a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 669  : 
; 670  : 	RestoreObject ()

  0119d	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  011a1	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 671  : 	
; 672  : 	return pm.acc;

  011a7	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ?pm@@3VPMachine@@A+4
  011ae	51		 push	 ecx
  011af	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  011b2	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  011b7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 673  : }

  011ba	8b e5		 mov	 esp, ebp
  011bc	5d		 pop	 ebp
  011bd	c2 04 00	 ret	 4
?getAttackBitmap@CSCI_fNBody@@QAE?AVObjectID@@XZ ENDP	; CSCI_fNBody::getAttackBitmap
_TEXT	ENDS
PUBLIC	?getStanceBitmap@CSCI_fNBody@@QAE?AVObjectID@@F@Z ; CSCI_fNBody::getStanceBitmap
_TEXT	SEGMENT
_nValue$ = 12
___$ReturnUdt$ = 8
_this$ = -8
_saveObject$ = -4
?getStanceBitmap@CSCI_fNBody@@QAE?AVObjectID@@F@Z PROC NEAR ; CSCI_fNBody::getStanceBitmap

; 719  : ObjectID CSCI_fNBody::getStanceBitmap( short nValue ) {

  011c0	55		 push	 ebp
  011c1	8b ec		 mov	 ebp, esp
  011c3	83 ec 08	 sub	 esp, 8
  011c6	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 720  : 	SetObject( handle )

  011c9	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  011cf	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  011d3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011d6	66 8b 11	 mov	 dx, WORD PTR [ecx]
  011d9	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 721  : 
; 722  : 	//	push the selector, # of Args, ptr to arg list
; 723  : 	pmPushMany( s_getStanceBitmap, 1, &nValue );

  011e0	8d 45 0c	 lea	 eax, DWORD PTR _nValue$[ebp]
  011e3	50		 push	 eax
  011e4	6a 01		 push	 1
  011e6	68 1e 06 00 00	 push	 1566			; 0000061eH
  011eb	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  011f0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 724  : 
; 725  : 	//	call the method
; 726  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 727  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  011f3	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  011f9	51		 push	 ecx
  011fa	6a 06		 push	 6
  011fc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  011ff	33 c0		 xor	 eax, eax
  01201	66 8b 02	 mov	 ax, WORD PTR [edx]
  01204	50		 push	 eax
  01205	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0120a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 728  : 
; 729  : 	RestoreObject ()

  0120d	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  01211	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 730  : 	
; 731  : 	return pm.acc;

  01218	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ?pm@@3VPMachine@@A+4
  0121f	52		 push	 edx
  01220	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01223	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  01228	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 732  : }

  0122b	8b e5		 mov	 esp, ebp
  0122d	5d		 pop	 ebp
  0122e	c2 08 00	 ret	 8
?getStanceBitmap@CSCI_fNBody@@QAE?AVObjectID@@F@Z ENDP	; CSCI_fNBody::getStanceBitmap
_TEXT	ENDS
PUBLIC	?setSex@CSCI_WorldActor@@QAEXF@Z		; CSCI_WorldActor::setSex
_TEXT	SEGMENT
_nSex$ = 8
_this$ = -8
_saveObject$ = -4
?setSex@CSCI_WorldActor@@QAEXF@Z PROC NEAR		; CSCI_WorldActor::setSex

; 734  : void CSCI_WorldActor::setSex( short nSex ) {

  01231	55		 push	 ebp
  01232	8b ec		 mov	 ebp, esp
  01234	83 ec 08	 sub	 esp, 8
  01237	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 735  : 	SetObject( handle )

  0123a	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01240	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01244	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01247	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0124a	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 736  : 
; 737  : 	//	push the selector, # of Args, ptr to arg list
; 738  : 	pmPushMany( s_setSex, 1, &nSex );

  01251	8d 45 08	 lea	 eax, DWORD PTR _nSex$[ebp]
  01254	50		 push	 eax
  01255	6a 01		 push	 1
  01257	68 f0 04 00 00	 push	 1264			; 000004f0H
  0125c	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01261	83 c4 0c	 add	 esp, 12			; 0000000cH

; 739  : 
; 740  : 	//	call the method
; 741  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 742  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  01264	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  0126a	51		 push	 ecx
  0126b	6a 06		 push	 6
  0126d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01270	33 c0		 xor	 eax, eax
  01272	66 8b 02	 mov	 ax, WORD PTR [edx]
  01275	50		 push	 eax
  01276	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0127b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 743  : 	
; 744  : 	RestoreObject ()

  0127e	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  01282	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 745  : }

  01289	8b e5		 mov	 esp, ebp
  0128b	5d		 pop	 ebp
  0128c	c2 04 00	 ret	 4
?setSex@CSCI_WorldActor@@QAEXF@Z ENDP			; CSCI_WorldActor::setSex
_TEXT	ENDS
PUBLIC	?setRace@CSCI_WorldActor@@QAEXF@Z		; CSCI_WorldActor::setRace
_TEXT	SEGMENT
_nRace$ = 8
_this$ = -8
_saveObject$ = -4
?setRace@CSCI_WorldActor@@QAEXF@Z PROC NEAR		; CSCI_WorldActor::setRace

; 747  : void CSCI_WorldActor::setRace( short nRace ) {

  0128f	55		 push	 ebp
  01290	8b ec		 mov	 ebp, esp
  01292	83 ec 08	 sub	 esp, 8
  01295	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 748  : 	SetObject( handle )

  01298	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0129e	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  012a2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  012a5	66 8b 11	 mov	 dx, WORD PTR [ecx]
  012a8	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 749  : 
; 750  : 	//	push the selector, # of Args, ptr to arg list
; 751  : 	pmPushMany( s_setRace, 1, &nRace );

  012af	8d 45 08	 lea	 eax, DWORD PTR _nRace$[ebp]
  012b2	50		 push	 eax
  012b3	6a 01		 push	 1
  012b5	68 f1 04 00 00	 push	 1265			; 000004f1H
  012ba	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  012bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 752  : 
; 753  : 	//	call the method
; 754  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 755  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  012c2	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  012c8	51		 push	 ecx
  012c9	6a 06		 push	 6
  012cb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  012ce	33 c0		 xor	 eax, eax
  012d0	66 8b 02	 mov	 ax, WORD PTR [edx]
  012d3	50		 push	 eax
  012d4	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  012d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 756  : 	
; 757  : 	RestoreObject ()

  012dc	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  012e0	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 758  : }

  012e7	8b e5		 mov	 esp, ebp
  012e9	5d		 pop	 ebp
  012ea	c2 04 00	 ret	 4
?setRace@CSCI_WorldActor@@QAEXF@Z ENDP			; CSCI_WorldActor::setRace
_TEXT	ENDS
PUBLIC	?getSex@CSCI_WorldActor@@QAEFXZ			; CSCI_WorldActor::getSex
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?getSex@CSCI_WorldActor@@QAEFXZ PROC NEAR		; CSCI_WorldActor::getSex

; 760  : short CSCI_WorldActor::getSex() {

  012ed	55		 push	 ebp
  012ee	8b ec		 mov	 ebp, esp
  012f0	83 ec 08	 sub	 esp, 8
  012f3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 761  : 	SetObject( handle )

  012f6	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  012fc	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01300	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01303	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01306	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 762  : 
; 763  : 	//	push the selector, # of Args, ptr to arg list
; 764  : 	pmPushMany( s_getSex, 0, NULL );

  0130d	6a 00		 push	 0
  0130f	6a 00		 push	 0
  01311	68 d2 04 00 00	 push	 1234			; 000004d2H
  01316	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0131b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 765  : 
; 766  : 	//	call the method
; 767  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 768  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  0131e	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01323	50		 push	 eax
  01324	6a 04		 push	 4
  01326	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01329	33 d2		 xor	 edx, edx
  0132b	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0132e	52		 push	 edx
  0132f	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01334	83 c4 0c	 add	 esp, 12			; 0000000cH

; 769  : 
; 770  : 	RestoreObject ()

  01337	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  0133b	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 771  : 	
; 772  : 	return pm.acc;

  01341	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 773  : }

  01347	8b e5		 mov	 esp, ebp
  01349	5d		 pop	 ebp
  0134a	c3		 ret	 0
?getSex@CSCI_WorldActor@@QAEFXZ ENDP			; CSCI_WorldActor::getSex
_TEXT	ENDS
PUBLIC	?getRace@CSCI_WorldActor@@QAEFXZ		; CSCI_WorldActor::getRace
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?getRace@CSCI_WorldActor@@QAEFXZ PROC NEAR		; CSCI_WorldActor::getRace

; 775  : short CSCI_WorldActor::getRace() {

  0134b	55		 push	 ebp
  0134c	8b ec		 mov	 ebp, esp
  0134e	83 ec 08	 sub	 esp, 8
  01351	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 776  : 	SetObject( handle )

  01354	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0135a	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0135e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01361	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01364	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 777  : 
; 778  : 	//	push the selector, # of Args, ptr to arg list
; 779  : 	pmPushMany( s_getRace, 0, NULL );

  0136b	6a 00		 push	 0
  0136d	6a 00		 push	 0
  0136f	68 05 05 00 00	 push	 1285			; 00000505H
  01374	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01379	83 c4 0c	 add	 esp, 12			; 0000000cH

; 780  : 
; 781  : 	//	call the method
; 782  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 783  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  0137c	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01381	50		 push	 eax
  01382	6a 04		 push	 4
  01384	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01387	33 d2		 xor	 edx, edx
  01389	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0138c	52		 push	 edx
  0138d	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01392	83 c4 0c	 add	 esp, 12			; 0000000cH

; 784  : 
; 785  : 	RestoreObject ()

  01395	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01399	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 786  : 	
; 787  : 	return pm.acc;

  0139f	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 788  : }

  013a5	8b e5		 mov	 esp, ebp
  013a7	5d		 pop	 ebp
  013a8	c3		 ret	 0
?getRace@CSCI_WorldActor@@QAEFXZ ENDP			; CSCI_WorldActor::getRace
_TEXT	ENDS
PUBLIC	?stopAction@CSCI_WorldEgo@@QAEXXZ		; CSCI_WorldEgo::stopAction
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?stopAction@CSCI_WorldEgo@@QAEXXZ PROC NEAR		; CSCI_WorldEgo::stopAction

; 790  : void CSCI_WorldEgo::stopAction() {

  013a9	55		 push	 ebp
  013aa	8b ec		 mov	 ebp, esp
  013ac	83 ec 08	 sub	 esp, 8
  013af	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 791  : 	SetObject( handle )

  013b2	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  013b8	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  013bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013bf	66 8b 11	 mov	 dx, WORD PTR [ecx]
  013c2	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 792  : 
; 793  : 	//	push the selector, # of Args, ptr to arg list
; 794  : 	pmPushMany( s_stopAction, 0, NULL );

  013c9	6a 00		 push	 0
  013cb	6a 00		 push	 0
  013cd	68 a6 03 00 00	 push	 934			; 000003a6H
  013d2	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  013d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 795  : 
; 796  : 	//	call the method
; 797  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 798  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  013da	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  013df	50		 push	 eax
  013e0	6a 04		 push	 4
  013e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013e5	33 d2		 xor	 edx, edx
  013e7	66 8b 11	 mov	 dx, WORD PTR [ecx]
  013ea	52		 push	 edx
  013eb	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  013f0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 799  : 	
; 800  : 	RestoreObject ()

  013f3	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  013f7	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 801  : }

  013fd	8b e5		 mov	 esp, ebp
  013ff	5d		 pop	 ebp
  01400	c3		 ret	 0
?stopAction@CSCI_WorldEgo@@QAEXXZ ENDP			; CSCI_WorldEgo::stopAction
_TEXT	ENDS
PUBLIC	?stopTargetting@CSCI_WorldEgo@@QAEXXZ		; CSCI_WorldEgo::stopTargetting
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?stopTargetting@CSCI_WorldEgo@@QAEXXZ PROC NEAR		; CSCI_WorldEgo::stopTargetting

; 803  : void CSCI_WorldEgo::stopTargetting( void ) {

  01401	55		 push	 ebp
  01402	8b ec		 mov	 ebp, esp
  01404	83 ec 08	 sub	 esp, 8
  01407	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 804  : 	SetObject( handle )

  0140a	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01410	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01414	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01417	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0141a	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 805  : 
; 806  : 	//	push the selector, # of Args, ptr to arg list
; 807  : 	pmPushMany( s_stopTargetting, 0, NULL );

  01421	6a 00		 push	 0
  01423	6a 00		 push	 0
  01425	68 5c 04 00 00	 push	 1116			; 0000045cH
  0142a	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0142f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 808  : 
; 809  : 	//	call the method
; 810  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 811  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  01432	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01437	50		 push	 eax
  01438	6a 04		 push	 4
  0143a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0143d	33 d2		 xor	 edx, edx
  0143f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01442	52		 push	 edx
  01443	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01448	83 c4 0c	 add	 esp, 12			; 0000000cH

; 812  : 	
; 813  : 	RestoreObject ()

  0144b	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  0144f	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 814  : }

  01455	8b e5		 mov	 esp, ebp
  01457	5d		 pop	 ebp
  01458	c3		 ret	 0
?stopTargetting@CSCI_WorldEgo@@QAEXXZ ENDP		; CSCI_WorldEgo::stopTargetting
_TEXT	ENDS
PUBLIC	?setPassword@CSCI_WorldEgo@@QAEXXZ		; CSCI_WorldEgo::setPassword
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?setPassword@CSCI_WorldEgo@@QAEXXZ PROC NEAR		; CSCI_WorldEgo::setPassword

; 816  : void CSCI_WorldEgo::setPassword( void ) {

  01459	55		 push	 ebp
  0145a	8b ec		 mov	 ebp, esp
  0145c	83 ec 08	 sub	 esp, 8
  0145f	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 817  : 	SetObject( handle )

  01462	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01468	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0146c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0146f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01472	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 818  : 
; 819  : 	//	push the selector, # of Args, ptr to arg list
; 820  : 	pmPushMany( s_setPassword, 0, NULL );

  01479	6a 00		 push	 0
  0147b	6a 00		 push	 0
  0147d	68 30 06 00 00	 push	 1584			; 00000630H
  01482	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01487	83 c4 0c	 add	 esp, 12			; 0000000cH

; 821  : 
; 822  : 	//	call the method
; 823  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 824  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  0148a	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  0148f	50		 push	 eax
  01490	6a 04		 push	 4
  01492	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01495	33 d2		 xor	 edx, edx
  01497	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0149a	52		 push	 edx
  0149b	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  014a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 825  : 	
; 826  : 	RestoreObject ()

  014a3	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  014a7	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 827  : }

  014ad	8b e5		 mov	 esp, ebp
  014af	5d		 pop	 ebp
  014b0	c3		 ret	 0
?setPassword@CSCI_WorldEgo@@QAEXXZ ENDP			; CSCI_WorldEgo::setPassword
_TEXT	ENDS
PUBLIC	?contains@CSCI_Collection@@QAEFF@Z		; CSCI_Collection::contains
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?contains@CSCI_Collection@@QAEFF@Z PROC NEAR		; CSCI_Collection::contains

; 830  : {

  014b1	55		 push	 ebp
  014b2	8b ec		 mov	 ebp, esp
  014b4	83 ec 08	 sub	 esp, 8
  014b7	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 831  : 	SetObject( handle )

  014ba	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  014c0	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  014c4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  014c7	66 8b 11	 mov	 dx, WORD PTR [ecx]
  014ca	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 832  : 
; 833  : 	//	push the selector, # of Args, ptr to arg list
; 834  : 	pmPushMany( s_contains, 1, &nValue );

  014d1	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  014d4	50		 push	 eax
  014d5	6a 01		 push	 1
  014d7	68 a3 00 00 00	 push	 163			; 000000a3H
  014dc	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  014e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 835  : 
; 836  : 	//	call the method
; 837  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 838  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr );

  014e4	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  014ea	51		 push	 ecx
  014eb	6a 06		 push	 6
  014ed	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  014f0	33 c0		 xor	 eax, eax
  014f2	66 8b 02	 mov	 ax, WORD PTR [edx]
  014f5	50		 push	 eax
  014f6	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  014fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 839  : 
; 840  : 	RestoreObject ()

  014fe	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  01502	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 841  : 
; 842  : 	return pm.acc;

  01509	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 843  : }

  0150f	8b e5		 mov	 esp, ebp
  01511	5d		 pop	 ebp
  01512	c2 04 00	 ret	 4
?contains@CSCI_Collection@@QAEFF@Z ENDP			; CSCI_Collection::contains
_TEXT	ENDS
PUBLIC	?at@CSCI_List@@QAEFF@Z				; CSCI_List::at
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?at@CSCI_List@@QAEFF@Z PROC NEAR			; CSCI_List::at

; 846  : {

  01515	55		 push	 ebp
  01516	8b ec		 mov	 ebp, esp
  01518	83 ec 08	 sub	 esp, 8
  0151b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 847  : 	SetObject( handle )

  0151e	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01524	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01528	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0152b	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0152e	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 848  : 
; 849  : 	//	push the selector, # of Args, ptr to arg list
; 850  : 	pmPushMany( s_at, 1, &nValue );

  01535	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  01538	50		 push	 eax
  01539	6a 01		 push	 1
  0153b	6a 4b		 push	 75			; 0000004bH
  0153d	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01542	83 c4 0c	 add	 esp, 12			; 0000000cH

; 851  : 
; 852  : 	//	call the method
; 853  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 854  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  01545	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  0154b	51		 push	 ecx
  0154c	6a 06		 push	 6
  0154e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01551	33 c0		 xor	 eax, eax
  01553	66 8b 02	 mov	 ax, WORD PTR [edx]
  01556	50		 push	 eax
  01557	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0155c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 855  : 
; 856  : 	RestoreObject ()

  0155f	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  01563	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 857  : 
; 858  : 	return pm.acc;

  0156a	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 859  : }

  01570	8b e5		 mov	 esp, ebp
  01572	5d		 pop	 ebp
  01573	c2 04 00	 ret	 4
?at@CSCI_List@@QAEFF@Z ENDP				; CSCI_List::at
_TEXT	ENDS
PUBLIC	?at@CSCI_Array@@QAEFF@Z				; CSCI_Array::at
_TEXT	SEGMENT
_nX$ = 8
_this$ = -8
_saveObject$ = -4
?at@CSCI_Array@@QAEFF@Z PROC NEAR			; CSCI_Array::at

; 862  : {

  01576	55		 push	 ebp
  01577	8b ec		 mov	 ebp, esp
  01579	83 ec 08	 sub	 esp, 8
  0157c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 863  : 	SetObject( handle )

  0157f	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01585	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01589	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0158c	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0158f	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 864  : 
; 865  : 	//	push the selector, # of Args, ptr to arg list
; 866  : 	pmPushMany( s_at, 1, &nX );

  01596	8d 45 08	 lea	 eax, DWORD PTR _nX$[ebp]
  01599	50		 push	 eax
  0159a	6a 01		 push	 1
  0159c	6a 4b		 push	 75			; 0000004bH
  0159e	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  015a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 867  : 
; 868  : 	//	call the method
; 869  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 870  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  015a6	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  015ac	51		 push	 ecx
  015ad	6a 06		 push	 6
  015af	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  015b2	33 c0		 xor	 eax, eax
  015b4	66 8b 02	 mov	 ax, WORD PTR [edx]
  015b7	50		 push	 eax
  015b8	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  015bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 871  : 
; 872  : 	pm.object = saveObject;

  015c0	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  015c4	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 873  : 
; 874  : 	return pm.acc;

  015cb	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 875  : }

  015d1	8b e5		 mov	 esp, ebp
  015d3	5d		 pop	 ebp
  015d4	c2 04 00	 ret	 4
?at@CSCI_Array@@QAEFF@Z ENDP				; CSCI_Array::at
_TEXT	ENDS
PUBLIC	?controlOff@CSCI_Game@@QAEXXZ			; CSCI_Game::controlOff
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?controlOff@CSCI_Game@@QAEXXZ PROC NEAR			; CSCI_Game::controlOff

; 878  : {

  015d7	55		 push	 ebp
  015d8	8b ec		 mov	 ebp, esp
  015da	83 ec 08	 sub	 esp, 8
  015dd	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 	SetObject( handle )

  015e0	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  015e6	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  015ea	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  015ed	66 8b 11	 mov	 dx, WORD PTR [ecx]
  015f0	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 880  : 
; 881  : 	//	push the selector, # of Args, ptr to arg list
; 882  : 	pmPushMany( s_controlOff, 0, NULL);

  015f7	6a 00		 push	 0
  015f9	6a 00		 push	 0
  015fb	68 77 02 00 00	 push	 631			; 00000277H
  01600	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01605	83 c4 0c	 add	 esp, 12			; 0000000cH

; 883  : 
; 884  : 	//	call the method
; 885  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 886  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  01608	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  0160d	50		 push	 eax
  0160e	6a 04		 push	 4
  01610	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01613	33 d2		 xor	 edx, edx
  01615	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01618	52		 push	 edx
  01619	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0161e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 887  : 
; 888  : 	RestoreObject ()

  01621	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01625	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 889  : }

  0162b	8b e5		 mov	 esp, ebp
  0162d	5d		 pop	 ebp
  0162e	c3		 ret	 0
?controlOff@CSCI_Game@@QAEXXZ ENDP			; CSCI_Game::controlOff
_TEXT	ENDS
PUBLIC	?controlOn@CSCI_Game@@QAEXXZ			; CSCI_Game::controlOn
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?controlOn@CSCI_Game@@QAEXXZ PROC NEAR			; CSCI_Game::controlOn

; 892  : {

  0162f	55		 push	 ebp
  01630	8b ec		 mov	 ebp, esp
  01632	83 ec 08	 sub	 esp, 8
  01635	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 893  : 	SetObject( handle )

  01638	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0163e	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01642	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01645	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01648	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 894  : 
; 895  : 	//	push the selector, # of Args, ptr to arg list
; 896  : 	pmPushMany( s_controlOn, 0, NULL);

  0164f	6a 00		 push	 0
  01651	6a 00		 push	 0
  01653	68 78 02 00 00	 push	 632			; 00000278H
  01658	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0165d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 897  : 
; 898  : 	//	call the method
; 899  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 900  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  01660	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01665	50		 push	 eax
  01666	6a 04		 push	 4
  01668	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0166b	33 d2		 xor	 edx, edx
  0166d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01670	52		 push	 edx
  01671	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01676	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  : 
; 902  : 	RestoreObject ()

  01679	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  0167d	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 903  : }

  01683	8b e5		 mov	 esp, ebp
  01685	5d		 pop	 ebp
  01686	c3		 ret	 0
?controlOn@CSCI_Game@@QAEXXZ ENDP			; CSCI_Game::controlOn
_TEXT	ENDS
PUBLIC	?handsOff@CSCI_Game@@QAEXXZ			; CSCI_Game::handsOff
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?handsOff@CSCI_Game@@QAEXXZ PROC NEAR			; CSCI_Game::handsOff

; 906  : {

  01687	55		 push	 ebp
  01688	8b ec		 mov	 ebp, esp
  0168a	83 ec 08	 sub	 esp, 8
  0168d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 907  : 	SetObject( handle )

  01690	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01696	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0169a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0169d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  016a0	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 908  : 
; 909  : 	//	push the selector, # of Args, ptr to arg list
; 910  : 	pmPushMany( s_handsOff, 0, NULL);

  016a7	6a 00		 push	 0
  016a9	6a 00		 push	 0
  016ab	68 4e 02 00 00	 push	 590			; 0000024eH
  016b0	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  016b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 911  : 
; 912  : 	//	call the method
; 913  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 914  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  016b8	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  016bd	50		 push	 eax
  016be	6a 04		 push	 4
  016c0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  016c3	33 d2		 xor	 edx, edx
  016c5	66 8b 11	 mov	 dx, WORD PTR [ecx]
  016c8	52		 push	 edx
  016c9	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  016ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 915  : 
; 916  : 	RestoreObject ()

  016d1	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  016d5	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 917  : }

  016db	8b e5		 mov	 esp, ebp
  016dd	5d		 pop	 ebp
  016de	c3		 ret	 0
?handsOff@CSCI_Game@@QAEXXZ ENDP			; CSCI_Game::handsOff
_TEXT	ENDS
PUBLIC	?handsOn@CSCI_Game@@QAEXXZ			; CSCI_Game::handsOn
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?handsOn@CSCI_Game@@QAEXXZ PROC NEAR			; CSCI_Game::handsOn

; 920  : {

  016df	55		 push	 ebp
  016e0	8b ec		 mov	 ebp, esp
  016e2	83 ec 08	 sub	 esp, 8
  016e5	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 921  : 	SetObject( handle )

  016e8	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  016ee	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  016f2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  016f5	66 8b 11	 mov	 dx, WORD PTR [ecx]
  016f8	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 922  : 
; 923  : 	//	push the selector, # of Args, ptr to arg list
; 924  : 	pmPushMany( s_handsOn, 0, NULL);

  016ff	6a 00		 push	 0
  01701	6a 00		 push	 0
  01703	68 76 02 00 00	 push	 630			; 00000276H
  01708	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0170d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 925  : 
; 926  : 	//	call the method
; 927  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 928  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  01710	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01715	50		 push	 eax
  01716	6a 04		 push	 4
  01718	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0171b	33 d2		 xor	 edx, edx
  0171d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01720	52		 push	 edx
  01721	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01726	83 c4 0c	 add	 esp, 12			; 0000000cH

; 929  : 
; 930  : 	RestoreObject ()

  01729	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  0172d	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 931  : }

  01733	8b e5		 mov	 esp, ebp
  01735	5d		 pop	 ebp
  01736	c3		 ret	 0
?handsOn@CSCI_Game@@QAEXXZ ENDP				; CSCI_Game::handsOn
_TEXT	ENDS
PUBLIC	?getShopItemImage@CSCI_GameServer@@QAEFFFF@Z	; CSCI_GameServer::getShopItemImage
_TEXT	SEGMENT
_nIcon$ = 8
_nColorStart$ = 12
_nColor$ = 16
_this$ = -16
_nValues$ = -12
_saveObject$ = -4
?getShopItemImage@CSCI_GameServer@@QAEFFFF@Z PROC NEAR	; CSCI_GameServer::getShopItemImage

; 934  : {

  01737	55		 push	 ebp
  01738	8b ec		 mov	 ebp, esp
  0173a	83 ec 10	 sub	 esp, 16			; 00000010H
  0173d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 935  : 	Property nValues[3];
; 936  : 
; 937  : 	nValues[0] = nIcon;

  01740	66 8b 45 08	 mov	 ax, WORD PTR _nIcon$[ebp]
  01744	66 89 45 f4	 mov	 WORD PTR _nValues$[ebp], ax

; 938  : 	nValues[1] = nColorStart;

  01748	66 8b 4d 0c	 mov	 cx, WORD PTR _nColorStart$[ebp]
  0174c	66 89 4d f6	 mov	 WORD PTR _nValues$[ebp+2], cx

; 939  : 	nValues[2] = nColor;

  01750	66 8b 55 10	 mov	 dx, WORD PTR _nColor$[ebp]
  01754	66 89 55 f8	 mov	 WORD PTR _nValues$[ebp+4], dx

; 940  : 
; 941  : 	SetObject( handle )

  01758	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0175e	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01762	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01765	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01768	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 942  : 
; 943  : 	//	push the selector, # of Args, ptr to arg list
; 944  : 	pmPushMany( s_getShopItemImage, 3, nValues);

  0176f	8d 45 f4	 lea	 eax, DWORD PTR _nValues$[ebp]
  01772	50		 push	 eax
  01773	6a 03		 push	 3
  01775	68 2f 06 00 00	 push	 1583			; 0000062fH
  0177a	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0177f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 945  : 
; 946  : 	//	call the method
; 947  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 948  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 3 ) * sizeof ( Property ), pm.StackPtr);

  01782	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  01788	51		 push	 ecx
  01789	6a 0a		 push	 10			; 0000000aH
  0178b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0178e	33 c0		 xor	 eax, eax
  01790	66 8b 02	 mov	 ax, WORD PTR [edx]
  01793	50		 push	 eax
  01794	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01799	83 c4 0c	 add	 esp, 12			; 0000000cH

; 949  : 
; 950  : 	RestoreObject ()

  0179c	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  017a0	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 951  : 
; 952  : 	return pm.acc;

  017a7	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 953  : }

  017ad	8b e5		 mov	 esp, ebp
  017af	5d		 pop	 ebp
  017b0	c2 0c 00	 ret	 12			; 0000000cH
?getShopItemImage@CSCI_GameServer@@QAEFFFF@Z ENDP	; CSCI_GameServer::getShopItemImage
_TEXT	ENDS
PUBLIC	?updatePingText@CSCI_GameServer@@QAEXXZ		; CSCI_GameServer::updatePingText
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?updatePingText@CSCI_GameServer@@QAEXXZ PROC NEAR	; CSCI_GameServer::updatePingText

; 956  : {

  017b3	55		 push	 ebp
  017b4	8b ec		 mov	 ebp, esp
  017b6	83 ec 08	 sub	 esp, 8
  017b9	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 957  : 	SetObject( handle )

  017bc	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  017c2	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  017c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  017c9	66 8b 11	 mov	 dx, WORD PTR [ecx]
  017cc	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 958  : 
; 959  : 	//	push the selector, # of Args, ptr to arg list
; 960  : 	pmPushMany( s_updatePingText, 0, NULL);

  017d3	6a 00		 push	 0
  017d5	6a 00		 push	 0
  017d7	68 91 04 00 00	 push	 1169			; 00000491H
  017dc	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  017e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 961  : 
; 962  : 	//	call the method
; 963  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 964  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  017e4	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  017e9	50		 push	 eax
  017ea	6a 04		 push	 4
  017ec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  017ef	33 d2		 xor	 edx, edx
  017f1	66 8b 11	 mov	 dx, WORD PTR [ecx]
  017f4	52		 push	 edx
  017f5	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  017fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 965  : 
; 966  : 	RestoreObject ()

  017fd	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01801	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 967  : }

  01807	8b e5		 mov	 esp, ebp
  01809	5d		 pop	 ebp
  0180a	c3		 ret	 0
?updatePingText@CSCI_GameServer@@QAEXXZ ENDP		; CSCI_GameServer::updatePingText
_TEXT	ENDS
PUBLIC	?leaveGroup@CSCI_GameServer@@QAEXF@Z		; CSCI_GameServer::leaveGroup
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?leaveGroup@CSCI_GameServer@@QAEXF@Z PROC NEAR		; CSCI_GameServer::leaveGroup

; 970  : {

  0180b	55		 push	 ebp
  0180c	8b ec		 mov	 ebp, esp
  0180e	83 ec 08	 sub	 esp, 8
  01811	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 971  : 	SetObject( handle )

  01814	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0181a	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0181e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01821	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01824	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 972  : 
; 973  : 	//	push the selector, # of Args, ptr to arg list
; 974  : 	pmPushMany( s_leaveGroup, 1, &nValue);

  0182b	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  0182e	50		 push	 eax
  0182f	6a 01		 push	 1
  01831	68 94 04 00 00	 push	 1172			; 00000494H
  01836	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0183b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 975  : 
; 976  : 	//	call the method
; 977  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 978  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  0183e	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  01844	51		 push	 ecx
  01845	6a 06		 push	 6
  01847	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0184a	33 c0		 xor	 eax, eax
  0184c	66 8b 02	 mov	 ax, WORD PTR [edx]
  0184f	50		 push	 eax
  01850	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01855	83 c4 0c	 add	 esp, 12			; 0000000cH

; 979  : 
; 980  : 	RestoreObject ()

  01858	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  0185c	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 981  : }

  01863	8b e5		 mov	 esp, ebp
  01865	5d		 pop	 ebp
  01866	c2 04 00	 ret	 4
?leaveGroup@CSCI_GameServer@@QAEXF@Z ENDP		; CSCI_GameServer::leaveGroup
_TEXT	ENDS
PUBLIC	?kickGroup@CSCI_GameServer@@QAEXF@Z		; CSCI_GameServer::kickGroup
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?kickGroup@CSCI_GameServer@@QAEXF@Z PROC NEAR		; CSCI_GameServer::kickGroup

; 984  : {

  01869	55		 push	 ebp
  0186a	8b ec		 mov	 ebp, esp
  0186c	83 ec 08	 sub	 esp, 8
  0186f	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 985  : 	SetObject( handle )

  01872	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01878	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0187c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0187f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01882	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 986  : 
; 987  : 	//	push the selector, # of Args, ptr to arg list
; 988  : 	pmPushMany( s_kickGroup, 1, &nValue);

  01889	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  0188c	50		 push	 eax
  0188d	6a 01		 push	 1
  0188f	68 95 04 00 00	 push	 1173			; 00000495H
  01894	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01899	83 c4 0c	 add	 esp, 12			; 0000000cH

; 989  : 
; 990  : 	//	call the method
; 991  : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 992  : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  0189c	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  018a2	51		 push	 ecx
  018a3	6a 06		 push	 6
  018a5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  018a8	33 c0		 xor	 eax, eax
  018aa	66 8b 02	 mov	 ax, WORD PTR [edx]
  018ad	50		 push	 eax
  018ae	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  018b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 993  : 
; 994  : 	RestoreObject ()

  018b6	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  018ba	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 995  : }

  018c1	8b e5		 mov	 esp, ebp
  018c3	5d		 pop	 ebp
  018c4	c2 04 00	 ret	 4
?kickGroup@CSCI_GameServer@@QAEXF@Z ENDP		; CSCI_GameServer::kickGroup
_TEXT	ENDS
PUBLIC	?getQuestList@CSCI_GameServer@@QAEXXZ		; CSCI_GameServer::getQuestList
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?getQuestList@CSCI_GameServer@@QAEXXZ PROC NEAR		; CSCI_GameServer::getQuestList

; 998  : {

  018c7	55		 push	 ebp
  018c8	8b ec		 mov	 ebp, esp
  018ca	83 ec 08	 sub	 esp, 8
  018cd	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 999  : 	SetObject( handle )

  018d0	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  018d6	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  018da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  018dd	66 8b 11	 mov	 dx, WORD PTR [ecx]
  018e0	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1000 : 
; 1001 : 	//	push the selector, # of Args, ptr to arg list
; 1002 : 	pmPushMany( s_getQuestList, 0, NULL);

  018e7	6a 00		 push	 0
  018e9	6a 00		 push	 0
  018eb	68 92 04 00 00	 push	 1170			; 00000492H
  018f0	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  018f5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1003 : 
; 1004 : 	//	call the method
; 1005 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1006 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  018f8	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  018fd	50		 push	 eax
  018fe	6a 04		 push	 4
  01900	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01903	33 d2		 xor	 edx, edx
  01905	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01908	52		 push	 edx
  01909	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  0190e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1007 : 
; 1008 : 	RestoreObject ()

  01911	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01915	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 1009 : }

  0191b	8b e5		 mov	 esp, ebp
  0191d	5d		 pop	 ebp
  0191e	c3		 ret	 0
?getQuestList@CSCI_GameServer@@QAEXXZ ENDP		; CSCI_GameServer::getQuestList
_TEXT	ENDS
PUBLIC	?restartGame@CSCI_GameServer@@QAEXXZ		; CSCI_GameServer::restartGame
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?restartGame@CSCI_GameServer@@QAEXXZ PROC NEAR		; CSCI_GameServer::restartGame

; 1012 : {

  0191f	55		 push	 ebp
  01920	8b ec		 mov	 ebp, esp
  01922	83 ec 08	 sub	 esp, 8
  01925	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1013 : 	SetObject( handle )

  01928	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  0192e	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01932	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01935	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01938	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1014 : 
; 1015 : 	//	push the selector, # of Args, ptr to arg list
; 1016 : 	pmPushMany( s_restartGame, 0, NULL);

  0193f	6a 00		 push	 0
  01941	6a 00		 push	 0
  01943	68 2c 06 00 00	 push	 1580			; 0000062cH
  01948	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  0194d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1017 : 
; 1018 : 	//	call the method
; 1019 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1020 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  01950	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01955	50		 push	 eax
  01956	6a 04		 push	 4
  01958	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0195b	33 d2		 xor	 edx, edx
  0195d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01960	52		 push	 edx
  01961	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01966	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1021 : 
; 1022 : 	RestoreObject ()

  01969	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  0196d	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 1023 : }

  01973	8b e5		 mov	 esp, ebp
  01975	5d		 pop	 ebp
  01976	c3		 ret	 0
?restartGame@CSCI_GameServer@@QAEXXZ ENDP		; CSCI_GameServer::restartGame
_TEXT	ENDS
PUBLIC	?getMail@CSCI_GameServer@@QAEXXZ		; CSCI_GameServer::getMail
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?getMail@CSCI_GameServer@@QAEXXZ PROC NEAR		; CSCI_GameServer::getMail

; 1025 : void CSCI_GameServer::getMail() {

  01977	55		 push	 ebp
  01978	8b ec		 mov	 ebp, esp
  0197a	83 ec 08	 sub	 esp, 8
  0197d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1026 : 	SetObject( handle )

  01980	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01986	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  0198a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0198d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01990	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1027 : 
; 1028 : 	//	push the selector, # of Args, ptr to arg list
; 1029 : 	pmPushMany( s_getMail, 0, NULL);

  01997	6a 00		 push	 0
  01999	6a 00		 push	 0
  0199b	68 93 04 00 00	 push	 1171			; 00000493H
  019a0	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  019a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1030 : 
; 1031 : 	//	call the method
; 1032 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1033 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 ) * sizeof ( Property ), pm.StackPtr);

  019a8	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  019ad	50		 push	 eax
  019ae	6a 04		 push	 4
  019b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  019b3	33 d2		 xor	 edx, edx
  019b5	66 8b 11	 mov	 dx, WORD PTR [ecx]
  019b8	52		 push	 edx
  019b9	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  019be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1034 : 
; 1035 : 	RestoreObject ()

  019c1	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  019c5	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 1036 : }

  019cb	8b e5		 mov	 esp, ebp
  019cd	5d		 pop	 ebp
  019ce	c3		 ret	 0
?getMail@CSCI_GameServer@@QAEXXZ ENDP			; CSCI_GameServer::getMail
_TEXT	ENDS
PUBLIC	?getMailMessage@CSCI_GameServer@@QAEXF@Z	; CSCI_GameServer::getMailMessage
_TEXT	SEGMENT
_nMsg$ = 8
_this$ = -8
_saveObject$ = -4
?getMailMessage@CSCI_GameServer@@QAEXF@Z PROC NEAR	; CSCI_GameServer::getMailMessage

; 1038 : void CSCI_GameServer::getMailMessage( short nMsg ) {

  019cf	55		 push	 ebp
  019d0	8b ec		 mov	 ebp, esp
  019d2	83 ec 08	 sub	 esp, 8
  019d5	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1039 : 	SetObject( handle )

  019d8	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  019de	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  019e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  019e5	66 8b 11	 mov	 dx, WORD PTR [ecx]
  019e8	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1040 : 
; 1041 : 	//	push the selector, # of Args, ptr to arg list
; 1042 : 	pmPushMany( s_getMailMessage, 1, &nMsg);

  019ef	8d 45 08	 lea	 eax, DWORD PTR _nMsg$[ebp]
  019f2	50		 push	 eax
  019f3	6a 01		 push	 1
  019f5	68 95 05 00 00	 push	 1429			; 00000595H
  019fa	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  019ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1043 : 
; 1044 : 	//	call the method
; 1045 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1046 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  01a02	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  01a08	51		 push	 ecx
  01a09	6a 06		 push	 6
  01a0b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01a0e	33 c0		 xor	 eax, eax
  01a10	66 8b 02	 mov	 ax, WORD PTR [edx]
  01a13	50		 push	 eax
  01a14	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01a19	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1047 : 
; 1048 : 	RestoreObject ()

  01a1c	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  01a20	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 1049 : }

  01a27	8b e5		 mov	 esp, ebp
  01a29	5d		 pop	 ebp
  01a2a	c2 04 00	 ret	 4
?getMailMessage@CSCI_GameServer@@QAEXF@Z ENDP		; CSCI_GameServer::getMailMessage
_TEXT	ENDS
PUBLIC	?eraseMailMessage@CSCI_GameServer@@QAEXF@Z	; CSCI_GameServer::eraseMailMessage
_TEXT	SEGMENT
_nMsg$ = 8
_this$ = -8
_saveObject$ = -4
?eraseMailMessage@CSCI_GameServer@@QAEXF@Z PROC NEAR	; CSCI_GameServer::eraseMailMessage

; 1051 : void CSCI_GameServer::eraseMailMessage( short nMsg ) {

  01a2d	55		 push	 ebp
  01a2e	8b ec		 mov	 ebp, esp
  01a30	83 ec 08	 sub	 esp, 8
  01a33	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1052 : 	SetObject( handle )

  01a36	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01a3c	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01a40	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01a43	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01a46	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1053 : 
; 1054 : 	//	push the selector, # of Args, ptr to arg list
; 1055 : 	pmPushMany( s_eraseMailMessage, 1, &nMsg);

  01a4d	8d 45 08	 lea	 eax, DWORD PTR _nMsg$[ebp]
  01a50	50		 push	 eax
  01a51	6a 01		 push	 1
  01a53	68 9d 05 00 00	 push	 1437			; 0000059dH
  01a58	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01a5d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 
; 1057 : 	//	call the method
; 1058 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1059 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  01a60	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  01a66	51		 push	 ecx
  01a67	6a 06		 push	 6
  01a69	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01a6c	33 c0		 xor	 eax, eax
  01a6e	66 8b 02	 mov	 ax, WORD PTR [edx]
  01a71	50		 push	 eax
  01a72	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01a77	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1060 : 
; 1061 : 	RestoreObject ()

  01a7a	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  01a7e	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 1062 : }

  01a85	8b e5		 mov	 esp, ebp
  01a87	5d		 pop	 ebp
  01a88	c2 04 00	 ret	 4
?eraseMailMessage@CSCI_GameServer@@QAEXF@Z ENDP		; CSCI_GameServer::eraseMailMessage
_TEXT	ENDS
PUBLIC	?sendMail@CSCI_GameServer@@QAEXVTextID@@00@Z	; CSCI_GameServer::sendMail
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
_TEXT	SEGMENT
_sTo$ = 8
_sSubject$ = 12
_sMsg$ = 16
_this$ = -16
_saveObject$ = -4
_nValue$ = -12
?sendMail@CSCI_GameServer@@QAEXVTextID@@00@Z PROC NEAR	; CSCI_GameServer::sendMail

; 1064 : void CSCI_GameServer::sendMail( TextID sTo, TextID sSubject, TextID sMsg ) {

  01a8b	55		 push	 ebp
  01a8c	8b ec		 mov	 ebp, esp
  01a8e	83 ec 10	 sub	 esp, 16			; 00000010H
  01a91	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1065 : 	SetObject( handle )

  01a94	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01a9a	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01a9e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01aa1	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01aa4	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1066 : 
; 1067 : 	short nValue[3];
; 1068 : 
; 1069 : 	nValue[0] = (SOL_Handle) sTo;

  01aab	8d 4d 08	 lea	 ecx, DWORD PTR _sTo$[ebp]
  01aae	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01ab3	66 89 45 f4	 mov	 WORD PTR _nValue$[ebp], ax

; 1070 : 	nValue[1] = (SOL_Handle) sSubject;

  01ab7	8d 4d 0c	 lea	 ecx, DWORD PTR _sSubject$[ebp]
  01aba	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01abf	66 89 45 f6	 mov	 WORD PTR _nValue$[ebp+2], ax

; 1071 : 	nValue[2] = (SOL_Handle) sMsg;

  01ac3	8d 4d 10	 lea	 ecx, DWORD PTR _sMsg$[ebp]
  01ac6	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01acb	66 89 45 f8	 mov	 WORD PTR _nValue$[ebp+4], ax

; 1072 : 
; 1073 : 	//	push the selector, # of Args, ptr to arg list
; 1074 : 	pmPushMany( s_sendMail, 3, nValue);

  01acf	8d 45 f4	 lea	 eax, DWORD PTR _nValue$[ebp]
  01ad2	50		 push	 eax
  01ad3	6a 03		 push	 3
  01ad5	68 98 05 00 00	 push	 1432			; 00000598H
  01ada	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01adf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1075 : 
; 1076 : 	//	call the method
; 1077 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1078 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 3 ) * sizeof ( Property ), pm.StackPtr);

  01ae2	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  01ae8	51		 push	 ecx
  01ae9	6a 0a		 push	 10			; 0000000aH
  01aeb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  01aee	33 c0		 xor	 eax, eax
  01af0	66 8b 02	 mov	 ax, WORD PTR [edx]
  01af3	50		 push	 eax
  01af4	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01af9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1079 : 
; 1080 : 	RestoreObject ()

  01afc	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  01b00	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 1081 : }

  01b07	8b e5		 mov	 esp, ebp
  01b09	5d		 pop	 ebp
  01b0a	c2 0c 00	 ret	 12			; 0000000cH
?sendMail@CSCI_GameServer@@QAEXVTextID@@00@Z ENDP	; CSCI_GameServer::sendMail
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
PUBLIC	?cue@CSCI_Script@@QAEXXZ			; CSCI_Script::cue
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?cue@CSCI_Script@@QAEXXZ PROC NEAR			; CSCI_Script::cue

; 1083 : void CSCI_Script::cue() {

  01b0d	55		 push	 ebp
  01b0e	8b ec		 mov	 ebp, esp
  01b10	83 ec 08	 sub	 esp, 8
  01b13	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1084 : 	SetObject( handle )

  01b16	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01b1c	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01b20	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01b23	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01b26	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1085 : 
; 1086 : 	//	push the selector, # of Args, ptr to arg list
; 1087 : 	pmPushMany( s_cue, 0, NULL);

  01b2d	6a 00		 push	 0
  01b2f	6a 00		 push	 0
  01b31	68 c7 00 00 00	 push	 199			; 000000c7H
  01b36	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01b3b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1088 : 
; 1089 : 	//	call the method
; 1090 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1091 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 0 ) * sizeof ( Property ), pm.StackPtr);

  01b3e	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01b43	50		 push	 eax
  01b44	6a 04		 push	 4
  01b46	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01b49	33 d2		 xor	 edx, edx
  01b4b	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01b4e	52		 push	 edx
  01b4f	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01b54	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1092 : 
; 1093 : 	RestoreObject ()

  01b57	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01b5b	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 1094 : }

  01b61	8b e5		 mov	 esp, ebp
  01b63	5d		 pop	 ebp
  01b64	c3		 ret	 0
?cue@CSCI_Script@@QAEXXZ ENDP				; CSCI_Script::cue
_TEXT	ENDS
PUBLIC	?dispose@CSCI_Object@@QAEXXZ			; CSCI_Object::dispose
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?dispose@CSCI_Object@@QAEXXZ PROC NEAR			; CSCI_Object::dispose

; 1096 : void CSCI_Object::dispose() {

  01b65	55		 push	 ebp
  01b66	8b ec		 mov	 ebp, esp
  01b68	83 ec 08	 sub	 esp, 8
  01b6b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1097 : 	SetObject( handle )

  01b6e	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01b74	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01b78	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01b7b	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01b7e	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1098 : 
; 1099 : 	//	push the selector, # of Args, ptr to arg list
; 1100 : 	pmPushMany( s_dispose, 0, NULL);

  01b85	6a 00		 push	 0
  01b87	6a 00		 push	 0
  01b89	68 95 00 00 00	 push	 149			; 00000095H
  01b8e	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01b93	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1101 : 
; 1102 : 	//	call the method
; 1103 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1104 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 0 ) * sizeof ( Property ), pm.StackPtr);

  01b96	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01b9b	50		 push	 eax
  01b9c	6a 04		 push	 4
  01b9e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01ba1	33 d2		 xor	 edx, edx
  01ba3	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01ba6	52		 push	 edx
  01ba7	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01bac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1105 : 
; 1106 : 	RestoreObject ()

  01baf	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01bb3	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 1107 : }

  01bb9	8b e5		 mov	 esp, ebp
  01bbb	5d		 pop	 ebp
  01bbc	c3		 ret	 0
?dispose@CSCI_Object@@QAEXXZ ENDP			; CSCI_Object::dispose
_TEXT	ENDS
PUBLIC	?cast@CSCI_Spell@@QAEXXZ			; CSCI_Spell::cast
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?cast@CSCI_Spell@@QAEXXZ PROC NEAR			; CSCI_Spell::cast

; 1110 : {

  01bbd	55		 push	 ebp
  01bbe	8b ec		 mov	 ebp, esp
  01bc0	83 ec 08	 sub	 esp, 8
  01bc3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1111 : 	SetObject( handle )

  01bc6	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01bcc	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01bd0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01bd3	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01bd6	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1112 : 
; 1113 : 	//	push the selector, # of Args, ptr to arg list
; 1114 : 	pmPushMany( s_cast, 0, NULL);

  01bdd	6a 00		 push	 0
  01bdf	6a 00		 push	 0
  01be1	68 28 05 00 00	 push	 1320			; 00000528H
  01be6	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01beb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1115 : 
; 1116 : 	//	call the method
; 1117 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1118 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 0 ) * sizeof ( Property ), pm.StackPtr);

  01bee	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01bf3	50		 push	 eax
  01bf4	6a 04		 push	 4
  01bf6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01bf9	33 d2		 xor	 edx, edx
  01bfb	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01bfe	52		 push	 edx
  01bff	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01c04	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1119 : 
; 1120 : 	RestoreObject ()

  01c07	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01c0b	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 1121 : }

  01c11	8b e5		 mov	 esp, ebp
  01c13	5d		 pop	 ebp
  01c14	c3		 ret	 0
?cast@CSCI_Spell@@QAEXXZ ENDP				; CSCI_Spell::cast
_TEXT	ENDS
PUBLIC	?canCast@CSCI_Spell@@QAEFXZ			; CSCI_Spell::canCast
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?canCast@CSCI_Spell@@QAEFXZ PROC NEAR			; CSCI_Spell::canCast

; 1124 : {

  01c15	55		 push	 ebp
  01c16	8b ec		 mov	 ebp, esp
  01c18	83 ec 08	 sub	 esp, 8
  01c1b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1125 : 	SetObject( handle )

  01c1e	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01c24	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01c28	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c2b	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01c2e	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1126 : 
; 1127 : 	//	push the selector, # of Args, ptr to arg list
; 1128 : 	pmPushMany( s_canCast, 0, NULL);

  01c35	6a 00		 push	 0
  01c37	6a 00		 push	 0
  01c39	68 31 05 00 00	 push	 1329			; 00000531H
  01c3e	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01c43	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1129 : 
; 1130 : 	//	call the method
; 1131 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1132 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 0 ) * sizeof ( Property ), pm.StackPtr);

  01c46	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01c4b	50		 push	 eax
  01c4c	6a 04		 push	 4
  01c4e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c51	33 d2		 xor	 edx, edx
  01c53	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01c56	52		 push	 edx
  01c57	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01c5c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1133 : 
; 1134 : 	RestoreObject ()

  01c5f	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01c63	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 1135 : 
; 1136 : 	return pm.acc;

  01c69	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+4

; 1137 : }

  01c6f	8b e5		 mov	 esp, ebp
  01c71	5d		 pop	 ebp
  01c72	c3		 ret	 0
?canCast@CSCI_Spell@@QAEFXZ ENDP			; CSCI_Spell::canCast
_TEXT	ENDS
PUBLIC	?release@CSCI_Collection@@QAEXXZ		; CSCI_Collection::release
_TEXT	SEGMENT
_this$ = -8
_saveObject$ = -4
?release@CSCI_Collection@@QAEXXZ PROC NEAR		; CSCI_Collection::release

; 1140 : {

  01c73	55		 push	 ebp
  01c74	8b ec		 mov	 ebp, esp
  01c76	83 ec 08	 sub	 esp, 8
  01c79	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1141 : 	SetObject( handle )

  01c7c	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01c82	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01c86	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c89	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01c8c	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1142 : 
; 1143 : 	//	push the selector, # of Args, ptr to arg list
; 1144 : 	pmPushMany( s_release, 0, NULL);

  01c93	6a 00		 push	 0
  01c95	6a 00		 push	 0
  01c97	68 a6 00 00 00	 push	 166			; 000000a6H
  01c9c	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01ca1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1145 : 
; 1146 : 	//	call the method
; 1147 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1148 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 0 ) * sizeof ( Property ), pm.StackPtr);

  01ca4	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?pm@@3VPMachine@@A+12
  01ca9	50		 push	 eax
  01caa	6a 04		 push	 4
  01cac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01caf	33 d2		 xor	 edx, edx
  01cb1	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01cb4	52		 push	 edx
  01cb5	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01cba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1149 : 
; 1150 : 	RestoreObject ()

  01cbd	66 8b 45 fc	 mov	 ax, WORD PTR _saveObject$[ebp]
  01cc1	66 a3 02 00 00
	00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, ax

; 1151 : }

  01cc7	8b e5		 mov	 esp, ebp
  01cc9	5d		 pop	 ebp
  01cca	c3		 ret	 0
?release@CSCI_Collection@@QAEXXZ ENDP			; CSCI_Collection::release
_TEXT	ENDS
PUBLIC	?addToEnd@CSCI_List@@QAEXF@Z			; CSCI_List::addToEnd
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -8
_saveObject$ = -4
?addToEnd@CSCI_List@@QAEXF@Z PROC NEAR			; CSCI_List::addToEnd

; 1154 : {

  01ccb	55		 push	 ebp
  01ccc	8b ec		 mov	 ebp, esp
  01cce	83 ec 08	 sub	 esp, 8
  01cd1	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1155 : 	SetObject( handle )

  01cd4	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?pm@@3VPMachine@@A+2
  01cda	66 89 45 fc	 mov	 WORD PTR _saveObject$[ebp], ax
  01cde	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01ce1	66 8b 11	 mov	 dx, WORD PTR [ecx]
  01ce4	66 89 15 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, dx

; 1156 : 
; 1157 : 	//	push the selector, # of Args, ptr to arg list
; 1158 : 	pmPushMany( s_addToEnd, 1, &nValue);

  01ceb	8d 45 08	 lea	 eax, DWORD PTR _nValue$[ebp]
  01cee	50		 push	 eax
  01cef	6a 01		 push	 1
  01cf1	68 ab 00 00 00	 push	 171			; 000000abH
  01cf6	e8 00 00 00 00	 call	 ?pmPushMany@@YAXGIPAF@Z	; pmPushMany
  01cfb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1159 : 
; 1160 : 	//	call the method
; 1161 : 	// MUST be cast as short or else CPP converts them signed (Bryan Waters)
; 1162 : 	pmQuickMessage( (unsigned short) handle, (unsigned short) ( 2 + 1 ) * sizeof ( Property ), pm.StackPtr);

  01cfe	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pm@@3VPMachine@@A+12
  01d04	51		 push	 ecx
  01d05	6a 06		 push	 6
  01d07	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01d0a	33 c0		 xor	 eax, eax
  01d0c	66 8b 02	 mov	 ax, WORD PTR [edx]
  01d0f	50		 push	 eax
  01d10	e8 00 00 00 00	 call	 ?pmQuickMessage@@YAXIIPAX@Z ; pmQuickMessage
  01d15	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1163 : 
; 1164 : 	RestoreObject ()

  01d18	66 8b 4d fc	 mov	 cx, WORD PTR _saveObject$[ebp]
  01d1c	66 89 0d 02 00
	00 00		 mov	 WORD PTR ?pm@@3VPMachine@@A+2, cx

; 1165 : }

  01d23	8b e5		 mov	 esp, ebp
  01d25	5d		 pop	 ebp
  01d26	c2 04 00	 ret	 4
?addToEnd@CSCI_List@@QAEXF@Z ENDP			; CSCI_List::addToEnd
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@ABVMemID@@@Z		; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ObjectID@@QAE@ABV0@@Z PROC NEAR			; ObjectID::ObjectID, COMDAT

; 229  : 	ObjectID(const ObjectID& id) : FakeObjectID((MemID&) id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@ABVMemID@@@Z ; FakeObjectID::FakeObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ObjectID@@QAE@ABV0@@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0FakeObjectID@@QAE@ABVMemID@@@Z PROC NEAR		; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@ABVMemID@@@Z ENDP			; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0StringID@@QAE@ABVMemID@@@Z PROC NEAR			; StringID::StringID, COMDAT

; 58   : 	StringID ( const MemID &id ) : MemID ( id ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0StringID@@QAE@ABVMemID@@@Z ENDP			; StringID::StringID
_TEXT	ENDS
PUBLIC	??0CSCI_WorldObjectBase@@QAE@G@Z		; CSCI_WorldObjectBase::CSCI_WorldObjectBase
;	COMDAT ??0CSCI_BCarryable@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BCarryable@@QAE@G@Z PROC NEAR			; CSCI_BCarryable::CSCI_BCarryable, COMDAT

; 3880 : 	CSCI_BCarryable(SOL_Handle h) : CSCI_WorldObjectBase(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_WorldObjectBase@@QAE@G@Z ; CSCI_WorldObjectBase::CSCI_WorldObjectBase
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BCarryable@@QAE@G@Z ENDP			; CSCI_BCarryable::CSCI_BCarryable
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@G@Z				; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_WorldObjectBase@@QAE@G@Z PROC NEAR		; CSCI_WorldObjectBase::CSCI_WorldObjectBase, COMDAT

; 3827 : 	CSCI_WorldObjectBase(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_WorldObjectBase@@QAE@G@Z ENDP			; CSCI_WorldObjectBase::CSCI_WorldObjectBase
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Object@@QAE@G@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 13   : 	CSCI_Object(SOL_Handle h) : ObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@G@Z ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
;	COMDAT ??0CSCI_BContainer@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BContainer@@QAE@G@Z PROC NEAR			; CSCI_BContainer::CSCI_BContainer, COMDAT

; 3929 : 	CSCI_BContainer(SOL_Handle h) : CSCI_WorldObjectBase(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_WorldObjectBase@@QAE@G@Z ; CSCI_WorldObjectBase::CSCI_WorldObjectBase
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BContainer@@QAE@G@Z ENDP			; CSCI_BContainer::CSCI_BContainer
_TEXT	ENDS
;	COMDAT ??0CSCI_BCharacter@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BCharacter@@QAE@G@Z PROC NEAR			; CSCI_BCharacter::CSCI_BCharacter, COMDAT

; 4037 : 	CSCI_BCharacter(SOL_Handle h) : CSCI_WorldObjectBase(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_WorldObjectBase@@QAE@G@Z ; CSCI_WorldObjectBase::CSCI_WorldObjectBase
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BCharacter@@QAE@G@Z ENDP			; CSCI_BCharacter::CSCI_BCharacter
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BWearable@@QAE@G@Z PROC NEAR			; CSCI_BWearable::CSCI_BWearable, COMDAT

; 4171 : 	CSCI_BWearable(SOL_Handle h) : CSCI_WorldObjectBase(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_WorldObjectBase@@QAE@G@Z ; CSCI_WorldObjectBase::CSCI_WorldObjectBase
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BWearable@@QAE@G@Z ENDP				; CSCI_BWearable::CSCI_BWearable
_TEXT	ENDS
;	COMDAT ??0CSCI_BWeapon@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BWeapon@@QAE@G@Z PROC NEAR			; CSCI_BWeapon::CSCI_BWeapon, COMDAT

; 4215 : 	CSCI_BWeapon(SOL_Handle h) : CSCI_BWearable(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_BWearable@@QAE@G@Z ; CSCI_BWearable::CSCI_BWearable
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BWeapon@@QAE@G@Z ENDP				; CSCI_BWeapon::CSCI_BWeapon
_TEXT	ENDS
;	COMDAT ??0CSCI_BNPC@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BNPC@@QAE@G@Z PROC NEAR				; CSCI_BNPC::CSCI_BNPC, COMDAT

; 4299 : 	CSCI_BNPC(SOL_Handle h) : CSCI_WorldObjectBase(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_WorldObjectBase@@QAE@G@Z ; CSCI_WorldObjectBase::CSCI_WorldObjectBase
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BNPC@@QAE@G@Z ENDP				; CSCI_BNPC::CSCI_BNPC
_TEXT	ENDS
;	COMDAT ??0CSCI_BHead@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BHead@@QAE@G@Z PROC NEAR			; CSCI_BHead::CSCI_BHead, COMDAT

; 4371 : 	CSCI_BHead(SOL_Handle h) : CSCI_BWearable(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_BWearable@@QAE@G@Z ; CSCI_BWearable::CSCI_BWearable
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BHead@@QAE@G@Z ENDP				; CSCI_BHead::CSCI_BHead
_TEXT	ENDS
END

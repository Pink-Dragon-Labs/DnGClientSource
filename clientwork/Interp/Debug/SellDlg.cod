	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\SellDlg.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@NAAD@Magellan?5MSWHEEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FPAF@MouseZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CLBL@MSWHEEL_ROLLMSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DLPD@MSH_WHEELSUPPORT_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODOJ@MSH_SCROLL_LINES_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EDBF@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FGFK@CLSID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DMDD@?5?9?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOFL@Interface?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FNJL@?$CICLSID?$DP?$DP?$DP?$CJ?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DLIL@?5?9?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@NKPL@Unknown?5Error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@HOAP@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@BJHN@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MDHG@?4tlb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLHD@oleaut32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FJNM@UnRegisterTypeLib?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CDEE@DllGetVersion?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FDEG@comctl32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKNA@shell32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@ILEN@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@JLLA@?3Jan?3January?3Feb?3February?3Mar?3Ma@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCCD@true?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELCB@no?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LGKI@yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKHJ@C?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPIO@IDispatch?5error?5?$CD?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NADL@Unknown?5error?50x?$CF0lX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KLJH@invalid?5vector?$DMbool?$DO?5subscript?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MHAC@?$CFp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CFAI@0123456789abcdefABCDEF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KFAL@E?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KMAE@?0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MMAA@missing?5locale?5facet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __tcscmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcscoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextWindow@@YAPAUHWND__@@PAU1@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawState@@YGHPAUHDC__@@PAUHBRUSH__@@P6GH0JIHH@ZJIHHHHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextPtr@CSimpleList@@QBEPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CByteArray@@QBEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CByteArray@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CWordArray@@QBEGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CWordArray@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CDWordArray@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CDWordArray@@QAEAAKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CUIntArray@@QBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CUIntArray@@QAEAAIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ACPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CObArray@@QBEPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CObArray@@QAEAAPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CStringArray@@QBE?AVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CStringArray@@QAEAAVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSimpleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSimpleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMemoryException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemoryException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNotSupportedException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNotSupportedException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCArchiveException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFileException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFileException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFilePath@CFile@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CString@@IBEPAUCStringData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CString@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@CString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YG_NPBDABVCString@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDays@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalHours@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalMinutes@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalSeconds@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwapLeftRight@CRect@@SAXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCResourceException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CResourceException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCUserException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CUserException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPen@@SGPAV1@PAUHPEN__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBrush@@SGPAV1@PAUHBRUSH__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPalette@@SGPAV1@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHmenu@CMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BringWindowToTop@CWnd@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateWindow@CWnd@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CListBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCheckListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCheckListBox@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComboBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemData@CComboBox@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CComboBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEdit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCommonDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCommonDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintSelection@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintRange@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorders@CStatusBar@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRectTracker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmapButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmapButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualGUID@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCOleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1COleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleCurrency@@QAEXW4CurrencyStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4COleDateTime@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTime@@QAEXW4DateTimeStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0COleDateTimeSpan@@QAE@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTimeSpan@@QAEXW4DateTimeSpanStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@COleSafeArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDateTimeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonthCalCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDragListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatusBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemCount@CListCtrl@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListCtrl@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHotKeyCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpinButtonCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSliderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAnimateCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRichEditCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCReBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CReBarCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBoxEx@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIPAddressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2BSTR@@YAPAGPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlTrace2@ATL@@YAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualGUID@ATL@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YAHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReplaceSingleQuote@CComModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@CComBSTR@ATL@@QAE_NPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalClear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlAdvise@ATL@@YGJPAUIUnknown@@0ABU_GUID@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_NextObjectMapEntry@ATL@@YAPAU_ATL_OBJMAP_ENTRY@1@PAU_ATL_MODULE@1@PAU21@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleInit@ATL@@YGJPAU_ATL_MODULE@1@PAU_ATL_OBJMAP_ENTRY@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterClassObjects@ATL@@YGJPAU_ATL_MODULE@1@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRevokeClassObjects@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleGetClassObject@ATL@@YGJPAU_ATL_MODULE@1@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleTerm@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddTermFunc@ATL@@YGJPAU_ATL_MODULE@1@P6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterServer@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServerEx@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServer@ATL@@YGJPAU_ATL_MODULE@1@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUpdateRegistryFromResourceD@ATL@@YGJPAU_ATL_MODULE@1@PBGHPAU_ATL_REGMAP_ENTRY@1@PAUIRegistrar@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleLoadTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBGPAPAGPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddCreateWndData@ATL@@YGXPAU_ATL_MODULE@1@PAU_AtlCreateWndData@1@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleExtractCreateWndData@ATL@@YGPAXPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBDPAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@invalid_argument@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0invalid_argument@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YAGDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@failure@ios_base@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7_bstr_t@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Compare@_bstr_t@@ABEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@Data_t@_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Assign@Data_t@_bstr_t@@QAEXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@Data_t@_bstr_t@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8_variant_t@@QBE_NPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@_variant_t@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonikerFile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDocument@COleServerItem@@QBEPAVCOleServerDoc@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DStringID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@ABVObjectID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_nValue@CSCI_LongInt@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_nValue@CSCI_LongInt@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pCommand@CSCI_NetMsg@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pAckCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pNakCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pDirectObject@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDLo@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDHi@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pManaValue@CSCI_WorldObject@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pManaObj@CSCI_WorldEgo@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GroupMember@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RoomZero@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGlobal@PMachine@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProcessEvents@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTransient@CSkinWnd@@IAE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTransient@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Next@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Previous@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemTextColor@CSkinListCtrl@@MAEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemBGColor@CSkinListCtrl@@MAEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$vector@_NV?$allocator@I@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPBI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?BVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Zconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Mconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Ziterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Miterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@Vconst_iterator@12@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@_NV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nw@?$vector@_NV?$allocator@I@std@@@std@@KAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Trim@?$vector@_NV?$allocator@I@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$vector@_NV?$allocator@I@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckBounds@OCArray@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Data@OCArray@@QAEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ByteAt@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetByte@CPackedData@@QAEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetByte@CPackedData@@QAEXHE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutByte@CPackedData@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWord@CPackedData@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutWord@CPackedData@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LongAt@CPackedData@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutLong@CPackedData@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloseMe@CSellDlg@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Refresh@CTabDlgBtn@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabDlgBtn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSkinObj@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSkinBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTabDlgBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSkinObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSelectedTab@CTabDlg@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BringTabToTop@CMainPanelWnd@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSellAllBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnActivate@CSellAllBtn@@UAEXFF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSellAllBtn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSellAllBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSellableListCtrl@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSellableListCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnItemActivate@CSellableListCtrl@@UAEXH_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSellableListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CToBeSoldListCtrl@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CToBeSoldListCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnItemActivate@CToBeSoldListCtrl@@UAEXH_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToBeSoldListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSellDlg@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSellDlg@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSellBtn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSellBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSellQuantityDlg@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSellQuantityDlg@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPointContainer@@@ATL@@QAEPAPAUIConnectionPointContainer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPointContainer@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPointContainer@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPoint@@@ATL@@QAEPAPAUIConnectionPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPoint@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPoint@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIRegistrar@@@ATL@@QAEPAPAUIRegistrar@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIRegistrar@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIRegistrar@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIRegistrar@@@ATL@@QAEPAUIRegistrar@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInterfacePtr@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QBEPAUIMoniker@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QBEPAUIBinding@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$bitset@$05@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@IABIABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_allocator@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$allocator@I@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@IV?$allocator@I@std@@@std@@QAEPAIPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eq@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lt@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@IV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Viterator@?$vector@_NV?$allocator@I@std@@@std@@_NVreference@23@PAV423@H@std@@QAE@Viterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@_N$$CBVreference@23@PBV423@H@std@@QAE@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?test@?$bitset@$05@std@@QBE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@I@std@@QAEPAIIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@I@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@I@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@IV?$allocator@I@std@@@std@@QAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$bitset@$05@std@@ABEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@I@std@@QAEXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@I@std@@QAEXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@G@std@@QAEPAGIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@G@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXViterator@?$vector@_NV?$allocator@I@std@@@1@0AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@Vconst_iterator@31@0V231@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YADDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@GU?$char_traits@G@std@@@1@0IPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@std@@YA_NPBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lexicographical_compare@std@@YA_NPBI000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@I@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?isdigit@std@@YA_NDABVlocale@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAIHPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAI0ABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@G@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@D@std@@@std@@SAPAV?$ctype@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@G@std@@@std@@SAPAV?$ctype@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAPAV?$numpunct@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAPAV?$numpunct@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Iter_cat@std@@YA?AUrandom_access_iterator_tag@1@ABU?$iterator@Urandom_access_iterator_tag@std@@_NH@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAIUrandom_access_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?mismatch@std@@YA?AU?$pair@PBIPBI@1@PBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPADPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPAGPBDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@PBIPBI@std@@QAE@ABQBI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSellableListCtrl@@WEA@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSellableListCtrl@@WHE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECToBeSoldListCtrl@@WEA@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECToBeSoldListCtrl@@WHE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSellDlg@@WJE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_eab22ac1_30c1_11cf_a7eb_0000c05bae0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d66d6f98_cdaa_11d0_b822_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9860_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000117_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000113_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d8_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1f8352c0_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonthCalCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSellableListCtrl@@6BCSkinCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f220_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f208_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTabDlgBtn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc9_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa5_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000192_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000128_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000140_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CEdit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000122_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_920ff31f_ca25_451a_9738_3444fc206bcc
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b283_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CScrollBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bcc7_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSellQuantityDlg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CTabCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b3e7c340_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d49_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_85cb6900_4d95_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4f7ae600_0142_11d3_9dcf_89be4efb591e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBoxEx@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f203_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1ac3d9f0_175c_11d1_95be_00609797ea4f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_012dd920_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHotKeyCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020403_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f311_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1008c4a0_7613_11cf_9af1_0020af6e72f4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020410_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020404_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVoverflow_error@std@@@8??0overflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f23b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b15b8dc1_c7e1_11d0_8680_00aa00bdcb71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f52e2b61_18a1_11d1_b105_00805f49916b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3d7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2aa_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1de_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9d5_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000025_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000019_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d8_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_948c5ad3_c58d_11d0_9c0b_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020406_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_bc40bec1_c493_11d0_831b_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd21_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ee11629b_36df_11d3_9dd0_89d6dbbba800
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9bfbbc02_eff1_101a_84ed_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f03340_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_63cdbcb0_c1b1_11d0_9336_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToBeSoldListCtrl@@6BCSkinCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_bb1a2ae1_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0c733a30_2a1c_11ce_ade5_00aa0044773d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65ce_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cb5bdc81_93c1_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f218_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f230_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ef_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSimpleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f377_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_000214e1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0e6d4d92_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ca478da0_3920_11d3_9dd0_8067e4a06603
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eae1ba61_a4ed_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9eb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55882_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVrange_error@std@@@8??0range_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSellDlg@@6BCVerbHandler@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f35f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3fd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd23_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a3ccedf3_2de2_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d10f6761_83e9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0002e011_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28d_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1ff_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f240_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1da_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCommonDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000129_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88a05c00_f000_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ee_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d5f56b60_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSellBtn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToolBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_08ec3e00_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af280b6_cb3f_11d0_891e_00c04fb6bfc4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9e7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020d03_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_85bd8e82_0fba_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CNotSupportedException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3fc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d40_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_359f3441_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f28b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_afa0dc11_c313_11d0_831a_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000023_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e0e270c1_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVbad_typeid@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c9_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_1c2056cc_5ef4_101b_8bc8_00aa003e3b29
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2c2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fbf23b80_e3f0_101b_8488_00aa003e56f8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d9_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f1_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSellAllBtn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bcc5_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSliderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSellDlg@@6BCSkinWnd@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_618736e0_3c3d_11cf_810c_00aa00389b71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000190_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CDragListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3af24292_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020d00_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000191_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_f77459a0_bf9a_11cf_ba4e_00c04fd70816
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f322_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f266_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a41_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4425_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9cb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$ctype@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@D@std@@@std@@0PAV?$numpunct@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@G@std@@@std@@0PAV?$numpunct@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@D@std@@@std@@0PAV?$ctype@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@G@std@@@std@@0PAV?$ctype@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f29c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_359f3443_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc8_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e003_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f206_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f212_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020402_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ed_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f490eb00_1240_11d1_9888_006097deacf9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_typeid@std@@@8??0bad_typeid@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CBitmapButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1dd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f373_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214ea_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d7_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ed_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000112_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3f7f31ac_e15f_11d0_9c25_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000118_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f25f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fac32c80_cbe4_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7bf80980_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eb0fe172_1a3a_11d0_89b3_00a0c90a90ac
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_729fe2f8_1ea8_11d1_8f85_00c04fc2fbe1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f202_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ac60f6a0_0fd9_11d0_99cb_00c04fd64497
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bccb_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f216_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_04598fc6_866c_11cf_ab7c_00aa00c08fcf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7COleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_332c4426_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28c_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ee_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e013_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_594f31d0_7f19_11d0_b194_00a0c90dc8bf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_6d5140c1_7436_11ce_8034_00aa006009fa
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f313_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSellableListCtrl@@6BCScrollable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_88e39e80_3578_11cf_ae69_08002b2e1262
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_742b0e01_14e6_101b_914e_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAnimateCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f37e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVunderflow_error@std@@@8??0underflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9c7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e7a1af80_4d96_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpinButtonCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ca04b7e6_0d21_11d1_8cc5_00c04fc2b085
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b288_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000126_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_163bb1e0_6e00_11cf_837a_48dc04c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_2a342fc2_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d8f015c0_c278_11ce_a49e_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd3f23c0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_df0b3d60_548f_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a7aba9c1_8983_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_744129e0_cbe5_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_68284faa_6a48_11d0_8c78_00c04fd918b4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000010_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CStatusBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3d5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_626fc520_a41e_11cf_a731_00a0c9082637
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_91a565c1_e38f_11d0_94bf_00a0c9055cbf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2ad_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d31_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56a34_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000012a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af24290_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1e0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f35c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a9d758a0_4617_11cf_95fc_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b8da6310_e19b_11d0_933c_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_db01a1e3_a42b_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToBeSoldListCtrl@@6BCListCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_65725580_9b5d_11d0_9bfe_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_539698a0_cdca_11cf_a5eb_00aa0047a063
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d30c1661_cdaf_11d0_8a3e_00c04fc9e26e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3dc39d1d_c030_11d0_b81b_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d46_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_37deb787_2d9b_11d3_9dd0_c423e6542e10
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_922eada0_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_69d14c80_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFileException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CReBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000011c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_9c2cad80_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_70bdde00_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f3cf_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CArchiveException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000121_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CResourceException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_d9f1e15a_ccdb_11d0_9c0c_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa2_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002df05_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRectTracker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f209_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000020_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f319_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f375_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f369_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cf51ed10_62fe_11cf_bf86_00a0c9034836
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_894ad3b0_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_baa342a0_2ded_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f29f6bc0_5021_11ce_aa15_00006901293f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e8_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f315_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f265_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMemoryException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cd_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d001f200_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e002_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_085fb2c0_0df8_11d1_8f4b_00a0c905413f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9e4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55dd814e_a1b7_4808_9625_4f75a3fad8a7
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f569d0_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ec_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214ee_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fa_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b285_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f361_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214eb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0c6c4200_c589_11d0_999a_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000139_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55881_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4ef6100a_af88_11d0_9846_00c04fc29993
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000002_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000138_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f7_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f372_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f5be2ee1_bfd7_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020411_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020405_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRichEditCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDateTimeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f376_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f401_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d9e89500_30fa_11d0_b724_00aa006c1a01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_376bd3aa_3845_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f357_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f360_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a1_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSellableListCtrl@@6BCMouseWheelable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3c01387a_6ac2_4ef1_bda2_ec5d26e3b065
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_37d84f60_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_322982e0_0855_11d3_9dcf_ddfb3ab09e18
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cabb0da0_da57_11cf_9974_0020afd79762
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_c04d65d2_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7d688a70_c613_11d0_999b_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f378_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f383_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1cff0050_6fdd_11d0_9328_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bb1a2ae2_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_01e44665_24ac_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_6cfc9ba1_fe87_11d2_9dcf_ed29fafe371d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9ba05970_f6a8_11cf_a442_00a0c90a8f39
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcca_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_83c2d7a0_0de6_11d3_9dcf_9423f1b2561c
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonikerFile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e3_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVdomain_error@std@@@8??0domain_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28f_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000104_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000110_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f207_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d4c_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_25b15600_0115_11d0_bf0d_00aa00b8dfd2
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000127_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000022_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000016_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c6_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCheckListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000026_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55272a00_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28b_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4427_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_aa5b6a80_b834_11d0_932f_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_e0e270c0_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e6_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000101_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000029_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3127ca40_446e_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_55980ba0_35aa_11cf_b671_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a1faf330_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a4c65425_0f82_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CIPAddressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CUserException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a6ef9861_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToBeSoldListCtrl@@6BCScrollable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a6ef9862_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000018_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000193_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000024_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f200_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_dce47f78_8a6c_4c6d_a6f7_8be4427127c4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f204_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSkinObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000002a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ea_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd1ae5e0_a6ae_11ce_bd37_504200c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000102_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f0_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a42_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f24f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000001d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000194_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHeaderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_99caf010_415e_11cf_8814_00aa00b569f5
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_47d2657a_7b27_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ec_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToBeSoldListCtrl@@6BCMouseWheelable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f211_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f205_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0e6d4d90_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00021500_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc6_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_89bcb740_6119_101a_bcb7_00dd010655af
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bcfce0a0_ec17_11d0_8d10_00a0c90f2719
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d6_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000119_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000111_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000105_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000125_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7bf80981_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b289_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65d0_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSellableListCtrl@@6BCListCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_972de6c1_8b09_11d2_b652_a1fd6cc34260
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f244_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56afc_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000103_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000013e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e1_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000003_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f1db8392_7331_11d0_8c99_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_c4d244b0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2eb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?GUID_ATLVer30@ATL@@3U_GUID@@A			; ATL::GUID_ATLVer30
PUBLIC	?m_libid@CComModule@ATL@@2U_GUID@@A		; ATL::CComModule::m_libid
PUBLIC	_LIBID_ATLLib
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?OnSetFocus@CSellDlg@@QAEXPAVCWnd@@@Z		; CSellDlg::OnSetFocus
PUBLIC	?_messageEntries@CSellDlg@@0QBUAFX_MSGMAP_ENTRY@@B ; CSellDlg::_messageEntries
PUBLIC	?messageMap@CSellDlg@@1UAFX_MSGMAP@@B		; CSellDlg::messageMap
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?_GetBaseMessageMap@CSellDlg@@KGPBUAFX_MSGMAP@@XZ ; CSellDlg::_GetBaseMessageMap
PUBLIC	_LIBID_ACTIVESKINLib
PUBLIC	_IID_ISkinForm
PUBLIC	_IID_ISkinObjectDisp
PUBLIC	_IID_ISkinSource
PUBLIC	_DIID__ISkinFormEvents
PUBLIC	_IID_ISkinFormEvents_Sink
PUBLIC	_CLSID_SkinForm
PUBLIC	_DIID__ISkinObjectDispEvents
PUBLIC	_IID_ICOMScript
PUBLIC	_IID_IComMorph
PUBLIC	?g_pSellDialog@@3PAVCSellDlg@@A			; g_pSellDialog
PUBLIC	_IID_IComMoveSize
PUBLIC	_IID_ISkinButton
PUBLIC	_CLSID_SkinObject
PUBLIC	_CLSID_COMScript
PUBLIC	_CLSID_ComMorph
PUBLIC	_CLSID_ComMoveSize
PUBLIC	_DIID__ISkinButtonEvents
PUBLIC	_CLSID_SkinButton
PUBLIC	_IID_ISkinPanel
PUBLIC	_DIID__ISkinPanelEvents
PUBLIC	_IID_ISkinLabel
PUBLIC	_CLSID_SkinPanel
PUBLIC	_DIID__ISkinLabelEvents
PUBLIC	_IID_ISkinScrollBar
PUBLIC	_CLSID_SkinLabel
PUBLIC	_DIID__ISkinScrollBarEvents
PUBLIC	_CLSID_SkinScrollBar
PUBLIC	_DIID__ISkinSourceEvents
PUBLIC	_IID_ISkinStorage
PUBLIC	_IID_ISkinPopup
PUBLIC	_IID_IComTransitions
PUBLIC	_IID_ISkinEvent
PUBLIC	_IID_IComProcTextures
PUBLIC	_IID_IComFilters
PUBLIC	_CLSID_SkinSource
PUBLIC	_CLSID_SkinStorage
PUBLIC	_CLSID_SkinPopup
PUBLIC	_CLSID_ComTransitions
PUBLIC	_CLSID_SkinEvent
PUBLIC	_CLSID_ComProcTextures
PUBLIC	_CLSID_ComFilters
PUBLIC	?OnSetFocus@CSellQuantityDlg@@QAEXPAVCWnd@@@Z	; CSellQuantityDlg::OnSetFocus
PUBLIC	?_messageEntries@CSellQuantityDlg@@0QBUAFX_MSGMAP_ENTRY@@B ; CSellQuantityDlg::_messageEntries
PUBLIC	?messageMap@CSellQuantityDlg@@1UAFX_MSGMAP@@B	; CSellQuantityDlg::messageMap
PUBLIC	?_GetBaseMessageMap@CSellQuantityDlg@@KGPBUAFX_MSGMAP@@XZ ; CSellQuantityDlg::_GetBaseMessageMap
PUBLIC	_IID_IInternalConnection
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CComModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CComModule::m_libid
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
_BSS	SEGMENT
?g_pSellDialog@@3PAVCSellDlg@@A DD 01H DUP (?)		; g_pSellDialog
_BSS	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT
?GUID_ATLVer30@ATL@@3U_GUID@@A DD 0b62f5910H		; ATL::GUID_ATLVer30
	DW	06528H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT
_LIBID_ACTIVESKINLib DD 0972de6b5H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT
_IID_ISkinForm DD 0972de6c1H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT
_IID_ISkinObjectDisp DD 06cfc9ba1H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT
_IID_ISkinSource DD 037deb787H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT
_DIID__ISkinFormEvents DD 0972de6c3H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT
_IID_ISkinFormEvents_Sink DD 053fa8d31H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT
_CLSID_SkinForm DD 0972de6c2H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT
_DIID__ISkinObjectDispEvents DD 06cfc9ba3H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT
_IID_ICOMScript DD 04f7ae600H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT
_IID_IComMorph DD 0322982e0H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT
_IID_IComMoveSize DD 083c2d7a0H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT
_IID_ISkinButton DD 053fa8d40H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT
_CLSID_SkinObject DD 06cfc9ba2H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT
_CLSID_COMScript DD 04f7ae601H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT
_CLSID_ComMorph DD 0322982e1H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT
_CLSID_ComMoveSize DD 083c2d7a1H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT
_DIID__ISkinButtonEvents DD 053fa8d42H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT
_CLSID_SkinButton DD 053fa8d41H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT
_IID_ISkinPanel DD 053fa8d46H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT
_DIID__ISkinPanelEvents DD 053fa8d48H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT
_IID_ISkinLabel DD 053fa8d49H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT
_CLSID_SkinPanel DD 053fa8d47H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT
_DIID__ISkinLabelEvents DD 053fa8d4bH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT
_IID_ISkinScrollBar DD 053fa8d4cH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT
_CLSID_SkinLabel DD 053fa8d4aH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT
_DIID__ISkinScrollBarEvents DD 053fa8d4eH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT
_CLSID_SkinScrollBar DD 053fa8d4dH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT
_DIID__ISkinSourceEvents DD 037deb788H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT
_IID_ISkinStorage DD 0ee11629bH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT
_IID_ISkinPopup DD 0ca478da0H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT
_IID_IComTransitions DD 03c01387aH
	DW	06ac2H
	DW	04ef1H
	DB	0bdH
	DB	0a2H
	DB	0ecH
	DB	05dH
	DB	026H
	DB	0e3H
	DB	0b0H
	DB	065H
CONST	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT
_IID_ISkinEvent DD 055dd814eH
	DW	0a1b7H
	DW	04808H
	DB	096H
	DB	025H
	DB	04fH
	DB	075H
	DB	0a3H
	DB	0faH
	DB	0d8H
	DB	0a7H
CONST	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT
_IID_IComProcTextures DD 0dce47f78H
	DW	08a6cH
	DW	04c6dH
	DB	0a6H
	DB	0f7H
	DB	08bH
	DB	0e4H
	DB	042H
	DB	071H
	DB	027H
	DB	0c4H
CONST	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT
_IID_IComFilters DD 0920ff31fH
	DW	0ca25H
	DW	0451aH
	DB	097H
	DB	038H
	DB	034H
	DB	044H
	DB	0fcH
	DB	020H
	DB	06bH
	DB	0ccH
CONST	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT
_CLSID_SkinSource DD 053fa8d44H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT
_CLSID_SkinStorage DD 0ee11629cH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT
_CLSID_SkinPopup DD 0ca478da1H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT
_CLSID_ComTransitions DD 03c6d21d6H
	DW	07470H
	DW	04555H
	DB	0a8H
	DB	0fbH
	DB	06cH
	DB	022H
	DB	092H
	DB	0b3H
	DB	09cH
	DB	046H
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT
_CLSID_SkinEvent DD 08f59c2a4H
	DW	04c01H
	DW	04451H
	DB	0beH
	DB	05bH
	DB	09H
	DB	078H
	DB	07bH
	DB	012H
	DB	03aH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT
_CLSID_ComProcTextures DD 0bf1b5d50H
	DW	03c5cH
	DW	048ceH
	DB	0b9H
	DB	091H
	DB	0eH
	DB	086H
	DB	0d2H
	DB	06fH
	DB	06fH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT
_CLSID_ComFilters DD 0c4d7e3c7H
	DW	03c26H
	DW	04052H
	DB	0a9H
	DB	093H
	DB	071H
	DB	0e5H
	DB	00H
	DB	0eaH
	DB	08cH
	DB	05H
CONST	ENDS
CONST	SEGMENT
?messageMap@CSellDlg@@1UAFX_MSGMAP@@B DD FLAT:?_GetBaseMessageMap@CSellDlg@@KGPBUAFX_MSGMAP@@XZ ; CSellDlg::messageMap
	DD	FLAT:?_messageEntries@CSellDlg@@0QBUAFX_MSGMAP_ENTRY@@B
?_messageEntries@CSellDlg@@0QBUAFX_MSGMAP_ENTRY@@B DD 07H ; CSellDlg::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	017H
	DD	FLAT:?OnSetFocus@CSellDlg@@QAEXPAVCWnd@@@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?messageMap@CSellQuantityDlg@@1UAFX_MSGMAP@@B DD FLAT:?_GetBaseMessageMap@CSellQuantityDlg@@KGPBUAFX_MSGMAP@@XZ ; CSellQuantityDlg::messageMap
	DD	FLAT:?_messageEntries@CSellQuantityDlg@@0QBUAFX_MSGMAP_ENTRY@@B
?_messageEntries@CSellQuantityDlg@@0QBUAFX_MSGMAP_ENTRY@@B DD 07H ; CSellQuantityDlg::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	017H
	DD	FLAT:?OnSetFocus@CSellQuantityDlg@@QAEXPAVCWnd@@@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
EXTRN	?messageMap@CSkinWnd@@1UAFX_MSGMAP@@B:QWORD	; CSkinWnd::messageMap
_TEXT	SEGMENT
?_GetBaseMessageMap@CSellDlg@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CSellDlg::_GetBaseMessageMap

; 66   : BEGIN_MESSAGE_MAP ( CSellDlg, CSkinWnd )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CSkinWnd@@1UAFX_MSGMAP@@B ; CSkinWnd::messageMap
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_GetBaseMessageMap@CSellDlg@@KGPBUAFX_MSGMAP@@XZ ENDP	; CSellDlg::_GetBaseMessageMap
_TEXT	ENDS
PUBLIC	?GetMessageMap@CSellDlg@@MBEPBUAFX_MSGMAP@@XZ	; CSellDlg::GetMessageMap
_TEXT	SEGMENT
_this$ = -4
?GetMessageMap@CSellDlg@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR	; CSellDlg::GetMessageMap

; 66   : BEGIN_MESSAGE_MAP ( CSellDlg, CSkinWnd )

  0000a	55		 push	 ebp
  0000b	8b ec		 mov	 ebp, esp
  0000d	51		 push	 ecx
  0000e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CSellDlg@@1UAFX_MSGMAP@@B ; CSellDlg::messageMap
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetMessageMap@CSellDlg@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CSellDlg::GetMessageMap
_TEXT	ENDS
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??_ECSellDlg@@WJE@AEPAXI@Z			; CSellDlg::`vector deleting destructor'
PUBLIC	??0CSellDlg@@QAE@XZ				; CSellDlg::CSellDlg
PUBLIC	?Next@CSkinWnd@@UAEXXZ				; CSkinWnd::Next
PUBLIC	?MakeSkinCtrl@CSellDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CSellDlg::MakeSkinCtrl
PUBLIC	?Previous@CSkinWnd@@UAEXXZ			; CSkinWnd::Previous
PUBLIC	?CloseSelf@CSellDlg@@UAEX_N@Z			; CSellDlg::CloseSelf
PUBLIC	?HandleVerb@CSellDlg@@UAEHHVCSCI_WorldObject@@@Z ; CSellDlg::HandleVerb
PUBLIC	??_7CSellDlg@@6BCSkinWnd@@@			; CSellDlg::`vftable'
PUBLIC	??_7CSellDlg@@6BCVerbHandler@@@			; CSellDlg::`vftable'
PUBLIC	??_GCSellDlg@@UAEPAXI@Z				; CSellDlg::`scalar deleting destructor'
PUBLIC	??_ECSellDlg@@UAEPAXI@Z				; CSellDlg::`vector deleting destructor'
EXTRN	??0CVerbHandler@@QAE@XZ:NEAR			; CVerbHandler::CVerbHandler
EXTRN	??1CVerbHandler@@UAE@XZ:NEAR			; CVerbHandler::~CVerbHandler
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CCmdTarget::OnCmdMsg
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CCmdTarget::GetInterfaceMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; CWnd::GetSuperWndProcAddr
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:NEAR ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:NEAR ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:NEAR		; CWnd::PostNcDestroy
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnChildNotify
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:NEAR		; CWnd::CheckAutoCenter
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:NEAR			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:NEAR		; CWnd::OnFinalRelease
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:NEAR ; CWnd::SetOccDialogInfo
EXTRN	?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ:NEAR ; CWnd::GetRuntimeClass
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:NEAR		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:NEAR ; CWnd::Create
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:NEAR		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:NEAR ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:NEAR	; CWnd::CalcWindowRect
EXTRN	?GetProcessEvents@CSkinWnd@@MAE_NXZ:NEAR	; CSkinWnd::GetProcessEvents
EXTRN	??0CSkinWnd@@QAE@XZ:NEAR			; CSkinWnd::CSkinWnd
EXTRN	??1CSkinWnd@@UAE@XZ:NEAR			; CSkinWnd::~CSkinWnd
EXTRN	?Disable@CSkinWnd@@UAEXXZ:NEAR			; CSkinWnd::Disable
EXTRN	?Enable@CSkinWnd@@UAEXXZ:NEAR			; CSkinWnd::Enable
EXTRN	?EnableGameModal@CSkinWnd@@UAEXHPAH@Z:NEAR	; CSkinWnd::EnableGameModal
EXTRN	?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z:NEAR	; CSkinWnd::DisableGameModal
EXTRN	?ProcessRefreshList@CSkinWnd@@UAEHXZ:NEAR	; CSkinWnd::ProcessRefreshList
EXTRN	?UpdateTracking@CSkinWnd@@UAEXXZ:NEAR		; CSkinWnd::UpdateTracking
EXTRN	?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CSkinWnd::GetEventSinkMap
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:NEAR ; CWnd::OnToolHitTest
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:NEAR ; CWnd::GetScrollBarCtrl
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::WinHelpA
EXTRN	?ContinueModal@CWnd@@UAEHXZ:NEAR		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:NEAR		; CWnd::EndModalLoop
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:NEAR			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:NEAR		; CWnd::OnNotify
;	COMDAT ??_7CSellDlg@@6BCSkinWnd@@@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\SellDlg.cpp
CONST	SEGMENT
??_7CSellDlg@@6BCSkinWnd@@@ DD FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ ; CSellDlg::`vftable'
	DD	FLAT:??_ECSellDlg@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CSellDlg@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetProcessEvents@CSkinWnd@@MAE_NXZ
	DD	FLAT:?CloseSelf@CSellDlg@@UAEX_N@Z
	DD	FLAT:?Disable@CSkinWnd@@UAEXXZ
	DD	FLAT:?Enable@CSkinWnd@@UAEXXZ
	DD	FLAT:?EnableGameModal@CSkinWnd@@UAEXHPAH@Z
	DD	FLAT:?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z
	DD	FLAT:?MakeSkinCtrl@CSellDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z
	DD	FLAT:?ProcessRefreshList@CSkinWnd@@UAEHXZ
	DD	FLAT:?UpdateTracking@CSkinWnd@@UAEXXZ
	DD	FLAT:?Next@CSkinWnd@@UAEXXZ
	DD	FLAT:?Previous@CSkinWnd@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CSellDlg@@6BCVerbHandler@@@
CONST	SEGMENT
??_7CSellDlg@@6BCVerbHandler@@@ DD FLAT:??_ECSellDlg@@WJE@AEPAXI@Z ; CSellDlg::`vftable'
	DD	FLAT:?HandleVerb@CSellDlg@@UAEHHVCSCI_WorldObject@@@Z
CONST	ENDS
xdata$x	SEGMENT
$T156536 DD	019930520H
	DD	02H
	DD	FLAT:$T156539
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156539 DD	0ffffffffH
	DD	FLAT:$L156531
	DD	00H
	DD	FLAT:$L156532
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??0CSellDlg@@QAE@XZ PROC NEAR				; CSellDlg::CSellDlg

; 73   : {

  0001a	55		 push	 ebp
  0001b	8b ec		 mov	 ebp, esp
  0001d	6a ff		 push	 -1
  0001f	68 00 00 00 00	 push	 $L156537
  00024	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0002a	50		 push	 eax
  0002b	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00032	51		 push	 ecx
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ??0CSkinWnd@@QAE@XZ	; CSkinWnd::CSkinWnd
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0004e	e8 00 00 00 00	 call	 ??0CVerbHandler@@QAE@XZ	; CVerbHandler::CVerbHandler
  00053	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00057	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSellDlg@@6BCSkinWnd@@@ ; CSellDlg::`vftable'
  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	c7 81 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+148], OFFSET FLAT:??_7CSellDlg@@6BCVerbHandler@@@ ; CSellDlg::`vftable'

; 74   : 	m_pSellableList = NULL;

  0006d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00070	c7 82 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+152], 0

; 75   : 	m_pToBeSoldList = NULL;

  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0

; 76   : 
; 77   : 	m_pSalePrice = NULL;

  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	c7 81 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+164], 0

; 78   : 
; 79   : 	m_pQuantity = NULL;

  00094	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00097	c7 82 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+168], 0

; 80   : 
; 81   : 	if ( g_pSellDialog )

  000a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pSellDialog@@3PAVCSellDlg@@A, 0 ; g_pSellDialog
  000a8	74 15		 je	 SHORT $L150436

; 82   : 		g_pSellDialog->CloseSelf();

  000aa	6a 00		 push	 0
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pSellDialog@@3PAVCSellDlg@@A ; g_pSellDialog
  000b1	8b 10		 mov	 edx, DWORD PTR [eax]
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSellDialog@@3PAVCSellDlg@@A ; g_pSellDialog
  000b9	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L150436:

; 83   : 
; 84   : 	g_pSellDialog = this;

  000bf	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	a3 00 00 00 00	 mov	 DWORD PTR ?g_pSellDialog@@3PAVCSellDlg@@A, eax ; g_pSellDialog

; 85   : }

  000c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ce	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L156531:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  00008	c3		 ret	 0
$L156532:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00012	e8 00 00 00 00	 call	 ??1CVerbHandler@@UAE@XZ	; CVerbHandler::~CVerbHandler
  00017	c3		 ret	 0
$L156537:
  00018	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156536
  0001d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CSellDlg@@QAE@XZ ENDP				; CSellDlg::CSellDlg
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
PUBLIC	??1CSellDlg@@UAE@XZ				; CSellDlg::~CSellDlg
;	COMDAT ??_GCSellDlg@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCSellDlg@@UAEPAXI@Z PROC NEAR			; CSellDlg::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSellDlg@@UAE@XZ	; CSellDlg::~CSellDlg
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L150440
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L150440:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCSellDlg@@UAEPAXI@Z ENDP				; CSellDlg::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T156550 DD	019930520H
	DD	01H
	DD	FLAT:$T156552
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156552 DD	0ffffffffH
	DD	FLAT:$L156545
xdata$x	ENDS
;	COMDAT ??1CSellDlg@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1CSellDlg@@UAE@XZ PROC NEAR				; CSellDlg::~CSellDlg, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L156551
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 08	 sub	 esp, 8
  0001b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00025	83 7d f0 00	 cmp	 DWORD PTR _this$[ebp], 0
  00029	74 0d		 je	 SHORT $L156543
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00033	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00036	eb 07		 jmp	 SHORT $L156544
$L156543:
  00038	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L156544:
  0003f	8b 4d ec	 mov	 ecx, DWORD PTR -20+[ebp]
  00042	e8 00 00 00 00	 call	 ??1CVerbHandler@@UAE@XZ	; CVerbHandler::~CVerbHandler
  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L156545:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  00008	c3		 ret	 0
$L156551:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156550
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CSellDlg@@UAE@XZ ENDP				; CSellDlg::~CSellDlg
PUBLIC	??0CRect@@QAE@HHHH@Z				; CRect::CRect
PUBLIC	?GetGlobal@PMachine@@QAEFH@Z			; PMachine::GetGlobal
PUBLIC	??0ObjectID@@QAE@ABV0@@Z			; ObjectID::ObjectID
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
PUBLIC	??0CSCI_WorldObject@@QAE@XZ			; CSCI_WorldObject::CSCI_WorldObject
PUBLIC	??0CSCI_WorldObject@@QAE@G@Z			; CSCI_WorldObject::CSCI_WorldObject
PUBLIC	??0CSCI_RoomZero@@QAE@G@Z			; CSCI_RoomZero::CSCI_RoomZero
PUBLIC	?get_pManaValue@CSCI_WorldObject@@QAE?AVCSCI_LongInt@@XZ ; CSCI_WorldObject::get_pManaValue
PUBLIC	??DStringID@@QAEPADXZ				; StringID::operator*
PUBLIC	?SetTransient@CSkinWnd@@IAEX_N@Z		; CSkinWnd::SetTransient
PUBLIC	?Create@CSellDlg@@QAEHVCSCI_Object@@@Z		; CSellDlg::Create
PUBLIC	?BringTabToTop@CMainPanelWnd@@QAEXXZ		; CMainPanelWnd::BringTabToTop
PUBLIC	?get_nValue@CSCI_LongInt@@QAEHXZ		; CSCI_LongInt::get_nValue
EXTRN	?pm@@3VPMachine@@A:BYTE				; pm
EXTRN	??0CString@@QAE@XZ:NEAR				; CString::CString
EXTRN	?GetClassByName@@YAGPAD@Z:NEAR			; GetClassByName
EXTRN	?SetScrollBar@CScrollable@@QAEXPAVCSkinScrollBar@@@Z:NEAR ; CScrollable::SetScrollBar
EXTRN	?Format@CString@@QAAXPBDZZ:NEAR			; CString::Format
EXTRN	??1CString@@QAE@XZ:NEAR				; CString::~CString
EXTRN	?AddLine@CSkinListCtrl@@QAAHHHZZ:NEAR		; CSkinListCtrl::AddLine
EXTRN	??0PackedData@@QAE@VObjectID@@@Z:NEAR		; PackedData::PackedData
EXTRN	??1PackedData@@UAE@XZ:NEAR			; PackedData::~PackedData
EXTRN	?getLong@PackedData@@QAEHXZ:NEAR		; PackedData::getLong
EXTRN	?getName@CSCI_WorldObject@@QAE?AVStringID@@XZ:NEAR ; CSCI_WorldObject::getName
EXTRN	?FindByServID@CSCI_WorldObject@@SA?AV1@H@Z:NEAR	; CSCI_WorldObject::FindByServID
EXTRN	?controlOn@CSCI_Game@@QAEXXZ:NEAR		; CSCI_Game::controlOn
EXTRN	?CreateChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@H@Z:NEAR ; CSkinWnd::CreateChild
EXTRN	?FindControl@CSkinWnd@@QAEPAVCSkinCtrl@@PBD@Z:NEAR ; CSkinWnd::FindControl
EXTRN	?SetPriority@CSkinWnd@@QAEXH@Z:NEAR		; CSkinWnd::SetPriority
EXTRN	?g_pMainWindow@@3PAVCMainWindow@@A:DWORD	; g_pMainWindow
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
EXTRN	?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A:DWORD	; g_pMainPanelWnd
EXTRN	?SetFormattedText@CSkinEdit@@QAAHPADZZ:NEAR	; CSkinEdit::SetFormattedText
_DATA	SEGMENT
$SG150451 DB	'Sale', 00H
	ORG $+3
$SG150452 DB	'Dlg_Sell.skn', 00H
	ORG $+3
$SG150455 DB	'RoomZero', 00H
	ORG $+3
$SG150460 DB	'sb_Sellable', 00H
$SG150463 DB	'sb_ToBeSold', 00H
$SG150468 DB	'%d', 00H
	ORG $+1
$SG150472 DB	'%d Mana Crystals', 00H
	ORG $+3
$SG150473 DB	'%d', 00H
	ORG $+1
$SG150480 DB	'%d', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T156566 DD	019930520H
	DD	03H
	DD	FLAT:$T156568
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156568 DD	0ffffffffH
	DD	FLAT:$L156562
	DD	00H
	DD	FLAT:$L156563
	DD	01H
	DD	FLAT:$L156564
xdata$x	ENDS
_TEXT	SEGMENT
$T156556 = -64
$T156557 = -80
$T156558 = -84
$T156559 = -88
$T156560 = -92
$T156561 = -96
__$EHRec$ = -12
_hData$ = 8
_this$ = -100
_data$ = -20
_bCreated$ = -24
_hRoomZero$150454 = -32
_barObj$150458 = -48
_hEgo$150465 = -44
_nMana$150466 = -52
_sPrice$150469 = -40
_sMessage$150471 = -60
_nServID$150474 = -56
_nPrice$150475 = -36
_hObject$150476 = -28
?Create@CSellDlg@@QAEHVCSCI_Object@@@Z PROC NEAR	; CSellDlg::Create

; 89   : {

  000df	55		 push	 ebp
  000e0	8b ec		 mov	 ebp, esp
  000e2	6a ff		 push	 -1
  000e4	68 00 00 00 00	 push	 $L156567
  000e9	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  000ef	50		 push	 eax
  000f0	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  000f7	83 ec 58	 sub	 esp, 88			; 00000058H
  000fa	89 4d 9c	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 	PackedData data( hData );

  000fd	51		 push	 ecx
  000fe	8b cc		 mov	 ecx, esp
  00100	89 65 c0	 mov	 DWORD PTR $T156556[ebp], esp
  00103	8d 45 08	 lea	 eax, DWORD PTR _hData$[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  0010c	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  0010f	e8 00 00 00 00	 call	 ??0PackedData@@QAE@VObjectID@@@Z ; PackedData::PackedData
  00114	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 91   : 
; 92   : 	// set the priority of this window
; 93   : 	SetPriority ( swPriGameModal );

  0011b	6a 07		 push	 7
  0011d	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	e8 00 00 00 00	 call	 ?SetPriority@CSkinWnd@@QAEXH@Z ; CSkinWnd::SetPriority

; 94   : 
; 95   : 	// set that the window should go away
; 96   : 	SetTransient( true );

  00125	6a 01		 push	 1
  00127	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	e8 00 00 00 00	 call	 ?SetTransient@CSkinWnd@@IAEX_N@Z ; CSkinWnd::SetTransient

; 97   : 
; 98   : 	BOOL bCreated = CreateChild ( "Dlg_Sell.skn", "Sale", CRect ( 0, 0, 0, 0 ), g_pMainWindow );

  0012f	6a 01		 push	 1
  00131	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainWindow@@3PAVCMainWindow@@A ; g_pMainWindow
  00137	51		 push	 ecx
  00138	6a 00		 push	 0
  0013a	6a 00		 push	 0
  0013c	6a 00		 push	 0
  0013e	6a 00		 push	 0
  00140	8d 4d b0	 lea	 ecx, DWORD PTR $T156557[ebp]
  00143	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  00148	50		 push	 eax
  00149	68 00 00 00 00	 push	 OFFSET FLAT:$SG150451
  0014e	68 00 00 00 00	 push	 OFFSET FLAT:$SG150452
  00153	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	e8 00 00 00 00	 call	 ?CreateChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@H@Z ; CSkinWnd::CreateChild
  0015b	89 45 e8	 mov	 DWORD PTR _bCreated$[ebp], eax

; 99   : 
; 100  : 	if ( TRUE == bCreated ) {

  0015e	83 7d e8 01	 cmp	 DWORD PTR _bCreated$[ebp], 1
  00162	0f 85 ec 01 00
	00		 jne	 $L150453

; 101  : 		CSCI_RoomZero hRoomZero = GetClassByName( "RoomZero" );

  00168	68 00 00 00 00	 push	 OFFSET FLAT:$SG150455
  0016d	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  00172	83 c4 04	 add	 esp, 4
  00175	50		 push	 eax
  00176	8d 4d e0	 lea	 ecx, DWORD PTR _hRoomZero$150454[ebp]
  00179	e8 00 00 00 00	 call	 ??0CSCI_RoomZero@@QAE@G@Z ; CSCI_RoomZero::CSCI_RoomZero

; 102  : 		hRoomZero.controlOn();

  0017e	8d 4d e0	 lea	 ecx, DWORD PTR _hRoomZero$150454[ebp]
  00181	e8 00 00 00 00	 call	 ?controlOn@CSCI_Game@@QAEXXZ ; CSCI_Game::controlOn

; 103  : 
; 104  : 		// Check that the lists were created.
; 105  : 		assert( NULL != m_pSellableList );
; 106  : 		assert( NULL != m_pToBeSoldList );
; 107  : 
; 108  : 		// Find the scrollbars
; 109  : 		CSkinScrollBar* barObj = (CSkinScrollBar*) FindControl ( "sb_Sellable" );

  00186	68 00 00 00 00	 push	 OFFSET FLAT:$SG150460
  0018b	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0018e	e8 00 00 00 00	 call	 ?FindControl@CSkinWnd@@QAEPAVCSkinCtrl@@PBD@Z ; CSkinWnd::FindControl
  00193	89 45 d0	 mov	 DWORD PTR _barObj$150458[ebp], eax

; 110  : 		assert( NULL != barObj );
; 111  : 
; 112  : 		// Assign the scrollbar
; 113  : 		m_pSellableList->SetScrollBar ( barObj );

  00196	8b 55 d0	 mov	 edx, DWORD PTR _barObj$150458[ebp]
  00199	52		 push	 edx
  0019a	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  0019d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001a3	83 c1 54	 add	 ecx, 84			; 00000054H
  001a6	e8 00 00 00 00	 call	 ?SetScrollBar@CScrollable@@QAEXPAVCSkinScrollBar@@@Z ; CScrollable::SetScrollBar

; 114  : 
; 115  : 		barObj = (CSkinScrollBar*) FindControl ( "sb_ToBeSold" );

  001ab	68 00 00 00 00	 push	 OFFSET FLAT:$SG150463
  001b0	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  001b3	e8 00 00 00 00	 call	 ?FindControl@CSkinWnd@@QAEPAVCSkinCtrl@@PBD@Z ; CSkinWnd::FindControl
  001b8	89 45 d0	 mov	 DWORD PTR _barObj$150458[ebp], eax

; 116  : 		assert( NULL != barObj );
; 117  : 
; 118  : 		// Assign the scrollbar
; 119  : 		m_pToBeSoldList->SetScrollBar ( barObj );

  001bb	8b 4d d0	 mov	 ecx, DWORD PTR _barObj$150458[ebp]
  001be	51		 push	 ecx
  001bf	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  001c2	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  001c8	83 c1 54	 add	 ecx, 84			; 00000054H
  001cb	e8 00 00 00 00	 call	 ?SetScrollBar@CScrollable@@QAEXPAVCSkinScrollBar@@@Z ; CScrollable::SetScrollBar

; 120  : 
; 121  : 		CSCI_WorldObject hEgo = pm.GetGlobal( gSCI_ego );

  001d0	6a 01		 push	 1
  001d2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?pm@@3VPMachine@@A
  001d7	e8 00 00 00 00	 call	 ?GetGlobal@PMachine@@QAEFH@Z ; PMachine::GetGlobal
  001dc	50		 push	 eax
  001dd	8d 4d d4	 lea	 ecx, DWORD PTR _hEgo$150465[ebp]
  001e0	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject

; 122  : 		int nMana = hEgo.get_pManaValue().get_nValue();

  001e5	8d 45 ac	 lea	 eax, DWORD PTR $T156558[ebp]
  001e8	50		 push	 eax
  001e9	8d 4d d4	 lea	 ecx, DWORD PTR _hEgo$150465[ebp]
  001ec	e8 00 00 00 00	 call	 ?get_pManaValue@CSCI_WorldObject@@QAE?AVCSCI_LongInt@@XZ ; CSCI_WorldObject::get_pManaValue
  001f1	8b c8		 mov	 ecx, eax
  001f3	e8 00 00 00 00	 call	 ?get_nValue@CSCI_LongInt@@QAEHXZ ; CSCI_LongInt::get_nValue
  001f8	89 45 cc	 mov	 DWORD PTR _nMana$150466[ebp], eax

; 123  : 
; 124  : 		m_nSalePrice = 0;

  001fb	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  001fe	c7 81 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+160], 0

; 125  : 		m_pSalePrice->SetFormattedText( "%d", m_nSalePrice );

  00208	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  0020b	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00211	50		 push	 eax
  00212	68 00 00 00 00	 push	 OFFSET FLAT:$SG150468
  00217	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0021a	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00220	52		 push	 edx
  00221	e8 00 00 00 00	 call	 ?SetFormattedText@CSkinEdit@@QAAHPADZZ ; CSkinEdit::SetFormattedText
  00226	83 c4 0c	 add	 esp, 12			; 0000000cH

; 126  : 
; 127  : 		CString sPrice;

  00229	8d 4d d8	 lea	 ecx, DWORD PTR _sPrice$150469[ebp]
  0022c	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  00231	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 128  : 
; 129  : 		if ( nMana ) {

  00235	83 7d cc 00	 cmp	 DWORD PTR _nMana$150466[ebp], 0
  00239	74 63		 je	 SHORT $L150470

; 130  : 			CString sMessage;

  0023b	8d 4d c4	 lea	 ecx, DWORD PTR _sMessage$150471[ebp]
  0023e	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  00243	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 131  : 			sMessage.Format( "%d Mana Crystals", nMana );

  00247	8b 45 cc	 mov	 eax, DWORD PTR _nMana$150466[ebp]
  0024a	50		 push	 eax
  0024b	68 00 00 00 00	 push	 OFFSET FLAT:$SG150472
  00250	8d 4d c4	 lea	 ecx, DWORD PTR _sMessage$150471[ebp]
  00253	51		 push	 ecx
  00254	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  00259	83 c4 0c	 add	 esp, 12			; 0000000cH

; 132  : 
; 133  : 			sPrice.Format( "%d", ( nMana * 5 ) );

  0025c	8b 55 cc	 mov	 edx, DWORD PTR _nMana$150466[ebp]
  0025f	6b d2 05	 imul	 edx, 5
  00262	52		 push	 edx
  00263	68 00 00 00 00	 push	 OFFSET FLAT:$SG150473
  00268	8d 45 d8	 lea	 eax, DWORD PTR _sPrice$150469[ebp]
  0026b	50		 push	 eax
  0026c	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  00271	83 c4 0c	 add	 esp, 12			; 0000000cH

; 134  : 			m_pSellableList->AddLine( 0, 2, sMessage, sPrice );

  00274	8b 4d d8	 mov	 ecx, DWORD PTR _sPrice$150469[ebp]
  00277	51		 push	 ecx
  00278	8b 55 c4	 mov	 edx, DWORD PTR _sMessage$150471[ebp]
  0027b	52		 push	 edx
  0027c	6a 02		 push	 2
  0027e	6a 00		 push	 0
  00280	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00283	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00289	51		 push	 ecx
  0028a	e8 00 00 00 00	 call	 ?AddLine@CSkinListCtrl@@QAAHHHZZ ; CSkinListCtrl::AddLine
  0028f	83 c4 14	 add	 esp, 20			; 00000014H

; 135  : 		}

  00292	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00296	8d 4d c4	 lea	 ecx, DWORD PTR _sMessage$150471[ebp]
  00299	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
$L150470:

; 138  : 		int	nPrice;
; 139  : 
; 140  : 		CSCI_WorldObject hObject;

  0029e	8d 4d e4	 lea	 ecx, DWORD PTR _hObject$150476[ebp]
  002a1	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@XZ ; CSCI_WorldObject::CSCI_WorldObject

; 141  : 
; 142  : 		m_nShopID = data.getLong();

  002a6	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  002a9	e8 00 00 00 00	 call	 ?getLong@PackedData@@QAEHXZ ; PackedData::getLong
  002ae	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  002b1	89 82 ac 00 00
	00		 mov	 DWORD PTR [edx+172], eax
$L150478:

; 143  : 
; 144  : 		while ( ( nServID = data.getLong() ) != -1 ) {

  002b7	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  002ba	e8 00 00 00 00	 call	 ?getLong@PackedData@@QAEHXZ ; PackedData::getLong
  002bf	89 45 c8	 mov	 DWORD PTR _nServID$150474[ebp], eax
  002c2	83 7d c8 ff	 cmp	 DWORD PTR _nServID$150474[ebp], -1
  002c6	74 76		 je	 SHORT $L150479

; 145  : 			nPrice = data.getLong();

  002c8	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  002cb	e8 00 00 00 00	 call	 ?getLong@PackedData@@QAEHXZ ; PackedData::getLong
  002d0	89 45 dc	 mov	 DWORD PTR _nPrice$150475[ebp], eax

; 146  : 			sPrice.Format( "%d", nPrice );

  002d3	8b 45 dc	 mov	 eax, DWORD PTR _nPrice$150475[ebp]
  002d6	50		 push	 eax
  002d7	68 00 00 00 00	 push	 OFFSET FLAT:$SG150480
  002dc	8d 4d d8	 lea	 ecx, DWORD PTR _sPrice$150469[ebp]
  002df	51		 push	 ecx
  002e0	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  002e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 147  : 
; 148  : 			hObject = CSCI_WorldObject::FindByServID( nServID );

  002e8	8b 55 c8	 mov	 edx, DWORD PTR _nServID$150474[ebp]
  002eb	52		 push	 edx
  002ec	8d 45 a8	 lea	 eax, DWORD PTR $T156559[ebp]
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 ?FindByServID@CSCI_WorldObject@@SA?AV1@H@Z ; CSCI_WorldObject::FindByServID
  002f5	83 c4 08	 add	 esp, 8
  002f8	66 8b 08	 mov	 cx, WORD PTR [eax]
  002fb	66 89 4d e4	 mov	 WORD PTR _hObject$150476[ebp], cx

; 149  : 
; 150  : 			m_pSellableList->AddLine( hObject, 2, *hObject.getName(), sPrice );

  002ff	8b 55 d8	 mov	 edx, DWORD PTR _sPrice$150469[ebp]
  00302	52		 push	 edx
  00303	8d 45 a4	 lea	 eax, DWORD PTR $T156560[ebp]
  00306	50		 push	 eax
  00307	8d 4d e4	 lea	 ecx, DWORD PTR _hObject$150476[ebp]
  0030a	e8 00 00 00 00	 call	 ?getName@CSCI_WorldObject@@QAE?AVStringID@@XZ ; CSCI_WorldObject::getName
  0030f	8b c8		 mov	 ecx, eax
  00311	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  00316	50		 push	 eax
  00317	6a 02		 push	 2
  00319	8d 4d e4	 lea	 ecx, DWORD PTR _hObject$150476[ebp]
  0031c	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00321	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00326	50		 push	 eax
  00327	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0032a	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00330	52		 push	 edx
  00331	e8 00 00 00 00	 call	 ?AddLine@CSkinListCtrl@@QAAHHHZZ ; CSkinListCtrl::AddLine
  00336	83 c4 14	 add	 esp, 20			; 00000014H

; 151  : 		}

  00339	e9 79 ff ff ff	 jmp	 $L150478
$L150479:

; 152  : 
; 153  : 		ShowWindow( SW_SHOW );

  0033e	6a 05		 push	 5
  00340	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00343	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 154  : 	}

  00348	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0034c	8d 4d d8	 lea	 ecx, DWORD PTR _sPrice$150469[ebp]
  0034f	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
$L150453:

; 155  : 
; 156  :     if ( g_pMainPanelWnd ) g_pMainPanelWnd->BringTabToTop();

  00354	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  0035b	74 0b		 je	 SHORT $L150483
  0035d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  00363	e8 00 00 00 00	 call	 ?BringTabToTop@CMainPanelWnd@@QAEXXZ ; CMainPanelWnd::BringTabToTop
$L150483:

; 157  : 	return bCreated;

  00368	8b 45 e8	 mov	 eax, DWORD PTR _bCreated$[ebp]
  0036b	89 45 a0	 mov	 DWORD PTR $T156561[ebp], eax
  0036e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00375	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  00378	e8 00 00 00 00	 call	 ??1PackedData@@UAE@XZ	; PackedData::~PackedData
  0037d	8b 45 a0	 mov	 eax, DWORD PTR $T156561[ebp]

; 158  : }

  00380	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00383	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0038a	8b e5		 mov	 esp, ebp
  0038c	5d		 pop	 ebp
  0038d	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L156562:
  00022	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  00025	e8 00 00 00 00	 call	 ??1PackedData@@UAE@XZ	; PackedData::~PackedData
  0002a	c3		 ret	 0
$L156563:
  0002b	8d 4d d8	 lea	 ecx, DWORD PTR _sPrice$150469[ebp]
  0002e	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00033	c3		 ret	 0
$L156564:
  00034	8d 4d c4	 lea	 ecx, DWORD PTR _sMessage$150471[ebp]
  00037	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0003c	c3		 ret	 0
$L156567:
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156566
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Create@CSellDlg@@QAEHVCSCI_Object@@@Z ENDP		; CSellDlg::Create
_TEXT	SEGMENT
_this$ = -4
?OnSetFocus@CSellDlg@@QAEXPAVCWnd@@@Z PROC NEAR		; CSellDlg::OnSetFocus

; 161  : {

  00390	55		 push	 ebp
  00391	8b ec		 mov	 ebp, esp
  00393	51		 push	 ecx
  00394	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  :     if ( g_pMainPanelWnd ) g_pMainPanelWnd->BringTabToTop();

  00397	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A, 0 ; g_pMainPanelWnd
  0039e	74 0b		 je	 SHORT $L150489
  003a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainPanelWnd@@3PAVCMainPanelWnd@@A ; g_pMainPanelWnd
  003a6	e8 00 00 00 00	 call	 ?BringTabToTop@CMainPanelWnd@@QAEXXZ ; CMainPanelWnd::BringTabToTop
$L150489:

; 163  : }

  003ab	8b e5		 mov	 esp, ebp
  003ad	5d		 pop	 ebp
  003ae	c2 04 00	 ret	 4
?OnSetFocus@CSellDlg@@QAEXPAVCWnd@@@Z ENDP		; CSellDlg::OnSetFocus
_TEXT	ENDS
PUBLIC	??8@YG_NPBDABVCString@@@Z			; operator==
PUBLIC	??2CObject@@SGPAXI@Z				; CObject::operator new
PUBLIC	??0CSellBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z	; CSellBtn::CSellBtn
PUBLIC	??0CSellableListCtrl@@QAE@XZ			; CSellableListCtrl::CSellableListCtrl
PUBLIC	??0CToBeSoldListCtrl@@QAE@XZ			; CToBeSoldListCtrl::CToBeSoldListCtrl
PUBLIC	??0CSkinObj@@QAE@ABV0@@Z			; CSkinObj::CSkinObj
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	?Left@CString@@QBE?AV1@H@Z:NEAR			; CString::Left
EXTRN	?Find@CString@@QBEHPBDH@Z:NEAR			; CString::Find
EXTRN	?Create@CSkinListCtrl@@QAEHVCSkinObj@@PAVCSkinWnd@@I_N22@Z:NEAR ; CSkinListCtrl::Create
EXTRN	?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z:NEAR ; CSkinWnd::MakeSkinCtrl
EXTRN	??0CSkinEdit@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z:NEAR ; CSkinEdit::CSkinEdit
EXTRN	??1CSkinObj@@UAE@XZ:NEAR			; CSkinObj::~CSkinObj
EXTRN	?GetName@CSkinObj@@QAE?AVCString@@XZ:NEAR	; CSkinObj::GetName
_DATA	SEGMENT
	ORG $+1
$SG150498 DB	'_', 00H
	ORG $+2
$SG150500 DB	'lc', 00H
	ORG $+1
$SG150502 DB	'lc_Sellable', 00H
$SG150511 DB	'lc_ToBeSold', 00H
$SG150519 DB	'ref', 00H
$SG150527 DB	'vb', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T156616 DD	019930520H
	DD	07H
	DD	FLAT:$T156618
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156618 DD	0ffffffffH
	DD	FLAT:$L156603
	DD	00H
	DD	FLAT:$L156604
	DD	01H
	DD	FLAT:$L156605
	DD	02H
	DD	FLAT:$L156606
	DD	02H
	DD	FLAT:$L156608
	DD	02H
	DD	FLAT:$L156610
	DD	02H
	DD	FLAT:$L156612
xdata$x	ENDS
_TEXT	SEGMENT
$T156571 = -24
$T156572 = -28
$T156575 = -32
$T156576 = -36
$T156579 = -40
$T156580 = -44
$T156583 = -48
$T156584 = -52
$T156587 = -56
$T156588 = -60
$T156589 = -64
$T156590 = -68
$T156595 = -72
$T156596 = -76
$T156597 = -80
$T156598 = -84
$T156601 = -88
$T156602 = -92
__$EHRec$ = -12
_obj$ = 8
_this$ = -96
_name$ = -16
_id$ = -20
?MakeSkinCtrl@CSellDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z PROC NEAR ; CSellDlg::MakeSkinCtrl

; 167  : {

  003b1	55		 push	 ebp
  003b2	8b ec		 mov	 ebp, esp
  003b4	6a ff		 push	 -1
  003b6	68 00 00 00 00	 push	 $L156617
  003bb	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  003c1	50		 push	 eax
  003c2	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  003c9	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  003cf	89 4d a0	 mov	 DWORD PTR _this$[ebp], ecx
  003d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 168  : 	// the type of the control is specified by the 3 left characters of the name
; 169  : 	CString name = obj.GetName();

  003d9	8d 45 f0	 lea	 eax, DWORD PTR _name$[ebp]
  003dc	50		 push	 eax
  003dd	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  003e0	e8 00 00 00 00	 call	 ?GetName@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetName
  003e5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 170  : 	CString id = name.Left ( name.Find ( "_", 0 ) );

  003e9	6a 00		 push	 0
  003eb	68 00 00 00 00	 push	 OFFSET FLAT:$SG150498
  003f0	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  003f3	e8 00 00 00 00	 call	 ?Find@CString@@QBEHPBDH@Z ; CString::Find
  003f8	50		 push	 eax
  003f9	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  003fc	51		 push	 ecx
  003fd	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  00400	e8 00 00 00 00	 call	 ?Left@CString@@QBE?AV1@H@Z ; CString::Left
  00405	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 171  : 
; 172  : 	if ( "lc" == id ) {

  00409	8d 55 ec	 lea	 edx, DWORD PTR _id$[ebp]
  0040c	52		 push	 edx
  0040d	68 00 00 00 00	 push	 OFFSET FLAT:$SG150500
  00412	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  00417	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0041c	85 c0		 test	 eax, eax
  0041e	0f 84 cc 01 00
	00		 je	 $L150510

; 173  : 		if ( "lc_Sellable" == name ) {

  00424	8d 45 f0	 lea	 eax, DWORD PTR _name$[ebp]
  00427	50		 push	 eax
  00428	68 00 00 00 00	 push	 OFFSET FLAT:$SG150502
  0042d	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  00432	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00437	85 c0		 test	 eax, eax
  00439	0f 84 cb 00 00
	00		 je	 $L150501

; 174  : 			m_pSellableList = new CSellableListCtrl();

  0043f	68 b4 00 00 00	 push	 180			; 000000b4H
  00444	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00449	89 45 e4	 mov	 DWORD PTR $T156572[ebp], eax
  0044c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00450	83 7d e4 00	 cmp	 DWORD PTR $T156572[ebp], 0
  00454	74 0d		 je	 SHORT $L156573
  00456	8b 4d e4	 mov	 ecx, DWORD PTR $T156572[ebp]
  00459	e8 00 00 00 00	 call	 ??0CSellableListCtrl@@QAE@XZ ; CSellableListCtrl::CSellableListCtrl
  0045e	89 45 9c	 mov	 DWORD PTR -100+[ebp], eax
  00461	eb 07		 jmp	 SHORT $L156574
$L156573:
  00463	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR -100+[ebp], 0
$L156574:
  0046a	8b 4d 9c	 mov	 ecx, DWORD PTR -100+[ebp]
  0046d	89 4d e8	 mov	 DWORD PTR $T156571[ebp], ecx
  00470	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00474	8b 55 a0	 mov	 edx, DWORD PTR _this$[ebp]
  00477	8b 45 e8	 mov	 eax, DWORD PTR $T156571[ebp]
  0047a	89 82 98 00 00
	00		 mov	 DWORD PTR [edx+152], eax

; 175  : 			m_pSellableList->Create( obj, this, 777 );

  00480	6a 00		 push	 0
  00482	6a 01		 push	 1
  00484	6a 01		 push	 1
  00486	68 09 03 00 00	 push	 777			; 00000309H
  0048b	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  0048e	51		 push	 ecx
  0048f	83 ec 08	 sub	 esp, 8
  00492	8b cc		 mov	 ecx, esp
  00494	89 65 e0	 mov	 DWORD PTR $T156575[ebp], esp
  00497	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  0049a	52		 push	 edx
  0049b	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  004a0	89 45 98	 mov	 DWORD PTR -104+[ebp], eax
  004a3	8b 45 a0	 mov	 eax, DWORD PTR _this$[ebp]
  004a6	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  004ac	e8 00 00 00 00	 call	 ?Create@CSkinListCtrl@@QAEHVCSkinObj@@PAVCSkinWnd@@I_N22@Z ; CSkinListCtrl::Create

; 176  : 			return m_pSellableList;

  004b1	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  004b4	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  004bb	74 11		 je	 SHORT $L156577
  004bd	8b 55 a0	 mov	 edx, DWORD PTR _this$[ebp]
  004c0	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  004c6	83 c0 40	 add	 eax, 64			; 00000040H
  004c9	89 45 94	 mov	 DWORD PTR -108+[ebp], eax
  004cc	eb 07		 jmp	 SHORT $L156578
$L156577:
  004ce	c7 45 94 00 00
	00 00		 mov	 DWORD PTR -108+[ebp], 0
$L156578:
  004d5	8b 4d 94	 mov	 ecx, DWORD PTR -108+[ebp]
  004d8	89 4d dc	 mov	 DWORD PTR $T156576[ebp], ecx
  004db	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  004df	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  004e2	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  004e7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  004eb	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  004ee	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  004f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004fa	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  004fd	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00502	8b 45 dc	 mov	 eax, DWORD PTR $T156576[ebp]
  00505	e9 d9 02 00 00	 jmp	 $L150493
$L150501:

; 177  : 		} else if ( "lc_ToBeSold" == name ) {

  0050a	8d 55 f0	 lea	 edx, DWORD PTR _name$[ebp]
  0050d	52		 push	 edx
  0050e	68 00 00 00 00	 push	 OFFSET FLAT:$SG150511
  00513	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  00518	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0051d	85 c0		 test	 eax, eax
  0051f	0f 84 cb 00 00
	00		 je	 $L150510

; 178  : 			m_pToBeSoldList = new CToBeSoldListCtrl();

  00525	68 b4 00 00 00	 push	 180			; 000000b4H
  0052a	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0052f	89 45 d4	 mov	 DWORD PTR $T156580[ebp], eax
  00532	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00536	83 7d d4 00	 cmp	 DWORD PTR $T156580[ebp], 0
  0053a	74 0d		 je	 SHORT $L156581
  0053c	8b 4d d4	 mov	 ecx, DWORD PTR $T156580[ebp]
  0053f	e8 00 00 00 00	 call	 ??0CToBeSoldListCtrl@@QAE@XZ ; CToBeSoldListCtrl::CToBeSoldListCtrl
  00544	89 45 90	 mov	 DWORD PTR -112+[ebp], eax
  00547	eb 07		 jmp	 SHORT $L156582
$L156581:
  00549	c7 45 90 00 00
	00 00		 mov	 DWORD PTR -112+[ebp], 0
$L156582:
  00550	8b 45 90	 mov	 eax, DWORD PTR -112+[ebp]
  00553	89 45 d8	 mov	 DWORD PTR $T156579[ebp], eax
  00556	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0055a	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  0055d	8b 55 d8	 mov	 edx, DWORD PTR $T156579[ebp]
  00560	89 91 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], edx

; 179  : 			m_pToBeSoldList->Create( obj, this, 778 );

  00566	6a 00		 push	 0
  00568	6a 01		 push	 1
  0056a	6a 01		 push	 1
  0056c	68 0a 03 00 00	 push	 778			; 0000030aH
  00571	8b 45 a0	 mov	 eax, DWORD PTR _this$[ebp]
  00574	50		 push	 eax
  00575	83 ec 08	 sub	 esp, 8
  00578	8b cc		 mov	 ecx, esp
  0057a	89 65 d0	 mov	 DWORD PTR $T156583[ebp], esp
  0057d	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  00580	52		 push	 edx
  00581	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00586	89 45 8c	 mov	 DWORD PTR -116+[ebp], eax
  00589	8b 45 a0	 mov	 eax, DWORD PTR _this$[ebp]
  0058c	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00592	e8 00 00 00 00	 call	 ?Create@CSkinListCtrl@@QAEHVCSkinObj@@PAVCSkinWnd@@I_N22@Z ; CSkinListCtrl::Create

; 180  : 			return m_pToBeSoldList;

  00597	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  0059a	83 b9 9c 00 00
	00 00		 cmp	 DWORD PTR [ecx+156], 0
  005a1	74 11		 je	 SHORT $L156585
  005a3	8b 55 a0	 mov	 edx, DWORD PTR _this$[ebp]
  005a6	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  005ac	83 c0 40	 add	 eax, 64			; 00000040H
  005af	89 45 88	 mov	 DWORD PTR -120+[ebp], eax
  005b2	eb 07		 jmp	 SHORT $L156586
$L156585:
  005b4	c7 45 88 00 00
	00 00		 mov	 DWORD PTR -120+[ebp], 0
$L156586:
  005bb	8b 4d 88	 mov	 ecx, DWORD PTR -120+[ebp]
  005be	89 4d cc	 mov	 DWORD PTR $T156584[ebp], ecx
  005c1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  005c5	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  005c8	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  005cd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  005d1	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  005d4	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  005d9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005e0	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  005e3	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  005e8	8b 45 cc	 mov	 eax, DWORD PTR $T156584[ebp]
  005eb	e9 f3 01 00 00	 jmp	 $L150493
$L150510:

; 183  : 
; 184  : 	if ( "ref" == id ) {

  005f0	8d 55 ec	 lea	 edx, DWORD PTR _id$[ebp]
  005f3	52		 push	 edx
  005f4	68 00 00 00 00	 push	 OFFSET FLAT:$SG150519
  005f9	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  005fe	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00603	85 c0		 test	 eax, eax
  00605	0f 84 ce 00 00
	00		 je	 $L150518

; 185  : 		return m_pSalePrice = new CSkinEdit( obj, this, 700, CSkinEdit::RIGHT | CSkinEdit::READONLY, false, false );

  0060b	68 d8 00 00 00	 push	 216			; 000000d8H
  00610	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00615	89 45 c0	 mov	 DWORD PTR $T156589[ebp], eax
  00618	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0061c	83 7d c0 00	 cmp	 DWORD PTR $T156589[ebp], 0
  00620	74 3e		 je	 SHORT $L156591
  00622	6a 00		 push	 0
  00624	6a 00		 push	 0
  00626	6a 00		 push	 0
  00628	68 02 08 00 00	 push	 2050			; 00000802H
  0062d	68 bc 02 00 00	 push	 700			; 000002bcH
  00632	8b 45 a0	 mov	 eax, DWORD PTR _this$[ebp]
  00635	50		 push	 eax
  00636	83 ec 08	 sub	 esp, 8
  00639	8b cc		 mov	 ecx, esp
  0063b	89 65 bc	 mov	 DWORD PTR $T156590[ebp], esp
  0063e	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  00641	52		 push	 edx
  00642	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00647	89 45 84	 mov	 DWORD PTR -124+[ebp], eax
  0064a	8b 4d c0	 mov	 ecx, DWORD PTR $T156589[ebp]
  0064d	e8 00 00 00 00	 call	 ??0CSkinEdit@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ; CSkinEdit::CSkinEdit
  00652	89 45 80	 mov	 DWORD PTR -128+[ebp], eax
  00655	8b 45 80	 mov	 eax, DWORD PTR -128+[ebp]
  00658	89 85 7c ff ff
	ff		 mov	 DWORD PTR -132+[ebp], eax
  0065e	eb 0a		 jmp	 SHORT $L156592
$L156591:
  00660	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR -132+[ebp], 0
$L156592:
  0066a	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR -132+[ebp]
  00670	89 4d c4	 mov	 DWORD PTR $T156588[ebp], ecx
  00673	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00677	8b 55 a0	 mov	 edx, DWORD PTR _this$[ebp]
  0067a	8b 45 c4	 mov	 eax, DWORD PTR $T156588[ebp]
  0067d	89 82 a4 00 00
	00		 mov	 DWORD PTR [edx+164], eax
  00683	83 7d c4 00	 cmp	 DWORD PTR $T156588[ebp], 0
  00687	74 0e		 je	 SHORT $L156593
  00689	8b 4d c4	 mov	 ecx, DWORD PTR $T156588[ebp]
  0068c	83 c1 60	 add	 ecx, 96			; 00000060H
  0068f	89 8d 78 ff ff
	ff		 mov	 DWORD PTR -136+[ebp], ecx
  00695	eb 0a		 jmp	 SHORT $L156594
$L156593:
  00697	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR -136+[ebp], 0
$L156594:
  006a1	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR -136+[ebp]
  006a7	89 55 c8	 mov	 DWORD PTR $T156587[ebp], edx
  006aa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  006ae	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  006b1	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  006b6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  006ba	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  006bd	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  006c2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006c9	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  006cc	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  006d1	8b 45 c8	 mov	 eax, DWORD PTR $T156587[ebp]
  006d4	e9 0a 01 00 00	 jmp	 $L150493
$L150518:

; 187  : 
; 188  : 	if ( "vb" == id ) {

  006d9	8d 45 ec	 lea	 eax, DWORD PTR _id$[ebp]
  006dc	50		 push	 eax
  006dd	68 00 00 00 00	 push	 OFFSET FLAT:$SG150527
  006e2	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  006e7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  006ec	85 c0		 test	 eax, eax
  006ee	0f 84 97 00 00
	00		 je	 $L150526

; 189  : 		return new CSellBtn( obj, this );

  006f4	6a 14		 push	 20			; 00000014H
  006f6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  006fb	83 c4 04	 add	 esp, 4
  006fe	89 45 b0	 mov	 DWORD PTR $T156597[ebp], eax
  00701	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00705	83 7d b0 00	 cmp	 DWORD PTR $T156597[ebp], 0
  00709	74 37		 je	 SHORT $L156599
  0070b	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  0070e	51		 push	 ecx
  0070f	83 ec 08	 sub	 esp, 8
  00712	8b cc		 mov	 ecx, esp
  00714	89 65 ac	 mov	 DWORD PTR $T156598[ebp], esp
  00717	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  0071a	52		 push	 edx
  0071b	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00720	89 85 74 ff ff
	ff		 mov	 DWORD PTR -140+[ebp], eax
  00726	8b 4d b0	 mov	 ecx, DWORD PTR $T156597[ebp]
  00729	e8 00 00 00 00	 call	 ??0CSellBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSellBtn::CSellBtn
  0072e	89 85 70 ff ff
	ff		 mov	 DWORD PTR -144+[ebp], eax
  00734	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR -144+[ebp]
  0073a	89 85 6c ff ff
	ff		 mov	 DWORD PTR -148+[ebp], eax
  00740	eb 0a		 jmp	 SHORT $L156600
$L156599:
  00742	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR -148+[ebp], 0
$L156600:
  0074c	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR -148+[ebp]
  00752	89 4d b4	 mov	 DWORD PTR $T156596[ebp], ecx
  00755	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00759	8b 55 b4	 mov	 edx, DWORD PTR $T156596[ebp]
  0075c	89 55 b8	 mov	 DWORD PTR $T156595[ebp], edx
  0075f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00763	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  00766	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0076b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0076f	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  00772	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00777	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0077e	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00781	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00786	8b 45 b8	 mov	 eax, DWORD PTR $T156595[ebp]
  00789	eb 58		 jmp	 SHORT $L150493
$L150526:

; 191  : 
; 192  : 	return CSkinWnd::MakeSkinCtrl( obj );

  0078b	83 ec 08	 sub	 esp, 8
  0078e	8b cc		 mov	 ecx, esp
  00790	89 65 a4	 mov	 DWORD PTR $T156602[ebp], esp
  00793	8d 45 08	 lea	 eax, DWORD PTR _obj$[ebp]
  00796	50		 push	 eax
  00797	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0079c	89 85 68 ff ff
	ff		 mov	 DWORD PTR -152+[ebp], eax
  007a2	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  007a5	e8 00 00 00 00	 call	 ?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CSkinWnd::MakeSkinCtrl
  007aa	89 85 64 ff ff
	ff		 mov	 DWORD PTR -156+[ebp], eax
  007b0	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR -156+[ebp]
  007b6	89 4d a8	 mov	 DWORD PTR $T156601[ebp], ecx
  007b9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  007bd	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  007c0	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  007c5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  007c9	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  007cc	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  007d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  007d8	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  007db	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  007e0	8b 45 a8	 mov	 eax, DWORD PTR $T156601[ebp]
$L150493:

; 193  : }

  007e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  007e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  007ed	8b e5		 mov	 esp, ebp
  007ef	5d		 pop	 ebp
  007f0	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L156603:
  00047	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  0004a	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0004f	c3		 ret	 0
$L156604:
  00050	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  00053	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00058	c3		 ret	 0
$L156605:
  00059	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00061	c3		 ret	 0
$L156606:
  00062	8b 45 e4	 mov	 eax, DWORD PTR $T156572[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0006b	c3		 ret	 0
$L156608:
  0006c	8b 45 d4	 mov	 eax, DWORD PTR $T156580[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00075	c3		 ret	 0
$L156610:
  00076	8b 45 c0	 mov	 eax, DWORD PTR $T156589[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0007f	c3		 ret	 0
$L156612:
  00080	8b 45 b0	 mov	 eax, DWORD PTR $T156597[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00089	59		 pop	 ecx
  0008a	c3		 ret	 0
$L156617:
  0008b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156616
  00090	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeSkinCtrl@CSellDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ENDP ; CSellDlg::MakeSkinCtrl
PUBLIC	?GetItemTextColor@CSkinListCtrl@@MAEKH@Z	; CSkinListCtrl::GetItemTextColor
PUBLIC	?GetItemBGColor@CSkinListCtrl@@MAEKH@Z		; CSkinListCtrl::GetItemBGColor
PUBLIC	??_ECSellableListCtrl@@WEA@AEPAXI@Z		; CSellableListCtrl::`vector deleting destructor'
PUBLIC	??_ECSellableListCtrl@@WHE@AEPAXI@Z		; CSellableListCtrl::`vector deleting destructor'
PUBLIC	?OnItemActivate@CSellableListCtrl@@UAEXH_N@Z	; CSellableListCtrl::OnItemActivate
PUBLIC	??_7CSellableListCtrl@@6BCListCtrl@@@		; CSellableListCtrl::`vftable'
PUBLIC	??_7CSellableListCtrl@@6BCSkinCtrl@@@		; CSellableListCtrl::`vftable'
PUBLIC	??_7CSellableListCtrl@@6BCScrollable@@@		; CSellableListCtrl::`vftable'
PUBLIC	??_7CSellableListCtrl@@6BCMouseWheelable@@@	; CSellableListCtrl::`vftable'
PUBLIC	??_GCSellableListCtrl@@UAEPAXI@Z		; CSellableListCtrl::`scalar deleting destructor'
PUBLIC	??_ECSellableListCtrl@@UAEPAXI@Z		; CSellableListCtrl::`vector deleting destructor'
EXTRN	?OnMouseOut@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseOut
EXTRN	?OnMouseDown@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseDown
EXTRN	?OnMouseUp@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseUp
EXTRN	?OnActivate@CSkinCtrl@@UAEXFF@Z:NEAR		; CSkinCtrl::OnActivate
EXTRN	?SetLocation@CScrollable@@UAEXM@Z:NEAR		; CScrollable::SetLocation
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CCmdTarget::GetEventSinkMap
EXTRN	?ChangeLocation@CScrollable@@UAEXH@Z:NEAR	; CScrollable::ChangeLocation
EXTRN	?ChangePage@CScrollable@@UAEXH@Z:NEAR		; CScrollable::ChangePage
EXTRN	?SetRange@CScrollable@@UAEXHH@Z:NEAR		; CScrollable::SetRange
EXTRN	??0CSkinListCtrl@@QAE@H@Z:NEAR			; CSkinListCtrl::CSkinListCtrl
EXTRN	?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ:NEAR ; CListCtrl::GetRuntimeClass
EXTRN	?UpdateMe@CSkinListCtrl@@UAEXXZ:NEAR		; CSkinListCtrl::UpdateMe
EXTRN	?UpdateScrollBar@CSkinListCtrl@@UAEXXZ:NEAR	; CSkinListCtrl::UpdateScrollBar
EXTRN	?OnMouseWheel@CSkinListCtrl@@UAEXIF@Z:NEAR	; CSkinListCtrl::OnMouseWheel
EXTRN	?OnMouseOver@CSkinListCtrl@@UAEXVCPoint@@@Z:NEAR ; CSkinListCtrl::OnMouseOver
EXTRN	?GetMessageMap@CSkinListCtrl@@MBEPBUAFX_MSGMAP@@XZ:NEAR ; CSkinListCtrl::GetMessageMap
EXTRN	?DrawItem@CListCtrl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z:NEAR ; CListCtrl::DrawItem
EXTRN	?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z:NEAR	; CListCtrl::OnChildNotify
EXTRN	?UpdateTracking@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::UpdateTracking
EXTRN	?Refresh@CSkinCtrl@@UAEXXZ:NEAR			; CSkinCtrl::Refresh
EXTRN	?Disable@CSkinCtrl@@UAEHXZ:NEAR			; CSkinCtrl::Disable
EXTRN	?IsDisabled@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::IsDisabled
EXTRN	?Enable@CSkinCtrl@@UAEHXZ:NEAR			; CSkinCtrl::Enable
EXTRN	?Activate@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Activate
EXTRN	?Deactivate@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Deactivate
EXTRN	?Highlight@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Highlight
EXTRN	?Unhighlight@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Unhighlight
EXTRN	?ShowNormal@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowNormal
EXTRN	?ShowDisabled@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowDisabled
EXTRN	?ShowPressed@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowPressed
EXTRN	?ShowHighlighted@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowHighlighted
EXTRN	?OnMouseMove@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseMove
EXTRN	?OnMouseIn@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseIn
;	COMDAT ??_7CSellableListCtrl@@6BCListCtrl@@@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\SellDlg.cpp
CONST	SEGMENT
??_7CSellableListCtrl@@6BCListCtrl@@@ DD FLAT:?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ ; CSellableListCtrl::`vftable'
	DD	FLAT:??_ECSellableListCtrl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CSkinListCtrl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?DrawItem@CListCtrl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
	DD	FLAT:?GetItemTextColor@CSkinListCtrl@@MAEKH@Z
	DD	FLAT:?GetItemBGColor@CSkinListCtrl@@MAEKH@Z
	DD	FLAT:?OnItemActivate@CSellableListCtrl@@UAEXH_N@Z
	DD	FLAT:?OnMouseOver@CSkinListCtrl@@UAEXVCPoint@@@Z
CONST	ENDS
;	COMDAT ??_7CSellableListCtrl@@6BCSkinCtrl@@@
CONST	SEGMENT
??_7CSellableListCtrl@@6BCSkinCtrl@@@ DD FLAT:??_ECSellableListCtrl@@WEA@AEPAXI@Z ; CSellableListCtrl::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinCtrl@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CSkinCtrl@@UAEXFF@Z
CONST	ENDS
;	COMDAT ??_7CSellableListCtrl@@6BCScrollable@@@
CONST	SEGMENT
??_7CSellableListCtrl@@6BCScrollable@@@ DD FLAT:?UpdateMe@CSkinListCtrl@@UAEXXZ ; CSellableListCtrl::`vftable'
	DD	FLAT:?SetLocation@CScrollable@@UAEXM@Z
	DD	FLAT:?ChangeLocation@CScrollable@@UAEXH@Z
	DD	FLAT:?ChangePage@CScrollable@@UAEXH@Z
	DD	FLAT:?SetRange@CScrollable@@UAEXHH@Z
	DD	FLAT:?UpdateScrollBar@CSkinListCtrl@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CSellableListCtrl@@6BCMouseWheelable@@@
CONST	SEGMENT
??_7CSellableListCtrl@@6BCMouseWheelable@@@ DD FLAT:??_ECSellableListCtrl@@WHE@AEPAXI@Z ; CSellableListCtrl::`vftable'
	DD	FLAT:?OnMouseWheel@CSkinListCtrl@@UAEXIF@Z
CONST	ENDS
;	COMDAT ??0CSellableListCtrl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSellableListCtrl@@QAE@XZ PROC NEAR			; CSellableListCtrl::CSellableListCtrl, COMDAT

; 42   : 	CSellableListCtrl() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 5a		 push	 90			; 0000005aH
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CSkinListCtrl@@QAE@H@Z ; CSkinListCtrl::CSkinListCtrl
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSellableListCtrl@@6BCListCtrl@@@ ; CSellableListCtrl::`vftable'
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], OFFSET FLAT:??_7CSellableListCtrl@@6BCSkinCtrl@@@ ; CSellableListCtrl::`vftable'
  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], OFFSET FLAT:??_7CSellableListCtrl@@6BCScrollable@@@ ; CSellableListCtrl::`vftable'
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], OFFSET FLAT:??_7CSellableListCtrl@@6BCMouseWheelable@@@ ; CSellableListCtrl::`vftable'
  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??0CSellableListCtrl@@QAE@XZ ENDP			; CSellableListCtrl::CSellableListCtrl
_TEXT	ENDS
PUBLIC	?OnSellable@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z ; CSellDlg::OnSellable
EXTRN	?GetItemData@CListCtrl@@QBEKH@Z:NEAR		; CListCtrl::GetItemData
;	COMDAT ?OnItemActivate@CSellableListCtrl@@UAEXH_N@Z
_TEXT	SEGMENT
_nItemIndex$ = 8
_bDoubleClick$ = 12
_this$ = -8
?OnItemActivate@CSellableListCtrl@@UAEXH_N@Z PROC NEAR	; CSellableListCtrl::OnItemActivate, COMDAT

; 46   : 	virtual void OnItemActivate ( int nItemIndex, bool bDoubleClick ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 		((CSellDlg*) m_pParentWnd)->OnSellable( GetItemData( nItemIndex ), bDoubleClick );

  00009	8a 45 0c	 mov	 al, BYTE PTR _bDoubleClick$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _nItemIndex$[ebp]
  00010	51		 push	 ecx
  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?GetItemData@CListCtrl@@QBEKH@Z ; CListCtrl::GetItemData
  00019	51		 push	 ecx
  0001a	8b cc		 mov	 ecx, esp
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  00022	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  00028	e8 00 00 00 00	 call	 ?OnSellable@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z ; CSellDlg::OnSellable

; 48   : 	};

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?OnItemActivate@CSellableListCtrl@@UAEXH_N@Z ENDP	; CSellableListCtrl::OnItemActivate
_TEXT	ENDS
PUBLIC	??1CSellableListCtrl@@UAE@XZ			; CSellableListCtrl::~CSellableListCtrl
;	COMDAT ??_GCSellableListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCSellableListCtrl@@UAEPAXI@Z PROC NEAR		; CSellableListCtrl::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSellableListCtrl@@UAE@XZ ; CSellableListCtrl::~CSellableListCtrl
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L150390
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L150390:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCSellableListCtrl@@UAEPAXI@Z ENDP			; CSellableListCtrl::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CSkinListCtrl@@UAE@XZ:NEAR			; CSkinListCtrl::~CSkinListCtrl
;	COMDAT ??1CSellableListCtrl@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSellableListCtrl@@UAE@XZ PROC NEAR			; CSellableListCtrl::~CSellableListCtrl, COMDAT

; 43   : 	virtual ~CSellableListCtrl() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSellableListCtrl@@6BCListCtrl@@@ ; CSellableListCtrl::`vftable'
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], OFFSET FLAT:??_7CSellableListCtrl@@6BCSkinCtrl@@@ ; CSellableListCtrl::`vftable'
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], OFFSET FLAT:??_7CSellableListCtrl@@6BCScrollable@@@ ; CSellableListCtrl::`vftable'
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], OFFSET FLAT:??_7CSellableListCtrl@@6BCMouseWheelable@@@ ; CSellableListCtrl::`vftable'
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??1CSkinListCtrl@@UAE@XZ ; CSkinListCtrl::~CSkinListCtrl
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??1CSellableListCtrl@@UAE@XZ ENDP			; CSellableListCtrl::~CSellableListCtrl
_TEXT	ENDS
PUBLIC	??_ECToBeSoldListCtrl@@WEA@AEPAXI@Z		; CToBeSoldListCtrl::`vector deleting destructor'
PUBLIC	??_ECToBeSoldListCtrl@@WHE@AEPAXI@Z		; CToBeSoldListCtrl::`vector deleting destructor'
PUBLIC	?OnItemActivate@CToBeSoldListCtrl@@UAEXH_N@Z	; CToBeSoldListCtrl::OnItemActivate
PUBLIC	??_7CToBeSoldListCtrl@@6BCListCtrl@@@		; CToBeSoldListCtrl::`vftable'
PUBLIC	??_7CToBeSoldListCtrl@@6BCSkinCtrl@@@		; CToBeSoldListCtrl::`vftable'
PUBLIC	??_7CToBeSoldListCtrl@@6BCScrollable@@@		; CToBeSoldListCtrl::`vftable'
PUBLIC	??_7CToBeSoldListCtrl@@6BCMouseWheelable@@@	; CToBeSoldListCtrl::`vftable'
PUBLIC	??_GCToBeSoldListCtrl@@UAEPAXI@Z		; CToBeSoldListCtrl::`scalar deleting destructor'
PUBLIC	??_ECToBeSoldListCtrl@@UAEPAXI@Z		; CToBeSoldListCtrl::`vector deleting destructor'
;	COMDAT ??_7CToBeSoldListCtrl@@6BCListCtrl@@@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\SellDlg.cpp
CONST	SEGMENT
??_7CToBeSoldListCtrl@@6BCListCtrl@@@ DD FLAT:?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ ; CToBeSoldListCtrl::`vftable'
	DD	FLAT:??_ECToBeSoldListCtrl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CSkinListCtrl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?DrawItem@CListCtrl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
	DD	FLAT:?GetItemTextColor@CSkinListCtrl@@MAEKH@Z
	DD	FLAT:?GetItemBGColor@CSkinListCtrl@@MAEKH@Z
	DD	FLAT:?OnItemActivate@CToBeSoldListCtrl@@UAEXH_N@Z
	DD	FLAT:?OnMouseOver@CSkinListCtrl@@UAEXVCPoint@@@Z
CONST	ENDS
;	COMDAT ??_7CToBeSoldListCtrl@@6BCSkinCtrl@@@
CONST	SEGMENT
??_7CToBeSoldListCtrl@@6BCSkinCtrl@@@ DD FLAT:??_ECToBeSoldListCtrl@@WEA@AEPAXI@Z ; CToBeSoldListCtrl::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinCtrl@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CSkinCtrl@@UAEXFF@Z
CONST	ENDS
;	COMDAT ??_7CToBeSoldListCtrl@@6BCScrollable@@@
CONST	SEGMENT
??_7CToBeSoldListCtrl@@6BCScrollable@@@ DD FLAT:?UpdateMe@CSkinListCtrl@@UAEXXZ ; CToBeSoldListCtrl::`vftable'
	DD	FLAT:?SetLocation@CScrollable@@UAEXM@Z
	DD	FLAT:?ChangeLocation@CScrollable@@UAEXH@Z
	DD	FLAT:?ChangePage@CScrollable@@UAEXH@Z
	DD	FLAT:?SetRange@CScrollable@@UAEXHH@Z
	DD	FLAT:?UpdateScrollBar@CSkinListCtrl@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CToBeSoldListCtrl@@6BCMouseWheelable@@@
CONST	SEGMENT
??_7CToBeSoldListCtrl@@6BCMouseWheelable@@@ DD FLAT:??_ECToBeSoldListCtrl@@WHE@AEPAXI@Z ; CToBeSoldListCtrl::`vftable'
	DD	FLAT:?OnMouseWheel@CSkinListCtrl@@UAEXIF@Z
CONST	ENDS
;	COMDAT ??0CToBeSoldListCtrl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CToBeSoldListCtrl@@QAE@XZ PROC NEAR			; CToBeSoldListCtrl::CToBeSoldListCtrl, COMDAT

; 57   : 	CToBeSoldListCtrl() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 5a		 push	 90			; 0000005aH
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CSkinListCtrl@@QAE@H@Z ; CSkinListCtrl::CSkinListCtrl
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CToBeSoldListCtrl@@6BCListCtrl@@@ ; CToBeSoldListCtrl::`vftable'
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], OFFSET FLAT:??_7CToBeSoldListCtrl@@6BCSkinCtrl@@@ ; CToBeSoldListCtrl::`vftable'
  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], OFFSET FLAT:??_7CToBeSoldListCtrl@@6BCScrollable@@@ ; CToBeSoldListCtrl::`vftable'
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], OFFSET FLAT:??_7CToBeSoldListCtrl@@6BCMouseWheelable@@@ ; CToBeSoldListCtrl::`vftable'
  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??0CToBeSoldListCtrl@@QAE@XZ ENDP			; CToBeSoldListCtrl::CToBeSoldListCtrl
_TEXT	ENDS
PUBLIC	?OnToBeSold@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z ; CSellDlg::OnToBeSold
;	COMDAT ?OnItemActivate@CToBeSoldListCtrl@@UAEXH_N@Z
_TEXT	SEGMENT
_nItemIndex$ = 8
_bDoubleClick$ = 12
_this$ = -8
?OnItemActivate@CToBeSoldListCtrl@@UAEXH_N@Z PROC NEAR	; CToBeSoldListCtrl::OnItemActivate, COMDAT

; 61   : 	virtual void OnItemActivate ( int nItemIndex, bool bDoubleClick ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 		((CSellDlg*) m_pParentWnd)->OnToBeSold( GetItemData( nItemIndex ), bDoubleClick );

  00009	8a 45 0c	 mov	 al, BYTE PTR _bDoubleClick$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _nItemIndex$[ebp]
  00010	51		 push	 ecx
  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?GetItemData@CListCtrl@@QBEKH@Z ; CListCtrl::GetItemData
  00019	51		 push	 ecx
  0001a	8b cc		 mov	 ecx, esp
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  00022	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  00028	e8 00 00 00 00	 call	 ?OnToBeSold@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z ; CSellDlg::OnToBeSold

; 63   : 	};

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?OnItemActivate@CToBeSoldListCtrl@@UAEXH_N@Z ENDP	; CToBeSoldListCtrl::OnItemActivate
_TEXT	ENDS
PUBLIC	??1CToBeSoldListCtrl@@UAE@XZ			; CToBeSoldListCtrl::~CToBeSoldListCtrl
;	COMDAT ??_GCToBeSoldListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCToBeSoldListCtrl@@UAEPAXI@Z PROC NEAR		; CToBeSoldListCtrl::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CToBeSoldListCtrl@@UAE@XZ ; CToBeSoldListCtrl::~CToBeSoldListCtrl
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L150421
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L150421:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCToBeSoldListCtrl@@UAEPAXI@Z ENDP			; CToBeSoldListCtrl::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CToBeSoldListCtrl@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CToBeSoldListCtrl@@UAE@XZ PROC NEAR			; CToBeSoldListCtrl::~CToBeSoldListCtrl, COMDAT

; 58   : 	virtual ~CToBeSoldListCtrl() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CToBeSoldListCtrl@@6BCListCtrl@@@ ; CToBeSoldListCtrl::`vftable'
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], OFFSET FLAT:??_7CToBeSoldListCtrl@@6BCSkinCtrl@@@ ; CToBeSoldListCtrl::`vftable'
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], OFFSET FLAT:??_7CToBeSoldListCtrl@@6BCScrollable@@@ ; CToBeSoldListCtrl::`vftable'
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], OFFSET FLAT:??_7CToBeSoldListCtrl@@6BCMouseWheelable@@@ ; CToBeSoldListCtrl::`vftable'
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??1CSkinListCtrl@@UAE@XZ ; CSkinListCtrl::~CSkinListCtrl
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??1CToBeSoldListCtrl@@UAE@XZ ENDP			; CToBeSoldListCtrl::~CToBeSoldListCtrl
_TEXT	ENDS
EXTRN	?CloseSelf@CSkinWnd@@UAEX_N@Z:NEAR		; CSkinWnd::CloseSelf
_TEXT	SEGMENT
_bTransient$ = 8
_this$ = -4
?CloseSelf@CSellDlg@@UAEX_N@Z PROC NEAR			; CSellDlg::CloseSelf

; 197  : {

  007f3	55		 push	 ebp
  007f4	8b ec		 mov	 ebp, esp
  007f6	51		 push	 ecx
  007f7	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 198  : 	g_pSellDialog = NULL;

  007fa	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pSellDialog@@3PAVCSellDlg@@A, 0 ; g_pSellDialog

; 199  : 
; 200  : 	if ( m_pQuantity ) {

  00804	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00807	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  0080e	74 29		 je	 SHORT $L150540

; 201  : 		m_pQuantity->CloseSelf( true );

  00810	6a 01		 push	 1
  00812	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00815	8b 89 a8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+168]
  0081b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0081e	8b 82 a8 00 00
	00		 mov	 eax, DWORD PTR [edx+168]
  00824	8b 10		 mov	 edx, DWORD PTR [eax]
  00826	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 202  : 		m_pQuantity = NULL;

  0082c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0082f	c7 80 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+168], 0
$L150540:

; 204  : 
; 205  : 	CSkinWnd::CloseSelf( bTransient );

  00839	8a 4d 08	 mov	 cl, BYTE PTR _bTransient$[ebp]
  0083c	51		 push	 ecx
  0083d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00840	e8 00 00 00 00	 call	 ?CloseSelf@CSkinWnd@@UAEX_N@Z ; CSkinWnd::CloseSelf

; 206  : }

  00845	8b e5		 mov	 esp, ebp
  00847	5d		 pop	 ebp
  00848	c2 04 00	 ret	 4
?CloseSelf@CSellDlg@@UAEX_N@Z ENDP			; CSellDlg::CloseSelf
_TEXT	ENDS
PUBLIC	??0CSCI_WorldEgo@@QAE@G@Z			; CSCI_WorldEgo::CSCI_WorldEgo
PUBLIC	?get_pManaObj@CSCI_WorldEgo@@QAEFXZ		; CSCI_WorldEgo::get_pManaObj
PUBLIC	?set_pDirectObject@CSCI_WorldObject@@QAEXF@Z	; CSCI_WorldObject::set_pDirectObject
PUBLIC	??0CSCI_WorldObject@@QAE@ABV0@@Z		; CSCI_WorldObject::CSCI_WorldObject
EXTRN	?handleVerb@CSCI_WorldObject@@QAEXF@Z:NEAR	; CSCI_WorldObject::handleVerb
_TEXT	SEGMENT
_nVerbID$ = 8
_hObject$ = 12
_this$ = -20
_hEgo$ = -4
$T156635 = -8
?HandleVerb@CSellDlg@@UAEHHVCSCI_WorldObject@@@Z PROC NEAR ; CSellDlg::HandleVerb

; 210  : {

  0084b	55		 push	 ebp
  0084c	8b ec		 mov	 ebp, esp
  0084e	83 ec 18	 sub	 esp, 24			; 00000018H
  00851	56		 push	 esi
  00852	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 211  : 	CSCI_WorldEgo hEgo = pm.GetGlobal( gSCI_ego );

  00855	6a 01		 push	 1
  00857	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?pm@@3VPMachine@@A
  0085c	e8 00 00 00 00	 call	 ?GetGlobal@PMachine@@QAEFH@Z ; PMachine::GetGlobal
  00861	50		 push	 eax
  00862	8d 4d fc	 lea	 ecx, DWORD PTR _hEgo$[ebp]
  00865	e8 00 00 00 00	 call	 ??0CSCI_WorldEgo@@QAE@G@Z ; CSCI_WorldEgo::CSCI_WorldEgo

; 212  : 
; 213  : 	if ( (Property) hObject == (Property) hEgo.get_pManaObj() )

  0086a	8d 4d 0c	 lea	 ecx, DWORD PTR _hObject$[ebp]
  0086d	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00872	0f bf f0	 movsx	 esi, ax
  00875	8d 4d fc	 lea	 ecx, DWORD PTR _hEgo$[ebp]
  00878	e8 00 00 00 00	 call	 ?get_pManaObj@CSCI_WorldEgo@@QAEFXZ ; CSCI_WorldEgo::get_pManaObj
  0087d	0f bf c0	 movsx	 eax, ax
  00880	3b f0		 cmp	 esi, eax
  00882	75 12		 jne	 SHORT $L150549

; 214  : 		hObject = 0;

  00884	6a 00		 push	 0
  00886	8d 4d f8	 lea	 ecx, DWORD PTR $T156635[ebp]
  00889	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0088e	66 8b 4d f8	 mov	 cx, WORD PTR $T156635[ebp]
  00892	66 89 4d 0c	 mov	 WORD PTR _hObject$[ebp], cx
$L150549:

; 215  : 
; 216  : 	switch ( nVerbID ) {

  00896	8b 55 08	 mov	 edx, DWORD PTR _nVerbID$[ebp]
  00899	89 55 e8	 mov	 DWORD PTR -24+[ebp], edx
  0089c	83 7d e8 03	 cmp	 DWORD PTR -24+[ebp], 3
  008a0	74 50		 je	 SHORT $L150559
  008a2	81 7d e8 5d 2b
	00 00		 cmp	 DWORD PTR -24+[ebp], 11101 ; 00002b5dH
  008a9	74 0b		 je	 SHORT $L150555
  008ab	81 7d e8 5e 2b
	00 00		 cmp	 DWORD PTR -24+[ebp], 11102 ; 00002b5eH
  008b2	74 20		 je	 SHORT $L150557
  008b4	eb 57		 jmp	 SHORT $L150552
$L150555:

; 218  : 			OnSellable ( hObject, true );

  008b6	6a 01		 push	 1
  008b8	51		 push	 ecx
  008b9	8b cc		 mov	 ecx, esp
  008bb	8d 45 0c	 lea	 eax, DWORD PTR _hObject$[ebp]
  008be	50		 push	 eax
  008bf	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  008c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008c7	81 e9 94 00 00
	00		 sub	 ecx, 148		; 00000094H
  008cd	e8 00 00 00 00	 call	 ?OnSellable@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z ; CSellDlg::OnSellable

; 220  : 
; 221  : 		break;

  008d2	eb 39		 jmp	 SHORT $L150552
$L150557:

; 224  : 			OnToBeSold ( hObject, true );

  008d4	6a 01		 push	 1
  008d6	51		 push	 ecx
  008d7	8b cc		 mov	 ecx, esp
  008d9	8d 55 0c	 lea	 edx, DWORD PTR _hObject$[ebp]
  008dc	52		 push	 edx
  008dd	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  008e2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008e5	81 e9 94 00 00
	00		 sub	 ecx, 148		; 00000094H
  008eb	e8 00 00 00 00	 call	 ?OnToBeSold@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z ; CSellDlg::OnToBeSold

; 226  : 
; 227  : 		break;

  008f0	eb 1b		 jmp	 SHORT $L150552
$L150559:

; 230  : 			hEgo.set_pDirectObject( hObject );

  008f2	8d 4d 0c	 lea	 ecx, DWORD PTR _hObject$[ebp]
  008f5	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  008fa	50		 push	 eax
  008fb	8d 4d fc	 lea	 ecx, DWORD PTR _hEgo$[ebp]
  008fe	e8 00 00 00 00	 call	 ?set_pDirectObject@CSCI_WorldObject@@QAEXF@Z ; CSCI_WorldObject::set_pDirectObject

; 231  : 			hEgo.handleVerb( _VERB_LOOKAT );

  00903	6a 03		 push	 3
  00905	8d 4d fc	 lea	 ecx, DWORD PTR _hEgo$[ebp]
  00908	e8 00 00 00 00	 call	 ?handleVerb@CSCI_WorldObject@@QAEXF@Z ; CSCI_WorldObject::handleVerb
$L150552:

; 236  : 
; 237  : 	return true;

  0090d	b8 01 00 00 00	 mov	 eax, 1

; 238  : }

  00912	5e		 pop	 esi
  00913	8b e5		 mov	 esp, ebp
  00915	5d		 pop	 ebp
  00916	c2 08 00	 ret	 8
?HandleVerb@CSellDlg@@UAEHHVCSCI_WorldObject@@@Z ENDP	; CSellDlg::HandleVerb
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@ABV0@@Z			; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_WorldObject@@QAE@ABV0@@Z PROC NEAR		; CSCI_WorldObject::CSCI_WorldObject, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@ABV0@@Z ; CSCI_Actor::CSCI_Actor
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_WorldObject@@QAE@ABV0@@Z ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@ABV0@@Z			; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Actor@@QAE@ABV0@@Z PROC NEAR			; CSCI_Actor::CSCI_Actor, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@ABV0@@Z ; CSCI_Prop::CSCI_Prop
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Actor@@QAE@ABV0@@Z ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@ABV0@@Z			; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Prop@@QAE@ABV0@@Z PROC NEAR			; CSCI_Prop::CSCI_Prop, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@ABV0@@Z ; CSCI_View::CSCI_View
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Prop@@QAE@ABV0@@Z ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@ABV0@@Z			; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_View@@QAE@ABV0@@Z PROC NEAR			; CSCI_View::CSCI_View, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@ABV0@@Z ; CSCI_Feature::CSCI_Feature
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_View@@QAE@ABV0@@Z ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@ABV0@@Z			; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Feature@@QAE@ABV0@@Z PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@ABV0@@Z ; CSCI_BitMap::CSCI_BitMap
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Feature@@QAE@ABV0@@Z ENDP			; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@ABV0@@Z			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_BitMap@@QAE@ABV0@@Z PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@ABV0@@Z ; CSCI_Rectangle::CSCI_Rectangle
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_BitMap@@QAE@ABV0@@Z ENDP			; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@ABV0@@Z			; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Rectangle@@QAE@ABV0@@Z PROC NEAR		; CSCI_Rectangle::CSCI_Rectangle, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABV0@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Rectangle@@QAE@ABV0@@Z ENDP			; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Object@@QAE@ABV0@@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@ABV0@@Z ENDP			; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	??BCString@@QBEPBDXZ				; CString::operator char const *
PUBLIC	?get_pCommand@CSCI_NetMsg@@QAEFXZ		; CSCI_NetMsg::get_pCommand
PUBLIC	?get_pAckCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ; CSCI_NetMsg::get_pAckCmd
PUBLIC	?get_pNakCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ; CSCI_NetMsg::get_pNakCmd
PUBLIC	?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ	; CSCI_NetMsg::get_pInfo
PUBLIC	?HandleMsg@CSellDlg@@SAXVCSCI_NetMsg@@@Z	; CSellDlg::HandleMsg
PUBLIC	??0CSCI_LongInt@@QAE@ABVObjectID@@@Z		; CSCI_LongInt::CSCI_LongInt
PUBLIC	??0CSCI_LongInt@@QAE@G@Z			; CSCI_LongInt::CSCI_LongInt
PUBLIC	?get_lowWord@CSCI_LongInt@@QAEFXZ		; CSCI_LongInt::get_lowWord
PUBLIC	?set_nValue@CSCI_LongInt@@QAEXH@Z		; CSCI_LongInt::set_nValue
EXTRN	?Clone@ObjectID@@QAE?AV1@XZ:NEAR		; ObjectID::Clone
EXTRN	??0TextID@@QAE@XZ:NEAR				; TextID::TextID
EXTRN	??4TextID@@QAEAAV0@PBD@Z:NEAR			; TextID::operator=
EXTRN	?setMessage@CSCI_WorldObject@@QAEXF@Z:NEAR	; CSCI_WorldObject::setMessage
EXTRN	?dispose@CSCI_Object@@QAEXXZ:NEAR		; CSCI_Object::dispose
EXTRN	?addValue@CSCI_WorldObject@@QAEXF@Z:NEAR	; CSCI_WorldObject::addValue
EXTRN	?subManaValue@CSCI_WorldObject@@QAEXF@Z:NEAR	; CSCI_WorldObject::subManaValue
EXTRN	?SkinMessage@@YA_NPAD0H@Z:NEAR			; SkinMessage
_DATA	SEGMENT
	ORG $+1
$SG150599 DB	'RoomZero', 00H
	ORG $+3
$SG150600 DB	'Sorry you do not have anything I want.', 00H
	ORG $+1
$SG150601 DB	'Sale', 00H
	ORG $+3
$SG150618 DB	'LongInt', 00H
$SG150622 DB	'You received %d gold from the shopkeeper.', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T156656 DD	019930520H
	DD	02H
	DD	FLAT:$T156658
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156658 DD	0ffffffffH
	DD	FLAT:$L156653
	DD	00H
	DD	FLAT:$L156654
xdata$x	ENDS
_TEXT	SEGMENT
_hData$ = 8
_data$ = -20
_hRoomZero$150598 = -24
_nServID$150605 = -52
_nGold$150606 = -32
_nMana$150607 = -48
_nPrice$150613 = -56
_hEgo$150614 = -36
_hLong$150615 = -40
_sMessage$150621 = -28
_text$150623 = -44
$T156647 = -60
$T156648 = -64
$T156649 = -68
$T156650 = -72
$T156651 = -76
$T156652 = -80
__$EHRec$ = -12
?HandleMsg@CSellDlg@@SAXVCSCI_NetMsg@@@Z PROC NEAR	; CSellDlg::HandleMsg

; 242  : {

  00919	55		 push	 ebp
  0091a	8b ec		 mov	 ebp, esp
  0091c	6a ff		 push	 -1
  0091e	68 00 00 00 00	 push	 $L156657
  00923	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00929	50		 push	 eax
  0092a	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00931	83 ec 48	 sub	 esp, 72			; 00000048H

; 243  : 	PackedData data( hData );

  00934	51		 push	 ecx
  00935	8b cc		 mov	 ecx, esp
  00937	89 65 c4	 mov	 DWORD PTR $T156647[ebp], esp
  0093a	8d 45 08	 lea	 eax, DWORD PTR _hData$[ebp]
  0093d	50		 push	 eax
  0093e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  00943	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  00946	e8 00 00 00 00	 call	 ??0PackedData@@QAE@VObjectID@@@Z ; PackedData::PackedData
  0094b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 244  : 
; 245  : 	switch ( hData.get_pCommand() ) {

  00952	8d 4d 08	 lea	 ecx, DWORD PTR _hData$[ebp]
  00955	e8 00 00 00 00	 call	 ?get_pCommand@CSCI_NetMsg@@QAEFXZ ; CSCI_NetMsg::get_pCommand
  0095a	0f bf c8	 movsx	 ecx, ax
  0095d	89 4d ac	 mov	 DWORD PTR -84+[ebp], ecx
  00960	83 7d ac 19	 cmp	 DWORD PTR -84+[ebp], 25	; 00000019H
  00964	74 7d		 je	 SHORT $L150602
  00966	83 7d ac 1a	 cmp	 DWORD PTR -84+[ebp], 26	; 0000001aH
  0096a	74 05		 je	 SHORT $L150593
  0096c	e9 d5 01 00 00	 jmp	 $L150590
$L150593:

; 247  : 			if ( hData.get_pNakCmd().get_lowWord() == REALM_GET_SELL_PRICES ) {

  00971	8d 55 c0	 lea	 edx, DWORD PTR $T156648[ebp]
  00974	52		 push	 edx
  00975	8d 4d 08	 lea	 ecx, DWORD PTR _hData$[ebp]
  00978	e8 00 00 00 00	 call	 ?get_pNakCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ; CSCI_NetMsg::get_pNakCmd
  0097d	8b c8		 mov	 ecx, eax
  0097f	e8 00 00 00 00	 call	 ?get_lowWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_lowWord
  00984	0f bf c0	 movsx	 eax, ax
  00987	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0098c	75 50		 jne	 SHORT $L150597

; 248  : 				if ( hData.get_pInfo().get_lowWord() == _ERR_TOO_EXPENSIVE ) {

  0098e	8d 4d bc	 lea	 ecx, DWORD PTR $T156649[ebp]
  00991	51		 push	 ecx
  00992	8d 4d 08	 lea	 ecx, DWORD PTR _hData$[ebp]
  00995	e8 00 00 00 00	 call	 ?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ; CSCI_NetMsg::get_pInfo
  0099a	8b c8		 mov	 ecx, eax
  0099c	e8 00 00 00 00	 call	 ?get_lowWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_lowWord
  009a1	0f bf d0	 movsx	 edx, ax
  009a4	81 fa 1e 27 00
	00		 cmp	 edx, 10014		; 0000271eH
  009aa	75 32		 jne	 SHORT $L150597

; 249  : 					CSCI_RoomZero hRoomZero = GetClassByName( "RoomZero" );

  009ac	68 00 00 00 00	 push	 OFFSET FLAT:$SG150599
  009b1	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  009b6	83 c4 04	 add	 esp, 4
  009b9	50		 push	 eax
  009ba	8d 4d e8	 lea	 ecx, DWORD PTR _hRoomZero$150598[ebp]
  009bd	e8 00 00 00 00	 call	 ??0CSCI_RoomZero@@QAE@G@Z ; CSCI_RoomZero::CSCI_RoomZero

; 250  : 					hRoomZero.controlOn();

  009c2	8d 4d e8	 lea	 ecx, DWORD PTR _hRoomZero$150598[ebp]
  009c5	e8 00 00 00 00	 call	 ?controlOn@CSCI_Game@@QAEXXZ ; CSCI_Game::controlOn

; 251  : 
; 252  : 					SkinMessage( "Sale", "Sorry you do not have anything I want." );

  009ca	6a 00		 push	 0
  009cc	68 00 00 00 00	 push	 OFFSET FLAT:$SG150600
  009d1	68 00 00 00 00	 push	 OFFSET FLAT:$SG150601
  009d6	e8 00 00 00 00	 call	 ?SkinMessage@@YA_NPAD0H@Z ; SkinMessage
  009db	83 c4 0c	 add	 esp, 12			; 0000000cH
$L150597:

; 256  : 
; 257  : 		break;

  009de	e9 63 01 00 00	 jmp	 $L150590
$L150602:

; 260  : 			if ( hData.get_pAckCmd().get_lowWord() == REALM_MASS_SELL ) {

  009e3	8d 45 b8	 lea	 eax, DWORD PTR $T156650[ebp]
  009e6	50		 push	 eax
  009e7	8d 4d 08	 lea	 ecx, DWORD PTR _hData$[ebp]
  009ea	e8 00 00 00 00	 call	 ?get_pAckCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ; CSCI_NetMsg::get_pAckCmd
  009ef	8b c8		 mov	 ecx, eax
  009f1	e8 00 00 00 00	 call	 ?get_lowWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_lowWord
  009f6	0f bf c8	 movsx	 ecx, ax
  009f9	83 f9 7e	 cmp	 ecx, 126		; 0000007eH
  009fc	0f 85 44 01 00
	00		 jne	 $L150604

; 261  : 				int nServID;
; 262  : 				int nGold = 0;

  00a02	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nGold$150606[ebp], 0

; 263  : 				int nMana = 0;

  00a09	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _nMana$150607[ebp], 0
$L150609:

; 264  : 
; 265  : 				while ( ( nServID = data.getLong() ) != -1 ) {

  00a10	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  00a13	e8 00 00 00 00	 call	 ?getLong@PackedData@@QAEHXZ ; PackedData::getLong
  00a18	89 45 cc	 mov	 DWORD PTR _nServID$150605[ebp], eax
  00a1b	83 7d cc ff	 cmp	 DWORD PTR _nServID$150605[ebp], -1
  00a1f	74 41		 je	 SHORT $L150610

; 266  : 					if ( nServID ) {

  00a21	83 7d cc 00	 cmp	 DWORD PTR _nServID$150605[ebp], 0
  00a25	74 12		 je	 SHORT $L150611

; 267  : 						nGold += data.getLong();

  00a27	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  00a2a	e8 00 00 00 00	 call	 ?getLong@PackedData@@QAEHXZ ; PackedData::getLong
  00a2f	8b 55 e0	 mov	 edx, DWORD PTR _nGold$150606[ebp]
  00a32	03 d0		 add	 edx, eax
  00a34	89 55 e0	 mov	 DWORD PTR _nGold$150606[ebp], edx

; 268  : 					} else {

  00a37	eb 27		 jmp	 SHORT $L150612
$L150611:

; 269  : 						int nPrice = data.getLong();

  00a39	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  00a3c	e8 00 00 00 00	 call	 ?getLong@PackedData@@QAEHXZ ; PackedData::getLong
  00a41	89 45 c8	 mov	 DWORD PTR _nPrice$150613[ebp], eax

; 270  : 
; 271  : 						nGold += nPrice;

  00a44	8b 45 e0	 mov	 eax, DWORD PTR _nGold$150606[ebp]
  00a47	03 45 c8	 add	 eax, DWORD PTR _nPrice$150613[ebp]
  00a4a	89 45 e0	 mov	 DWORD PTR _nGold$150606[ebp], eax

; 272  : 						nMana += nPrice / 5;

  00a4d	8b 45 c8	 mov	 eax, DWORD PTR _nPrice$150613[ebp]
  00a50	99		 cdq
  00a51	b9 05 00 00 00	 mov	 ecx, 5
  00a56	f7 f9		 idiv	 ecx
  00a58	8b 55 d0	 mov	 edx, DWORD PTR _nMana$150607[ebp]
  00a5b	03 d0		 add	 edx, eax
  00a5d	89 55 d0	 mov	 DWORD PTR _nMana$150607[ebp], edx
$L150612:

; 274  : 				}

  00a60	eb ae		 jmp	 SHORT $L150609
$L150610:

; 275  : 
; 276  : 				CSCI_WorldObject hEgo = pm.GetGlobal( gSCI_ego );

  00a62	6a 01		 push	 1
  00a64	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?pm@@3VPMachine@@A
  00a69	e8 00 00 00 00	 call	 ?GetGlobal@PMachine@@QAEFH@Z ; PMachine::GetGlobal
  00a6e	50		 push	 eax
  00a6f	8d 4d dc	 lea	 ecx, DWORD PTR _hEgo$150614[ebp]
  00a72	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject

; 277  : 				CSCI_LongInt hLong = CSCI_LongInt(GetClassByName( "LongInt" )).Clone();

  00a77	8d 45 b0	 lea	 eax, DWORD PTR $T156652[ebp]
  00a7a	50		 push	 eax
  00a7b	68 00 00 00 00	 push	 OFFSET FLAT:$SG150618
  00a80	e8 00 00 00 00	 call	 ?GetClassByName@@YAGPAD@Z ; GetClassByName
  00a85	83 c4 04	 add	 esp, 4
  00a88	50		 push	 eax
  00a89	8d 4d b4	 lea	 ecx, DWORD PTR $T156651[ebp]
  00a8c	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  00a91	8b c8		 mov	 ecx, eax
  00a93	e8 00 00 00 00	 call	 ?Clone@ObjectID@@QAE?AV1@XZ ; ObjectID::Clone
  00a98	50		 push	 eax
  00a99	8d 4d d8	 lea	 ecx, DWORD PTR _hLong$150615[ebp]
  00a9c	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@ABVObjectID@@@Z ; CSCI_LongInt::CSCI_LongInt

; 278  : 
; 279  : 				if ( nGold ) {

  00aa1	83 7d e0 00	 cmp	 DWORD PTR _nGold$150606[ebp], 0
  00aa5	74 1d		 je	 SHORT $L150619

; 280  : 					hLong.set_nValue( nGold );

  00aa7	8b 4d e0	 mov	 ecx, DWORD PTR _nGold$150606[ebp]
  00aaa	51		 push	 ecx
  00aab	8d 4d d8	 lea	 ecx, DWORD PTR _hLong$150615[ebp]
  00aae	e8 00 00 00 00	 call	 ?set_nValue@CSCI_LongInt@@QAEXH@Z ; CSCI_LongInt::set_nValue

; 281  : 					hEgo.addValue( hLong );

  00ab3	8d 4d d8	 lea	 ecx, DWORD PTR _hLong$150615[ebp]
  00ab6	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00abb	50		 push	 eax
  00abc	8d 4d dc	 lea	 ecx, DWORD PTR _hEgo$150614[ebp]
  00abf	e8 00 00 00 00	 call	 ?addValue@CSCI_WorldObject@@QAEXF@Z ; CSCI_WorldObject::addValue
$L150619:

; 283  : 
; 284  : 				if ( nMana ) {

  00ac4	83 7d d0 00	 cmp	 DWORD PTR _nMana$150607[ebp], 0
  00ac8	74 1d		 je	 SHORT $L150620

; 285  : 					hLong.set_nValue( nMana );

  00aca	8b 55 d0	 mov	 edx, DWORD PTR _nMana$150607[ebp]
  00acd	52		 push	 edx
  00ace	8d 4d d8	 lea	 ecx, DWORD PTR _hLong$150615[ebp]
  00ad1	e8 00 00 00 00	 call	 ?set_nValue@CSCI_LongInt@@QAEXH@Z ; CSCI_LongInt::set_nValue

; 286  : 					hEgo.subManaValue( hLong );

  00ad6	8d 4d d8	 lea	 ecx, DWORD PTR _hLong$150615[ebp]
  00ad9	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00ade	50		 push	 eax
  00adf	8d 4d dc	 lea	 ecx, DWORD PTR _hEgo$150614[ebp]
  00ae2	e8 00 00 00 00	 call	 ?subManaValue@CSCI_WorldObject@@QAEXF@Z ; CSCI_WorldObject::subManaValue
$L150620:

; 288  : 
; 289  : 				hLong.dispose();

  00ae7	8d 4d d8	 lea	 ecx, DWORD PTR _hLong$150615[ebp]
  00aea	e8 00 00 00 00	 call	 ?dispose@CSCI_Object@@QAEXXZ ; CSCI_Object::dispose

; 290  : 
; 291  : 				CString sMessage;

  00aef	8d 4d e4	 lea	 ecx, DWORD PTR _sMessage$150621[ebp]
  00af2	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  00af7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 292  : 
; 293  : 				sMessage.Format( "You received %d gold from the shopkeeper.", nGold );

  00afb	8b 45 e0	 mov	 eax, DWORD PTR _nGold$150606[ebp]
  00afe	50		 push	 eax
  00aff	68 00 00 00 00	 push	 OFFSET FLAT:$SG150622
  00b04	8d 4d e4	 lea	 ecx, DWORD PTR _sMessage$150621[ebp]
  00b07	51		 push	 ecx
  00b08	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  00b0d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 294  : 				TextID text;

  00b10	8d 4d d4	 lea	 ecx, DWORD PTR _text$150623[ebp]
  00b13	e8 00 00 00 00	 call	 ??0TextID@@QAE@XZ	; TextID::TextID

; 295  : 
; 296  : 				text = sMessage;

  00b18	8d 4d e4	 lea	 ecx, DWORD PTR _sMessage$150621[ebp]
  00b1b	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  00b20	50		 push	 eax
  00b21	8d 4d d4	 lea	 ecx, DWORD PTR _text$150623[ebp]
  00b24	e8 00 00 00 00	 call	 ??4TextID@@QAEAAV0@PBD@Z ; TextID::operator=

; 297  : 				hEgo.setMessage( text );

  00b29	8d 4d d4	 lea	 ecx, DWORD PTR _text$150623[ebp]
  00b2c	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00b31	50		 push	 eax
  00b32	8d 4d dc	 lea	 ecx, DWORD PTR _hEgo$150614[ebp]
  00b35	e8 00 00 00 00	 call	 ?setMessage@CSCI_WorldObject@@QAEXF@Z ; CSCI_WorldObject::setMessage

; 298  : 			}

  00b3a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00b3e	8d 4d e4	 lea	 ecx, DWORD PTR _sMessage$150621[ebp]
  00b41	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
$L150604:
$L150590:

; 303  : }

  00b46	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00b4d	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  00b50	e8 00 00 00 00	 call	 ??1PackedData@@UAE@XZ	; PackedData::~PackedData
  00b55	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b58	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00b5f	8b e5		 mov	 esp, ebp
  00b61	5d		 pop	 ebp
  00b62	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L156653:
  00095	8d 4d ec	 lea	 ecx, DWORD PTR _data$[ebp]
  00098	e8 00 00 00 00	 call	 ??1PackedData@@UAE@XZ	; PackedData::~PackedData
  0009d	c3		 ret	 0
$L156654:
  0009e	8d 4d e4	 lea	 ecx, DWORD PTR _sMessage$150621[ebp]
  000a1	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  000a6	c3		 ret	 0
$L156657:
  000a7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156656
  000ac	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?HandleMsg@CSellDlg@@SAXVCSCI_NetMsg@@@Z ENDP		; CSellDlg::HandleMsg
PUBLIC	??0CSellQuantityDlg@@QAE@XZ			; CSellQuantityDlg::CSellQuantityDlg
PUBLIC	?Create@CSellQuantityDlg@@QAEHPAVCSellDlg@@H@Z	; CSellQuantityDlg::Create
EXTRN	??0CVerbDialog@@QAE@XZ:NEAR			; CVerbDialog::CVerbDialog
EXTRN	?Create@CVerbDialog@@QAEHVCSCI_WorldObject@@PAVCVerbHandler@@@Z:NEAR ; CVerbDialog::Create
EXTRN	?AddVerb@CVerbDialog@@QAEXHH@Z:NEAR		; CVerbDialog::AddVerb
EXTRN	?Show@CVerbDialog@@QAEXXZ:NEAR			; CVerbDialog::Show
EXTRN	?CopyLine@CSkinListCtrl@@QAEHPAV1@HH@Z:NEAR	; CSkinListCtrl::CopyLine
EXTRN	?FindItem@CSkinListCtrl@@QAEHH@Z:NEAR		; CSkinListCtrl::FindItem
EXTRN	?DeleteItem@CSkinListCtrl@@QAEHH@Z:NEAR		; CSkinListCtrl::DeleteItem
EXTRN	?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z:NEAR ; CListCtrl::GetItemText
EXTRN	__imp__atol:NEAR
_DATA	SEGMENT
	ORG $+2
$SG150634 DB	'%d', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T156679 DD	019930520H
	DD	04H
	DD	FLAT:$T156681
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156681 DD	0ffffffffH
	DD	FLAT:$L156674
	DD	0ffffffffH
	DD	FLAT:$L156675
	DD	01H
	DD	FLAT:$L156676
	DD	0ffffffffH
	DD	FLAT:$L156677
xdata$x	ENDS
_TEXT	SEGMENT
$T156673 = -64
__$EHRec$ = -12
_hObject$ = 8
_bDoubleClick$ = 12
_this$ = -68
_nItemIndex$150631 = -20
_sPrice$150632 = -16
_nSellItemIndex$150636 = -24
_sSell$150637 = -28
_nMana$150639 = -32
_pVerbDlg$150646 = -36
_hEgo$150654 = -40
$T156660 = -44
$T156661 = -48
$T156664 = -52
$T156665 = -56
$T156670 = -60
?OnSellable@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z PROC NEAR ; CSellDlg::OnSellable

; 307  : {

  00b63	55		 push	 ebp
  00b64	8b ec		 mov	 ebp, esp
  00b66	6a ff		 push	 -1
  00b68	68 00 00 00 00	 push	 $L156680
  00b6d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00b73	50		 push	 eax
  00b74	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00b7b	83 ec 48	 sub	 esp, 72			; 00000048H
  00b7e	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 308  : 	if ( bDoubleClick ) {

  00b81	8b 45 0c	 mov	 eax, DWORD PTR _bDoubleClick$[ebp]
  00b84	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b89	85 c0		 test	 eax, eax
  00b8b	0f 84 b2 01 00
	00		 je	 $L150629

; 309  : 		if ( hObject ) {

  00b91	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  00b94	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00b99	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00b9e	85 c0		 test	 eax, eax
  00ba0	0f 84 c9 00 00
	00		 je	 $L150630

; 310  : 			int nItemIndex = m_pSellableList->FindItem( hObject );

  00ba6	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  00ba9	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00bae	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00bb3	50		 push	 eax
  00bb4	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00bb7	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  00bbd	e8 00 00 00 00	 call	 ?FindItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::FindItem
  00bc2	89 45 ec	 mov	 DWORD PTR _nItemIndex$150631[ebp], eax

; 311  : 
; 312  : 			m_pToBeSoldList->CopyLine ( m_pSellableList, nItemIndex );

  00bc5	6a ff		 push	 -1
  00bc7	8b 55 ec	 mov	 edx, DWORD PTR _nItemIndex$150631[ebp]
  00bca	52		 push	 edx
  00bcb	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00bce	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00bd4	51		 push	 ecx
  00bd5	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00bd8	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  00bde	e8 00 00 00 00	 call	 ?CopyLine@CSkinListCtrl@@QAEHPAV1@HH@Z ; CSkinListCtrl::CopyLine

; 313  : 
; 314  : 			CString sPrice = m_pSellableList->GetItemText( nItemIndex, 1 );

  00be3	6a 01		 push	 1
  00be5	8b 45 ec	 mov	 eax, DWORD PTR _nItemIndex$150631[ebp]
  00be8	50		 push	 eax
  00be9	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$150632[ebp]
  00bec	51		 push	 ecx
  00bed	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00bf0	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  00bf6	e8 00 00 00 00	 call	 ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z ; CListCtrl::GetItemText
  00bfb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 315  : 
; 316  : 			m_pSellableList->DeleteItem( nItemIndex );

  00c02	8b 45 ec	 mov	 eax, DWORD PTR _nItemIndex$150631[ebp]
  00c05	50		 push	 eax
  00c06	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c09	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  00c0f	e8 00 00 00 00	 call	 ?DeleteItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::DeleteItem

; 317  : 
; 318  : 			m_nSalePrice += atol( sPrice );

  00c14	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$150632[ebp]
  00c17	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  00c1c	50		 push	 eax
  00c1d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  00c23	83 c4 04	 add	 esp, 4
  00c26	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00c29	8b 8a a0 00 00
	00		 mov	 ecx, DWORD PTR [edx+160]
  00c2f	03 c8		 add	 ecx, eax
  00c31	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00c34	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 319  : 			m_pSalePrice->SetFormattedText( "%d", m_nSalePrice );

  00c3a	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00c3d	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00c43	51		 push	 ecx
  00c44	68 00 00 00 00	 push	 OFFSET FLAT:$SG150634
  00c49	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00c4c	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00c52	50		 push	 eax
  00c53	e8 00 00 00 00	 call	 ?SetFormattedText@CSkinEdit@@QAAHPADZZ ; CSkinEdit::SetFormattedText
  00c58	83 c4 0c	 add	 esp, 12			; 0000000cH

; 320  : 		} else {

  00c5b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00c62	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$150632[ebp]
  00c65	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00c6a	e9 cf 00 00 00	 jmp	 $L150635
$L150630:

; 321  : 			int nSellItemIndex = m_pSellableList->FindItem( 0 );

  00c6f	6a 00		 push	 0
  00c71	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c74	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  00c7a	e8 00 00 00 00	 call	 ?FindItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::FindItem
  00c7f	89 45 e8	 mov	 DWORD PTR _nSellItemIndex$150636[ebp], eax

; 322  : 
; 323  : 			CString sSell = m_pSellableList->GetItemText( nSellItemIndex, 0 );

  00c82	6a 00		 push	 0
  00c84	8b 55 e8	 mov	 edx, DWORD PTR _nSellItemIndex$150636[ebp]
  00c87	52		 push	 edx
  00c88	8d 45 e4	 lea	 eax, DWORD PTR _sSell$150637[ebp]
  00c8b	50		 push	 eax
  00c8c	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c8f	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  00c95	e8 00 00 00 00	 call	 ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z ; CListCtrl::GetItemText
  00c9a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 324  : 
; 325  : 			int nMana = atol( sSell );

  00ca1	8d 4d e4	 lea	 ecx, DWORD PTR _sSell$150637[ebp]
  00ca4	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  00ca9	50		 push	 eax
  00caa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  00cb0	83 c4 04	 add	 esp, 4
  00cb3	89 45 e0	 mov	 DWORD PTR _nMana$150639[ebp], eax

; 326  : 
; 327  : 			if ( m_pQuantity )

  00cb6	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00cb9	83 ba a8 00 00
	00 00		 cmp	 DWORD PTR [edx+168], 0
  00cc0	74 1c		 je	 SHORT $L150640

; 328  : 				m_pQuantity->CloseSelf( true );

  00cc2	6a 01		 push	 1
  00cc4	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00cc7	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00ccd	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00cd0	8b 82 a8 00 00
	00		 mov	 eax, DWORD PTR [edx+168]
  00cd6	8b 10		 mov	 edx, DWORD PTR [eax]
  00cd8	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L150640:

; 329  : 
; 330  : 			(m_pQuantity = new CSellQuantityDlg())->Create( this, nMana );

  00cde	68 a0 00 00 00	 push	 160			; 000000a0H
  00ce3	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00ce8	89 45 d0	 mov	 DWORD PTR $T156661[ebp], eax
  00ceb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00cef	83 7d d0 00	 cmp	 DWORD PTR $T156661[ebp], 0
  00cf3	74 0d		 je	 SHORT $L156662
  00cf5	8b 4d d0	 mov	 ecx, DWORD PTR $T156661[ebp]
  00cf8	e8 00 00 00 00	 call	 ??0CSellQuantityDlg@@QAE@XZ ; CSellQuantityDlg::CSellQuantityDlg
  00cfd	89 45 b8	 mov	 DWORD PTR -72+[ebp], eax
  00d00	eb 07		 jmp	 SHORT $L156663
$L156662:
  00d02	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR -72+[ebp], 0
$L156663:
  00d09	8b 45 b8	 mov	 eax, DWORD PTR -72+[ebp]
  00d0c	89 45 d4	 mov	 DWORD PTR $T156660[ebp], eax
  00d0f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00d13	8b 4d e0	 mov	 ecx, DWORD PTR _nMana$150639[ebp]
  00d16	51		 push	 ecx
  00d17	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00d1a	52		 push	 edx
  00d1b	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00d1e	8b 4d d4	 mov	 ecx, DWORD PTR $T156660[ebp]
  00d21	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx
  00d27	8b 4d d4	 mov	 ecx, DWORD PTR $T156660[ebp]
  00d2a	e8 00 00 00 00	 call	 ?Create@CSellQuantityDlg@@QAEHPAVCSellDlg@@H@Z ; CSellQuantityDlg::Create

; 331  : 		}

  00d2f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00d36	8d 4d e4	 lea	 ecx, DWORD PTR _sSell$150637[ebp]
  00d39	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
$L150635:

; 332  : 	} else {

  00d3e	e9 fd 00 00 00	 jmp	 $L150645
$L150629:

; 333  : 		CVerbDialog *pVerbDlg = new CVerbDialog();

  00d43	68 e8 00 00 00	 push	 232			; 000000e8H
  00d48	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00d4d	89 45 c8	 mov	 DWORD PTR $T156665[ebp], eax
  00d50	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00d57	83 7d c8 00	 cmp	 DWORD PTR $T156665[ebp], 0
  00d5b	74 0d		 je	 SHORT $L156666
  00d5d	8b 4d c8	 mov	 ecx, DWORD PTR $T156665[ebp]
  00d60	e8 00 00 00 00	 call	 ??0CVerbDialog@@QAE@XZ	; CVerbDialog::CVerbDialog
  00d65	89 45 b4	 mov	 DWORD PTR -76+[ebp], eax
  00d68	eb 07		 jmp	 SHORT $L156667
$L156666:
  00d6a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR -76+[ebp], 0
$L156667:
  00d71	8b 55 b4	 mov	 edx, DWORD PTR -76+[ebp]
  00d74	89 55 cc	 mov	 DWORD PTR $T156664[ebp], edx
  00d77	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00d7e	8b 45 cc	 mov	 eax, DWORD PTR $T156664[ebp]
  00d81	89 45 dc	 mov	 DWORD PTR _pVerbDlg$150646[ebp], eax

; 334  : 
; 335  : 		if ( hObject ) {

  00d84	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  00d87	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00d8c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00d91	85 c0		 test	 eax, eax
  00d93	74 44		 je	 SHORT $L150651

; 336  : 			pVerbDlg->Create ( hObject, this );

  00d95	83 7d bc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00d99	74 0e		 je	 SHORT $L156668
  00d9b	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d9e	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00da4	89 4d b0	 mov	 DWORD PTR -80+[ebp], ecx
  00da7	eb 07		 jmp	 SHORT $L156669
$L156668:
  00da9	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR -80+[ebp], 0
$L156669:
  00db0	8b 55 b0	 mov	 edx, DWORD PTR -80+[ebp]
  00db3	52		 push	 edx
  00db4	51		 push	 ecx
  00db5	8b cc		 mov	 ecx, esp
  00db7	89 65 c4	 mov	 DWORD PTR $T156670[ebp], esp
  00dba	8d 45 08	 lea	 eax, DWORD PTR _hObject$[ebp]
  00dbd	50		 push	 eax
  00dbe	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  00dc3	8b 4d dc	 mov	 ecx, DWORD PTR _pVerbDlg$150646[ebp]
  00dc6	e8 00 00 00 00	 call	 ?Create@CVerbDialog@@QAEHVCSCI_WorldObject@@PAVCVerbHandler@@@Z ; CVerbDialog::Create

; 337  : 			pVerbDlg->AddVerb ( _VERB_LOOKAT );

  00dcb	6a 01		 push	 1
  00dcd	6a 03		 push	 3
  00dcf	8b 4d dc	 mov	 ecx, DWORD PTR _pVerbDlg$150646[ebp]
  00dd2	e8 00 00 00 00	 call	 ?AddVerb@CVerbDialog@@QAEXHH@Z ; CVerbDialog::AddVerb

; 338  : 		} else {

  00dd7	eb 50		 jmp	 SHORT $L150653
$L150651:

; 339  : 			CSCI_WorldEgo hEgo = pm.GetGlobal( gSCI_ego );

  00dd9	6a 01		 push	 1
  00ddb	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?pm@@3VPMachine@@A
  00de0	e8 00 00 00 00	 call	 ?GetGlobal@PMachine@@QAEFH@Z ; PMachine::GetGlobal
  00de5	50		 push	 eax
  00de6	8d 4d d8	 lea	 ecx, DWORD PTR _hEgo$150654[ebp]
  00de9	e8 00 00 00 00	 call	 ??0CSCI_WorldEgo@@QAE@G@Z ; CSCI_WorldEgo::CSCI_WorldEgo

; 340  : 
; 341  : 			pVerbDlg->Create ( hEgo.get_pManaObj(), this );

  00dee	83 7d bc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00df2	74 0e		 je	 SHORT $L156671
  00df4	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00df7	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00dfd	89 4d ac	 mov	 DWORD PTR -84+[ebp], ecx
  00e00	eb 07		 jmp	 SHORT $L156672
$L156671:
  00e02	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR -84+[ebp], 0
$L156672:
  00e09	8b 55 ac	 mov	 edx, DWORD PTR -84+[ebp]
  00e0c	52		 push	 edx
  00e0d	8d 4d d8	 lea	 ecx, DWORD PTR _hEgo$150654[ebp]
  00e10	e8 00 00 00 00	 call	 ?get_pManaObj@CSCI_WorldEgo@@QAEFXZ ; CSCI_WorldEgo::get_pManaObj
  00e15	51		 push	 ecx
  00e16	8b cc		 mov	 ecx, esp
  00e18	89 65 c0	 mov	 DWORD PTR $T156673[ebp], esp
  00e1b	50		 push	 eax
  00e1c	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  00e21	8b 4d dc	 mov	 ecx, DWORD PTR _pVerbDlg$150646[ebp]
  00e24	e8 00 00 00 00	 call	 ?Create@CVerbDialog@@QAEHVCSCI_WorldObject@@PAVCVerbHandler@@@Z ; CVerbDialog::Create
$L150653:

; 343  : 
; 344  : 		pVerbDlg->AddVerb ( _VSELL_ADD );

  00e29	6a 01		 push	 1
  00e2b	68 5d 2b 00 00	 push	 11101			; 00002b5dH
  00e30	8b 4d dc	 mov	 ecx, DWORD PTR _pVerbDlg$150646[ebp]
  00e33	e8 00 00 00 00	 call	 ?AddVerb@CVerbDialog@@QAEXHH@Z ; CVerbDialog::AddVerb

; 345  : 		pVerbDlg->Show();

  00e38	8b 4d dc	 mov	 ecx, DWORD PTR _pVerbDlg$150646[ebp]
  00e3b	e8 00 00 00 00	 call	 ?Show@CVerbDialog@@QAEXXZ ; CVerbDialog::Show
$L150645:

; 347  : }

  00e40	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00e43	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00e4a	8b e5		 mov	 esp, ebp
  00e4c	5d		 pop	 ebp
  00e4d	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L156674:
  000b1	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$150632[ebp]
  000b4	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  000b9	c3		 ret	 0
$L156675:
  000ba	8d 4d e4	 lea	 ecx, DWORD PTR _sSell$150637[ebp]
  000bd	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  000c2	c3		 ret	 0
$L156676:
  000c3	8b 45 d0	 mov	 eax, DWORD PTR $T156661[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000cc	c3		 ret	 0
$L156677:
  000cd	8b 45 c8	 mov	 eax, DWORD PTR $T156665[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  000d6	c3		 ret	 0
$L156680:
  000d7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156679
  000dc	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnSellable@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z ENDP	; CSellDlg::OnSellable
EXTRN	??4CString@@QAEABV0@ABV0@@Z:NEAR		; CString::operator=
EXTRN	?SetItemText@CListCtrl@@QAEHHHPBD@Z:NEAR	; CListCtrl::SetItemText
_DATA	SEGMENT
	ORG $+1
$SG150666 DB	'%d', 00H
	ORG $+1
$SG150676 DB	'%d Mana Crystals', 00H
	ORG $+3
$SG150677 DB	'%d', 00H
	ORG $+1
$SG150680 DB	'%d Mana Crystals', 00H
	ORG $+3
$SG150681 DB	'%d', 00H
	ORG $+1
$SG150682 DB	'%d', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T156701 DD	019930520H
	DD	06H
	DD	FLAT:$T156703
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156703 DD	0ffffffffH
	DD	FLAT:$L156694
	DD	0ffffffffH
	DD	FLAT:$L156695
	DD	01H
	DD	FLAT:$L156696
	DD	02H
	DD	FLAT:$L156697
	DD	03H
	DD	FLAT:$L156698
	DD	0ffffffffH
	DD	FLAT:$L156699
xdata$x	ENDS
_TEXT	SEGMENT
$T156683 = -56
$T156684 = -60
$T156685 = -64
$T156690 = -68
$T156693 = -72
__$EHRec$ = -12
_hObject$ = 8
_bDoubleClick$ = 12
_this$ = -76
_nItemIndex$150663 = -20
_sPrice$150664 = -16
_nSoldItemIndex$150668 = -44
_nSellItemIndex$150669 = -28
_sSold$150670 = -32
_sSell$150672 = -36
_sPrice$150673 = -24
_nMana$150674 = -40
_pVerbDlg$150684 = -48
_hEgo$150692 = -52
?OnToBeSold@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z PROC NEAR ; CSellDlg::OnToBeSold

; 351  : {

  00e50	55		 push	 ebp
  00e51	8b ec		 mov	 ebp, esp
  00e53	6a ff		 push	 -1
  00e55	68 00 00 00 00	 push	 $L156702
  00e5a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00e60	50		 push	 eax
  00e61	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00e68	83 ec 54	 sub	 esp, 84			; 00000054H
  00e6b	56		 push	 esi
  00e6c	89 4d b4	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 	if ( bDoubleClick ) {

  00e6f	8b 45 0c	 mov	 eax, DWORD PTR _bDoubleClick$[ebp]
  00e72	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e77	85 c0		 test	 eax, eax
  00e79	0f 84 0f 03 00
	00		 je	 $L150661

; 353  : 		if ( hObject ) {

  00e7f	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  00e82	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00e87	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00e8c	85 c0		 test	 eax, eax
  00e8e	0f 84 c9 00 00
	00		 je	 $L150662

; 354  : 			int nItemIndex = m_pToBeSoldList->FindItem( hObject );

  00e94	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  00e97	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  00e9c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00ea1	50		 push	 eax
  00ea2	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ea5	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
  00eab	e8 00 00 00 00	 call	 ?FindItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::FindItem
  00eb0	89 45 ec	 mov	 DWORD PTR _nItemIndex$150663[ebp], eax

; 355  : 
; 356  : 			CString sPrice = m_pToBeSoldList->GetItemText( nItemIndex, 1 );

  00eb3	6a 01		 push	 1
  00eb5	8b 55 ec	 mov	 edx, DWORD PTR _nItemIndex$150663[ebp]
  00eb8	52		 push	 edx
  00eb9	8d 45 f0	 lea	 eax, DWORD PTR _sPrice$150664[ebp]
  00ebc	50		 push	 eax
  00ebd	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ec0	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
  00ec6	e8 00 00 00 00	 call	 ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z ; CListCtrl::GetItemText
  00ecb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 357  : 
; 358  : 			m_pSellableList->CopyLine ( m_pToBeSoldList, nItemIndex );

  00ed2	6a ff		 push	 -1
  00ed4	8b 55 ec	 mov	 edx, DWORD PTR _nItemIndex$150663[ebp]
  00ed7	52		 push	 edx
  00ed8	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  00edb	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00ee1	51		 push	 ecx
  00ee2	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  00ee5	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  00eeb	e8 00 00 00 00	 call	 ?CopyLine@CSkinListCtrl@@QAEHPAV1@HH@Z ; CSkinListCtrl::CopyLine

; 359  : 			m_pToBeSoldList->DeleteItem( nItemIndex );

  00ef0	8b 45 ec	 mov	 eax, DWORD PTR _nItemIndex$150663[ebp]
  00ef3	50		 push	 eax
  00ef4	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ef7	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
  00efd	e8 00 00 00 00	 call	 ?DeleteItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::DeleteItem

; 360  : 
; 361  : 			m_nSalePrice -= atol( sPrice );

  00f02	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$150664[ebp]
  00f05	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  00f0a	50		 push	 eax
  00f0b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  00f11	83 c4 04	 add	 esp, 4
  00f14	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  00f17	8b 8a a0 00 00
	00		 mov	 ecx, DWORD PTR [edx+160]
  00f1d	2b c8		 sub	 ecx, eax
  00f1f	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  00f22	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 362  : 			m_pSalePrice->SetFormattedText( "%d", m_nSalePrice );

  00f28	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  00f2b	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00f31	51		 push	 ecx
  00f32	68 00 00 00 00	 push	 OFFSET FLAT:$SG150666
  00f37	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  00f3a	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00f40	50		 push	 eax
  00f41	e8 00 00 00 00	 call	 ?SetFormattedText@CSkinEdit@@QAAHPADZZ ; CSkinEdit::SetFormattedText
  00f46	83 c4 0c	 add	 esp, 12			; 0000000cH

; 363  : 		} else {

  00f49	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00f50	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$150664[ebp]
  00f53	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00f58	e9 2c 02 00 00	 jmp	 $L150667
$L150662:

; 364  : 			int nSoldItemIndex = m_pToBeSoldList->FindItem( 0 );

  00f5d	6a 00		 push	 0
  00f5f	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00f62	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
  00f68	e8 00 00 00 00	 call	 ?FindItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::FindItem
  00f6d	89 45 d4	 mov	 DWORD PTR _nSoldItemIndex$150668[ebp], eax

; 365  : 			int nSellItemIndex = m_pSellableList->FindItem( 0 );

  00f70	6a 00		 push	 0
  00f72	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  00f75	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  00f7b	e8 00 00 00 00	 call	 ?FindItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::FindItem
  00f80	89 45 e4	 mov	 DWORD PTR _nSellItemIndex$150669[ebp], eax

; 366  : 
; 367  : 			CString sSold = m_pToBeSoldList->GetItemText( nSoldItemIndex, 0 );

  00f83	6a 00		 push	 0
  00f85	8b 45 d4	 mov	 eax, DWORD PTR _nSoldItemIndex$150668[ebp]
  00f88	50		 push	 eax
  00f89	8d 4d e0	 lea	 ecx, DWORD PTR _sSold$150670[ebp]
  00f8c	51		 push	 ecx
  00f8d	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  00f90	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  00f96	e8 00 00 00 00	 call	 ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z ; CListCtrl::GetItemText
  00f9b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 368  : 			CString sSell;

  00fa2	8d 4d dc	 lea	 ecx, DWORD PTR _sSell$150672[ebp]
  00fa5	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  00faa	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 369  : 			CString sPrice;

  00fae	8d 4d e8	 lea	 ecx, DWORD PTR _sPrice$150673[ebp]
  00fb1	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  00fb6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 370  : 
; 371  : 			long nMana;
; 372  : 
; 373  : 			if ( nSellItemIndex == -1 ) {

  00fba	83 7d e4 ff	 cmp	 DWORD PTR _nSellItemIndex$150669[ebp], -1
  00fbe	75 77		 jne	 SHORT $L150675

; 374  : 				nMana = atol( sSold );

  00fc0	8d 4d e0	 lea	 ecx, DWORD PTR _sSold$150670[ebp]
  00fc3	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  00fc8	50		 push	 eax
  00fc9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  00fcf	83 c4 04	 add	 esp, 4
  00fd2	89 45 d8	 mov	 DWORD PTR _nMana$150674[ebp], eax

; 375  : 
; 376  : 				sSell.Format( "%d Mana Crystals", nMana );

  00fd5	8b 45 d8	 mov	 eax, DWORD PTR _nMana$150674[ebp]
  00fd8	50		 push	 eax
  00fd9	68 00 00 00 00	 push	 OFFSET FLAT:$SG150676
  00fde	8d 4d dc	 lea	 ecx, DWORD PTR _sSell$150672[ebp]
  00fe1	51		 push	 ecx
  00fe2	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  00fe7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 377  : 				sPrice.Format( "%d", ( nMana * 5 ) );

  00fea	8b 55 d8	 mov	 edx, DWORD PTR _nMana$150674[ebp]
  00fed	6b d2 05	 imul	 edx, 5
  00ff0	52		 push	 edx
  00ff1	68 00 00 00 00	 push	 OFFSET FLAT:$SG150677
  00ff6	8d 45 e8	 lea	 eax, DWORD PTR _sPrice$150673[ebp]
  00ff9	50		 push	 eax
  00ffa	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  00fff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 378  : 
; 379  : 				m_pToBeSoldList->DeleteItem( nSoldItemIndex );

  01002	8b 4d d4	 mov	 ecx, DWORD PTR _nSoldItemIndex$150668[ebp]
  01005	51		 push	 ecx
  01006	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  01009	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  0100f	e8 00 00 00 00	 call	 ?DeleteItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::DeleteItem

; 380  : 				m_pSellableList->AddLine( 0, 2, sSell, sPrice );

  01014	8b 45 e8	 mov	 eax, DWORD PTR _sPrice$150673[ebp]
  01017	50		 push	 eax
  01018	8b 4d dc	 mov	 ecx, DWORD PTR _sSell$150672[ebp]
  0101b	51		 push	 ecx
  0101c	6a 02		 push	 2
  0101e	6a 00		 push	 0
  01020	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  01023	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  01029	50		 push	 eax
  0102a	e8 00 00 00 00	 call	 ?AddLine@CSkinListCtrl@@QAAHHHZZ ; CSkinListCtrl::AddLine
  0102f	83 c4 14	 add	 esp, 20			; 00000014H

; 381  : 			} else {

  01032	e9 e1 00 00 00	 jmp	 $L150678
$L150675:

; 382  : 				sSell = m_pSellableList->GetItemText( nSellItemIndex, 0 );

  01037	6a 00		 push	 0
  01039	8b 4d e4	 mov	 ecx, DWORD PTR _nSellItemIndex$150669[ebp]
  0103c	51		 push	 ecx
  0103d	8d 55 c8	 lea	 edx, DWORD PTR $T156683[ebp]
  01040	52		 push	 edx
  01041	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  01044	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0104a	e8 00 00 00 00	 call	 ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z ; CListCtrl::GetItemText
  0104f	89 45 b0	 mov	 DWORD PTR -80+[ebp], eax
  01052	8b 4d b0	 mov	 ecx, DWORD PTR -80+[ebp]
  01055	89 4d ac	 mov	 DWORD PTR -84+[ebp], ecx
  01058	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0105c	8b 55 ac	 mov	 edx, DWORD PTR -84+[ebp]
  0105f	52		 push	 edx
  01060	8d 4d dc	 lea	 ecx, DWORD PTR _sSell$150672[ebp]
  01063	e8 00 00 00 00	 call	 ??4CString@@QAEABV0@ABV0@@Z ; CString::operator=
  01068	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0106c	8d 4d c8	 lea	 ecx, DWORD PTR $T156683[ebp]
  0106f	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 383  : 
; 384  : 				nMana = atol( sSold ) + atol( sSell );

  01074	8d 4d e0	 lea	 ecx, DWORD PTR _sSold$150670[ebp]
  01077	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  0107c	50		 push	 eax
  0107d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  01083	83 c4 04	 add	 esp, 4
  01086	8b f0		 mov	 esi, eax
  01088	8d 4d dc	 lea	 ecx, DWORD PTR _sSell$150672[ebp]
  0108b	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01090	50		 push	 eax
  01091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  01097	83 c4 04	 add	 esp, 4
  0109a	03 f0		 add	 esi, eax
  0109c	89 75 d8	 mov	 DWORD PTR _nMana$150674[ebp], esi

; 385  : 
; 386  : 				sSell.Format( "%d Mana Crystals", nMana );

  0109f	8b 45 d8	 mov	 eax, DWORD PTR _nMana$150674[ebp]
  010a2	50		 push	 eax
  010a3	68 00 00 00 00	 push	 OFFSET FLAT:$SG150680
  010a8	8d 4d dc	 lea	 ecx, DWORD PTR _sSell$150672[ebp]
  010ab	51		 push	 ecx
  010ac	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  010b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 387  : 				sPrice.Format( "%d", ( nMana * 5 ) );

  010b4	8b 55 d8	 mov	 edx, DWORD PTR _nMana$150674[ebp]
  010b7	6b d2 05	 imul	 edx, 5
  010ba	52		 push	 edx
  010bb	68 00 00 00 00	 push	 OFFSET FLAT:$SG150681
  010c0	8d 45 e8	 lea	 eax, DWORD PTR _sPrice$150673[ebp]
  010c3	50		 push	 eax
  010c4	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  010c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 388  : 
; 389  : 				m_pToBeSoldList->DeleteItem( nSoldItemIndex );

  010cc	8b 4d d4	 mov	 ecx, DWORD PTR _nSoldItemIndex$150668[ebp]
  010cf	51		 push	 ecx
  010d0	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  010d3	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  010d9	e8 00 00 00 00	 call	 ?DeleteItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::DeleteItem

; 390  : 				m_pSellableList->SetItemText( nSellItemIndex, 0, sSell );

  010de	8d 4d dc	 lea	 ecx, DWORD PTR _sSell$150672[ebp]
  010e1	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  010e6	50		 push	 eax
  010e7	6a 00		 push	 0
  010e9	8b 45 e4	 mov	 eax, DWORD PTR _nSellItemIndex$150669[ebp]
  010ec	50		 push	 eax
  010ed	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  010f0	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  010f6	e8 00 00 00 00	 call	 ?SetItemText@CListCtrl@@QAEHHHPBD@Z ; CListCtrl::SetItemText

; 391  : 				m_pSellableList->SetItemText( nSellItemIndex, 1, sPrice );

  010fb	8d 4d e8	 lea	 ecx, DWORD PTR _sPrice$150673[ebp]
  010fe	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01103	50		 push	 eax
  01104	6a 01		 push	 1
  01106	8b 55 e4	 mov	 edx, DWORD PTR _nSellItemIndex$150669[ebp]
  01109	52		 push	 edx
  0110a	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  0110d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01113	e8 00 00 00 00	 call	 ?SetItemText@CListCtrl@@QAEHHHPBD@Z ; CListCtrl::SetItemText
$L150678:

; 393  : 
; 394  : 			m_nSalePrice -= atol( sSold ) * 5;

  01118	8d 4d e0	 lea	 ecx, DWORD PTR _sSold$150670[ebp]
  0111b	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01120	50		 push	 eax
  01121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  01127	83 c4 04	 add	 esp, 4
  0112a	6b c0 05	 imul	 eax, 5
  0112d	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  01130	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  01136	2b d0		 sub	 edx, eax
  01138	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  0113b	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx

; 395  : 			m_pSalePrice->SetFormattedText( "%d", m_nSalePrice );

  01141	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  01144	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  0114a	52		 push	 edx
  0114b	68 00 00 00 00	 push	 OFFSET FLAT:$SG150682
  01150	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  01153	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  01159	51		 push	 ecx
  0115a	e8 00 00 00 00	 call	 ?SetFormattedText@CSkinEdit@@QAAHPADZZ ; CSkinEdit::SetFormattedText
  0115f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 396  : 		}

  01162	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01166	8d 4d e8	 lea	 ecx, DWORD PTR _sPrice$150673[ebp]
  01169	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0116e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01172	8d 4d dc	 lea	 ecx, DWORD PTR _sSell$150672[ebp]
  01175	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0117a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01181	8d 4d e0	 lea	 ecx, DWORD PTR _sSold$150670[ebp]
  01184	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
$L150667:

; 397  : 	} else {

  01189	e9 fd 00 00 00	 jmp	 $L150683
$L150661:

; 398  : 		CVerbDialog *pVerbDlg = new CVerbDialog();

  0118e	68 e8 00 00 00	 push	 232			; 000000e8H
  01193	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  01198	89 45 c0	 mov	 DWORD PTR $T156685[ebp], eax
  0119b	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  011a2	83 7d c0 00	 cmp	 DWORD PTR $T156685[ebp], 0
  011a6	74 0d		 je	 SHORT $L156686
  011a8	8b 4d c0	 mov	 ecx, DWORD PTR $T156685[ebp]
  011ab	e8 00 00 00 00	 call	 ??0CVerbDialog@@QAE@XZ	; CVerbDialog::CVerbDialog
  011b0	89 45 a8	 mov	 DWORD PTR -88+[ebp], eax
  011b3	eb 07		 jmp	 SHORT $L156687
$L156686:
  011b5	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR -88+[ebp], 0
$L156687:
  011bc	8b 55 a8	 mov	 edx, DWORD PTR -88+[ebp]
  011bf	89 55 c4	 mov	 DWORD PTR $T156684[ebp], edx
  011c2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  011c9	8b 45 c4	 mov	 eax, DWORD PTR $T156684[ebp]
  011cc	89 45 d0	 mov	 DWORD PTR _pVerbDlg$150684[ebp], eax

; 399  : 
; 400  : 		if ( hObject ) {

  011cf	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  011d2	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  011d7	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  011dc	85 c0		 test	 eax, eax
  011de	74 44		 je	 SHORT $L150689

; 401  : 			pVerbDlg->Create ( hObject, this );

  011e0	83 7d b4 00	 cmp	 DWORD PTR _this$[ebp], 0
  011e4	74 0e		 je	 SHORT $L156688
  011e6	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  011e9	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  011ef	89 4d a4	 mov	 DWORD PTR -92+[ebp], ecx
  011f2	eb 07		 jmp	 SHORT $L156689
$L156688:
  011f4	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR -92+[ebp], 0
$L156689:
  011fb	8b 55 a4	 mov	 edx, DWORD PTR -92+[ebp]
  011fe	52		 push	 edx
  011ff	51		 push	 ecx
  01200	8b cc		 mov	 ecx, esp
  01202	89 65 bc	 mov	 DWORD PTR $T156690[ebp], esp
  01205	8d 45 08	 lea	 eax, DWORD PTR _hObject$[ebp]
  01208	50		 push	 eax
  01209	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  0120e	8b 4d d0	 mov	 ecx, DWORD PTR _pVerbDlg$150684[ebp]
  01211	e8 00 00 00 00	 call	 ?Create@CVerbDialog@@QAEHVCSCI_WorldObject@@PAVCVerbHandler@@@Z ; CVerbDialog::Create

; 402  : 			pVerbDlg->AddVerb ( _VERB_LOOKAT );

  01216	6a 01		 push	 1
  01218	6a 03		 push	 3
  0121a	8b 4d d0	 mov	 ecx, DWORD PTR _pVerbDlg$150684[ebp]
  0121d	e8 00 00 00 00	 call	 ?AddVerb@CVerbDialog@@QAEXHH@Z ; CVerbDialog::AddVerb

; 403  : 		} else {

  01222	eb 50		 jmp	 SHORT $L150691
$L150689:

; 404  : 			CSCI_WorldEgo hEgo = pm.GetGlobal( gSCI_ego );

  01224	6a 01		 push	 1
  01226	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?pm@@3VPMachine@@A
  0122b	e8 00 00 00 00	 call	 ?GetGlobal@PMachine@@QAEFH@Z ; PMachine::GetGlobal
  01230	50		 push	 eax
  01231	8d 4d cc	 lea	 ecx, DWORD PTR _hEgo$150692[ebp]
  01234	e8 00 00 00 00	 call	 ??0CSCI_WorldEgo@@QAE@G@Z ; CSCI_WorldEgo::CSCI_WorldEgo

; 405  : 
; 406  : 			pVerbDlg->Create ( hEgo.get_pManaObj(), this );

  01239	83 7d b4 00	 cmp	 DWORD PTR _this$[ebp], 0
  0123d	74 0e		 je	 SHORT $L156691
  0123f	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  01242	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  01248	89 4d a0	 mov	 DWORD PTR -96+[ebp], ecx
  0124b	eb 07		 jmp	 SHORT $L156692
$L156691:
  0124d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR -96+[ebp], 0
$L156692:
  01254	8b 55 a0	 mov	 edx, DWORD PTR -96+[ebp]
  01257	52		 push	 edx
  01258	8d 4d cc	 lea	 ecx, DWORD PTR _hEgo$150692[ebp]
  0125b	e8 00 00 00 00	 call	 ?get_pManaObj@CSCI_WorldEgo@@QAEFXZ ; CSCI_WorldEgo::get_pManaObj
  01260	51		 push	 ecx
  01261	8b cc		 mov	 ecx, esp
  01263	89 65 b8	 mov	 DWORD PTR $T156693[ebp], esp
  01266	50		 push	 eax
  01267	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  0126c	8b 4d d0	 mov	 ecx, DWORD PTR _pVerbDlg$150684[ebp]
  0126f	e8 00 00 00 00	 call	 ?Create@CVerbDialog@@QAEHVCSCI_WorldObject@@PAVCVerbHandler@@@Z ; CVerbDialog::Create
$L150691:

; 408  : 
; 409  : 		pVerbDlg->AddVerb ( _VSELL_REMOVE );

  01274	6a 01		 push	 1
  01276	68 5e 2b 00 00	 push	 11102			; 00002b5eH
  0127b	8b 4d d0	 mov	 ecx, DWORD PTR _pVerbDlg$150684[ebp]
  0127e	e8 00 00 00 00	 call	 ?AddVerb@CVerbDialog@@QAEXHH@Z ; CVerbDialog::AddVerb

; 410  : 		pVerbDlg->Show();

  01283	8b 4d d0	 mov	 ecx, DWORD PTR _pVerbDlg$150684[ebp]
  01286	e8 00 00 00 00	 call	 ?Show@CVerbDialog@@QAEXXZ ; CVerbDialog::Show
$L150683:

; 412  : }

  0128b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0128e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01295	5e		 pop	 esi
  01296	8b e5		 mov	 esp, ebp
  01298	5d		 pop	 ebp
  01299	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L156694:
  000e1	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$150664[ebp]
  000e4	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  000e9	c3		 ret	 0
$L156695:
  000ea	8d 4d e0	 lea	 ecx, DWORD PTR _sSold$150670[ebp]
  000ed	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  000f2	c3		 ret	 0
$L156696:
  000f3	8d 4d dc	 lea	 ecx, DWORD PTR _sSell$150672[ebp]
  000f6	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  000fb	c3		 ret	 0
$L156697:
  000fc	8d 4d e8	 lea	 ecx, DWORD PTR _sPrice$150673[ebp]
  000ff	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00104	c3		 ret	 0
$L156698:
  00105	8d 4d c8	 lea	 ecx, DWORD PTR $T156683[ebp]
  00108	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0010d	c3		 ret	 0
$L156699:
  0010e	8b 45 c0	 mov	 eax, DWORD PTR $T156685[ebp]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00117	c3		 ret	 0
$L156702:
  00118	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156701
  0011d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnToBeSold@CSellDlg@@QAEXVCSCI_WorldObject@@_N@Z ENDP	; CSellDlg::OnToBeSold
PUBLIC	?get_pServIDLo@CSCI_WorldObject@@QAEFXZ		; CSCI_WorldObject::get_pServIDLo
PUBLIC	?get_pServIDHi@CSCI_WorldObject@@QAEFXZ		; CSCI_WorldObject::get_pServIDHi
PUBLIC	?GetItemCount@CListCtrl@@QBEHXZ			; CListCtrl::GetItemCount
PUBLIC	?PutWord@CPackedData@@QAEXF@Z			; CPackedData::PutWord
PUBLIC	?PutLong@CPackedData@@QAEXH@Z			; CPackedData::PutLong
PUBLIC	?SellIT@CSellDlg@@QAEXXZ			; CSellDlg::SellIT
EXTRN	??0CPackedData@@QAE@XZ:NEAR			; CPackedData::CPackedData
EXTRN	??1CPackedData@@UAE@XZ:NEAR			; CPackedData::~CPackedData
EXTRN	?MsgSendMassSell@@YAXPAVCPackedData@@@Z:NEAR	; MsgSendMassSell
xdata$x	SEGMENT
$T156708 DD	019930520H
	DD	02H
	DD	FLAT:$T156710
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156710 DD	0ffffffffH
	DD	FLAT:$L156705
	DD	00H
	DD	FLAT:$L156706
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -60
_nCount$ = -16
_data$150699 = -44
_i$150700 = -48
_hObject$150704 = -52
_sMana$150707 = -56
?SellIT@CSellDlg@@QAEXXZ PROC NEAR			; CSellDlg::SellIT

; 414  : void CSellDlg::SellIT() {

  0129c	55		 push	 ebp
  0129d	8b ec		 mov	 ebp, esp
  0129f	6a ff		 push	 -1
  012a1	68 00 00 00 00	 push	 $L156709
  012a6	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  012ac	50		 push	 eax
  012ad	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  012b4	83 ec 30	 sub	 esp, 48			; 00000030H
  012b7	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 415  : 	int nCount = m_pToBeSoldList->GetItemCount();

  012ba	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  012bd	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  012c3	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  012c8	89 45 f0	 mov	 DWORD PTR _nCount$[ebp], eax

; 416  : 
; 417  : 	if ( nCount ) {

  012cb	83 7d f0 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  012cf	0f 84 06 01 00
	00		 je	 $L150698

; 418  : 		CPackedData data;

  012d5	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  012d8	e8 00 00 00 00	 call	 ??0CPackedData@@QAE@XZ	; CPackedData::CPackedData
  012dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 419  : 
; 420  : 		data.PutLong( m_nShopID );

  012e4	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  012e7	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  012ed	52		 push	 edx
  012ee	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  012f1	e8 00 00 00 00	 call	 ?PutLong@CPackedData@@QAEXH@Z ; CPackedData::PutLong

; 421  : 
; 422  : 		for (int i = 0;i < nCount;i++) {

  012f6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$150700[ebp], 0
  012fd	eb 09		 jmp	 SHORT $L150701
$L150702:
  012ff	8b 45 d0	 mov	 eax, DWORD PTR _i$150700[ebp]
  01302	83 c0 01	 add	 eax, 1
  01305	89 45 d0	 mov	 DWORD PTR _i$150700[ebp], eax
$L150701:
  01308	8b 4d d0	 mov	 ecx, DWORD PTR _i$150700[ebp]
  0130b	3b 4d f0	 cmp	 ecx, DWORD PTR _nCount$[ebp]
  0130e	0f 8d a2 00 00
	00		 jge	 $L150703

; 423  : 			CSCI_WorldObject hObject = m_pToBeSoldList->GetItemData( i );

  01314	8b 55 d0	 mov	 edx, DWORD PTR _i$150700[ebp]
  01317	52		 push	 edx
  01318	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  0131b	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  01321	e8 00 00 00 00	 call	 ?GetItemData@CListCtrl@@QBEKH@Z ; CListCtrl::GetItemData
  01326	50		 push	 eax
  01327	8d 4d cc	 lea	 ecx, DWORD PTR _hObject$150704[ebp]
  0132a	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject

; 424  : 
; 425  : 			if ( hObject ) {

  0132f	8d 4d cc	 lea	 ecx, DWORD PTR _hObject$150704[ebp]
  01332	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  01337	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0133c	85 c0		 test	 eax, eax
  0133e	74 24		 je	 SHORT $L150705

; 426  : 				data.PutWord( hObject.get_pServIDLo() );

  01340	8d 4d cc	 lea	 ecx, DWORD PTR _hObject$150704[ebp]
  01343	e8 00 00 00 00	 call	 ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ ; CSCI_WorldObject::get_pServIDLo
  01348	50		 push	 eax
  01349	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  0134c	e8 00 00 00 00	 call	 ?PutWord@CPackedData@@QAEXF@Z ; CPackedData::PutWord

; 427  : 				data.PutWord( hObject.get_pServIDHi() );

  01351	8d 4d cc	 lea	 ecx, DWORD PTR _hObject$150704[ebp]
  01354	e8 00 00 00 00	 call	 ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ ; CSCI_WorldObject::get_pServIDHi
  01359	50		 push	 eax
  0135a	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  0135d	e8 00 00 00 00	 call	 ?PutWord@CPackedData@@QAEXF@Z ; CPackedData::PutWord

; 428  : 			} else {

  01362	eb 4d		 jmp	 SHORT $L150706
$L150705:

; 429  : 				CString sMana = m_pToBeSoldList->GetItemText( i, 0 );

  01364	6a 00		 push	 0
  01366	8b 4d d0	 mov	 ecx, DWORD PTR _i$150700[ebp]
  01369	51		 push	 ecx
  0136a	8d 55 c8	 lea	 edx, DWORD PTR _sMana$150707[ebp]
  0136d	52		 push	 edx
  0136e	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01371	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  01377	e8 00 00 00 00	 call	 ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z ; CListCtrl::GetItemText
  0137c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 430  : 
; 431  : 				data.PutLong( 0 );

  01380	6a 00		 push	 0
  01382	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  01385	e8 00 00 00 00	 call	 ?PutLong@CPackedData@@QAEXH@Z ; CPackedData::PutLong

; 432  : 				data.PutLong( atol ( sMana ) );

  0138a	8d 4d c8	 lea	 ecx, DWORD PTR _sMana$150707[ebp]
  0138d	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01392	50		 push	 eax
  01393	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  01399	83 c4 04	 add	 esp, 4
  0139c	50		 push	 eax
  0139d	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  013a0	e8 00 00 00 00	 call	 ?PutLong@CPackedData@@QAEXH@Z ; CPackedData::PutLong

; 433  : 			}

  013a5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  013a9	8d 4d c8	 lea	 ecx, DWORD PTR _sMana$150707[ebp]
  013ac	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
$L150706:

; 434  : 		}

  013b1	e9 49 ff ff ff	 jmp	 $L150702
$L150703:

; 435  : 
; 436  : 		data.PutLong( -1 );

  013b6	6a ff		 push	 -1
  013b8	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  013bb	e8 00 00 00 00	 call	 ?PutLong@CPackedData@@QAEXH@Z ; CPackedData::PutLong

; 437  : 
; 438  : 		MsgSendMassSell ( &data );

  013c0	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  013c3	51		 push	 ecx
  013c4	e8 00 00 00 00	 call	 ?MsgSendMassSell@@YAXPAVCPackedData@@@Z ; MsgSendMassSell
  013c9	83 c4 04	 add	 esp, 4

; 439  : 	}

  013cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  013d3	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  013d6	e8 00 00 00 00	 call	 ??1CPackedData@@UAE@XZ	; CPackedData::~CPackedData
$L150698:

; 440  : 
; 441  : 	if ( m_pQuantity ) {

  013db	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  013de	83 ba a8 00 00
	00 00		 cmp	 DWORD PTR [edx+168], 0
  013e5	74 1c		 je	 SHORT $L150709

; 442  : 		m_pQuantity->CloseSelf( true );

  013e7	6a 01		 push	 1
  013e9	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  013ec	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  013f2	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  013f5	8b 82 a8 00 00
	00		 mov	 eax, DWORD PTR [edx+168]
  013fb	8b 10		 mov	 edx, DWORD PTR [eax]
  013fd	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
$L150709:

; 444  : 
; 445  : 	CloseSelf();

  01403	6a 00		 push	 0
  01405	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  01408	8b 10		 mov	 edx, DWORD PTR [eax]
  0140a	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0140d	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 446  : }

  01413	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01416	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0141d	8b e5		 mov	 esp, ebp
  0141f	5d		 pop	 ebp
  01420	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L156705:
  00122	8d 4d d4	 lea	 ecx, DWORD PTR _data$150699[ebp]
  00125	e8 00 00 00 00	 call	 ??1CPackedData@@UAE@XZ	; CPackedData::~CPackedData
  0012a	c3		 ret	 0
$L156706:
  0012b	8d 4d c8	 lea	 ecx, DWORD PTR _sMana$150707[ebp]
  0012e	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00133	c3		 ret	 0
$L156709:
  00134	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156708
  00139	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SellIT@CSellDlg@@QAEXXZ ENDP				; CSellDlg::SellIT
PUBLIC	?Sell@CSellDlg@@QAEXH@Z				; CSellDlg::Sell
_DATA	SEGMENT
	ORG $+1
$SG150721 DB	'%d Mana Crystals', 00H
	ORG $+3
$SG150722 DB	'%d', 00H
	ORG $+1
$SG150728 DB	'%d Mana Crystals', 00H
	ORG $+3
$SG150729 DB	'%d', 00H
	ORG $+1
$SG150732 DB	'%d Mana Crystals', 00H
	ORG $+3
$SG150733 DB	'%d', 00H
	ORG $+1
$SG150734 DB	'%d', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T156716 DD	019930520H
	DD	03H
	DD	FLAT:$T156718
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156718 DD	0ffffffffH
	DD	FLAT:$L156712
	DD	00H
	DD	FLAT:$L156713
	DD	01H
	DD	FLAT:$L156714
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_nValue$ = 8
_this$ = -40
_nSellItemIndex$ = -20
_nSoldItemIndex$ = -32
_nMana$ = -28
_sSell$ = -24
_sPrice$ = -16
_sSold$150725 = -36
?Sell@CSellDlg@@QAEXH@Z PROC NEAR			; CSellDlg::Sell

; 449  : {

  01421	55		 push	 ebp
  01422	8b ec		 mov	 ebp, esp
  01424	6a ff		 push	 -1
  01426	68 00 00 00 00	 push	 $L156717
  0142b	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01431	50		 push	 eax
  01432	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01439	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0143c	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 450  : 	int nSellItemIndex = m_pSellableList->FindItem( 0 );

  0143f	6a 00		 push	 0
  01441	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01444	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0144a	e8 00 00 00 00	 call	 ?FindItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::FindItem
  0144f	89 45 ec	 mov	 DWORD PTR _nSellItemIndex$[ebp], eax

; 451  : 	int nSoldItemIndex = m_pToBeSoldList->FindItem( 0 );

  01452	6a 00		 push	 0
  01454	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01457	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
  0145d	e8 00 00 00 00	 call	 ?FindItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::FindItem
  01462	89 45 e0	 mov	 DWORD PTR _nSoldItemIndex$[ebp], eax

; 452  : 
; 453  : 	int nMana;
; 454  : 
; 455  : 	CString sSell = m_pSellableList->GetItemText( nSellItemIndex, 0 );

  01465	6a 00		 push	 0
  01467	8b 55 ec	 mov	 edx, DWORD PTR _nSellItemIndex$[ebp]
  0146a	52		 push	 edx
  0146b	8d 45 e8	 lea	 eax, DWORD PTR _sSell$[ebp]
  0146e	50		 push	 eax
  0146f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01472	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  01478	e8 00 00 00 00	 call	 ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z ; CListCtrl::GetItemText
  0147d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 456  : 	CString sPrice;

  01484	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$[ebp]
  01487	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  0148c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 457  : 
; 458  : 	nMana = atol( sSell ) - nValue;

  01490	8d 4d e8	 lea	 ecx, DWORD PTR _sSell$[ebp]
  01493	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01498	50		 push	 eax
  01499	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  0149f	83 c4 04	 add	 esp, 4
  014a2	2b 45 08	 sub	 eax, DWORD PTR _nValue$[ebp]
  014a5	89 45 e4	 mov	 DWORD PTR _nMana$[ebp], eax

; 459  : 
; 460  : 	if ( nMana ) {

  014a8	83 7d e4 00	 cmp	 DWORD PTR _nMana$[ebp], 0
  014ac	74 69		 je	 SHORT $L150720

; 461  : 		sSell.Format( "%d Mana Crystals", nMana );

  014ae	8b 55 e4	 mov	 edx, DWORD PTR _nMana$[ebp]
  014b1	52		 push	 edx
  014b2	68 00 00 00 00	 push	 OFFSET FLAT:$SG150721
  014b7	8d 45 e8	 lea	 eax, DWORD PTR _sSell$[ebp]
  014ba	50		 push	 eax
  014bb	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  014c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 462  : 		sPrice.Format( "%d", ( nMana * 5 ) );

  014c3	8b 4d e4	 mov	 ecx, DWORD PTR _nMana$[ebp]
  014c6	6b c9 05	 imul	 ecx, 5
  014c9	51		 push	 ecx
  014ca	68 00 00 00 00	 push	 OFFSET FLAT:$SG150722
  014cf	8d 55 f0	 lea	 edx, DWORD PTR _sPrice$[ebp]
  014d2	52		 push	 edx
  014d3	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  014d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 
; 464  : 		m_pSellableList->SetItemText( nSellItemIndex, 0, sSell );

  014db	8d 4d e8	 lea	 ecx, DWORD PTR _sSell$[ebp]
  014de	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  014e3	50		 push	 eax
  014e4	6a 00		 push	 0
  014e6	8b 45 ec	 mov	 eax, DWORD PTR _nSellItemIndex$[ebp]
  014e9	50		 push	 eax
  014ea	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  014ed	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  014f3	e8 00 00 00 00	 call	 ?SetItemText@CListCtrl@@QAEHHHPBD@Z ; CListCtrl::SetItemText

; 465  : 		m_pSellableList->SetItemText( nSellItemIndex, 1, sPrice );

  014f8	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$[ebp]
  014fb	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01500	50		 push	 eax
  01501	6a 01		 push	 1
  01503	8b 55 ec	 mov	 edx, DWORD PTR _nSellItemIndex$[ebp]
  01506	52		 push	 edx
  01507	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0150a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01510	e8 00 00 00 00	 call	 ?SetItemText@CListCtrl@@QAEHHHPBD@Z ; CListCtrl::SetItemText

; 466  : 	} else {

  01515	eb 12		 jmp	 SHORT $L150723
$L150720:

; 467  : 		m_pSellableList->DeleteItem ( nSellItemIndex );

  01517	8b 4d ec	 mov	 ecx, DWORD PTR _nSellItemIndex$[ebp]
  0151a	51		 push	 ecx
  0151b	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0151e	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  01524	e8 00 00 00 00	 call	 ?DeleteItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::DeleteItem
$L150723:

; 469  : 
; 470  : 	if ( nSoldItemIndex != -1 ) {

  01529	83 7d e0 ff	 cmp	 DWORD PTR _nSoldItemIndex$[ebp], -1
  0152d	0f 84 af 00 00
	00		 je	 $L150724

; 471  : 		CString sSold = m_pToBeSoldList->GetItemText( nSoldItemIndex, 0 );

  01533	6a 00		 push	 0
  01535	8b 45 e0	 mov	 eax, DWORD PTR _nSoldItemIndex$[ebp]
  01538	50		 push	 eax
  01539	8d 4d dc	 lea	 ecx, DWORD PTR _sSold$150725[ebp]
  0153c	51		 push	 ecx
  0153d	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01540	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  01546	e8 00 00 00 00	 call	 ?GetItemText@CListCtrl@@QBE?AVCString@@HH@Z ; CListCtrl::GetItemText
  0154b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 472  : 
; 473  : 		nMana = atol( sSold ) + nValue;

  0154f	8d 4d dc	 lea	 ecx, DWORD PTR _sSold$150725[ebp]
  01552	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01557	50		 push	 eax
  01558	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  0155e	83 c4 04	 add	 esp, 4
  01561	03 45 08	 add	 eax, DWORD PTR _nValue$[ebp]
  01564	89 45 e4	 mov	 DWORD PTR _nMana$[ebp], eax

; 474  : 
; 475  : 		if ( nMana ) {

  01567	83 7d e4 00	 cmp	 DWORD PTR _nMana$[ebp], 0
  0156b	74 67		 je	 SHORT $L150727

; 476  : 			sSell.Format( "%d Mana Crystals", nMana );

  0156d	8b 45 e4	 mov	 eax, DWORD PTR _nMana$[ebp]
  01570	50		 push	 eax
  01571	68 00 00 00 00	 push	 OFFSET FLAT:$SG150728
  01576	8d 4d e8	 lea	 ecx, DWORD PTR _sSell$[ebp]
  01579	51		 push	 ecx
  0157a	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  0157f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 477  : 			sPrice.Format( "%d", ( nMana * 5 ) );

  01582	8b 55 e4	 mov	 edx, DWORD PTR _nMana$[ebp]
  01585	6b d2 05	 imul	 edx, 5
  01588	52		 push	 edx
  01589	68 00 00 00 00	 push	 OFFSET FLAT:$SG150729
  0158e	8d 45 f0	 lea	 eax, DWORD PTR _sPrice$[ebp]
  01591	50		 push	 eax
  01592	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  01597	83 c4 0c	 add	 esp, 12			; 0000000cH

; 478  : 
; 479  : 			m_pToBeSoldList->SetItemText( nSoldItemIndex, 0, sSell );

  0159a	8d 4d e8	 lea	 ecx, DWORD PTR _sSell$[ebp]
  0159d	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  015a2	50		 push	 eax
  015a3	6a 00		 push	 0
  015a5	8b 4d e0	 mov	 ecx, DWORD PTR _nSoldItemIndex$[ebp]
  015a8	51		 push	 ecx
  015a9	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  015ac	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  015b2	e8 00 00 00 00	 call	 ?SetItemText@CListCtrl@@QAEHHHPBD@Z ; CListCtrl::SetItemText

; 480  : 			m_pToBeSoldList->SetItemText( nSoldItemIndex, 1, sPrice );

  015b7	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$[ebp]
  015ba	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  015bf	50		 push	 eax
  015c0	6a 01		 push	 1
  015c2	8b 45 e0	 mov	 eax, DWORD PTR _nSoldItemIndex$[ebp]
  015c5	50		 push	 eax
  015c6	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  015c9	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
  015cf	e8 00 00 00 00	 call	 ?SetItemText@CListCtrl@@QAEHHHPBD@Z ; CListCtrl::SetItemText
$L150727:

; 482  : 	} else {

  015d4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  015d8	8d 4d dc	 lea	 ecx, DWORD PTR _sSold$150725[ebp]
  015db	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  015e0	eb 51		 jmp	 SHORT $L150731
$L150724:

; 483  : 		if ( nValue ) {

  015e2	83 7d 08 00	 cmp	 DWORD PTR _nValue$[ebp], 0
  015e6	74 4b		 je	 SHORT $L150731

; 484  : 			sSell.Format( "%d Mana Crystals", nValue );

  015e8	8b 55 08	 mov	 edx, DWORD PTR _nValue$[ebp]
  015eb	52		 push	 edx
  015ec	68 00 00 00 00	 push	 OFFSET FLAT:$SG150732
  015f1	8d 45 e8	 lea	 eax, DWORD PTR _sSell$[ebp]
  015f4	50		 push	 eax
  015f5	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  015fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 485  : 			sPrice.Format( "%d", ( nValue * 5 ) );

  015fd	8b 4d 08	 mov	 ecx, DWORD PTR _nValue$[ebp]
  01600	6b c9 05	 imul	 ecx, 5
  01603	51		 push	 ecx
  01604	68 00 00 00 00	 push	 OFFSET FLAT:$SG150733
  01609	8d 55 f0	 lea	 edx, DWORD PTR _sPrice$[ebp]
  0160c	52		 push	 edx
  0160d	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  01612	83 c4 0c	 add	 esp, 12			; 0000000cH

; 486  : 
; 487  : 			m_pToBeSoldList->AddLine( 0, 2, sSell, sPrice );

  01615	8b 45 f0	 mov	 eax, DWORD PTR _sPrice$[ebp]
  01618	50		 push	 eax
  01619	8b 4d e8	 mov	 ecx, DWORD PTR _sSell$[ebp]
  0161c	51		 push	 ecx
  0161d	6a 02		 push	 2
  0161f	6a 00		 push	 0
  01621	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01624	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  0162a	50		 push	 eax
  0162b	e8 00 00 00 00	 call	 ?AddLine@CSkinListCtrl@@QAAHHHZZ ; CSkinListCtrl::AddLine
  01630	83 c4 14	 add	 esp, 20			; 00000014H
$L150731:

; 490  : 
; 491  : 	m_nSalePrice += nValue * 5;

  01633	8b 4d 08	 mov	 ecx, DWORD PTR _nValue$[ebp]
  01636	6b c9 05	 imul	 ecx, 5
  01639	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0163c	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  01642	03 c1		 add	 eax, ecx
  01644	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  01647	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 492  : 	m_pSalePrice->SetFormattedText( "%d", m_nSalePrice );

  0164d	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  01650	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  01656	50		 push	 eax
  01657	68 00 00 00 00	 push	 OFFSET FLAT:$SG150734
  0165c	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0165f	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  01665	52		 push	 edx
  01666	e8 00 00 00 00	 call	 ?SetFormattedText@CSkinEdit@@QAAHPADZZ ; CSkinEdit::SetFormattedText
  0166b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 493  : 
; 494  : 	m_pQuantity = NULL;

  0166e	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  01671	c7 80 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+168], 0

; 495  : }

  0167b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0167f	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$[ebp]
  01682	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01687	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0168e	8d 4d e8	 lea	 ecx, DWORD PTR _sSell$[ebp]
  01691	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01696	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01699	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  016a0	8b e5		 mov	 esp, ebp
  016a2	5d		 pop	 ebp
  016a3	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L156712:
  0013e	8d 4d e8	 lea	 ecx, DWORD PTR _sSell$[ebp]
  00141	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00146	c3		 ret	 0
$L156713:
  00147	8d 4d f0	 lea	 ecx, DWORD PTR _sPrice$[ebp]
  0014a	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0014f	c3		 ret	 0
$L156714:
  00150	8d 4d dc	 lea	 ecx, DWORD PTR _sSold$150725[ebp]
  00153	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00158	c3		 ret	 0
$L156717:
  00159	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156716
  0015e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Sell@CSellDlg@@QAEXH@Z ENDP				; CSellDlg::Sell
PUBLIC	?OnActivate@CSellBtn@@UAEXFF@Z			; CSellBtn::OnActivate
PUBLIC	??_7CSellBtn@@6B@				; CSellBtn::`vftable'
PUBLIC	??_GCSellBtn@@UAEPAXI@Z				; CSellBtn::`scalar deleting destructor'
PUBLIC	??_ECSellBtn@@UAEPAXI@Z				; CSellBtn::`vector deleting destructor'
EXTRN	??0CSkinBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z:NEAR ; CSkinBtn::CSkinBtn
EXTRN	?OnMouseDown@CSkinBtn@@UAEXHFF@Z:NEAR		; CSkinBtn::OnMouseDown
EXTRN	?OnMouseUp@CSkinBtn@@UAEXHFF@Z:NEAR		; CSkinBtn::OnMouseUp
EXTRN	?Refresh@CSkinBtn@@UAEXXZ:NEAR			; CSkinBtn::Refresh
;	COMDAT ??_7CSellBtn@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\SellDlg.cpp
CONST	SEGMENT
??_7CSellBtn@@6B@ DD FLAT:??_ECSellBtn@@UAEPAXI@Z	; CSellBtn::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinBtn@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinCtrl@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CSellBtn@@UAEXFF@Z
CONST	ENDS
xdata$x	SEGMENT
$T156725 DD	019930520H
	DD	01H
	DD	FLAT:$T156727
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156727 DD	0ffffffffH
	DD	FLAT:$L156721
xdata$x	ENDS
_TEXT	SEGMENT
$T156720 = -16
__$EHRec$ = -12
_obj$ = 8
_pParent$ = 16
_this$ = -20
??0CSellBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z PROC NEAR	; CSellBtn::CSellBtn

; 500  : CSellBtn::CSellBtn ( CSkinObj obj, CSkinWnd *pParent ) : CSkinBtn ( obj, pParent ) {}

  016a6	55		 push	 ebp
  016a7	8b ec		 mov	 ebp, esp
  016a9	6a ff		 push	 -1
  016ab	68 00 00 00 00	 push	 $L156726
  016b0	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  016b6	50		 push	 eax
  016b7	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  016be	83 ec 10	 sub	 esp, 16			; 00000010H
  016c1	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  016c4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  016cb	8b 45 10	 mov	 eax, DWORD PTR _pParent$[ebp]
  016ce	50		 push	 eax
  016cf	83 ec 08	 sub	 esp, 8
  016d2	8b cc		 mov	 ecx, esp
  016d4	89 65 f0	 mov	 DWORD PTR $T156720[ebp], esp
  016d7	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  016da	52		 push	 edx
  016db	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  016e0	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  016e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  016e6	e8 00 00 00 00	 call	 ??0CSkinBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinBtn::CSkinBtn
  016eb	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  016ee	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  016f1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSellBtn@@6B@ ; CSellBtn::`vftable'
  016f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  016fe	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01701	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01706	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01709	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0170c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01713	8b e5		 mov	 esp, ebp
  01715	5d		 pop	 ebp
  01716	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L156721:
  00163	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00166	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0016b	c3		 ret	 0
$L156726:
  0016c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156725
  00171	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CSellBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ENDP	; CSellBtn::CSellBtn
PUBLIC	??1CSellBtn@@UAE@XZ				; CSellBtn::~CSellBtn
;	COMDAT ??_GCSellBtn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCSellBtn@@UAEPAXI@Z PROC NEAR			; CSellBtn::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSellBtn@@UAE@XZ	; CSellBtn::~CSellBtn
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L150744
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L150744:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSellBtn@@UAEPAXI@Z ENDP				; CSellBtn::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CSkinBtn@@UAE@XZ				; CSkinBtn::~CSkinBtn
;	COMDAT ??1CSellBtn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSellBtn@@UAE@XZ PROC NEAR				; CSellBtn::~CSellBtn, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinBtn@@UAE@XZ	; CSkinBtn::~CSkinBtn
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CSellBtn@@UAE@XZ ENDP				; CSellBtn::~CSellBtn
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4
?OnActivate@CSellBtn@@UAEXFF@Z PROC NEAR		; CSellBtn::OnActivate

; 504  : {

  01719	55		 push	 ebp
  0171a	8b ec		 mov	 ebp, esp
  0171c	51		 push	 ecx
  0171d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 505  : 	if ( m_pParentWnd )

  01720	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01723	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  01727	74 0b		 je	 SHORT $L150752

; 506  : 		((CSellDlg*) m_pParentWnd)->SellIT();

  01729	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0172c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0172f	e8 00 00 00 00	 call	 ?SellIT@CSellDlg@@QAEXXZ ; CSellDlg::SellIT
$L150752:

; 507  : }

  01734	8b e5		 mov	 esp, ebp
  01736	5d		 pop	 ebp
  01737	c2 08 00	 ret	 8
?OnActivate@CSellBtn@@UAEXFF@Z ENDP			; CSellBtn::OnActivate
?_GetBaseMessageMap@CSellQuantityDlg@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CSellQuantityDlg::_GetBaseMessageMap

; 513  : BEGIN_MESSAGE_MAP ( CSellQuantityDlg, CSkinWnd )

  0173a	55		 push	 ebp
  0173b	8b ec		 mov	 ebp, esp
  0173d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CSkinWnd@@1UAFX_MSGMAP@@B ; CSkinWnd::messageMap
  01742	5d		 pop	 ebp
  01743	c3		 ret	 0
?_GetBaseMessageMap@CSellQuantityDlg@@KGPBUAFX_MSGMAP@@XZ ENDP ; CSellQuantityDlg::_GetBaseMessageMap
_TEXT	ENDS
PUBLIC	?GetMessageMap@CSellQuantityDlg@@MBEPBUAFX_MSGMAP@@XZ ; CSellQuantityDlg::GetMessageMap
_TEXT	SEGMENT
_this$ = -4
?GetMessageMap@CSellQuantityDlg@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR ; CSellQuantityDlg::GetMessageMap

; 513  : BEGIN_MESSAGE_MAP ( CSellQuantityDlg, CSkinWnd )

  01744	55		 push	 ebp
  01745	8b ec		 mov	 ebp, esp
  01747	51		 push	 ecx
  01748	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0174b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CSellQuantityDlg@@1UAFX_MSGMAP@@B ; CSellQuantityDlg::messageMap
  01750	8b e5		 mov	 esp, ebp
  01752	5d		 pop	 ebp
  01753	c3		 ret	 0
?GetMessageMap@CSellQuantityDlg@@MBEPBUAFX_MSGMAP@@XZ ENDP ; CSellQuantityDlg::GetMessageMap
_TEXT	ENDS
PUBLIC	?CloseSelf@CSellQuantityDlg@@UAEX_N@Z		; CSellQuantityDlg::CloseSelf
PUBLIC	?MakeSkinCtrl@CSellQuantityDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CSellQuantityDlg::MakeSkinCtrl
PUBLIC	??_7CSellQuantityDlg@@6B@			; CSellQuantityDlg::`vftable'
PUBLIC	??_GCSellQuantityDlg@@UAEPAXI@Z			; CSellQuantityDlg::`scalar deleting destructor'
PUBLIC	??_ECSellQuantityDlg@@UAEPAXI@Z			; CSellQuantityDlg::`vector deleting destructor'
;	COMDAT ??_7CSellQuantityDlg@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\SellDlg.cpp
CONST	SEGMENT
??_7CSellQuantityDlg@@6B@ DD FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ ; CSellQuantityDlg::`vftable'
	DD	FLAT:??_ECSellQuantityDlg@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CSellQuantityDlg@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetProcessEvents@CSkinWnd@@MAE_NXZ
	DD	FLAT:?CloseSelf@CSellQuantityDlg@@UAEX_N@Z
	DD	FLAT:?Disable@CSkinWnd@@UAEXXZ
	DD	FLAT:?Enable@CSkinWnd@@UAEXXZ
	DD	FLAT:?EnableGameModal@CSkinWnd@@UAEXHPAH@Z
	DD	FLAT:?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z
	DD	FLAT:?MakeSkinCtrl@CSellQuantityDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z
	DD	FLAT:?ProcessRefreshList@CSkinWnd@@UAEHXZ
	DD	FLAT:?UpdateTracking@CSkinWnd@@UAEXXZ
	DD	FLAT:?Next@CSkinWnd@@UAEXXZ
	DD	FLAT:?Previous@CSkinWnd@@UAEXXZ
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4
??0CSellQuantityDlg@@QAE@XZ PROC NEAR			; CSellQuantityDlg::CSellQuantityDlg

; 518  : {

  01754	55		 push	 ebp
  01755	8b ec		 mov	 ebp, esp
  01757	51		 push	 ecx
  01758	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0175b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0175e	e8 00 00 00 00	 call	 ??0CSkinWnd@@QAE@XZ	; CSkinWnd::CSkinWnd
  01763	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01766	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSellQuantityDlg@@6B@ ; CSellQuantityDlg::`vftable'

; 519  : 	m_pEdit = NULL;

  0176c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0176f	c7 81 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+148], 0

; 520  : }

  01779	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0177c	8b e5		 mov	 esp, ebp
  0177e	5d		 pop	 ebp
  0177f	c3		 ret	 0
??0CSellQuantityDlg@@QAE@XZ ENDP			; CSellQuantityDlg::CSellQuantityDlg
_TEXT	ENDS
PUBLIC	??1CSellQuantityDlg@@UAE@XZ			; CSellQuantityDlg::~CSellQuantityDlg
;	COMDAT ??_GCSellQuantityDlg@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCSellQuantityDlg@@UAEPAXI@Z PROC NEAR		; CSellQuantityDlg::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSellQuantityDlg@@UAE@XZ ; CSellQuantityDlg::~CSellQuantityDlg
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L150770
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L150770:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCSellQuantityDlg@@UAEPAXI@Z ENDP			; CSellQuantityDlg::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CSellQuantityDlg@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSellQuantityDlg@@UAE@XZ PROC NEAR			; CSellQuantityDlg::~CSellQuantityDlg, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CSellQuantityDlg@@UAE@XZ ENDP			; CSellQuantityDlg::~CSellQuantityDlg
_TEXT	ENDS
PUBLIC	?CloseMe@CSellDlg@@QAEXXZ			; CSellDlg::CloseMe
EXTRN	?GetWindowTextA@CWnd@@QBEXAAVCString@@@Z:NEAR	; CWnd::GetWindowTextA
EXTRN	__imp__MessageBeep@4:NEAR
EXTRN	?SetText@CSkinEdit@@QAEHPBD@Z:NEAR		; CSkinEdit::SetText
_DATA	SEGMENT
	ORG $+1
$SG150781 DB	'1', 00H
	ORG $+2
$SG150783 DB	'%d', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T156742 DD	019930520H
	DD	01H
	DD	FLAT:$T156744
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156744 DD	0ffffffffH
	DD	FLAT:$L156740
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_bTransient$ = 8
_this$ = -24
_sValue$150778 = -16
_nValue$150779 = -20
?CloseSelf@CSellQuantityDlg@@UAEX_N@Z PROC NEAR		; CSellQuantityDlg::CloseSelf

; 524  : {

  01780	55		 push	 ebp
  01781	8b ec		 mov	 ebp, esp
  01783	6a ff		 push	 -1
  01785	68 00 00 00 00	 push	 $L156743
  0178a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01790	50		 push	 eax
  01791	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01798	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0179b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 525  : 	if ( !bTransient ) {

  0179e	8b 45 08	 mov	 eax, DWORD PTR _bTransient$[ebp]
  017a1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  017a6	85 c0		 test	 eax, eax
  017a8	0f 85 d6 00 00
	00		 jne	 $L150777

; 526  : 		CString sValue;

  017ae	8d 4d f0	 lea	 ecx, DWORD PTR _sValue$150778[ebp]
  017b1	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  017b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 527  : 
; 528  : 		m_pEdit->GetWindowText( sValue );

  017bd	8d 4d f0	 lea	 ecx, DWORD PTR _sValue$150778[ebp]
  017c0	51		 push	 ecx
  017c1	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  017c4	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  017ca	e8 00 00 00 00	 call	 ?GetWindowTextA@CWnd@@QBEXAAVCString@@@Z ; CWnd::GetWindowTextA

; 529  : 
; 530  : 		long nValue = atol( sValue );

  017cf	8d 4d f0	 lea	 ecx, DWORD PTR _sValue$150778[ebp]
  017d2	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  017d7	50		 push	 eax
  017d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  017de	83 c4 04	 add	 esp, 4
  017e1	89 45 ec	 mov	 DWORD PTR _nValue$150779[ebp], eax

; 531  : 
; 532  : 		if ( nValue <= 0 ) {

  017e4	83 7d ec 00	 cmp	 DWORD PTR _nValue$150779[ebp], 0
  017e8	7f 2f		 jg	 SHORT $L150780

; 533  : 			m_pEdit->SetText( "1" );

  017ea	68 00 00 00 00	 push	 OFFSET FLAT:$SG150781
  017ef	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  017f2	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  017f8	e8 00 00 00 00	 call	 ?SetText@CSkinEdit@@QAEHPBD@Z ; CSkinEdit::SetText

; 534  : 
; 535  : 			MessageBeep( 0 );

  017fd	6a 00		 push	 0
  017ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4

; 536  : 			return;

  01805	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0180c	8d 4d f0	 lea	 ecx, DWORD PTR _sValue$150778[ebp]
  0180f	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01814	e9 83 00 00 00	 jmp	 $L150776
$L150780:

; 538  : 		
; 539  : 		if ( nValue > m_nMax ) {

  01819	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0181c	8b 55 ec	 mov	 edx, DWORD PTR _nValue$150779[ebp]
  0181f	3b 91 9c 00 00
	00		 cmp	 edx, DWORD PTR [ecx+156]
  01825	7e 3a		 jle	 SHORT $L150782

; 540  : 			m_pEdit->SetFormattedText( "%d", m_nMax );

  01827	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0182a	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  01830	51		 push	 ecx
  01831	68 00 00 00 00	 push	 OFFSET FLAT:$SG150783
  01836	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01839	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  0183f	50		 push	 eax
  01840	e8 00 00 00 00	 call	 ?SetFormattedText@CSkinEdit@@QAAHPADZZ ; CSkinEdit::SetFormattedText
  01845	83 c4 0c	 add	 esp, 12			; 0000000cH

; 541  : 
; 542  : 			MessageBeep( 0 );

  01848	6a 00		 push	 0
  0184a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4

; 543  : 			return;

  01850	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01857	8d 4d f0	 lea	 ecx, DWORD PTR _sValue$150778[ebp]
  0185a	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0185f	eb 3b		 jmp	 SHORT $L150776
$L150782:

; 545  : 
; 546  : 		m_pDlg->Sell( nValue );

  01861	8b 4d ec	 mov	 ecx, DWORD PTR _nValue$150779[ebp]
  01864	51		 push	 ecx
  01865	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01868	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  0186e	e8 00 00 00 00	 call	 ?Sell@CSellDlg@@QAEXH@Z	; CSellDlg::Sell

; 547  : 	} else {

  01873	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0187a	8d 4d f0	 lea	 ecx, DWORD PTR _sValue$150778[ebp]
  0187d	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01882	eb 0e		 jmp	 SHORT $L150784
$L150777:

; 548  : 		m_pDlg->CloseMe();

  01884	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  01887	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0188d	e8 00 00 00 00	 call	 ?CloseMe@CSellDlg@@QAEXXZ ; CSellDlg::CloseMe
$L150784:

; 550  : 
; 551  : 
; 552  : 	CSkinWnd::CloseSelf();

  01892	6a 00		 push	 0
  01894	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01897	e8 00 00 00 00	 call	 ?CloseSelf@CSkinWnd@@UAEX_N@Z ; CSkinWnd::CloseSelf
$L150776:

; 553  : }

  0189c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0189f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  018a6	8b e5		 mov	 esp, ebp
  018a8	5d		 pop	 ebp
  018a9	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L156740:
  00176	8d 4d f0	 lea	 ecx, DWORD PTR _sValue$150778[ebp]
  00179	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0017e	c3		 ret	 0
$L156743:
  0017f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156742
  00184	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CloseSelf@CSellQuantityDlg@@UAEX_N@Z ENDP		; CSellQuantityDlg::CloseSelf
EXTRN	?CreatePopupChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@HH@Z:NEAR ; CSkinWnd::CreatePopupChild
EXTRN	?RestoreLocation@CSkinWnd@@QAE_NXZ:NEAR		; CSkinWnd::RestoreLocation
EXTRN	?SetFocus@CWnd@@QAEPAV1@XZ:NEAR			; CWnd::SetFocus
_DATA	SEGMENT
	ORG $+1
$SG150792 DB	'Mana Crystals', 00H
	ORG $+2
$SG150793 DB	'Dlg_NumInput2.skn', 00H
_DATA	ENDS
_TEXT	SEGMENT
$T156746 = -20
_pDlg$ = 8
_nMax$ = 12
_this$ = -24
_bCreated$ = -4
?Create@CSellQuantityDlg@@QAEHPAVCSellDlg@@H@Z PROC NEAR ; CSellQuantityDlg::Create

; 557  : {

  018ac	55		 push	 ebp
  018ad	8b ec		 mov	 ebp, esp
  018af	83 ec 18	 sub	 esp, 24			; 00000018H
  018b2	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 558  : 	m_pDlg = pDlg;

  018b5	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  018b8	8b 4d 08	 mov	 ecx, DWORD PTR _pDlg$[ebp]
  018bb	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx

; 559  : 	m_nMax = nMax;

  018c1	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  018c4	8b 45 0c	 mov	 eax, DWORD PTR _nMax$[ebp]
  018c7	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax

; 560  : 
; 561  :     SetPriority( swPriGameModal );

  018cd	6a 07		 push	 7
  018cf	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  018d2	e8 00 00 00 00	 call	 ?SetPriority@CSkinWnd@@QAEXH@Z ; CSkinWnd::SetPriority

; 562  : 
; 563  : 	BOOL bCreated = CreatePopupChild ( "Dlg_NumInput2.skn", "Mana Crystals", CRect ( 0, 0, 0, 0 ), g_pMainWindow );

  018d7	6a 01		 push	 1
  018d9	6a 01		 push	 1
  018db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMainWindow@@3PAVCMainWindow@@A ; g_pMainWindow
  018e1	51		 push	 ecx
  018e2	6a 00		 push	 0
  018e4	6a 00		 push	 0
  018e6	6a 00		 push	 0
  018e8	6a 00		 push	 0
  018ea	8d 4d ec	 lea	 ecx, DWORD PTR $T156746[ebp]
  018ed	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  018f2	50		 push	 eax
  018f3	68 00 00 00 00	 push	 OFFSET FLAT:$SG150792
  018f8	68 00 00 00 00	 push	 OFFSET FLAT:$SG150793
  018fd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01900	e8 00 00 00 00	 call	 ?CreatePopupChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@HH@Z ; CSkinWnd::CreatePopupChild
  01905	89 45 fc	 mov	 DWORD PTR _bCreated$[ebp], eax

; 564  : 
; 565  : 	if ( TRUE == bCreated ) {

  01908	83 7d fc 01	 cmp	 DWORD PTR _bCreated$[ebp], 1
  0190c	75 20		 jne	 SHORT $L150794

; 566  : 		assert( NULL != m_pEdit );
; 567  : 		m_pEdit->SetFocus();

  0190e	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  01911	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  01917	e8 00 00 00 00	 call	 ?SetFocus@CWnd@@QAEPAV1@XZ ; CWnd::SetFocus

; 568  : 
; 569  : 		// restore my screen location
; 570  : 		RestoreLocation();

  0191c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0191f	e8 00 00 00 00	 call	 ?RestoreLocation@CSkinWnd@@QAE_NXZ ; CSkinWnd::RestoreLocation

; 571  : 
; 572  : 		ShowWindow( SW_SHOW );

  01924	6a 05		 push	 5
  01926	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  01929	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L150794:

; 574  : 
; 575  : 	return bCreated;

  0192e	8b 45 fc	 mov	 eax, DWORD PTR _bCreated$[ebp]

; 576  : }

  01931	8b e5		 mov	 esp, ebp
  01933	5d		 pop	 ebp
  01934	c2 08 00	 ret	 8
?Create@CSellQuantityDlg@@QAEHPAVCSellDlg@@H@Z ENDP	; CSellQuantityDlg::Create
_TEXT	ENDS
PUBLIC	??0CSellAllBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z	; CSellAllBtn::CSellAllBtn
_DATA	SEGMENT
	ORG $+2
$SG150804 DB	'_', 00H
	ORG $+2
$SG150806 DB	'nef', 00H
$SG150814 DB	'all', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T156773 DD	019930520H
	DD	05H
	DD	FLAT:$T156775
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156775 DD	0ffffffffH
	DD	FLAT:$L156764
	DD	00H
	DD	FLAT:$L156765
	DD	01H
	DD	FLAT:$L156766
	DD	02H
	DD	FLAT:$L156767
	DD	02H
	DD	FLAT:$L156769
xdata$x	ENDS
_TEXT	SEGMENT
$T156748 = -24
$T156749 = -28
$T156750 = -32
$T156751 = -36
$T156756 = -40
$T156757 = -44
$T156758 = -48
$T156759 = -52
$T156762 = -56
$T156763 = -60
__$EHRec$ = -12
_obj$ = 8
_this$ = -64
_name$ = -16
_id$ = -20
?MakeSkinCtrl@CSellQuantityDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z PROC NEAR ; CSellQuantityDlg::MakeSkinCtrl

; 580  : {

  01937	55		 push	 ebp
  01938	8b ec		 mov	 ebp, esp
  0193a	6a ff		 push	 -1
  0193c	68 00 00 00 00	 push	 $L156774
  01941	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01947	50		 push	 eax
  01948	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0194f	83 ec 58	 sub	 esp, 88			; 00000058H
  01952	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx
  01955	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 581  : 	// the type of the control is specified by the 3 left characters of the name
; 582  : 	CString name = obj.GetName();

  0195c	8d 45 f0	 lea	 eax, DWORD PTR _name$[ebp]
  0195f	50		 push	 eax
  01960	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01963	e8 00 00 00 00	 call	 ?GetName@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetName
  01968	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 583  : 	CString id = name.Left ( name.Find ( "_", 0 ) );

  0196c	6a 00		 push	 0
  0196e	68 00 00 00 00	 push	 OFFSET FLAT:$SG150804
  01973	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  01976	e8 00 00 00 00	 call	 ?Find@CString@@QBEHPBDH@Z ; CString::Find
  0197b	50		 push	 eax
  0197c	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0197f	51		 push	 ecx
  01980	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  01983	e8 00 00 00 00	 call	 ?Left@CString@@QBE?AV1@H@Z ; CString::Left
  01988	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 584  : 
; 585  : 	// Field that holds the number of items to buy
; 586  : 	if ( "nef" == id ) {

  0198c	8d 55 ec	 lea	 edx, DWORD PTR _id$[ebp]
  0198f	52		 push	 edx
  01990	68 00 00 00 00	 push	 OFFSET FLAT:$SG150806
  01995	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  0199a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0199f	85 c0		 test	 eax, eax
  019a1	0f 84 bc 00 00
	00		 je	 $L150805

; 587  : 		return m_pEdit = new CSkinEdit ( obj, this, 666, CSkinEdit::NUMERIC, false, true, true );

  019a7	68 d8 00 00 00	 push	 216			; 000000d8H
  019ac	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  019b1	89 45 e0	 mov	 DWORD PTR $T156750[ebp], eax
  019b4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  019b8	83 7d e0 00	 cmp	 DWORD PTR $T156750[ebp], 0
  019bc	74 3b		 je	 SHORT $L156752
  019be	6a 01		 push	 1
  019c0	6a 01		 push	 1
  019c2	6a 00		 push	 0
  019c4	68 00 20 00 00	 push	 8192			; 00002000H
  019c9	68 9a 02 00 00	 push	 666			; 0000029aH
  019ce	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  019d1	50		 push	 eax
  019d2	83 ec 08	 sub	 esp, 8
  019d5	8b cc		 mov	 ecx, esp
  019d7	89 65 dc	 mov	 DWORD PTR $T156751[ebp], esp
  019da	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  019dd	52		 push	 edx
  019de	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  019e3	89 45 bc	 mov	 DWORD PTR -68+[ebp], eax
  019e6	8b 4d e0	 mov	 ecx, DWORD PTR $T156750[ebp]
  019e9	e8 00 00 00 00	 call	 ??0CSkinEdit@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ; CSkinEdit::CSkinEdit
  019ee	89 45 b8	 mov	 DWORD PTR -72+[ebp], eax
  019f1	8b 45 b8	 mov	 eax, DWORD PTR -72+[ebp]
  019f4	89 45 b4	 mov	 DWORD PTR -76+[ebp], eax
  019f7	eb 07		 jmp	 SHORT $L156753
$L156752:
  019f9	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR -76+[ebp], 0
$L156753:
  01a00	8b 4d b4	 mov	 ecx, DWORD PTR -76+[ebp]
  01a03	89 4d e4	 mov	 DWORD PTR $T156749[ebp], ecx
  01a06	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01a0a	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  01a0d	8b 45 e4	 mov	 eax, DWORD PTR $T156749[ebp]
  01a10	89 82 94 00 00
	00		 mov	 DWORD PTR [edx+148], eax
  01a16	83 7d e4 00	 cmp	 DWORD PTR $T156749[ebp], 0
  01a1a	74 0b		 je	 SHORT $L156754
  01a1c	8b 4d e4	 mov	 ecx, DWORD PTR $T156749[ebp]
  01a1f	83 c1 60	 add	 ecx, 96			; 00000060H
  01a22	89 4d b0	 mov	 DWORD PTR -80+[ebp], ecx
  01a25	eb 07		 jmp	 SHORT $L156755
$L156754:
  01a27	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR -80+[ebp], 0
$L156755:
  01a2e	8b 55 b0	 mov	 edx, DWORD PTR -80+[ebp]
  01a31	89 55 e8	 mov	 DWORD PTR $T156748[ebp], edx
  01a34	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01a38	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  01a3b	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01a40	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01a44	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  01a47	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01a4c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01a53	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01a56	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01a5b	8b 45 e8	 mov	 eax, DWORD PTR $T156748[ebp]
  01a5e	e9 ef 00 00 00	 jmp	 $L150799
$L150805:

; 589  : 
; 590  : 	// Buy the max number of items button
; 591  : 	if ( "all" == id ) {

  01a63	8d 45 ec	 lea	 eax, DWORD PTR _id$[ebp]
  01a66	50		 push	 eax
  01a67	68 00 00 00 00	 push	 OFFSET FLAT:$SG150814
  01a6c	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  01a71	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01a76	85 c0		 test	 eax, eax
  01a78	0f 84 85 00 00
	00		 je	 $L150813

; 592  : 		return new CSellAllBtn( obj, this );

  01a7e	6a 14		 push	 20			; 00000014H
  01a80	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01a85	83 c4 04	 add	 esp, 4
  01a88	89 45 d0	 mov	 DWORD PTR $T156758[ebp], eax
  01a8b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  01a8f	83 7d d0 00	 cmp	 DWORD PTR $T156758[ebp], 0
  01a93	74 2b		 je	 SHORT $L156760
  01a95	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  01a98	51		 push	 ecx
  01a99	83 ec 08	 sub	 esp, 8
  01a9c	8b cc		 mov	 ecx, esp
  01a9e	89 65 cc	 mov	 DWORD PTR $T156759[ebp], esp
  01aa1	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  01aa4	52		 push	 edx
  01aa5	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01aaa	89 45 ac	 mov	 DWORD PTR -84+[ebp], eax
  01aad	8b 4d d0	 mov	 ecx, DWORD PTR $T156758[ebp]
  01ab0	e8 00 00 00 00	 call	 ??0CSellAllBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSellAllBtn::CSellAllBtn
  01ab5	89 45 a8	 mov	 DWORD PTR -88+[ebp], eax
  01ab8	8b 45 a8	 mov	 eax, DWORD PTR -88+[ebp]
  01abb	89 45 a4	 mov	 DWORD PTR -92+[ebp], eax
  01abe	eb 07		 jmp	 SHORT $L156761
$L156760:
  01ac0	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR -92+[ebp], 0
$L156761:
  01ac7	8b 4d a4	 mov	 ecx, DWORD PTR -92+[ebp]
  01aca	89 4d d4	 mov	 DWORD PTR $T156757[ebp], ecx
  01acd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01ad1	8b 55 d4	 mov	 edx, DWORD PTR $T156757[ebp]
  01ad4	89 55 d8	 mov	 DWORD PTR $T156756[ebp], edx
  01ad7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01adb	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  01ade	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01ae3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01ae7	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  01aea	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01aef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01af6	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01af9	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01afe	8b 45 d8	 mov	 eax, DWORD PTR $T156756[ebp]
  01b01	eb 4f		 jmp	 SHORT $L150799
$L150813:

; 594  : 
; 595  : 	return CSkinWnd::MakeSkinCtrl( obj );

  01b03	83 ec 08	 sub	 esp, 8
  01b06	8b cc		 mov	 ecx, esp
  01b08	89 65 c4	 mov	 DWORD PTR $T156763[ebp], esp
  01b0b	8d 45 08	 lea	 eax, DWORD PTR _obj$[ebp]
  01b0e	50		 push	 eax
  01b0f	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01b14	89 45 a0	 mov	 DWORD PTR -96+[ebp], eax
  01b17	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  01b1a	e8 00 00 00 00	 call	 ?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CSkinWnd::MakeSkinCtrl
  01b1f	89 45 9c	 mov	 DWORD PTR -100+[ebp], eax
  01b22	8b 4d 9c	 mov	 ecx, DWORD PTR -100+[ebp]
  01b25	89 4d c8	 mov	 DWORD PTR $T156762[ebp], ecx
  01b28	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01b2c	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  01b2f	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01b34	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01b38	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  01b3b	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01b40	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01b47	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01b4a	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01b4f	8b 45 c8	 mov	 eax, DWORD PTR $T156762[ebp]
$L150799:

; 596  : }

  01b52	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01b55	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01b5c	8b e5		 mov	 esp, ebp
  01b5e	5d		 pop	 ebp
  01b5f	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L156764:
  00189	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  0018c	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00191	c3		 ret	 0
$L156765:
  00192	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  00195	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0019a	c3		 ret	 0
$L156766:
  0019b	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0019e	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  001a3	c3		 ret	 0
$L156767:
  001a4	8b 45 e0	 mov	 eax, DWORD PTR $T156750[ebp]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  001ad	c3		 ret	 0
$L156769:
  001ae	8b 45 d0	 mov	 eax, DWORD PTR $T156758[ebp]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b7	59		 pop	 ecx
  001b8	c3		 ret	 0
$L156774:
  001b9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156773
  001be	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeSkinCtrl@CSellQuantityDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ENDP ; CSellQuantityDlg::MakeSkinCtrl
PUBLIC	?OnActivate@CSellAllBtn@@UAEXFF@Z		; CSellAllBtn::OnActivate
PUBLIC	??_7CSellAllBtn@@6B@				; CSellAllBtn::`vftable'
PUBLIC	??_GCSellAllBtn@@UAEPAXI@Z			; CSellAllBtn::`scalar deleting destructor'
PUBLIC	??_ECSellAllBtn@@UAEPAXI@Z			; CSellAllBtn::`vector deleting destructor'
;	COMDAT ??_7CSellAllBtn@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\SellDlg.cpp
CONST	SEGMENT
??_7CSellAllBtn@@6B@ DD FLAT:??_ECSellAllBtn@@UAEPAXI@Z	; CSellAllBtn::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinBtn@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinCtrl@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CSellAllBtn@@UAEXFF@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T156782 DD	019930520H
	DD	01H
	DD	FLAT:$T156784
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156784 DD	0ffffffffH
	DD	FLAT:$L156778
xdata$x	ENDS
;	COMDAT ??0CSellAllBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z
_TEXT	SEGMENT
$T156777 = -16
__$EHRec$ = -12
_obj$ = 8
_pParent$ = 16
_this$ = -20
??0CSellAllBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z PROC NEAR ; CSellAllBtn::CSellAllBtn, COMDAT

; 26   : 	CSellAllBtn ( CSkinObj obj, CSkinWnd *pParent ) : CSkinBtn ( obj, pParent ) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L156783
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00025	8b 45 10	 mov	 eax, DWORD PTR _pParent$[ebp]
  00028	50		 push	 eax
  00029	83 ec 08	 sub	 esp, 8
  0002c	8b cc		 mov	 ecx, esp
  0002e	89 65 f0	 mov	 DWORD PTR $T156777[ebp], esp
  00031	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0003a	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  0003d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0CSkinBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinBtn::CSkinBtn
  00045	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  00048	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSellAllBtn@@6B@ ; CSellAllBtn::`vftable'
  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  0005b	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00060	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L156778:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00008	c3		 ret	 0
$L156783:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156782
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CSellAllBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ENDP	; CSellAllBtn::CSellAllBtn
PUBLIC	?All@CSellQuantityDlg@@QAEXXZ			; CSellQuantityDlg::All
;	COMDAT ?OnActivate@CSellAllBtn@@UAEXFF@Z
_TEXT	SEGMENT
_this$ = -4
?OnActivate@CSellAllBtn@@UAEXFF@Z PROC NEAR		; CSellAllBtn::OnActivate, COMDAT

; 30   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 		if ( m_pParentWnd )

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0000e	74 0b		 je	 SHORT $L150352

; 32   : 			((CSellQuantityDlg*) m_pParentWnd)->All();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00016	e8 00 00 00 00	 call	 ?All@CSellQuantityDlg@@QAEXXZ ; CSellQuantityDlg::All
$L150352:

; 33   : 	}

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?OnActivate@CSellAllBtn@@UAEXFF@Z ENDP			; CSellAllBtn::OnActivate
_TEXT	ENDS
PUBLIC	??1CSellAllBtn@@UAE@XZ				; CSellAllBtn::~CSellAllBtn
;	COMDAT ??_GCSellAllBtn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCSellAllBtn@@UAEPAXI@Z PROC NEAR			; CSellAllBtn::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSellAllBtn@@UAE@XZ	; CSellAllBtn::~CSellAllBtn
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L150357
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L150357:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSellAllBtn@@UAEPAXI@Z ENDP				; CSellAllBtn::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CSellAllBtn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSellAllBtn@@UAE@XZ PROC NEAR			; CSellAllBtn::~CSellAllBtn, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinBtn@@UAE@XZ	; CSkinBtn::~CSkinBtn
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CSellAllBtn@@UAE@XZ ENDP				; CSellAllBtn::~CSellAllBtn
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4
?All@CSellQuantityDlg@@QAEXXZ PROC NEAR			; CSellQuantityDlg::All

; 599  : {

  01b62	55		 push	 ebp
  01b63	8b ec		 mov	 ebp, esp
  01b65	51		 push	 ecx
  01b66	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 600  : 	m_pDlg->Sell( m_nMax );

  01b69	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b6c	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  01b72	51		 push	 ecx
  01b73	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b76	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  01b7c	e8 00 00 00 00	 call	 ?Sell@CSellDlg@@QAEXH@Z	; CSellDlg::Sell

; 601  : 
; 602  : 	CloseSelf( true );

  01b81	6a 01		 push	 1
  01b83	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b86	8b 10		 mov	 edx, DWORD PTR [eax]
  01b88	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b8b	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 603  : }

  01b91	8b e5		 mov	 esp, ebp
  01b93	5d		 pop	 ebp
  01b94	c3		 ret	 0
?All@CSellQuantityDlg@@QAEXXZ ENDP			; CSellQuantityDlg::All
_TEXT	ENDS
EXTRN	?OnSetFocus@CSkinWnd@@IAEXPAVCWnd@@@Z:NEAR	; CSkinWnd::OnSetFocus
_TEXT	SEGMENT
_pOldWnd$ = 8
_this$ = -4
?OnSetFocus@CSellQuantityDlg@@QAEXPAVCWnd@@@Z PROC NEAR	; CSellQuantityDlg::OnSetFocus

; 606  : {

  01b95	55		 push	 ebp
  01b96	8b ec		 mov	 ebp, esp
  01b98	51		 push	 ecx
  01b99	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 607  :     CSkinWnd::OnSetFocus( pOldWnd );

  01b9c	8b 45 08	 mov	 eax, DWORD PTR _pOldWnd$[ebp]
  01b9f	50		 push	 eax
  01ba0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ba3	e8 00 00 00 00	 call	 ?OnSetFocus@CSkinWnd@@IAEXPAVCWnd@@@Z ; CSkinWnd::OnSetFocus

; 608  : 
; 609  :     if (m_pEdit)

  01ba8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bab	83 b9 94 00 00
	00 00		 cmp	 DWORD PTR [ecx+148], 0
  01bb2	74 0e		 je	 SHORT $L150830

; 610  :         m_pEdit->SetFocus();

  01bb4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01bb7	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  01bbd	e8 00 00 00 00	 call	 ?SetFocus@CWnd@@QAEPAV1@XZ ; CWnd::SetFocus
$L150830:

; 611  : }

  01bc2	8b e5		 mov	 esp, ebp
  01bc4	5d		 pop	 ebp
  01bc5	c2 04 00	 ret	 4
?OnSetFocus@CSellQuantityDlg@@QAEXPAVCWnd@@@Z ENDP	; CSellQuantityDlg::OnSetFocus
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT

; 21   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 27   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8
??2CObject@@SGPAXI@Z PROC NEAR				; CObject::operator new, COMDAT

; 33   : 	{ return ::operator new(nSize); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nSize$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??2CObject@@SGPAXI@Z ENDP				; CObject::operator new
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT

; 37   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT

; 39   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4
??BCString@@QBEPBDXZ PROC NEAR				; CString::operator char const *, COMDAT

; 151  : 	{ return m_pchData; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??BCString@@QBEPBDXZ ENDP				; CString::operator char const *
_TEXT	ENDS
PUBLIC	?Compare@CString@@QBEHPBD@Z			; CString::Compare
;	COMDAT ??8@YG_NPBDABVCString@@@Z
_TEXT	SEGMENT
_s1$ = 8
_s2$ = 12
??8@YG_NPBDABVCString@@@Z PROC NEAR			; operator==, COMDAT

; 185  : 	{ return s2.Compare(s1) == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _s2$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Compare@CString@@QBEHPBD@Z ; CString::Compare
  0000f	f7 d8		 neg	 eax
  00011	1b c0		 sbb	 eax, eax
  00013	40		 inc	 eax
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??8@YG_NPBDABVCString@@@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	__tcscmp
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT
_lpsz$ = 8
_this$ = -4
?Compare@CString@@QBEHPBD@Z PROC NEAR			; CString::Compare, COMDAT

; 157  : 	{ ASSERT(AfxIsValidString(lpsz)); return _tcscmp(m_pchData, lpsz); }    // MBCS/Unicode aware

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpsz$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 __tcscmp
  00016	83 c4 08	 add	 esp, 8
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?Compare@CString@@QBEHPBD@Z ENDP			; CString::Compare
_TEXT	ENDS
EXTRN	__imp___mbscmp:NEAR
;	COMDAT __tcscmp
_TEXT	SEGMENT
__s1$ = 8
__s2$ = 12
__tcscmp PROC NEAR					; COMDAT

; 797  : __inline int _tcscmp(_CPC _s1,_CPC _s2) {return _mbscmp((_CPUC)_s1,(_CPUC)_s2);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __s2$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbscmp
  00011	83 c4 08	 add	 esp, 8
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
__tcscmp ENDP
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT
_l$ = 8
_t$ = 12
_r$ = 16
_b$ = 20
_this$ = -4
??0CRect@@QAE@HHHH@Z PROC NEAR				; CRect::CRect, COMDAT

; 134  : 	{ left = l; top = t; right = r; bottom = b; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _l$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _r$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _b$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
??0CRect@@QAE@HHHH@Z ENDP				; CRect::CRect
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
_this$ = -4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC NEAR ; CWnd::DoDataExchange, COMDAT

; 519  : 	{ } // default does nothing

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
EXTRN	__imp__EnableWindow@8:NEAR
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?BeginModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::BeginModalState, COMDAT

; 523  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?EndModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::EndModalState, COMDAT

; 525  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
_TEXT	ENDS
;	COMDAT ??_ECSellableListCtrl@@WEA@AEPAXI@Z
_TEXT	SEGMENT
??_ECSellableListCtrl@@WEA@AEPAXI@Z PROC NEAR		; CSellableListCtrl::`vector deleting destructor', COMDAT
  00000	83 e9 40	 sub	 ecx, 64			; 00000040H
  00003	e9 00 00 00 00	 jmp	 ??_ECSellableListCtrl@@UAEPAXI@Z ; CSellableListCtrl::`vector deleting destructor'
??_ECSellableListCtrl@@WEA@AEPAXI@Z ENDP		; CSellableListCtrl::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT ??_ECSellableListCtrl@@WHE@AEPAXI@Z
_TEXT	SEGMENT
??_ECSellableListCtrl@@WHE@AEPAXI@Z PROC NEAR		; CSellableListCtrl::`vector deleting destructor', COMDAT
  00000	83 e9 74	 sub	 ecx, 116		; 00000074H
  00003	e9 00 00 00 00	 jmp	 ??_ECSellableListCtrl@@UAEPAXI@Z ; CSellableListCtrl::`vector deleting destructor'
??_ECSellableListCtrl@@WHE@AEPAXI@Z ENDP		; CSellableListCtrl::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT ??_ECToBeSoldListCtrl@@WEA@AEPAXI@Z
_TEXT	SEGMENT
??_ECToBeSoldListCtrl@@WEA@AEPAXI@Z PROC NEAR		; CToBeSoldListCtrl::`vector deleting destructor', COMDAT
  00000	83 e9 40	 sub	 ecx, 64			; 00000040H
  00003	e9 00 00 00 00	 jmp	 ??_ECToBeSoldListCtrl@@UAEPAXI@Z ; CToBeSoldListCtrl::`vector deleting destructor'
??_ECToBeSoldListCtrl@@WEA@AEPAXI@Z ENDP		; CToBeSoldListCtrl::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT ??_ECToBeSoldListCtrl@@WHE@AEPAXI@Z
_TEXT	SEGMENT
??_ECToBeSoldListCtrl@@WHE@AEPAXI@Z PROC NEAR		; CToBeSoldListCtrl::`vector deleting destructor', COMDAT
  00000	83 e9 74	 sub	 ecx, 116		; 00000074H
  00003	e9 00 00 00 00	 jmp	 ??_ECToBeSoldListCtrl@@UAEPAXI@Z ; CToBeSoldListCtrl::`vector deleting destructor'
??_ECToBeSoldListCtrl@@WHE@AEPAXI@Z ENDP		; CToBeSoldListCtrl::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT ??_ECSellDlg@@WJE@AEPAXI@Z
_TEXT	SEGMENT
??_ECSellDlg@@WJE@AEPAXI@Z PROC NEAR			; CSellDlg::`vector deleting destructor', COMDAT
  00000	81 e9 94 00 00
	00		 sub	 ecx, 148		; 00000094H
  00006	e9 00 00 00 00	 jmp	 ??_ECSellDlg@@UAEPAXI@Z	; CSellDlg::`vector deleting destructor'
??_ECSellDlg@@WJE@AEPAXI@Z ENDP				; CSellDlg::`vector deleting destructor'
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
;	COMDAT ?GetItemCount@CListCtrl@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetItemCount@CListCtrl@@QBEHXZ PROC NEAR		; CListCtrl::GetItemCount, COMDAT

; 132  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, LVM_GETITEMCOUNT, 0, 0L); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 04 10 00 00	 push	 4100			; 00001004H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetItemCount@CListCtrl@@QBEHXZ ENDP			; CListCtrl::GetItemCount
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@ABVMemID@@@Z		; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ObjectID@@QAE@ABV0@@Z PROC NEAR			; ObjectID::ObjectID, COMDAT

; 229  : 	ObjectID(const ObjectID& id) : FakeObjectID((MemID&) id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@ABVMemID@@@Z ; FakeObjectID::FakeObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ObjectID@@QAE@ABV0@@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0FakeObjectID@@QAE@ABVMemID@@@Z PROC NEAR		; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@ABVMemID@@@Z ENDP			; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
PUBLIC	??CFakeObjectID@@QBEPAUObject@@XZ		; FakeObjectID::operator->
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
PUBLIC	?IsObject@ObjectID@@QBEHXZ			; ObjectID::IsObject
PUBLIC	??DTextID@@QAEPADXZ				; TextID::operator*
PUBLIC	?GetProperty@Object@@QAEFG@Z			; Object::GetProperty
EXTRN	??0TextID@@QAE@G@Z:NEAR				; TextID::TextID
;	COMDAT ??DStringID@@QAEPADXZ
_TEXT	SEGMENT
$T156817 = -8
$T156818 = -12
_this$ = -16
_obj$ = -4
??DStringID@@QAEPADXZ PROC NEAR				; StringID::operator*, COMDAT

; 63   : 	char * operator *() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 		ObjectID obj ( handle );

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	51		 push	 ecx
  00010	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  00013	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 65   : 
; 66   : 		if ( obj.IsObject() ) {

  00018	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  0001b	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  00020	85 c0		 test	 eax, eax
  00022	74 23		 je	 SHORT $L117151

; 67   : 			return *(TextID)obj->GetProperty ( s_data );

  00024	6a 71		 push	 113			; 00000071H
  00026	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  00029	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0002e	8b c8		 mov	 ecx, eax
  00030	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty
  00035	50		 push	 eax
  00036	8d 4d f8	 lea	 ecx, DWORD PTR $T156817[ebp]
  00039	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00045	eb 16		 jmp	 SHORT $L117149
$L117151:

; 69   : 
; 70   : 		return *(TextID)handle;

  00047	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	66 8b 02	 mov	 ax, WORD PTR [edx]
  0004d	50		 push	 eax
  0004e	8d 4d f4	 lea	 ecx, DWORD PTR $T156818[ebp]
  00051	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
$L117149:

; 71   : 	}

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??DStringID@@QAEPADXZ ENDP				; StringID::operator*
_TEXT	ENDS
PUBLIC	?GetPropAddrCheck@Object@@QAEPAFG@Z		; Object::GetPropAddrCheck
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT
_this$ = -4
_selector$ = 8
?GetProperty@Object@@QAEFG@Z PROC NEAR			; Object::GetProperty, COMDAT

; 170  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		//	get a property given a selector
; 172  : 		return *GetPropAddrCheck(selector);

  00007	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00014	66 8b 00	 mov	 ax, WORD PTR [eax]

; 173  : 	}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetProperty@Object@@QAEFG@Z ENDP			; Object::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddr@Object@@QAEPAFG@Z			; Object::GetPropAddr
EXTRN	?Fatal@MsgMgr@@QAAXHZZ:NEAR			; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_this$ = -8
_property$ = -4
_selector$ = 8
?GetPropAddrCheck@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddrCheck, COMDAT

; 153  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 		//	get a property's address, checking for valid property
; 155  : 		Property* property = GetPropAddr(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddr@Object@@QAEPAFG@Z ; Object::GetPropAddr
  00016	89 45 fc	 mov	 DWORD PTR _property$[ebp], eax

; 156  : 		if (!property)

  00019	83 7d fc 00	 cmp	 DWORD PTR _property$[ebp], 0
  0001d	75 1b		 jne	 SHORT $L116767

; 157  : 			msgMgr->Fatal(Msg_InvalidProperty, selector);

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _selector$[ebp]
  00022	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00028	51		 push	 ecx
  00029	6a 29		 push	 41			; 00000029H
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
$L116767:

; 158  : 		return property;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _property$[ebp]

; 159  : 	}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetPropAddrCheck@Object@@QAEPAFG@Z ENDP		; Object::GetPropAddrCheck
_TEXT	ENDS
PUBLIC	?selectorDict@Object@@QAEPAVSelectorDict@@XZ	; Object::selectorDict
PUBLIC	??AObject@@QAEAAFH@Z				; Object::operator[]
EXTRN	?get@SelectorDict@@QAEHG@Z:NEAR			; SelectorDict::get
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_this$ = -8
_index$ = -4
_selector$ = 8
?GetPropAddr@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddr, COMDAT

; 127  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 		int index = selectorDict()->get ( selector );

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?get@SelectorDict@@QAEHG@Z ; SelectorDict::get
  0001d	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 129  : 
; 130  : 		if ( index != -1 && !selectorDict()->script )

  00020	83 7d fc ff	 cmp	 DWORD PTR _index$[ebp], -1
  00024	74 2b		 je	 SHORT $L116758
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  0002e	33 c9		 xor	 ecx, ecx
  00030	66 8b 48 16	 mov	 cx, WORD PTR [eax+22]
  00034	85 c9		 test	 ecx, ecx
  00036	75 19		 jne	 SHORT $L116758

; 131  : 			return &(*this)[selectorDict()->offset]; 

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00040	33 d2		 xor	 edx, edx
  00042	66 8b 50 14	 mov	 dx, WORD PTR [eax+20]
  00046	52		 push	 edx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ??AObject@@QAEAAFH@Z	; Object::operator[]
  0004f	eb 02		 jmp	 SHORT $L116756
$L116758:

; 132  : 
; 133  : 		return 0;

  00051	33 c0		 xor	 eax, eax
$L116756:

; 134  : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?GetPropAddr@Object@@QAEPAFG@Z ENDP			; Object::GetPropAddr
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT
_this$ = -4
?selectorDict@Object@@QAEPAVSelectorDict@@XZ PROC NEAR	; Object::selectorDict, COMDAT

; 102  : 	SelectorDict *selectorDict ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 		return _selectorDict;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 104  : 	};

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?selectorDict@Object@@QAEPAVSelectorDict@@XZ ENDP	; Object::selectorDict
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT
_this$ = -4
_index$ = 8
??AObject@@QAEAAFH@Z PROC NEAR				; Object::operator[], COMDAT

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		//	get a reference to a property given the number of the property
; 119  : 		return ((Property*) this)[index];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 120  : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??AObject@@QAEAAFH@Z ENDP				; Object::operator[]
_TEXT	ENDS
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeObjectID@@QBEPAUObject@@XZ PROC NEAR		; FakeObjectID::operator->, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeObjectID@@QBEPAUObject@@XZ ENDP			; FakeObjectID::operator->
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
EXTRN	_memMgr:DWORD
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
PUBLIC	?IsValid@MemID@@QBEHXZ				; MemID::IsValid
EXTRN	?GetMemType@MemID@@QBE?AW4MemType@@XZ:NEAR	; MemID::GetMemType
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsObject@ObjectID@@QBEHXZ PROC NEAR			; ObjectID::IsObject, COMDAT

; 247  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 		return IsValid() && GetMemType() == MemObject;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00011	85 c0		 test	 eax, eax
  00013	74 16		 je	 SHORT $L156831
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0001d	83 f8 34	 cmp	 eax, 52			; 00000034H
  00020	75 09		 jne	 SHORT $L156831
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  00029	eb 07		 jmp	 SHORT $L156832
$L156831:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L156832:
  00032	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 249  : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?IsObject@ObjectID@@QBEHXZ ENDP				; ObjectID::IsObject
_TEXT	ENDS
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@MemID@@QBEHXZ PROC NEAR			; MemID::IsValid, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return memMgr->IsValid(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid

; 64   : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IsValid@MemID@@QBEHXZ ENDP				; MemID::IsValid
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L156835
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L156835
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L156835
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L156835
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L156836
$L156835:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L156836:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\textid.hpp
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4
??DTextID@@QAEPADXZ PROC NEAR				; TextID::operator*, COMDAT

; 24   : 	char	*operator *() { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return handle ? (char *)MemID::operator*() : ""; 

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	33 c9		 xor	 ecx, ecx
  0000e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0d		 je	 SHORT $L156838
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0001d	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00020	eb 07		 jmp	 SHORT $L156839
$L156838:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L156839:
  00029	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 26   : 	}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??DTextID@@QAEPADXZ ENDP				; TextID::operator*
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@ABVMemID@@@Z		; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_LongInt@@QAE@ABVObjectID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_LongInt@@QAE@ABVObjectID@@@Z PROC NEAR		; CSCI_LongInt::CSCI_LongInt, COMDAT

; 723  : 	CSCI_LongInt(const ObjectID& id) : CSCI_Object((MemID&) id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABVMemID@@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_LongInt@@QAE@ABVObjectID@@@Z ENDP		; CSCI_LongInt::CSCI_LongInt
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@ABVMemID@@@Z			; ObjectID::ObjectID
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0CSCI_Object@@QAE@ABVMemID@@@Z PROC NEAR		; CSCI_Object::CSCI_Object, COMDAT

; 11   : 	CSCI_Object(const MemID& id) : ObjectID(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABVMemID@@@Z ; ObjectID::ObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@ABVMemID@@@Z ENDP			; CSCI_Object::CSCI_Object
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ObjectID@@QAE@ABVMemID@@@Z PROC NEAR			; ObjectID::ObjectID, COMDAT

; 228  : 	ObjectID(const MemID& id) : FakeObjectID(id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@ABVMemID@@@Z ; FakeObjectID::FakeObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ObjectID@@QAE@ABVMemID@@@Z ENDP			; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@G@Z				; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_LongInt@@QAE@G@Z PROC NEAR			; CSCI_LongInt::CSCI_LongInt, COMDAT

; 724  : 	CSCI_LongInt(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_LongInt@@QAE@G@Z ENDP				; CSCI_LongInt::CSCI_LongInt
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Object@@QAE@G@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 13   : 	CSCI_Object(SOL_Handle h) : ObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@G@Z ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	?GetProperty@ObjectID@@QBEFG@Z			; ObjectID::GetProperty
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_lowWord@CSCI_LongInt@@QAEFXZ PROC NEAR		; CSCI_LongInt::get_lowWord, COMDAT

; 726  : 	Property get_lowWord() { return GetProperty ( s_lowWord ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0d 01 00 00	 push	 269			; 0000010dH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_lowWord@CSCI_LongInt@@QAEFXZ ENDP			; CSCI_LongInt::get_lowWord
_TEXT	ENDS
PUBLIC	?AssureValid@ObjectID@@QBEXXZ			; ObjectID::AssureValid
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@ObjectID@@QBEFG@Z PROC NEAR		; ObjectID::GetProperty, COMDAT

; 290  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 		//	get a property given a selector
; 292  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 293  : 		return (*this)->GetProperty(selector);

  0000f	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty

; 294  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetProperty@ObjectID@@QBEFG@Z ENDP			; ObjectID::GetProperty
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssureValid@ObjectID@@QBEXXZ PROC NEAR			; ObjectID::AssureValid, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 239  : 		if (!IsObject())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  0000f	85 c0		 test	 eax, eax
  00011	75 1e		 jne	 SHORT $L116926

; 240  : 			msgMgr->Fatal(Msg_NotObject, (int) *this);

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0001b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00020	50		 push	 eax
  00021	6a 2f		 push	 47			; 0000002fH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L116926:

; 241  : 	}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?AssureValid@ObjectID@@QBEXXZ ENDP			; ObjectID::AssureValid
_TEXT	ENDS
PUBLIC	?get_hiWord@CSCI_LongInt@@QAEFXZ		; CSCI_LongInt::get_hiWord
;	COMDAT ?get_nValue@CSCI_LongInt@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?get_nValue@CSCI_LongInt@@QAEHXZ PROC NEAR		; CSCI_LongInt::get_nValue, COMDAT

; 732  : 	int get_nValue() { return ( ( ((int) get_hiWord()) << 16) + ( (int) get_lowWord() & 0x0000ffff ) ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?get_hiWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_hiWord
  00010	0f bf f0	 movsx	 esi, ax
  00013	c1 e6 10	 shl	 esi, 16			; 00000010H
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?get_lowWord@CSCI_LongInt@@QAEFXZ ; CSCI_LongInt::get_lowWord
  0001e	0f bf c0	 movsx	 eax, ax
  00021	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00026	03 c6		 add	 eax, esi
  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?get_nValue@CSCI_LongInt@@QAEHXZ ENDP			; CSCI_LongInt::get_nValue
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_hiWord@CSCI_LongInt@@QAEFXZ PROC NEAR		; CSCI_LongInt::get_hiWord, COMDAT

; 729  : 	Property get_hiWord() { return GetProperty ( s_hiWord ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 0e 01 00 00	 push	 270			; 0000010eH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_hiWord@CSCI_LongInt@@QAEFXZ ENDP			; CSCI_LongInt::get_hiWord
_TEXT	ENDS
PUBLIC	?set_lowWord@CSCI_LongInt@@QAEXF@Z		; CSCI_LongInt::set_lowWord
PUBLIC	?set_hiWord@CSCI_LongInt@@QAEXF@Z		; CSCI_LongInt::set_hiWord
;	COMDAT ?set_nValue@CSCI_LongInt@@QAEXH@Z
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -4
?set_nValue@CSCI_LongInt@@QAEXH@Z PROC NEAR		; CSCI_LongInt::set_nValue, COMDAT

; 733  : 	void set_nValue( int nValue) { set_hiWord( nValue >> 16 ); set_lowWord( nValue & 0x0000ffff ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nValue$[ebp]
  0000a	c1 f8 10	 sar	 eax, 16			; 00000010H
  0000d	50		 push	 eax
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?set_hiWord@CSCI_LongInt@@QAEXF@Z ; CSCI_LongInt::set_hiWord
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _nValue$[ebp]
  00019	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?set_lowWord@CSCI_LongInt@@QAEXF@Z ; CSCI_LongInt::set_lowWord
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?set_nValue@CSCI_LongInt@@QAEXH@Z ENDP			; CSCI_LongInt::set_nValue
_TEXT	ENDS
PUBLIC	?SetProperty@ObjectID@@QBEXGF@Z			; ObjectID::SetProperty
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_lowWord@CSCI_LongInt@@QAEXF@Z PROC NEAR		; CSCI_LongInt::set_lowWord, COMDAT

; 727  : 	void set_lowWord( Property value ) { SetProperty ( s_lowWord, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 0d 01 00 00	 push	 269			; 0000010dH
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_lowWord@CSCI_LongInt@@QAEXF@Z ENDP			; CSCI_LongInt::set_lowWord
_TEXT	ENDS
PUBLIC	?SetProperty@Object@@QAEXGF@Z			; Object::SetProperty
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT
_selector$ = 8
_value$ = 12
_this$ = -4
?SetProperty@ObjectID@@QBEXGF@Z PROC NEAR		; ObjectID::SetProperty, COMDAT

; 340  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 341  : 		//	set a property given a selector
; 342  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 343  : 		(*this)->SetProperty(selector, value);

  0000f	66 8b 45 0c	 mov	 ax, WORD PTR _value$[ebp]
  00013	50		 push	 eax
  00014	66 8b 4d 08	 mov	 cx, WORD PTR _selector$[ebp]
  00018	51		 push	 ecx
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ?SetProperty@Object@@QAEXGF@Z ; Object::SetProperty

; 344  : 	}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?SetProperty@ObjectID@@QBEXGF@Z ENDP			; ObjectID::SetProperty
_TEXT	ENDS
PUBLIC	?SetGraphicsUpdate@Object@@QAEXXZ		; Object::SetGraphicsUpdate
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT
_this$ = -12
_property$ = -8
_index$ = -4
_selector$ = 8
_value$ = 12
?SetProperty@Object@@QAEXGF@Z PROC NEAR			; Object::SetProperty, COMDAT

; 206  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 		//	set a property given a selector
; 208  : 		Property* property = GetPropAddrCheck(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00016	89 45 f8	 mov	 DWORD PTR _property$[ebp], eax

; 209  : 		int index = property - (Property*) this;

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _property$[ebp]
  0001c	2b 4d f4	 sub	 ecx, DWORD PTR _this$[ebp]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4d fc	 mov	 DWORD PTR _index$[ebp], ecx

; 210  : 		if (index <= MaxGraphUpdateIndex && index >= MinGraphUpdateIndex)

  00024	83 7d fc 2b	 cmp	 DWORD PTR _index$[ebp], 43 ; 0000002bH
  00028	7f 0e		 jg	 SHORT $L116791
  0002a	83 7d fc 18	 cmp	 DWORD PTR _index$[ebp], 24 ; 00000018H
  0002e	7c 08		 jl	 SHORT $L116791

; 211  : 			SetGraphicsUpdate();

  00030	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?SetGraphicsUpdate@Object@@QAEXXZ ; Object::SetGraphicsUpdate
$L116791:

; 212  : 		*property = value;

  00038	8b 55 f8	 mov	 edx, DWORD PTR _property$[ebp]
  0003b	66 8b 45 0c	 mov	 ax, WORD PTR _value$[ebp]
  0003f	66 89 02	 mov	 WORD PTR [edx], ax

; 213  : 	}

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?SetProperty@Object@@QAEXGF@Z ENDP			; Object::SetProperty
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?SetGraphicsUpdate@Object@@QAEXXZ PROC NEAR		; Object::SetGraphicsUpdate, COMDAT

; 97   : 	void		SetGraphicsUpdate()		{ info |= GRAPH_UPD; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  0000e	80 c9 08	 or	 cl, 8
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?SetGraphicsUpdate@Object@@QAEXXZ ENDP			; Object::SetGraphicsUpdate
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_hiWord@CSCI_LongInt@@QAEXF@Z PROC NEAR		; CSCI_LongInt::set_hiWord, COMDAT

; 730  : 	void set_hiWord( Property value ) { SetProperty ( s_hiWord, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 0e 01 00 00	 push	 270			; 0000010eH
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_hiWord@CSCI_LongInt@@QAEXF@Z ENDP			; CSCI_LongInt::set_hiWord
_TEXT	ENDS
;	COMDAT ?get_pCommand@CSCI_NetMsg@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pCommand@CSCI_NetMsg@@QAEFXZ PROC NEAR		; CSCI_NetMsg::get_pCommand, COMDAT

; 3561 : 	Property get_pCommand() { return GetProperty ( s_pCommand ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 dd 02 00 00	 push	 733			; 000002ddH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pCommand@CSCI_NetMsg@@QAEFXZ ENDP			; CSCI_NetMsg::get_pCommand
_TEXT	ENDS
;	COMDAT ?get_pAckCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pAckCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_NetMsg::get_pAckCmd, COMDAT

; 3570 : 	CSCI_LongInt get_pAckCmd() { return GetProperty ( s_pAckCmd ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 df 02 00 00	 push	 735			; 000002dfH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pAckCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ENDP	; CSCI_NetMsg::get_pAckCmd
_TEXT	ENDS
;	COMDAT ?get_pNakCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pNakCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_NetMsg::get_pNakCmd, COMDAT

; 3573 : 	CSCI_LongInt get_pNakCmd() { return GetProperty ( s_pNakCmd ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 e0 02 00 00	 push	 736			; 000002e0H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pNakCmd@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ENDP	; CSCI_NetMsg::get_pNakCmd
_TEXT	ENDS
;	COMDAT ?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_NetMsg::get_pInfo, COMDAT

; 3576 : 	CSCI_LongInt get_pInfo() { return GetProperty ( s_pInfo ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 e1 02 00 00	 push	 737			; 000002e1H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pInfo@CSCI_NetMsg@@QAE?AVCSCI_LongInt@@XZ ENDP	; CSCI_NetMsg::get_pInfo
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@XZ				; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_WorldObject@@QAE@XZ PROC NEAR			; CSCI_WorldObject::CSCI_WorldObject, COMDAT

; 4472 : 	CSCI_WorldObject() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@XZ	; CSCI_Actor::CSCI_Actor
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_WorldObject@@QAE@XZ ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@XZ				; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Actor@@QAE@XZ PROC NEAR				; CSCI_Actor::CSCI_Actor, COMDAT

; 1593 : 	CSCI_Actor() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@XZ	; CSCI_Prop::CSCI_Prop
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Actor@@QAE@XZ ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@XZ				; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Prop@@QAE@XZ PROC NEAR				; CSCI_Prop::CSCI_Prop, COMDAT

; 1557 : 	CSCI_Prop() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@XZ	; CSCI_View::CSCI_View
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Prop@@QAE@XZ ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@XZ				; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_View@@QAE@XZ PROC NEAR				; CSCI_View::CSCI_View, COMDAT

; 1512 : 	CSCI_View() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@XZ	; CSCI_Feature::CSCI_Feature
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_View@@QAE@XZ ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@XZ				; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Feature@@QAE@XZ PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT

; 1434 : 	CSCI_Feature() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@XZ	; CSCI_BitMap::CSCI_BitMap
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Feature@@QAE@XZ ENDP				; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@XZ			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_BitMap@@QAE@XZ PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT

; 1355 : 	CSCI_BitMap() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@XZ ; CSCI_Rectangle::CSCI_Rectangle
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_BitMap@@QAE@XZ ENDP				; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@XZ				; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Rectangle@@QAE@XZ PROC NEAR			; CSCI_Rectangle::CSCI_Rectangle, COMDAT

; 514  : 	CSCI_Rectangle() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@XZ	; CSCI_Object::CSCI_Object
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Rectangle@@QAE@XZ ENDP				; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@XZ				; ObjectID::ObjectID
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Object@@QAE@XZ PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 10   : 	CSCI_Object() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@XZ	; ObjectID::ObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Object@@QAE@XZ ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@XZ				; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ObjectID@@QAE@XZ PROC NEAR				; ObjectID::ObjectID, COMDAT

; 227  : 	ObjectID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@XZ	; FakeObjectID::FakeObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ObjectID@@QAE@XZ ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeObjectID@@QAE@XZ PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeObjectID@@QAE@XZ ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@G@Z				; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_WorldObject@@QAE@G@Z PROC NEAR			; CSCI_WorldObject::CSCI_WorldObject, COMDAT

; 4475 : 	CSCI_WorldObject(SOL_Handle h) : CSCI_Actor(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@G@Z	; CSCI_Actor::CSCI_Actor
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_WorldObject@@QAE@G@Z ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@G@Z				; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Actor@@QAE@G@Z PROC NEAR			; CSCI_Actor::CSCI_Actor, COMDAT

; 1596 : 	CSCI_Actor(SOL_Handle h) : CSCI_Prop(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@G@Z	; CSCI_Prop::CSCI_Prop
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Actor@@QAE@G@Z ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@G@Z				; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Prop@@QAE@G@Z PROC NEAR				; CSCI_Prop::CSCI_Prop, COMDAT

; 1560 : 	CSCI_Prop(SOL_Handle h) : CSCI_View(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@G@Z	; CSCI_View::CSCI_View
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Prop@@QAE@G@Z ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@G@Z			; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_View@@QAE@G@Z PROC NEAR				; CSCI_View::CSCI_View, COMDAT

; 1515 : 	CSCI_View(SOL_Handle h) : CSCI_Feature(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@G@Z ; CSCI_Feature::CSCI_Feature
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_View@@QAE@G@Z ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@G@Z				; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Feature@@QAE@G@Z PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT

; 1437 : 	CSCI_Feature(SOL_Handle h) : CSCI_BitMap(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@G@Z	; CSCI_BitMap::CSCI_BitMap
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Feature@@QAE@G@Z ENDP				; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@G@Z			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_BitMap@@QAE@G@Z PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT

; 1358 : 	CSCI_BitMap(SOL_Handle h) : CSCI_Rectangle(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@G@Z ; CSCI_Rectangle::CSCI_Rectangle
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_BitMap@@QAE@G@Z ENDP				; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Rectangle@@QAE@G@Z PROC NEAR			; CSCI_Rectangle::CSCI_Rectangle, COMDAT

; 517  : 	CSCI_Rectangle(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Rectangle@@QAE@G@Z ENDP				; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
;	COMDAT ?set_pDirectObject@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT
_value$ = 8
_this$ = -4
?set_pDirectObject@CSCI_WorldObject@@QAEXF@Z PROC NEAR	; CSCI_WorldObject::set_pDirectObject, COMDAT

; 4490 : 	void set_pDirectObject( Property value ) { SetProperty ( s_pDirectObject, value ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _value$[ebp]
  0000b	50		 push	 eax
  0000c	68 1e 03 00 00	 push	 798			; 0000031eH
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetProperty@ObjectID@@QBEXGF@Z ; ObjectID::SetProperty
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_pDirectObject@CSCI_WorldObject@@QAEXF@Z ENDP	; CSCI_WorldObject::set_pDirectObject
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pServIDLo@CSCI_WorldObject@@QAEFXZ PROC NEAR	; CSCI_WorldObject::get_pServIDLo, COMDAT

; 4538 : 	Property get_pServIDLo() { return GetProperty ( s_pServIDLo ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 cb 02 00 00	 push	 715			; 000002cbH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pServIDLo@CSCI_WorldObject@@QAEFXZ ENDP		; CSCI_WorldObject::get_pServIDLo
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pServIDHi@CSCI_WorldObject@@QAEFXZ PROC NEAR	; CSCI_WorldObject::get_pServIDHi, COMDAT

; 4541 : 	Property get_pServIDHi() { return GetProperty ( s_pServIDHi ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 cc 02 00 00	 push	 716			; 000002ccH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pServIDHi@CSCI_WorldObject@@QAEFXZ ENDP		; CSCI_WorldObject::get_pServIDHi
_TEXT	ENDS
;	COMDAT ?get_pManaValue@CSCI_WorldObject@@QAE?AVCSCI_LongInt@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
?get_pManaValue@CSCI_WorldObject@@QAE?AVCSCI_LongInt@@XZ PROC NEAR ; CSCI_WorldObject::get_pManaValue, COMDAT

; 4617 : 	CSCI_LongInt get_pManaValue() { return GetProperty ( s_pManaValue ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 38 03 00 00	 push	 824			; 00000338H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CSCI_LongInt@@QAE@G@Z ; CSCI_LongInt::CSCI_LongInt
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?get_pManaValue@CSCI_WorldObject@@QAE?AVCSCI_LongInt@@XZ ENDP ; CSCI_WorldObject::get_pManaValue
_TEXT	ENDS
PUBLIC	??0CSCI_WorldActor@@QAE@G@Z			; CSCI_WorldActor::CSCI_WorldActor
;	COMDAT ??0CSCI_WorldEgo@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_WorldEgo@@QAE@G@Z PROC NEAR			; CSCI_WorldEgo::CSCI_WorldEgo, COMDAT

; 5038 : 	CSCI_WorldEgo(SOL_Handle h) : CSCI_WorldActor(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_WorldActor@@QAE@G@Z ; CSCI_WorldActor::CSCI_WorldActor
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_WorldEgo@@QAE@G@Z ENDP				; CSCI_WorldEgo::CSCI_WorldEgo
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_WorldActor@@QAE@G@Z PROC NEAR			; CSCI_WorldActor::CSCI_WorldActor, COMDAT

; 4932 : 	CSCI_WorldActor(SOL_Handle h) : CSCI_WorldObject(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@G@Z ; CSCI_WorldObject::CSCI_WorldObject
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_WorldActor@@QAE@G@Z ENDP			; CSCI_WorldActor::CSCI_WorldActor
_TEXT	ENDS
;	COMDAT ?get_pManaObj@CSCI_WorldEgo@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_pManaObj@CSCI_WorldEgo@@QAEFXZ PROC NEAR		; CSCI_WorldEgo::get_pManaObj, COMDAT

; 5061 : 	Property get_pManaObj() { return GetProperty ( s_pManaObj ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 38 04 00 00	 push	 1080			; 00000438H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_pManaObj@CSCI_WorldEgo@@QAEFXZ ENDP		; CSCI_WorldEgo::get_pManaObj
_TEXT	ENDS
PUBLIC	??0CSCI_Game@@QAE@G@Z				; CSCI_Game::CSCI_Game
;	COMDAT ??0CSCI_RoomZero@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_RoomZero@@QAE@G@Z PROC NEAR			; CSCI_RoomZero::CSCI_RoomZero, COMDAT

; 9596 : 	CSCI_RoomZero(SOL_Handle h) : CSCI_Game(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Game@@QAE@G@Z	; CSCI_Game::CSCI_Game
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_RoomZero@@QAE@G@Z ENDP				; CSCI_RoomZero::CSCI_RoomZero
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0CSCI_Game@@QAE@G@Z PROC NEAR				; CSCI_Game::CSCI_Game, COMDAT

; 2667 : 	CSCI_Game(SOL_Handle h) : CSCI_Object(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@G@Z	; CSCI_Object::CSCI_Object
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0CSCI_Game@@QAE@G@Z ENDP				; CSCI_Game::CSCI_Game
_TEXT	ENDS
;	COMDAT ?GetGlobal@PMachine@@QAEFH@Z
_TEXT	SEGMENT
_nGlobal$ = 8
_this$ = -4
?GetGlobal@PMachine@@QAEFH@Z PROC NEAR			; PMachine::GetGlobal, COMDAT

; 74   : 	Property	GetGlobal( int nGlobal ) { return GlobalPtr[ nGlobal ]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000d	8b 55 08	 mov	 edx, DWORD PTR _nGlobal$[ebp]
  00010	66 8b 04 51	 mov	 ax, WORD PTR [ecx+edx*2]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?GetGlobal@PMachine@@QAEFH@Z ENDP			; PMachine::GetGlobal
_TEXT	ENDS
PUBLIC	??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z	; std::bitset<6>::reference::operator=
PUBLIC	??A?$bitset@$05@std@@QAE?AVreference@01@I@Z	; std::bitset<6>::operator[]
;	COMDAT ?SetTransient@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT
$T156890 = -8
_bValue$ = 8
_this$ = -12
?SetTransient@CSkinWnd@@IAEX_N@Z PROC NEAR		; CSkinWnd::SetTransient, COMDAT

; 150  : 	void SetTransient ( bool bValue ) { m_state[sknWndTransient] = bValue; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000c	50		 push	 eax
  0000d	6a 04		 push	 4
  0000f	8d 4d f8	 lea	 ecx, DWORD PTR $T156890[ebp]
  00012	51		 push	 ecx
  00013	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0001c	e8 00 00 00 00	 call	 ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ; std::bitset<6>::operator[]
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ; std::bitset<6>::reference::operator=
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetTransient@CSkinWnd@@IAEX_N@Z ENDP			; CSkinWnd::SetTransient
_TEXT	ENDS
PUBLIC	??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z	; std::bitset<6>::reference::reference
;	COMDAT ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT
$T156892 = -8
___$ReturnUdt$ = 8
_this$ = -12
__P$ = 12
??A?$bitset@$05@std@@QAE?AVreference@01@I@Z PROC NEAR	; std::bitset<6>::operator[], COMDAT

; 54   : 		{return (reference(*this, _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	51		 push	 ecx
  00011	8d 4d f8	 lea	 ecx, DWORD PTR $T156892[ebp]
  00014	e8 00 00 00 00	 call	 ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z ; std::bitset<6>::reference::reference
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	89 11		 mov	 DWORD PTR [ecx], edx
  00023	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ENDP	; std::bitset<6>::operator[]
_TEXT	ENDS
PUBLIC	?set@?$bitset@$05@std@@QAEAAV12@I_N@Z		; std::bitset<6>::set
;	COMDAT ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z PROC NEAR	; std::bitset<6>::reference::operator=, COMDAT

; 24   : 			{_Pbs->set(_Off, _X);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 08	 mov	 al, BYTE PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	e8 00 00 00 00	 call	 ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z ; std::bitset<6>::set

; 25   : 			return (*this); }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ENDP	; std::bitset<6>::reference::operator=
_TEXT	ENDS
PUBLIC	?_Xran@?$bitset@$05@std@@ABEXXZ			; std::bitset<6>::_Xran
;	COMDAT ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z
_TEXT	SEGMENT
__P$ = 8
__X$ = 12
_this$ = -4
?set@?$bitset@$05@std@@QAEAAV12@I_N@Z PROC NEAR		; std::bitset<6>::set, COMDAT

; 119  : 		{if (_N <= _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 7d 08 06	 cmp	 DWORD PTR __P$[ebp], 6
  0000c	72 08		 jb	 SHORT $L153117

; 120  : 			_Xran();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Xran@?$bitset@$05@std@@ABEXXZ ; std::bitset<6>::_Xran
$L153117:

; 121  : 		if (_X)

  00016	8b 45 0c	 mov	 eax, DWORD PTR __X$[ebp]
  00019	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001e	85 c0		 test	 eax, eax
  00020	74 31		 je	 SHORT $L153118

; 122  : 			_A[_P / _Nb] |= (_Ty)1 << _P % _Nb;

  00022	8b 75 08	 mov	 esi, DWORD PTR __P$[ebp]
  00025	c1 ee 05	 shr	 esi, 5
  00028	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0002b	33 d2		 xor	 edx, edx
  0002d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00032	f7 f1		 div	 ecx
  00034	8b ca		 mov	 ecx, edx
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	d3 e2		 shl	 edx, cl
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00043	0b ca		 or	 ecx, edx
  00045	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  00048	c1 ea 05	 shr	 edx, 5
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 123  : 		else

  00051	eb 31		 jmp	 SHORT $L153120
$L153118:

; 124  : 			_A[_P / _Nb] &= ~((_Ty)1 << _P % _Nb);

  00053	8b 75 08	 mov	 esi, DWORD PTR __P$[ebp]
  00056	c1 ee 05	 shr	 esi, 5
  00059	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0005c	33 d2		 xor	 edx, edx
  0005e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00063	f7 f1		 div	 ecx
  00065	8b ca		 mov	 ecx, edx
  00067	ba 01 00 00 00	 mov	 edx, 1
  0006c	d3 e2		 shl	 edx, cl
  0006e	f7 d2		 not	 edx
  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00076	23 ca		 and	 ecx, edx
  00078	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  0007b	c1 ea 05	 shr	 edx, 5
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
$L153120:

; 125  : 		return (*this); }

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	5e		 pop	 esi
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
?set@?$bitset@$05@std@@QAEAAV12@I_N@Z ENDP		; std::bitset<6>::set
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT
__X$ = 8
__P$ = 12
_this$ = -4
??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z PROC NEAR	; std::bitset<6>::reference::reference, COMDAT

; 37   : 		reference(bitset<_N>& _X, size_t _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __X$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z ENDP	; std::bitset<6>::reference::reference
_TEXT	ENDS
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
PUBLIC	??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ ; `string'
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
EXTRN	__CxxThrowException@8:NEAR
EXTRN	__imp_??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z:NEAR
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
EXTRN	??0logic_error@std@@QAE@ABV01@@Z:NEAR		; std::logic_error::logic_error
EXTRN	??1out_of_range@std@@UAE@XZ:NEAR		; std::out_of_range::~out_of_range
EXTRN	??0out_of_range@std@@QAE@ABV01@@Z:NEAR		; std::out_of_range::out_of_range
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT ??_R0?AVexception@@@8
; File C:\Program Files\Microsoft Visual Studio\VC98\INCLUDE\bitset
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@
_DATA	SEGMENT
??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ DB 'invalid bitset'
	DB	'<N> position', 00H				; `string'
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T156903 DD	019930520H
	DD	01H
	DD	FLAT:$T156905
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T156905 DD	0ffffffffH
	DD	FLAT:$L156901
xdata$x	ENDS
;	COMDAT ?_Xran@?$bitset@$05@std@@ABEXXZ
_TEXT	SEGMENT
$T156897 = -40
$T156898 = -56
$T156899 = -60
__$EHRec$ = -12
_this$ = -64
?_Xran@?$bitset@$05@std@@ABEXXZ PROC NEAR		; std::bitset<6>::_Xran, COMDAT

; 250  : 		{_THROW(out_of_range, "invalid bitset<N> position"); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L156904
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8d 45 c4	 lea	 eax, DWORD PTR $T156899[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ ; `string'
  00027	8d 4d c8	 lea	 ecx, DWORD PTR $T156898[ebp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	8d 4d c8	 lea	 ecx, DWORD PTR $T156898[ebp]
  0003a	51		 push	 ecx
  0003b	8d 4d d8	 lea	 ecx, DWORD PTR $T156897[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00044	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00049	8d 55 d8	 lea	 edx, DWORD PTR $T156897[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$L153400:
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L156901:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T156898[ebp]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00009	c3		 ret	 0
$L156904:
  0000a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156903
  0000f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xran@?$bitset@$05@std@@ABEXXZ ENDP			; std::bitset<6>::_Xran
;	COMDAT ?Next@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Next@CSkinWnd@@UAEXXZ PROC NEAR			; CSkinWnd::Next, COMDAT

; 275  : 	virtual void Next ( void ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?Next@CSkinWnd@@UAEXXZ ENDP				; CSkinWnd::Next
_TEXT	ENDS
;	COMDAT ?Previous@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Previous@CSkinWnd@@UAEXXZ PROC NEAR			; CSkinWnd::Previous, COMDAT

; 276  : 	virtual void Previous ( void ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?Previous@CSkinWnd@@UAEXXZ ENDP				; CSkinWnd::Previous
_TEXT	ENDS
;	COMDAT ?GetItemTextColor@CSkinListCtrl@@MAEKH@Z
_TEXT	SEGMENT
_this$ = -4
?GetItemTextColor@CSkinListCtrl@@MAEKH@Z PROC NEAR	; CSkinListCtrl::GetItemTextColor, COMDAT

; 90   : 	virtual COLORREF GetItemTextColor( int nItem ) { return colItemText; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [eax+168]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?GetItemTextColor@CSkinListCtrl@@MAEKH@Z ENDP		; CSkinListCtrl::GetItemTextColor
_TEXT	ENDS
;	COMDAT ?GetItemBGColor@CSkinListCtrl@@MAEKH@Z
_TEXT	SEGMENT
_this$ = -4
?GetItemBGColor@CSkinListCtrl@@MAEKH@Z PROC NEAR	; CSkinListCtrl::GetItemBGColor, COMDAT

; 91   : 	virtual COLORREF GetItemBGColor( int nItem ) { return colItemBG; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?GetItemBGColor@CSkinListCtrl@@MAEKH@Z ENDP		; CSkinListCtrl::GetItemBGColor
_TEXT	ENDS
PUBLIC	?PutByte@CPackedData@@QAEXE@Z			; CPackedData::PutByte
;	COMDAT ?PutWord@CPackedData@@QAEXF@Z
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -4
?PutWord@CPackedData@@QAEXF@Z PROC NEAR			; CPackedData::PutWord, COMDAT

; 136  : 	inline void PutWord ( short nValue ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 137  : 		if ( !this )

  00007	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000b	75 02		 jne	 SHORT $L148081

; 138  : 			return;

  0000d	eb 28		 jmp	 SHORT $L148080
$L148081:

; 139  : 
; 140  : 		PutByte ( (nValue & 0x00FF) );

  0000f	0f bf 45 08	 movsx	 eax, WORD PTR _nValue$[ebp]
  00013	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?PutByte@CPackedData@@QAEXE@Z ; CPackedData::PutByte

; 141  : 		PutByte ( (nValue & 0xFF00) >> 8 );

  00021	0f bf 4d 08	 movsx	 ecx, WORD PTR _nValue$[ebp]
  00025	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0002b	c1 f9 08	 sar	 ecx, 8
  0002e	51		 push	 ecx
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?PutByte@CPackedData@@QAEXE@Z ; CPackedData::PutByte
$L148080:

; 142  : 	};

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?PutWord@CPackedData@@QAEXF@Z ENDP			; CPackedData::PutWord
_TEXT	ENDS
PUBLIC	?CheckBounds@OCArray@@IAEXH@Z			; OCArray::CheckBounds
;	COMDAT ?PutByte@CPackedData@@QAEXE@Z
_TEXT	SEGMENT
_cValue$ = 8
_this$ = -4
?PutByte@CPackedData@@QAEXE@Z PROC NEAR			; CPackedData::PutByte, COMDAT

; 99   : 	inline void PutByte ( unsigned char cValue ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 100  : 		if ( !this )

  00007	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000b	75 02		 jne	 SHORT $L148067

; 101  : 			return;

  0000d	eb 36		 jmp	 SHORT $L148066
$L148067:

; 102  : 
; 103  : 		CheckBounds ( m_nPutIndex + 1 );

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00015	83 c1 01	 add	 ecx, 1
  00018	51		 push	 ecx
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 c1 04	 add	 ecx, 4
  0001f	e8 00 00 00 00	 call	 ?CheckBounds@OCArray@@IAEXH@Z ; OCArray::CheckBounds

; 104  : 		m_pData[m_nPutIndex++] = cValue;

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00030	8a 4d 08	 mov	 cl, BYTE PTR _cValue$[ebp]
  00033	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0003c	83 c0 01	 add	 eax, 1
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$L148066:

; 105  : 	};

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?PutByte@CPackedData@@QAEXE@Z ENDP			; CPackedData::PutByte
_TEXT	ENDS
EXTRN	?Grow@OCArray@@IAEXH@Z:NEAR			; OCArray::Grow
;	COMDAT ?CheckBounds@OCArray@@IAEXH@Z
_TEXT	SEGMENT
_nIndex$ = 8
_this$ = -4
?CheckBounds@OCArray@@IAEXH@Z PROC NEAR			; OCArray::CheckBounds, COMDAT

; 41   : 	inline void CheckBounds ( int nIndex ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 		if ( nIndex >= m_nActualSize )

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0000d	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00010	7c 17		 jl	 SHORT $L147959

; 43   : 			Grow ( (nIndex - m_nActualSize) + _ARRAY_GROW_SIZE );

  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00018	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  0001b	05 10 27 00 00	 add	 eax, 10000		; 00002710H
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?Grow@OCArray@@IAEXH@Z	; OCArray::Grow
$L147959:

; 44   : 
; 45   : 		if ( nIndex >= m_nSize )

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  0002f	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00032	7c 0c		 jl	 SHORT $L147960

; 46   : 			m_nSize = nIndex + 1;

  00034	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00037	83 c0 01	 add	 eax, 1
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L147960:

; 47   : 	};

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?CheckBounds@OCArray@@IAEXH@Z ENDP			; OCArray::CheckBounds
_TEXT	ENDS
;	COMDAT ?PutLong@CPackedData@@QAEXH@Z
_TEXT	SEGMENT
_nValue$ = 8
_this$ = -4
?PutLong@CPackedData@@QAEXH@Z PROC NEAR			; CPackedData::PutLong, COMDAT

; 175  : 	inline void PutLong ( int nValue ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 176  : 		if ( !this )

  00007	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000b	75 02		 jne	 SHORT $L148095

; 177  : 			return;

  0000d	eb 4f		 jmp	 SHORT $L148094
$L148095:

; 178  : 
; 179  : 		PutByte ( (nValue & 0x000000FF) );	

  0000f	8b 45 08	 mov	 eax, DWORD PTR _nValue$[ebp]
  00012	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?PutByte@CPackedData@@QAEXE@Z ; CPackedData::PutByte

; 180  : 		PutByte ( (nValue & 0x0000FF00) >> 8 );

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _nValue$[ebp]
  00023	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00029	c1 f9 08	 sar	 ecx, 8
  0002c	51		 push	 ecx
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?PutByte@CPackedData@@QAEXE@Z ; CPackedData::PutByte

; 181  : 		PutByte ( (nValue & 0x00FF0000) >> 16 );

  00035	8b 55 08	 mov	 edx, DWORD PTR _nValue$[ebp]
  00038	81 e2 00 00 ff
	00		 and	 edx, 16711680		; 00ff0000H
  0003e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00041	52		 push	 edx
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?PutByte@CPackedData@@QAEXE@Z ; CPackedData::PutByte

; 182  : 		PutByte ( (nValue & 0xFF000000) >> 24 );

  0004a	8b 45 08	 mov	 eax, DWORD PTR _nValue$[ebp]
  0004d	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00052	c1 e8 18	 shr	 eax, 24			; 00000018H
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?PutByte@CPackedData@@QAEXE@Z ; CPackedData::PutByte
$L148094:

; 183  : 	};

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?PutLong@CPackedData@@QAEXH@Z ENDP			; CPackedData::PutLong
_TEXT	ENDS
;	COMDAT ?CloseMe@CSellDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?CloseMe@CSellDlg@@QAEXXZ PROC NEAR			; CSellDlg::CloseMe, COMDAT

; 67   : 	void CloseMe() { m_pQuantity = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 80 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+168], 0
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?CloseMe@CSellDlg@@QAEXXZ ENDP				; CSellDlg::CloseMe
_TEXT	ENDS
PUBLIC	??_7CSkinObj@@6B@				; CSkinObj::`vftable'
PUBLIC	??_GCSkinObj@@UAEPAXI@Z				; CSkinObj::`scalar deleting destructor'
PUBLIC	??_ECSkinObj@@UAEPAXI@Z				; CSkinObj::`vector deleting destructor'
;	COMDAT ??_7CSkinObj@@6B@
CONST	SEGMENT
??_7CSkinObj@@6B@ DD FLAT:??_ECSkinObj@@UAEPAXI@Z	; CSkinObj::`vftable'
CONST	ENDS
;	COMDAT ??0CSkinObj@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSkinObj@@QAE@ABV0@@Z PROC NEAR			; CSkinObj::CSkinObj, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSkinObj@@6B@ ; CSkinObj::`vftable'
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0CSkinObj@@QAE@ABV0@@Z ENDP				; CSkinObj::CSkinObj
_TEXT	ENDS
EXTRN	??1CSkinCtrl@@UAE@XZ:NEAR			; CSkinCtrl::~CSkinCtrl
;	COMDAT ??1CSkinBtn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSkinBtn@@UAE@XZ PROC NEAR				; CSkinBtn::~CSkinBtn, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinCtrl@@UAE@XZ	; CSkinCtrl::~CSkinCtrl
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CSkinBtn@@UAE@XZ ENDP				; CSkinBtn::~CSkinBtn
_TEXT	ENDS
;	COMDAT ??_GCSkinObj@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCSkinObj@@UAEPAXI@Z PROC NEAR			; CSkinObj::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L149299
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L149299:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSkinObj@@UAEPAXI@Z ENDP				; CSkinObj::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?BringWindowToTop@CWnd@@QAEXXZ			; CWnd::BringWindowToTop
PUBLIC	?UpdateWindow@CWnd@@QAEXXZ			; CWnd::UpdateWindow
;	COMDAT ?BringTabToTop@CMainPanelWnd@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?BringTabToTop@CMainPanelWnd@@QAEXXZ PROC NEAR		; CMainPanelWnd::BringTabToTop, COMDAT

; 268  :     { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 269  :         if (m_pTabDlg) 

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00011	74 1c		 je	 SHORT $L150281

; 271  :             m_pTabDlg->BringWindowToTop(); 

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8b 89 b0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+176]
  0001c	e8 00 00 00 00	 call	 ?BringWindowToTop@CWnd@@QAEXXZ ; CWnd::BringWindowToTop

; 272  :             m_pTabDlg->UpdateWindow(); 

  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 8a b0 00 00
	00		 mov	 ecx, DWORD PTR [edx+176]
  0002a	e8 00 00 00 00	 call	 ?UpdateWindow@CWnd@@QAEXXZ ; CWnd::UpdateWindow
$L150281:

; 274  :     }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?BringTabToTop@CMainPanelWnd@@QAEXXZ ENDP		; CMainPanelWnd::BringTabToTop
_TEXT	ENDS
EXTRN	__imp__BringWindowToTop@4:NEAR
;	COMDAT ?BringWindowToTop@CWnd@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?BringWindowToTop@CWnd@@QAEXXZ PROC NEAR		; CWnd::BringWindowToTop, COMDAT

; 94   : 	{ ASSERT(::IsWindow(m_hWnd)); ::BringWindowToTop(m_hWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BringWindowToTop@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?BringWindowToTop@CWnd@@QAEXXZ ENDP			; CWnd::BringWindowToTop
_TEXT	ENDS
EXTRN	__imp__UpdateWindow@4:NEAR
;	COMDAT ?UpdateWindow@CWnd@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?UpdateWindow@CWnd@@QAEXXZ PROC NEAR			; CWnd::UpdateWindow, COMDAT

; 118  : 	{ ASSERT(::IsWindow(m_hWnd)); ::UpdateWindow(m_hWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UpdateWindow@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?UpdateWindow@CWnd@@QAEXXZ ENDP				; CWnd::UpdateWindow
_TEXT	ENDS
END

	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\charsel.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@NAAD@Magellan?5MSWHEEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FPAF@MouseZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CLBL@MSWHEEL_ROLLMSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DLPD@MSH_WHEELSUPPORT_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODOJ@MSH_SCROLL_LINES_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EDBF@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FGFK@CLSID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DMDD@?5?9?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOFL@Interface?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FNJL@?$CICLSID?$DP?$DP?$DP?$CJ?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DLIL@?5?9?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@NKPL@Unknown?5Error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@HOAP@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@BJHN@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MDHG@?4tlb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLHD@oleaut32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FJNM@UnRegisterTypeLib?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CDEE@DllGetVersion?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FDEG@comctl32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKNA@shell32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@ILEN@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@JLLA@?3Jan?3January?3Feb?3February?3Mar?3Ma@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCCD@true?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELCB@no?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LGKI@yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKHJ@C?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPIO@IDispatch?5error?5?$CD?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NADL@Unknown?5error?50x?$CF0lX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KLJH@invalid?5vector?$DMbool?$DO?5subscript?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MHAC@?$CFp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CFAI@0123456789abcdefABCDEF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KFAL@E?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KMAE@?0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MMAA@missing?5locale?5facet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __tcscmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcscoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextWindow@@YAPAUHWND__@@PAU1@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawState@@YGHPAUHDC__@@PAUHBRUSH__@@P6GH0JIHH@ZJIHHHHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextPtr@CSimpleList@@QBEPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CByteArray@@QBEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CByteArray@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CWordArray@@QBEGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CWordArray@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CDWordArray@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CDWordArray@@QAEAAKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CUIntArray@@QBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CUIntArray@@QAEAAIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ACPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CObArray@@QBEPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CObArray@@QAEAAPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CStringArray@@QBE?AVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CStringArray@@QAEAAVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSimpleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSimpleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMemoryException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemoryException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNotSupportedException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNotSupportedException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCArchiveException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFileException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFileException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFilePath@CFile@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CString@@IBEPAUCStringData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CString@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@CString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YG_NABVCString@@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YG_NPBDABVCString@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDays@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalHours@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalMinutes@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalSeconds@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CenterPoint@CRect@@QBE?AVCPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwapLeftRight@CRect@@SAXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OffsetRect@CRect@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCResourceException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CResourceException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCUserException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CUserException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPen@@SGPAV1@PAUHPEN__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBrush@@SGPAV1@PAUHBRUSH__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPalette@@SGPAV1@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHmenu@CMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CListBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCheckListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCheckListBox@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComboBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemData@CComboBox@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CComboBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEdit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCommonDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCommonDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintSelection@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintRange@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorders@CStatusBar@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRectTracker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmapButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmapButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualGUID@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCOleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1COleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleCurrency@@QAEXW4CurrencyStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4COleDateTime@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTime@@QAEXW4DateTimeStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0COleDateTimeSpan@@QAE@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTimeSpan@@QAEXW4DateTimeSpanStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@COleSafeArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDateTimeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonthCalCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDragListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatusBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListCtrl@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHotKeyCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpinButtonCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSliderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAnimateCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRichEditCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RequestResize@CRichEditCtrl@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetEventMask@CRichEditCtrl@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCReBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CReBarCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBoxEx@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIPAddressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2BSTR@@YAPAGPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlTrace2@ATL@@YAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualGUID@ATL@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YAHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReplaceSingleQuote@CComModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@CComBSTR@ATL@@QAE_NPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalClear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlAdvise@ATL@@YGJPAUIUnknown@@0ABU_GUID@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_NextObjectMapEntry@ATL@@YAPAU_ATL_OBJMAP_ENTRY@1@PAU_ATL_MODULE@1@PAU21@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleInit@ATL@@YGJPAU_ATL_MODULE@1@PAU_ATL_OBJMAP_ENTRY@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterClassObjects@ATL@@YGJPAU_ATL_MODULE@1@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRevokeClassObjects@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleGetClassObject@ATL@@YGJPAU_ATL_MODULE@1@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleTerm@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddTermFunc@ATL@@YGJPAU_ATL_MODULE@1@P6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterServer@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServerEx@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServer@ATL@@YGJPAU_ATL_MODULE@1@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUpdateRegistryFromResourceD@ATL@@YGJPAU_ATL_MODULE@1@PBGHPAU_ATL_REGMAP_ENTRY@1@PAUIRegistrar@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleLoadTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBGPAPAGPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddCreateWndData@ATL@@YGXPAU_ATL_MODULE@1@PAU_AtlCreateWndData@1@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleExtractCreateWndData@ATL@@YGPAXPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBDPAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@invalid_argument@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0invalid_argument@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YAGDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@failure@ios_base@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7_bstr_t@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Compare@_bstr_t@@ABEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@Data_t@_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Assign@Data_t@_bstr_t@@QAEXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@Data_t@_bstr_t@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8_variant_t@@QBE_NPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@_variant_t@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonikerFile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDocument@COleServerItem@@QBEPAVCOleServerDoc@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$vector@_NV?$allocator@I@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPBI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?BVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Zconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Mconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Ziterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Miterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@Vconst_iterator@12@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@_NV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nw@?$vector@_NV?$allocator@I@std@@@std@@KAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Trim@?$vector@_NV?$allocator@I@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$vector@_NV?$allocator@I@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DStringID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_bitmap@CSCI_BitMap@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_xScaleAdj@CSCI_Feature@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_yScaleAdj@CSCI_Feature@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pProperName@CSCI_BCharacter@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDLo@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDHi@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GroupMember@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAllowMove@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProcessEvents@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTransient@CSkinWnd@@IAE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTransient@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetEventProcessing@CSkinWnd@@QAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Next@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Previous@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0strstreambuf@std@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0strstreambuf@std@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?str@strstreambuf@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pcount@strstreambuf@std@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gstrstreambuf@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gistrstream@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Distrstream@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gostrstream@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Dostrstream@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0strstream@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?str@strstream@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pcount@strstream@std@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gstrstream@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Dstrstream@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDoubleButtonDlg@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CDoubleButtonDlg@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCharSelectWnd@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSkinObj@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CSkinObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSkinObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCharSelPlayBtn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSkinToggleBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSkinBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCharSelCreateBtn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCharSelHotSpot@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEraseDlg@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CEraseDlg@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEraseToonBtn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CEraseToonBtn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPointContainer@@@ATL@@QAEPAPAUIConnectionPointContainer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPointContainer@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPointContainer@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPoint@@@ATL@@QAEPAPAUIConnectionPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPoint@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPoint@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIRegistrar@@@ATL@@QAEPAPAUIRegistrar@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIRegistrar@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIRegistrar@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIRegistrar@@@ATL@@QAEPAUIRegistrar@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInterfacePtr@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QBEPAUIMoniker@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QBEPAUIBinding@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@IABIABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_allocator@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$allocator@I@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@IV?$allocator@I@std@@@std@@QAEPAIPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eq@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lt@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@IV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Viterator@?$vector@_NV?$allocator@I@std@@@std@@_NVreference@23@PAV423@H@std@@QAE@Viterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@_N$$CBVreference@23@PBV423@H@std@@QAE@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$bitset@$05@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$bitset@$04@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$bitset@$04@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinCtrl@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEAAPAVCSkinCtrl@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXABQAVCSkinCtrl@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinBitmap@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEAAPAVCSkinBitmap@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXABQAVCSkinBitmap@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@ABV?$allocator@PAVCPoint@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEAAPAVCPoint@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXABQAVCPoint@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@ABV?$allocator@VCSCI_WorldActor@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEAAVCSCI_WorldActor@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXABVCSCI_WorldActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@I@std@@QAEPAIIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@I@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@I@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@IV?$allocator@I@std@@@std@@QAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?test@?$bitset@$05@std@@QBE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?test@?$bitset@$04@std@@QBE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$04@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@PAPAV3@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@PAV3@ABV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VCSkinObj@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCPoint@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@PAV3@ABV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@I@std@@QAEXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@I@std@@QAEXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$bitset@$05@std@@ABEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$bitset@$04@std@@ABEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXPAPAVCSkinCtrl@@IABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXPAVCSkinObj@@IABV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXPAPAVCSkinBitmap@@IABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXPAPAVCPoint@@IABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXPAVCSCI_WorldActor@@IABV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAVCSkinCtrl@@@std@@QAEPAPAVCSkinCtrl@@IPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEPAPAVCSkinCtrl@@PBQAV3@0PAPAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@IABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEPAVCSkinObj@@PBV3@0PAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@IABV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@VCSkinObj@@@std@@QAEPAVCSkinObj@@IPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEPAPAVCSkinBitmap@@PBQAV3@0PAPAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@IABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAVCSkinBitmap@@@std@@QAEPAPAVCSkinBitmap@@IPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEPAPAVCPoint@@PBQAV3@0PAPAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@IABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAVCPoint@@@std@@QAEPAPAVCPoint@@IPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEPAVCSCI_WorldActor@@PBV3@0PAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@IABV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@VCSCI_WorldActor@@@std@@QAEPAVCSCI_WorldActor@@IPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@G@std@@QAEPAGIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@G@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@ABV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@ABV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXViterator@?$vector@_NV?$allocator@I@std@@@1@0AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@Vconst_iterator@31@0V231@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YADDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@GU?$char_traits@G@std@@@1@0IPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@std@@YA_NPBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lexicographical_compare@std@@YA_NPBI000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@I@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?isdigit@std@@YA_NDABVlocale@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAIHPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAI0ABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAPAVCPoint@@PAPAV2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCSkinCtrl@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAPAVCSkinCtrl@@0ABQAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAPAVCSkinCtrl@@PAPAV2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAVCSkinObj@@0ABV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAVCSkinObj@@PAV2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAVCSkinObj@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAPAVCSkinBitmap@@0ABQAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCSkinBitmap@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAPAVCPoint@@0ABQAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAPAVCPoint@@PAPAV2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCPoint@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAVCSCI_WorldActor@@0ABV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAVCSCI_WorldActor@@PAV2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAVCSCI_WorldActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@G@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAPAVCSkinCtrl@@HPAPAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAVCSkinObj@@HPAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAPAVCSkinBitmap@@HPAPAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAPAVCPoint@@HPAPAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAVCSCI_WorldActor@@HPAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAPAVCSkinCtrl@@ABQAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAVCSkinObj@@ABV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAPAVCSkinBitmap@@ABQAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAPAVCPoint@@ABQAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAVCSCI_WorldActor@@ABV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@D@std@@@std@@SAPAV?$ctype@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@G@std@@@std@@SAPAV?$ctype@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAPAV?$numpunct@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAPAV?$numpunct@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Iter_cat@std@@YA?AUrandom_access_iterator_tag@1@ABU?$iterator@Urandom_access_iterator_tag@std@@_NH@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAIUrandom_access_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?mismatch@std@@YA?AU?$pair@PBIPBI@1@PBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPADPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPAGPBDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@PBIPBI@std@@QAE@ABQBI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECCharSelectWnd@@WJE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_eab22ac1_30c1_11cf_a7eb_0000c05bae0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d66d6f98_cdaa_11d0_b822_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9860_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000117_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000113_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d8_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1f8352c0_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonthCalCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f220_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f208_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc9_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa5_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000192_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000128_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000140_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CEdit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000122_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_920ff31f_ca25_451a_9738_3444fc206bcc
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b283_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CScrollBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bcc7_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CTabCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b3e7c340_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d49_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_85cb6900_4d95_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4f7ae600_0142_11d3_9dcf_89be4efb591e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBoxEx@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f203_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1ac3d9f0_175c_11d1_95be_00609797ea4f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_012dd920_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHotKeyCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020403_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f311_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1008c4a0_7613_11cf_9af1_0020af6e72f4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020410_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020404_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVoverflow_error@std@@@8??0overflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f23b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b15b8dc1_c7e1_11d0_8680_00aa00bdcb71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f52e2b61_18a1_11d1_b105_00805f49916b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3d7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2aa_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1de_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9d5_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000025_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000019_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d8_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_948c5ad3_c58d_11d0_9c0b_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020406_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_bc40bec1_c493_11d0_831b_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd21_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ee11629b_36df_11d3_9dd0_89d6dbbba800
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9bfbbc02_eff1_101a_84ed_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f03340_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_63cdbcb0_c1b1_11d0_9336_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_bb1a2ae1_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0c733a30_2a1c_11ce_ade5_00aa0044773d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65ce_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cb5bdc81_93c1_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f218_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f230_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ef_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSimpleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f377_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_000214e1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0e6d4d92_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ca478da0_3920_11d3_9dd0_8067e4a06603
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eae1ba61_a4ed_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9eb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55882_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVrange_error@std@@@8??0range_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f35f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3fd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd23_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a3ccedf3_2de2_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d10f6761_83e9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0002e011_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28d_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1ff_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CEraseToonBtn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f240_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1da_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCommonDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000129_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88a05c00_f000_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ee_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d5f56b60_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToolBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_08ec3e00_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCharSelCreateBtn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3af280b6_cb3f_11d0_891e_00c04fb6bfc4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9e7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020d03_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_85bd8e82_0fba_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CNotSupportedException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3fc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d40_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_359f3441_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f28b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_afa0dc11_c313_11d0_831a_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000023_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e0e270c1_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CCharSelHotSpot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVbad_typeid@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c9_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_1c2056cc_5ef4_101b_8bc8_00aa003e3b29
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2c2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fbf23b80_e3f0_101b_8488_00aa003e56f8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d9_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f1_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_b722bcc5_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSliderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_618736e0_3c3d_11cf_810c_00aa00389b71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000190_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CDragListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3af24292_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020d00_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000191_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_f77459a0_bf9a_11cf_ba4e_00c04fd70816
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f322_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f266_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a41_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4425_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9cb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$ctype@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7istrstream@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7strstream@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_8istrstream@std@@7B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_8strstream@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@D@std@@@std@@0PAV?$numpunct@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_8ostrstream@std@@7B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@G@std@@@std@@0PAV?$numpunct@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7ostrstream@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_8strstream@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@D@std@@@std@@0PAV?$ctype@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7strstreambuf@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@G@std@@@std@@0PAV?$ctype@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f29c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_359f3443_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc8_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e003_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f206_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f212_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020402_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ed_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f490eb00_1240_11d1_9888_006097deacf9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_typeid@std@@@8??0bad_typeid@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CBitmapButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1dd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f373_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214ea_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d7_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ed_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000112_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3f7f31ac_e15f_11d0_9c25_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000118_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f25f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fac32c80_cbe4_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7bf80980_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eb0fe172_1a3a_11d0_89b3_00a0c90a90ac
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_729fe2f8_1ea8_11d1_8f85_00c04fc2fbe1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f202_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ac60f6a0_0fd9_11d0_99cb_00c04fd64497
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bccb_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f216_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_04598fc6_866c_11cf_ab7c_00aa00c08fcf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7COleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_332c4426_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28c_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ee_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e013_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_594f31d0_7f19_11d0_b194_00a0c90dc8bf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_6d5140c1_7436_11ce_8034_00aa006009fa
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f313_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88e39e80_3578_11cf_ae69_08002b2e1262
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_742b0e01_14e6_101b_914e_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAnimateCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f37e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVunderflow_error@std@@@8??0underflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9c7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e7a1af80_4d96_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpinButtonCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ca04b7e6_0d21_11d1_8cc5_00c04fc2b085
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b288_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000126_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_163bb1e0_6e00_11cf_837a_48dc04c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_2a342fc2_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d8f015c0_c278_11ce_a49e_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd3f23c0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_df0b3d60_548f_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a7aba9c1_8983_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_744129e0_cbe5_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CEraseDlg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_68284faa_6a48_11d0_8c78_00c04fd918b4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000010_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CStatusBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3d5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_626fc520_a41e_11cf_a731_00a0c9082637
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_91a565c1_e38f_11d0_94bf_00a0c9055cbf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2ad_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d31_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56a34_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000012a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af24290_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1e0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f35c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a9d758a0_4617_11cf_95fc_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b8da6310_e19b_11d0_933c_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_db01a1e3_a42b_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_65725580_9b5d_11d0_9bfe_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_539698a0_cdca_11cf_a5eb_00aa0047a063
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d30c1661_cdaf_11d0_8a3e_00c04fc9e26e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3dc39d1d_c030_11d0_b81b_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d46_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_37deb787_2d9b_11d3_9dd0_c423e6542e10
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_922eada0_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_69d14c80_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFileException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CReBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000011c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_9c2cad80_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_70bdde00_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f3cf_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CArchiveException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000121_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CResourceException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_d9f1e15a_ccdb_11d0_9c0c_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa2_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002df05_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRectTracker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f209_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000020_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f319_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f375_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f369_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cf51ed10_62fe_11cf_bf86_00a0c9034836
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_894ad3b0_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_baa342a0_2ded_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f29f6bc0_5021_11ce_aa15_00006901293f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e8_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f315_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f265_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMemoryException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cd_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d001f200_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e002_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_085fb2c0_0df8_11d1_8f4b_00a0c905413f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9e4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55dd814e_a1b7_4808_9625_4f75a3fad8a7
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f569d0_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ec_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214ee_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fa_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b285_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f361_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214eb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0c6c4200_c589_11d0_999a_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000139_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55881_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4ef6100a_af88_11d0_9846_00c04fc29993
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000002_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000138_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f7_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f372_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f5be2ee1_bfd7_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020411_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020405_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRichEditCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDateTimeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f376_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f401_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d9e89500_30fa_11d0_b724_00aa006c1a01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_376bd3aa_3845_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCharSelPlayBtn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f357_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f360_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a1_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c01387a_6ac2_4ef1_bda2_ec5d26e3b065
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_37d84f60_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_322982e0_0855_11d3_9dcf_ddfb3ab09e18
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cabb0da0_da57_11cf_9974_0020afd79762
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_c04d65d2_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7d688a70_c613_11d0_999b_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f378_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f383_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1cff0050_6fdd_11d0_9328_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bb1a2ae2_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_01e44665_24ac_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_6cfc9ba1_fe87_11d2_9dcf_ed29fafe371d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9ba05970_f6a8_11cf_a442_00a0c90a8f39
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcca_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_83c2d7a0_0de6_11d3_9dcf_9423f1b2561c
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonikerFile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e3_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVdomain_error@std@@@8??0domain_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28f_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000104_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000110_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f207_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CCharSelectWnd@@6BCSkinWnd@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d4c_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_25b15600_0115_11d0_bf0d_00aa00b8dfd2
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000127_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CDoubleButtonDlg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000022_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000016_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c6_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCheckListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000026_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55272a00_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28b_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4427_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_aa5b6a80_b834_11d0_932f_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_e0e270c0_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e6_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000101_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000029_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3127ca40_446e_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_55980ba0_35aa_11cf_b671_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a1faf330_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a4c65425_0f82_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CIPAddressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CUserException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a6ef9861_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9862_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000018_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000193_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000024_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f200_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_dce47f78_8a6c_4c6d_a6f7_8be4427127c4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f204_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSkinObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000002a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ea_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd1ae5e0_a6ae_11ce_bd37_504200c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000102_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f0_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a42_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f24f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCharSelectWnd@@6BCVerbHandler@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000001d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000194_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHeaderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_99caf010_415e_11cf_8814_00aa00b569f5
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_47d2657a_7b27_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ec_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f211_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f205_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0e6d4d90_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00021500_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc6_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_89bcb740_6119_101a_bcb7_00dd010655af
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bcfce0a0_ec17_11d0_8d10_00a0c90f2719
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d6_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000119_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000111_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000105_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000125_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7bf80981_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b289_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65d0_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_972de6c1_8b09_11d2_b652_a1fd6cc34260
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f244_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56afc_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000103_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000013e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e1_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000003_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f1db8392_7331_11d0_8c99_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_c4d244b0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2eb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_IID_IInternalConnection
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?GUID_ATLVer30@ATL@@3U_GUID@@A			; ATL::GUID_ATLVer30
PUBLIC	?m_libid@CComModule@ATL@@2U_GUID@@A		; ATL::CComModule::m_libid
PUBLIC	_LIBID_ATLLib
PUBLIC	?g_pCharSelWnd@@3PAVCCharSelectWnd@@A		; g_pCharSelWnd
PUBLIC	?g_sCharacterName@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; g_sCharacterName
PUBLIC	?OnResize@CEraseDlg@@QAEXPAUtagNMHDR@@PAJ@Z	; CEraseDlg::OnResize
PUBLIC	?_messageEntries@CEraseDlg@@0QBUAFX_MSGMAP_ENTRY@@B ; CEraseDlg::_messageEntries
PUBLIC	?messageMap@CEraseDlg@@1UAFX_MSGMAP@@B		; CEraseDlg::messageMap
PUBLIC	?_GetBaseMessageMap@CEraseDlg@@KGPBUAFX_MSGMAP@@XZ ; CEraseDlg::_GetBaseMessageMap
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_LIBID_ACTIVESKINLib
PUBLIC	_IID_ISkinForm
PUBLIC	_IID_ISkinObjectDisp
PUBLIC	_IID_ISkinSource
PUBLIC	_DIID__ISkinFormEvents
PUBLIC	_IID_ISkinFormEvents_Sink
PUBLIC	_CLSID_SkinForm
PUBLIC	_DIID__ISkinObjectDispEvents
PUBLIC	_IID_ICOMScript
PUBLIC	_IID_IComMorph
PUBLIC	_IID_IComMoveSize
PUBLIC	_IID_ISkinButton
PUBLIC	_CLSID_SkinObject
PUBLIC	_CLSID_COMScript
PUBLIC	_CLSID_ComMorph
PUBLIC	_CLSID_ComMoveSize
PUBLIC	_DIID__ISkinButtonEvents
PUBLIC	_CLSID_SkinButton
PUBLIC	_IID_ISkinPanel
PUBLIC	_DIID__ISkinPanelEvents
PUBLIC	_IID_ISkinLabel
PUBLIC	_CLSID_SkinPanel
PUBLIC	_DIID__ISkinLabelEvents
PUBLIC	_IID_ISkinScrollBar
PUBLIC	_CLSID_SkinLabel
PUBLIC	_DIID__ISkinScrollBarEvents
PUBLIC	_CLSID_SkinScrollBar
PUBLIC	_DIID__ISkinSourceEvents
PUBLIC	_IID_ISkinStorage
PUBLIC	_IID_ISkinPopup
PUBLIC	_IID_IComTransitions
PUBLIC	_IID_ISkinEvent
PUBLIC	_IID_IComProcTextures
PUBLIC	_IID_IComFilters
PUBLIC	_CLSID_SkinSource
PUBLIC	_CLSID_SkinStorage
PUBLIC	_CLSID_SkinPopup
PUBLIC	_CLSID_ComTransitions
PUBLIC	_CLSID_SkinEvent
PUBLIC	_CLSID_ComProcTextures
PUBLIC	_CLSID_ComFilters
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CComModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CComModule::m_libid
_BSS	ENDS
_BSS	SEGMENT
?g_pCharSelWnd@@3PAVCCharSelectWnd@@A DD 01H DUP (?)	; g_pCharSelWnd
?g_sCharacterName@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 010H DUP (?) ; g_sCharacterName
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT
?GUID_ATLVer30@ATL@@3U_GUID@@A DD 0b62f5910H		; ATL::GUID_ATLVer30
	DW	06528H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT
_LIBID_ACTIVESKINLib DD 0972de6b5H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT
_IID_ISkinForm DD 0972de6c1H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT
_IID_ISkinObjectDisp DD 06cfc9ba1H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT
_IID_ISkinSource DD 037deb787H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT
_DIID__ISkinFormEvents DD 0972de6c3H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT
_IID_ISkinFormEvents_Sink DD 053fa8d31H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT
_CLSID_SkinForm DD 0972de6c2H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT
_DIID__ISkinObjectDispEvents DD 06cfc9ba3H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT
_IID_ICOMScript DD 04f7ae600H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT
_IID_IComMorph DD 0322982e0H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT
_IID_IComMoveSize DD 083c2d7a0H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT
_IID_ISkinButton DD 053fa8d40H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT
_CLSID_SkinObject DD 06cfc9ba2H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT
_CLSID_COMScript DD 04f7ae601H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT
_CLSID_ComMorph DD 0322982e1H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT
_CLSID_ComMoveSize DD 083c2d7a1H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT
_DIID__ISkinButtonEvents DD 053fa8d42H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT
_CLSID_SkinButton DD 053fa8d41H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT
_IID_ISkinPanel DD 053fa8d46H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT
_DIID__ISkinPanelEvents DD 053fa8d48H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT
_IID_ISkinLabel DD 053fa8d49H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT
_CLSID_SkinPanel DD 053fa8d47H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT
_DIID__ISkinLabelEvents DD 053fa8d4bH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT
_IID_ISkinScrollBar DD 053fa8d4cH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT
_CLSID_SkinLabel DD 053fa8d4aH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT
_DIID__ISkinScrollBarEvents DD 053fa8d4eH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT
_CLSID_SkinScrollBar DD 053fa8d4dH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT
_DIID__ISkinSourceEvents DD 037deb788H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT
_IID_ISkinStorage DD 0ee11629bH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT
_IID_ISkinPopup DD 0ca478da0H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT
_IID_IComTransitions DD 03c01387aH
	DW	06ac2H
	DW	04ef1H
	DB	0bdH
	DB	0a2H
	DB	0ecH
	DB	05dH
	DB	026H
	DB	0e3H
	DB	0b0H
	DB	065H
CONST	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT
_IID_ISkinEvent DD 055dd814eH
	DW	0a1b7H
	DW	04808H
	DB	096H
	DB	025H
	DB	04fH
	DB	075H
	DB	0a3H
	DB	0faH
	DB	0d8H
	DB	0a7H
CONST	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT
_IID_IComProcTextures DD 0dce47f78H
	DW	08a6cH
	DW	04c6dH
	DB	0a6H
	DB	0f7H
	DB	08bH
	DB	0e4H
	DB	042H
	DB	071H
	DB	027H
	DB	0c4H
CONST	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT
_IID_IComFilters DD 0920ff31fH
	DW	0ca25H
	DW	0451aH
	DB	097H
	DB	038H
	DB	034H
	DB	044H
	DB	0fcH
	DB	020H
	DB	06bH
	DB	0ccH
CONST	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT
_CLSID_SkinSource DD 053fa8d44H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT
_CLSID_SkinStorage DD 0ee11629cH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT
_CLSID_SkinPopup DD 0ca478da1H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT
_CLSID_ComTransitions DD 03c6d21d6H
	DW	07470H
	DW	04555H
	DB	0a8H
	DB	0fbH
	DB	06cH
	DB	022H
	DB	092H
	DB	0b3H
	DB	09cH
	DB	046H
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT
_CLSID_SkinEvent DD 08f59c2a4H
	DW	04c01H
	DW	04451H
	DB	0beH
	DB	05bH
	DB	09H
	DB	078H
	DB	07bH
	DB	012H
	DB	03aH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT
_CLSID_ComProcTextures DD 0bf1b5d50H
	DW	03c5cH
	DW	048ceH
	DB	0b9H
	DB	091H
	DB	0eH
	DB	086H
	DB	0d2H
	DB	06fH
	DB	06fH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT
_CLSID_ComFilters DD 0c4d7e3c7H
	DW	03c26H
	DW	04052H
	DB	0a9H
	DB	093H
	DB	071H
	DB	0e5H
	DB	00H
	DB	0eaH
	DB	08cH
	DB	05H
CONST	ENDS
CRT$XCU	SEGMENT
_$S348	DD	FLAT:_$E347
CRT$XCU	ENDS
CONST	SEGMENT
?messageMap@CEraseDlg@@1UAFX_MSGMAP@@B DD FLAT:?_GetBaseMessageMap@CEraseDlg@@KGPBUAFX_MSGMAP@@XZ ; CEraseDlg::messageMap
	DD	FLAT:?_messageEntries@CEraseDlg@@0QBUAFX_MSGMAP_ENTRY@@B
?_messageEntries@CEraseDlg@@0QBUAFX_MSGMAP_ENTRY@@B DD 04eH ; CEraseDlg::_messageEntries
	DD	0701H
	DD	02bcH
	DD	02bcH
	DD	026H
	DD	FLAT:?OnResize@CEraseDlg@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
_TEXT	SEGMENT
_$E347	PROC NEAR
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 _$E344
  00008	e8 00 00 00 00	 call	 _$E346
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E347	ENDP
_TEXT	ENDS
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z:NEAR
_TEXT	SEGMENT
$T159678 = -4
_$E344	PROC NEAR

; 31   : std::string g_sCharacterName;

  0000f	55		 push	 ebp
  00010	8b ec		 mov	 ebp, esp
  00012	51		 push	 ecx
  00013	8d 45 fc	 lea	 eax, DWORD PTR $T159678[ebp]
  00016	50		 push	 eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_sCharacterName@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_$E344	ENDP
_TEXT	ENDS
EXTRN	_atexit:NEAR
_TEXT	SEGMENT
_$E346	PROC NEAR
  00026	55		 push	 ebp
  00027	8b ec		 mov	 ebp, esp
  00029	68 00 00 00 00	 push	 OFFSET FLAT:_$E345
  0002e	e8 00 00 00 00	 call	 _atexit
  00033	83 c4 04	 add	 esp, 4
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_$E346	ENDP
_TEXT	ENDS
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:NEAR
_TEXT	SEGMENT
_$E345	PROC NEAR
  00038	55		 push	 ebp
  00039	8b ec		 mov	 ebp, esp
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_sCharacterName@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_$E345	ENDP
_TEXT	ENDS
PUBLIC	??0?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@ABV?$allocator@VCSCI_WorldActor@@@1@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >
PUBLIC	??1?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::~vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >
PUBLIC	??0CCharSelectWnd@@QAE@XZ			; CCharSelectWnd::CCharSelectWnd
PUBLIC	?MakeSkinCtrl@CCharSelectWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CCharSelectWnd::MakeSkinCtrl
PUBLIC	?HandleVerb@CCharSelectWnd@@UAEHHVCSCI_WorldObject@@@Z ; CCharSelectWnd::HandleVerb
PUBLIC	??_7CCharSelectWnd@@6BCSkinWnd@@@		; CCharSelectWnd::`vftable'
PUBLIC	??_7CCharSelectWnd@@6BCVerbHandler@@@		; CCharSelectWnd::`vftable'
PUBLIC	??_GCCharSelectWnd@@UAEPAXI@Z			; CCharSelectWnd::`scalar deleting destructor'
PUBLIC	??_ECCharSelectWnd@@UAEPAXI@Z			; CCharSelectWnd::`vector deleting destructor'
PUBLIC	??0?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinCtrl@@@1@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >
PUBLIC	??1?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::~vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >
PUBLIC	?Next@CSkinWnd@@UAEXXZ				; CSkinWnd::Next
PUBLIC	?Previous@CSkinWnd@@UAEXXZ			; CSkinWnd::Previous
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
PUBLIC	??_ECCharSelectWnd@@WJE@AEPAXI@Z		; CCharSelectWnd::`vector deleting destructor'
PUBLIC	??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::vector<CSkinObj,std::allocator<CSkinObj> >
PUBLIC	??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??0?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinBitmap@@@1@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
PUBLIC	??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::~vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
PUBLIC	??0?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@ABV?$allocator@PAVCPoint@@@1@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::vector<CPoint *,std::allocator<CPoint *> >
PUBLIC	??1?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::~vector<CPoint *,std::allocator<CPoint *> >
EXTRN	??0CVerbHandler@@QAE@XZ:NEAR			; CVerbHandler::CVerbHandler
EXTRN	??1CVerbHandler@@UAE@XZ:NEAR			; CVerbHandler::~CVerbHandler
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::WinHelpA
EXTRN	?ContinueModal@CWnd@@UAEHXZ:NEAR		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:NEAR		; CWnd::EndModalLoop
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:NEAR			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:NEAR		; CWnd::OnNotify
EXTRN	?GetProcessEvents@CSkinWnd@@MAE_NXZ:NEAR	; CSkinWnd::GetProcessEvents
EXTRN	??0CSkinWnd@@QAE@XZ:NEAR			; CSkinWnd::CSkinWnd
EXTRN	??1CSkinWnd@@UAE@XZ:NEAR			; CSkinWnd::~CSkinWnd
EXTRN	?CloseSelf@CSkinWnd@@UAEX_N@Z:NEAR		; CSkinWnd::CloseSelf
EXTRN	?Disable@CSkinWnd@@UAEXXZ:NEAR			; CSkinWnd::Disable
EXTRN	?Enable@CSkinWnd@@UAEXXZ:NEAR			; CSkinWnd::Enable
EXTRN	?EnableGameModal@CSkinWnd@@UAEXHPAH@Z:NEAR	; CSkinWnd::EnableGameModal
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CCmdTarget::OnCmdMsg
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z:NEAR	; CSkinWnd::DisableGameModal
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?ProcessRefreshList@CSkinWnd@@UAEHXZ:NEAR	; CSkinWnd::ProcessRefreshList
EXTRN	?UpdateTracking@CSkinWnd@@UAEXXZ:NEAR		; CSkinWnd::UpdateTracking
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CCmdTarget::GetInterfaceMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; CWnd::GetSuperWndProcAddr
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:NEAR ; CWnd::PreTranslateMessage
EXTRN	?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CSkinWnd::GetEventSinkMap
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:NEAR ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:NEAR		; CWnd::PostNcDestroy
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnChildNotify
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:NEAR		; CWnd::CheckAutoCenter
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	?GetMessageMap@CSkinWnd@@MBEPBUAFX_MSGMAP@@XZ:NEAR ; CSkinWnd::GetMessageMap
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:NEAR			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:NEAR		; CWnd::OnFinalRelease
EXTRN	??0CSkinObj@@QAE@XZ:NEAR			; CSkinObj::CSkinObj
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:NEAR ; CWnd::SetOccDialogInfo
EXTRN	?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ:NEAR ; CWnd::GetRuntimeClass
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:NEAR		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:NEAR ; CWnd::Create
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:NEAR		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:NEAR ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:NEAR	; CWnd::CalcWindowRect
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:NEAR ; CWnd::OnToolHitTest
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:NEAR ; CWnd::GetScrollBarCtrl
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT ??_7CCharSelectWnd@@6BCSkinWnd@@@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\charsel.cpp
CONST	SEGMENT
??_7CCharSelectWnd@@6BCSkinWnd@@@ DD FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ ; CCharSelectWnd::`vftable'
	DD	FLAT:??_ECCharSelectWnd@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CSkinWnd@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetProcessEvents@CSkinWnd@@MAE_NXZ
	DD	FLAT:?CloseSelf@CSkinWnd@@UAEX_N@Z
	DD	FLAT:?Disable@CSkinWnd@@UAEXXZ
	DD	FLAT:?Enable@CSkinWnd@@UAEXXZ
	DD	FLAT:?EnableGameModal@CSkinWnd@@UAEXHPAH@Z
	DD	FLAT:?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z
	DD	FLAT:?MakeSkinCtrl@CCharSelectWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z
	DD	FLAT:?ProcessRefreshList@CSkinWnd@@UAEHXZ
	DD	FLAT:?UpdateTracking@CSkinWnd@@UAEXXZ
	DD	FLAT:?Next@CSkinWnd@@UAEXXZ
	DD	FLAT:?Previous@CSkinWnd@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CCharSelectWnd@@6BCVerbHandler@@@
CONST	SEGMENT
??_7CCharSelectWnd@@6BCVerbHandler@@@ DD FLAT:??_ECCharSelectWnd@@WJE@AEPAXI@Z ; CCharSelectWnd::`vftable'
	DD	FLAT:?HandleVerb@CCharSelectWnd@@UAEHHVCSCI_WorldObject@@@Z
CONST	ENDS
xdata$x	SEGMENT
$T159710 DD	019930520H
	DD	0dH
	DD	FLAT:$T159713
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159713 DD	0ffffffffH
	DD	FLAT:$L159693
	DD	00H
	DD	FLAT:$L159694
	DD	01H
	DD	FLAT:$L159695
	DD	02H
	DD	FLAT:$L159696
	DD	03H
	DD	FLAT:$L159697
	DD	04H
	DD	FLAT:$L159698
	DD	05H
	DD	FLAT:$L159699
	DD	06H
	DD	FLAT:$L159700
	DD	07H
	DD	FLAT:$L159701
	DD	08H
	DD	FLAT:$L159702
	DD	09H
	DD	FLAT:$L159703
	DD	0aH
	DD	FLAT:$L159704
	DD	0bH
	DD	FLAT:$L159705
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -60
$T159682 = -16
$T159683 = -20
$T159684 = -24
$T159685 = -28
$T159686 = -32
$T159687 = -36
$T159688 = -40
$T159689 = -44
$T159690 = -48
$T159691 = -52
$T159692 = -56
__$EHRec$ = -12
??0CCharSelectWnd@@QAE@XZ PROC NEAR			; CCharSelectWnd::CCharSelectWnd

; 37   : {

  00048	55		 push	 ebp
  00049	8b ec		 mov	 ebp, esp
  0004b	6a ff		 push	 -1
  0004d	68 00 00 00 00	 push	 $L159711
  00052	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00058	50		 push	 eax
  00059	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00060	83 ec 30	 sub	 esp, 48			; 00000030H
  00063	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx
  00066	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ??0CSkinWnd@@QAE@XZ	; CSkinWnd::CSkinWnd
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00075	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0007e	e8 00 00 00 00	 call	 ??0CVerbHandler@@QAE@XZ	; CVerbHandler::CVerbHandler
  00083	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00087	8d 45 f0	 lea	 eax, DWORD PTR $T159682[ebp]
  0008a	50		 push	 eax
  0008b	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00094	e8 00 00 00 00	 call	 ??0?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinCtrl@@@1@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >
  00099	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0009d	8d 4d ec	 lea	 ecx, DWORD PTR $T159683[ebp]
  000a0	51		 push	 ecx
  000a1	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  000aa	e8 00 00 00 00	 call	 ??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::vector<CSkinObj,std::allocator<CSkinObj> >
  000af	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000b3	8d 55 e8	 lea	 edx, DWORD PTR $T159684[ebp]
  000b6	52		 push	 edx
  000b7	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  000c0	e8 00 00 00 00	 call	 ??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::vector<CSkinObj,std::allocator<CSkinObj> >
  000c5	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000c9	8d 45 e4	 lea	 eax, DWORD PTR $T159685[ebp]
  000cc	50		 push	 eax
  000cd	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  000d6	e8 00 00 00 00	 call	 ??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::vector<CSkinObj,std::allocator<CSkinObj> >
  000db	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000df	8d 4d e0	 lea	 ecx, DWORD PTR $T159686[ebp]
  000e2	51		 push	 ecx
  000e3	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  000ec	e8 00 00 00 00	 call	 ??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::vector<CSkinObj,std::allocator<CSkinObj> >
  000f1	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000f5	8d 55 dc	 lea	 edx, DWORD PTR $T159687[ebp]
  000f8	52		 push	 edx
  000f9	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	81 c1 e8 00 00
	00		 add	 ecx, 232		; 000000e8H
  00102	e8 00 00 00 00	 call	 ??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::vector<CSkinObj,std::allocator<CSkinObj> >
  00107	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0010b	8d 45 d8	 lea	 eax, DWORD PTR $T159688[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  00118	e8 00 00 00 00	 call	 ??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::vector<CSkinObj,std::allocator<CSkinObj> >
  0011d	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00121	8d 4d d4	 lea	 ecx, DWORD PTR $T159689[ebp]
  00124	51		 push	 ecx
  00125	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00128	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  0012e	e8 00 00 00 00	 call	 ??0?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinBitmap@@@1@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
  00133	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00137	8d 55 d0	 lea	 edx, DWORD PTR $T159690[ebp]
  0013a	52		 push	 edx
  0013b	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0013e	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00144	e8 00 00 00 00	 call	 ??0?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinBitmap@@@1@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
  00149	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0014d	8d 45 cc	 lea	 eax, DWORD PTR $T159691[ebp]
  00150	50		 push	 eax
  00151	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00154	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0015a	e8 00 00 00 00	 call	 ??0?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@ABV?$allocator@PAVCPoint@@@1@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::vector<CPoint *,std::allocator<CPoint *> >
  0015f	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00163	8d 4d c8	 lea	 ecx, DWORD PTR $T159692[ebp]
  00166	51		 push	 ecx
  00167	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  00170	e8 00 00 00 00	 call	 ??0?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@ABV?$allocator@VCSCI_WorldActor@@@1@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >
  00175	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00179	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0017c	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  00182	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@XZ	; CSkinObj::CSkinObj
  00187	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  0018a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CCharSelectWnd@@6BCSkinWnd@@@ ; CCharSelectWnd::`vftable'
  00190	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00193	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], OFFSET FLAT:??_7CCharSelectWnd@@6BCVerbHandler@@@ ; CCharSelectWnd::`vftable'

; 38   : 	m_nHighlightPosn = -1;

  0019d	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  001a0	c7 81 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+336], -1

; 39   : 	m_bHighlightLocked = FALSE;

  001aa	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  001ad	c7 82 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+340], 0

; 40   : 	m_nBtnCount = 0;

  001b7	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  001ba	c7 80 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+344], 0

; 41   : 	m_nPlayBtnCount = 0;

  001c4	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	c7 81 5c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+348], 0

; 42   : 	m_pHighlightOwner = NULL;

  001d1	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  001d4	c7 82 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+352], 0

; 43   : }

  001de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e5	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  001e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L159693:
  00000	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  00008	c3		 ret	 0
$L159694:
  00009	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00012	e8 00 00 00 00	 call	 ??1CVerbHandler@@UAE@XZ	; CVerbHandler::~CVerbHandler
  00017	c3		 ret	 0
$L159695:
  00018	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00021	e8 00 00 00 00	 call	 ??1?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::~vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >
  00026	c3		 ret	 0
$L159696:
  00027	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00030	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00035	c3		 ret	 0
$L159697:
  00036	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0003f	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00044	c3		 ret	 0
$L159698:
  00045	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  0004e	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00053	c3		 ret	 0
$L159699:
  00054	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  0005d	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00062	c3		 ret	 0
$L159700:
  00063	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	81 c1 e8 00 00
	00		 add	 ecx, 232		; 000000e8H
  0006c	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00071	c3		 ret	 0
$L159701:
  00072	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  0007b	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00080	c3		 ret	 0
$L159702:
  00081	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  0008a	e8 00 00 00 00	 call	 ??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::~vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
  0008f	c3		 ret	 0
$L159703:
  00090	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00099	e8 00 00 00 00	 call	 ??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::~vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
  0009e	c3		 ret	 0
$L159704:
  0009f	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000a8	e8 00 00 00 00	 call	 ??1?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::~vector<CPoint *,std::allocator<CPoint *> >
  000ad	c3		 ret	 0
$L159705:
  000ae	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  000b7	e8 00 00 00 00	 call	 ??1?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::~vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >
  000bc	c3		 ret	 0
$L159711:
  000bd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159710
  000c2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CCharSelectWnd@@QAE@XZ ENDP				; CCharSelectWnd::CCharSelectWnd
PUBLIC	??1CCharSelectWnd@@UAE@XZ			; CCharSelectWnd::~CCharSelectWnd
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
;	COMDAT ??_GCCharSelectWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCCharSelectWnd@@UAEPAXI@Z PROC NEAR			; CCharSelectWnd::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CCharSelectWnd@@UAE@XZ ; CCharSelectWnd::~CCharSelectWnd
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L152489
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L152489:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCCharSelectWnd@@UAEPAXI@Z ENDP			; CCharSelectWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::begin
PUBLIC	?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::end
PUBLIC	?clear@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXXZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::clear
PUBLIC	?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::begin
PUBLIC	?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::end
PUBLIC	?clear@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXXZ ; std::vector<CPoint *,std::allocator<CPoint *> >::clear
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	??1CSkinObj@@UAE@XZ:NEAR			; CSkinObj::~CSkinObj
xdata$x	SEGMENT
$T159745 DD	019930520H
	DD	0eH
	DD	FLAT:$T159747
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159747 DD	0ffffffffH
	DD	FLAT:$L159728
	DD	00H
	DD	FLAT:$L159731
	DD	01H
	DD	FLAT:$L159732
	DD	02H
	DD	FLAT:$L159733
	DD	03H
	DD	FLAT:$L159734
	DD	04H
	DD	FLAT:$L159735
	DD	05H
	DD	FLAT:$L159736
	DD	06H
	DD	FLAT:$L159737
	DD	07H
	DD	FLAT:$L159738
	DD	08H
	DD	FLAT:$L159739
	DD	09H
	DD	FLAT:$L159740
	DD	0aH
	DD	FLAT:$L159741
	DD	0bH
	DD	FLAT:$L159742
	DD	0cH
	DD	FLAT:$L159743
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -56
_it$152494 = -16
_bitmap$152498 = -20
_bitmap$152504 = -24
_it$152508 = -28
_point$152512 = -32
$T159719 = -36
$T159720 = -40
$T159723 = -44
$T159724 = -48
$T159727 = -52
??1CCharSelectWnd@@UAE@XZ PROC NEAR			; CCharSelectWnd::~CCharSelectWnd

; 46   : {

  001f6	55		 push	 ebp
  001f7	8b ec		 mov	 ebp, esp
  001f9	6a ff		 push	 -1
  001fb	68 00 00 00 00	 push	 $L159746
  00200	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00206	50		 push	 eax
  00207	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0020e	83 ec 38	 sub	 esp, 56			; 00000038H
  00211	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx
  00214	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00217	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CCharSelectWnd@@6BCSkinWnd@@@ ; CCharSelectWnd::`vftable'
  0021d	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00220	c7 81 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+148], OFFSET FLAT:??_7CCharSelectWnd@@6BCVerbHandler@@@ ; CCharSelectWnd::`vftable'
  0022a	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH

; 49   : 		std::vector<CSkinBitmap *>::iterator it;
; 50   : 		
; 51   : 		for ( it=m_vDarkBitmaps.begin(); it != m_vDarkBitmaps.end(); it++ ) {

  00231	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00234	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  0023a	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::begin
  0023f	89 45 f0	 mov	 DWORD PTR _it$152494[ebp], eax
  00242	eb 09		 jmp	 SHORT $L152495
$L152496:
  00244	8b 55 f0	 mov	 edx, DWORD PTR _it$152494[ebp]
  00247	83 c2 04	 add	 edx, 4
  0024a	89 55 f0	 mov	 DWORD PTR _it$152494[ebp], edx
$L152495:
  0024d	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00250	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  00256	e8 00 00 00 00	 call	 ?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::end
  0025b	39 45 f0	 cmp	 DWORD PTR _it$152494[ebp], eax
  0025e	74 34		 je	 SHORT $L152497

; 52   : 			CSkinBitmap *bitmap = *it;

  00260	8b 45 f0	 mov	 eax, DWORD PTR _it$152494[ebp]
  00263	8b 08		 mov	 ecx, DWORD PTR [eax]
  00265	89 4d ec	 mov	 DWORD PTR _bitmap$152498[ebp], ecx

; 53   : 			delete bitmap;

  00268	8b 55 ec	 mov	 edx, DWORD PTR _bitmap$152498[ebp]
  0026b	89 55 d8	 mov	 DWORD PTR $T159720[ebp], edx
  0026e	8b 45 d8	 mov	 eax, DWORD PTR $T159720[ebp]
  00271	89 45 dc	 mov	 DWORD PTR $T159719[ebp], eax
  00274	83 7d dc 00	 cmp	 DWORD PTR $T159719[ebp], 0
  00278	74 11		 je	 SHORT $L159721
  0027a	6a 01		 push	 1
  0027c	8b 4d dc	 mov	 ecx, DWORD PTR $T159719[ebp]
  0027f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00281	8b 4d dc	 mov	 ecx, DWORD PTR $T159719[ebp]
  00284	ff 12		 call	 DWORD PTR [edx]
  00286	89 45 c4	 mov	 DWORD PTR -60+[ebp], eax
  00289	eb 07		 jmp	 SHORT $L159722
$L159721:
  0028b	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR -60+[ebp], 0
$L159722:

; 54   : 		}

  00292	eb b0		 jmp	 SHORT $L152496
$L152497:

; 55   : 	
; 56   : 		for ( it=m_vLightBitmaps.begin(); it != m_vLightBitmaps.end(); it++ ) {

  00294	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00297	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  0029d	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::begin
  002a2	89 45 f0	 mov	 DWORD PTR _it$152494[ebp], eax
  002a5	eb 09		 jmp	 SHORT $L152501
$L152502:
  002a7	8b 45 f0	 mov	 eax, DWORD PTR _it$152494[ebp]
  002aa	83 c0 04	 add	 eax, 4
  002ad	89 45 f0	 mov	 DWORD PTR _it$152494[ebp], eax
$L152501:
  002b0	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b3	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  002b9	e8 00 00 00 00	 call	 ?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::end
  002be	39 45 f0	 cmp	 DWORD PTR _it$152494[ebp], eax
  002c1	74 34		 je	 SHORT $L152503

; 57   : 			CSkinBitmap *bitmap = *it;

  002c3	8b 4d f0	 mov	 ecx, DWORD PTR _it$152494[ebp]
  002c6	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c8	89 55 e8	 mov	 DWORD PTR _bitmap$152504[ebp], edx

; 58   : 			delete bitmap;

  002cb	8b 45 e8	 mov	 eax, DWORD PTR _bitmap$152504[ebp]
  002ce	89 45 d0	 mov	 DWORD PTR $T159724[ebp], eax
  002d1	8b 4d d0	 mov	 ecx, DWORD PTR $T159724[ebp]
  002d4	89 4d d4	 mov	 DWORD PTR $T159723[ebp], ecx
  002d7	83 7d d4 00	 cmp	 DWORD PTR $T159723[ebp], 0
  002db	74 11		 je	 SHORT $L159725
  002dd	6a 01		 push	 1
  002df	8b 55 d4	 mov	 edx, DWORD PTR $T159723[ebp]
  002e2	8b 02		 mov	 eax, DWORD PTR [edx]
  002e4	8b 4d d4	 mov	 ecx, DWORD PTR $T159723[ebp]
  002e7	ff 10		 call	 DWORD PTR [eax]
  002e9	89 45 c0	 mov	 DWORD PTR -64+[ebp], eax
  002ec	eb 07		 jmp	 SHORT $L159726
$L159725:
  002ee	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR -64+[ebp], 0
$L159726:

; 59   : 		}

  002f5	eb b0		 jmp	 SHORT $L152502
$L152503:

; 60   : 
; 61   : 		m_vDarkBitmaps.clear();

  002f7	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  002fa	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  00300	e8 00 00 00 00	 call	 ?clear@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXXZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::clear

; 62   : 		m_vLightBitmaps.clear();

  00305	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00308	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  0030e	e8 00 00 00 00	 call	 ?clear@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXXZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::clear

; 67   : 		std::vector<CPoint *>::iterator it;
; 68   : 
; 69   : 		for ( it=m_vFootPoints.begin(); it != m_vFootPoints.end(); it++ ) {

  00313	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00316	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0031c	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::begin
  00321	89 45 e4	 mov	 DWORD PTR _it$152508[ebp], eax
  00324	eb 09		 jmp	 SHORT $L152509
$L152510:
  00326	8b 4d e4	 mov	 ecx, DWORD PTR _it$152508[ebp]
  00329	83 c1 04	 add	 ecx, 4
  0032c	89 4d e4	 mov	 DWORD PTR _it$152508[ebp], ecx
$L152509:
  0032f	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00332	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00338	e8 00 00 00 00	 call	 ?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::end
  0033d	39 45 e4	 cmp	 DWORD PTR _it$152508[ebp], eax
  00340	74 1c		 je	 SHORT $L152511

; 70   : 			CPoint *point = *it;

  00342	8b 55 e4	 mov	 edx, DWORD PTR _it$152508[ebp]
  00345	8b 02		 mov	 eax, DWORD PTR [edx]
  00347	89 45 e0	 mov	 DWORD PTR _point$152512[ebp], eax

; 71   : 			delete point;

  0034a	8b 4d e0	 mov	 ecx, DWORD PTR _point$152512[ebp]
  0034d	89 4d cc	 mov	 DWORD PTR $T159727[ebp], ecx
  00350	8b 55 cc	 mov	 edx, DWORD PTR $T159727[ebp]
  00353	52		 push	 edx
  00354	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00359	83 c4 04	 add	 esp, 4

; 72   : 		}

  0035c	eb c8		 jmp	 SHORT $L152510
$L152511:

; 73   : 
; 74   : 		m_vFootPoints.clear();

  0035e	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00361	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00367	e8 00 00 00 00	 call	 ?clear@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXXZ ; std::vector<CPoint *,std::allocator<CPoint *> >::clear

; 76   : }

  0036c	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00370	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00373	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  00379	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0037e	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00382	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00385	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  0038b	e8 00 00 00 00	 call	 ??1?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::~vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >
  00390	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00394	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00397	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0039d	e8 00 00 00 00	 call	 ??1?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::~vector<CPoint *,std::allocator<CPoint *> >
  003a2	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  003a6	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  003a9	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  003af	e8 00 00 00 00	 call	 ??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::~vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
  003b4	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  003b8	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  003bb	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  003c1	e8 00 00 00 00	 call	 ??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::~vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
  003c6	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  003ca	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  003cd	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  003d3	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  003d8	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  003dc	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  003df	81 c1 e8 00 00
	00		 add	 ecx, 232		; 000000e8H
  003e5	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  003ea	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  003ee	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  003f1	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  003f7	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  003fc	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00400	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00403	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  00409	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  0040e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00412	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00415	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0041b	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00420	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00424	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00427	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0042d	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00432	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00436	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00439	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0043f	e8 00 00 00 00	 call	 ??1?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::~vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >
  00444	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00448	83 7d c8 00	 cmp	 DWORD PTR _this$[ebp], 0
  0044c	74 0d		 je	 SHORT $L159717
  0044e	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00451	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00456	89 45 bc	 mov	 DWORD PTR -68+[ebp], eax
  00459	eb 07		 jmp	 SHORT $L159718
$L159717:
  0045b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR -68+[ebp], 0
$L159718:
  00462	8b 4d bc	 mov	 ecx, DWORD PTR -68+[ebp]
  00465	e8 00 00 00 00	 call	 ??1CVerbHandler@@UAE@XZ	; CVerbHandler::~CVerbHandler
  0046a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00471	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00474	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  00479	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0047c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00483	8b e5		 mov	 esp, ebp
  00485	5d		 pop	 ebp
  00486	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L159728:
  000c7	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  000cf	c3		 ret	 0
$L159731:
  000d0	83 7d c8 00	 cmp	 DWORD PTR _this$[ebp], 0
  000d4	0f 84 10 00 00
	00		 je	 $L159729
  000da	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  000dd	05 94 00 00 00	 add	 eax, 148		; 00000094H
  000e2	89 45 bc	 mov	 DWORD PTR -68+[ebp], eax
  000e5	e9 07 00 00 00	 jmp	 $L159730
$L159729:
  000ea	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR -68+[ebp], 0
$L159730:
  000f1	8b 4d bc	 mov	 ecx, DWORD PTR -68+[ebp]
  000f4	e8 00 00 00 00	 call	 ??1CVerbHandler@@UAE@XZ	; CVerbHandler::~CVerbHandler
  000f9	c3		 ret	 0
$L159732:
  000fa	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00103	e8 00 00 00 00	 call	 ??1?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::~vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >
  00108	c3		 ret	 0
$L159733:
  00109	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00112	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00117	c3		 ret	 0
$L159734:
  00118	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  00121	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00126	c3		 ret	 0
$L159735:
  00127	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  00130	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00135	c3		 ret	 0
$L159736:
  00136	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  0013f	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00144	c3		 ret	 0
$L159737:
  00145	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	81 c1 e8 00 00
	00		 add	 ecx, 232		; 000000e8H
  0014e	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00153	c3		 ret	 0
$L159738:
  00154	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00157	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  0015d	e8 00 00 00 00	 call	 ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
  00162	c3		 ret	 0
$L159739:
  00163	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00166	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  0016c	e8 00 00 00 00	 call	 ??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::~vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
  00171	c3		 ret	 0
$L159740:
  00172	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00175	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  0017b	e8 00 00 00 00	 call	 ??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::~vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
  00180	c3		 ret	 0
$L159741:
  00181	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00184	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0018a	e8 00 00 00 00	 call	 ??1?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::~vector<CPoint *,std::allocator<CPoint *> >
  0018f	c3		 ret	 0
$L159742:
  00190	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00193	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  00199	e8 00 00 00 00	 call	 ??1?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::~vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >
  0019e	c3		 ret	 0
$L159743:
  0019f	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a2	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  001a8	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  001ad	c3		 ret	 0
$L159746:
  001ae	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159745
  001b3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CCharSelectWnd@@UAE@XZ ENDP				; CCharSelectWnd::~CCharSelectWnd
PUBLIC	??0CPoint@@QAE@XZ				; CPoint::CPoint
PUBLIC	?Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z		; CCharSelectWnd::Create
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	??0CRect@@QAE@HHHH@Z				; CRect::CRect
PUBLIC	?CenterPoint@CRect@@QBE?AVCPoint@@XZ		; CRect::CenterPoint
PUBLIC	??BCRect@@QAEPAUtagRECT@@XZ			; CRect::operator tagRECT *
PUBLIC	?OffsetRect@CRect@@QAEXHH@Z			; CRect::OffsetRect
PUBLIC	?push_back@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXABQAVCSkinCtrl@@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::push_back
PUBLIC	??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
PUBLIC	?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::push_back
PUBLIC	??0CSkinObj@@QAE@ABV0@@Z			; CSkinObj::CSkinObj
PUBLIC	??4CSkinObj@@QAEAAV0@ABV0@@Z			; CSkinObj::operator=
PUBLIC	?push_back@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXABQAVCPoint@@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::push_back
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	?CreateChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@H@Z:NEAR ; CSkinWnd::CreateChild
EXTRN	?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z:NEAR ; CSkinWnd::FindObject
EXTRN	?FindControl@CSkinWnd@@QAEPAVCSkinCtrl@@PBD@Z:NEAR ; CSkinWnd::FindControl
EXTRN	?GetRect@CSkinObj@@QAEHPAUtagRECT@@@Z:NEAR	; CSkinObj::GetRect
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
_DATA	SEGMENT
_?btnPosnNames@?4??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA DD FLAT:$SG152525
	DD	FLAT:$SG152526
	DD	FLAT:$SG152527
	DD	FLAT:$SG152528
_?playBtnNames@?6??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA DD FLAT:$SG152537
	DD	FLAT:$SG152538
	DD	FLAT:$SG152539
	DD	FLAT:$SG152540
_?highlightNames@?8??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA DD FLAT:$SG152549
	DD	FLAT:$SG152550
	DD	FLAT:$SG152551
	DD	FLAT:$SG152552
_?nameplateNames@?L@??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA DD FLAT:$SG152561
	DD	FLAT:$SG152562
	DD	FLAT:$SG152563
	DD	FLAT:$SG152564
_?nameplateHighlightNames@?N@??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA DD FLAT:$SG152573
	DD	FLAT:$SG152574
	DD	FLAT:$SG152575
	DD	FLAT:$SG152576
_?shadowPosnNames@?P@??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA DD FLAT:$SG152585
	DD	FLAT:$SG152586
	DD	FLAT:$SG152587
	DD	FLAT:$SG152588
_?shadowNames@?BB@??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA DD FLAT:$SG152606
	DD	FLAT:$SG152607
	DD	FLAT:$SG152608
	DD	FLAT:$SG152609
$SG152520 DB	'CS_Menu.skn', 00H
$SG152525 DB	'position1', 00H
	ORG $+2
$SG152526 DB	'position2', 00H
	ORG $+2
$SG152527 DB	'position3', 00H
	ORG $+2
$SG152528 DB	'position4', 00H
	ORG $+2
$SG152537 DB	'ab_Play1', 00H
	ORG $+3
$SG152538 DB	'ab_Play2', 00H
	ORG $+3
$SG152539 DB	'ab_Play3', 00H
	ORG $+3
$SG152540 DB	'ab_Play4', 00H
	ORG $+3
$SG152549 DB	'hs_Highlight1', 00H
	ORG $+2
$SG152550 DB	'hs_Highlight2', 00H
	ORG $+2
$SG152551 DB	'hs_Highlight3', 00H
	ORG $+2
$SG152552 DB	'hs_Highlight4', 00H
	ORG $+2
$SG152561 DB	'nameplate1', 00H
	ORG $+1
$SG152562 DB	'nameplate2', 00H
	ORG $+1
$SG152563 DB	'nameplate3', 00H
	ORG $+1
$SG152564 DB	'nameplate4', 00H
	ORG $+1
$SG152573 DB	'nameplate1highlite', 00H
	ORG $+1
$SG152574 DB	'nameplate2highlite', 00H
	ORG $+1
$SG152575 DB	'nameplate3highlite', 00H
	ORG $+1
$SG152576 DB	'nameplate4highlite', 00H
	ORG $+1
$SG152585 DB	'shadowpos1', 00H
	ORG $+1
$SG152586 DB	'shadowpos2', 00H
	ORG $+1
$SG152587 DB	'shadowpos3', 00H
	ORG $+1
$SG152588 DB	'shadowpos4', 00H
	ORG $+1
$SG152606 DB	'shadow1', 00H
$SG152607 DB	'shadow2', 00H
$SG152608 DB	'shadow3', 00H
$SG152609 DB	'shadow4', 00H
$SG152617 DB	'highlight', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T159766 DD	019930520H
	DD	09H
	DD	FLAT:$T159768
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159768 DD	0ffffffffH
	DD	FLAT:$L159756
	DD	0ffffffffH
	DD	FLAT:$L159757
	DD	0ffffffffH
	DD	FLAT:$L159758
	DD	0ffffffffH
	DD	FLAT:$L159759
	DD	0ffffffffH
	DD	FLAT:$L159760
	DD	04H
	DD	FLAT:$L159761
	DD	05H
	DD	FLAT:$L159762
	DD	0ffffffffH
	DD	FLAT:$L159763
	DD	0ffffffffH
	DD	FLAT:$L159764
xdata$x	ENDS
_TEXT	SEGMENT
$T159749 = -132
_obj$152581 = -56
$T159750 = -136
$T159751 = -140
$T159754 = -148
$T159755 = -156
_obj$152593 = -104
_posnRect$152595 = -96
_hiliteObj$152596 = -64
__$EHRec$ = -12
_hiliteRect$152597 = -80
_point$152598 = -108
_obj$152614 = -116
_pParentWnd$ = 8
_this$ = -160
_created$ = -16
_i$ = -20
_obj$152533 = -28
_pCtrl$152545 = -32
_obj$152557 = -40
_obj$152569 = -48
?Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z PROC NEAR	; CCharSelectWnd::Create

; 80   : {

  00487	55		 push	 ebp
  00488	8b ec		 mov	 ebp, esp
  0048a	6a ff		 push	 -1
  0048c	68 00 00 00 00	 push	 $L159767
  00491	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00497	50		 push	 eax
  00498	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0049f	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  004a5	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 	// SNTODO: make skin path data-driven
; 82   : 	BOOL created = CreateChild ( "CS_Menu.skn", NULL, CRect ( 0, 0, 0, 0 ), pParentWnd, TRUE );

  004ab	6a 01		 push	 1
  004ad	8b 45 08	 mov	 eax, DWORD PTR _pParentWnd$[ebp]
  004b0	50		 push	 eax
  004b1	6a 00		 push	 0
  004b3	6a 00		 push	 0
  004b5	6a 00		 push	 0
  004b7	6a 00		 push	 0
  004b9	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T159749[ebp]
  004bf	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  004c4	50		 push	 eax
  004c5	6a 00		 push	 0
  004c7	68 00 00 00 00	 push	 OFFSET FLAT:$SG152520
  004cc	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  004d2	e8 00 00 00 00	 call	 ?CreateChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@H@Z ; CSkinWnd::CreateChild
  004d7	89 45 f0	 mov	 DWORD PTR _created$[ebp], eax

; 83   : 
; 84   : 	if ( FALSE == created ) {

  004da	83 7d f0 00	 cmp	 DWORD PTR _created$[ebp], 0
  004de	75 07		 jne	 SHORT $L152521

; 85   : 		return FALSE;

  004e0	33 c0		 xor	 eax, eax
  004e2	e9 f4 03 00 00	 jmp	 $L152517
$L152521:

; 87   : 
; 88   : 	// variable used for loops below
; 89   : 	int i = 0;

  004e7	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 90   : 
; 91   : 	// define all of the position skin object names
; 92   : 	static LPCTSTR btnPosnNames[] = { "position1", "position2", "position3", "position4" };
; 93   : 
; 94   : 	// loop through each position name and find the corresponding CSkinObj
; 95   : 	for ( i=0; i<(sizeof ( btnPosnNames ) / sizeof ( LPCTSTR )); i++ ) {

  004ee	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004f5	eb 09		 jmp	 SHORT $L152530
$L152531:
  004f7	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  004fa	83 c1 01	 add	 ecx, 1
  004fd	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
$L152530:
  00500	83 7d ec 04	 cmp	 DWORD PTR _i$[ebp], 4
  00504	73 47		 jae	 SHORT $L152532

; 96   : 		CSkinObj obj = FindObject ( btnPosnNames[i] );

  00506	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  00509	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _?btnPosnNames@?4??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA[edx*4]
  00510	50		 push	 eax
  00511	8d 4d e4	 lea	 ecx, DWORD PTR _obj$152533[ebp]
  00514	51		 push	 ecx
  00515	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0051b	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  00520	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 97   : 		m_vBtnPosns.push_back ( obj );

  00527	8d 55 e4	 lea	 edx, DWORD PTR _obj$152533[ebp]
  0052a	52		 push	 edx
  0052b	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00531	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00537	e8 00 00 00 00	 call	 ?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::push_back

; 98   : 	}

  0053c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00543	8d 4d e4	 lea	 ecx, DWORD PTR _obj$152533[ebp]
  00546	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0054b	eb aa		 jmp	 SHORT $L152531
$L152532:

; 99   : 
; 100  : 	// define all of the play button skin object names
; 101  : 	static LPCTSTR playBtnNames[] = { "ab_Play1", "ab_Play2", "ab_Play3", "ab_Play4" };
; 102  : 
; 103  : 	// loop through each play button name and find the corresponding CSkinObj
; 104  : 	for ( i=0; i<(sizeof ( playBtnNames ) / sizeof ( LPCTSTR )); i++ ) {

  0054d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00554	eb 09		 jmp	 SHORT $L152542
$L152543:
  00556	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00559	83 c0 01	 add	 eax, 1
  0055c	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$L152542:
  0055f	83 7d ec 04	 cmp	 DWORD PTR _i$[ebp], 4
  00563	73 30		 jae	 SHORT $L152544

; 105  : 		CSkinCtrl *pCtrl = FindControl ( playBtnNames[i] );

  00565	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00568	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _?playBtnNames@?6??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA[ecx*4]
  0056f	52		 push	 edx
  00570	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00576	e8 00 00 00 00	 call	 ?FindControl@CSkinWnd@@QAEPAVCSkinCtrl@@PBD@Z ; CSkinWnd::FindControl
  0057b	89 45 e0	 mov	 DWORD PTR _pCtrl$152545[ebp], eax

; 106  : 
; 107  : 		assert ( NULL != pCtrl );
; 108  : 		m_vPlayBtns.push_back ( pCtrl );

  0057e	8d 45 e0	 lea	 eax, DWORD PTR _pCtrl$152545[ebp]
  00581	50		 push	 eax
  00582	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00588	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0058e	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXABQAVCSkinCtrl@@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::push_back

; 109  : 	}

  00593	eb c1		 jmp	 SHORT $L152543
$L152544:

; 110  : 
; 111  : 	// define all of the highlight position names
; 112  : 	static LPCTSTR highlightNames[] = { "hs_Highlight1", "hs_Highlight2", "hs_Highlight3", "hs_Highlight4" };
; 113  : 
; 114  : 	// loop through each highlight position and find the corresponding CSkinObj
; 115  : 	for ( i=0; i<(sizeof ( highlightNames ) / sizeof ( LPCTSTR )); i++ ) {

  00595	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0059c	eb 09		 jmp	 SHORT $L152554
$L152555:
  0059e	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  005a1	83 c1 01	 add	 ecx, 1
  005a4	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
$L152554:
  005a7	83 7d ec 04	 cmp	 DWORD PTR _i$[ebp], 4
  005ab	73 47		 jae	 SHORT $L152556

; 116  : 		CSkinObj obj = FindObject ( highlightNames[i] );

  005ad	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  005b0	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _?highlightNames@?8??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA[edx*4]
  005b7	50		 push	 eax
  005b8	8d 4d d8	 lea	 ecx, DWORD PTR _obj$152557[ebp]
  005bb	51		 push	 ecx
  005bc	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  005c2	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  005c7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 117  : 		m_vHighlightPosns.push_back ( obj );

  005ce	8d 55 d8	 lea	 edx, DWORD PTR _obj$152557[ebp]
  005d1	52		 push	 edx
  005d2	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  005d8	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  005de	e8 00 00 00 00	 call	 ?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::push_back

; 118  : 	}

  005e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005ea	8d 4d d8	 lea	 ecx, DWORD PTR _obj$152557[ebp]
  005ed	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  005f2	eb aa		 jmp	 SHORT $L152555
$L152556:

; 119  : 
; 120  : 	// define all of the name plate names
; 121  : 	static LPCTSTR nameplateNames[] = { "nameplate1", "nameplate2", "nameplate3", "nameplate4" };
; 122  : 
; 123  : 	// loop through each nameplate and find the corresponding CSkinObj
; 124  : 	for ( i=0; i<(sizeof ( nameplateNames ) / sizeof ( LPCTSTR )); i++ ) {

  005f4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  005fb	eb 09		 jmp	 SHORT $L152566
$L152567:
  005fd	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00600	83 c0 01	 add	 eax, 1
  00603	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$L152566:
  00606	83 7d ec 04	 cmp	 DWORD PTR _i$[ebp], 4
  0060a	73 47		 jae	 SHORT $L152568

; 125  : 		CSkinObj obj = FindObject ( nameplateNames[i] );

  0060c	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  0060f	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _?nameplateNames@?L@??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA[ecx*4]
  00616	52		 push	 edx
  00617	8d 45 d0	 lea	 eax, DWORD PTR _obj$152569[ebp]
  0061a	50		 push	 eax
  0061b	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00621	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  00626	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 126  : 		m_vNamePlates.push_back ( obj );

  0062d	8d 4d d0	 lea	 ecx, DWORD PTR _obj$152569[ebp]
  00630	51		 push	 ecx
  00631	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00637	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  0063d	e8 00 00 00 00	 call	 ?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::push_back

; 127  : 	}

  00642	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00649	8d 4d d0	 lea	 ecx, DWORD PTR _obj$152569[ebp]
  0064c	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00651	eb aa		 jmp	 SHORT $L152567
$L152568:

; 128  : 
; 129  : 	// define all of the name plate highlight names
; 130  : 	static LPCTSTR nameplateHighlightNames[] = { "nameplate1highlite", "nameplate2highlite", "nameplate3highlite", "nameplate4highlite" };
; 131  : 
; 132  : 	// loop through each nameplate highlight and find the corresponding CSkinObj
; 133  : 	for ( i=0; i<(sizeof ( nameplateHighlightNames ) / sizeof ( LPCTSTR )); i++ ) {

  00653	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0065a	eb 09		 jmp	 SHORT $L152578
$L152579:
  0065c	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  0065f	83 c2 01	 add	 edx, 1
  00662	89 55 ec	 mov	 DWORD PTR _i$[ebp], edx
$L152578:
  00665	83 7d ec 04	 cmp	 DWORD PTR _i$[ebp], 4
  00669	73 47		 jae	 SHORT $L152580

; 134  : 		CSkinObj obj = FindObject ( nameplateHighlightNames[i] );

  0066b	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  0066e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _?nameplateHighlightNames@?N@??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA[eax*4]
  00675	51		 push	 ecx
  00676	8d 55 c8	 lea	 edx, DWORD PTR _obj$152581[ebp]
  00679	52		 push	 edx
  0067a	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00680	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  00685	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 135  : 		m_vNamePlateHighlights.push_back ( obj );

  0068c	8d 45 c8	 lea	 eax, DWORD PTR _obj$152581[ebp]
  0068f	50		 push	 eax
  00690	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00696	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  0069c	e8 00 00 00 00	 call	 ?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::push_back

; 136  : 	}

  006a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006a8	8d 4d c8	 lea	 ecx, DWORD PTR _obj$152581[ebp]
  006ab	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  006b0	eb aa		 jmp	 SHORT $L152579
$L152580:

; 137  : 
; 138  : 	// define all of the shadow posn names
; 139  : 	static LPCTSTR shadowPosnNames[] = { "shadowpos1", "shadowpos2", "shadowpos3", "shadowpos4" };
; 140  : 
; 141  : 	// loop through each shadow posn and find the corresponding CSkinObj
; 142  : 	for ( i=0; i<(sizeof ( shadowPosnNames ) / sizeof ( LPCTSTR )); i++ ) {

  006b2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  006b9	eb 09		 jmp	 SHORT $L152590
$L152591:
  006bb	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  006be	83 c1 01	 add	 ecx, 1
  006c1	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
$L152590:
  006c4	83 7d ec 04	 cmp	 DWORD PTR _i$[ebp], 4
  006c8	0f 83 42 01 00
	00		 jae	 $L152592

; 143  : 		CSkinObj obj = FindObject ( shadowPosnNames[i] );

  006ce	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  006d1	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _?shadowPosnNames@?P@??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA[edx*4]
  006d8	50		 push	 eax
  006d9	8d 4d 98	 lea	 ecx, DWORD PTR _obj$152593[ebp]
  006dc	51		 push	 ecx
  006dd	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006e3	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  006e8	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 144  : 		m_vShadowPosns.push_back ( obj );

  006ef	8d 55 98	 lea	 edx, DWORD PTR _obj$152593[ebp]
  006f2	52		 push	 edx
  006f3	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006f9	81 c1 e8 00 00
	00		 add	 ecx, 232		; 000000e8H
  006ff	e8 00 00 00 00	 call	 ?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::push_back

; 145  : 
; 146  : 		// calculate the center point of this shadow posn object and store it as a foot point
; 147  : 		CRect posnRect;

  00704	8d 4d a0	 lea	 ecx, DWORD PTR _posnRect$152595[ebp]
  00707	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 148  : 		obj.GetRect ( posnRect );

  0070c	8d 4d a0	 lea	 ecx, DWORD PTR _posnRect$152595[ebp]
  0070f	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00714	50		 push	 eax
  00715	8d 4d 98	 lea	 ecx, DWORD PTR _obj$152593[ebp]
  00718	e8 00 00 00 00	 call	 ?GetRect@CSkinObj@@QAEHPAUtagRECT@@@Z ; CSkinObj::GetRect

; 149  : 
; 150  : 		// move the posnRect into the hotspot's coordinate system
; 151  : 		CSkinObj hiliteObj = m_vHighlightPosns[i];

  0071d	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00720	50		 push	 eax
  00721	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00727	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0072d	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  00732	50		 push	 eax
  00733	8d 4d c0	 lea	 ecx, DWORD PTR _hiliteObj$152596[ebp]
  00736	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0073b	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 152  : 		CRect hiliteRect;

  0073f	8d 4d b0	 lea	 ecx, DWORD PTR _hiliteRect$152597[ebp]
  00742	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 153  : 		hiliteObj.GetRect ( hiliteRect );

  00747	8d 4d b0	 lea	 ecx, DWORD PTR _hiliteRect$152597[ebp]
  0074a	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0074f	50		 push	 eax
  00750	8d 4d c0	 lea	 ecx, DWORD PTR _hiliteObj$152596[ebp]
  00753	e8 00 00 00 00	 call	 ?GetRect@CSkinObj@@QAEHPAUtagRECT@@@Z ; CSkinObj::GetRect

; 154  : 		posnRect.OffsetRect ( -hiliteRect.left, -hiliteRect.top );

  00758	8b 4d b4	 mov	 ecx, DWORD PTR _hiliteRect$152597[ebp+4]
  0075b	f7 d9		 neg	 ecx
  0075d	51		 push	 ecx
  0075e	8b 55 b0	 mov	 edx, DWORD PTR _hiliteRect$152597[ebp]
  00761	f7 da		 neg	 edx
  00763	52		 push	 edx
  00764	8d 4d a0	 lea	 ecx, DWORD PTR _posnRect$152595[ebp]
  00767	e8 00 00 00 00	 call	 ?OffsetRect@CRect@@QAEXHH@Z ; CRect::OffsetRect

; 155  : 
; 156  : 		// calculate the center point of the shadow position
; 157  : 		CPoint *point = new CPoint;

  0076c	6a 08		 push	 8
  0076e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00773	83 c4 04	 add	 esp, 4
  00776	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T159751[ebp], eax
  0077c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00780	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR $T159751[ebp], 0
  00787	74 13		 je	 SHORT $L159752
  00789	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T159751[ebp]
  0078f	e8 00 00 00 00	 call	 ??0CPoint@@QAE@XZ	; CPoint::CPoint
  00794	89 85 5c ff ff
	ff		 mov	 DWORD PTR -164+[ebp], eax
  0079a	eb 0a		 jmp	 SHORT $L159753
$L159752:
  0079c	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR -164+[ebp], 0
$L159753:
  007a6	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR -164+[ebp]
  007ac	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T159750[ebp], eax
  007b2	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  007b6	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR $T159750[ebp]
  007bc	89 4d 94	 mov	 DWORD PTR _point$152598[ebp], ecx

; 158  : 		*point = posnRect.CenterPoint();

  007bf	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR $T159754[ebp]
  007c5	52		 push	 edx
  007c6	8d 4d a0	 lea	 ecx, DWORD PTR _posnRect$152595[ebp]
  007c9	e8 00 00 00 00	 call	 ?CenterPoint@CRect@@QBE?AVCPoint@@XZ ; CRect::CenterPoint
  007ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  007d0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  007d3	8b 45 94	 mov	 eax, DWORD PTR _point$152598[ebp]
  007d6	89 08		 mov	 DWORD PTR [eax], ecx
  007d8	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 159  : 
; 160  : 		m_vFootPoints.push_back ( point );

  007db	8d 4d 94	 lea	 ecx, DWORD PTR _point$152598[ebp]
  007de	51		 push	 ecx
  007df	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  007e5	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  007eb	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXABQAVCPoint@@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::push_back

; 161  : 	}

  007f0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  007f4	8d 4d c0	 lea	 ecx, DWORD PTR _hiliteObj$152596[ebp]
  007f7	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  007fc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00803	8d 4d 98	 lea	 ecx, DWORD PTR _obj$152593[ebp]
  00806	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0080b	e9 ab fe ff ff	 jmp	 $L152591
$L152592:

; 162  : 
; 163  : 	// define all of the shadow names
; 164  : 	static LPCTSTR shadowNames[] = { "shadow1", "shadow2", "shadow3", "shadow4" };
; 165  : 
; 166  : 	// loop through each shadow and find the corresponding CSkinObj
; 167  : 	for ( i=0; i<(sizeof ( shadowNames ) / sizeof ( LPCTSTR )); i++ ) {

  00810	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00817	eb 09		 jmp	 SHORT $L152611
$L152612:
  00819	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  0081c	83 c2 01	 add	 edx, 1
  0081f	89 55 ec	 mov	 DWORD PTR _i$[ebp], edx
$L152611:
  00822	83 7d ec 04	 cmp	 DWORD PTR _i$[ebp], 4
  00826	73 47		 jae	 SHORT $L152613

; 168  : 		CSkinObj obj = FindObject ( shadowNames[i] );

  00828	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  0082b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _?shadowNames@?BB@??Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z@4PAPBDA[eax*4]
  00832	51		 push	 ecx
  00833	8d 55 8c	 lea	 edx, DWORD PTR _obj$152614[ebp]
  00836	52		 push	 edx
  00837	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0083d	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  00842	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7

; 169  : 		m_vShadows.push_back ( obj );

  00849	8d 45 8c	 lea	 eax, DWORD PTR _obj$152614[ebp]
  0084c	50		 push	 eax
  0084d	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00853	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  00859	e8 00 00 00 00	 call	 ?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::push_back

; 170  : 	}

  0085e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00865	8d 4d 8c	 lea	 ecx, DWORD PTR _obj$152614[ebp]
  00868	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0086d	eb aa		 jmp	 SHORT $L152612
$L152613:

; 171  : 
; 172  : 	// map the highlight object to the local member
; 173  : 	m_HighlightObj = FindObject ( "highlight" );

  0086f	68 00 00 00 00	 push	 OFFSET FLAT:$SG152617
  00874	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T159755[ebp]
  0087a	51		 push	 ecx
  0087b	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00881	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  00886	89 85 58 ff ff
	ff		 mov	 DWORD PTR -168+[ebp], eax
  0088c	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR -168+[ebp]
  00892	89 95 54 ff ff
	ff		 mov	 DWORD PTR -172+[ebp], edx
  00898	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  0089f	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR -172+[ebp]
  008a5	50		 push	 eax
  008a6	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  008ac	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  008b2	e8 00 00 00 00	 call	 ??4CSkinObj@@QAEAAV0@ABV0@@Z ; CSkinObj::operator=
  008b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  008be	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T159755[ebp]
  008c4	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj

; 174  : 	assert ( m_HighlightObj.IsValid() );
; 175  : 
; 176  : 	ShowWindow( SW_SHOW);

  008c9	6a 05		 push	 5
  008cb	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  008d1	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow

; 177  : 
; 178  : 	return TRUE;

  008d6	b8 01 00 00 00	 mov	 eax, 1
$L152517:

; 179  : }

  008db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  008de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  008e5	8b e5		 mov	 esp, ebp
  008e7	5d		 pop	 ebp
  008e8	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L159756:
  001b8	8d 4d e4	 lea	 ecx, DWORD PTR _obj$152533[ebp]
  001bb	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  001c0	c3		 ret	 0
$L159757:
  001c1	8d 4d d8	 lea	 ecx, DWORD PTR _obj$152557[ebp]
  001c4	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  001c9	c3		 ret	 0
$L159758:
  001ca	8d 4d d0	 lea	 ecx, DWORD PTR _obj$152569[ebp]
  001cd	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  001d2	c3		 ret	 0
$L159759:
  001d3	8d 4d c8	 lea	 ecx, DWORD PTR _obj$152581[ebp]
  001d6	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  001db	c3		 ret	 0
$L159760:
  001dc	8d 4d 98	 lea	 ecx, DWORD PTR _obj$152593[ebp]
  001df	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  001e4	c3		 ret	 0
$L159761:
  001e5	8d 4d c0	 lea	 ecx, DWORD PTR _hiliteObj$152596[ebp]
  001e8	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  001ed	c3		 ret	 0
$L159762:
  001ee	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T159751[ebp]
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001fa	59		 pop	 ecx
  001fb	c3		 ret	 0
$L159763:
  001fc	8d 4d 8c	 lea	 ecx, DWORD PTR _obj$152614[ebp]
  001ff	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00204	c3		 ret	 0
$L159764:
  00205	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T159755[ebp]
  0020b	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00210	c3		 ret	 0
$L159767:
  00211	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159766
  00216	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Create@CCharSelectWnd@@QAEHPAVCWnd@@@Z ENDP		; CCharSelectWnd::Create
PUBLIC	??_7CSkinObj@@6B@				; CSkinObj::`vftable'
PUBLIC	??_GCSkinObj@@UAEPAXI@Z				; CSkinObj::`scalar deleting destructor'
PUBLIC	??_ECSkinObj@@UAEPAXI@Z				; CSkinObj::`vector deleting destructor'
;	COMDAT ??_7CSkinObj@@6B@
CONST	SEGMENT
??_7CSkinObj@@6B@ DD FLAT:??_ECSkinObj@@UAEPAXI@Z	; CSkinObj::`vftable'
CONST	ENDS
;	COMDAT ??0CSkinObj@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSkinObj@@QAE@ABV0@@Z PROC NEAR			; CSkinObj::CSkinObj, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSkinObj@@6B@ ; CSkinObj::`vftable'
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0CSkinObj@@QAE@ABV0@@Z ENDP				; CSkinObj::CSkinObj
_TEXT	ENDS
;	COMDAT ??4CSkinObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4CSkinObj@@QAEAAV0@ABV0@@Z PROC NEAR			; CSkinObj::operator=, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??4CSkinObj@@QAEAAV0@ABV0@@Z ENDP			; CSkinObj::operator=
_TEXT	ENDS
;	COMDAT ??_GCSkinObj@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCSkinObj@@UAEPAXI@Z PROC NEAR			; CSkinObj::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L152628
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L152628:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSkinObj@@UAEPAXI@Z ENDP				; CSkinObj::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?push_back@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXABVCSCI_WorldActor@@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::push_back
PUBLIC	??DStringID@@QAEPADXZ				; StringID::operator*
PUBLIC	??0StringID@@QAE@ABV0@@Z			; StringID::StringID
PUBLIC	??0MemID@@QAE@G@Z				; MemID::MemID
PUBLIC	?AddPlayButton@CCharSelectWnd@@QAEHVCSCI_WorldActor@@@Z ; CCharSelectWnd::AddPlayButton
PUBLIC	??A?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEAAPAVCSkinCtrl@@I@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::operator[]
PUBLIC	??1CelObjMem@@UAE@XZ				; CelObjMem::~CelObjMem
PUBLIC	?push_back@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXABQAVCSkinBitmap@@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::push_back
PUBLIC	??0Ratio@@QAE@HH@Z				; Ratio::Ratio
PUBLIC	?get_bitmap@CSCI_BitMap@@QAEFXZ			; CSCI_BitMap::get_bitmap
PUBLIC	??0strstream@std@@QAE@XZ			; std::strstream::strstream
PUBLIC	?str@strstream@std@@QAEPADXZ			; std::strstream::str
PUBLIC	?pcount@strstream@std@@QBEHXZ			; std::strstream::pcount
PUBLIC	??_Dstrstream@std@@QAEXXZ			; std::strstream::`vbase destructor'
PUBLIC	??A?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEAAPAVCPoint@@I@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::operator[]
PUBLIC	?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ	; CSCI_WorldObject::get_pName
PUBLIC	?get_xScaleAdj@CSCI_Feature@@QAEFXZ		; CSCI_Feature::get_xScaleAdj
PUBLIC	?get_yScaleAdj@CSCI_Feature@@QAEFXZ		; CSCI_Feature::get_yScaleAdj
EXTRN	__fltused:NEAR
EXTRN	?getAffectedState@CSCI_WorldObject@@QAEFF@Z:NEAR ; CSCI_WorldObject::getAffectedState
EXTRN	??0CString@@QAE@PBDH@Z:NEAR			; CString::CString
EXTRN	??0CelObjMem@@QAE@VMemID@@@Z:NEAR		; CelObjMem::CelObjMem
EXTRN	??1CString@@QAE@XZ:NEAR				; CString::~CString
EXTRN	?MoveTo@CSkinObj@@QAEHV1@@Z:NEAR		; CSkinObj::MoveTo
EXTRN	?SetText@CSkinObj@@QAAHPADZZ:NEAR		; CSkinObj::SetText
EXTRN	?SetHint@CSkinObj@@QAEHAAVCString@@@Z:NEAR	; CSkinObj::SetHint
EXTRN	?SetHint@CSkinObj@@QAEHPBD@Z:NEAR		; CSkinObj::SetHint
EXTRN	?SetTransparency@CSkinObj@@QAEHH@Z:NEAR		; CSkinObj::SetTransparency
EXTRN	?DrawBitmap@CSkinObj@@QAEHPAVCSkinBitmap@@HH@Z:NEAR ; CSkinObj::DrawBitmap
EXTRN	?Normalize@Ratio@@QAEXXZ:NEAR			; Ratio::Normalize
EXTRN	__imp_??6std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:NEAR
EXTRN	??0CSkinBitmap@@QAE@PAVCelObj@@NAAVRatio@@1@Z:NEAR ; CSkinBitmap::CSkinBitmap
_DATA	SEGMENT
	ORG $+2
$SG152716 DB	'Click here to enter the game with ', 00H
	ORG $+1
$SG152785 DB	'Click here to perform special actions on ', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T159808 DD	019930520H
	DD	0cH
	DD	FLAT:$T159811
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159811 DD	0ffffffffH
	DD	FLAT:$L159793
	DD	00H
	DD	FLAT:$L159794
	DD	00H
	DD	FLAT:$L159795
	DD	00H
	DD	FLAT:$L159797
	DD	03H
	DD	FLAT:$L159798
	DD	03H
	DD	FLAT:$L159799
	DD	05H
	DD	FLAT:$L159800
	DD	06H
	DD	FLAT:$L159801
	DD	07H
	DD	FLAT:$L159802
	DD	08H
	DD	FLAT:$L159804
	DD	09H
	DD	FLAT:$L159805
	DD	0aH
	DD	FLAT:$L159806
xdata$x	ENDS
_TEXT	SEGMENT
$T159773 = -460
$T159774 = -464
$T159775 = -468
$T159778 = -472
$T159779 = -476
$T159782 = -480
$T159783 = -484
$T159784 = -488
$T159787 = -492
$T159788 = -496
$T159791 = -500
$T159792 = -504
_pChar$ = 8
_this$ = -508
_bitmap$ = -112
_scaleX$ = -264
_scaleY$ = -28
_pDarkBitmap$ = -32
__$EHRec$ = -12
_pLightBitmap$ = -432
_lpszName$ = -444
_playBtn$ = -420
_btnHint$ = -416
_namePlate$ = -456
_namePlateHighlight$ = -20
_shadowPos$ = -272
_shadow$ = -440
_hotSpot$ = -428
_hotSpotHint$ = -256
_footPoint$ = -448
?AddPlayButton@CCharSelectWnd@@QAEHVCSCI_WorldActor@@@Z PROC NEAR ; CCharSelectWnd::AddPlayButton

; 183  : {

  008eb	55		 push	 ebp
  008ec	8b ec		 mov	 ebp, esp
  008ee	6a ff		 push	 -1
  008f0	68 00 00 00 00	 push	 $L159809
  008f5	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  008fb	50		 push	 eax
  008fc	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00903	81 ec 18 02 00
	00		 sub	 esp, 536		; 00000218H
  00909	89 8d 04 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 184  : 	if ( m_nBtnCount == 4 )

  0090f	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00915	83 b8 58 01 00
	00 04		 cmp	 DWORD PTR [eax+344], 4
  0091c	75 07		 jne	 SHORT $L152633

; 185  : 		return FALSE;

  0091e	33 c0		 xor	 eax, eax
  00920	e9 f7 05 00 00	 jmp	 $L152632
$L152633:

; 186  : 
; 187  : 	// insert the handle to the character into the character list
; 188  : 	m_vCharObjects.push_back ( pChar );

  00925	8d 4d 08	 lea	 ecx, DWORD PTR _pChar$[ebp]
  00928	51		 push	 ecx
  00929	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0092f	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  00935	e8 00 00 00 00	 call	 ?push_back@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXABVCSCI_WorldActor@@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::push_back

; 189  : 
; 190  : 	// get the bitmap data...
; 191  : 	CelObjMem bitmap ( pChar.get_bitmap() );

  0093a	8d 4d 08	 lea	 ecx, DWORD PTR _pChar$[ebp]
  0093d	e8 00 00 00 00	 call	 ?get_bitmap@CSCI_BitMap@@QAEFXZ ; CSCI_BitMap::get_bitmap
  00942	51		 push	 ecx
  00943	8b cc		 mov	 ecx, esp
  00945	89 a5 34 fe ff
	ff		 mov	 DWORD PTR $T159773[ebp], esp
  0094b	50		 push	 eax
  0094c	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00951	8d 4d 90	 lea	 ecx, DWORD PTR _bitmap$[ebp]
  00954	e8 00 00 00 00	 call	 ??0CelObjMem@@QAE@VMemID@@@Z ; CelObjMem::CelObjMem
  00959	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 192  : 
; 193  : 	// get the scaling information from the object
; 194  : 	Ratio scaleX ( pChar.get_xScaleAdj() - 15, 100 );

  00960	6a 64		 push	 100			; 00000064H
  00962	8d 4d 08	 lea	 ecx, DWORD PTR _pChar$[ebp]
  00965	e8 00 00 00 00	 call	 ?get_xScaleAdj@CSCI_Feature@@QAEFXZ ; CSCI_Feature::get_xScaleAdj
  0096a	0f bf d0	 movsx	 edx, ax
  0096d	83 ea 0f	 sub	 edx, 15			; 0000000fH
  00970	52		 push	 edx
  00971	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _scaleX$[ebp]
  00977	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio

; 195  : 	Ratio scaleY ( pChar.get_yScaleAdj() - 15, 100 );

  0097c	6a 64		 push	 100			; 00000064H
  0097e	8d 4d 08	 lea	 ecx, DWORD PTR _pChar$[ebp]
  00981	e8 00 00 00 00	 call	 ?get_yScaleAdj@CSCI_Feature@@QAEFXZ ; CSCI_Feature::get_yScaleAdj
  00986	0f bf c0	 movsx	 eax, ax
  00989	83 e8 0f	 sub	 eax, 15			; 0000000fH
  0098c	50		 push	 eax
  0098d	8d 4d e4	 lea	 ecx, DWORD PTR _scaleY$[ebp]
  00990	e8 00 00 00 00	 call	 ??0Ratio@@QAE@HH@Z	; Ratio::Ratio

; 196  : 	scaleX.Normalize();

  00995	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _scaleX$[ebp]
  0099b	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 197  : 	scaleY.Normalize();

  009a0	8d 4d e4	 lea	 ecx, DWORD PTR _scaleY$[ebp]
  009a3	e8 00 00 00 00	 call	 ?Normalize@Ratio@@QAEXXZ ; Ratio::Normalize

; 198  : 
; 199  : 	CSkinBitmap* pDarkBitmap = new CSkinBitmap( &bitmap, 0.70, scaleX, scaleY );

  009a8	6a 1c		 push	 28			; 0000001cH
  009aa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  009af	83 c4 04	 add	 esp, 4
  009b2	89 85 2c fe ff
	ff		 mov	 DWORD PTR $T159775[ebp], eax
  009b8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  009bc	83 bd 2c fe ff
	ff 00		 cmp	 DWORD PTR $T159775[ebp], 0
  009c3	74 2c		 je	 SHORT $L159776
  009c5	8d 4d e4	 lea	 ecx, DWORD PTR _scaleY$[ebp]
  009c8	51		 push	 ecx
  009c9	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _scaleX$[ebp]
  009cf	52		 push	 edx
  009d0	68 66 66 e6 3f	 push	 1072064102		; 3fe66666H
  009d5	68 66 66 66 66	 push	 1717986918		; 66666666H
  009da	8d 45 90	 lea	 eax, DWORD PTR _bitmap$[ebp]
  009dd	50		 push	 eax
  009de	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR $T159775[ebp]
  009e4	e8 00 00 00 00	 call	 ??0CSkinBitmap@@QAE@PAVCelObj@@NAAVRatio@@1@Z ; CSkinBitmap::CSkinBitmap
  009e9	89 85 00 fe ff
	ff		 mov	 DWORD PTR -512+[ebp], eax
  009ef	eb 0a		 jmp	 SHORT $L159777
$L159776:
  009f1	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR -512+[ebp], 0
$L159777:
  009fb	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR -512+[ebp]
  00a01	89 8d 30 fe ff
	ff		 mov	 DWORD PTR $T159774[ebp], ecx
  00a07	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00a0b	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR $T159774[ebp]
  00a11	89 55 e0	 mov	 DWORD PTR _pDarkBitmap$[ebp], edx

; 200  : 	CSkinBitmap* pLightBitmap = new CSkinBitmap( &bitmap, 1.00, scaleX, scaleY );

  00a14	6a 1c		 push	 28			; 0000001cH
  00a16	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00a1b	83 c4 04	 add	 esp, 4
  00a1e	89 85 24 fe ff
	ff		 mov	 DWORD PTR $T159779[ebp], eax
  00a24	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00a28	83 bd 24 fe ff
	ff 00		 cmp	 DWORD PTR $T159779[ebp], 0
  00a2f	74 29		 je	 SHORT $L159780
  00a31	8d 45 e4	 lea	 eax, DWORD PTR _scaleY$[ebp]
  00a34	50		 push	 eax
  00a35	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _scaleX$[ebp]
  00a3b	51		 push	 ecx
  00a3c	68 00 00 f0 3f	 push	 1072693248		; 3ff00000H
  00a41	6a 00		 push	 0
  00a43	8d 55 90	 lea	 edx, DWORD PTR _bitmap$[ebp]
  00a46	52		 push	 edx
  00a47	8b 8d 24 fe ff
	ff		 mov	 ecx, DWORD PTR $T159779[ebp]
  00a4d	e8 00 00 00 00	 call	 ??0CSkinBitmap@@QAE@PAVCelObj@@NAAVRatio@@1@Z ; CSkinBitmap::CSkinBitmap
  00a52	89 85 fc fd ff
	ff		 mov	 DWORD PTR -516+[ebp], eax
  00a58	eb 0a		 jmp	 SHORT $L159781
$L159780:
  00a5a	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR -516+[ebp], 0
$L159781:
  00a64	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR -516+[ebp]
  00a6a	89 85 28 fe ff
	ff		 mov	 DWORD PTR $T159778[ebp], eax
  00a70	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00a74	8b 8d 28 fe ff
	ff		 mov	 ecx, DWORD PTR $T159778[ebp]
  00a7a	89 8d 50 fe ff
	ff		 mov	 DWORD PTR _pLightBitmap$[ebp], ecx

; 201  : 
; 202  : 	char* lpszName = *((StringID) pChar.get_pName());

  00a80	8d 95 1c fe ff
	ff		 lea	 edx, DWORD PTR $T159783[ebp]
  00a86	52		 push	 edx
  00a87	8d 4d 08	 lea	 ecx, DWORD PTR _pChar$[ebp]
  00a8a	e8 00 00 00 00	 call	 ?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ ; CSCI_WorldObject::get_pName
  00a8f	50		 push	 eax
  00a90	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T159782[ebp]
  00a96	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  00a9b	8b c8		 mov	 ecx, eax
  00a9d	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  00aa2	89 85 44 fe ff
	ff		 mov	 DWORD PTR _lpszName$[ebp], eax

; 203  : 
; 204  : 	CSkinCtrl *playBtn = m_vPlayBtns[m_nBtnCount];

  00aa8	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00aae	8b 88 58 01 00
	00		 mov	 ecx, DWORD PTR [eax+344]
  00ab4	51		 push	 ecx
  00ab5	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00abb	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00ac1	e8 00 00 00 00	 call	 ??A?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEAAPAVCSkinCtrl@@I@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::operator[]
  00ac6	8b 10		 mov	 edx, DWORD PTR [eax]
  00ac8	89 95 5c fe ff
	ff		 mov	 DWORD PTR _playBtn$[ebp], edx

; 205  : 	playBtn->MoveTo ( m_vBtnPosns[m_nBtnCount] );

  00ace	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00ad4	8b 88 58 01 00
	00		 mov	 ecx, DWORD PTR [eax+344]
  00ada	51		 push	 ecx
  00adb	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00ae1	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00ae7	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  00aec	83 ec 08	 sub	 esp, 8
  00aef	8b cc		 mov	 ecx, esp
  00af1	89 a5 18 fe ff
	ff		 mov	 DWORD PTR $T159784[ebp], esp
  00af7	50		 push	 eax
  00af8	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00afd	89 85 f8 fd ff
	ff		 mov	 DWORD PTR -520+[ebp], eax
  00b03	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _playBtn$[ebp]
  00b09	e8 00 00 00 00	 call	 ?MoveTo@CSkinObj@@QAEHV1@@Z ; CSkinObj::MoveTo

; 206  : 
; 207  : 	// put a hint on this play button
; 208  : 	std::strstream btnHint;

  00b0e	6a 01		 push	 1
  00b10	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _btnHint$[ebp]
  00b16	e8 00 00 00 00	 call	 ??0strstream@std@@QAE@XZ ; std::strstream::strstream
  00b1b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 209  : 	btnHint << "Click here to enter the game with " << lpszName;

  00b1f	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR _btnHint$[ebp]
  00b25	85 d2		 test	 edx, edx
  00b27	74 0e		 je	 SHORT $L159785
  00b29	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _btnHint$[ebp+8]
  00b2f	89 85 f4 fd ff
	ff		 mov	 DWORD PTR -524+[ebp], eax
  00b35	eb 0a		 jmp	 SHORT $L159786
$L159785:
  00b37	c7 85 f4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR -524+[ebp], 0
$L159786:
  00b41	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _lpszName$[ebp]
  00b47	51		 push	 ecx
  00b48	68 00 00 00 00	 push	 OFFSET FLAT:$SG152716
  00b4d	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR -524+[ebp]
  00b53	52		 push	 edx
  00b54	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00b5a	83 c4 08	 add	 esp, 8
  00b5d	50		 push	 eax
  00b5e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00b64	83 c4 08	 add	 esp, 8

; 210  : 	playBtn->SetHint ( CString ( btnHint.str(), btnHint.pcount() ) );

  00b67	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _btnHint$[ebp]
  00b6d	e8 00 00 00 00	 call	 ?pcount@strstream@std@@QBEHXZ ; std::strstream::pcount
  00b72	50		 push	 eax
  00b73	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _btnHint$[ebp]
  00b79	e8 00 00 00 00	 call	 ?str@strstream@std@@QAEPADXZ ; std::strstream::str
  00b7e	50		 push	 eax
  00b7f	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T159787[ebp]
  00b85	e8 00 00 00 00	 call	 ??0CString@@QAE@PBDH@Z	; CString::CString
  00b8a	89 85 f0 fd ff
	ff		 mov	 DWORD PTR -528+[ebp], eax
  00b90	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR -528+[ebp]
  00b96	89 85 ec fd ff
	ff		 mov	 DWORD PTR -532+[ebp], eax
  00b9c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00ba0	8b 8d ec fd ff
	ff		 mov	 ecx, DWORD PTR -532+[ebp]
  00ba6	51		 push	 ecx
  00ba7	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _playBtn$[ebp]
  00bad	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHAAVCString@@@Z ; CSkinObj::SetHint
  00bb2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00bb6	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T159787[ebp]
  00bbc	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 211  : 
; 212  : 	// update the nameplates
; 213  : 	CSkinObj namePlate = m_vNamePlates[m_nBtnCount];

  00bc1	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00bc7	8b 82 58 01 00
	00		 mov	 eax, DWORD PTR [edx+344]
  00bcd	50		 push	 eax
  00bce	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00bd4	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  00bda	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  00bdf	50		 push	 eax
  00be0	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR _namePlate$[ebp]
  00be6	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00beb	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 214  : 	CSkinObj namePlateHighlight = m_vNamePlateHighlights[m_nBtnCount];

  00bef	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00bf5	8b 91 58 01 00
	00		 mov	 edx, DWORD PTR [ecx+344]
  00bfb	52		 push	 edx
  00bfc	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00c02	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  00c08	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  00c0d	50		 push	 eax
  00c0e	8d 4d ec	 lea	 ecx, DWORD PTR _namePlateHighlight$[ebp]
  00c11	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00c16	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 215  : 
; 216  : 	namePlate.SetText ( lpszName );

  00c1a	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR _lpszName$[ebp]
  00c20	50		 push	 eax
  00c21	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR _namePlate$[ebp]
  00c27	51		 push	 ecx
  00c28	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  00c2d	83 c4 08	 add	 esp, 8

; 217  : 	namePlateHighlight.SetText ( lpszName );

  00c30	8b 95 44 fe ff
	ff		 mov	 edx, DWORD PTR _lpszName$[ebp]
  00c36	52		 push	 edx
  00c37	8d 45 ec	 lea	 eax, DWORD PTR _namePlateHighlight$[ebp]
  00c3a	50		 push	 eax
  00c3b	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  00c40	83 c4 08	 add	 esp, 8

; 218  : 	namePlate.SetHint ( lpszName );

  00c43	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _lpszName$[ebp]
  00c49	51		 push	 ecx
  00c4a	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR _namePlate$[ebp]
  00c50	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint

; 219  : 
; 220  : 	// place a shadow object for the character of this play button
; 221  : 	CSkinObj shadowPos = m_vShadowPosns[m_nBtnCount];

  00c55	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00c5b	8b 82 58 01 00
	00		 mov	 eax, DWORD PTR [edx+344]
  00c61	50		 push	 eax
  00c62	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00c68	81 c1 e8 00 00
	00		 add	 ecx, 232		; 000000e8H
  00c6e	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  00c73	50		 push	 eax
  00c74	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _shadowPos$[ebp]
  00c7a	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00c7f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 222  : 	CSkinObj shadow = m_vShadows[m_nBtnCount];

  00c83	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00c89	8b 91 58 01 00
	00		 mov	 edx, DWORD PTR [ecx+344]
  00c8f	52		 push	 edx
  00c90	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00c96	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  00c9c	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  00ca1	50		 push	 eax
  00ca2	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _shadow$[ebp]
  00ca8	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00cad	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 223  : 
; 224  : 	shadow.MoveTo ( shadowPos );

  00cb1	83 ec 08	 sub	 esp, 8
  00cb4	8b cc		 mov	 ecx, esp
  00cb6	89 a5 10 fe ff
	ff		 mov	 DWORD PTR $T159788[ebp], esp
  00cbc	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _shadowPos$[ebp]
  00cc2	50		 push	 eax
  00cc3	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00cc8	89 85 e8 fd ff
	ff		 mov	 DWORD PTR -536+[ebp], eax
  00cce	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _shadow$[ebp]
  00cd4	e8 00 00 00 00	 call	 ?MoveTo@CSkinObj@@QAEHV1@@Z ; CSkinObj::MoveTo

; 225  : 
; 226  : 	// put a hint on the character hot spot
; 227  : 	CSkinObj hotSpot = m_vHighlightPosns[m_nBtnCount];

  00cd9	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00cdf	8b 91 58 01 00
	00		 mov	 edx, DWORD PTR [ecx+344]
  00ce5	52		 push	 edx
  00ce6	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00cec	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  00cf2	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  00cf7	50		 push	 eax
  00cf8	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR _hotSpot$[ebp]
  00cfe	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00d03	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9

; 228  : 	std::strstream hotSpotHint;

  00d07	6a 01		 push	 1
  00d09	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _hotSpotHint$[ebp]
  00d0f	e8 00 00 00 00	 call	 ??0strstream@std@@QAE@XZ ; std::strstream::strstream
  00d14	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH

; 229  : 	hotSpotHint << "Click here to perform special actions on " << lpszName;

  00d18	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _hotSpotHint$[ebp]
  00d1e	85 c0		 test	 eax, eax
  00d20	74 0e		 je	 SHORT $L159789
  00d22	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _hotSpotHint$[ebp+8]
  00d28	89 8d e4 fd ff
	ff		 mov	 DWORD PTR -540+[ebp], ecx
  00d2e	eb 0a		 jmp	 SHORT $L159790
$L159789:
  00d30	c7 85 e4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR -540+[ebp], 0
$L159790:
  00d3a	8b 95 44 fe ff
	ff		 mov	 edx, DWORD PTR _lpszName$[ebp]
  00d40	52		 push	 edx
  00d41	68 00 00 00 00	 push	 OFFSET FLAT:$SG152785
  00d46	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR -540+[ebp]
  00d4c	50		 push	 eax
  00d4d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00d53	83 c4 08	 add	 esp, 8
  00d56	50		 push	 eax
  00d57	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00d5d	83 c4 08	 add	 esp, 8

; 230  : 	hotSpot.SetHint ( CString ( hotSpotHint.str(), hotSpotHint.pcount() ) );

  00d60	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _hotSpotHint$[ebp]
  00d66	e8 00 00 00 00	 call	 ?pcount@strstream@std@@QBEHXZ ; std::strstream::pcount
  00d6b	50		 push	 eax
  00d6c	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _hotSpotHint$[ebp]
  00d72	e8 00 00 00 00	 call	 ?str@strstream@std@@QAEPADXZ ; std::strstream::str
  00d77	50		 push	 eax
  00d78	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR $T159791[ebp]
  00d7e	e8 00 00 00 00	 call	 ??0CString@@QAE@PBDH@Z	; CString::CString
  00d83	89 85 e0 fd ff
	ff		 mov	 DWORD PTR -544+[ebp], eax
  00d89	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR -544+[ebp]
  00d8f	89 8d dc fd ff
	ff		 mov	 DWORD PTR -548+[ebp], ecx
  00d95	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00d99	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR -548+[ebp]
  00d9f	52		 push	 edx
  00da0	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR _hotSpot$[ebp]
  00da6	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHAAVCString@@@Z ; CSkinObj::SetHint
  00dab	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00daf	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR $T159791[ebp]
  00db5	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 231  : 
; 232  : 	// store the bitmaps
; 233  : 	m_vDarkBitmaps.push_back ( pDarkBitmap );

  00dba	8d 45 e0	 lea	 eax, DWORD PTR _pDarkBitmap$[ebp]
  00dbd	50		 push	 eax
  00dbe	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00dc4	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  00dca	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXABQAVCSkinBitmap@@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::push_back

; 234  : 	m_vLightBitmaps.push_back ( pLightBitmap );

  00dcf	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR _pLightBitmap$[ebp]
  00dd5	51		 push	 ecx
  00dd6	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00ddc	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00de2	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXABQAVCSkinBitmap@@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::push_back

; 235  : 
; 236  : 	// draw the character on the hot spot bitmap
; 237  : 	CPoint *footPoint = m_vFootPoints[m_nBtnCount];

  00de7	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00ded	8b 82 58 01 00
	00		 mov	 eax, DWORD PTR [edx+344]
  00df3	50		 push	 eax
  00df4	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00dfa	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00e00	e8 00 00 00 00	 call	 ??A?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEAAPAVCPoint@@I@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::operator[]
  00e05	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e07	89 8d 40 fe ff
	ff		 mov	 DWORD PTR _footPoint$[ebp], ecx

; 238  : 	hotSpot.DrawBitmap ( pDarkBitmap, footPoint->x, footPoint->y );

  00e0d	8b 95 40 fe ff
	ff		 mov	 edx, DWORD PTR _footPoint$[ebp]
  00e13	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00e16	50		 push	 eax
  00e17	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR _footPoint$[ebp]
  00e1d	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e1f	52		 push	 edx
  00e20	8b 45 e0	 mov	 eax, DWORD PTR _pDarkBitmap$[ebp]
  00e23	50		 push	 eax
  00e24	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR _hotSpot$[ebp]
  00e2a	e8 00 00 00 00	 call	 ?DrawBitmap@CSkinObj@@QAEHPAVCSkinBitmap@@HH@Z ; CSkinObj::DrawBitmap

; 239  : 
; 240  : 	if ( pChar.getAffectedState( CSCI_WorldActor::_AFF_INVISIBILITY ) || pChar.getAffectedState( CSCI_WorldActor::_AFF_IMPROVED_INVISIBILITY ) )

  00e2f	6a 12		 push	 18			; 00000012H
  00e31	8d 4d 08	 lea	 ecx, DWORD PTR _pChar$[ebp]
  00e34	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_WorldObject@@QAEFF@Z ; CSCI_WorldObject::getAffectedState
  00e39	0f bf c8	 movsx	 ecx, ax
  00e3c	85 c9		 test	 ecx, ecx
  00e3e	75 11		 jne	 SHORT $L152789
  00e40	6a 15		 push	 21			; 00000015H
  00e42	8d 4d 08	 lea	 ecx, DWORD PTR _pChar$[ebp]
  00e45	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_WorldObject@@QAEFF@Z ; CSCI_WorldObject::getAffectedState
  00e4a	0f bf d0	 movsx	 edx, ax
  00e4d	85 d2		 test	 edx, edx
  00e4f	74 10		 je	 SHORT $L152788
$L152789:

; 241  : 		hotSpot.SetTransparency( 192 );

  00e51	68 c0 00 00 00	 push	 192			; 000000c0H
  00e56	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR _hotSpot$[ebp]
  00e5c	e8 00 00 00 00	 call	 ?SetTransparency@CSkinObj@@QAEHH@Z ; CSkinObj::SetTransparency
$L152788:

; 242  : 
; 243  : 	// increment the number of buttons
; 244  : 	m_nBtnCount++;

  00e61	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00e67	8b 88 58 01 00
	00		 mov	 ecx, DWORD PTR [eax+344]
  00e6d	83 c1 01	 add	 ecx, 1
  00e70	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00e76	89 8a 58 01 00
	00		 mov	 DWORD PTR [edx+344], ecx

; 245  : 	m_nPlayBtnCount++;

  00e7c	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00e82	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR [eax+348]
  00e88	83 c1 01	 add	 ecx, 1
  00e8b	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00e91	89 8a 5c 01 00
	00		 mov	 DWORD PTR [edx+348], ecx

; 246  : 
; 247  : 	return TRUE;

  00e97	c7 85 08 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR $T159792[ebp], 1
  00ea1	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00ea5	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _hotSpotHint$[ebp]
  00eab	e8 00 00 00 00	 call	 ??_Dstrstream@std@@QAEXXZ ; std::strstream::`vbase destructor'
  00eb0	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00eb4	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR _hotSpot$[ebp]
  00eba	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00ebf	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00ec3	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _shadow$[ebp]
  00ec9	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00ece	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00ed2	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _shadowPos$[ebp]
  00ed8	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00edd	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00ee1	8d 4d ec	 lea	 ecx, DWORD PTR _namePlateHighlight$[ebp]
  00ee4	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00ee9	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00eed	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR _namePlate$[ebp]
  00ef3	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00ef8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00efc	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _btnHint$[ebp]
  00f02	e8 00 00 00 00	 call	 ??_Dstrstream@std@@QAEXXZ ; std::strstream::`vbase destructor'
  00f07	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00f0e	8d 4d 90	 lea	 ecx, DWORD PTR _bitmap$[ebp]
  00f11	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  00f16	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR $T159792[ebp]
$L152632:

; 248  : }

  00f1c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00f1f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00f26	8b e5		 mov	 esp, ebp
  00f28	5d		 pop	 ebp
  00f29	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L159793:
  0021b	8d 4d 90	 lea	 ecx, DWORD PTR _bitmap$[ebp]
  0021e	e8 00 00 00 00	 call	 ??1CelObjMem@@UAE@XZ	; CelObjMem::~CelObjMem
  00223	c3		 ret	 0
$L159794:
  00224	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR $T159775[ebp]
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00230	59		 pop	 ecx
  00231	c3		 ret	 0
$L159795:
  00232	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR $T159779[ebp]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0023e	59		 pop	 ecx
  0023f	c3		 ret	 0
$L159797:
  00240	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _btnHint$[ebp]
  00246	e8 00 00 00 00	 call	 ??_Dstrstream@std@@QAEXXZ ; std::strstream::`vbase destructor'
  0024b	c3		 ret	 0
$L159798:
  0024c	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T159787[ebp]
  00252	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00257	c3		 ret	 0
$L159799:
  00258	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR _namePlate$[ebp]
  0025e	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00263	c3		 ret	 0
$L159800:
  00264	8d 4d ec	 lea	 ecx, DWORD PTR _namePlateHighlight$[ebp]
  00267	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0026c	c3		 ret	 0
$L159801:
  0026d	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _shadowPos$[ebp]
  00273	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00278	c3		 ret	 0
$L159802:
  00279	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _shadow$[ebp]
  0027f	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00284	c3		 ret	 0
$L159804:
  00285	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR _hotSpot$[ebp]
  0028b	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00290	c3		 ret	 0
$L159805:
  00291	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _hotSpotHint$[ebp]
  00297	e8 00 00 00 00	 call	 ??_Dstrstream@std@@QAEXXZ ; std::strstream::`vbase destructor'
  0029c	c3		 ret	 0
$L159806:
  0029d	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR $T159791[ebp]
  002a3	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  002a8	c3		 ret	 0
$L159809:
  002a9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159808
  002ae	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddPlayButton@CCharSelectWnd@@QAEHVCSCI_WorldActor@@@Z ENDP ; CCharSelectWnd::AddPlayButton
PUBLIC	??0MemID@@QAE@ABV0@@Z				; MemID::MemID
;	COMDAT ??0StringID@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0StringID@@QAE@ABV0@@Z PROC NEAR			; StringID::StringID, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0StringID@@QAE@ABV0@@Z ENDP				; StringID::StringID
_TEXT	ENDS
PUBLIC	?AddCreateButton@CCharSelectWnd@@QAEHXZ		; CCharSelectWnd::AddCreateButton
_DATA	SEGMENT
	ORG $+2
$SG152801 DB	'cb_Create', 00H
	ORG $+2
$SG152803 DB	'Click here to create a new character', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T159819 DD	019930520H
	DD	01H
	DD	FLAT:$T159821
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159821 DD	0ffffffffH
	DD	FLAT:$L159816
xdata$x	ENDS
_TEXT	SEGMENT
$T159814 = -24
$T159815 = -28
__$EHRec$ = -12
_this$ = -32
_createBtn$ = -20
?AddCreateButton@CCharSelectWnd@@QAEHXZ PROC NEAR	; CCharSelectWnd::AddCreateButton

; 252  : {

  00f2c	55		 push	 ebp
  00f2d	8b ec		 mov	 ebp, esp
  00f2f	6a ff		 push	 -1
  00f31	68 00 00 00 00	 push	 $L159820
  00f36	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00f3c	50		 push	 eax
  00f3d	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00f44	83 ec 18	 sub	 esp, 24			; 00000018H
  00f47	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	// don't add anything if there are already 4 buttons
; 254  : 	if ( m_nBtnCount >= 4 ) {

  00f4a	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00f4d	83 b8 58 01 00
	00 04		 cmp	 DWORD PTR [eax+344], 4
  00f54	7c 07		 jl	 SHORT $L152798

; 255  : 		return FALSE;

  00f56	33 c0		 xor	 eax, eax
  00f58	e9 84 00 00 00	 jmp	 $L152797
$L152798:

; 257  : 
; 258  : 	CSkinObj createBtn = FindObject ( "cb_Create" );

  00f5d	68 00 00 00 00	 push	 OFFSET FLAT:$SG152801
  00f62	8d 4d ec	 lea	 ecx, DWORD PTR _createBtn$[ebp]
  00f65	51		 push	 ecx
  00f66	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f69	e8 00 00 00 00	 call	 ?FindObject@CSkinWnd@@QAE?AVCSkinObj@@PBD@Z ; CSkinWnd::FindObject
  00f6e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 259  : 	createBtn.MoveTo ( m_vBtnPosns[m_nBtnCount] );

  00f75	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00f78	8b 82 58 01 00
	00		 mov	 eax, DWORD PTR [edx+344]
  00f7e	50		 push	 eax
  00f7f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f82	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00f88	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  00f8d	83 ec 08	 sub	 esp, 8
  00f90	8b cc		 mov	 ecx, esp
  00f92	89 65 e8	 mov	 DWORD PTR $T159814[ebp], esp
  00f95	50		 push	 eax
  00f96	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00f9b	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  00f9e	8d 4d ec	 lea	 ecx, DWORD PTR _createBtn$[ebp]
  00fa1	e8 00 00 00 00	 call	 ?MoveTo@CSkinObj@@QAEHV1@@Z ; CSkinObj::MoveTo

; 260  : 
; 261  : 	// put a hint on this create button
; 262  : 	createBtn.SetHint ( "Click here to create a new character" );

  00fa6	68 00 00 00 00	 push	 OFFSET FLAT:$SG152803
  00fab	8d 4d ec	 lea	 ecx, DWORD PTR _createBtn$[ebp]
  00fae	e8 00 00 00 00	 call	 ?SetHint@CSkinObj@@QAEHPBD@Z ; CSkinObj::SetHint

; 263  : 
; 264  : 	// increment the number of buttons
; 265  : 	m_nBtnCount++;

  00fb3	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00fb6	8b 91 58 01 00
	00		 mov	 edx, DWORD PTR [ecx+344]
  00fbc	83 c2 01	 add	 edx, 1
  00fbf	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00fc2	89 90 58 01 00
	00		 mov	 DWORD PTR [eax+344], edx

; 266  : 
; 267  : 	return TRUE;

  00fc8	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR $T159815[ebp], 1
  00fcf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00fd6	8d 4d ec	 lea	 ecx, DWORD PTR _createBtn$[ebp]
  00fd9	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00fde	8b 45 e4	 mov	 eax, DWORD PTR $T159815[ebp]
$L152797:

; 268  : }

  00fe1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00fe4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00feb	8b e5		 mov	 esp, ebp
  00fed	5d		 pop	 ebp
  00fee	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L159816:
  002b3	8d 4d ec	 lea	 ecx, DWORD PTR _createBtn$[ebp]
  002b6	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  002bb	c3		 ret	 0
$L159820:
  002bc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159819
  002c1	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddCreateButton@CCharSelectWnd@@QAEHXZ ENDP		; CCharSelectWnd::AddCreateButton
PUBLIC	??0CCharSelPlayBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CCharSelPlayBtn::CCharSelPlayBtn
PUBLIC	??0CCharSelCreateBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CCharSelCreateBtn::CCharSelCreateBtn
PUBLIC	??0CCharSelHotSpot@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CCharSelHotSpot::CCharSelHotSpot
PUBLIC	??8@YG_NABVCString@@PBD@Z			; operator==
EXTRN	?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z:NEAR ; CSkinWnd::MakeSkinCtrl
EXTRN	?Left@CString@@QBE?AV1@H@Z:NEAR			; CString::Left
EXTRN	?GetName@CSkinObj@@QAE?AVCString@@XZ:NEAR	; CSkinObj::GetName
_DATA	SEGMENT
	ORG $+3
$SG152813 DB	'ab_', 00H
$SG152821 DB	'cb_', 00H
$SG152830 DB	'hs_', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T159855 DD	019930520H
	DD	07H
	DD	FLAT:$T159857
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159857 DD	0ffffffffH
	DD	FLAT:$L159844
	DD	00H
	DD	FLAT:$L159845
	DD	01H
	DD	FLAT:$L159846
	DD	00H
	DD	FLAT:$L159846
	DD	03H
	DD	FLAT:$L159847
	DD	03H
	DD	FLAT:$L159849
	DD	03H
	DD	FLAT:$L159851
xdata$x	ENDS
_TEXT	SEGMENT
$T159823 = -20
$T159824 = -24
$T159825 = -28
$T159826 = -32
$T159827 = -36
$T159830 = -40
$T159831 = -44
$T159832 = -48
$T159833 = -52
$T159836 = -56
$T159837 = -60
$T159838 = -64
$T159839 = -68
$T159842 = -72
$T159843 = -76
__$EHRec$ = -12
_obj$ = 8
_this$ = -80
_id$ = -16
?MakeSkinCtrl@CCharSelectWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z PROC NEAR ; CCharSelectWnd::MakeSkinCtrl

; 273  : {

  00fef	55		 push	 ebp
  00ff0	8b ec		 mov	 ebp, esp
  00ff2	6a ff		 push	 -1
  00ff4	68 00 00 00 00	 push	 $L159856
  00ff9	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00fff	50		 push	 eax
  01000	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01007	83 ec 78	 sub	 esp, 120		; 00000078H
  0100a	89 4d b0	 mov	 DWORD PTR _this$[ebp], ecx
  0100d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 274  : 	// the type of the control is specified by the 3 left characters of the name
; 275  : 	CString id = obj.GetName().Left ( 3 );

  01014	6a 03		 push	 3
  01016	8d 45 f0	 lea	 eax, DWORD PTR _id$[ebp]
  01019	50		 push	 eax
  0101a	8d 4d ec	 lea	 ecx, DWORD PTR $T159823[ebp]
  0101d	51		 push	 ecx
  0101e	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01021	e8 00 00 00 00	 call	 ?GetName@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetName
  01026	89 45 ac	 mov	 DWORD PTR -84+[ebp], eax
  01029	8b 55 ac	 mov	 edx, DWORD PTR -84+[ebp]
  0102c	89 55 a8	 mov	 DWORD PTR -88+[ebp], edx
  0102f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01033	8b 4d a8	 mov	 ecx, DWORD PTR -88+[ebp]
  01036	e8 00 00 00 00	 call	 ?Left@CString@@QBE?AV1@H@Z ; CString::Left
  0103b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0103f	8d 4d ec	 lea	 ecx, DWORD PTR $T159823[ebp]
  01042	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 276  : 
; 277  : 	// handle play button
; 278  : 	if ( id == "ab_" ) {

  01047	68 00 00 00 00	 push	 OFFSET FLAT:$SG152813
  0104c	8d 45 f0	 lea	 eax, DWORD PTR _id$[ebp]
  0104f	50		 push	 eax
  01050	e8 00 00 00 00	 call	 ??8@YG_NABVCString@@PBD@Z ; operator==
  01055	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0105a	85 c0		 test	 eax, eax
  0105c	74 7c		 je	 SHORT $L152812

; 279  : 		return new CCharSelPlayBtn ( obj, this );

  0105e	6a 18		 push	 24			; 00000018H
  01060	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01065	83 c4 04	 add	 esp, 4
  01068	89 45 e0	 mov	 DWORD PTR $T159826[ebp], eax
  0106b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0106f	83 7d e0 00	 cmp	 DWORD PTR $T159826[ebp], 0
  01073	74 2b		 je	 SHORT $L159828
  01075	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  01078	51		 push	 ecx
  01079	83 ec 08	 sub	 esp, 8
  0107c	8b cc		 mov	 ecx, esp
  0107e	89 65 dc	 mov	 DWORD PTR $T159827[ebp], esp
  01081	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  01084	52		 push	 edx
  01085	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0108a	89 45 a4	 mov	 DWORD PTR -92+[ebp], eax
  0108d	8b 4d e0	 mov	 ecx, DWORD PTR $T159826[ebp]
  01090	e8 00 00 00 00	 call	 ??0CCharSelPlayBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CCharSelPlayBtn::CCharSelPlayBtn
  01095	89 45 a0	 mov	 DWORD PTR -96+[ebp], eax
  01098	8b 45 a0	 mov	 eax, DWORD PTR -96+[ebp]
  0109b	89 45 9c	 mov	 DWORD PTR -100+[ebp], eax
  0109e	eb 07		 jmp	 SHORT $L159829
$L159828:
  010a0	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR -100+[ebp], 0
$L159829:
  010a7	8b 4d 9c	 mov	 ecx, DWORD PTR -100+[ebp]
  010aa	89 4d e4	 mov	 DWORD PTR $T159825[ebp], ecx
  010ad	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  010b1	8b 55 e4	 mov	 edx, DWORD PTR $T159825[ebp]
  010b4	89 55 e8	 mov	 DWORD PTR $T159824[ebp], edx
  010b7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  010bb	8d 4d f0	 lea	 ecx, DWORD PTR _id$[ebp]
  010be	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  010c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  010ca	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  010cd	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  010d2	8b 45 e8	 mov	 eax, DWORD PTR $T159824[ebp]
  010d5	e9 6c 01 00 00	 jmp	 $L152808
$L152812:

; 281  : 
; 282  : 	// handle play button
; 283  : 	if ( id == "cb_" ) {

  010da	68 00 00 00 00	 push	 OFFSET FLAT:$SG152821
  010df	8d 45 f0	 lea	 eax, DWORD PTR _id$[ebp]
  010e2	50		 push	 eax
  010e3	e8 00 00 00 00	 call	 ??8@YG_NABVCString@@PBD@Z ; operator==
  010e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  010ed	85 c0		 test	 eax, eax
  010ef	74 7c		 je	 SHORT $L152820

; 284  : 		return new CCharSelCreateBtn ( obj, this );

  010f1	6a 14		 push	 20			; 00000014H
  010f3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  010f8	83 c4 04	 add	 esp, 4
  010fb	89 45 d0	 mov	 DWORD PTR $T159832[ebp], eax
  010fe	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  01102	83 7d d0 00	 cmp	 DWORD PTR $T159832[ebp], 0
  01106	74 2b		 je	 SHORT $L159834
  01108	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  0110b	51		 push	 ecx
  0110c	83 ec 08	 sub	 esp, 8
  0110f	8b cc		 mov	 ecx, esp
  01111	89 65 cc	 mov	 DWORD PTR $T159833[ebp], esp
  01114	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  01117	52		 push	 edx
  01118	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0111d	89 45 98	 mov	 DWORD PTR -104+[ebp], eax
  01120	8b 4d d0	 mov	 ecx, DWORD PTR $T159832[ebp]
  01123	e8 00 00 00 00	 call	 ??0CCharSelCreateBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CCharSelCreateBtn::CCharSelCreateBtn
  01128	89 45 94	 mov	 DWORD PTR -108+[ebp], eax
  0112b	8b 45 94	 mov	 eax, DWORD PTR -108+[ebp]
  0112e	89 45 90	 mov	 DWORD PTR -112+[ebp], eax
  01131	eb 07		 jmp	 SHORT $L159835
$L159834:
  01133	c7 45 90 00 00
	00 00		 mov	 DWORD PTR -112+[ebp], 0
$L159835:
  0113a	8b 4d 90	 mov	 ecx, DWORD PTR -112+[ebp]
  0113d	89 4d d4	 mov	 DWORD PTR $T159831[ebp], ecx
  01140	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  01144	8b 55 d4	 mov	 edx, DWORD PTR $T159831[ebp]
  01147	89 55 d8	 mov	 DWORD PTR $T159830[ebp], edx
  0114a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0114e	8d 4d f0	 lea	 ecx, DWORD PTR _id$[ebp]
  01151	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01156	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0115d	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01160	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01165	8b 45 d8	 mov	 eax, DWORD PTR $T159830[ebp]
  01168	e9 d9 00 00 00	 jmp	 $L152808
$L152820:

; 286  : 
; 287  : 	// handle character hot spot
; 288  : 	else if ( id == "hs_" ) {

  0116d	68 00 00 00 00	 push	 OFFSET FLAT:$SG152830
  01172	8d 45 f0	 lea	 eax, DWORD PTR _id$[ebp]
  01175	50		 push	 eax
  01176	e8 00 00 00 00	 call	 ??8@YG_NABVCString@@PBD@Z ; operator==
  0117b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01180	85 c0		 test	 eax, eax
  01182	74 79		 je	 SHORT $L152829

; 289  : 		return new CCharSelHotSpot ( obj, this );

  01184	6a 18		 push	 24			; 00000018H
  01186	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0118b	83 c4 04	 add	 esp, 4
  0118e	89 45 c0	 mov	 DWORD PTR $T159838[ebp], eax
  01191	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  01195	83 7d c0 00	 cmp	 DWORD PTR $T159838[ebp], 0
  01199	74 2b		 je	 SHORT $L159840
  0119b	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  0119e	51		 push	 ecx
  0119f	83 ec 08	 sub	 esp, 8
  011a2	8b cc		 mov	 ecx, esp
  011a4	89 65 bc	 mov	 DWORD PTR $T159839[ebp], esp
  011a7	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  011aa	52		 push	 edx
  011ab	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  011b0	89 45 8c	 mov	 DWORD PTR -116+[ebp], eax
  011b3	8b 4d c0	 mov	 ecx, DWORD PTR $T159838[ebp]
  011b6	e8 00 00 00 00	 call	 ??0CCharSelHotSpot@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CCharSelHotSpot::CCharSelHotSpot
  011bb	89 45 88	 mov	 DWORD PTR -120+[ebp], eax
  011be	8b 45 88	 mov	 eax, DWORD PTR -120+[ebp]
  011c1	89 45 84	 mov	 DWORD PTR -124+[ebp], eax
  011c4	eb 07		 jmp	 SHORT $L159841
$L159840:
  011c6	c7 45 84 00 00
	00 00		 mov	 DWORD PTR -124+[ebp], 0
$L159841:
  011cd	8b 4d 84	 mov	 ecx, DWORD PTR -124+[ebp]
  011d0	89 4d c4	 mov	 DWORD PTR $T159837[ebp], ecx
  011d3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  011d7	8b 55 c4	 mov	 edx, DWORD PTR $T159837[ebp]
  011da	89 55 c8	 mov	 DWORD PTR $T159836[ebp], edx
  011dd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  011e1	8d 4d f0	 lea	 ecx, DWORD PTR _id$[ebp]
  011e4	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  011e9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  011f0	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  011f3	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  011f8	8b 45 c8	 mov	 eax, DWORD PTR $T159836[ebp]
  011fb	eb 49		 jmp	 SHORT $L152808
$L152829:

; 294  : 		return CSkinWnd::MakeSkinCtrl ( obj );

  011fd	83 ec 08	 sub	 esp, 8
  01200	8b cc		 mov	 ecx, esp
  01202	89 65 b4	 mov	 DWORD PTR $T159843[ebp], esp
  01205	8d 45 08	 lea	 eax, DWORD PTR _obj$[ebp]
  01208	50		 push	 eax
  01209	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0120e	89 45 80	 mov	 DWORD PTR -128+[ebp], eax
  01211	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  01214	e8 00 00 00 00	 call	 ?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CSkinWnd::MakeSkinCtrl
  01219	89 85 7c ff ff
	ff		 mov	 DWORD PTR -132+[ebp], eax
  0121f	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR -132+[ebp]
  01225	89 4d b8	 mov	 DWORD PTR $T159842[ebp], ecx
  01228	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0122c	8d 4d f0	 lea	 ecx, DWORD PTR _id$[ebp]
  0122f	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01234	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0123b	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  0123e	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01243	8b 45 b8	 mov	 eax, DWORD PTR $T159842[ebp]
$L152808:

; 296  : }

  01246	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01249	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01250	8b e5		 mov	 esp, ebp
  01252	5d		 pop	 ebp
  01253	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L159844:
  002c6	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  002c9	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  002ce	c3		 ret	 0
$L159845:
  002cf	8d 4d ec	 lea	 ecx, DWORD PTR $T159823[ebp]
  002d2	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  002d7	c3		 ret	 0
$L159846:
  002d8	8d 4d f0	 lea	 ecx, DWORD PTR _id$[ebp]
  002db	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  002e0	c3		 ret	 0
$L159847:
  002e1	8b 45 e0	 mov	 eax, DWORD PTR $T159826[ebp]
  002e4	50		 push	 eax
  002e5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002ea	59		 pop	 ecx
  002eb	c3		 ret	 0
$L159849:
  002ec	8b 45 d0	 mov	 eax, DWORD PTR $T159832[ebp]
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002f5	59		 pop	 ecx
  002f6	c3		 ret	 0
$L159851:
  002f7	8b 45 c0	 mov	 eax, DWORD PTR $T159838[ebp]
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00300	59		 pop	 ecx
  00301	c3		 ret	 0
$L159856:
  00302	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159855
  00307	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeSkinCtrl@CCharSelectWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ENDP ; CCharSelectWnd::MakeSkinCtrl
PUBLIC	?MoveHighlight@CCharSelectWnd@@QAEHHPAVCSkinCtrl@@@Z ; CCharSelectWnd::MoveHighlight
PUBLIC	?GetCharacter@CCharSelectWnd@@QAE?AVCSCI_WorldActor@@H@Z ; CCharSelectWnd::GetCharacter
PUBLIC	??0CSCI_WorldObject@@QAE@ABV0@@Z		; CSCI_WorldObject::CSCI_WorldObject
PUBLIC	??A?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEAAPAVCSkinBitmap@@I@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::operator[]
EXTRN	?MoveTo@CSkinObj@@QAEHHH@Z:NEAR			; CSkinObj::MoveTo
xdata$x	SEGMENT
$T159867 DD	019930520H
	DD	03H
	DD	FLAT:$T159869
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159869 DD	0ffffffffH
	DD	FLAT:$L159862
	DD	0ffffffffH
	DD	FLAT:$L159863
	DD	01H
	DD	FLAT:$L159865
xdata$x	ENDS
_TEXT	SEGMENT
$T159859 = -56
$T159860 = -60
$T159861 = -64
__$EHRec$ = -12
_nID$ = 8
_pOwner$ = 12
_this$ = -68
_footPoint$152850 = -24
_hotSpot$152851 = -20
_pChar$152852 = -28
_posnObj$152858 = -36
_footPoint$152860 = -48
_hotSpot$152861 = -44
_pChar$152862 = -52
?MoveHighlight@CCharSelectWnd@@QAEHHPAVCSkinCtrl@@@Z PROC NEAR ; CCharSelectWnd::MoveHighlight

; 300  : {

  01256	55		 push	 ebp
  01257	8b ec		 mov	 ebp, esp
  01259	6a ff		 push	 -1
  0125b	68 00 00 00 00	 push	 $L159868
  01260	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01266	50		 push	 eax
  01267	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0126e	83 ec 3c	 sub	 esp, 60			; 0000003cH
  01271	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 301  : 	if ( TRUE == m_bHighlightLocked ) {

  01274	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  01277	83 b8 54 01 00
	00 01		 cmp	 DWORD PTR [eax+340], 1
  0127e	75 07		 jne	 SHORT $L152845

; 302  : 		return FALSE;

  01280	33 c0		 xor	 eax, eax
  01282	e9 6e 02 00 00	 jmp	 $L152844
$L152845:

; 304  : 
; 305  : 	// if there is no play button in the requested position, default to hide
; 306  : 	if ( m_nPlayBtnCount <= nID ) {

  01287	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0128a	8b 91 5c 01 00
	00		 mov	 edx, DWORD PTR [ecx+348]
  01290	3b 55 08	 cmp	 edx, DWORD PTR _nID$[ebp]
  01293	7f 07		 jg	 SHORT $L152846

; 307  : 		nID = -1;

  01295	c7 45 08 ff ff
	ff ff		 mov	 DWORD PTR _nID$[ebp], -1
$L152846:

; 311  : 
; 312  : 	// update the owner member
; 313  : 	m_pHighlightOwner = pOwner;

  0129c	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0129f	8b 4d 0c	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  012a2	89 88 60 01 00
	00		 mov	 DWORD PTR [eax+352], ecx

; 314  : 
; 315  : 	// see if the highlight position needs updating
; 316  : 	if ( m_nHighlightPosn != nID ) {

  012a8	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  012ab	8b 82 50 01 00
	00		 mov	 eax, DWORD PTR [edx+336]
  012b1	3b 45 08	 cmp	 eax, DWORD PTR _nID$[ebp]
  012b4	0f 84 36 02 00
	00		 je	 $L152857

; 317  : 		// update the bitmap on the current hotSpot (if any)
; 318  : 		if ( m_nHighlightPosn != -1 ) {

  012ba	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  012bd	83 b9 50 01 00
	00 ff		 cmp	 DWORD PTR [ecx+336], -1
  012c4	0f 84 d2 00 00
	00		 je	 $L152849

; 319  : 			CPoint *footPoint = m_vFootPoints[m_nHighlightPosn];

  012ca	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  012cd	8b 82 50 01 00
	00		 mov	 eax, DWORD PTR [edx+336]
  012d3	50		 push	 eax
  012d4	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  012d7	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  012dd	e8 00 00 00 00	 call	 ??A?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEAAPAVCPoint@@I@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::operator[]
  012e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  012e4	89 4d e8	 mov	 DWORD PTR _footPoint$152850[ebp], ecx

; 320  : 
; 321  : 			CSkinObj hotSpot = m_vHighlightPosns[m_nHighlightPosn];

  012e7	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  012ea	8b 82 50 01 00
	00		 mov	 eax, DWORD PTR [edx+336]
  012f0	50		 push	 eax
  012f1	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  012f4	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  012fa	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  012ff	50		 push	 eax
  01300	8d 4d ec	 lea	 ecx, DWORD PTR _hotSpot$152851[ebp]
  01303	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01308	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 322  : 			hotSpot.DrawBitmap ( m_vDarkBitmaps[m_nHighlightPosn], footPoint->x, footPoint->y );

  0130f	8b 4d e8	 mov	 ecx, DWORD PTR _footPoint$152850[ebp]
  01312	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01315	52		 push	 edx
  01316	8b 45 e8	 mov	 eax, DWORD PTR _footPoint$152850[ebp]
  01319	8b 08		 mov	 ecx, DWORD PTR [eax]
  0131b	51		 push	 ecx
  0131c	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0131f	8b 82 50 01 00
	00		 mov	 eax, DWORD PTR [edx+336]
  01325	50		 push	 eax
  01326	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01329	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  0132f	e8 00 00 00 00	 call	 ??A?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEAAPAVCSkinBitmap@@I@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::operator[]
  01334	8b 08		 mov	 ecx, DWORD PTR [eax]
  01336	51		 push	 ecx
  01337	8d 4d ec	 lea	 ecx, DWORD PTR _hotSpot$152851[ebp]
  0133a	e8 00 00 00 00	 call	 ?DrawBitmap@CSkinObj@@QAEHPAVCSkinBitmap@@HH@Z ; CSkinObj::DrawBitmap

; 323  : 
; 324  : 			CSCI_WorldObject pChar = GetCharacter( m_nHighlightPosn );

  0133f	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  01342	8b 82 50 01 00
	00		 mov	 eax, DWORD PTR [edx+336]
  01348	50		 push	 eax
  01349	8d 4d c8	 lea	 ecx, DWORD PTR $T159859[ebp]
  0134c	51		 push	 ecx
  0134d	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01350	e8 00 00 00 00	 call	 ?GetCharacter@CCharSelectWnd@@QAE?AVCSCI_WorldActor@@H@Z ; CCharSelectWnd::GetCharacter
  01355	50		 push	 eax
  01356	8d 4d e4	 lea	 ecx, DWORD PTR _pChar$152852[ebp]
  01359	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 325  : 
; 326  : 			if ( pChar.getAffectedState( CSCI_WorldActor::_AFF_INVISIBILITY ) || pChar.getAffectedState(CSCI_WorldActor:: _AFF_IMPROVED_INVISIBILITY ) )

  0135e	6a 12		 push	 18			; 00000012H
  01360	8d 4d e4	 lea	 ecx, DWORD PTR _pChar$152852[ebp]
  01363	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_WorldObject@@QAEFF@Z ; CSCI_WorldObject::getAffectedState
  01368	0f bf d0	 movsx	 edx, ax
  0136b	85 d2		 test	 edx, edx
  0136d	75 11		 jne	 SHORT $L152855
  0136f	6a 15		 push	 21			; 00000015H
  01371	8d 4d e4	 lea	 ecx, DWORD PTR _pChar$152852[ebp]
  01374	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_WorldObject@@QAEFF@Z ; CSCI_WorldObject::getAffectedState
  01379	0f bf c0	 movsx	 eax, ax
  0137c	85 c0		 test	 eax, eax
  0137e	74 0d		 je	 SHORT $L152854
$L152855:

; 327  : 				hotSpot.SetTransparency( 192 );

  01380	68 c0 00 00 00	 push	 192			; 000000c0H
  01385	8d 4d ec	 lea	 ecx, DWORD PTR _hotSpot$152851[ebp]
  01388	e8 00 00 00 00	 call	 ?SetTransparency@CSkinObj@@QAEHH@Z ; CSkinObj::SetTransparency
$L152854:

; 328  : 		}

  0138d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01394	8d 4d ec	 lea	 ecx, DWORD PTR _hotSpot$152851[ebp]
  01397	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
$L152849:

; 329  : 
; 330  : 		// update the current position
; 331  : 		m_nHighlightPosn = nID;

  0139c	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0139f	8b 55 08	 mov	 edx, DWORD PTR _nID$[ebp]
  013a2	89 91 50 01 00
	00		 mov	 DWORD PTR [ecx+336], edx

; 332  : 		
; 333  : 		// handle hiding the highlight
; 334  : 		if ( -1 == m_nHighlightPosn ) {

  013a8	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  013ab	83 b8 50 01 00
	00 ff		 cmp	 DWORD PTR [eax+336], -1
  013b2	75 1d		 jne	 SHORT $L152856

; 335  : 			m_HighlightObj.MoveTo ( 800, 800 );

  013b4	68 20 03 00 00	 push	 800			; 00000320H
  013b9	68 20 03 00 00	 push	 800			; 00000320H
  013be	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  013c1	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  013c7	e8 00 00 00 00	 call	 ?MoveTo@CSkinObj@@QAEHHH@Z ; CSkinObj::MoveTo

; 336  : 		} else {

  013cc	e9 1f 01 00 00	 jmp	 $L152857
$L152856:

; 337  : 			// get the object that represents the new position and update the placement of the highlight
; 338  : 			CSkinObj posnObj = m_vHighlightPosns[m_nHighlightPosn];

  013d1	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  013d4	8b 91 50 01 00
	00		 mov	 edx, DWORD PTR [ecx+336]
  013da	52		 push	 edx
  013db	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  013de	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  013e4	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  013e9	50		 push	 eax
  013ea	8d 4d dc	 lea	 ecx, DWORD PTR _posnObj$152858[ebp]
  013ed	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  013f2	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 339  : 			m_HighlightObj.MoveTo ( posnObj );

  013f9	83 ec 08	 sub	 esp, 8
  013fc	8b cc		 mov	 ecx, esp
  013fe	89 65 c4	 mov	 DWORD PTR $T159860[ebp], esp
  01401	8d 45 dc	 lea	 eax, DWORD PTR _posnObj$152858[ebp]
  01404	50		 push	 eax
  01405	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0140a	89 45 b8	 mov	 DWORD PTR -72+[ebp], eax
  0140d	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01410	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  01416	e8 00 00 00 00	 call	 ?MoveTo@CSkinObj@@QAEHV1@@Z ; CSkinObj::MoveTo

; 340  : 
; 341  : 			// update the hot spot bitmap
; 342  : 			CPoint *footPoint = m_vFootPoints[m_nHighlightPosn];

  0141b	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0141e	8b 91 50 01 00
	00		 mov	 edx, DWORD PTR [ecx+336]
  01424	52		 push	 edx
  01425	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01428	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0142e	e8 00 00 00 00	 call	 ??A?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEAAPAVCPoint@@I@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::operator[]
  01433	8b 00		 mov	 eax, DWORD PTR [eax]
  01435	89 45 d0	 mov	 DWORD PTR _footPoint$152860[ebp], eax

; 343  : 
; 344  : 			CSkinObj hotSpot = m_vHighlightPosns[m_nHighlightPosn];

  01438	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0143b	8b 91 50 01 00
	00		 mov	 edx, DWORD PTR [ecx+336]
  01441	52		 push	 edx
  01442	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01445	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0144b	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  01450	50		 push	 eax
  01451	8d 4d d4	 lea	 ecx, DWORD PTR _hotSpot$152861[ebp]
  01454	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01459	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 345  : 			hotSpot.DrawBitmap ( m_vLightBitmaps[m_nHighlightPosn], footPoint->x, footPoint->y );

  0145d	8b 45 d0	 mov	 eax, DWORD PTR _footPoint$152860[ebp]
  01460	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01463	51		 push	 ecx
  01464	8b 55 d0	 mov	 edx, DWORD PTR _footPoint$152860[ebp]
  01467	8b 02		 mov	 eax, DWORD PTR [edx]
  01469	50		 push	 eax
  0146a	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0146d	8b 91 50 01 00
	00		 mov	 edx, DWORD PTR [ecx+336]
  01473	52		 push	 edx
  01474	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01477	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  0147d	e8 00 00 00 00	 call	 ??A?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEAAPAVCSkinBitmap@@I@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::operator[]
  01482	8b 00		 mov	 eax, DWORD PTR [eax]
  01484	50		 push	 eax
  01485	8d 4d d4	 lea	 ecx, DWORD PTR _hotSpot$152861[ebp]
  01488	e8 00 00 00 00	 call	 ?DrawBitmap@CSkinObj@@QAEHPAVCSkinBitmap@@HH@Z ; CSkinObj::DrawBitmap

; 346  : 
; 347  : 			CSCI_WorldObject pChar = GetCharacter( nID );

  0148d	8b 4d 08	 mov	 ecx, DWORD PTR _nID$[ebp]
  01490	51		 push	 ecx
  01491	8d 55 c0	 lea	 edx, DWORD PTR $T159861[ebp]
  01494	52		 push	 edx
  01495	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  01498	e8 00 00 00 00	 call	 ?GetCharacter@CCharSelectWnd@@QAE?AVCSCI_WorldActor@@H@Z ; CCharSelectWnd::GetCharacter
  0149d	50		 push	 eax
  0149e	8d 4d cc	 lea	 ecx, DWORD PTR _pChar$152862[ebp]
  014a1	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject

; 348  : 
; 349  : 			if ( pChar.getAffectedState( CSCI_WorldActor::_AFF_INVISIBILITY ) || pChar.getAffectedState( CSCI_WorldActor::_AFF_IMPROVED_INVISIBILITY ) )

  014a6	6a 12		 push	 18			; 00000012H
  014a8	8d 4d cc	 lea	 ecx, DWORD PTR _pChar$152862[ebp]
  014ab	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_WorldObject@@QAEFF@Z ; CSCI_WorldObject::getAffectedState
  014b0	0f bf c0	 movsx	 eax, ax
  014b3	85 c0		 test	 eax, eax
  014b5	75 11		 jne	 SHORT $L152865
  014b7	6a 15		 push	 21			; 00000015H
  014b9	8d 4d cc	 lea	 ecx, DWORD PTR _pChar$152862[ebp]
  014bc	e8 00 00 00 00	 call	 ?getAffectedState@CSCI_WorldObject@@QAEFF@Z ; CSCI_WorldObject::getAffectedState
  014c1	0f bf c8	 movsx	 ecx, ax
  014c4	85 c9		 test	 ecx, ecx
  014c6	74 0d		 je	 SHORT $L152864
$L152865:

; 350  : 				hotSpot.SetTransparency( 192 );

  014c8	68 c0 00 00 00	 push	 192			; 000000c0H
  014cd	8d 4d d4	 lea	 ecx, DWORD PTR _hotSpot$152861[ebp]
  014d0	e8 00 00 00 00	 call	 ?SetTransparency@CSkinObj@@QAEHH@Z ; CSkinObj::SetTransparency
$L152864:

; 351  : 		}

  014d5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  014d9	8d 4d d4	 lea	 ecx, DWORD PTR _hotSpot$152861[ebp]
  014dc	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  014e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  014e8	8d 4d dc	 lea	 ecx, DWORD PTR _posnObj$152858[ebp]
  014eb	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
$L152857:

; 353  : 
; 354  : 	return TRUE;

  014f0	b8 01 00 00 00	 mov	 eax, 1
$L152844:

; 355  : }

  014f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  014f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  014ff	8b e5		 mov	 esp, ebp
  01501	5d		 pop	 ebp
  01502	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L159862:
  0030c	8d 4d ec	 lea	 ecx, DWORD PTR _hotSpot$152851[ebp]
  0030f	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00314	c3		 ret	 0
$L159863:
  00315	8d 4d dc	 lea	 ecx, DWORD PTR _posnObj$152858[ebp]
  00318	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0031d	c3		 ret	 0
$L159865:
  0031e	8d 4d d4	 lea	 ecx, DWORD PTR _hotSpot$152861[ebp]
  00321	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00326	c3		 ret	 0
$L159868:
  00327	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159867
  0032c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MoveHighlight@CCharSelectWnd@@QAEHHPAVCSkinCtrl@@@Z ENDP ; CCharSelectWnd::MoveHighlight
PUBLIC	??0CSCI_Actor@@QAE@ABV0@@Z			; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_WorldObject@@QAE@ABV0@@Z PROC NEAR		; CSCI_WorldObject::CSCI_WorldObject, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@ABV0@@Z ; CSCI_Actor::CSCI_Actor
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_WorldObject@@QAE@ABV0@@Z ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@ABV0@@Z			; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Actor@@QAE@ABV0@@Z PROC NEAR			; CSCI_Actor::CSCI_Actor, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@ABV0@@Z ; CSCI_Prop::CSCI_Prop
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Actor@@QAE@ABV0@@Z ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@ABV0@@Z			; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Prop@@QAE@ABV0@@Z PROC NEAR			; CSCI_Prop::CSCI_Prop, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@ABV0@@Z ; CSCI_View::CSCI_View
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Prop@@QAE@ABV0@@Z ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@ABV0@@Z			; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_View@@QAE@ABV0@@Z PROC NEAR			; CSCI_View::CSCI_View, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@ABV0@@Z ; CSCI_Feature::CSCI_Feature
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_View@@QAE@ABV0@@Z ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@ABV0@@Z			; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Feature@@QAE@ABV0@@Z PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@ABV0@@Z ; CSCI_BitMap::CSCI_BitMap
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Feature@@QAE@ABV0@@Z ENDP			; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@ABV0@@Z			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_BitMap@@QAE@ABV0@@Z PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@ABV0@@Z ; CSCI_Rectangle::CSCI_Rectangle
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_BitMap@@QAE@ABV0@@Z ENDP			; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@ABV0@@Z			; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_Rectangle@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Rectangle@@QAE@ABV0@@Z PROC NEAR		; CSCI_Rectangle::CSCI_Rectangle, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@ABV0@@Z ; CSCI_Object::CSCI_Object
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Rectangle@@QAE@ABV0@@Z ENDP			; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
PUBLIC	?GetHighlightPosn@CCharSelectWnd@@QAEHXZ	; CCharSelectWnd::GetHighlightPosn
_TEXT	SEGMENT
_this$ = -4
?GetHighlightPosn@CCharSelectWnd@@QAEHXZ PROC NEAR	; CCharSelectWnd::GetHighlightPosn

; 359  : {

  01505	55		 push	 ebp
  01506	8b ec		 mov	 ebp, esp
  01508	51		 push	 ecx
  01509	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 360  : 	return m_nHighlightPosn;

  0150c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0150f	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [eax+336]

; 361  : }

  01515	8b e5		 mov	 esp, ebp
  01517	5d		 pop	 ebp
  01518	c3		 ret	 0
?GetHighlightPosn@CCharSelectWnd@@QAEHXZ ENDP		; CCharSelectWnd::GetHighlightPosn
_TEXT	ENDS
PUBLIC	?GetHighlightOwner@CCharSelectWnd@@QAEPAVCSkinCtrl@@XZ ; CCharSelectWnd::GetHighlightOwner
_TEXT	SEGMENT
_this$ = -4
?GetHighlightOwner@CCharSelectWnd@@QAEPAVCSkinCtrl@@XZ PROC NEAR ; CCharSelectWnd::GetHighlightOwner

; 365  : {

  01519	55		 push	 ebp
  0151a	8b ec		 mov	 ebp, esp
  0151c	51		 push	 ecx
  0151d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 366  : 	return m_pHighlightOwner;

  01520	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01523	8b 80 60 01 00
	00		 mov	 eax, DWORD PTR [eax+352]

; 367  : }

  01529	8b e5		 mov	 esp, ebp
  0152b	5d		 pop	 ebp
  0152c	c3		 ret	 0
?GetHighlightOwner@CCharSelectWnd@@QAEPAVCSkinCtrl@@XZ ENDP ; CCharSelectWnd::GetHighlightOwner
_TEXT	ENDS
PUBLIC	?LockHighlight@CCharSelectWnd@@QAEHXZ		; CCharSelectWnd::LockHighlight
_TEXT	SEGMENT
_this$ = -4
?LockHighlight@CCharSelectWnd@@QAEHXZ PROC NEAR		; CCharSelectWnd::LockHighlight

; 371  : {

  0152d	55		 push	 ebp
  0152e	8b ec		 mov	 ebp, esp
  01530	51		 push	 ecx
  01531	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 372  : 	m_bHighlightLocked = TRUE;

  01534	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01537	c7 80 54 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+340], 1

; 373  : 	return TRUE;

  01541	b8 01 00 00 00	 mov	 eax, 1

; 374  : }

  01546	8b e5		 mov	 esp, ebp
  01548	5d		 pop	 ebp
  01549	c3		 ret	 0
?LockHighlight@CCharSelectWnd@@QAEHXZ ENDP		; CCharSelectWnd::LockHighlight
_TEXT	ENDS
PUBLIC	?UnlockHighlight@CCharSelectWnd@@QAEHXZ		; CCharSelectWnd::UnlockHighlight
_TEXT	SEGMENT
_this$ = -4
?UnlockHighlight@CCharSelectWnd@@QAEHXZ PROC NEAR	; CCharSelectWnd::UnlockHighlight

; 378  : {

  0154a	55		 push	 ebp
  0154b	8b ec		 mov	 ebp, esp
  0154d	51		 push	 ecx
  0154e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 379  : 	m_bHighlightLocked = FALSE;

  01551	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01554	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+340], 0

; 380  : 	return TRUE;

  0155e	b8 01 00 00 00	 mov	 eax, 1

; 381  : }

  01563	8b e5		 mov	 esp, ebp
  01565	5d		 pop	 ebp
  01566	c3		 ret	 0
?UnlockHighlight@CCharSelectWnd@@QAEHXZ ENDP		; CCharSelectWnd::UnlockHighlight
_TEXT	ENDS
PUBLIC	?GetCharacterName@CCharSelectWnd@@QAE?AVCString@@H@Z ; CCharSelectWnd::GetCharacterName
EXTRN	?GetText@CSkinObj@@QAE?AVCString@@XZ:NEAR	; CSkinObj::GetText
_TEXT	SEGMENT
$T159883 = -4
_nID$ = 12
___$ReturnUdt$ = 8
_this$ = -8
?GetCharacterName@CCharSelectWnd@@QAE?AVCString@@H@Z PROC NEAR ; CCharSelectWnd::GetCharacterName

; 385  : {

  01567	55		 push	 ebp
  01568	8b ec		 mov	 ebp, esp
  0156a	83 ec 08	 sub	 esp, 8
  0156d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  01570	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T159883[ebp], 0

; 386  : 	return m_vNamePlates[nID].GetText();

  01577	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0157a	50		 push	 eax
  0157b	8b 4d 0c	 mov	 ecx, DWORD PTR _nID$[ebp]
  0157e	51		 push	 ecx
  0157f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01582	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  01588	e8 00 00 00 00	 call	 ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
  0158d	8b c8		 mov	 ecx, eax
  0158f	e8 00 00 00 00	 call	 ?GetText@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetText
  01594	8b 55 fc	 mov	 edx, DWORD PTR $T159883[ebp]
  01597	83 ca 01	 or	 edx, 1
  0159a	89 55 fc	 mov	 DWORD PTR $T159883[ebp], edx
  0159d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 387  : }

  015a0	8b e5		 mov	 esp, ebp
  015a2	5d		 pop	 ebp
  015a3	c2 08 00	 ret	 8
?GetCharacterName@CCharSelectWnd@@QAE?AVCString@@H@Z ENDP ; CCharSelectWnd::GetCharacterName
_TEXT	ENDS
PUBLIC	??A?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEAAVCSCI_WorldActor@@I@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::operator[]
PUBLIC	??0CSCI_WorldActor@@QAE@ABV0@@Z			; CSCI_WorldActor::CSCI_WorldActor
_TEXT	SEGMENT
_nID$ = 12
___$ReturnUdt$ = 8
_this$ = -4
?GetCharacter@CCharSelectWnd@@QAE?AVCSCI_WorldActor@@H@Z PROC NEAR ; CCharSelectWnd::GetCharacter

; 391  : {

  015a6	55		 push	 ebp
  015a7	8b ec		 mov	 ebp, esp
  015a9	51		 push	 ecx
  015aa	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 392  : 	return m_vCharObjects[nID];

  015ad	8b 45 0c	 mov	 eax, DWORD PTR _nID$[ebp]
  015b0	50		 push	 eax
  015b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015b4	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  015ba	e8 00 00 00 00	 call	 ??A?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEAAVCSCI_WorldActor@@I@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::operator[]
  015bf	50		 push	 eax
  015c0	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  015c3	e8 00 00 00 00	 call	 ??0CSCI_WorldActor@@QAE@ABV0@@Z ; CSCI_WorldActor::CSCI_WorldActor
  015c8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 393  : }

  015cb	8b e5		 mov	 esp, ebp
  015cd	5d		 pop	 ebp
  015ce	c2 08 00	 ret	 8
?GetCharacter@CCharSelectWnd@@QAE?AVCSCI_WorldActor@@H@Z ENDP ; CCharSelectWnd::GetCharacter
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_WorldActor@@QAE@ABV0@@Z PROC NEAR		; CSCI_WorldActor::CSCI_WorldActor, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_WorldActor@@QAE@ABV0@@Z ENDP			; CSCI_WorldActor::CSCI_WorldActor
_TEXT	ENDS
PUBLIC	??BMemID@@QBEGXZ				; MemID::operator unsigned short
PUBLIC	?EnterGame@CCharSelectWnd@@QAEXVCSCI_WorldObject@@@Z ; CCharSelectWnd::EnterGame
PUBLIC	?SetEventProcessing@CSkinWnd@@QAEX_N@Z		; CSkinWnd::SetEventProcessing
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:NEAR
EXTRN	?eventMgr@@3PAUEventMgr@@A:DWORD		; eventMgr
EXTRN	??0CFriendMgr@@QAE@XZ:NEAR			; CFriendMgr::CFriendMgr
EXTRN	?LoadFriends@CFriendMgr@@QAEXXZ:NEAR		; CFriendMgr::LoadFriends
EXTRN	?g_pFriendMgr@@3PAVCFriendMgr@@A:DWORD		; g_pFriendMgr
EXTRN	??0CEnemyMgr@@QAE@XZ:NEAR			; CEnemyMgr::CEnemyMgr
EXTRN	?g_pEnemyMgr@@3PAVCEnemyMgr@@A:DWORD		; g_pEnemyMgr
xdata$x	SEGMENT
$T159901 DD	019930520H
	DD	02H
	DD	FLAT:$T159903
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159903 DD	0ffffffffH
	DD	FLAT:$L159898
	DD	0ffffffffH
	DD	FLAT:$L159899
xdata$x	ENDS
_TEXT	SEGMENT
$T159888 = -16
$T159889 = -20
$T159890 = -24
$T159891 = -28
$T159894 = -32
$T159895 = -36
__$EHRec$ = -12
_hObject$ = 8
_this$ = -40
?EnterGame@CCharSelectWnd@@QAEXVCSCI_WorldObject@@@Z PROC NEAR ; CCharSelectWnd::EnterGame

; 397  : {

  015d1	55		 push	 ebp
  015d2	8b ec		 mov	 ebp, esp
  015d4	6a ff		 push	 -1
  015d6	68 00 00 00 00	 push	 $L159902
  015db	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  015e1	50		 push	 eax
  015e2	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  015e9	83 ec 24	 sub	 esp, 36			; 00000024H
  015ec	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 398  : 	SetEventProcessing ( FALSE );

  015ef	6a 00		 push	 0
  015f1	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  015f4	e8 00 00 00 00	 call	 ?SetEventProcessing@CSkinWnd@@QAEX_N@Z ; CSkinWnd::SetEventProcessing

; 399  : 
; 400  : 	// set the global character name...
; 401  : 	g_sCharacterName = *((StringID) hObject.get_pName());

  015f9	8d 45 ec	 lea	 eax, DWORD PTR $T159889[ebp]
  015fc	50		 push	 eax
  015fd	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  01600	e8 00 00 00 00	 call	 ?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ ; CSCI_WorldObject::get_pName
  01605	50		 push	 eax
  01606	8d 4d f0	 lea	 ecx, DWORD PTR $T159888[ebp]
  01609	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABV0@@Z ; StringID::StringID
  0160e	8b c8		 mov	 ecx, eax
  01610	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  01615	50		 push	 eax
  01616	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_sCharacterName@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0161b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 402  : 
; 403  : 	// load the friend manager if there is not already one there...
; 404  : 	if ( NULL == g_pFriendMgr ) {

  01621	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pFriendMgr@@3PAVCFriendMgr@@A, 0 ; g_pFriendMgr
  01628	75 46		 jne	 SHORT $L152924

; 405  : 		new CFriendMgr;

  0162a	6a 14		 push	 20			; 00000014H
  0162c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01631	83 c4 04	 add	 esp, 4
  01634	89 45 e4	 mov	 DWORD PTR $T159891[ebp], eax
  01637	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0163e	83 7d e4 00	 cmp	 DWORD PTR $T159891[ebp], 0
  01642	74 0d		 je	 SHORT $L159892
  01644	8b 4d e4	 mov	 ecx, DWORD PTR $T159891[ebp]
  01647	e8 00 00 00 00	 call	 ??0CFriendMgr@@QAE@XZ	; CFriendMgr::CFriendMgr
  0164c	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  0164f	eb 07		 jmp	 SHORT $L159893
$L159892:
  01651	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR -44+[ebp], 0
$L159893:
  01658	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  0165b	89 4d e8	 mov	 DWORD PTR $T159890[ebp], ecx
  0165e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 406  : 		g_pFriendMgr->LoadFriends();

  01665	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pFriendMgr@@3PAVCFriendMgr@@A ; g_pFriendMgr
  0166b	e8 00 00 00 00	 call	 ?LoadFriends@CFriendMgr@@QAEXXZ ; CFriendMgr::LoadFriends
$L152924:

; 408  : 	
; 409  : 	// load the foe manager if there is not already one there...
; 410  : 	if ( NULL == g_pEnemyMgr ) {

  01670	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pEnemyMgr@@3PAVCEnemyMgr@@A, 0 ; g_pEnemyMgr
  01677	75 3b		 jne	 SHORT $L152929

; 411  : 		new CEnemyMgr;

  01679	6a 14		 push	 20			; 00000014H
  0167b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01680	83 c4 04	 add	 esp, 4
  01683	89 45 dc	 mov	 DWORD PTR $T159895[ebp], eax
  01686	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0168d	83 7d dc 00	 cmp	 DWORD PTR $T159895[ebp], 0
  01691	74 0d		 je	 SHORT $L159896
  01693	8b 4d dc	 mov	 ecx, DWORD PTR $T159895[ebp]
  01696	e8 00 00 00 00	 call	 ??0CEnemyMgr@@QAE@XZ	; CEnemyMgr::CEnemyMgr
  0169b	89 45 d0	 mov	 DWORD PTR -48+[ebp], eax
  0169e	eb 07		 jmp	 SHORT $L159897
$L159896:
  016a0	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR -48+[ebp], 0
$L159897:
  016a7	8b 55 d0	 mov	 edx, DWORD PTR -48+[ebp]
  016aa	89 55 e0	 mov	 DWORD PTR $T159894[ebp], edx
  016ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
$L152929:

; 413  : 	
; 414  : 	eventMgr->PostWinCommand ( _DEVT_CHARSEL_PLAY, hObject );

  016b4	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  016b7	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  016bc	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  016c1	50		 push	 eax
  016c2	6a 00		 push	 0
  016c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  016c9	8b 10		 mov	 edx, DWORD PTR [eax]
  016cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  016d1	ff 52 20	 call	 DWORD PTR [edx+32]

; 415  : }

  016d4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  016d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  016de	8b e5		 mov	 esp, ebp
  016e0	5d		 pop	 ebp
  016e1	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L159898:
  00331	8b 45 e4	 mov	 eax, DWORD PTR $T159891[ebp]
  00334	50		 push	 eax
  00335	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0033a	59		 pop	 ecx
  0033b	c3		 ret	 0
$L159899:
  0033c	8b 45 dc	 mov	 eax, DWORD PTR $T159895[ebp]
  0033f	50		 push	 eax
  00340	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00345	59		 pop	 ecx
  00346	c3		 ret	 0
$L159902:
  00347	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159901
  0034c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?EnterGame@CCharSelectWnd@@QAEXVCSCI_WorldObject@@@Z ENDP ; CCharSelectWnd::EnterGame
PUBLIC	??0CEraseDlg@@QAE@XZ				; CEraseDlg::CEraseDlg
PUBLIC	?Create@CEraseDlg@@QAEHVCSCI_WorldObject@@@Z	; CEraseDlg::Create
PUBLIC	??2CObject@@SGPAXI@Z				; CObject::operator new
xdata$x	SEGMENT
$T159914 DD	019930520H
	DD	01H
	DD	FLAT:$T159916
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159916 DD	0ffffffffH
	DD	FLAT:$L159912
xdata$x	ENDS
_TEXT	SEGMENT
$T159905 = -16
$T159906 = -20
$T159907 = -24
$T159910 = -28
__$EHRec$ = -12
_nVerbID$ = 8
_hObject$ = 12
_this$ = -32
?HandleVerb@CCharSelectWnd@@UAEHHVCSCI_WorldObject@@@Z PROC NEAR ; CCharSelectWnd::HandleVerb

; 419  : {

  016e4	55		 push	 ebp
  016e5	8b ec		 mov	 ebp, esp
  016e7	6a ff		 push	 -1
  016e9	68 00 00 00 00	 push	 $L159915
  016ee	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  016f4	50		 push	 eax
  016f5	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  016fc	83 ec 1c	 sub	 esp, 28			; 0000001cH
  016ff	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 420  : 	switch ( nVerbID ) {

  01702	8b 45 08	 mov	 eax, DWORD PTR _nVerbID$[ebp]
  01705	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  01708	81 7d dc 11 27
	00 00		 cmp	 DWORD PTR -36+[ebp], 10001 ; 00002711H
  0170f	7f 1d		 jg	 SHORT $L159911
  01711	81 7d dc 11 27
	00 00		 cmp	 DWORD PTR -36+[ebp], 10001 ; 00002711H
  01718	74 26		 je	 SHORT $L152943
  0171a	83 7d dc 03	 cmp	 DWORD PTR -36+[ebp], 3
  0171e	74 79		 je	 SHORT $L152946
  01720	81 7d dc 10 27
	00 00		 cmp	 DWORD PTR -36+[ebp], 10000 ; 00002710H
  01727	74 41		 je	 SHORT $L152944
  01729	e9 e0 00 00 00	 jmp	 $L152940
$L159911:
  0172e	81 7d dc 12 27
	00 00		 cmp	 DWORD PTR -36+[ebp], 10002 ; 00002712H
  01735	0f 84 81 00 00
	00		 je	 $L152947
  0173b	e9 ce 00 00 00	 jmp	 $L152940
$L152943:

; 422  : 			SetEventProcessing ( FALSE );

  01740	6a 00		 push	 0
  01742	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  01745	81 e9 94 00 00
	00		 sub	 ecx, 148		; 00000094H
  0174b	e8 00 00 00 00	 call	 ?SetEventProcessing@CSkinWnd@@QAEX_N@Z ; CSkinWnd::SetEventProcessing

; 423  : 			eventMgr->PostWinCommand ( _DEVT_CHARSEL_CREATE, 0 );

  01750	6a 00		 push	 0
  01752	6a 01		 push	 1
  01754	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  0175a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0175c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  01762	ff 52 20	 call	 DWORD PTR [edx+32]

; 425  : 
; 426  : 		break;

  01765	e9 a4 00 00 00	 jmp	 $L152940
$L152944:

; 429  : 			SetEventProcessing ( FALSE );

  0176a	6a 00		 push	 0
  0176c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0176f	81 e9 94 00 00
	00		 sub	 ecx, 148		; 00000094H
  01775	e8 00 00 00 00	 call	 ?SetEventProcessing@CSkinWnd@@QAEX_N@Z ; CSkinWnd::SetEventProcessing

; 430  : 			EnterGame ( hObject );

  0177a	51		 push	 ecx
  0177b	8b cc		 mov	 ecx, esp
  0177d	89 65 f0	 mov	 DWORD PTR $T159905[ebp], esp
  01780	8d 45 0c	 lea	 eax, DWORD PTR _hObject$[ebp]
  01783	50		 push	 eax
  01784	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  01789	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0178c	81 e9 94 00 00
	00		 sub	 ecx, 148		; 00000094H
  01792	e8 00 00 00 00	 call	 ?EnterGame@CCharSelectWnd@@QAEXVCSCI_WorldObject@@@Z ; CCharSelectWnd::EnterGame

; 432  : 
; 433  : 		break;

  01797	eb 75		 jmp	 SHORT $L152940
$L152946:

; 436  : 			eventMgr->PostWinCommand ( _DEVT_CHARSEL_LOOK, hObject );

  01799	8d 4d 0c	 lea	 ecx, DWORD PTR _hObject$[ebp]
  0179c	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  017a1	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  017a6	50		 push	 eax
  017a7	6a 0e		 push	 14			; 0000000eH
  017a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  017af	8b 11		 mov	 edx, DWORD PTR [ecx]
  017b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  017b7	ff 52 20	 call	 DWORD PTR [edx+32]

; 438  : 
; 439  : 		break;

  017ba	eb 52		 jmp	 SHORT $L152940
$L152947:

; 442  : 			(new CEraseDlg())->Create( hObject );

  017bc	68 9c 00 00 00	 push	 156			; 0000009cH
  017c1	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  017c6	89 45 e8	 mov	 DWORD PTR $T159907[ebp], eax
  017c9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  017d0	83 7d e8 00	 cmp	 DWORD PTR $T159907[ebp], 0
  017d4	74 0d		 je	 SHORT $L159908
  017d6	8b 4d e8	 mov	 ecx, DWORD PTR $T159907[ebp]
  017d9	e8 00 00 00 00	 call	 ??0CEraseDlg@@QAE@XZ	; CEraseDlg::CEraseDlg
  017de	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
  017e1	eb 07		 jmp	 SHORT $L159909
$L159908:
  017e3	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR -40+[ebp], 0
$L159909:
  017ea	8b 45 d8	 mov	 eax, DWORD PTR -40+[ebp]
  017ed	89 45 ec	 mov	 DWORD PTR $T159906[ebp], eax
  017f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  017f7	51		 push	 ecx
  017f8	8b cc		 mov	 ecx, esp
  017fa	89 65 e4	 mov	 DWORD PTR $T159910[ebp], esp
  017fd	8d 55 0c	 lea	 edx, DWORD PTR _hObject$[ebp]
  01800	52		 push	 edx
  01801	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  01806	8b 4d ec	 mov	 ecx, DWORD PTR $T159906[ebp]
  01809	e8 00 00 00 00	 call	 ?Create@CEraseDlg@@QAEHVCSCI_WorldObject@@@Z ; CEraseDlg::Create
$L152940:

; 448  : 
; 449  : 	return TRUE;

  0180e	b8 01 00 00 00	 mov	 eax, 1

; 450  : }

  01813	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01816	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0181d	8b e5		 mov	 esp, ebp
  0181f	5d		 pop	 ebp
  01820	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L159912:
  00351	8b 45 e8	 mov	 eax, DWORD PTR $T159907[ebp]
  00354	50		 push	 eax
  00355	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0035a	c3		 ret	 0
$L159915:
  0035b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159914
  00360	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?HandleVerb@CCharSelectWnd@@UAEHHVCSCI_WorldObject@@@Z ENDP ; CCharSelectWnd::HandleVerb
PUBLIC	?ShowHighlighted@CCharSelPlayBtn@@UAEXXZ	; CCharSelPlayBtn::ShowHighlighted
PUBLIC	?ShowNormal@CCharSelPlayBtn@@UAEXXZ		; CCharSelPlayBtn::ShowNormal
PUBLIC	?ShowPressed@CCharSelPlayBtn@@UAEXXZ		; CCharSelPlayBtn::ShowPressed
PUBLIC	?OnActivate@CCharSelPlayBtn@@UAEXFF@Z		; CCharSelPlayBtn::OnActivate
PUBLIC	??_7CCharSelPlayBtn@@6B@			; CCharSelPlayBtn::`vftable'
PUBLIC	??_GCCharSelPlayBtn@@UAEPAXI@Z			; CCharSelPlayBtn::`scalar deleting destructor'
PUBLIC	??_ECCharSelPlayBtn@@UAEPAXI@Z			; CCharSelPlayBtn::`vector deleting destructor'
PUBLIC	??BCString@@QBEPBDXZ				; CString::operator char const *
PUBLIC	??1CSkinToggleBtn@@UAE@XZ			; CSkinToggleBtn::~CSkinToggleBtn
EXTRN	?Right@CString@@QBE?AV1@H@Z:NEAR		; CString::Right
EXTRN	?UpdateTracking@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::UpdateTracking
EXTRN	?Disable@CSkinCtrl@@UAEHXZ:NEAR			; CSkinCtrl::Disable
EXTRN	?IsDisabled@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::IsDisabled
EXTRN	?Enable@CSkinCtrl@@UAEHXZ:NEAR			; CSkinCtrl::Enable
EXTRN	?Activate@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Activate
EXTRN	?Deactivate@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Deactivate
EXTRN	?Highlight@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Highlight
EXTRN	?Unhighlight@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Unhighlight
EXTRN	?ShowDisabled@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowDisabled
EXTRN	?OnMouseMove@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseMove
EXTRN	?OnMouseIn@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseIn
EXTRN	?OnMouseOut@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseOut
EXTRN	?OnMouseDown@CSkinBtn@@UAEXHFF@Z:NEAR		; CSkinBtn::OnMouseDown
EXTRN	__imp__atoi:NEAR
EXTRN	?OnMouseUp@CSkinBtn@@UAEXHFF@Z:NEAR		; CSkinBtn::OnMouseUp
EXTRN	?Refresh@CSkinBtn@@UAEXXZ:NEAR			; CSkinBtn::Refresh
EXTRN	??0CSkinToggleBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z:NEAR ; CSkinToggleBtn::CSkinToggleBtn
;	COMDAT ??_7CCharSelPlayBtn@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\charsel.cpp
CONST	SEGMENT
??_7CCharSelPlayBtn@@6B@ DD FLAT:??_ECCharSelPlayBtn@@UAEPAXI@Z ; CCharSelPlayBtn::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinBtn@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CCharSelPlayBtn@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CCharSelPlayBtn@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CCharSelPlayBtn@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CCharSelPlayBtn@@UAEXFF@Z
CONST	ENDS
xdata$x	SEGMENT
$T159926 DD	019930520H
	DD	05H
	DD	FLAT:$T159928
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159928 DD	0ffffffffH
	DD	FLAT:$L159920
	DD	00H
	DD	FLAT:$L159922
	DD	01H
	DD	FLAT:$L159923
	DD	02H
	DD	FLAT:$L159924
	DD	01H
	DD	FLAT:$L159924
xdata$x	ENDS
_TEXT	SEGMENT
$T159918 = -20
$T159919 = -24
__$EHRec$ = -12
_obj$ = 8
_pParent$ = 16
_this$ = -28
_idStr$ = -16
??0CCharSelPlayBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z PROC NEAR ; CCharSelPlayBtn::CCharSelPlayBtn

; 456  : {

  01823	55		 push	 ebp
  01824	8b ec		 mov	 ebp, esp
  01826	6a ff		 push	 -1
  01828	68 00 00 00 00	 push	 $L159927
  0182d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01833	50		 push	 eax
  01834	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0183b	83 ec 20	 sub	 esp, 32			; 00000020H
  0183e	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  01841	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01848	8b 45 10	 mov	 eax, DWORD PTR _pParent$[ebp]
  0184b	50		 push	 eax
  0184c	83 ec 08	 sub	 esp, 8
  0184f	8b cc		 mov	 ecx, esp
  01851	89 65 ec	 mov	 DWORD PTR $T159918[ebp], esp
  01854	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  01857	52		 push	 edx
  01858	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0185d	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  01860	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01863	e8 00 00 00 00	 call	 ??0CSkinToggleBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinToggleBtn::CSkinToggleBtn
  01868	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  0186b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0186f	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  01872	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CCharSelPlayBtn@@6B@ ; CCharSelPlayBtn::`vftable'

; 457  : 	// setup our internal properties based on this control's name
; 458  : 	CString idStr = GetName().Right ( 1 );

  01878	6a 01		 push	 1
  0187a	8d 4d f0	 lea	 ecx, DWORD PTR _idStr$[ebp]
  0187d	51		 push	 ecx
  0187e	8d 55 e8	 lea	 edx, DWORD PTR $T159919[ebp]
  01881	52		 push	 edx
  01882	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01885	e8 00 00 00 00	 call	 ?GetName@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetName
  0188a	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
  0188d	8b 45 d8	 mov	 eax, DWORD PTR -40+[ebp]
  01890	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  01893	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01897	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  0189a	e8 00 00 00 00	 call	 ?Right@CString@@QBE?AV1@H@Z ; CString::Right
  0189f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  018a3	8d 4d e8	 lea	 ecx, DWORD PTR $T159919[ebp]
  018a6	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 459  : 
; 460  : 	// determine which highlight position should be used when this button is highlighted
; 461  : 	m_nID = atoi ( idStr ) - 1;

  018ab	8d 4d f0	 lea	 ecx, DWORD PTR _idStr$[ebp]
  018ae	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  018b3	50		 push	 eax
  018b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  018ba	83 c4 04	 add	 esp, 4
  018bd	83 e8 01	 sub	 eax, 1
  018c0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  018c3	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 462  : 	assert ( (m_nID > -1) && (m_nID < 4) );
; 463  : }

  018c6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  018ca	8d 4d f0	 lea	 ecx, DWORD PTR _idStr$[ebp]
  018cd	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  018d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  018d9	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  018dc	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  018e1	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  018e4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  018e7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  018ee	8b e5		 mov	 esp, ebp
  018f0	5d		 pop	 ebp
  018f1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L159920:
  00365	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00368	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0036d	c3		 ret	 0
$L159922:
  0036e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00371	e8 00 00 00 00	 call	 ??1CSkinToggleBtn@@UAE@XZ ; CSkinToggleBtn::~CSkinToggleBtn
  00376	c3		 ret	 0
$L159923:
  00377	8d 4d e8	 lea	 ecx, DWORD PTR $T159919[ebp]
  0037a	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0037f	c3		 ret	 0
$L159924:
  00380	8d 4d f0	 lea	 ecx, DWORD PTR _idStr$[ebp]
  00383	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00388	c3		 ret	 0
$L159927:
  00389	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159926
  0038e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CCharSelPlayBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ENDP	; CCharSelPlayBtn::CCharSelPlayBtn
PUBLIC	??1CCharSelPlayBtn@@UAE@XZ			; CCharSelPlayBtn::~CCharSelPlayBtn
;	COMDAT ??_GCCharSelPlayBtn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCCharSelPlayBtn@@UAEPAXI@Z PROC NEAR		; CCharSelPlayBtn::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CCharSelPlayBtn@@UAE@XZ ; CCharSelPlayBtn::~CCharSelPlayBtn
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L152966
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L152966:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCCharSelPlayBtn@@UAEPAXI@Z ENDP			; CCharSelPlayBtn::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CSkinBtn@@UAE@XZ				; CSkinBtn::~CSkinBtn
;	COMDAT ??1CSkinToggleBtn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSkinToggleBtn@@UAE@XZ PROC NEAR			; CSkinToggleBtn::~CSkinToggleBtn, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinBtn@@UAE@XZ	; CSkinBtn::~CSkinBtn
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CSkinToggleBtn@@UAE@XZ ENDP				; CSkinToggleBtn::~CSkinToggleBtn
_TEXT	ENDS
EXTRN	??1CSkinCtrl@@UAE@XZ:NEAR			; CSkinCtrl::~CSkinCtrl
;	COMDAT ??1CSkinBtn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSkinBtn@@UAE@XZ PROC NEAR				; CSkinBtn::~CSkinBtn, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinCtrl@@UAE@XZ	; CSkinCtrl::~CSkinCtrl
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CSkinBtn@@UAE@XZ ENDP				; CSkinBtn::~CSkinBtn
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4
??1CCharSelPlayBtn@@UAE@XZ PROC NEAR			; CCharSelPlayBtn::~CCharSelPlayBtn

; 466  : {

  018f4	55		 push	 ebp
  018f5	8b ec		 mov	 ebp, esp
  018f7	51		 push	 ecx
  018f8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  018fb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  018fe	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CCharSelPlayBtn@@6B@ ; CCharSelPlayBtn::`vftable'

; 467  : }

  01904	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01907	e8 00 00 00 00	 call	 ??1CSkinToggleBtn@@UAE@XZ ; CSkinToggleBtn::~CSkinToggleBtn
  0190c	8b e5		 mov	 esp, ebp
  0190e	5d		 pop	 ebp
  0190f	c3		 ret	 0
??1CCharSelPlayBtn@@UAE@XZ ENDP				; CCharSelPlayBtn::~CCharSelPlayBtn
_TEXT	ENDS
EXTRN	?ShowHighlighted@CSkinToggleBtn@@UAEXXZ:NEAR	; CSkinToggleBtn::ShowHighlighted
_TEXT	SEGMENT
_this$ = -8
_wnd$ = -4
?ShowHighlighted@CCharSelPlayBtn@@UAEXXZ PROC NEAR	; CCharSelPlayBtn::ShowHighlighted

; 471  : {

  01910	55		 push	 ebp
  01911	8b ec		 mov	 ebp, esp
  01913	83 ec 08	 sub	 esp, 8
  01916	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 472  : 	// convert the parent window pointer...
; 473  : 	CCharSelectWnd *wnd = (CCharSelectWnd *)m_pParentWnd;

  01919	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0191c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0191f	89 4d fc	 mov	 DWORD PTR _wnd$[ebp], ecx

; 474  : 	assert ( NULL != wnd );
; 475  : 
; 476  : 	// let the default behavior happen
; 477  : 	CSkinToggleBtn::ShowHighlighted();

  01922	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01925	e8 00 00 00 00	 call	 ?ShowHighlighted@CSkinToggleBtn@@UAEXXZ ; CSkinToggleBtn::ShowHighlighted

; 478  : 
; 479  : 	// update the highlight object to point at the spot that we represent
; 480  : 	wnd->MoveHighlight ( m_nID, this );

  0192a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0192d	52		 push	 edx
  0192e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01931	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01934	51		 push	 ecx
  01935	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01938	e8 00 00 00 00	 call	 ?MoveHighlight@CCharSelectWnd@@QAEHHPAVCSkinCtrl@@@Z ; CCharSelectWnd::MoveHighlight

; 481  : }

  0193d	8b e5		 mov	 esp, ebp
  0193f	5d		 pop	 ebp
  01940	c3		 ret	 0
?ShowHighlighted@CCharSelPlayBtn@@UAEXXZ ENDP		; CCharSelPlayBtn::ShowHighlighted
_TEXT	ENDS
EXTRN	?ShowNormal@CSkinToggleBtn@@UAEXXZ:NEAR		; CSkinToggleBtn::ShowNormal
_TEXT	SEGMENT
_this$ = -8
_wnd$ = -4
?ShowNormal@CCharSelPlayBtn@@UAEXXZ PROC NEAR		; CCharSelPlayBtn::ShowNormal

; 485  : {

  01941	55		 push	 ebp
  01942	8b ec		 mov	 ebp, esp
  01944	83 ec 08	 sub	 esp, 8
  01947	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 486  : 	// convert the parent window pointer...
; 487  : 	CCharSelectWnd *wnd = (CCharSelectWnd *)m_pParentWnd;

  0194a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0194d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01950	89 4d fc	 mov	 DWORD PTR _wnd$[ebp], ecx

; 488  : 	assert ( NULL != wnd );
; 489  : 
; 490  : 	// let the default behavior happen
; 491  : 	CSkinToggleBtn::ShowNormal();

  01953	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01956	e8 00 00 00 00	 call	 ?ShowNormal@CSkinToggleBtn@@UAEXXZ ; CSkinToggleBtn::ShowNormal

; 492  : 
; 493  : 	// hide the highlight object if we're the current highlight owner
; 494  : 	if ( wnd->GetHighlightOwner() == this ) {

  0195b	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  0195e	e8 00 00 00 00	 call	 ?GetHighlightOwner@CCharSelectWnd@@QAEPAVCSkinCtrl@@XZ ; CCharSelectWnd::GetHighlightOwner
  01963	3b 45 f8	 cmp	 eax, DWORD PTR _this$[ebp]
  01966	75 0c		 jne	 SHORT $L152988

; 495  : 		wnd->MoveHighlight ( -1 );

  01968	6a 00		 push	 0
  0196a	6a ff		 push	 -1
  0196c	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  0196f	e8 00 00 00 00	 call	 ?MoveHighlight@CCharSelectWnd@@QAEHHPAVCSkinCtrl@@@Z ; CCharSelectWnd::MoveHighlight
$L152988:

; 497  : }

  01974	8b e5		 mov	 esp, ebp
  01976	5d		 pop	 ebp
  01977	c3		 ret	 0
?ShowNormal@CCharSelPlayBtn@@UAEXXZ ENDP		; CCharSelPlayBtn::ShowNormal
_TEXT	ENDS
EXTRN	?ShowPressed@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowPressed
_TEXT	SEGMENT
_this$ = -8
_wnd$ = -4
?ShowPressed@CCharSelPlayBtn@@UAEXXZ PROC NEAR		; CCharSelPlayBtn::ShowPressed

; 501  : {

  01978	55		 push	 ebp
  01979	8b ec		 mov	 ebp, esp
  0197b	83 ec 08	 sub	 esp, 8
  0197e	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 502  : 	// convert the parent window pointer...
; 503  : 	CCharSelectWnd *wnd = (CCharSelectWnd *)m_pParentWnd;

  01981	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01984	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01987	89 4d fc	 mov	 DWORD PTR _wnd$[ebp], ecx

; 504  : 	assert ( NULL != wnd );
; 505  : 
; 506  : 	// let the default behavior happen
; 507  : 	CSkinBtn::ShowPressed();

  0198a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0198d	e8 00 00 00 00	 call	 ?ShowPressed@CSkinCtrl@@UAEXXZ ; CSkinCtrl::ShowPressed

; 508  : 
; 509  : 	// display the highlight object
; 510  : 	wnd->MoveHighlight ( m_nID, this );

  01992	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01995	52		 push	 edx
  01996	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01999	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0199c	51		 push	 ecx
  0199d	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  019a0	e8 00 00 00 00	 call	 ?MoveHighlight@CCharSelectWnd@@QAEHHPAVCSkinCtrl@@@Z ; CCharSelectWnd::MoveHighlight

; 511  : }

  019a5	8b e5		 mov	 esp, ebp
  019a7	5d		 pop	 ebp
  019a8	c3		 ret	 0
?ShowPressed@CCharSelPlayBtn@@UAEXXZ ENDP		; CCharSelPlayBtn::ShowPressed
_TEXT	ENDS
PUBLIC	??Breference@?$bitset@$04@std@@QBE_NXZ		; std::bitset<5>::reference::operator bool
PUBLIC	??A?$bitset@$04@std@@QAE?AVreference@01@I@Z	; std::bitset<5>::operator[]
EXTRN	?OnActivate@CSkinToggleBtn@@UAEXFF@Z:NEAR	; CSkinToggleBtn::OnActivate
_TEXT	SEGMENT
$T159940 = -12
$T159942 = -20
_x$ = 8
_y$ = 12
_this$ = -24
_wnd$ = -4
?OnActivate@CCharSelPlayBtn@@UAEXFF@Z PROC NEAR		; CCharSelPlayBtn::OnActivate

; 515  : {

  019a9	55		 push	 ebp
  019aa	8b ec		 mov	 ebp, esp
  019ac	83 ec 18	 sub	 esp, 24			; 00000018H
  019af	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 516  : 	// convert the parent window pointer...
; 517  : 	CCharSelectWnd *wnd = (CCharSelectWnd *)m_pParentWnd;

  019b2	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  019b5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  019b8	89 4d fc	 mov	 DWORD PTR _wnd$[ebp], ecx

; 518  : 	assert ( NULL != wnd );
; 519  : 
; 520  : 	// do default behavior
; 521  : 	CSkinToggleBtn::OnActivate( x, y );

  019bb	66 8b 55 0c	 mov	 dx, WORD PTR _y$[ebp]
  019bf	52		 push	 edx
  019c0	66 8b 45 08	 mov	 ax, WORD PTR _x$[ebp]
  019c4	50		 push	 eax
  019c5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  019c8	e8 00 00 00 00	 call	 ?OnActivate@CSkinToggleBtn@@UAEXFF@Z ; CSkinToggleBtn::OnActivate

; 522  : 
; 523  : 	if ( TRUE == m_state[sknCtrlActivated] ) {

  019cd	6a 02		 push	 2
  019cf	8d 4d f4	 lea	 ecx, DWORD PTR $T159940[ebp]
  019d2	51		 push	 ecx
  019d3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  019d6	83 c1 08	 add	 ecx, 8
  019d9	e8 00 00 00 00	 call	 ??A?$bitset@$04@std@@QAE?AVreference@01@I@Z ; std::bitset<5>::operator[]
  019de	8b c8		 mov	 ecx, eax
  019e0	e8 00 00 00 00	 call	 ??Breference@?$bitset@$04@std@@QBE_NXZ ; std::bitset<5>::reference::operator bool
  019e5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  019ea	83 f8 01	 cmp	 eax, 1
  019ed	75 24		 jne	 SHORT $L153005

; 524  : 		wnd->EnterGame ( wnd->GetCharacter ( m_nID ) );

  019ef	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  019f2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  019f5	50		 push	 eax
  019f6	8d 4d ec	 lea	 ecx, DWORD PTR $T159942[ebp]
  019f9	51		 push	 ecx
  019fa	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  019fd	e8 00 00 00 00	 call	 ?GetCharacter@CCharSelectWnd@@QAE?AVCSCI_WorldActor@@H@Z ; CCharSelectWnd::GetCharacter
  01a02	51		 push	 ecx
  01a03	8b cc		 mov	 ecx, esp
  01a05	50		 push	 eax
  01a06	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  01a0b	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01a0e	e8 00 00 00 00	 call	 ?EnterGame@CCharSelectWnd@@QAEXVCSCI_WorldObject@@@Z ; CCharSelectWnd::EnterGame
$L153005:

; 526  : }

  01a13	8b e5		 mov	 esp, ebp
  01a15	5d		 pop	 ebp
  01a16	c2 08 00	 ret	 8
?OnActivate@CCharSelPlayBtn@@UAEXFF@Z ENDP		; CCharSelPlayBtn::OnActivate
_TEXT	ENDS
PUBLIC	?OnActivate@CCharSelCreateBtn@@UAEXFF@Z		; CCharSelCreateBtn::OnActivate
PUBLIC	??_7CCharSelCreateBtn@@6B@			; CCharSelCreateBtn::`vftable'
PUBLIC	??_GCCharSelCreateBtn@@UAEPAXI@Z		; CCharSelCreateBtn::`scalar deleting destructor'
PUBLIC	??_ECCharSelCreateBtn@@UAEPAXI@Z		; CCharSelCreateBtn::`vector deleting destructor'
;	COMDAT ??_7CCharSelCreateBtn@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\charsel.cpp
CONST	SEGMENT
??_7CCharSelCreateBtn@@6B@ DD FLAT:??_ECCharSelCreateBtn@@UAEPAXI@Z ; CCharSelCreateBtn::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinBtn@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinToggleBtn@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinToggleBtn@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CCharSelCreateBtn@@UAEXFF@Z
CONST	ENDS
xdata$x	SEGMENT
$T159949 DD	019930520H
	DD	01H
	DD	FLAT:$T159951
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159951 DD	0ffffffffH
	DD	FLAT:$L159945
xdata$x	ENDS
_TEXT	SEGMENT
$T159944 = -16
__$EHRec$ = -12
_obj$ = 8
_pParent$ = 16
_this$ = -20
??0CCharSelCreateBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z PROC NEAR ; CCharSelCreateBtn::CCharSelCreateBtn

; 533  : {

  01a19	55		 push	 ebp
  01a1a	8b ec		 mov	 ebp, esp
  01a1c	6a ff		 push	 -1
  01a1e	68 00 00 00 00	 push	 $L159950
  01a23	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01a29	50		 push	 eax
  01a2a	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01a31	83 ec 10	 sub	 esp, 16			; 00000010H
  01a34	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  01a37	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01a3e	8b 45 10	 mov	 eax, DWORD PTR _pParent$[ebp]
  01a41	50		 push	 eax
  01a42	83 ec 08	 sub	 esp, 8
  01a45	8b cc		 mov	 ecx, esp
  01a47	89 65 f0	 mov	 DWORD PTR $T159944[ebp], esp
  01a4a	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  01a4d	52		 push	 edx
  01a4e	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01a53	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  01a56	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01a59	e8 00 00 00 00	 call	 ??0CSkinToggleBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinToggleBtn::CSkinToggleBtn
  01a5e	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  01a61	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01a64	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CCharSelCreateBtn@@6B@ ; CCharSelCreateBtn::`vftable'

; 534  : }

  01a6a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01a71	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01a74	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01a79	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  01a7c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01a7f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01a86	8b e5		 mov	 esp, ebp
  01a88	5d		 pop	 ebp
  01a89	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L159945:
  00393	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00396	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0039b	c3		 ret	 0
$L159950:
  0039c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159949
  003a1	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CCharSelCreateBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ENDP ; CCharSelCreateBtn::CCharSelCreateBtn
PUBLIC	??1CCharSelCreateBtn@@UAE@XZ			; CCharSelCreateBtn::~CCharSelCreateBtn
;	COMDAT ??_GCCharSelCreateBtn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCCharSelCreateBtn@@UAEPAXI@Z PROC NEAR		; CCharSelCreateBtn::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CCharSelCreateBtn@@UAE@XZ ; CCharSelCreateBtn::~CCharSelCreateBtn
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L153017
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L153017:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCCharSelCreateBtn@@UAEPAXI@Z ENDP			; CCharSelCreateBtn::`scalar deleting destructor'
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4
??1CCharSelCreateBtn@@UAE@XZ PROC NEAR			; CCharSelCreateBtn::~CCharSelCreateBtn

; 537  : {

  01a8c	55		 push	 ebp
  01a8d	8b ec		 mov	 ebp, esp
  01a8f	51		 push	 ecx
  01a90	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  01a93	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a96	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CCharSelCreateBtn@@6B@ ; CCharSelCreateBtn::`vftable'

; 538  : }

  01a9c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a9f	e8 00 00 00 00	 call	 ??1CSkinToggleBtn@@UAE@XZ ; CSkinToggleBtn::~CSkinToggleBtn
  01aa4	8b e5		 mov	 esp, ebp
  01aa6	5d		 pop	 ebp
  01aa7	c3		 ret	 0
??1CCharSelCreateBtn@@UAE@XZ ENDP			; CCharSelCreateBtn::~CCharSelCreateBtn
$T159956 = -12
_x$ = 8
_y$ = 12
_this$ = -16
_wnd$ = -4
?OnActivate@CCharSelCreateBtn@@UAEXFF@Z PROC NEAR	; CCharSelCreateBtn::OnActivate

; 542  : {

  01aa8	55		 push	 ebp
  01aa9	8b ec		 mov	 ebp, esp
  01aab	83 ec 10	 sub	 esp, 16			; 00000010H
  01aae	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 543  : 	// convert the parent window pointer...
; 544  : 	CCharSelectWnd *wnd = (CCharSelectWnd *)m_pParentWnd;

  01ab1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01ab4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01ab7	89 4d fc	 mov	 DWORD PTR _wnd$[ebp], ecx

; 545  : 	assert ( NULL != wnd );
; 546  : 
; 547  : 	// do default behavior
; 548  : 	CSkinToggleBtn::OnActivate( x, y );

  01aba	66 8b 55 0c	 mov	 dx, WORD PTR _y$[ebp]
  01abe	52		 push	 edx
  01abf	66 8b 45 08	 mov	 ax, WORD PTR _x$[ebp]
  01ac3	50		 push	 eax
  01ac4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01ac7	e8 00 00 00 00	 call	 ?OnActivate@CSkinToggleBtn@@UAEXFF@Z ; CSkinToggleBtn::OnActivate

; 549  : 
; 550  : 	if ( TRUE == m_state[sknCtrlActivated] ) {

  01acc	6a 02		 push	 2
  01ace	8d 4d f4	 lea	 ecx, DWORD PTR $T159956[ebp]
  01ad1	51		 push	 ecx
  01ad2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01ad5	83 c1 08	 add	 ecx, 8
  01ad8	e8 00 00 00 00	 call	 ??A?$bitset@$04@std@@QAE?AVreference@01@I@Z ; std::bitset<5>::operator[]
  01add	8b c8		 mov	 ecx, eax
  01adf	e8 00 00 00 00	 call	 ??Breference@?$bitset@$04@std@@QBE_NXZ ; std::bitset<5>::reference::operator bool
  01ae4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01ae9	83 f8 01	 cmp	 eax, 1
  01aec	75 1f		 jne	 SHORT $L153030

; 551  : 		wnd->SetEventProcessing ( FALSE );

  01aee	6a 00		 push	 0
  01af0	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01af3	e8 00 00 00 00	 call	 ?SetEventProcessing@CSkinWnd@@QAEX_N@Z ; CSkinWnd::SetEventProcessing

; 552  : 		eventMgr->PostWinCommand ( _DEVT_CHARSEL_CREATE, 0 );

  01af8	6a 00		 push	 0
  01afa	6a 01		 push	 1
  01afc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  01b02	8b 02		 mov	 eax, DWORD PTR [edx]
  01b04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  01b0a	ff 50 20	 call	 DWORD PTR [eax+32]
$L153030:

; 554  : }

  01b0d	8b e5		 mov	 esp, ebp
  01b0f	5d		 pop	 ebp
  01b10	c2 08 00	 ret	 8
?OnActivate@CCharSelCreateBtn@@UAEXFF@Z ENDP		; CCharSelCreateBtn::OnActivate
_TEXT	ENDS
PUBLIC	?ShowHighlighted@CCharSelHotSpot@@UAEXXZ	; CCharSelHotSpot::ShowHighlighted
PUBLIC	?ShowNormal@CCharSelHotSpot@@UAEXXZ		; CCharSelHotSpot::ShowNormal
PUBLIC	?ShowPressed@CCharSelHotSpot@@UAEXXZ		; CCharSelHotSpot::ShowPressed
PUBLIC	?OnActivate@CCharSelHotSpot@@UAEXFF@Z		; CCharSelHotSpot::OnActivate
PUBLIC	??_7CCharSelHotSpot@@6B@			; CCharSelHotSpot::`vftable'
PUBLIC	??_GCCharSelHotSpot@@UAEPAXI@Z			; CCharSelHotSpot::`scalar deleting destructor'
PUBLIC	??_ECCharSelHotSpot@@UAEPAXI@Z			; CCharSelHotSpot::`vector deleting destructor'
EXTRN	??0CSkinBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z:NEAR ; CSkinBtn::CSkinBtn
;	COMDAT ??_7CCharSelHotSpot@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\charsel.cpp
CONST	SEGMENT
??_7CCharSelHotSpot@@6B@ DD FLAT:??_ECCharSelHotSpot@@UAEPAXI@Z ; CCharSelHotSpot::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinBtn@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CCharSelHotSpot@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CCharSelHotSpot@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CCharSelHotSpot@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CCharSelHotSpot@@UAEXFF@Z
CONST	ENDS
xdata$x	SEGMENT
$T159966 DD	019930520H
	DD	05H
	DD	FLAT:$T159968
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159968 DD	0ffffffffH
	DD	FLAT:$L159960
	DD	00H
	DD	FLAT:$L159962
	DD	01H
	DD	FLAT:$L159963
	DD	02H
	DD	FLAT:$L159964
	DD	01H
	DD	FLAT:$L159964
xdata$x	ENDS
_TEXT	SEGMENT
$T159958 = -20
$T159959 = -24
__$EHRec$ = -12
_obj$ = 8
_pParent$ = 16
_this$ = -28
_idStr$ = -16
??0CCharSelHotSpot@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z PROC NEAR ; CCharSelHotSpot::CCharSelHotSpot

; 560  : {

  01b13	55		 push	 ebp
  01b14	8b ec		 mov	 ebp, esp
  01b16	6a ff		 push	 -1
  01b18	68 00 00 00 00	 push	 $L159967
  01b1d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01b23	50		 push	 eax
  01b24	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01b2b	83 ec 20	 sub	 esp, 32			; 00000020H
  01b2e	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  01b31	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01b38	8b 45 10	 mov	 eax, DWORD PTR _pParent$[ebp]
  01b3b	50		 push	 eax
  01b3c	83 ec 08	 sub	 esp, 8
  01b3f	8b cc		 mov	 ecx, esp
  01b41	89 65 ec	 mov	 DWORD PTR $T159958[ebp], esp
  01b44	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  01b47	52		 push	 edx
  01b48	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  01b4d	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  01b50	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01b53	e8 00 00 00 00	 call	 ??0CSkinBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinBtn::CSkinBtn
  01b58	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  01b5b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01b5f	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  01b62	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CCharSelHotSpot@@6B@ ; CCharSelHotSpot::`vftable'

; 561  : 	// setup our internal properties based on this control's name
; 562  : 	CString idStr = GetName().Right ( 1 );

  01b68	6a 01		 push	 1
  01b6a	8d 4d f0	 lea	 ecx, DWORD PTR _idStr$[ebp]
  01b6d	51		 push	 ecx
  01b6e	8d 55 e8	 lea	 edx, DWORD PTR $T159959[ebp]
  01b71	52		 push	 edx
  01b72	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01b75	e8 00 00 00 00	 call	 ?GetName@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetName
  01b7a	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
  01b7d	8b 45 d8	 mov	 eax, DWORD PTR -40+[ebp]
  01b80	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  01b83	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01b87	8b 4d d4	 mov	 ecx, DWORD PTR -44+[ebp]
  01b8a	e8 00 00 00 00	 call	 ?Right@CString@@QBE?AV1@H@Z ; CString::Right
  01b8f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  01b93	8d 4d e8	 lea	 ecx, DWORD PTR $T159959[ebp]
  01b96	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString

; 563  : 
; 564  : 	// determine which highlight position should be used when this control is highlighted
; 565  : 	m_nID = atoi ( idStr ) - 1;

  01b9b	8d 4d f0	 lea	 ecx, DWORD PTR _idStr$[ebp]
  01b9e	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01ba3	50		 push	 eax
  01ba4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  01baa	83 c4 04	 add	 esp, 4
  01bad	83 e8 01	 sub	 eax, 1
  01bb0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  01bb3	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 566  : 	assert ( (m_nID > -1) && (m_nID < 4) );
; 567  : }

  01bb6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01bba	8d 4d f0	 lea	 ecx, DWORD PTR _idStr$[ebp]
  01bbd	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01bc2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01bc9	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01bcc	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  01bd1	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  01bd4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01bd7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01bde	8b e5		 mov	 esp, ebp
  01be0	5d		 pop	 ebp
  01be1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L159960:
  003a6	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  003a9	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  003ae	c3		 ret	 0
$L159962:
  003af	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  003b2	e8 00 00 00 00	 call	 ??1CSkinBtn@@UAE@XZ	; CSkinBtn::~CSkinBtn
  003b7	c3		 ret	 0
$L159963:
  003b8	8d 4d e8	 lea	 ecx, DWORD PTR $T159959[ebp]
  003bb	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  003c0	c3		 ret	 0
$L159964:
  003c1	8d 4d f0	 lea	 ecx, DWORD PTR _idStr$[ebp]
  003c4	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  003c9	c3		 ret	 0
$L159967:
  003ca	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159966
  003cf	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CCharSelHotSpot@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ENDP	; CCharSelHotSpot::CCharSelHotSpot
PUBLIC	??1CCharSelHotSpot@@UAE@XZ			; CCharSelHotSpot::~CCharSelHotSpot
;	COMDAT ??_GCCharSelHotSpot@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCCharSelHotSpot@@UAEPAXI@Z PROC NEAR		; CCharSelHotSpot::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CCharSelHotSpot@@UAE@XZ ; CCharSelHotSpot::~CCharSelHotSpot
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L153044
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L153044:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCCharSelHotSpot@@UAEPAXI@Z ENDP			; CCharSelHotSpot::`scalar deleting destructor'
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4
??1CCharSelHotSpot@@UAE@XZ PROC NEAR			; CCharSelHotSpot::~CCharSelHotSpot

; 570  : {

  01be4	55		 push	 ebp
  01be5	8b ec		 mov	 ebp, esp
  01be7	51		 push	 ecx
  01be8	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  01beb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01bee	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CCharSelHotSpot@@6B@ ; CCharSelHotSpot::`vftable'

; 571  : }

  01bf4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bf7	e8 00 00 00 00	 call	 ??1CSkinBtn@@UAE@XZ	; CSkinBtn::~CSkinBtn
  01bfc	8b e5		 mov	 esp, ebp
  01bfe	5d		 pop	 ebp
  01bff	c3		 ret	 0
??1CCharSelHotSpot@@UAE@XZ ENDP				; CCharSelHotSpot::~CCharSelHotSpot
_TEXT	ENDS
EXTRN	?ShowHighlighted@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowHighlighted
_TEXT	SEGMENT
_this$ = -8
_wnd$ = -4
?ShowHighlighted@CCharSelHotSpot@@UAEXXZ PROC NEAR	; CCharSelHotSpot::ShowHighlighted

; 575  : {

  01c00	55		 push	 ebp
  01c01	8b ec		 mov	 ebp, esp
  01c03	83 ec 08	 sub	 esp, 8
  01c06	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 576  : 	// convert the parent window pointer...
; 577  : 	CCharSelectWnd *wnd = (CCharSelectWnd *)m_pParentWnd;

  01c09	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01c0c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01c0f	89 4d fc	 mov	 DWORD PTR _wnd$[ebp], ecx

; 578  : 	assert ( NULL != wnd );
; 579  : 
; 580  : 	// let the default behavior happen
; 581  : 	CSkinBtn::ShowHighlighted();

  01c12	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c15	e8 00 00 00 00	 call	 ?ShowHighlighted@CSkinCtrl@@UAEXXZ ; CSkinCtrl::ShowHighlighted

; 582  : 
; 583  : 	// show the highlight
; 584  : 	wnd->MoveHighlight ( m_nID, this );

  01c1a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01c1d	52		 push	 edx
  01c1e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01c21	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01c24	51		 push	 ecx
  01c25	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01c28	e8 00 00 00 00	 call	 ?MoveHighlight@CCharSelectWnd@@QAEHHPAVCSkinCtrl@@@Z ; CCharSelectWnd::MoveHighlight

; 585  : }

  01c2d	8b e5		 mov	 esp, ebp
  01c2f	5d		 pop	 ebp
  01c30	c3		 ret	 0
?ShowHighlighted@CCharSelHotSpot@@UAEXXZ ENDP		; CCharSelHotSpot::ShowHighlighted
_TEXT	ENDS
EXTRN	?ShowNormal@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowNormal
_TEXT	SEGMENT
_this$ = -8
_wnd$ = -4
?ShowNormal@CCharSelHotSpot@@UAEXXZ PROC NEAR		; CCharSelHotSpot::ShowNormal

; 589  : {

  01c31	55		 push	 ebp
  01c32	8b ec		 mov	 ebp, esp
  01c34	83 ec 08	 sub	 esp, 8
  01c37	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 590  : 	// convert the parent window pointer...
; 591  : 	CCharSelectWnd *wnd = (CCharSelectWnd *)m_pParentWnd;

  01c3a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01c3d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01c40	89 4d fc	 mov	 DWORD PTR _wnd$[ebp], ecx

; 592  : 	assert ( NULL != wnd );
; 593  : 
; 594  : 	// let the default behavior happen
; 595  : 	CSkinBtn::ShowNormal();

  01c43	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c46	e8 00 00 00 00	 call	 ?ShowNormal@CSkinCtrl@@UAEXXZ ; CSkinCtrl::ShowNormal

; 596  : 
; 597  : 	// hide the highlight object if we're the current highlight owner
; 598  : 	if ( wnd->GetHighlightOwner() == this ) {

  01c4b	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01c4e	e8 00 00 00 00	 call	 ?GetHighlightOwner@CCharSelectWnd@@QAEPAVCSkinCtrl@@XZ ; CCharSelectWnd::GetHighlightOwner
  01c53	3b 45 f8	 cmp	 eax, DWORD PTR _this$[ebp]
  01c56	75 0c		 jne	 SHORT $L153062

; 599  : 		wnd->MoveHighlight ( -1 );

  01c58	6a 00		 push	 0
  01c5a	6a ff		 push	 -1
  01c5c	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01c5f	e8 00 00 00 00	 call	 ?MoveHighlight@CCharSelectWnd@@QAEHHPAVCSkinCtrl@@@Z ; CCharSelectWnd::MoveHighlight
$L153062:

; 601  : }

  01c64	8b e5		 mov	 esp, ebp
  01c66	5d		 pop	 ebp
  01c67	c3		 ret	 0
?ShowNormal@CCharSelHotSpot@@UAEXXZ ENDP		; CCharSelHotSpot::ShowNormal
_this$ = -8
_wnd$ = -4
?ShowPressed@CCharSelHotSpot@@UAEXXZ PROC NEAR		; CCharSelHotSpot::ShowPressed

; 605  : {

  01c68	55		 push	 ebp
  01c69	8b ec		 mov	 ebp, esp
  01c6b	83 ec 08	 sub	 esp, 8
  01c6e	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 606  : 	// convert the parent window pointer...
; 607  : 	CCharSelectWnd *wnd = (CCharSelectWnd *)m_pParentWnd;

  01c71	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01c74	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01c77	89 4d fc	 mov	 DWORD PTR _wnd$[ebp], ecx

; 608  : 	assert ( NULL != wnd );
; 609  : 
; 610  : 	// let the default behavior happen
; 611  : 	CSkinBtn::ShowPressed();

  01c7a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01c7d	e8 00 00 00 00	 call	 ?ShowPressed@CSkinCtrl@@UAEXXZ ; CSkinCtrl::ShowPressed

; 612  : 
; 613  : 	// show the highlight
; 614  : 	wnd->MoveHighlight ( m_nID, this );

  01c82	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01c85	52		 push	 edx
  01c86	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01c89	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01c8c	51		 push	 ecx
  01c8d	8b 4d fc	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01c90	e8 00 00 00 00	 call	 ?MoveHighlight@CCharSelectWnd@@QAEHHPAVCSkinCtrl@@@Z ; CCharSelectWnd::MoveHighlight

; 615  : }

  01c95	8b e5		 mov	 esp, ebp
  01c97	5d		 pop	 ebp
  01c98	c3		 ret	 0
?ShowPressed@CCharSelHotSpot@@UAEXXZ ENDP		; CCharSelHotSpot::ShowPressed
_TEXT	ENDS
EXTRN	??0CVerbDialog@@QAE@XZ:NEAR			; CVerbDialog::CVerbDialog
EXTRN	?Create@CVerbDialog@@QAEHVCSCI_WorldObject@@PAVCVerbHandler@@@Z:NEAR ; CVerbDialog::Create
EXTRN	?AddVerb@CVerbDialog@@QAEXHH@Z:NEAR		; CVerbDialog::AddVerb
EXTRN	?Show@CVerbDialog@@QAEXXZ:NEAR			; CVerbDialog::Show
xdata$x	SEGMENT
$T159986 DD	019930520H
	DD	01H
	DD	FLAT:$T159988
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159988 DD	0ffffffffH
	DD	FLAT:$L159984
xdata$x	ENDS
_TEXT	SEGMENT
$T159976 = -28
$T159977 = -32
$T159978 = -36
$T159983 = -40
__$EHRec$ = -12
_this$ = -44
_wnd$ = -16
_pChar$153079 = -20
_pVerbDlg$153081 = -24
?OnActivate@CCharSelHotSpot@@UAEXFF@Z PROC NEAR		; CCharSelHotSpot::OnActivate

; 619  : {

  01c99	55		 push	 ebp
  01c9a	8b ec		 mov	 ebp, esp
  01c9c	6a ff		 push	 -1
  01c9e	68 00 00 00 00	 push	 $L159987
  01ca3	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01ca9	50		 push	 eax
  01caa	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01cb1	83 ec 28	 sub	 esp, 40			; 00000028H
  01cb4	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 620  : 	// convert the parent window pointer...
; 621  : 	CCharSelectWnd *wnd = (CCharSelectWnd *)m_pParentWnd;

  01cb7	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  01cba	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01cbd	89 4d f0	 mov	 DWORD PTR _wnd$[ebp], ecx

; 622  : 	assert ( NULL != wnd );
; 623  : 
; 624  : 	if ( wnd->GetHighlightPosn() != -1 ) {

  01cc0	8b 4d f0	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01cc3	e8 00 00 00 00	 call	 ?GetHighlightPosn@CCharSelectWnd@@QAEHXZ ; CCharSelectWnd::GetHighlightPosn
  01cc8	83 f8 ff	 cmp	 eax, -1
  01ccb	0f 84 c5 00 00
	00		 je	 $L153078

; 625  : 		CSCI_WorldActor pChar = wnd->GetCharacter ( m_nID );

  01cd1	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  01cd4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01cd7	50		 push	 eax
  01cd8	8d 4d e4	 lea	 ecx, DWORD PTR $T159976[ebp]
  01cdb	51		 push	 ecx
  01cdc	8b 4d f0	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01cdf	e8 00 00 00 00	 call	 ?GetCharacter@CCharSelectWnd@@QAE?AVCSCI_WorldActor@@H@Z ; CCharSelectWnd::GetCharacter
  01ce4	50		 push	 eax
  01ce5	8d 4d ec	 lea	 ecx, DWORD PTR _pChar$153079[ebp]
  01ce8	e8 00 00 00 00	 call	 ??0CSCI_WorldActor@@QAE@ABV0@@Z ; CSCI_WorldActor::CSCI_WorldActor

; 626  : 	
; 627  : 		// create a new verb dialog...
; 628  : 		CVerbDialog *pVerbDlg = new CVerbDialog();

  01ced	68 e8 00 00 00	 push	 232			; 000000e8H
  01cf2	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  01cf7	89 45 dc	 mov	 DWORD PTR $T159978[ebp], eax
  01cfa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01d01	83 7d dc 00	 cmp	 DWORD PTR $T159978[ebp], 0
  01d05	74 0d		 je	 SHORT $L159979
  01d07	8b 4d dc	 mov	 ecx, DWORD PTR $T159978[ebp]
  01d0a	e8 00 00 00 00	 call	 ??0CVerbDialog@@QAE@XZ	; CVerbDialog::CVerbDialog
  01d0f	89 45 d0	 mov	 DWORD PTR -48+[ebp], eax
  01d12	eb 07		 jmp	 SHORT $L159980
$L159979:
  01d14	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR -48+[ebp], 0
$L159980:
  01d1b	8b 55 d0	 mov	 edx, DWORD PTR -48+[ebp]
  01d1e	89 55 e0	 mov	 DWORD PTR $T159977[ebp], edx
  01d21	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01d28	8b 45 e0	 mov	 eax, DWORD PTR $T159977[ebp]
  01d2b	89 45 e8	 mov	 DWORD PTR _pVerbDlg$153081[ebp], eax

; 629  : 		pVerbDlg->Create ( pChar, wnd );

  01d2e	83 7d f0 00	 cmp	 DWORD PTR _wnd$[ebp], 0
  01d32	74 0e		 je	 SHORT $L159981
  01d34	8b 4d f0	 mov	 ecx, DWORD PTR _wnd$[ebp]
  01d37	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  01d3d	89 4d cc	 mov	 DWORD PTR -52+[ebp], ecx
  01d40	eb 07		 jmp	 SHORT $L159982
$L159981:
  01d42	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR -52+[ebp], 0
$L159982:
  01d49	8b 55 cc	 mov	 edx, DWORD PTR -52+[ebp]
  01d4c	52		 push	 edx
  01d4d	51		 push	 ecx
  01d4e	8b cc		 mov	 ecx, esp
  01d50	89 65 d8	 mov	 DWORD PTR $T159983[ebp], esp
  01d53	8d 45 ec	 lea	 eax, DWORD PTR _pChar$153079[ebp]
  01d56	50		 push	 eax
  01d57	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  01d5c	8b 4d e8	 mov	 ecx, DWORD PTR _pVerbDlg$153081[ebp]
  01d5f	e8 00 00 00 00	 call	 ?Create@CVerbDialog@@QAEHVCSCI_WorldObject@@PAVCVerbHandler@@@Z ; CVerbDialog::Create

; 630  : 	
; 631  : 	 	pVerbDlg->AddVerb ( _VERB_PLAY );

  01d64	6a 01		 push	 1
  01d66	68 10 27 00 00	 push	 10000			; 00002710H
  01d6b	8b 4d e8	 mov	 ecx, DWORD PTR _pVerbDlg$153081[ebp]
  01d6e	e8 00 00 00 00	 call	 ?AddVerb@CVerbDialog@@QAEXHH@Z ; CVerbDialog::AddVerb

; 632  : 	 	pVerbDlg->AddVerb ( _VERB_LOOKAT );

  01d73	6a 01		 push	 1
  01d75	6a 03		 push	 3
  01d77	8b 4d e8	 mov	 ecx, DWORD PTR _pVerbDlg$153081[ebp]
  01d7a	e8 00 00 00 00	 call	 ?AddVerb@CVerbDialog@@QAEXHH@Z ; CVerbDialog::AddVerb

; 633  : 	 	pVerbDlg->AddVerb ( _VERB_ERASE );

  01d7f	6a 01		 push	 1
  01d81	68 12 27 00 00	 push	 10002			; 00002712H
  01d86	8b 4d e8	 mov	 ecx, DWORD PTR _pVerbDlg$153081[ebp]
  01d89	e8 00 00 00 00	 call	 ?AddVerb@CVerbDialog@@QAEXHH@Z ; CVerbDialog::AddVerb

; 634  : 	
; 635  : 		pVerbDlg->Show();

  01d8e	8b 4d e8	 mov	 ecx, DWORD PTR _pVerbDlg$153081[ebp]
  01d91	e8 00 00 00 00	 call	 ?Show@CVerbDialog@@QAEXXZ ; CVerbDialog::Show
$L153078:

; 637  : }

  01d96	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01d99	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01da0	8b e5		 mov	 esp, ebp
  01da2	5d		 pop	 ebp
  01da3	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L159984:
  003d4	8b 45 dc	 mov	 eax, DWORD PTR $T159978[ebp]
  003d7	50		 push	 eax
  003d8	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  003dd	c3		 ret	 0
$L159987:
  003de	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159986
  003e3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnActivate@CCharSelHotSpot@@UAEXFF@Z ENDP		; CCharSelHotSpot::OnActivate
EXTRN	?messageMap@CSkinWnd@@1UAFX_MSGMAP@@B:QWORD	; CSkinWnd::messageMap
_TEXT	SEGMENT
?_GetBaseMessageMap@CEraseDlg@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CEraseDlg::_GetBaseMessageMap

; 640  : BEGIN_MESSAGE_MAP ( CEraseDlg, CSkinWnd )

  01da6	55		 push	 ebp
  01da7	8b ec		 mov	 ebp, esp
  01da9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CSkinWnd@@1UAFX_MSGMAP@@B ; CSkinWnd::messageMap
  01dae	5d		 pop	 ebp
  01daf	c3		 ret	 0
?_GetBaseMessageMap@CEraseDlg@@KGPBUAFX_MSGMAP@@XZ ENDP	; CEraseDlg::_GetBaseMessageMap
_TEXT	ENDS
PUBLIC	?GetMessageMap@CEraseDlg@@MBEPBUAFX_MSGMAP@@XZ	; CEraseDlg::GetMessageMap
_TEXT	SEGMENT
_this$ = -4
?GetMessageMap@CEraseDlg@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR ; CEraseDlg::GetMessageMap

; 640  : BEGIN_MESSAGE_MAP ( CEraseDlg, CSkinWnd )

  01db0	55		 push	 ebp
  01db1	8b ec		 mov	 ebp, esp
  01db3	51		 push	 ecx
  01db4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  01db7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CEraseDlg@@1UAFX_MSGMAP@@B ; CEraseDlg::messageMap
  01dbc	8b e5		 mov	 esp, ebp
  01dbe	5d		 pop	 ebp
  01dbf	c3		 ret	 0
?GetMessageMap@CEraseDlg@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CEraseDlg::GetMessageMap
_TEXT	ENDS
PUBLIC	?MakeSkinCtrl@CEraseDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CEraseDlg::MakeSkinCtrl
PUBLIC	??_7CEraseDlg@@6B@				; CEraseDlg::`vftable'
PUBLIC	??_GCEraseDlg@@UAEPAXI@Z			; CEraseDlg::`scalar deleting destructor'
PUBLIC	??_ECEraseDlg@@UAEPAXI@Z			; CEraseDlg::`vector deleting destructor'
PUBLIC	??0CSCI_WorldObject@@QAE@XZ			; CSCI_WorldObject::CSCI_WorldObject
;	COMDAT ??_7CEraseDlg@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\charsel.cpp
CONST	SEGMENT
??_7CEraseDlg@@6B@ DD FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ ; CEraseDlg::`vftable'
	DD	FLAT:??_ECEraseDlg@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CEraseDlg@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CSkinWnd@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetProcessEvents@CSkinWnd@@MAE_NXZ
	DD	FLAT:?CloseSelf@CSkinWnd@@UAEX_N@Z
	DD	FLAT:?Disable@CSkinWnd@@UAEXXZ
	DD	FLAT:?Enable@CSkinWnd@@UAEXXZ
	DD	FLAT:?EnableGameModal@CSkinWnd@@UAEXHPAH@Z
	DD	FLAT:?DisableGameModal@CSkinWnd@@UAEXHPAH_N@Z
	DD	FLAT:?MakeSkinCtrl@CEraseDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z
	DD	FLAT:?ProcessRefreshList@CSkinWnd@@UAEHXZ
	DD	FLAT:?UpdateTracking@CSkinWnd@@UAEXXZ
	DD	FLAT:?Next@CSkinWnd@@UAEXXZ
	DD	FLAT:?Previous@CSkinWnd@@UAEXXZ
CONST	ENDS
xdata$x	SEGMENT
$T159994 DD	019930520H
	DD	01H
	DD	FLAT:$T159996
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T159996 DD	0ffffffffH
	DD	FLAT:$L159992
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??0CEraseDlg@@QAE@XZ PROC NEAR				; CEraseDlg::CEraseDlg

; 646  : {

  01dc0	55		 push	 ebp
  01dc1	8b ec		 mov	 ebp, esp
  01dc3	6a ff		 push	 -1
  01dc5	68 00 00 00 00	 push	 $L159995
  01dca	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01dd0	50		 push	 eax
  01dd1	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01dd8	51		 push	 ecx
  01dd9	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  01ddc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01ddf	e8 00 00 00 00	 call	 ??0CSkinWnd@@QAE@XZ	; CSkinWnd::CSkinWnd
  01de4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  01deb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01dee	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  01df4	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@XZ ; CSCI_WorldObject::CSCI_WorldObject
  01df9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01dfc	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CEraseDlg@@6B@ ; CEraseDlg::`vftable'

; 647  : 	m_pPrompt = NULL;

  01e02	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01e05	c7 81 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+152], 0

; 648  : }

  01e0f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01e16	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01e19	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01e1c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01e23	8b e5		 mov	 esp, ebp
  01e25	5d		 pop	 ebp
  01e26	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L159992:
  003e8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003eb	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  003f0	c3		 ret	 0
$L159995:
  003f1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T159994
  003f6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CEraseDlg@@QAE@XZ ENDP				; CEraseDlg::CEraseDlg
PUBLIC	??1CEraseDlg@@UAE@XZ				; CEraseDlg::~CEraseDlg
;	COMDAT ??_GCEraseDlg@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCEraseDlg@@UAEPAXI@Z PROC NEAR			; CEraseDlg::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CEraseDlg@@UAE@XZ	; CEraseDlg::~CEraseDlg
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L153107
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L153107:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCEraseDlg@@UAEPAXI@Z ENDP				; CEraseDlg::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CEraseDlg@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CEraseDlg@@UAE@XZ PROC NEAR				; CEraseDlg::~CEraseDlg, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinWnd@@UAE@XZ	; CSkinWnd::~CSkinWnd
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CEraseDlg@@UAE@XZ ENDP				; CEraseDlg::~CEraseDlg
_TEXT	ENDS
PUBLIC	?get_pProperName@CSCI_BCharacter@@QAE?AVStringID@@XZ ; CSCI_BCharacter::get_pProperName
PUBLIC	?RequestResize@CRichEditCtrl@@QAEXXZ		; CRichEditCtrl::RequestResize
PUBLIC	?SetAllowMove@CSkinWnd@@IAEX_N@Z		; CSkinWnd::SetAllowMove
PUBLIC	?SetTransient@CSkinWnd@@IAEX_N@Z		; CSkinWnd::SetTransient
PUBLIC	?SetEventMask@CRichEditCtrl@@QAEKK@Z		; CRichEditCtrl::SetEventMask
EXTRN	?getBaseCharacter@CSCI_WorldObject@@QAE?AVCSCI_BCharacter@@XZ:NEAR ; CSCI_WorldObject::getBaseCharacter
EXTRN	??0CString@@QAE@XZ:NEAR				; CString::CString
EXTRN	?CreatePopupChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@HH@Z:NEAR ; CSkinWnd::CreatePopupChild
EXTRN	?CenterOnPoint@CSkinWnd@@QAEXHH_N@Z:NEAR	; CSkinWnd::CenterOnPoint
EXTRN	?SetPriority@CSkinWnd@@QAEXH@Z:NEAR		; CSkinWnd::SetPriority
EXTRN	?g_MouseLocation@@3UtagPOINT@@A:QWORD		; g_MouseLocation
EXTRN	?Format@CString@@QAAXPBDZZ:NEAR			; CString::Format
EXTRN	?Cut@CSkinObj@@QAEHXZ:NEAR			; CSkinObj::Cut
EXTRN	?ParseText@CSkinEdit@@QAEHPBD_N@Z:NEAR		; CSkinEdit::ParseText
EXTRN	?g_pMainWindow@@3PAVCMainWindow@@A:DWORD	; g_pMainWindow
_DATA	SEGMENT
$SG153117 DB	'W A R N I N G', 00H
	ORG $+2
$SG153118 DB	'Dlg_choice.skn', 00H
	ORG $+1
$SG153121 DB	'bn_Button00', 00H
$SG153123 DB	'No', 00H
	ORG $+1
$SG153124 DB	'bn_Button01', 00H
$SG153126 DB	'Yes', 00H
$SG153129 DB	'|c103|You are about to |c1|ERASE|c103| your toon ''|c1|%'
	DB	's|c103|''!', 0aH, 0aH, 'Are you |c1|SURE|c103|?', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T160007 DD	019930520H
	DD	01H
	DD	FLAT:$T160009
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160009 DD	0ffffffffH
	DD	FLAT:$L160005
xdata$x	ENDS
_TEXT	SEGMENT
$T160001 = -40
$T160002 = -44
$T160003 = -48
$T160004 = -52
__$EHRec$ = -12
_hObject$ = 8
_this$ = -56
_sMessage$ = -16
_bCreated$ = -20
_pCtrl$153120 = -24
?Create@CEraseDlg@@QAEHVCSCI_WorldObject@@@Z PROC NEAR	; CEraseDlg::Create

; 652  : {

  01e27	55		 push	 ebp
  01e28	8b ec		 mov	 ebp, esp
  01e2a	6a ff		 push	 -1
  01e2c	68 00 00 00 00	 push	 $L160008
  01e31	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01e37	50		 push	 eax
  01e38	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01e3f	83 ec 2c	 sub	 esp, 44			; 0000002cH
  01e42	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 653  : 	CString sMessage;

  01e45	8d 4d f0	 lea	 ecx, DWORD PTR _sMessage$[ebp]
  01e48	e8 00 00 00 00	 call	 ??0CString@@QAE@XZ	; CString::CString
  01e4d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 654  : 
; 655  : 	m_hObject = hObject;

  01e54	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01e57	66 8b 4d 08	 mov	 cx, WORD PTR _hObject$[ebp]
  01e5b	66 89 88 94 00
	00 00		 mov	 WORD PTR [eax+148], cx

; 656  : 
; 657  : 	SetTransient( false );

  01e62	6a 00		 push	 0
  01e64	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e67	e8 00 00 00 00	 call	 ?SetTransient@CSkinWnd@@IAEX_N@Z ; CSkinWnd::SetTransient

; 658  : 	SetPriority( swPriModal );

  01e6c	6a 06		 push	 6
  01e6e	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e71	e8 00 00 00 00	 call	 ?SetPriority@CSkinWnd@@QAEXH@Z ; CSkinWnd::SetPriority

; 659  : 
; 660  : 	BOOL bCreated = CreatePopupChild ( "Dlg_choice.skn", "W A R N I N G", CRect ( 0, 0, 0, 0 ), g_pMainWindow, FALSE );

  01e76	6a 01		 push	 1
  01e78	6a 00		 push	 0
  01e7a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pMainWindow@@3PAVCMainWindow@@A ; g_pMainWindow
  01e80	52		 push	 edx
  01e81	6a 00		 push	 0
  01e83	6a 00		 push	 0
  01e85	6a 00		 push	 0
  01e87	6a 00		 push	 0
  01e89	8d 4d d8	 lea	 ecx, DWORD PTR $T160001[ebp]
  01e8c	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect
  01e91	50		 push	 eax
  01e92	68 00 00 00 00	 push	 OFFSET FLAT:$SG153117
  01e97	68 00 00 00 00	 push	 OFFSET FLAT:$SG153118
  01e9c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01e9f	e8 00 00 00 00	 call	 ?CreatePopupChild@CSkinWnd@@QAEHPBD0ABVCRect@@PAVCWnd@@HH@Z ; CSkinWnd::CreatePopupChild
  01ea4	89 45 ec	 mov	 DWORD PTR _bCreated$[ebp], eax

; 661  : 
; 662  : 	if ( bCreated ) {

  01ea7	83 7d ec 00	 cmp	 DWORD PTR _bCreated$[ebp], 0
  01eab	0f 84 e8 00 00
	00		 je	 $L153119

; 663  : 		CSkinCtrl* pCtrl = FindControl( "bn_Button00" );

  01eb1	68 00 00 00 00	 push	 OFFSET FLAT:$SG153121
  01eb6	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01eb9	e8 00 00 00 00	 call	 ?FindControl@CSkinWnd@@QAEPAVCSkinCtrl@@PBD@Z ; CSkinWnd::FindControl
  01ebe	89 45 e8	 mov	 DWORD PTR _pCtrl$153120[ebp], eax

; 664  : 		assert( NULL != pCtrl );
; 665  : 
; 666  : 		pCtrl->SetText( "No" );

  01ec1	68 00 00 00 00	 push	 OFFSET FLAT:$SG153123
  01ec6	8b 45 e8	 mov	 eax, DWORD PTR _pCtrl$153120[ebp]
  01ec9	50		 push	 eax
  01eca	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01ecf	83 c4 08	 add	 esp, 8

; 667  : 
; 668  : 		pCtrl = FindControl( "bn_Button01" );

  01ed2	68 00 00 00 00	 push	 OFFSET FLAT:$SG153124
  01ed7	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01eda	e8 00 00 00 00	 call	 ?FindControl@CSkinWnd@@QAEPAVCSkinCtrl@@PBD@Z ; CSkinWnd::FindControl
  01edf	89 45 e8	 mov	 DWORD PTR _pCtrl$153120[ebp], eax

; 669  : 		assert( NULL != pCtrl );
; 670  : 
; 671  : 		pCtrl->SetText( "Yes" );

  01ee2	68 00 00 00 00	 push	 OFFSET FLAT:$SG153126
  01ee7	8b 4d e8	 mov	 ecx, DWORD PTR _pCtrl$153120[ebp]
  01eea	51		 push	 ecx
  01eeb	e8 00 00 00 00	 call	 ?SetText@CSkinObj@@QAAHPADZZ ; CSkinObj::SetText
  01ef0	83 c4 08	 add	 esp, 8

; 672  : 
; 673  : 		sMessage.Format( "|c103|You are about to |c1|ERASE|c103| your toon '|c1|%s|c103|'!\n\nAre you |c1|SURE|c103|?", *hObject.getBaseCharacter().get_pProperName() );

  01ef3	8d 55 d0	 lea	 edx, DWORD PTR $T160003[ebp]
  01ef6	52		 push	 edx
  01ef7	8d 45 d4	 lea	 eax, DWORD PTR $T160002[ebp]
  01efa	50		 push	 eax
  01efb	8d 4d 08	 lea	 ecx, DWORD PTR _hObject$[ebp]
  01efe	e8 00 00 00 00	 call	 ?getBaseCharacter@CSCI_WorldObject@@QAE?AVCSCI_BCharacter@@XZ ; CSCI_WorldObject::getBaseCharacter
  01f03	8b c8		 mov	 ecx, eax
  01f05	e8 00 00 00 00	 call	 ?get_pProperName@CSCI_BCharacter@@QAE?AVStringID@@XZ ; CSCI_BCharacter::get_pProperName
  01f0a	8b c8		 mov	 ecx, eax
  01f0c	e8 00 00 00 00	 call	 ??DStringID@@QAEPADXZ	; StringID::operator*
  01f11	50		 push	 eax
  01f12	68 00 00 00 00	 push	 OFFSET FLAT:$SG153129
  01f17	8d 4d f0	 lea	 ecx, DWORD PTR _sMessage$[ebp]
  01f1a	51		 push	 ecx
  01f1b	e8 00 00 00 00	 call	 ?Format@CString@@QAAXPBDZZ ; CString::Format
  01f20	83 c4 0c	 add	 esp, 12			; 0000000cH

; 674  : 
; 675  : 		m_pPrompt->CSkinObj::Cut();

  01f23	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  01f26	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  01f2c	83 c1 60	 add	 ecx, 96			; 00000060H
  01f2f	e8 00 00 00 00	 call	 ?Cut@CSkinObj@@QAEHXZ	; CSkinObj::Cut

; 676  : 		m_pPrompt->ParseText( sMessage );

  01f34	6a 00		 push	 0
  01f36	8d 4d f0	 lea	 ecx, DWORD PTR _sMessage$[ebp]
  01f39	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  01f3e	50		 push	 eax
  01f3f	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  01f42	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01f48	e8 00 00 00 00	 call	 ?ParseText@CSkinEdit@@QAEHPBD_N@Z ; CSkinEdit::ParseText

; 677  : 
; 678  : 		m_pPrompt->SetEventMask( ENM_REQUESTRESIZE ); 

  01f4d	68 00 00 04 00	 push	 262144			; 00040000H
  01f52	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f55	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  01f5b	e8 00 00 00 00	 call	 ?SetEventMask@CRichEditCtrl@@QAEKK@Z ; CRichEditCtrl::SetEventMask

; 679  : 		m_pPrompt->RequestResize();

  01f60	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  01f63	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  01f69	e8 00 00 00 00	 call	 ?RequestResize@CRichEditCtrl@@QAEXXZ ; CRichEditCtrl::RequestResize

; 680  : 
; 681  : 		SetAllowMove( false );

  01f6e	6a 00		 push	 0
  01f70	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f73	e8 00 00 00 00	 call	 ?SetAllowMove@CSkinWnd@@IAEX_N@Z ; CSkinWnd::SetAllowMove

; 682  : 		CenterOnPoint ( g_MouseLocation.x, g_MouseLocation.y );

  01f78	6a 01		 push	 1
  01f7a	a1 04 00 00 00	 mov	 eax, DWORD PTR ?g_MouseLocation@@3UtagPOINT@@A+4
  01f7f	50		 push	 eax
  01f80	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_MouseLocation@@3UtagPOINT@@A
  01f86	51		 push	 ecx
  01f87	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f8a	e8 00 00 00 00	 call	 ?CenterOnPoint@CSkinWnd@@QAEXHH_N@Z ; CSkinWnd::CenterOnPoint

; 683  : 
; 684  : 		ShowWindow( SW_SHOW );

  01f8f	6a 05		 push	 5
  01f91	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  01f94	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L153119:

; 686  : 
; 687  : 	return bCreated;

  01f99	8b 55 ec	 mov	 edx, DWORD PTR _bCreated$[ebp]
  01f9c	89 55 cc	 mov	 DWORD PTR $T160004[ebp], edx
  01f9f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01fa6	8d 4d f0	 lea	 ecx, DWORD PTR _sMessage$[ebp]
  01fa9	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  01fae	8b 45 cc	 mov	 eax, DWORD PTR $T160004[ebp]

; 688  : }

  01fb1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01fb4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  01fbb	8b e5		 mov	 esp, ebp
  01fbd	5d		 pop	 ebp
  01fbe	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L160005:
  003fb	8d 4d f0	 lea	 ecx, DWORD PTR _sMessage$[ebp]
  003fe	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00403	c3		 ret	 0
$L160008:
  00404	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160007
  00409	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Create@CEraseDlg@@QAEHVCSCI_WorldObject@@@Z ENDP	; CEraseDlg::Create
PUBLIC	??0CEraseToonBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@VCSCI_WorldObject@@@Z ; CEraseToonBtn::CEraseToonBtn
PUBLIC	??8@YG_NPBDABVCString@@@Z			; operator==
EXTRN	?Find@CString@@QBEHPBDH@Z:NEAR			; CString::Find
EXTRN	??0CSkinEdit@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z:NEAR ; CSkinEdit::CSkinEdit
EXTRN	??0COkBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z:NEAR	; COkBtn::COkBtn
_DATA	SEGMENT
	ORG $+2
$SG153139 DB	'_', 00H
	ORG $+2
$SG153141 DB	'prompt', 00H
	ORG $+1
$SG153149 DB	'bn_Button01', 00H
$SG153158 DB	'bn_Button00', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T160045 DD	019930520H
	DD	06H
	DD	FLAT:$T160047
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160047 DD	0ffffffffH
	DD	FLAT:$L160034
	DD	00H
	DD	FLAT:$L160035
	DD	01H
	DD	FLAT:$L160036
	DD	02H
	DD	FLAT:$L160037
	DD	02H
	DD	FLAT:$L160039
	DD	02H
	DD	FLAT:$L160041
xdata$x	ENDS
_TEXT	SEGMENT
$T160011 = -24
$T160012 = -28
$T160013 = -32
$T160016 = -36
$T160019 = -40
$T160020 = -44
$T160021 = -48
$T160022 = -52
$T160023 = -56
$T160026 = -60
$T160027 = -64
$T160028 = -68
$T160029 = -72
$T160032 = -76
$T160033 = -80
__$EHRec$ = -12
_obj$ = 8
_this$ = -84
_name$ = -16
_id$ = -20
?MakeSkinCtrl@CEraseDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z PROC NEAR ; CEraseDlg::MakeSkinCtrl

; 692  : {

  01fc1	55		 push	 ebp
  01fc2	8b ec		 mov	 ebp, esp
  01fc4	6a ff		 push	 -1
  01fc6	68 00 00 00 00	 push	 $L160046
  01fcb	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01fd1	50		 push	 eax
  01fd2	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01fd9	83 ec 78	 sub	 esp, 120		; 00000078H
  01fdc	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx
  01fdf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 693  : 	// the type of the control is specified by the left characters of the name up to the _
; 694  : 	CString name = obj.GetName();

  01fe6	8d 45 f0	 lea	 eax, DWORD PTR _name$[ebp]
  01fe9	50		 push	 eax
  01fea	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  01fed	e8 00 00 00 00	 call	 ?GetName@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetName
  01ff2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 695  : 	CString id = name.Left ( name.Find ( "_", 0 ) );

  01ff6	6a 00		 push	 0
  01ff8	68 00 00 00 00	 push	 OFFSET FLAT:$SG153139
  01ffd	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  02000	e8 00 00 00 00	 call	 ?Find@CString@@QBEHPBDH@Z ; CString::Find
  02005	50		 push	 eax
  02006	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  02009	51		 push	 ecx
  0200a	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  0200d	e8 00 00 00 00	 call	 ?Left@CString@@QBE?AV1@H@Z ; CString::Left
  02012	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 696  : 
; 697  : 	if ( name == "prompt" ) {

  02016	68 00 00 00 00	 push	 OFFSET FLAT:$SG153141
  0201b	8d 55 f0	 lea	 edx, DWORD PTR _name$[ebp]
  0201e	52		 push	 edx
  0201f	e8 00 00 00 00	 call	 ??8@YG_NABVCString@@PBD@Z ; operator==
  02024	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02029	85 c0		 test	 eax, eax
  0202b	0f 84 c8 00 00
	00		 je	 $L153140

; 698  : 		m_pPrompt = new CSkinEdit ( obj, this, 700, CSkinEdit::CENTER | CSkinEdit::MULTILINE | CSkinEdit::READONLY, false, false );

  02031	68 d8 00 00 00	 push	 216			; 000000d8H
  02036	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0203b	89 45 e4	 mov	 DWORD PTR $T160012[ebp], eax
  0203e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  02042	83 7d e4 00	 cmp	 DWORD PTR $T160012[ebp], 0
  02046	74 3b		 je	 SHORT $L160014
  02048	6a 00		 push	 0
  0204a	6a 00		 push	 0
  0204c	6a 00		 push	 0
  0204e	68 05 08 00 00	 push	 2053			; 00000805H
  02053	68 bc 02 00 00	 push	 700			; 000002bcH
  02058	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  0205b	50		 push	 eax
  0205c	83 ec 08	 sub	 esp, 8
  0205f	8b cc		 mov	 ecx, esp
  02061	89 65 e0	 mov	 DWORD PTR $T160013[ebp], esp
  02064	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  02067	52		 push	 edx
  02068	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0206d	89 45 a8	 mov	 DWORD PTR -88+[ebp], eax
  02070	8b 4d e4	 mov	 ecx, DWORD PTR $T160012[ebp]
  02073	e8 00 00 00 00	 call	 ??0CSkinEdit@@QAE@VCSkinObj@@PAVCSkinWnd@@IK_N22@Z ; CSkinEdit::CSkinEdit
  02078	89 45 a4	 mov	 DWORD PTR -92+[ebp], eax
  0207b	8b 45 a4	 mov	 eax, DWORD PTR -92+[ebp]
  0207e	89 45 a0	 mov	 DWORD PTR -96+[ebp], eax
  02081	eb 07		 jmp	 SHORT $L160015
$L160014:
  02083	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR -96+[ebp], 0
$L160015:
  0208a	8b 4d a0	 mov	 ecx, DWORD PTR -96+[ebp]
  0208d	89 4d e8	 mov	 DWORD PTR $T160011[ebp], ecx
  02090	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  02094	8b 55 ac	 mov	 edx, DWORD PTR _this$[ebp]
  02097	8b 45 e8	 mov	 eax, DWORD PTR $T160011[ebp]
  0209a	89 82 98 00 00
	00		 mov	 DWORD PTR [edx+152], eax

; 699  : 		return m_pPrompt;

  020a0	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  020a3	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  020aa	74 11		 je	 SHORT $L160017
  020ac	8b 55 ac	 mov	 edx, DWORD PTR _this$[ebp]
  020af	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  020b5	83 c0 60	 add	 eax, 96			; 00000060H
  020b8	89 45 9c	 mov	 DWORD PTR -100+[ebp], eax
  020bb	eb 07		 jmp	 SHORT $L160018
$L160017:
  020bd	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR -100+[ebp], 0
$L160018:
  020c4	8b 4d 9c	 mov	 ecx, DWORD PTR -100+[ebp]
  020c7	89 4d dc	 mov	 DWORD PTR $T160016[ebp], ecx
  020ca	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  020ce	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  020d1	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  020d6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  020da	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  020dd	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  020e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  020e9	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  020ec	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  020f1	8b 45 dc	 mov	 eax, DWORD PTR $T160016[ebp]
  020f4	e9 ac 01 00 00	 jmp	 $L153134
$L153140:

; 701  : 
; 702  : 	if ( "bn_Button01" == name ) {

  020f9	8d 55 f0	 lea	 edx, DWORD PTR _name$[ebp]
  020fc	52		 push	 edx
  020fd	68 00 00 00 00	 push	 OFFSET FLAT:$SG153149
  02102	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  02107	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0210c	85 c0		 test	 eax, eax
  0210e	0f 84 9c 00 00
	00		 je	 $L153148

; 703  : 		return new CEraseToonBtn( obj, this, m_hObject );

  02114	6a 18		 push	 24			; 00000018H
  02116	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0211b	83 c4 04	 add	 esp, 4
  0211e	89 45 d0	 mov	 DWORD PTR $T160021[ebp], eax
  02121	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  02125	83 7d d0 00	 cmp	 DWORD PTR $T160021[ebp], 0
  02129	74 3f		 je	 SHORT $L160024
  0212b	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  0212e	05 94 00 00 00	 add	 eax, 148		; 00000094H
  02133	51		 push	 ecx
  02134	8b cc		 mov	 ecx, esp
  02136	89 65 cc	 mov	 DWORD PTR $T160022[ebp], esp
  02139	50		 push	 eax
  0213a	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@ABV0@@Z ; CSCI_WorldObject::CSCI_WorldObject
  0213f	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  02142	51		 push	 ecx
  02143	83 ec 08	 sub	 esp, 8
  02146	8b cc		 mov	 ecx, esp
  02148	89 65 c8	 mov	 DWORD PTR $T160023[ebp], esp
  0214b	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  0214e	52		 push	 edx
  0214f	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  02154	89 45 98	 mov	 DWORD PTR -104+[ebp], eax
  02157	8b 4d d0	 mov	 ecx, DWORD PTR $T160021[ebp]
  0215a	e8 00 00 00 00	 call	 ??0CEraseToonBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@VCSCI_WorldObject@@@Z ; CEraseToonBtn::CEraseToonBtn
  0215f	89 45 94	 mov	 DWORD PTR -108+[ebp], eax
  02162	8b 45 94	 mov	 eax, DWORD PTR -108+[ebp]
  02165	89 45 90	 mov	 DWORD PTR -112+[ebp], eax
  02168	eb 07		 jmp	 SHORT $L160025
$L160024:
  0216a	c7 45 90 00 00
	00 00		 mov	 DWORD PTR -112+[ebp], 0
$L160025:
  02171	8b 4d 90	 mov	 ecx, DWORD PTR -112+[ebp]
  02174	89 4d d4	 mov	 DWORD PTR $T160020[ebp], ecx
  02177	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0217b	8b 55 d4	 mov	 edx, DWORD PTR $T160020[ebp]
  0217e	89 55 d8	 mov	 DWORD PTR $T160019[ebp], edx
  02181	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  02185	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  02188	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0218d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  02191	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  02194	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  02199	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  021a0	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  021a3	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  021a8	8b 45 d8	 mov	 eax, DWORD PTR $T160019[ebp]
  021ab	e9 f5 00 00 00	 jmp	 $L153134
$L153148:

; 705  : 
; 706  : 	if ( "bn_Button00" == name ) {

  021b0	8d 45 f0	 lea	 eax, DWORD PTR _name$[ebp]
  021b3	50		 push	 eax
  021b4	68 00 00 00 00	 push	 OFFSET FLAT:$SG153158
  021b9	e8 00 00 00 00	 call	 ??8@YG_NPBDABVCString@@@Z ; operator==
  021be	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  021c3	85 c0		 test	 eax, eax
  021c5	0f 84 85 00 00
	00		 je	 $L153157

; 707  : 		return new COkBtn( obj, this );

  021cb	6a 14		 push	 20			; 00000014H
  021cd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  021d2	83 c4 04	 add	 esp, 4
  021d5	89 45 bc	 mov	 DWORD PTR $T160028[ebp], eax
  021d8	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  021dc	83 7d bc 00	 cmp	 DWORD PTR $T160028[ebp], 0
  021e0	74 2b		 je	 SHORT $L160030
  021e2	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  021e5	51		 push	 ecx
  021e6	83 ec 08	 sub	 esp, 8
  021e9	8b cc		 mov	 ecx, esp
  021eb	89 65 b8	 mov	 DWORD PTR $T160029[ebp], esp
  021ee	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  021f1	52		 push	 edx
  021f2	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  021f7	89 45 8c	 mov	 DWORD PTR -116+[ebp], eax
  021fa	8b 4d bc	 mov	 ecx, DWORD PTR $T160028[ebp]
  021fd	e8 00 00 00 00	 call	 ??0COkBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; COkBtn::COkBtn
  02202	89 45 88	 mov	 DWORD PTR -120+[ebp], eax
  02205	8b 45 88	 mov	 eax, DWORD PTR -120+[ebp]
  02208	89 45 84	 mov	 DWORD PTR -124+[ebp], eax
  0220b	eb 07		 jmp	 SHORT $L160031
$L160030:
  0220d	c7 45 84 00 00
	00 00		 mov	 DWORD PTR -124+[ebp], 0
$L160031:
  02214	8b 4d 84	 mov	 ecx, DWORD PTR -124+[ebp]
  02217	89 4d c0	 mov	 DWORD PTR $T160027[ebp], ecx
  0221a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0221e	8b 55 c0	 mov	 edx, DWORD PTR $T160027[ebp]
  02221	89 55 c4	 mov	 DWORD PTR $T160026[ebp], edx
  02224	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  02228	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  0222b	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  02230	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  02234	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  02237	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0223c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02243	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  02246	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0224b	8b 45 c4	 mov	 eax, DWORD PTR $T160026[ebp]
  0224e	eb 55		 jmp	 SHORT $L153134
$L153157:

; 709  : 
; 710  : 	// default to normal behavior
; 711  : 	return CSkinWnd::MakeSkinCtrl ( obj );

  02250	83 ec 08	 sub	 esp, 8
  02253	8b cc		 mov	 ecx, esp
  02255	89 65 b0	 mov	 DWORD PTR $T160033[ebp], esp
  02258	8d 45 08	 lea	 eax, DWORD PTR _obj$[ebp]
  0225b	50		 push	 eax
  0225c	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  02261	89 45 80	 mov	 DWORD PTR -128+[ebp], eax
  02264	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  02267	e8 00 00 00 00	 call	 ?MakeSkinCtrl@CSkinWnd@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ; CSkinWnd::MakeSkinCtrl
  0226c	89 85 7c ff ff
	ff		 mov	 DWORD PTR -132+[ebp], eax
  02272	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR -132+[ebp]
  02278	89 4d b4	 mov	 DWORD PTR $T160032[ebp], ecx
  0227b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0227f	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  02282	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  02287	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0228b	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  0228e	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  02293	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0229a	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  0229d	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  022a2	8b 45 b4	 mov	 eax, DWORD PTR $T160032[ebp]
$L153134:

; 712  : }

  022a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  022a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  022af	8b e5		 mov	 esp, ebp
  022b1	5d		 pop	 ebp
  022b2	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L160034:
  0040e	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00411	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  00416	c3		 ret	 0
$L160035:
  00417	8d 4d f0	 lea	 ecx, DWORD PTR _name$[ebp]
  0041a	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0041f	c3		 ret	 0
$L160036:
  00420	8d 4d ec	 lea	 ecx, DWORD PTR _id$[ebp]
  00423	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  00428	c3		 ret	 0
$L160037:
  00429	8b 45 e4	 mov	 eax, DWORD PTR $T160012[ebp]
  0042c	50		 push	 eax
  0042d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00432	c3		 ret	 0
$L160039:
  00433	8b 45 d0	 mov	 eax, DWORD PTR $T160021[ebp]
  00436	50		 push	 eax
  00437	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0043c	59		 pop	 ecx
  0043d	c3		 ret	 0
$L160041:
  0043e	8b 45 bc	 mov	 eax, DWORD PTR $T160028[ebp]
  00441	50		 push	 eax
  00442	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00447	59		 pop	 ecx
  00448	c3		 ret	 0
$L160046:
  00449	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160045
  0044e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeSkinCtrl@CEraseDlg@@UAEPAVCSkinCtrl@@VCSkinObj@@@Z ENDP ; CEraseDlg::MakeSkinCtrl
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z		; CWnd::MoveWindow
PUBLIC	?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetWindowRect
EXTRN	?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z:NEAR	; CWnd::ScreenToClient
_TEXT	SEGMENT
_pNMHDR$ = 8
_this$ = -44
_prr$ = -40
_promptRect$ = -16
_myRect$ = -32
_nAdjust$ = -36
?OnResize@CEraseDlg@@QAEXPAUtagNMHDR@@PAJ@Z PROC NEAR	; CEraseDlg::OnResize

; 715  : {

  022b5	55		 push	 ebp
  022b6	8b ec		 mov	 ebp, esp
  022b8	83 ec 2c	 sub	 esp, 44			; 0000002cH
  022bb	56		 push	 esi
  022bc	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 716  : 	REQRESIZE* prr = (REQRESIZE*)pNMHDR;

  022bf	8b 45 08	 mov	 eax, DWORD PTR _pNMHDR$[ebp]
  022c2	89 45 d8	 mov	 DWORD PTR _prr$[ebp], eax

; 717  : 
; 718  : 	CRect	promptRect;

  022c5	8d 4d f0	 lea	 ecx, DWORD PTR _promptRect$[ebp]
  022c8	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 719  : 	CRect	myRect;

  022cd	8d 4d e0	 lea	 ecx, DWORD PTR _myRect$[ebp]
  022d0	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 720  : 	int		nAdjust;
; 721  : 
; 722  : 	m_pPrompt->GetWindowRect( &promptRect );

  022d5	8d 4d f0	 lea	 ecx, DWORD PTR _promptRect$[ebp]
  022d8	51		 push	 ecx
  022d9	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  022dc	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  022e2	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 723  : 	ScreenToClient( &promptRect );

  022e7	8d 45 f0	 lea	 eax, DWORD PTR _promptRect$[ebp]
  022ea	50		 push	 eax
  022eb	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  022ee	e8 00 00 00 00	 call	 ?ScreenToClient@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::ScreenToClient

; 724  : 
; 725  : 	CWnd::GetWindowRect( &myRect );

  022f3	8d 4d e0	 lea	 ecx, DWORD PTR _myRect$[ebp]
  022f6	51		 push	 ecx
  022f7	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  022fa	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 726  : 
; 727  : 	nAdjust = ( prr->rc.bottom - prr->rc.top ) - promptRect.Height();

  022ff	8b 55 d8	 mov	 edx, DWORD PTR _prr$[ebp]
  02302	8b 45 d8	 mov	 eax, DWORD PTR _prr$[ebp]
  02305	8b 72 18	 mov	 esi, DWORD PTR [edx+24]
  02308	2b 70 10	 sub	 esi, DWORD PTR [eax+16]
  0230b	8d 4d f0	 lea	 ecx, DWORD PTR _promptRect$[ebp]
  0230e	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  02313	2b f0		 sub	 esi, eax
  02315	89 75 dc	 mov	 DWORD PTR _nAdjust$[ebp], esi

; 728  : 
; 729  : 	promptRect.bottom += nAdjust;

  02318	8b 4d fc	 mov	 ecx, DWORD PTR _promptRect$[ebp+12]
  0231b	03 4d dc	 add	 ecx, DWORD PTR _nAdjust$[ebp]
  0231e	89 4d fc	 mov	 DWORD PTR _promptRect$[ebp+12], ecx

; 730  : 
; 731  : 	m_pPrompt->MoveWindow( &promptRect, false );

  02321	6a 00		 push	 0
  02323	8d 55 f0	 lea	 edx, DWORD PTR _promptRect$[ebp]
  02326	52		 push	 edx
  02327	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0232a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  02330	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::MoveWindow

; 732  : 
; 733  : 	myRect.bottom += nAdjust;

  02335	8b 4d ec	 mov	 ecx, DWORD PTR _myRect$[ebp+12]
  02338	03 4d dc	 add	 ecx, DWORD PTR _nAdjust$[ebp]
  0233b	89 4d ec	 mov	 DWORD PTR _myRect$[ebp+12], ecx

; 734  : 
; 735  : 	MoveWindow( &myRect, true );

  0233e	6a 01		 push	 1
  02340	8d 55 e0	 lea	 edx, DWORD PTR _myRect$[ebp]
  02343	52		 push	 edx
  02344	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  02347	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ; CWnd::MoveWindow

; 736  : }

  0234c	5e		 pop	 esi
  0234d	8b e5		 mov	 esp, ebp
  0234f	5d		 pop	 ebp
  02350	c2 08 00	 ret	 8
?OnResize@CEraseDlg@@QAEXPAUtagNMHDR@@PAJ@Z ENDP	; CEraseDlg::OnResize
_TEXT	ENDS
PUBLIC	?OnActivate@CEraseToonBtn@@UAEXFF@Z		; CEraseToonBtn::OnActivate
PUBLIC	??_7CEraseToonBtn@@6B@				; CEraseToonBtn::`vftable'
PUBLIC	??_GCEraseToonBtn@@UAEPAXI@Z			; CEraseToonBtn::`scalar deleting destructor'
PUBLIC	??_ECEraseToonBtn@@UAEPAXI@Z			; CEraseToonBtn::`vector deleting destructor'
;	COMDAT ??_7CEraseToonBtn@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\charsel.cpp
CONST	SEGMENT
??_7CEraseToonBtn@@6B@ DD FLAT:??_ECEraseToonBtn@@UAEPAXI@Z ; CEraseToonBtn::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinBtn@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinCtrl@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinBtn@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CEraseToonBtn@@UAEXFF@Z
CONST	ENDS
xdata$x	SEGMENT
$T160055 DD	019930520H
	DD	02H
	DD	FLAT:$T160057
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160057 DD	0ffffffffH
	DD	FLAT:$L160051
	DD	00H
	DD	FLAT:$L160053
xdata$x	ENDS
_TEXT	SEGMENT
$T160050 = -16
__$EHRec$ = -12
_obj$ = 8
_pParent$ = 16
_hObject$ = 20
_this$ = -20
??0CEraseToonBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@VCSCI_WorldObject@@@Z PROC NEAR ; CEraseToonBtn::CEraseToonBtn

; 742  : {

  02353	55		 push	 ebp
  02354	8b ec		 mov	 ebp, esp
  02356	6a ff		 push	 -1
  02358	68 00 00 00 00	 push	 $L160056
  0235d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  02363	50		 push	 eax
  02364	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0236b	83 ec 10	 sub	 esp, 16			; 00000010H
  0236e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  02371	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  02378	8b 45 10	 mov	 eax, DWORD PTR _pParent$[ebp]
  0237b	50		 push	 eax
  0237c	83 ec 08	 sub	 esp, 8
  0237f	8b cc		 mov	 ecx, esp
  02381	89 65 f0	 mov	 DWORD PTR $T160050[ebp], esp
  02384	8d 55 08	 lea	 edx, DWORD PTR _obj$[ebp]
  02387	52		 push	 edx
  02388	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  0238d	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  02390	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  02393	e8 00 00 00 00	 call	 ??0CSkinBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@@Z ; CSkinBtn::CSkinBtn
  02398	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  0239b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0239f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  023a2	83 c1 14	 add	 ecx, 20			; 00000014H
  023a5	e8 00 00 00 00	 call	 ??0CSCI_WorldObject@@QAE@XZ ; CSCI_WorldObject::CSCI_WorldObject
  023aa	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  023ad	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CEraseToonBtn@@6B@ ; CEraseToonBtn::`vftable'

; 743  : 	m_hObject = hObject;

  023b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  023b6	66 8b 55 14	 mov	 dx, WORD PTR _hObject$[ebp]
  023ba	66 89 51 14	 mov	 WORD PTR [ecx+20], dx

; 744  : }

  023be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  023c5	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  023c8	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  023cd	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  023d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  023d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  023da	8b e5		 mov	 esp, ebp
  023dc	5d		 pop	 ebp
  023dd	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
$L160051:
  00453	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00456	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0045b	c3		 ret	 0
$L160053:
  0045c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0045f	e8 00 00 00 00	 call	 ??1CSkinBtn@@UAE@XZ	; CSkinBtn::~CSkinBtn
  00464	c3		 ret	 0
$L160056:
  00465	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160055
  0046a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CEraseToonBtn@@QAE@VCSkinObj@@PAVCSkinWnd@@VCSCI_WorldObject@@@Z ENDP ; CEraseToonBtn::CEraseToonBtn
PUBLIC	??1CEraseToonBtn@@UAE@XZ			; CEraseToonBtn::~CEraseToonBtn
;	COMDAT ??_GCEraseToonBtn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCEraseToonBtn@@UAEPAXI@Z PROC NEAR			; CEraseToonBtn::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CEraseToonBtn@@UAE@XZ ; CEraseToonBtn::~CEraseToonBtn
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L153187
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L153187:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCEraseToonBtn@@UAEPAXI@Z ENDP			; CEraseToonBtn::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CEraseToonBtn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CEraseToonBtn@@UAE@XZ PROC NEAR			; CEraseToonBtn::~CEraseToonBtn, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinBtn@@UAE@XZ	; CSkinBtn::~CSkinBtn
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CEraseToonBtn@@UAE@XZ ENDP				; CEraseToonBtn::~CEraseToonBtn
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4
?OnActivate@CEraseToonBtn@@UAEXFF@Z PROC NEAR		; CEraseToonBtn::OnActivate

; 748  : {

  023e0	55		 push	 ebp
  023e1	8b ec		 mov	 ebp, esp
  023e3	51		 push	 ecx
  023e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 749  : 	eventMgr->PostWinCommand ( _DEVT_CHARSEL_ERASE, m_hObject );

  023e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  023ea	83 c1 14	 add	 ecx, 20			; 00000014H
  023ed	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  023f2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  023f7	50		 push	 eax
  023f8	6a 0f		 push	 15			; 0000000fH
  023fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  023ff	8b 10		 mov	 edx, DWORD PTR [eax]
  02401	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eventMgr@@3PAUEventMgr@@A ; eventMgr
  02407	ff 52 20	 call	 DWORD PTR [edx+32]

; 750  : 	m_pParentWnd->CloseSelf();

  0240a	6a 00		 push	 0
  0240c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0240f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02412	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02415	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  02418	8b 10		 mov	 edx, DWORD PTR [eax]
  0241a	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 751  : }

  02420	8b e5		 mov	 esp, ebp
  02422	5d		 pop	 ebp
  02423	c2 08 00	 ret	 8
?OnActivate@CEraseToonBtn@@UAEXFF@Z ENDP		; CEraseToonBtn::OnActivate
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT

; 21   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 27   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8
??2CObject@@SGPAXI@Z PROC NEAR				; CObject::operator new, COMDAT

; 33   : 	{ return ::operator new(nSize); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nSize$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??2CObject@@SGPAXI@Z ENDP				; CObject::operator new
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT

; 37   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT

; 39   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4
??BCString@@QBEPBDXZ PROC NEAR				; CString::operator char const *, COMDAT

; 151  : 	{ return m_pchData; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??BCString@@QBEPBDXZ ENDP				; CString::operator char const *
_TEXT	ENDS
PUBLIC	?Compare@CString@@QBEHPBD@Z			; CString::Compare
;	COMDAT ??8@YG_NABVCString@@PBD@Z
_TEXT	SEGMENT
_s1$ = 8
_s2$ = 12
??8@YG_NABVCString@@PBD@Z PROC NEAR			; operator==, COMDAT

; 183  : 	{ return s1.Compare(s2) == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _s2$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _s1$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Compare@CString@@QBEHPBD@Z ; CString::Compare
  0000f	f7 d8		 neg	 eax
  00011	1b c0		 sbb	 eax, eax
  00013	40		 inc	 eax
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??8@YG_NABVCString@@PBD@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	__tcscmp
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT
_lpsz$ = 8
_this$ = -4
?Compare@CString@@QBEHPBD@Z PROC NEAR			; CString::Compare, COMDAT

; 157  : 	{ ASSERT(AfxIsValidString(lpsz)); return _tcscmp(m_pchData, lpsz); }    // MBCS/Unicode aware

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpsz$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 __tcscmp
  00016	83 c4 08	 add	 esp, 8
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?Compare@CString@@QBEHPBD@Z ENDP			; CString::Compare
_TEXT	ENDS
EXTRN	__imp___mbscmp:NEAR
;	COMDAT __tcscmp
_TEXT	SEGMENT
__s1$ = 8
__s2$ = 12
__tcscmp PROC NEAR					; COMDAT

; 797  : __inline int _tcscmp(_CPC _s1,_CPC _s2) {return _mbscmp((_CPUC)_s1,(_CPUC)_s2);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __s2$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000a	51		 push	 ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbscmp
  00011	83 c4 08	 add	 esp, 8
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
__tcscmp ENDP
_TEXT	ENDS
;	COMDAT ??8@YG_NPBDABVCString@@@Z
_TEXT	SEGMENT
_s1$ = 8
_s2$ = 12
??8@YG_NPBDABVCString@@@Z PROC NEAR			; operator==, COMDAT

; 185  : 	{ return s2.Compare(s1) == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _s2$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Compare@CString@@QBEHPBD@Z ; CString::Compare
  0000f	f7 d8		 neg	 eax
  00011	1b c0		 sbb	 eax, eax
  00013	40		 inc	 eax
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??8@YG_NPBDABVCString@@@Z ENDP				; operator==
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CPoint@@QAE@XZ PROC NEAR				; CPoint::CPoint, COMDAT

; 83   : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CPoint@@QAE@XZ ENDP					; CPoint::CPoint
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CRect@@QAE@XZ PROC NEAR				; CRect::CRect, COMDAT

; 132  : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT
_l$ = 8
_t$ = 12
_r$ = 16
_b$ = 20
_this$ = -4
??0CRect@@QAE@HHHH@Z PROC NEAR				; CRect::CRect, COMDAT

; 134  : 	{ left = l; top = t; right = r; bottom = b; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _l$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _r$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _b$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
??0CRect@@QAE@HHHH@Z ENDP				; CRect::CRect
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Height@CRect@@QBEHXZ PROC NEAR				; CRect::Height, COMDAT

; 147  : 	{ return bottom - top; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
_TEXT	ENDS
PUBLIC	??0CPoint@@QAE@HH@Z				; CPoint::CPoint
;	COMDAT ?CenterPoint@CRect@@QBE?AVCPoint@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -12
$T160077 = -8
?CenterPoint@CRect@@QBE?AVCPoint@@XZ PROC NEAR		; CRect::CenterPoint, COMDAT

; 159  : 	{ return CPoint((left+right)/2, (top+bottom)/2); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  00015	99		 cdq
  00016	2b c2		 sub	 eax, edx
  00018	d1 f8		 sar	 eax, 1
  0001a	50		 push	 eax
  0001b	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00026	99		 cdq
  00027	2b c2		 sub	 eax, edx
  00029	d1 f8		 sar	 eax, 1
  0002b	50		 push	 eax
  0002c	8d 4d f8	 lea	 ecx, DWORD PTR $T160077[ebp]
  0002f	e8 00 00 00 00	 call	 ??0CPoint@@QAE@HH@Z	; CPoint::CPoint
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	89 11		 mov	 DWORD PTR [ecx], edx
  0003e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00041	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?CenterPoint@CRect@@QBE?AVCPoint@@XZ ENDP		; CRect::CenterPoint
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT
_initX$ = 8
_initY$ = 12
_this$ = -4
??0CPoint@@QAE@HH@Z PROC NEAR				; CPoint::CPoint, COMDAT

; 85   : 	{ x = initX; y = initY; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _initX$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _initY$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0CPoint@@QAE@HH@Z ENDP				; CPoint::CPoint
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4
??BCRect@@QAEPAUtagRECT@@XZ PROC NEAR			; CRect::operator tagRECT *, COMDAT

; 165  : 	{ return this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??BCRect@@QAEPAUtagRECT@@XZ ENDP			; CRect::operator tagRECT *
_TEXT	ENDS
EXTRN	__imp__OffsetRect@12:NEAR
;	COMDAT ?OffsetRect@CRect@@QAEXHH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_this$ = -4
?OffsetRect@CRect@@QAEXHH@Z PROC NEAR			; CRect::OffsetRect, COMDAT

; 193  : 	{ ::OffsetRect(this, x, y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	52		 push	 edx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OffsetRect@12
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?OffsetRect@CRect@@QAEXHH@Z ENDP			; CRect::OffsetRect
_TEXT	ENDS
PUBLIC	??0reference@?$bitset@$04@std@@AAE@AAV12@I@Z	; std::bitset<5>::reference::reference
;	COMDAT ??A?$bitset@$04@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT
$T160082 = -8
__P$ = 12
___$ReturnUdt$ = 8
_this$ = -12
??A?$bitset@$04@std@@QAE?AVreference@01@I@Z PROC NEAR	; std::bitset<5>::operator[], COMDAT

; 54   : 		{return (reference(*this, _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	51		 push	 ecx
  00011	8d 4d f8	 lea	 ecx, DWORD PTR $T160082[ebp]
  00014	e8 00 00 00 00	 call	 ??0reference@?$bitset@$04@std@@AAE@AAV12@I@Z ; std::bitset<5>::reference::reference
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	89 11		 mov	 DWORD PTR [ecx], edx
  00023	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??A?$bitset@$04@std@@QAE?AVreference@01@I@Z ENDP	; std::bitset<5>::operator[]
_TEXT	ENDS
PUBLIC	?test@?$bitset@$04@std@@QBE_NI@Z		; std::bitset<5>::test
;	COMDAT ??Breference@?$bitset@$04@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4
??Breference@?$bitset@$04@std@@QBE_NXZ PROC NEAR	; std::bitset<5>::reference::operator bool, COMDAT

; 35   : 			{return (_Pbs->test(_Off)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00011	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00013	e8 00 00 00 00	 call	 ?test@?$bitset@$04@std@@QBE_NI@Z ; std::bitset<5>::test
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??Breference@?$bitset@$04@std@@QBE_NXZ ENDP		; std::bitset<5>::reference::operator bool
_TEXT	ENDS
;	COMDAT ??0?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinCtrl@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8
_this$ = -4
??0?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinCtrl@@@1@@Z PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >, COMDAT

; 39   : 	explicit vector(const _A& _Al = _A())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000a	8a 08		 mov	 cl, BYTE PTR [eax]
  0000c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0000f	88 0a		 mov	 BYTE PTR [edx], cl
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinCtrl@@@1@@Z ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAXI@Z ; std::allocator<CSkinCtrl *>::deallocate
PUBLIC	?_Destroy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@0@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Destroy
;	COMDAT ??1?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::~vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >, COMDAT

; 58   : 		{_Destroy(_First, _Last);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	51		 push	 ecx
  0000e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@0@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Destroy

; 59   : 		allocator.deallocate(_First, _End - _First);

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	c1 f8 02	 sar	 eax, 2
  0002c	50		 push	 eax
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00033	52		 push	 edx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAXI@Z ; std::allocator<CSkinCtrl *>::deallocate

; 60   : 		_First = 0, _Last = 0, _End = 0; }

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
??1?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::~vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::begin
;	COMDAT ??A?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEAAPAVCSkinCtrl@@I@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
??A?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEAAPAVCSkinCtrl@@I@Z PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::operator[], COMDAT

; 132  : 		{return (*(begin() + _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::begin
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00012	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??A?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEAAPAVCSkinCtrl@@I@Z ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::operator[]
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::end
PUBLIC	?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@PAPAV3@ABQAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::insert
;	COMDAT ?push_back@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXABQAVCSkinCtrl@@@Z
_TEXT	SEGMENT
__X$ = 8
_this$ = -4
?push_back@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXABQAVCSkinCtrl@@@Z PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::push_back, COMDAT

; 142  : 		{insert(end(), _X); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?end@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::end
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@PAPAV3@ABQAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::insert
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?push_back@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXABQAVCSkinCtrl@@@Z ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::push_back
_TEXT	ENDS
;	COMDAT ??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8
_this$ = -4
??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::vector<CSkinObj,std::allocator<CSkinObj> >, COMDAT

; 39   : 	explicit vector(const _A& _Al = _A())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000a	8a 08		 mov	 cl, BYTE PTR [eax]
  0000c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0000f	88 0a		 mov	 BYTE PTR [edx], cl
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@ABV?$allocator@VCSkinObj@@@1@@Z ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::vector<CSkinObj,std::allocator<CSkinObj> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@VCSkinObj@@@std@@QAEXPAXI@Z ; std::allocator<CSkinObj>::deallocate
PUBLIC	?_Destroy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@0@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Destroy
;	COMDAT ??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >, COMDAT

; 58   : 		{_Destroy(_First, _Last);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	51		 push	 ecx
  0000e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Destroy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@0@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Destroy

; 59   : 		allocator.deallocate(_First, _End - _First);

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	c1 f8 03	 sar	 eax, 3
  0002c	50		 push	 eax
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00033	52		 push	 edx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?deallocate@?$allocator@VCSkinObj@@@std@@QAEXPAXI@Z ; std::allocator<CSkinObj>::deallocate

; 60   : 		_First = 0, _Last = 0, _End = 0; }

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
??1?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::~vector<CSkinObj,std::allocator<CSkinObj> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::begin
;	COMDAT ??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[], COMDAT

; 132  : 		{return (*(begin() + _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?begin@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::begin
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00012	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??A?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEAAVCSkinObj@@I@Z ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::operator[]
_TEXT	ENDS
PUBLIC	?end@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::end
PUBLIC	?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@PAV3@ABV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::insert
;	COMDAT ?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z
_TEXT	SEGMENT
__X$ = 8
_this$ = -4
?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::push_back, COMDAT

; 142  : 		{insert(end(), _X); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?end@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::end
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@PAV3@ABV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::insert
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?push_back@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXABVCSkinObj@@@Z ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::push_back
_TEXT	ENDS
;	COMDAT ??0?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinBitmap@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8
_this$ = -4
??0?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinBitmap@@@1@@Z PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >, COMDAT

; 39   : 	explicit vector(const _A& _Al = _A())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000a	8a 08		 mov	 cl, BYTE PTR [eax]
  0000c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0000f	88 0a		 mov	 BYTE PTR [edx], cl
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@ABV?$allocator@PAVCSkinBitmap@@@1@@Z ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAXI@Z ; std::allocator<CSkinBitmap *>::deallocate
PUBLIC	?_Destroy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@0@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Destroy
;	COMDAT ??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::~vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >, COMDAT

; 58   : 		{_Destroy(_First, _Last);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	51		 push	 ecx
  0000e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@0@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Destroy

; 59   : 		allocator.deallocate(_First, _End - _First);

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	c1 f8 02	 sar	 eax, 2
  0002c	50		 push	 eax
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00033	52		 push	 edx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAXI@Z ; std::allocator<CSkinBitmap *>::deallocate

; 60   : 		_First = 0, _Last = 0, _End = 0; }

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
??1?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::~vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ
_TEXT	SEGMENT
_this$ = -4
?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::begin, COMDAT

; 93   : 		{return (_First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::begin
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ
_TEXT	SEGMENT
_this$ = -4
?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::end, COMDAT

; 97   : 		{return (_Last); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::end
_TEXT	ENDS
;	COMDAT ??A?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEAAPAVCSkinBitmap@@I@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
??A?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEAAPAVCSkinBitmap@@I@Z PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::operator[], COMDAT

; 132  : 		{return (*(begin() + _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::begin
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00012	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??A?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEAAPAVCSkinBitmap@@I@Z ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::operator[]
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@ABQAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::insert
;	COMDAT ?push_back@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXABQAVCSkinBitmap@@@Z
_TEXT	SEGMENT
__X$ = 8
_this$ = -4
?push_back@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXABQAVCSkinBitmap@@@Z PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::push_back, COMDAT

; 142  : 		{insert(end(), _X); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::end
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@ABQAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::insert
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?push_back@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXABQAVCSkinBitmap@@@Z ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@0@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::erase
;	COMDAT ?clear@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?clear@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::clear, COMDAT

; 212  : 		{erase(begin(), end()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::end
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::begin
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?erase@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@0@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::erase
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?clear@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXXZ ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::clear
_TEXT	ENDS
;	COMDAT ??0?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@ABV?$allocator@PAVCPoint@@@1@@Z
_TEXT	SEGMENT
_this$ = -4
__Al$ = 8
??0?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@ABV?$allocator@PAVCPoint@@@1@@Z PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::vector<CPoint *,std::allocator<CPoint *> >, COMDAT

; 39   : 	explicit vector(const _A& _Al = _A())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000a	8a 08		 mov	 cl, BYTE PTR [eax]
  0000c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0000f	88 0a		 mov	 BYTE PTR [edx], cl
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@ABV?$allocator@PAVCPoint@@@1@@Z ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::vector<CPoint *,std::allocator<CPoint *> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCPoint@@@std@@QAEXPAXI@Z ; std::allocator<CPoint *>::deallocate
PUBLIC	?_Destroy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@0@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Destroy
;	COMDAT ??1?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::~vector<CPoint *,std::allocator<CPoint *> >, COMDAT

; 58   : 		{_Destroy(_First, _Last);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	51		 push	 ecx
  0000e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@0@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Destroy

; 59   : 		allocator.deallocate(_First, _End - _First);

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	c1 f8 02	 sar	 eax, 2
  0002c	50		 push	 eax
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00033	52		 push	 edx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCPoint@@@std@@QAEXPAXI@Z ; std::allocator<CPoint *>::deallocate

; 60   : 		_First = 0, _Last = 0, _End = 0; }

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
??1?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::~vector<CPoint *,std::allocator<CPoint *> >
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ
_TEXT	SEGMENT
_this$ = -4
?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::begin, COMDAT

; 93   : 		{return (_First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::begin
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ
_TEXT	SEGMENT
_this$ = -4
?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::end, COMDAT

; 97   : 		{return (_Last); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::end
_TEXT	ENDS
;	COMDAT ??A?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEAAPAVCPoint@@I@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
??A?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEAAPAVCPoint@@I@Z PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::operator[], COMDAT

; 132  : 		{return (*(begin() + _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::begin
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00012	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??A?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEAAPAVCPoint@@I@Z ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::operator[]
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@ABQAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::insert
;	COMDAT ?push_back@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXABQAVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
?push_back@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXABQAVCPoint@@@Z PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::push_back, COMDAT

; 142  : 		{insert(end(), _X); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::end
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@ABQAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::insert
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?push_back@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXABQAVCPoint@@@Z ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@0@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::erase
;	COMDAT ?clear@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?clear@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::clear, COMDAT

; 212  : 		{erase(begin(), end()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::end
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::begin
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?erase@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@0@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::erase
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?clear@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::clear
_TEXT	ENDS
;	COMDAT ??0?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@ABV?$allocator@VCSCI_WorldActor@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8
_this$ = -4
??0?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@ABV?$allocator@VCSCI_WorldActor@@@1@@Z PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >, COMDAT

; 39   : 	explicit vector(const _A& _Al = _A())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000a	8a 08		 mov	 cl, BYTE PTR [eax]
  0000c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0000f	88 0a		 mov	 BYTE PTR [edx], cl
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@ABV?$allocator@VCSCI_WorldActor@@@1@@Z ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@0@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Destroy
PUBLIC	?deallocate@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAXI@Z ; std::allocator<CSCI_WorldActor>::deallocate
;	COMDAT ??1?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::~vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >, COMDAT

; 58   : 		{_Destroy(_First, _Last);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	51		 push	 ecx
  0000e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Destroy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@0@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Destroy

; 59   : 		allocator.deallocate(_First, _End - _First);

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	d1 f8		 sar	 eax, 1
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	52		 push	 edx
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?deallocate@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAXI@Z ; std::allocator<CSCI_WorldActor>::deallocate

; 60   : 		_First = 0, _Last = 0, _End = 0; }

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0004f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00052	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
??1?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::~vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::begin
;	COMDAT ??A?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEAAVCSCI_WorldActor@@I@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
??A?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEAAVCSCI_WorldActor@@I@Z PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::operator[], COMDAT

; 132  : 		{return (*(begin() + _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?begin@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::begin
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00012	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??A?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEAAVCSCI_WorldActor@@I@Z ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::operator[]
_TEXT	ENDS
PUBLIC	?end@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::end
PUBLIC	?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@PAV3@ABV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::insert
;	COMDAT ?push_back@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXABVCSCI_WorldActor@@@Z
_TEXT	SEGMENT
__X$ = 8
_this$ = -4
?push_back@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXABVCSCI_WorldActor@@@Z PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::push_back, COMDAT

; 142  : 		{insert(end(), _X); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?end@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::end
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@PAV3@ABV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::insert
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?push_back@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXABVCSCI_WorldActor@@@Z ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::push_back
_TEXT	ENDS
EXTRN	?MoveWindow@CWnd@@QAEXHHHHH@Z:NEAR		; CWnd::MoveWindow
;	COMDAT ?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z
_TEXT	SEGMENT
_lpRect$ = 8
_bRepaint$ = 12
_this$ = -4
?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z PROC NEAR		; CWnd::MoveWindow, COMDAT

; 80   : 	{ MoveWindow(lpRect->left, lpRect->top, lpRect->right - lpRect->left,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 		lpRect->bottom - lpRect->top, bRepaint); }

  00007	8b 45 0c	 mov	 eax, DWORD PTR _bRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _lpRect$[ebp]
  00011	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00014	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _lpRect$[ebp]
  0001e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00021	2b 02		 sub	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _lpRect$[ebp]
  00027	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?MoveWindow@CWnd@@QAEXHHHHH@Z ; CWnd::MoveWindow
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?MoveWindow@CWnd@@QAEXPBUtagRECT@@H@Z ENDP		; CWnd::MoveWindow
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
;	COMDAT ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_lpRect$ = 8
_this$ = -4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z PROC NEAR	; CWnd::GetWindowRect, COMDAT

; 96   : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetWindowRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetWindowRect
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?deallocate@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAXI@Z PROC NEAR ; std::allocator<CSkinCtrl *>::deallocate, COMDAT

; 64   : 		{operator delete(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAXI@Z ENDP ; std::allocator<CSkinCtrl *>::deallocate
_TEXT	ENDS
PUBLIC	?_Xran@?$bitset@$04@std@@ABEXXZ			; std::bitset<5>::_Xran
;	COMDAT ?test@?$bitset@$04@std@@QBE_NI@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?test@?$bitset@$04@std@@QBE_NI@Z PROC NEAR		; std::bitset<5>::test, COMDAT

; 177  : 		{if (_N <= _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 7d 08 05	 cmp	 DWORD PTR __P$[ebp], 5
  0000c	72 08		 jb	 SHORT $L155675

; 178  : 			_Xran();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Xran@?$bitset@$04@std@@ABEXXZ ; std::bitset<5>::_Xran
$L155675:

; 179  : 		return ((_A[_P / _Nb] & ((_Ty)1 << _P % _Nb)) != 0); }

  00016	8b 75 08	 mov	 esi, DWORD PTR __P$[ebp]
  00019	c1 ee 05	 shr	 esi, 5
  0001c	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00026	f7 f1		 div	 ecx
  00028	8b ca		 mov	 ecx, edx
  0002a	ba 01 00 00 00	 mov	 edx, 1
  0002f	d3 e2		 shl	 edx, cl
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00037	23 c2		 and	 eax, edx
  00039	f7 d8		 neg	 eax
  0003b	1b c0		 sbb	 eax, eax
  0003d	f7 d8		 neg	 eax
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?test@?$bitset@$04@std@@QBE_NI@Z ENDP			; std::bitset<5>::test
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$04@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
__P$ = 12
??0reference@?$bitset@$04@std@@AAE@AAV12@I@Z PROC NEAR	; std::bitset<5>::reference::reference, COMDAT

; 37   : 		reference(bitset<_N>& _X, size_t _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __X$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0reference@?$bitset@$04@std@@AAE@AAV12@I@Z ENDP	; std::bitset<5>::reference::reference
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ
_TEXT	SEGMENT
_this$ = -4
?begin@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::begin, COMDAT

; 93   : 		{return (_First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?begin@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::begin
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ
_TEXT	SEGMENT
_this$ = -4
?end@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::end, COMDAT

; 97   : 		{return (_Last); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?end@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::end
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXPAPAVCSkinCtrl@@IABQAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::insert
;	COMDAT ?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@PAPAV3@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -8
__O$ = -4
__P$ = 8
__X$ = 12
?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@PAPAV3@ABQAV3@@Z PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::insert, COMDAT

; 152  : 		{size_type _O = _P - begin();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::begin
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00014	2b c8		 sub	 ecx, eax
  00016	c1 f9 02	 sar	 ecx, 2
  00019	89 4d fc	 mov	 DWORD PTR __O$[ebp], ecx

; 153  : 		insert(_P, 1, _X);

  0001c	8b 55 0c	 mov	 edx, DWORD PTR __X$[ebp]
  0001f	52		 push	 edx
  00020	6a 01		 push	 1
  00022	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00025	50		 push	 eax
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXPAPAVCSkinCtrl@@IABQAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::insert

; 154  : 		return (begin() + _O); }

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@XZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::begin
  00036	8b 4d fc	 mov	 ecx, DWORD PTR __O$[ebp]
  00039	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEPAPAVCSkinCtrl@@PAPAV3@ABQAV3@@Z ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::insert
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@@Z ; std::allocator<CSkinCtrl *>::destroy
;	COMDAT ?_Destroy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@0@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__L$ = 12
?_Destroy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@0@Z PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Destroy, COMDAT

; 230  : 		{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 09		 jmp	 SHORT $L155688
$L155689:
  00009	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L155688:
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00018	74 0e		 je	 SHORT $L155690

; 231  : 			allocator.destroy(_F); }

  0001a	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001d	52		 push	 edx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?destroy@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@@Z ; std::allocator<CSkinCtrl *>::destroy
  00026	eb e1		 jmp	 SHORT $L155689
$L155690:
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@0@Z ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Destroy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ
_TEXT	SEGMENT
_this$ = -4
?begin@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::begin, COMDAT

; 93   : 		{return (_First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?begin@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::begin
_TEXT	ENDS
;	COMDAT ?end@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ
_TEXT	SEGMENT
_this$ = -4
?end@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::end, COMDAT

; 97   : 		{return (_Last); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?end@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::end
_TEXT	ENDS
PUBLIC	?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXPAVCSkinObj@@IABV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::insert
;	COMDAT ?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@PAV3@ABV3@@Z
_TEXT	SEGMENT
_this$ = -8
__O$ = -4
__P$ = 8
__X$ = 12
?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@PAV3@ABV3@@Z PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::insert, COMDAT

; 152  : 		{size_type _O = _P - begin();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?begin@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::begin
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00014	2b c8		 sub	 ecx, eax
  00016	c1 f9 03	 sar	 ecx, 3
  00019	89 4d fc	 mov	 DWORD PTR __O$[ebp], ecx

; 153  : 		insert(_P, 1, _X);

  0001c	8b 55 0c	 mov	 edx, DWORD PTR __X$[ebp]
  0001f	52		 push	 edx
  00020	6a 01		 push	 1
  00022	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00025	50		 push	 eax
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXPAVCSkinObj@@IABV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::insert

; 154  : 		return (begin() + _O); }

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?begin@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@XZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::begin
  00036	8b 4d fc	 mov	 ecx, DWORD PTR __O$[ebp]
  00039	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEPAVCSkinObj@@PAV3@ABV3@@Z ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::insert
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@@Z ; std::allocator<CSkinObj>::destroy
;	COMDAT ?_Destroy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@0@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__L$ = 12
?_Destroy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@0@Z PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Destroy, COMDAT

; 230  : 		{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 09		 jmp	 SHORT $L155700
$L155701:
  00009	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  0000c	83 c0 08	 add	 eax, 8
  0000f	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L155700:
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00018	74 0e		 je	 SHORT $L155702

; 231  : 			allocator.destroy(_F); }

  0001a	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001d	52		 push	 edx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?destroy@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@@Z ; std::allocator<CSkinObj>::destroy
  00026	eb e1		 jmp	 SHORT $L155701
$L155702:
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Destroy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@0@Z ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Destroy
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VCSkinObj@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?deallocate@?$allocator@VCSkinObj@@@std@@QAEXPAXI@Z PROC NEAR ; std::allocator<CSkinObj>::deallocate, COMDAT

; 64   : 		{operator delete(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?deallocate@?$allocator@VCSkinObj@@@std@@QAEXPAXI@Z ENDP ; std::allocator<CSkinObj>::deallocate
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXPAPAVCSkinBitmap@@IABQAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::insert
;	COMDAT ?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -8
__O$ = -4
__P$ = 8
__X$ = 12
?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@ABQAV3@@Z PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::insert, COMDAT

; 152  : 		{size_type _O = _P - begin();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::begin
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00014	2b c8		 sub	 ecx, eax
  00016	c1 f9 02	 sar	 ecx, 2
  00019	89 4d fc	 mov	 DWORD PTR __O$[ebp], ecx

; 153  : 		insert(_P, 1, _X);

  0001c	8b 55 0c	 mov	 edx, DWORD PTR __X$[ebp]
  0001f	52		 push	 edx
  00020	6a 01		 push	 1
  00022	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00025	50		 push	 eax
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXPAPAVCSkinBitmap@@IABQAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::insert

; 154  : 		return (begin() + _O); }

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::begin
  00036	8b 4d fc	 mov	 ecx, DWORD PTR __O$[ebp]
  00039	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@ABQAV3@@Z ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::insert
_TEXT	ENDS
PUBLIC	?copy@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z	; std::copy
;	COMDAT ?erase@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@0@Z
_TEXT	SEGMENT
_this$ = -8
__S$ = -4
__F$ = 8
__L$ = 12
?erase@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@0@Z PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::erase, COMDAT

; 207  : 		{iterator _S = copy(_L, end(), _F);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::end
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?copy@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z ; std::copy
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00022	89 45 fc	 mov	 DWORD PTR __S$[ebp], eax

; 208  : 		_Destroy(_S, end());

  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?end@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@XZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::end
  0002d	50		 push	 eax
  0002e	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  00031	52		 push	 edx
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@0@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Destroy

; 209  : 		_Last = _S;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00040	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 210  : 		return (_F); }

  00043	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
?erase@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEPAPAVCSkinBitmap@@PAPAV3@0@Z ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::erase
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@@Z ; std::allocator<CSkinBitmap *>::destroy
;	COMDAT ?_Destroy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@0@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__L$ = 12
?_Destroy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@0@Z PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Destroy, COMDAT

; 230  : 		{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 09		 jmp	 SHORT $L155720
$L155721:
  00009	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L155720:
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00018	74 0e		 je	 SHORT $L155722

; 231  : 			allocator.destroy(_F); }

  0001a	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001d	52		 push	 edx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?destroy@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@@Z ; std::allocator<CSkinBitmap *>::destroy
  00026	eb e1		 jmp	 SHORT $L155721
$L155722:
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@0@Z ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Destroy
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?deallocate@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAXI@Z PROC NEAR ; std::allocator<CSkinBitmap *>::deallocate, COMDAT

; 64   : 		{operator delete(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAXI@Z ENDP ; std::allocator<CSkinBitmap *>::deallocate
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXPAPAVCPoint@@IABQAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::insert
;	COMDAT ?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -8
__O$ = -4
__P$ = 8
__X$ = 12
?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@ABQAV3@@Z PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::insert, COMDAT

; 152  : 		{size_type _O = _P - begin();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::begin
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00014	2b c8		 sub	 ecx, eax
  00016	c1 f9 02	 sar	 ecx, 2
  00019	89 4d fc	 mov	 DWORD PTR __O$[ebp], ecx

; 153  : 		insert(_P, 1, _X);

  0001c	8b 55 0c	 mov	 edx, DWORD PTR __X$[ebp]
  0001f	52		 push	 edx
  00020	6a 01		 push	 1
  00022	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00025	50		 push	 eax
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXPAPAVCPoint@@IABQAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::insert

; 154  : 		return (begin() + _O); }

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::begin
  00036	8b 4d fc	 mov	 ecx, DWORD PTR __O$[ebp]
  00039	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@ABQAV3@@Z ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::insert
_TEXT	ENDS
PUBLIC	?copy@std@@YAPAPAVCPoint@@PAPAV2@00@Z		; std::copy
;	COMDAT ?erase@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@0@Z
_TEXT	SEGMENT
_this$ = -8
__S$ = -4
__F$ = 8
__L$ = 12
?erase@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@0@Z PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::erase, COMDAT

; 207  : 		{iterator _S = copy(_L, end(), _F);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::end
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?copy@std@@YAPAPAVCPoint@@PAPAV2@00@Z ; std::copy
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00022	89 45 fc	 mov	 DWORD PTR __S$[ebp], eax

; 208  : 		_Destroy(_S, end());

  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?end@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@XZ ; std::vector<CPoint *,std::allocator<CPoint *> >::end
  0002d	50		 push	 eax
  0002e	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  00031	52		 push	 edx
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@0@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Destroy

; 209  : 		_Last = _S;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00040	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 210  : 		return (_F); }

  00043	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
?erase@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEPAPAVCPoint@@PAPAV3@0@Z ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::erase
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@@Z ; std::allocator<CPoint *>::destroy
;	COMDAT ?_Destroy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@0@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__L$ = 12
?_Destroy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@0@Z PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::_Destroy, COMDAT

; 230  : 		{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 09		 jmp	 SHORT $L155740
$L155741:
  00009	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L155740:
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00018	74 0e		 je	 SHORT $L155742

; 231  : 			allocator.destroy(_F); }

  0001a	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001d	52		 push	 edx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?destroy@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@@Z ; std::allocator<CPoint *>::destroy
  00026	eb e1		 jmp	 SHORT $L155741
$L155742:
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@0@Z ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::_Destroy
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCPoint@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?deallocate@?$allocator@PAVCPoint@@@std@@QAEXPAXI@Z PROC NEAR ; std::allocator<CPoint *>::deallocate, COMDAT

; 64   : 		{operator delete(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCPoint@@@std@@QAEXPAXI@Z ENDP ; std::allocator<CPoint *>::deallocate
_TEXT	ENDS
;	COMDAT ?begin@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ
_TEXT	SEGMENT
_this$ = -4
?begin@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::begin, COMDAT

; 93   : 		{return (_First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?begin@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::begin
_TEXT	ENDS
;	COMDAT ?end@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ
_TEXT	SEGMENT
_this$ = -4
?end@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::end, COMDAT

; 97   : 		{return (_Last); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?end@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::end
_TEXT	ENDS
PUBLIC	?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXPAVCSCI_WorldActor@@IABV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::insert
;	COMDAT ?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@PAV3@ABV3@@Z
_TEXT	SEGMENT
__P$ = 8
__X$ = 12
_this$ = -8
__O$ = -4
?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@PAV3@ABV3@@Z PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::insert, COMDAT

; 152  : 		{size_type _O = _P - begin();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?begin@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::begin
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00014	2b c8		 sub	 ecx, eax
  00016	d1 f9		 sar	 ecx, 1
  00018	89 4d fc	 mov	 DWORD PTR __O$[ebp], ecx

; 153  : 		insert(_P, 1, _X);

  0001b	8b 55 0c	 mov	 edx, DWORD PTR __X$[ebp]
  0001e	52		 push	 edx
  0001f	6a 01		 push	 1
  00021	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00024	50		 push	 eax
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXPAVCSCI_WorldActor@@IABV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::insert

; 154  : 		return (begin() + _O); }

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?begin@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@XZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::begin
  00035	8b 4d fc	 mov	 ecx, DWORD PTR __O$[ebp]
  00038	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEPAVCSCI_WorldActor@@PAV3@ABV3@@Z ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::insert
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@@Z ; std::allocator<CSCI_WorldActor>::destroy
;	COMDAT ?_Destroy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@0@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__L$ = 12
?_Destroy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@0@Z PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Destroy, COMDAT

; 230  : 		{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 09		 jmp	 SHORT $L155754
$L155755:
  00009	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  0000c	83 c0 02	 add	 eax, 2
  0000f	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L155754:
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00018	74 0e		 je	 SHORT $L155756

; 231  : 			allocator.destroy(_F); }

  0001a	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001d	52		 push	 edx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?destroy@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@@Z ; std::allocator<CSCI_WorldActor>::destroy
  00026	eb e1		 jmp	 SHORT $L155755
$L155756:
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Destroy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@0@Z ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Destroy
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?deallocate@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAXI@Z PROC NEAR ; std::allocator<CSCI_WorldActor>::deallocate, COMDAT

; 64   : 		{operator delete(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?deallocate@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAXI@Z ENDP ; std::allocator<CSCI_WorldActor>::deallocate
_TEXT	ENDS
PUBLIC	?_Destroy@std@@YAXPAPAVCSkinCtrl@@@Z		; std::_Destroy
;	COMDAT ?destroy@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
?destroy@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@@Z PROC NEAR ; std::allocator<CSkinCtrl *>::destroy, COMDAT

; 68   : 		{_Destroy(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?_Destroy@std@@YAXPAPAVCSkinCtrl@@@Z ; std::_Destroy
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?destroy@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@@Z ENDP ; std::allocator<CSkinCtrl *>::destroy
_TEXT	ENDS
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
PUBLIC	??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ ; `string'
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
EXTRN	__imp_??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:NEAR
EXTRN	__CxxThrowException@8:NEAR
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z:NEAR
EXTRN	??0logic_error@std@@QAE@ABV01@@Z:NEAR		; std::logic_error::logic_error
EXTRN	??1out_of_range@std@@UAE@XZ:NEAR		; std::out_of_range::~out_of_range
EXTRN	??0out_of_range@std@@QAE@ABV01@@Z:NEAR		; std::out_of_range::out_of_range
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT ??_R0?AVexception@@@8
; File C:\Program Files\Microsoft Visual Studio\VC98\INCLUDE\bitset
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@
_DATA	SEGMENT
??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ DB 'invalid bitset'
	DB	'<N> position', 00H				; `string'
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T160145 DD	019930520H
	DD	01H
	DD	FLAT:$T160147
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160147 DD	0ffffffffH
	DD	FLAT:$L160143
xdata$x	ENDS
;	COMDAT ?_Xran@?$bitset@$04@std@@ABEXXZ
_TEXT	SEGMENT
_this$ = -64
$T160139 = -40
$T160140 = -56
$T160141 = -60
__$EHRec$ = -12
?_Xran@?$bitset@$04@std@@ABEXXZ PROC NEAR		; std::bitset<5>::_Xran, COMDAT

; 250  : 		{_THROW(out_of_range, "invalid bitset<N> position"); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L160146
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8d 45 c4	 lea	 eax, DWORD PTR $T160141[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ ; `string'
  00027	8d 4d c8	 lea	 ecx, DWORD PTR $T160140[ebp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	8d 4d c8	 lea	 ecx, DWORD PTR $T160140[ebp]
  0003a	51		 push	 ecx
  0003b	8d 4d d8	 lea	 ecx, DWORD PTR $T160139[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00044	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00049	8d 55 d8	 lea	 edx, DWORD PTR $T160139[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$L155970:
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160143:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T160140[ebp]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00009	c3		 ret	 0
$L160146:
  0000a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160145
  0000f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xran@?$bitset@$04@std@@ABEXXZ ENDP			; std::bitset<5>::_Xran
PUBLIC	?allocate@?$allocator@PAVCSkinCtrl@@@std@@QAEPAPAVCSkinCtrl@@IPBX@Z ; std::allocator<CSkinCtrl *>::allocate
PUBLIC	?fill@std@@YAXPAPAVCSkinCtrl@@0ABQAV2@@Z	; std::fill
PUBLIC	?copy_backward@std@@YAPAPAVCSkinCtrl@@PAPAV2@00@Z ; std::copy_backward
PUBLIC	?size@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QBEIXZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::size
PUBLIC	?_Ucopy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEPAPAVCSkinCtrl@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ucopy
PUBLIC	?_Ufill@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@IABQAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ufill
;	COMDAT ?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXPAPAVCSkinCtrl@@IABQAV3@@Z
_TEXT	SEGMENT
_this$ = -16
__N$155978 = -12
__S$155979 = -8
__Q$155981 = -4
__P$ = 8
__M$ = 12
__X$ = 16
?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXPAPAVCSkinCtrl@@IABQAV3@@Z PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::insert, COMDAT

; 156  : 		{if (_End - _Last < _M)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00012	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  00015	c1 fa 02	 sar	 edx, 2
  00018	3b 55 0c	 cmp	 edx, DWORD PTR __M$[ebp]
  0001b	0f 83 f6 00 00
	00		 jae	 $L155977

; 157  : 			{size_type _N = size() + (_M < size() ? size() : _M);

  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?size@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QBEIXZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::size
  00029	39 45 0c	 cmp	 DWORD PTR __M$[ebp], eax
  0002c	73 0d		 jae	 SHORT $L160151
  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?size@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QBEIXZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::size
  00036	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00039	eb 06		 jmp	 SHORT $L160152
$L160151:
  0003b	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  0003e	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
$L160152:
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?size@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QBEIXZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::size
  00049	03 45 ec	 add	 eax, DWORD PTR -20+[ebp]
  0004c	89 45 f4	 mov	 DWORD PTR __N$155978[ebp], eax

; 158  : 			iterator _S = allocator.allocate(_N, (void *)0);

  0004f	6a 00		 push	 0
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __N$155978[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?allocate@?$allocator@PAVCSkinCtrl@@@std@@QAEPAPAVCSkinCtrl@@IPBX@Z ; std::allocator<CSkinCtrl *>::allocate
  0005d	89 45 f8	 mov	 DWORD PTR __S$155979[ebp], eax

; 159  : 			iterator _Q = _Ucopy(_First, _P, _S);

  00060	8b 55 f8	 mov	 edx, DWORD PTR __S$155979[ebp]
  00063	52		 push	 edx
  00064	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00067	50		 push	 eax
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006e	52		 push	 edx
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEPAPAVCSkinCtrl@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ucopy
  00077	89 45 fc	 mov	 DWORD PTR __Q$155981[ebp], eax

; 160  : 			_Ufill(_Q, _M, _X);

  0007a	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 fc	 mov	 edx, DWORD PTR __Q$155981[ebp]
  00085	52		 push	 edx
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@IABQAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ufill

; 161  : 			_Ucopy(_P, _Last, _Q + _M);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00091	8b 4d fc	 mov	 ecx, DWORD PTR __Q$155981[ebp]
  00094	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00097	52		 push	 edx
  00098	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009e	51		 push	 ecx
  0009f	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  000a2	52		 push	 edx
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEPAPAVCSkinCtrl@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ucopy

; 162  : 			_Destroy(_First, _Last);

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b1	51		 push	 ecx
  000b2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b8	50		 push	 eax
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@0@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Destroy

; 163  : 			allocator.deallocate(_First, _End - _First);

  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000ca	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  000cd	c1 f8 02	 sar	 eax, 2
  000d0	50		 push	 eax
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d7	52		 push	 edx
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAXI@Z ; std::allocator<CSkinCtrl *>::deallocate

; 164  : 			_End = _S + _N;

  000e0	8b 45 f4	 mov	 eax, DWORD PTR __N$155978[ebp]
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR __S$155979[ebp]
  000e6	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 165  : 			_Last = _S + size() + _M;

  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	e8 00 00 00 00	 call	 ?size@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QBEIXZ ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::size
  000f7	8b 4d f8	 mov	 ecx, DWORD PTR __S$155979[ebp]
  000fa	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000fd	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00100	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00103	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00106	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 166  : 			_First = _S; }

  00109	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR __S$155979[ebp]
  0010f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 167  : 		else if (_Last - _P < _M)

  00112	e9 f7 00 00 00	 jmp	 $L155992
$L155977:
  00117	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0011d	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  00120	c1 f8 02	 sar	 eax, 2
  00123	3b 45 0c	 cmp	 eax, DWORD PTR __M$[ebp]
  00126	73 6d		 jae	 SHORT $L155983

; 168  : 			{_Ucopy(_P, _Last, _P + _M);

  00128	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  0012b	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  0012e	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00131	50		 push	 eax
  00132	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00138	52		 push	 edx
  00139	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEPAPAVCSkinCtrl@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ucopy

; 169  : 			_Ufill(_Last, _M - (_Last - _P), _X);

  00145	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0014c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0014f	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  00152	c1 f8 02	 sar	 eax, 2
  00155	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00158	2b c8		 sub	 ecx, eax
  0015a	51		 push	 ecx
  0015b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0015e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00161	50		 push	 eax
  00162	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@IABQAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ufill

; 170  : 			fill(_P, _Last, _X);

  0016a	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  0016d	51		 push	 ecx
  0016e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00171	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00174	50		 push	 eax
  00175	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 ?fill@std@@YAXPAPAVCSkinCtrl@@0ABQAV2@@Z ; std::fill
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 			_Last += _M; }

  00181	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00184	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00187	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  0018a	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0018d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00190	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 172  : 		else if (0 < _M)

  00193	eb 79		 jmp	 SHORT $L155992
$L155983:
  00195	83 7d 0c 00	 cmp	 DWORD PTR __M$[ebp], 0
  00199	76 73		 jbe	 SHORT $L155992

; 173  : 			{_Ucopy(_Last - _M, _Last, _Last);

  0019b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001a1	52		 push	 edx
  001a2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a8	51		 push	 ecx
  001a9	8b 55 0c	 mov	 edx, DWORD PTR __M$[ebp]
  001ac	c1 e2 02	 shl	 edx, 2
  001af	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b5	2b ca		 sub	 ecx, edx
  001b7	51		 push	 ecx
  001b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001bb	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEPAPAVCSkinCtrl@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ucopy

; 174  : 			copy_backward(_P, _Last - _M, _Last);

  001c0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001c3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c6	50		 push	 eax
  001c7	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  001ca	c1 e1 02	 shl	 ecx, 2
  001cd	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001d0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001d3	2b c1		 sub	 eax, ecx
  001d5	50		 push	 eax
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 ?copy_backward@std@@YAPAPAVCSkinCtrl@@PAPAV2@00@Z ; std::copy_backward
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 175  : 			fill(_P, _P + _M, _X);

  001e2	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  001e5	52		 push	 edx
  001e6	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  001e9	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001ec	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  001ef	52		 push	 edx
  001f0	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?fill@std@@YAXPAPAVCSkinCtrl@@0ABQAV2@@Z ; std::fill
  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 			_Last += _M; }}

  001fc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ff	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00202	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00205	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00208	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0020b	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L155992:
  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QAEXPAPAVCSkinCtrl@@IABQAV3@@Z ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::insert
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
_this$ = -4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC NEAR ; CWnd::DoDataExchange, COMDAT

; 519  : 	{ } // default does nothing

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
EXTRN	__imp__EnableWindow@8:NEAR
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?BeginModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::BeginModalState, COMDAT

; 523  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?EndModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::EndModalState, COMDAT

; 525  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
_TEXT	ENDS
PUBLIC	?fill@std@@YAXPAVCSkinObj@@0ABV2@@Z		; std::fill
PUBLIC	?copy_backward@std@@YAPAVCSkinObj@@PAV2@00@Z	; std::copy_backward
PUBLIC	?allocate@?$allocator@VCSkinObj@@@std@@QAEPAVCSkinObj@@IPBX@Z ; std::allocator<CSkinObj>::allocate
PUBLIC	?size@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QBEIXZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::size
PUBLIC	?_Ucopy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEPAVCSkinObj@@PBV3@0PAV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ucopy
PUBLIC	?_Ufill@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@IABV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ufill
;	COMDAT ?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXPAVCSkinObj@@IABV3@@Z
_TEXT	SEGMENT
_this$ = -16
__N$156009 = -12
__S$156010 = -8
__Q$156012 = -4
__P$ = 8
__M$ = 12
__X$ = 16
?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXPAVCSkinObj@@IABV3@@Z PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::insert, COMDAT

; 156  : 		{if (_End - _Last < _M)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00012	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  00015	c1 fa 03	 sar	 edx, 3
  00018	3b 55 0c	 cmp	 edx, DWORD PTR __M$[ebp]
  0001b	0f 83 f6 00 00
	00		 jae	 $L156008

; 157  : 			{size_type _N = size() + (_M < size() ? size() : _M);

  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?size@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QBEIXZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::size
  00029	39 45 0c	 cmp	 DWORD PTR __M$[ebp], eax
  0002c	73 0d		 jae	 SHORT $L160157
  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?size@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QBEIXZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::size
  00036	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00039	eb 06		 jmp	 SHORT $L160158
$L160157:
  0003b	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  0003e	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
$L160158:
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?size@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QBEIXZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::size
  00049	03 45 ec	 add	 eax, DWORD PTR -20+[ebp]
  0004c	89 45 f4	 mov	 DWORD PTR __N$156009[ebp], eax

; 158  : 			iterator _S = allocator.allocate(_N, (void *)0);

  0004f	6a 00		 push	 0
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __N$156009[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?allocate@?$allocator@VCSkinObj@@@std@@QAEPAVCSkinObj@@IPBX@Z ; std::allocator<CSkinObj>::allocate
  0005d	89 45 f8	 mov	 DWORD PTR __S$156010[ebp], eax

; 159  : 			iterator _Q = _Ucopy(_First, _P, _S);

  00060	8b 55 f8	 mov	 edx, DWORD PTR __S$156010[ebp]
  00063	52		 push	 edx
  00064	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00067	50		 push	 eax
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006e	52		 push	 edx
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEPAVCSkinObj@@PBV3@0PAV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ucopy
  00077	89 45 fc	 mov	 DWORD PTR __Q$156012[ebp], eax

; 160  : 			_Ufill(_Q, _M, _X);

  0007a	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 fc	 mov	 edx, DWORD PTR __Q$156012[ebp]
  00085	52		 push	 edx
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Ufill@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@IABV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ufill

; 161  : 			_Ucopy(_P, _Last, _Q + _M);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00091	8b 4d fc	 mov	 ecx, DWORD PTR __Q$156012[ebp]
  00094	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00097	52		 push	 edx
  00098	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009e	51		 push	 ecx
  0009f	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  000a2	52		 push	 edx
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEPAVCSkinObj@@PBV3@0PAV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ucopy

; 162  : 			_Destroy(_First, _Last);

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b1	51		 push	 ecx
  000b2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b8	50		 push	 eax
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ?_Destroy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@0@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Destroy

; 163  : 			allocator.deallocate(_First, _End - _First);

  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000ca	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  000cd	c1 f8 03	 sar	 eax, 3
  000d0	50		 push	 eax
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d7	52		 push	 edx
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	e8 00 00 00 00	 call	 ?deallocate@?$allocator@VCSkinObj@@@std@@QAEXPAXI@Z ; std::allocator<CSkinObj>::deallocate

; 164  : 			_End = _S + _N;

  000e0	8b 45 f4	 mov	 eax, DWORD PTR __N$156009[ebp]
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR __S$156010[ebp]
  000e6	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  000e9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 165  : 			_Last = _S + size() + _M;

  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	e8 00 00 00 00	 call	 ?size@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QBEIXZ ; std::vector<CSkinObj,std::allocator<CSkinObj> >::size
  000f7	8b 4d f8	 mov	 ecx, DWORD PTR __S$156010[ebp]
  000fa	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  000fd	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00100	8d 0c c2	 lea	 ecx, DWORD PTR [edx+eax*8]
  00103	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00106	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 166  : 			_First = _S; }

  00109	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR __S$156010[ebp]
  0010f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 167  : 		else if (_Last - _P < _M)

  00112	e9 f7 00 00 00	 jmp	 $L156023
$L156008:
  00117	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0011d	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  00120	c1 f8 03	 sar	 eax, 3
  00123	3b 45 0c	 cmp	 eax, DWORD PTR __M$[ebp]
  00126	73 6d		 jae	 SHORT $L156014

; 168  : 			{_Ucopy(_P, _Last, _P + _M);

  00128	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  0012b	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  0012e	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00131	50		 push	 eax
  00132	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00138	52		 push	 edx
  00139	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEPAVCSkinObj@@PBV3@0PAV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ucopy

; 169  : 			_Ufill(_Last, _M - (_Last - _P), _X);

  00145	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0014c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0014f	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  00152	c1 f8 03	 sar	 eax, 3
  00155	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00158	2b c8		 sub	 ecx, eax
  0015a	51		 push	 ecx
  0015b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0015e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00161	50		 push	 eax
  00162	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	e8 00 00 00 00	 call	 ?_Ufill@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@IABV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ufill

; 170  : 			fill(_P, _Last, _X);

  0016a	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  0016d	51		 push	 ecx
  0016e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00171	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00174	50		 push	 eax
  00175	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 ?fill@std@@YAXPAVCSkinObj@@0ABV2@@Z ; std::fill
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 			_Last += _M; }

  00181	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00184	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00187	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  0018a	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  0018d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00190	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 172  : 		else if (0 < _M)

  00193	eb 79		 jmp	 SHORT $L156023
$L156014:
  00195	83 7d 0c 00	 cmp	 DWORD PTR __M$[ebp], 0
  00199	76 73		 jbe	 SHORT $L156023

; 173  : 			{_Ucopy(_Last - _M, _Last, _Last);

  0019b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001a1	52		 push	 edx
  001a2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a8	51		 push	 ecx
  001a9	8b 55 0c	 mov	 edx, DWORD PTR __M$[ebp]
  001ac	c1 e2 03	 shl	 edx, 3
  001af	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b5	2b ca		 sub	 ecx, edx
  001b7	51		 push	 ecx
  001b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001bb	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEPAVCSkinObj@@PBV3@0PAV3@@Z ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ucopy

; 174  : 			copy_backward(_P, _Last - _M, _Last);

  001c0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001c3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c6	50		 push	 eax
  001c7	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  001ca	c1 e1 03	 shl	 ecx, 3
  001cd	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001d0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001d3	2b c1		 sub	 eax, ecx
  001d5	50		 push	 eax
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 ?copy_backward@std@@YAPAVCSkinObj@@PAV2@00@Z ; std::copy_backward
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 175  : 			fill(_P, _P + _M, _X);

  001e2	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  001e5	52		 push	 edx
  001e6	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  001e9	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001ec	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  001ef	52		 push	 edx
  001f0	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?fill@std@@YAXPAVCSkinObj@@0ABV2@@Z ; std::fill
  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 			_Last += _M; }}

  001fc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ff	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00202	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00205	8d 0c c2	 lea	 ecx, DWORD PTR [edx+eax*8]
  00208	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0020b	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L156023:
  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QAEXPAVCSkinObj@@IABV3@@Z ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::insert
_TEXT	ENDS
PUBLIC	?_Destroy@std@@YAXPAVCSkinObj@@@Z		; std::_Destroy
;	COMDAT ?destroy@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?destroy@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@@Z PROC NEAR ; std::allocator<CSkinObj>::destroy, COMDAT

; 68   : 		{_Destroy(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?_Destroy@std@@YAXPAVCSkinObj@@@Z ; std::_Destroy
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?destroy@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@@Z ENDP ; std::allocator<CSkinObj>::destroy
_TEXT	ENDS
PUBLIC	?fill@std@@YAXPAPAVCSkinBitmap@@0ABQAV2@@Z	; std::fill
PUBLIC	?copy_backward@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z ; std::copy_backward
PUBLIC	?allocate@?$allocator@PAVCSkinBitmap@@@std@@QAEPAPAVCSkinBitmap@@IPBX@Z ; std::allocator<CSkinBitmap *>::allocate
PUBLIC	?size@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QBEIXZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::size
PUBLIC	?_Ucopy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEPAPAVCSkinBitmap@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ucopy
PUBLIC	?_Ufill@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@IABQAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ufill
;	COMDAT ?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXPAPAVCSkinBitmap@@IABQAV3@@Z
_TEXT	SEGMENT
_this$ = -16
__N$156046 = -12
__S$156047 = -8
__Q$156049 = -4
__P$ = 8
__M$ = 12
__X$ = 16
?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXPAPAVCSkinBitmap@@IABQAV3@@Z PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::insert, COMDAT

; 156  : 		{if (_End - _Last < _M)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00012	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  00015	c1 fa 02	 sar	 edx, 2
  00018	3b 55 0c	 cmp	 edx, DWORD PTR __M$[ebp]
  0001b	0f 83 f6 00 00
	00		 jae	 $L156045

; 157  : 			{size_type _N = size() + (_M < size() ? size() : _M);

  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?size@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QBEIXZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::size
  00029	39 45 0c	 cmp	 DWORD PTR __M$[ebp], eax
  0002c	73 0d		 jae	 SHORT $L160161
  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?size@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QBEIXZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::size
  00036	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00039	eb 06		 jmp	 SHORT $L160162
$L160161:
  0003b	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  0003e	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
$L160162:
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?size@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QBEIXZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::size
  00049	03 45 ec	 add	 eax, DWORD PTR -20+[ebp]
  0004c	89 45 f4	 mov	 DWORD PTR __N$156046[ebp], eax

; 158  : 			iterator _S = allocator.allocate(_N, (void *)0);

  0004f	6a 00		 push	 0
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __N$156046[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?allocate@?$allocator@PAVCSkinBitmap@@@std@@QAEPAPAVCSkinBitmap@@IPBX@Z ; std::allocator<CSkinBitmap *>::allocate
  0005d	89 45 f8	 mov	 DWORD PTR __S$156047[ebp], eax

; 159  : 			iterator _Q = _Ucopy(_First, _P, _S);

  00060	8b 55 f8	 mov	 edx, DWORD PTR __S$156047[ebp]
  00063	52		 push	 edx
  00064	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00067	50		 push	 eax
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006e	52		 push	 edx
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEPAPAVCSkinBitmap@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ucopy
  00077	89 45 fc	 mov	 DWORD PTR __Q$156049[ebp], eax

; 160  : 			_Ufill(_Q, _M, _X);

  0007a	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 fc	 mov	 edx, DWORD PTR __Q$156049[ebp]
  00085	52		 push	 edx
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@IABQAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ufill

; 161  : 			_Ucopy(_P, _Last, _Q + _M);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00091	8b 4d fc	 mov	 ecx, DWORD PTR __Q$156049[ebp]
  00094	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00097	52		 push	 edx
  00098	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009e	51		 push	 ecx
  0009f	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  000a2	52		 push	 edx
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEPAPAVCSkinBitmap@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ucopy

; 162  : 			_Destroy(_First, _Last);

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b1	51		 push	 ecx
  000b2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b8	50		 push	 eax
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@0@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Destroy

; 163  : 			allocator.deallocate(_First, _End - _First);

  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000ca	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  000cd	c1 f8 02	 sar	 eax, 2
  000d0	50		 push	 eax
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d7	52		 push	 edx
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAXI@Z ; std::allocator<CSkinBitmap *>::deallocate

; 164  : 			_End = _S + _N;

  000e0	8b 45 f4	 mov	 eax, DWORD PTR __N$156046[ebp]
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR __S$156047[ebp]
  000e6	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 165  : 			_Last = _S + size() + _M;

  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	e8 00 00 00 00	 call	 ?size@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QBEIXZ ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::size
  000f7	8b 4d f8	 mov	 ecx, DWORD PTR __S$156047[ebp]
  000fa	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000fd	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00100	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00103	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00106	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 166  : 			_First = _S; }

  00109	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR __S$156047[ebp]
  0010f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 167  : 		else if (_Last - _P < _M)

  00112	e9 f7 00 00 00	 jmp	 $L156060
$L156045:
  00117	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0011d	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  00120	c1 f8 02	 sar	 eax, 2
  00123	3b 45 0c	 cmp	 eax, DWORD PTR __M$[ebp]
  00126	73 6d		 jae	 SHORT $L156051

; 168  : 			{_Ucopy(_P, _Last, _P + _M);

  00128	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  0012b	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  0012e	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00131	50		 push	 eax
  00132	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00138	52		 push	 edx
  00139	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEPAPAVCSkinBitmap@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ucopy

; 169  : 			_Ufill(_Last, _M - (_Last - _P), _X);

  00145	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0014c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0014f	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  00152	c1 f8 02	 sar	 eax, 2
  00155	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00158	2b c8		 sub	 ecx, eax
  0015a	51		 push	 ecx
  0015b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0015e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00161	50		 push	 eax
  00162	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@IABQAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ufill

; 170  : 			fill(_P, _Last, _X);

  0016a	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  0016d	51		 push	 ecx
  0016e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00171	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00174	50		 push	 eax
  00175	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 ?fill@std@@YAXPAPAVCSkinBitmap@@0ABQAV2@@Z ; std::fill
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 			_Last += _M; }

  00181	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00184	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00187	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  0018a	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0018d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00190	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 172  : 		else if (0 < _M)

  00193	eb 79		 jmp	 SHORT $L156060
$L156051:
  00195	83 7d 0c 00	 cmp	 DWORD PTR __M$[ebp], 0
  00199	76 73		 jbe	 SHORT $L156060

; 173  : 			{_Ucopy(_Last - _M, _Last, _Last);

  0019b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001a1	52		 push	 edx
  001a2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a8	51		 push	 ecx
  001a9	8b 55 0c	 mov	 edx, DWORD PTR __M$[ebp]
  001ac	c1 e2 02	 shl	 edx, 2
  001af	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b5	2b ca		 sub	 ecx, edx
  001b7	51		 push	 ecx
  001b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001bb	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEPAPAVCSkinBitmap@@PBQAV3@0PAPAV3@@Z ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ucopy

; 174  : 			copy_backward(_P, _Last - _M, _Last);

  001c0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001c3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c6	50		 push	 eax
  001c7	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  001ca	c1 e1 02	 shl	 ecx, 2
  001cd	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001d0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001d3	2b c1		 sub	 eax, ecx
  001d5	50		 push	 eax
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 ?copy_backward@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z ; std::copy_backward
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 175  : 			fill(_P, _P + _M, _X);

  001e2	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  001e5	52		 push	 edx
  001e6	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  001e9	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001ec	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  001ef	52		 push	 edx
  001f0	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?fill@std@@YAXPAPAVCSkinBitmap@@0ABQAV2@@Z ; std::fill
  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 			_Last += _M; }}

  001fc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ff	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00202	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00205	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00208	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0020b	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L156060:
  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QAEXPAPAVCSkinBitmap@@IABQAV3@@Z ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::insert
_TEXT	ENDS
PUBLIC	?_Destroy@std@@YAXPAPAVCSkinBitmap@@@Z		; std::_Destroy
;	COMDAT ?destroy@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?destroy@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@@Z PROC NEAR ; std::allocator<CSkinBitmap *>::destroy, COMDAT

; 68   : 		{_Destroy(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?_Destroy@std@@YAXPAPAVCSkinBitmap@@@Z ; std::_Destroy
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?destroy@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@@Z ENDP ; std::allocator<CSkinBitmap *>::destroy
_TEXT	ENDS
PUBLIC	?fill@std@@YAXPAPAVCPoint@@0ABQAV2@@Z		; std::fill
PUBLIC	?copy_backward@std@@YAPAPAVCPoint@@PAPAV2@00@Z	; std::copy_backward
PUBLIC	?allocate@?$allocator@PAVCPoint@@@std@@QAEPAPAVCPoint@@IPBX@Z ; std::allocator<CPoint *>::allocate
PUBLIC	?size@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QBEIXZ ; std::vector<CPoint *,std::allocator<CPoint *> >::size
PUBLIC	?_Ucopy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEPAPAVCPoint@@PBQAV3@0PAPAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ucopy
PUBLIC	?_Ufill@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@IABQAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ufill
;	COMDAT ?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXPAPAVCPoint@@IABQAV3@@Z
_TEXT	SEGMENT
_this$ = -16
__N$156083 = -12
__S$156084 = -8
__Q$156086 = -4
__P$ = 8
__M$ = 12
__X$ = 16
?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXPAPAVCPoint@@IABQAV3@@Z PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::insert, COMDAT

; 156  : 		{if (_End - _Last < _M)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00012	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  00015	c1 fa 02	 sar	 edx, 2
  00018	3b 55 0c	 cmp	 edx, DWORD PTR __M$[ebp]
  0001b	0f 83 f6 00 00
	00		 jae	 $L156082

; 157  : 			{size_type _N = size() + (_M < size() ? size() : _M);

  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?size@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QBEIXZ ; std::vector<CPoint *,std::allocator<CPoint *> >::size
  00029	39 45 0c	 cmp	 DWORD PTR __M$[ebp], eax
  0002c	73 0d		 jae	 SHORT $L160165
  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?size@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QBEIXZ ; std::vector<CPoint *,std::allocator<CPoint *> >::size
  00036	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00039	eb 06		 jmp	 SHORT $L160166
$L160165:
  0003b	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  0003e	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
$L160166:
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?size@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QBEIXZ ; std::vector<CPoint *,std::allocator<CPoint *> >::size
  00049	03 45 ec	 add	 eax, DWORD PTR -20+[ebp]
  0004c	89 45 f4	 mov	 DWORD PTR __N$156083[ebp], eax

; 158  : 			iterator _S = allocator.allocate(_N, (void *)0);

  0004f	6a 00		 push	 0
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __N$156083[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?allocate@?$allocator@PAVCPoint@@@std@@QAEPAPAVCPoint@@IPBX@Z ; std::allocator<CPoint *>::allocate
  0005d	89 45 f8	 mov	 DWORD PTR __S$156084[ebp], eax

; 159  : 			iterator _Q = _Ucopy(_First, _P, _S);

  00060	8b 55 f8	 mov	 edx, DWORD PTR __S$156084[ebp]
  00063	52		 push	 edx
  00064	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00067	50		 push	 eax
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006e	52		 push	 edx
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEPAPAVCPoint@@PBQAV3@0PAPAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ucopy
  00077	89 45 fc	 mov	 DWORD PTR __Q$156086[ebp], eax

; 160  : 			_Ufill(_Q, _M, _X);

  0007a	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 fc	 mov	 edx, DWORD PTR __Q$156086[ebp]
  00085	52		 push	 edx
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@IABQAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ufill

; 161  : 			_Ucopy(_P, _Last, _Q + _M);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00091	8b 4d fc	 mov	 ecx, DWORD PTR __Q$156086[ebp]
  00094	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00097	52		 push	 edx
  00098	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009e	51		 push	 ecx
  0009f	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  000a2	52		 push	 edx
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEPAPAVCPoint@@PBQAV3@0PAPAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ucopy

; 162  : 			_Destroy(_First, _Last);

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b1	51		 push	 ecx
  000b2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b8	50		 push	 eax
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@0@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Destroy

; 163  : 			allocator.deallocate(_First, _End - _First);

  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000ca	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  000cd	c1 f8 02	 sar	 eax, 2
  000d0	50		 push	 eax
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d7	52		 push	 edx
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCPoint@@@std@@QAEXPAXI@Z ; std::allocator<CPoint *>::deallocate

; 164  : 			_End = _S + _N;

  000e0	8b 45 f4	 mov	 eax, DWORD PTR __N$156083[ebp]
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR __S$156084[ebp]
  000e6	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 165  : 			_Last = _S + size() + _M;

  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	e8 00 00 00 00	 call	 ?size@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QBEIXZ ; std::vector<CPoint *,std::allocator<CPoint *> >::size
  000f7	8b 4d f8	 mov	 ecx, DWORD PTR __S$156084[ebp]
  000fa	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000fd	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00100	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00103	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00106	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 166  : 			_First = _S; }

  00109	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR __S$156084[ebp]
  0010f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 167  : 		else if (_Last - _P < _M)

  00112	e9 f7 00 00 00	 jmp	 $L156097
$L156082:
  00117	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0011d	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  00120	c1 f8 02	 sar	 eax, 2
  00123	3b 45 0c	 cmp	 eax, DWORD PTR __M$[ebp]
  00126	73 6d		 jae	 SHORT $L156088

; 168  : 			{_Ucopy(_P, _Last, _P + _M);

  00128	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  0012b	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  0012e	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00131	50		 push	 eax
  00132	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00138	52		 push	 edx
  00139	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEPAPAVCPoint@@PBQAV3@0PAPAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ucopy

; 169  : 			_Ufill(_Last, _M - (_Last - _P), _X);

  00145	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0014c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0014f	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  00152	c1 f8 02	 sar	 eax, 2
  00155	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00158	2b c8		 sub	 ecx, eax
  0015a	51		 push	 ecx
  0015b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0015e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00161	50		 push	 eax
  00162	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@IABQAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ufill

; 170  : 			fill(_P, _Last, _X);

  0016a	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  0016d	51		 push	 ecx
  0016e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00171	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00174	50		 push	 eax
  00175	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 ?fill@std@@YAXPAPAVCPoint@@0ABQAV2@@Z ; std::fill
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 			_Last += _M; }

  00181	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00184	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00187	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  0018a	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0018d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00190	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 172  : 		else if (0 < _M)

  00193	eb 79		 jmp	 SHORT $L156097
$L156088:
  00195	83 7d 0c 00	 cmp	 DWORD PTR __M$[ebp], 0
  00199	76 73		 jbe	 SHORT $L156097

; 173  : 			{_Ucopy(_Last - _M, _Last, _Last);

  0019b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001a1	52		 push	 edx
  001a2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a8	51		 push	 ecx
  001a9	8b 55 0c	 mov	 edx, DWORD PTR __M$[ebp]
  001ac	c1 e2 02	 shl	 edx, 2
  001af	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b5	2b ca		 sub	 ecx, edx
  001b7	51		 push	 ecx
  001b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001bb	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEPAPAVCPoint@@PBQAV3@0PAPAV3@@Z ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ucopy

; 174  : 			copy_backward(_P, _Last - _M, _Last);

  001c0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001c3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c6	50		 push	 eax
  001c7	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  001ca	c1 e1 02	 shl	 ecx, 2
  001cd	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001d0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001d3	2b c1		 sub	 eax, ecx
  001d5	50		 push	 eax
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 ?copy_backward@std@@YAPAPAVCPoint@@PAPAV2@00@Z ; std::copy_backward
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 175  : 			fill(_P, _P + _M, _X);

  001e2	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  001e5	52		 push	 edx
  001e6	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  001e9	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001ec	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  001ef	52		 push	 edx
  001f0	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?fill@std@@YAXPAPAVCPoint@@0ABQAV2@@Z ; std::fill
  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 			_Last += _M; }}

  001fc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ff	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00202	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00205	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00208	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0020b	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L156097:
  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QAEXPAPAVCPoint@@IABQAV3@@Z ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::insert
_TEXT	ENDS
PUBLIC	?_Destroy@std@@YAXPAPAVCPoint@@@Z		; std::_Destroy
;	COMDAT ?destroy@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?destroy@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@@Z PROC NEAR ; std::allocator<CPoint *>::destroy, COMDAT

; 68   : 		{_Destroy(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?_Destroy@std@@YAXPAPAVCPoint@@@Z ; std::_Destroy
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?destroy@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@@Z ENDP ; std::allocator<CPoint *>::destroy
_TEXT	ENDS
PUBLIC	?size@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QBEIXZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::size
PUBLIC	?_Ucopy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEPAVCSCI_WorldActor@@PBV3@0PAV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ucopy
PUBLIC	?_Ufill@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@IABV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ufill
PUBLIC	?fill@std@@YAXPAVCSCI_WorldActor@@0ABV2@@Z	; std::fill
PUBLIC	?copy_backward@std@@YAPAVCSCI_WorldActor@@PAV2@00@Z ; std::copy_backward
PUBLIC	?allocate@?$allocator@VCSCI_WorldActor@@@std@@QAEPAVCSCI_WorldActor@@IPBX@Z ; std::allocator<CSCI_WorldActor>::allocate
;	COMDAT ?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXPAVCSCI_WorldActor@@IABV3@@Z
_TEXT	SEGMENT
__P$ = 8
__M$ = 12
__X$ = 16
_this$ = -16
__N$156120 = -12
__S$156121 = -8
__Q$156123 = -4
?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXPAVCSCI_WorldActor@@IABV3@@Z PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::insert, COMDAT

; 156  : 		{if (_End - _Last < _M)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00012	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  00015	d1 fa		 sar	 edx, 1
  00017	3b 55 0c	 cmp	 edx, DWORD PTR __M$[ebp]
  0001a	0f 83 f5 00 00
	00		 jae	 $L156119

; 157  : 			{size_type _N = size() + (_M < size() ? size() : _M);

  00020	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?size@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QBEIXZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::size
  00028	39 45 0c	 cmp	 DWORD PTR __M$[ebp], eax
  0002b	73 0d		 jae	 SHORT $L160169
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?size@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QBEIXZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::size
  00035	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
  00038	eb 06		 jmp	 SHORT $L160170
$L160169:
  0003a	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
$L160170:
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?size@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QBEIXZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::size
  00048	03 45 ec	 add	 eax, DWORD PTR -20+[ebp]
  0004b	89 45 f4	 mov	 DWORD PTR __N$156120[ebp], eax

; 158  : 			iterator _S = allocator.allocate(_N, (void *)0);

  0004e	6a 00		 push	 0
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __N$156120[ebp]
  00053	51		 push	 ecx
  00054	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?allocate@?$allocator@VCSCI_WorldActor@@@std@@QAEPAVCSCI_WorldActor@@IPBX@Z ; std::allocator<CSCI_WorldActor>::allocate
  0005c	89 45 f8	 mov	 DWORD PTR __S$156121[ebp], eax

; 159  : 			iterator _Q = _Ucopy(_First, _P, _S);

  0005f	8b 55 f8	 mov	 edx, DWORD PTR __S$156121[ebp]
  00062	52		 push	 edx
  00063	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00066	50		 push	 eax
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006d	52		 push	 edx
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEPAVCSCI_WorldActor@@PBV3@0PAV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ucopy
  00076	89 45 fc	 mov	 DWORD PTR __Q$156123[ebp], eax

; 160  : 			_Ufill(_Q, _M, _X);

  00079	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00080	51		 push	 ecx
  00081	8b 55 fc	 mov	 edx, DWORD PTR __Q$156123[ebp]
  00084	52		 push	 edx
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?_Ufill@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@IABV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ufill

; 161  : 			_Ucopy(_P, _Last, _Q + _M);

  0008d	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  00090	8b 4d fc	 mov	 ecx, DWORD PTR __Q$156123[ebp]
  00093	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00096	52		 push	 edx
  00097	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009d	51		 push	 ecx
  0009e	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  000a1	52		 push	 edx
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEPAVCSCI_WorldActor@@PBV3@0PAV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ucopy

; 162  : 			_Destroy(_First, _Last);

  000aa	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b0	51		 push	 ecx
  000b1	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b7	50		 push	 eax
  000b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?_Destroy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@0@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Destroy

; 163  : 			allocator.deallocate(_First, _End - _First);

  000c0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c6	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000c9	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  000cc	d1 f8		 sar	 eax, 1
  000ce	50		 push	 eax
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d5	52		 push	 edx
  000d6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	e8 00 00 00 00	 call	 ?deallocate@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAXI@Z ; std::allocator<CSCI_WorldActor>::deallocate

; 164  : 			_End = _S + _N;

  000de	8b 45 f4	 mov	 eax, DWORD PTR __N$156120[ebp]
  000e1	8b 4d f8	 mov	 ecx, DWORD PTR __S$156121[ebp]
  000e4	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000e7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ea	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 165  : 			_Last = _S + size() + _M;

  000ed	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	e8 00 00 00 00	 call	 ?size@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QBEIXZ ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::size
  000f5	8b 4d f8	 mov	 ecx, DWORD PTR __S$156121[ebp]
  000f8	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000fb	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  000fe	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  00101	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00104	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 166  : 			_First = _S; }

  00107	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	8b 4d f8	 mov	 ecx, DWORD PTR __S$156121[ebp]
  0010d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 167  : 		else if (_Last - _P < _M)

  00110	e9 f3 00 00 00	 jmp	 $L156134
$L156119:
  00115	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00118	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0011b	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  0011e	d1 f8		 sar	 eax, 1
  00120	3b 45 0c	 cmp	 eax, DWORD PTR __M$[ebp]
  00123	73 6c		 jae	 SHORT $L156125

; 168  : 			{_Ucopy(_P, _Last, _P + _M);

  00125	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00128	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  0012b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0012e	50		 push	 eax
  0012f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00135	52		 push	 edx
  00136	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00139	50		 push	 eax
  0013a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEPAVCSCI_WorldActor@@PBV3@0PAV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ucopy

; 169  : 			_Ufill(_Last, _M - (_Last - _P), _X);

  00142	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  00145	51		 push	 ecx
  00146	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00149	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0014c	2b 45 08	 sub	 eax, DWORD PTR __P$[ebp]
  0014f	d1 f8		 sar	 eax, 1
  00151	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00154	2b c8		 sub	 ecx, eax
  00156	51		 push	 ecx
  00157	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0015a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0015d	50		 push	 eax
  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	e8 00 00 00 00	 call	 ?_Ufill@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@IABV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ufill

; 170  : 			fill(_P, _Last, _X);

  00166	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  00169	51		 push	 ecx
  0016a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0016d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00170	50		 push	 eax
  00171	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  00174	51		 push	 ecx
  00175	e8 00 00 00 00	 call	 ?fill@std@@YAXPAVCSCI_WorldActor@@0ABV2@@Z ; std::fill
  0017a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 			_Last += _M; }

  0017d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00180	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00183	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  00186	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00189	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0018c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 172  : 		else if (0 < _M)

  0018f	eb 77		 jmp	 SHORT $L156134
$L156125:
  00191	83 7d 0c 00	 cmp	 DWORD PTR __M$[ebp], 0
  00195	76 71		 jbe	 SHORT $L156134

; 173  : 			{_Ucopy(_Last - _M, _Last, _Last);

  00197	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0019d	52		 push	 edx
  0019e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a4	51		 push	 ecx
  001a5	8b 55 0c	 mov	 edx, DWORD PTR __M$[ebp]
  001a8	d1 e2		 shl	 edx, 1
  001aa	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001ad	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b0	2b ca		 sub	 ecx, edx
  001b2	51		 push	 ecx
  001b3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001b6	e8 00 00 00 00	 call	 ?_Ucopy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEPAVCSCI_WorldActor@@PBV3@0PAV3@@Z ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ucopy

; 174  : 			copy_backward(_P, _Last - _M, _Last);

  001bb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001be	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c1	50		 push	 eax
  001c2	8b 4d 0c	 mov	 ecx, DWORD PTR __M$[ebp]
  001c5	d1 e1		 shl	 ecx, 1
  001c7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001ca	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001cd	2b c1		 sub	 eax, ecx
  001cf	50		 push	 eax
  001d0	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001d3	51		 push	 ecx
  001d4	e8 00 00 00 00	 call	 ?copy_backward@std@@YAPAVCSCI_WorldActor@@PAV2@00@Z ; std::copy_backward
  001d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 175  : 			fill(_P, _P + _M, _X);

  001dc	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  001df	52		 push	 edx
  001e0	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  001e3	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  001e6	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001e9	52		 push	 edx
  001ea	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 ?fill@std@@YAXPAVCSCI_WorldActor@@0ABV2@@Z ; std::fill
  001f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 			_Last += _M; }}

  001f6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001fc	8b 45 0c	 mov	 eax, DWORD PTR __M$[ebp]
  001ff	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  00202	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00205	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$L156134:
  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QAEXPAVCSCI_WorldActor@@IABV3@@Z ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::insert
_TEXT	ENDS
PUBLIC	?_Destroy@std@@YAXPAVCSCI_WorldActor@@@Z	; std::_Destroy
;	COMDAT ?destroy@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?destroy@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@@Z PROC NEAR ; std::allocator<CSCI_WorldActor>::destroy, COMDAT

; 68   : 		{_Destroy(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?_Destroy@std@@YAXPAVCSCI_WorldActor@@@Z ; std::_Destroy
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?destroy@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@@Z ENDP ; std::allocator<CSCI_WorldActor>::destroy
_TEXT	ENDS
PUBLIC	?_Allocate@std@@YAPAPAVCSkinCtrl@@HPAPAV2@@Z	; std::_Allocate
;	COMDAT ?allocate@?$allocator@PAVCSkinCtrl@@@std@@QAEPAPAVCSkinCtrl@@IPBX@Z
_TEXT	SEGMENT
__N$ = 8
_this$ = -4
?allocate@?$allocator@PAVCSkinCtrl@@@std@@QAEPAPAVCSkinCtrl@@IPBX@Z PROC NEAR ; std::allocator<CSkinCtrl *>::allocate, COMDAT

; 59   : 		{return (_Allocate((difference_type)_N, (pointer)0)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPAPAVCSkinCtrl@@HPAPAV2@@Z ; std::_Allocate
  00012	83 c4 08	 add	 esp, 8
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?allocate@?$allocator@PAVCSkinCtrl@@@std@@QAEPAPAVCSkinCtrl@@IPBX@Z ENDP ; std::allocator<CSkinCtrl *>::allocate
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4
?size@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::size, COMDAT

; 114  : 		{return (_First == 0 ? 0 : _Last - _First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 09		 jne	 SHORT $L160174
  00012	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
  00019	eb 12		 jmp	 SHORT $L160175
$L160174:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00024	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00027	c1 f8 02	 sar	 eax, 2
  0002a	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
$L160175:
  0002d	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?size@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@QBEIXZ ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::size
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@ABQAV3@@Z ; std::allocator<CSkinCtrl *>::construct
;	COMDAT ?_Ucopy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEPAPAVCSkinCtrl@@PBQAV3@0PAPAV3@@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__P$ = 16
_this$ = -4
?_Ucopy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEPAPAVCSkinCtrl@@PBQAV3@0PAPAV3@@Z PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ucopy, COMDAT

; 234  : 		{for (; _F != _L; ++_P, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156241
$L156242:
  00009	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	89 45 10	 mov	 DWORD PTR __P$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156241:
  0001b	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001e	3b 55 0c	 cmp	 edx, DWORD PTR __L$[ebp]
  00021	74 12		 je	 SHORT $L156243

; 235  : 			allocator.construct(_P, *_F);

  00023	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __P$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?construct@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@ABQAV3@@Z ; std::allocator<CSkinCtrl *>::construct
  00033	eb d4		 jmp	 SHORT $L156242
$L156243:

; 236  : 		return (_P); }

  00035	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?_Ucopy@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEPAPAVCSkinCtrl@@PBQAV3@0PAPAV3@@Z ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ucopy
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@IABQAV3@@Z
_TEXT	SEGMENT
__F$ = 8
__N$ = 12
__X$ = 16
_this$ = -4
?_Ufill@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@IABQAV3@@Z PROC NEAR ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ufill, COMDAT

; 238  : 		{for (; 0 < _N; --_N, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156246
$L156247:
  00009	8b 45 0c	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 0c	 mov	 DWORD PTR __N$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156246:
  0001b	83 7d 0c 00	 cmp	 DWORD PTR __N$[ebp], 0
  0001f	76 12		 jbe	 SHORT $L156248

; 239  : 			allocator.construct(_F, _X); }

  00021	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?construct@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@ABQAV3@@Z ; std::allocator<CSkinCtrl *>::construct
  00031	eb d6		 jmp	 SHORT $L156247
$L156248:
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@PAVCSkinCtrl@@V?$allocator@PAVCSkinCtrl@@@std@@@std@@IAEXPAPAVCSkinCtrl@@IABQAV3@@Z ENDP ; std::vector<CSkinCtrl *,std::allocator<CSkinCtrl *> >::_Ufill
_TEXT	ENDS
;	COMDAT ?size@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4
?size@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::size, COMDAT

; 114  : 		{return (_First == 0 ? 0 : _Last - _First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 09		 jne	 SHORT $L160179
  00012	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
  00019	eb 12		 jmp	 SHORT $L160180
$L160179:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00024	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00027	c1 f8 03	 sar	 eax, 3
  0002a	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
$L160180:
  0002d	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?size@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@QBEIXZ ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::size
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@ABV3@@Z ; std::allocator<CSkinObj>::construct
;	COMDAT ?_Ucopy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEPAVCSkinObj@@PBV3@0PAV3@@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__L$ = 12
__P$ = 16
?_Ucopy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEPAVCSkinObj@@PBV3@0PAV3@@Z PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ucopy, COMDAT

; 234  : 		{for (; _F != _L; ++_P, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156253
$L156254:
  00009	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	83 c0 08	 add	 eax, 8
  0000f	89 45 10	 mov	 DWORD PTR __P$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 08	 add	 ecx, 8
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156253:
  0001b	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001e	3b 55 0c	 cmp	 edx, DWORD PTR __L$[ebp]
  00021	74 12		 je	 SHORT $L156255

; 235  : 			allocator.construct(_P, *_F);

  00023	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __P$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?construct@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@ABV3@@Z ; std::allocator<CSkinObj>::construct
  00033	eb d4		 jmp	 SHORT $L156254
$L156255:

; 236  : 		return (_P); }

  00035	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?_Ucopy@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEPAVCSkinObj@@PBV3@0PAV3@@Z ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ucopy
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@IABV3@@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__N$ = 12
__X$ = 16
?_Ufill@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@IABV3@@Z PROC NEAR ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ufill, COMDAT

; 238  : 		{for (; 0 < _N; --_N, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156258
$L156259:
  00009	8b 45 0c	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 0c	 mov	 DWORD PTR __N$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 08	 add	 ecx, 8
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156258:
  0001b	83 7d 0c 00	 cmp	 DWORD PTR __N$[ebp], 0
  0001f	76 12		 jbe	 SHORT $L156260

; 239  : 			allocator.construct(_F, _X); }

  00021	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?construct@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@ABV3@@Z ; std::allocator<CSkinObj>::construct
  00031	eb d6		 jmp	 SHORT $L156259
$L156260:
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@VCSkinObj@@V?$allocator@VCSkinObj@@@std@@@std@@IAEXPAVCSkinObj@@IABV3@@Z ENDP ; std::vector<CSkinObj,std::allocator<CSkinObj> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Allocate@std@@YAPAVCSkinObj@@HPAV2@@Z		; std::_Allocate
;	COMDAT ?allocate@?$allocator@VCSkinObj@@@std@@QAEPAVCSkinObj@@IPBX@Z
_TEXT	SEGMENT
__N$ = 8
_this$ = -4
?allocate@?$allocator@VCSkinObj@@@std@@QAEPAVCSkinObj@@IPBX@Z PROC NEAR ; std::allocator<CSkinObj>::allocate, COMDAT

; 59   : 		{return (_Allocate((difference_type)_N, (pointer)0)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPAVCSkinObj@@HPAV2@@Z ; std::_Allocate
  00012	83 c4 08	 add	 esp, 8
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?allocate@?$allocator@VCSkinObj@@@std@@QAEPAVCSkinObj@@IPBX@Z ENDP ; std::allocator<CSkinObj>::allocate
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4
?size@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::size, COMDAT

; 114  : 		{return (_First == 0 ? 0 : _Last - _First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 09		 jne	 SHORT $L160185
  00012	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
  00019	eb 12		 jmp	 SHORT $L160186
$L160185:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00024	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00027	c1 f8 02	 sar	 eax, 2
  0002a	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
$L160186:
  0002d	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?size@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@QBEIXZ ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::size
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@ABQAV3@@Z ; std::allocator<CSkinBitmap *>::construct
;	COMDAT ?_Ucopy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEPAPAVCSkinBitmap@@PBQAV3@0PAPAV3@@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__L$ = 12
__P$ = 16
?_Ucopy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEPAPAVCSkinBitmap@@PBQAV3@0PAPAV3@@Z PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ucopy, COMDAT

; 234  : 		{for (; _F != _L; ++_P, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156274
$L156275:
  00009	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	89 45 10	 mov	 DWORD PTR __P$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156274:
  0001b	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001e	3b 55 0c	 cmp	 edx, DWORD PTR __L$[ebp]
  00021	74 12		 je	 SHORT $L156276

; 235  : 			allocator.construct(_P, *_F);

  00023	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __P$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?construct@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@ABQAV3@@Z ; std::allocator<CSkinBitmap *>::construct
  00033	eb d4		 jmp	 SHORT $L156275
$L156276:

; 236  : 		return (_P); }

  00035	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?_Ucopy@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEPAPAVCSkinBitmap@@PBQAV3@0PAPAV3@@Z ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ucopy
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@IABQAV3@@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__N$ = 12
__X$ = 16
?_Ufill@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@IABQAV3@@Z PROC NEAR ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ufill, COMDAT

; 238  : 		{for (; 0 < _N; --_N, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156279
$L156280:
  00009	8b 45 0c	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 0c	 mov	 DWORD PTR __N$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156279:
  0001b	83 7d 0c 00	 cmp	 DWORD PTR __N$[ebp], 0
  0001f	76 12		 jbe	 SHORT $L156281

; 239  : 			allocator.construct(_F, _X); }

  00021	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?construct@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@ABQAV3@@Z ; std::allocator<CSkinBitmap *>::construct
  00031	eb d6		 jmp	 SHORT $L156280
$L156281:
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@PAVCSkinBitmap@@V?$allocator@PAVCSkinBitmap@@@std@@@std@@IAEXPAPAVCSkinBitmap@@IABQAV3@@Z ENDP ; std::vector<CSkinBitmap *,std::allocator<CSkinBitmap *> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Allocate@std@@YAPAPAVCSkinBitmap@@HPAPAV2@@Z	; std::_Allocate
;	COMDAT ?allocate@?$allocator@PAVCSkinBitmap@@@std@@QAEPAPAVCSkinBitmap@@IPBX@Z
_TEXT	SEGMENT
_this$ = -4
__N$ = 8
?allocate@?$allocator@PAVCSkinBitmap@@@std@@QAEPAPAVCSkinBitmap@@IPBX@Z PROC NEAR ; std::allocator<CSkinBitmap *>::allocate, COMDAT

; 59   : 		{return (_Allocate((difference_type)_N, (pointer)0)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPAPAVCSkinBitmap@@HPAPAV2@@Z ; std::_Allocate
  00012	83 c4 08	 add	 esp, 8
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?allocate@?$allocator@PAVCSkinBitmap@@@std@@QAEPAPAVCSkinBitmap@@IPBX@Z ENDP ; std::allocator<CSkinBitmap *>::allocate
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4
?size@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::size, COMDAT

; 114  : 		{return (_First == 0 ? 0 : _Last - _First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 09		 jne	 SHORT $L160191
  00012	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
  00019	eb 12		 jmp	 SHORT $L160192
$L160191:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00024	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00027	c1 f8 02	 sar	 eax, 2
  0002a	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
$L160192:
  0002d	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?size@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::size
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@ABQAV3@@Z ; std::allocator<CPoint *>::construct
;	COMDAT ?_Ucopy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEPAPAVCPoint@@PBQAV3@0PAPAV3@@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__L$ = 12
__P$ = 16
?_Ucopy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEPAPAVCPoint@@PBQAV3@0PAPAV3@@Z PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ucopy, COMDAT

; 234  : 		{for (; _F != _L; ++_P, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156295
$L156296:
  00009	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	89 45 10	 mov	 DWORD PTR __P$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156295:
  0001b	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001e	3b 55 0c	 cmp	 edx, DWORD PTR __L$[ebp]
  00021	74 12		 je	 SHORT $L156297

; 235  : 			allocator.construct(_P, *_F);

  00023	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __P$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?construct@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@ABQAV3@@Z ; std::allocator<CPoint *>::construct
  00033	eb d4		 jmp	 SHORT $L156296
$L156297:

; 236  : 		return (_P); }

  00035	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?_Ucopy@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEPAPAVCPoint@@PBQAV3@0PAPAV3@@Z ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ucopy
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@IABQAV3@@Z
_TEXT	SEGMENT
_this$ = -4
__F$ = 8
__N$ = 12
__X$ = 16
?_Ufill@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@IABQAV3@@Z PROC NEAR ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ufill, COMDAT

; 238  : 		{for (; 0 < _N; --_N, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156300
$L156301:
  00009	8b 45 0c	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 0c	 mov	 DWORD PTR __N$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156300:
  0001b	83 7d 0c 00	 cmp	 DWORD PTR __N$[ebp], 0
  0001f	76 12		 jbe	 SHORT $L156302

; 239  : 			allocator.construct(_F, _X); }

  00021	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?construct@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@ABQAV3@@Z ; std::allocator<CPoint *>::construct
  00031	eb d6		 jmp	 SHORT $L156301
$L156302:
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@PAVCPoint@@V?$allocator@PAVCPoint@@@std@@@std@@IAEXPAPAVCPoint@@IABQAV3@@Z ENDP ; std::vector<CPoint *,std::allocator<CPoint *> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Allocate@std@@YAPAPAVCPoint@@HPAPAV2@@Z	; std::_Allocate
;	COMDAT ?allocate@?$allocator@PAVCPoint@@@std@@QAEPAPAVCPoint@@IPBX@Z
_TEXT	SEGMENT
_this$ = -4
__N$ = 8
?allocate@?$allocator@PAVCPoint@@@std@@QAEPAPAVCPoint@@IPBX@Z PROC NEAR ; std::allocator<CPoint *>::allocate, COMDAT

; 59   : 		{return (_Allocate((difference_type)_N, (pointer)0)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPAPAVCPoint@@HPAPAV2@@Z ; std::_Allocate
  00012	83 c4 08	 add	 esp, 8
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?allocate@?$allocator@PAVCPoint@@@std@@QAEPAPAVCPoint@@IPBX@Z ENDP ; std::allocator<CPoint *>::allocate
_TEXT	ENDS
;	COMDAT ?size@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4
?size@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::size, COMDAT

; 114  : 		{return (_First == 0 ? 0 : _Last - _First); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 09		 jne	 SHORT $L160197
  00012	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
  00019	eb 11		 jmp	 SHORT $L160198
$L160197:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00024	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00027	d1 f8		 sar	 eax, 1
  00029	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
$L160198:
  0002c	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?size@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@QBEIXZ ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::size
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@ABV3@@Z ; std::allocator<CSCI_WorldActor>::construct
;	COMDAT ?_Ucopy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEPAVCSCI_WorldActor@@PBV3@0PAV3@@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__P$ = 16
_this$ = -4
?_Ucopy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEPAVCSCI_WorldActor@@PBV3@0PAV3@@Z PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ucopy, COMDAT

; 234  : 		{for (; _F != _L; ++_P, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156316
$L156317:
  00009	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	83 c0 02	 add	 eax, 2
  0000f	89 45 10	 mov	 DWORD PTR __P$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 02	 add	 ecx, 2
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156316:
  0001b	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001e	3b 55 0c	 cmp	 edx, DWORD PTR __L$[ebp]
  00021	74 12		 je	 SHORT $L156318

; 235  : 			allocator.construct(_P, *_F);

  00023	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __P$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?construct@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@ABV3@@Z ; std::allocator<CSCI_WorldActor>::construct
  00033	eb d4		 jmp	 SHORT $L156317
$L156318:

; 236  : 		return (_P); }

  00035	8b 45 10	 mov	 eax, DWORD PTR __P$[ebp]
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?_Ucopy@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEPAVCSCI_WorldActor@@PBV3@0PAV3@@Z ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ucopy
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@IABV3@@Z
_TEXT	SEGMENT
__F$ = 8
__N$ = 12
__X$ = 16
_this$ = -4
?_Ufill@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@IABV3@@Z PROC NEAR ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ufill, COMDAT

; 238  : 		{for (; 0 < _N; --_N, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	eb 12		 jmp	 SHORT $L156321
$L156322:
  00009	8b 45 0c	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 0c	 mov	 DWORD PTR __N$[ebp], eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00015	83 c1 02	 add	 ecx, 2
  00018	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156321:
  0001b	83 7d 0c 00	 cmp	 DWORD PTR __N$[ebp], 0
  0001f	76 12		 jbe	 SHORT $L156323

; 239  : 			allocator.construct(_F, _X); }

  00021	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?construct@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@ABV3@@Z ; std::allocator<CSCI_WorldActor>::construct
  00031	eb d6		 jmp	 SHORT $L156322
$L156323:
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@VCSCI_WorldActor@@V?$allocator@VCSCI_WorldActor@@@std@@@std@@IAEXPAVCSCI_WorldActor@@IABV3@@Z ENDP ; std::vector<CSCI_WorldActor,std::allocator<CSCI_WorldActor> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Allocate@std@@YAPAVCSCI_WorldActor@@HPAV2@@Z	; std::_Allocate
;	COMDAT ?allocate@?$allocator@VCSCI_WorldActor@@@std@@QAEPAVCSCI_WorldActor@@IPBX@Z
_TEXT	SEGMENT
_this$ = -4
__N$ = 8
?allocate@?$allocator@VCSCI_WorldActor@@@std@@QAEPAVCSCI_WorldActor@@IPBX@Z PROC NEAR ; std::allocator<CSCI_WorldActor>::allocate, COMDAT

; 59   : 		{return (_Allocate((difference_type)_N, (pointer)0)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPAVCSCI_WorldActor@@HPAV2@@Z ; std::_Allocate
  00012	83 c4 08	 add	 esp, 8
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?allocate@?$allocator@VCSCI_WorldActor@@@std@@QAEPAVCSCI_WorldActor@@IPBX@Z ENDP ; std::allocator<CSCI_WorldActor>::allocate
_TEXT	ENDS
PUBLIC	?_Construct@std@@YAXPAPAVCSkinCtrl@@ABQAV2@@Z	; std::_Construct
;	COMDAT ?construct@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@ABQAV3@@Z
_TEXT	SEGMENT
__P$ = 8
__V$ = 12
_this$ = -4
?construct@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@ABQAV3@@Z PROC NEAR ; std::allocator<CSkinCtrl *>::construct, COMDAT

; 66   : 		{_Construct(_P, _V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __V$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?_Construct@std@@YAXPAPAVCSkinCtrl@@ABQAV2@@Z ; std::_Construct
  00014	83 c4 08	 add	 esp, 8
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?construct@?$allocator@PAVCSkinCtrl@@@std@@QAEXPAPAVCSkinCtrl@@ABQAV3@@Z ENDP ; std::allocator<CSkinCtrl *>::construct
_TEXT	ENDS
PUBLIC	?_Construct@std@@YAXPAVCSkinObj@@ABV2@@Z	; std::_Construct
;	COMDAT ?construct@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@ABV3@@Z
_TEXT	SEGMENT
__P$ = 8
__V$ = 12
_this$ = -4
?construct@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@ABV3@@Z PROC NEAR ; std::allocator<CSkinObj>::construct, COMDAT

; 66   : 		{_Construct(_P, _V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __V$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?_Construct@std@@YAXPAVCSkinObj@@ABV2@@Z ; std::_Construct
  00014	83 c4 08	 add	 esp, 8
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?construct@?$allocator@VCSkinObj@@@std@@QAEXPAVCSkinObj@@ABV3@@Z ENDP ; std::allocator<CSkinObj>::construct
_TEXT	ENDS
PUBLIC	?_Construct@std@@YAXPAPAVCSkinBitmap@@ABQAV2@@Z	; std::_Construct
;	COMDAT ?construct@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@ABQAV3@@Z
_TEXT	SEGMENT
__P$ = 8
__V$ = 12
_this$ = -4
?construct@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@ABQAV3@@Z PROC NEAR ; std::allocator<CSkinBitmap *>::construct, COMDAT

; 66   : 		{_Construct(_P, _V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __V$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?_Construct@std@@YAXPAPAVCSkinBitmap@@ABQAV2@@Z ; std::_Construct
  00014	83 c4 08	 add	 esp, 8
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?construct@?$allocator@PAVCSkinBitmap@@@std@@QAEXPAPAVCSkinBitmap@@ABQAV3@@Z ENDP ; std::allocator<CSkinBitmap *>::construct
_TEXT	ENDS
PUBLIC	?_Construct@std@@YAXPAPAVCPoint@@ABQAV2@@Z	; std::_Construct
;	COMDAT ?construct@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
__V$ = 12
?construct@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@ABQAV3@@Z PROC NEAR ; std::allocator<CPoint *>::construct, COMDAT

; 66   : 		{_Construct(_P, _V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __V$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?_Construct@std@@YAXPAPAVCPoint@@ABQAV2@@Z ; std::_Construct
  00014	83 c4 08	 add	 esp, 8
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?construct@?$allocator@PAVCPoint@@@std@@QAEXPAPAVCPoint@@ABQAV3@@Z ENDP ; std::allocator<CPoint *>::construct
_TEXT	ENDS
PUBLIC	?_Construct@std@@YAXPAVCSCI_WorldActor@@ABV2@@Z	; std::_Construct
;	COMDAT ?construct@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@ABV3@@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
__V$ = 12
?construct@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@ABV3@@Z PROC NEAR ; std::allocator<CSCI_WorldActor>::construct, COMDAT

; 66   : 		{_Construct(_P, _V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __V$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?_Construct@std@@YAXPAVCSCI_WorldActor@@ABV2@@Z ; std::_Construct
  00014	83 c4 08	 add	 esp, 8
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?construct@?$allocator@VCSCI_WorldActor@@@std@@QAEXPAVCSCI_WorldActor@@ABV3@@Z ENDP ; std::allocator<CSCI_WorldActor>::construct
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?copy@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z PROC NEAR	; std::copy, COMDAT

; 18   : 	{for (; _F != _L; ++_X, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	eb 12		 jmp	 SHORT $L156820
$L156821:
  00005	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  00008	83 c0 04	 add	 eax, 4
  0000b	89 45 10	 mov	 DWORD PTR __X$[ebp], eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156820:
  00017	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001a	3b 55 0c	 cmp	 edx, DWORD PTR __L$[ebp]
  0001d	74 0c		 je	 SHORT $L156822

; 19   : 		*_X = *_F;

  0001f	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	89 10		 mov	 DWORD PTR [eax], edx
  00029	eb da		 jmp	 SHORT $L156821
$L156822:

; 20   : 	return (_X); }

  0002b	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?copy@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z ENDP		; std::copy
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAPAVCPoint@@PAPAV2@00@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?copy@std@@YAPAPAVCPoint@@PAPAV2@00@Z PROC NEAR		; std::copy, COMDAT

; 18   : 	{for (; _F != _L; ++_X, ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	eb 12		 jmp	 SHORT $L156824
$L156825:
  00005	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  00008	83 c0 04	 add	 eax, 4
  0000b	89 45 10	 mov	 DWORD PTR __X$[ebp], eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	89 4d 08	 mov	 DWORD PTR __F$[ebp], ecx
$L156824:
  00017	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  0001a	3b 55 0c	 cmp	 edx, DWORD PTR __L$[ebp]
  0001d	74 0c		 je	 SHORT $L156826

; 19   : 		*_X = *_F;

  0001f	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	89 10		 mov	 DWORD PTR [eax], edx
  00029	eb da		 jmp	 SHORT $L156825
$L156826:

; 20   : 	return (_X); }

  0002b	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?copy@std@@YAPAPAVCPoint@@PAPAV2@00@Z ENDP		; std::copy
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCSkinCtrl@@@Z
_TEXT	SEGMENT
?_Destroy@std@@YAXPAPAVCSkinCtrl@@@Z PROC NEAR		; std::_Destroy, COMDAT

; 38   : 	{_DESTRUCTOR(_Ty, _P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?_Destroy@std@@YAXPAPAVCSkinCtrl@@@Z ENDP		; std::_Destroy
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAPAVCSkinCtrl@@0ABQAV2@@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?fill@std@@YAXPAPAVCSkinCtrl@@0ABQAV2@@Z PROC NEAR	; std::fill, COMDAT

; 38   : 	{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	eb 09		 jmp	 SHORT $L156834
$L156835:
  00005	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00008	83 c0 04	 add	 eax, 4
  0000b	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L156834:
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00011	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00014	74 0c		 je	 SHORT $L156836

; 39   : 		*_F = _X; }

  00016	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  00019	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	89 0a		 mov	 DWORD PTR [edx], ecx
  00020	eb e3		 jmp	 SHORT $L156835
$L156836:
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?fill@std@@YAXPAPAVCSkinCtrl@@0ABQAV2@@Z ENDP		; std::fill
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAPAVCSkinCtrl@@PAPAV2@00@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?copy_backward@std@@YAPAPAVCSkinCtrl@@PAPAV2@00@Z PROC NEAR ; std::copy_backward, COMDAT

; 24   : 	{while (_F != _L)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L156839:
  00003	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __L$[ebp]
  00009	74 1e		 je	 SHORT $L156840

; 25   : 		*--_X = *--_L;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  0000e	83 e9 04	 sub	 ecx, 4
  00011	89 4d 0c	 mov	 DWORD PTR __L$[ebp], ecx
  00014	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00017	83 ea 04	 sub	 edx, 4
  0001a	89 55 10	 mov	 DWORD PTR __X$[ebp], edx
  0001d	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  00023	8b 11		 mov	 edx, DWORD PTR [ecx]
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	eb da		 jmp	 SHORT $L156839
$L156840:

; 26   : 	return (_X); }

  00029	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?copy_backward@std@@YAPAPAVCSkinCtrl@@PAPAV2@00@Z ENDP	; std::copy_backward
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAVCSkinObj@@0ABV2@@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?fill@std@@YAXPAVCSkinObj@@0ABV2@@Z PROC NEAR		; std::fill, COMDAT

; 38   : 	{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	eb 09		 jmp	 SHORT $L156842
$L156843:
  00005	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00008	83 c0 08	 add	 eax, 8
  0000b	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L156842:
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00011	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00014	74 0e		 je	 SHORT $L156844

; 39   : 		*_F = _X; }

  00016	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00019	52		 push	 edx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  0001d	e8 00 00 00 00	 call	 ??4CSkinObj@@QAEAAV0@ABV0@@Z ; CSkinObj::operator=
  00022	eb e1		 jmp	 SHORT $L156843
$L156844:
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?fill@std@@YAXPAVCSkinObj@@0ABV2@@Z ENDP		; std::fill
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAVCSkinObj@@PAV2@00@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?copy_backward@std@@YAPAVCSkinObj@@PAV2@00@Z PROC NEAR	; std::copy_backward, COMDAT

; 24   : 	{while (_F != _L)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L156847:
  00003	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __L$[ebp]
  00009	74 20		 je	 SHORT $L156848

; 25   : 		*--_X = *--_L;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  0000e	83 e9 08	 sub	 ecx, 8
  00011	89 4d 0c	 mov	 DWORD PTR __L$[ebp], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR __L$[ebp]
  00017	52		 push	 edx
  00018	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0001b	83 e8 08	 sub	 eax, 8
  0001e	89 45 10	 mov	 DWORD PTR __X$[ebp], eax
  00021	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  00024	e8 00 00 00 00	 call	 ??4CSkinObj@@QAEAAV0@ABV0@@Z ; CSkinObj::operator=
  00029	eb d8		 jmp	 SHORT $L156847
$L156848:

; 26   : 	return (_X); }

  0002b	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?copy_backward@std@@YAPAVCSkinObj@@PAV2@00@Z ENDP	; std::copy_backward
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAVCSkinObj@@@Z
_TEXT	SEGMENT
__P$ = 8
?_Destroy@std@@YAXPAVCSkinObj@@@Z PROC NEAR		; std::_Destroy, COMDAT

; 38   : 	{_DESTRUCTOR(_Ty, _P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 00		 push	 0
  00005	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000d	ff 12		 call	 DWORD PTR [edx]
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?_Destroy@std@@YAXPAVCSkinObj@@@Z ENDP			; std::_Destroy
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAPAVCSkinBitmap@@0ABQAV2@@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?fill@std@@YAXPAPAVCSkinBitmap@@0ABQAV2@@Z PROC NEAR	; std::fill, COMDAT

; 38   : 	{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	eb 09		 jmp	 SHORT $L156851
$L156852:
  00005	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00008	83 c0 04	 add	 eax, 4
  0000b	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L156851:
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00011	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00014	74 0c		 je	 SHORT $L156853

; 39   : 		*_F = _X; }

  00016	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  00019	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	89 0a		 mov	 DWORD PTR [edx], ecx
  00020	eb e3		 jmp	 SHORT $L156852
$L156853:
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?fill@std@@YAXPAPAVCSkinBitmap@@0ABQAV2@@Z ENDP		; std::fill
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?copy_backward@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z PROC NEAR ; std::copy_backward, COMDAT

; 24   : 	{while (_F != _L)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L156856:
  00003	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __L$[ebp]
  00009	74 1e		 je	 SHORT $L156857

; 25   : 		*--_X = *--_L;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  0000e	83 e9 04	 sub	 ecx, 4
  00011	89 4d 0c	 mov	 DWORD PTR __L$[ebp], ecx
  00014	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00017	83 ea 04	 sub	 edx, 4
  0001a	89 55 10	 mov	 DWORD PTR __X$[ebp], edx
  0001d	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  00023	8b 11		 mov	 edx, DWORD PTR [ecx]
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	eb da		 jmp	 SHORT $L156856
$L156857:

; 26   : 	return (_X); }

  00029	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?copy_backward@std@@YAPAPAVCSkinBitmap@@PAPAV2@00@Z ENDP ; std::copy_backward
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCSkinBitmap@@@Z
_TEXT	SEGMENT
?_Destroy@std@@YAXPAPAVCSkinBitmap@@@Z PROC NEAR	; std::_Destroy, COMDAT

; 38   : 	{_DESTRUCTOR(_Ty, _P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?_Destroy@std@@YAXPAPAVCSkinBitmap@@@Z ENDP		; std::_Destroy
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAPAVCPoint@@0ABQAV2@@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?fill@std@@YAXPAPAVCPoint@@0ABQAV2@@Z PROC NEAR		; std::fill, COMDAT

; 38   : 	{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	eb 09		 jmp	 SHORT $L156860
$L156861:
  00005	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00008	83 c0 04	 add	 eax, 4
  0000b	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L156860:
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00011	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00014	74 0c		 je	 SHORT $L156862

; 39   : 		*_F = _X; }

  00016	8b 55 08	 mov	 edx, DWORD PTR __F$[ebp]
  00019	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	89 0a		 mov	 DWORD PTR [edx], ecx
  00020	eb e3		 jmp	 SHORT $L156861
$L156862:
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?fill@std@@YAXPAPAVCPoint@@0ABQAV2@@Z ENDP		; std::fill
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAPAVCPoint@@PAPAV2@00@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?copy_backward@std@@YAPAPAVCPoint@@PAPAV2@00@Z PROC NEAR ; std::copy_backward, COMDAT

; 24   : 	{while (_F != _L)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L156865:
  00003	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __L$[ebp]
  00009	74 1e		 je	 SHORT $L156866

; 25   : 		*--_X = *--_L;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  0000e	83 e9 04	 sub	 ecx, 4
  00011	89 4d 0c	 mov	 DWORD PTR __L$[ebp], ecx
  00014	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00017	83 ea 04	 sub	 edx, 4
  0001a	89 55 10	 mov	 DWORD PTR __X$[ebp], edx
  0001d	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  00023	8b 11		 mov	 edx, DWORD PTR [ecx]
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	eb da		 jmp	 SHORT $L156865
$L156866:

; 26   : 	return (_X); }

  00029	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?copy_backward@std@@YAPAPAVCPoint@@PAPAV2@00@Z ENDP	; std::copy_backward
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCPoint@@@Z
_TEXT	SEGMENT
?_Destroy@std@@YAXPAPAVCPoint@@@Z PROC NEAR		; std::_Destroy, COMDAT

; 38   : 	{_DESTRUCTOR(_Ty, _P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?_Destroy@std@@YAXPAPAVCPoint@@@Z ENDP			; std::_Destroy
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAVCSCI_WorldActor@@0ABV2@@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?fill@std@@YAXPAVCSCI_WorldActor@@0ABV2@@Z PROC NEAR	; std::fill, COMDAT

; 38   : 	{for (; _F != _L; ++_F)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	eb 09		 jmp	 SHORT $L156869
$L156870:
  00005	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00008	83 c0 02	 add	 eax, 2
  0000b	89 45 08	 mov	 DWORD PTR __F$[ebp], eax
$L156869:
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  00011	3b 4d 0c	 cmp	 ecx, DWORD PTR __L$[ebp]
  00014	74 0e		 je	 SHORT $L156871

; 39   : 		*_F = _X; }

  00016	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00019	66 8b 02	 mov	 ax, WORD PTR [edx]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR __F$[ebp]
  0001f	66 89 01	 mov	 WORD PTR [ecx], ax
  00022	eb e1		 jmp	 SHORT $L156870
$L156871:
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?fill@std@@YAXPAVCSCI_WorldActor@@0ABV2@@Z ENDP		; std::fill
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAVCSCI_WorldActor@@PAV2@00@Z
_TEXT	SEGMENT
__F$ = 8
__L$ = 12
__X$ = 16
?copy_backward@std@@YAPAVCSCI_WorldActor@@PAV2@00@Z PROC NEAR ; std::copy_backward, COMDAT

; 24   : 	{while (_F != _L)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L156874:
  00003	8b 45 08	 mov	 eax, DWORD PTR __F$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __L$[ebp]
  00009	74 20		 je	 SHORT $L156875

; 25   : 		*--_X = *--_L;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __L$[ebp]
  0000e	83 e9 02	 sub	 ecx, 2
  00011	89 4d 0c	 mov	 DWORD PTR __L$[ebp], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR __L$[ebp]
  00017	66 8b 02	 mov	 ax, WORD PTR [edx]
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR __X$[ebp]
  0001d	83 e9 02	 sub	 ecx, 2
  00020	89 4d 10	 mov	 DWORD PTR __X$[ebp], ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR __X$[ebp]
  00026	66 89 02	 mov	 WORD PTR [edx], ax
  00029	eb d8		 jmp	 SHORT $L156874
$L156875:

; 26   : 	return (_X); }

  0002b	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?copy_backward@std@@YAPAVCSCI_WorldActor@@PAV2@00@Z ENDP ; std::copy_backward
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAVCSCI_WorldActor@@@Z
_TEXT	SEGMENT
?_Destroy@std@@YAXPAVCSCI_WorldActor@@@Z PROC NEAR	; std::_Destroy, COMDAT

; 38   : 	{_DESTRUCTOR(_Ty, _P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?_Destroy@std@@YAXPAVCSCI_WorldActor@@@Z ENDP		; std::_Destroy
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAPAVCSkinCtrl@@HPAPAV2@@Z
_TEXT	SEGMENT
__N$ = 8
?_Allocate@std@@YAPAPAVCSkinCtrl@@HPAPAV2@@Z PROC NEAR	; std::_Allocate, COMDAT

; 27   : 	{if (_N < 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR __N$[ebp], 0
  00007	7d 07		 jge	 SHORT $L156879

; 28   : 		_N = 0;

  00009	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __N$[ebp], 0
$L156879:

; 30   : 		(_SIZT)_N * sizeof (_Ty))); }

  00010	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	83 c4 04	 add	 esp, 4
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?_Allocate@std@@YAPAPAVCSkinCtrl@@HPAPAV2@@Z ENDP	; std::_Allocate
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAVCSkinObj@@HPAV2@@Z
_TEXT	SEGMENT
__N$ = 8
?_Allocate@std@@YAPAVCSkinObj@@HPAV2@@Z PROC NEAR	; std::_Allocate, COMDAT

; 27   : 	{if (_N < 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR __N$[ebp], 0
  00007	7d 07		 jge	 SHORT $L156884

; 28   : 		_N = 0;

  00009	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __N$[ebp], 0
$L156884:

; 30   : 		(_SIZT)_N * sizeof (_Ty))); }

  00010	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	83 c4 04	 add	 esp, 4
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?_Allocate@std@@YAPAVCSkinObj@@HPAV2@@Z ENDP		; std::_Allocate
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAPAVCSkinBitmap@@HPAPAV2@@Z
_TEXT	SEGMENT
__N$ = 8
?_Allocate@std@@YAPAPAVCSkinBitmap@@HPAPAV2@@Z PROC NEAR ; std::_Allocate, COMDAT

; 27   : 	{if (_N < 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR __N$[ebp], 0
  00007	7d 07		 jge	 SHORT $L156889

; 28   : 		_N = 0;

  00009	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __N$[ebp], 0
$L156889:

; 30   : 		(_SIZT)_N * sizeof (_Ty))); }

  00010	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	83 c4 04	 add	 esp, 4
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?_Allocate@std@@YAPAPAVCSkinBitmap@@HPAPAV2@@Z ENDP	; std::_Allocate
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAPAVCPoint@@HPAPAV2@@Z
_TEXT	SEGMENT
__N$ = 8
?_Allocate@std@@YAPAPAVCPoint@@HPAPAV2@@Z PROC NEAR	; std::_Allocate, COMDAT

; 27   : 	{if (_N < 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR __N$[ebp], 0
  00007	7d 07		 jge	 SHORT $L156894

; 28   : 		_N = 0;

  00009	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __N$[ebp], 0
$L156894:

; 30   : 		(_SIZT)_N * sizeof (_Ty))); }

  00010	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	83 c4 04	 add	 esp, 4
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?_Allocate@std@@YAPAPAVCPoint@@HPAPAV2@@Z ENDP		; std::_Allocate
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAVCSCI_WorldActor@@HPAV2@@Z
_TEXT	SEGMENT
__N$ = 8
?_Allocate@std@@YAPAVCSCI_WorldActor@@HPAV2@@Z PROC NEAR ; std::_Allocate, COMDAT

; 27   : 	{if (_N < 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR __N$[ebp], 0
  00007	7d 07		 jge	 SHORT $L156899

; 28   : 		_N = 0;

  00009	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __N$[ebp], 0
$L156899:

; 30   : 		(_SIZT)_N * sizeof (_Ty))); }

  00010	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  00013	d1 e0		 shl	 eax, 1
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	83 c4 04	 add	 esp, 4
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?_Allocate@std@@YAPAVCSCI_WorldActor@@HPAV2@@Z ENDP	; std::_Allocate
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT ?_Construct@std@@YAXPAPAVCSkinCtrl@@ABQAV2@@Z
_TEXT	SEGMENT
$T160230 = -4
__P$ = 8
__V$ = 12
?_Construct@std@@YAXPAPAVCSkinCtrl@@ABQAV2@@Z PROC NEAR	; std::_Construct, COMDAT

; 34   : 	{new ((void _FARQ *)_P) _T1(_V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00009	50		 push	 eax
  0000a	6a 04		 push	 4
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR $T160230[ebp], eax
  00017	83 7d fc 00	 cmp	 DWORD PTR $T160230[ebp], 0
  0001b	74 12		 je	 SHORT $L160231
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR $T160230[ebp]
  00020	8b 55 0c	 mov	 edx, DWORD PTR __V$[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	89 01		 mov	 DWORD PTR [ecx], eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR $T160230[ebp]
  0002a	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
  0002d	eb 07		 jmp	 SHORT $L160232
$L160231:
  0002f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L160232:
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?_Construct@std@@YAXPAPAVCSkinCtrl@@ABQAV2@@Z ENDP	; std::_Construct
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
;	COMDAT xdata$x
; File C:\Program Files\Microsoft Visual Studio\VC98\INCLUDE\xmemory
xdata$x	SEGMENT
$T160240 DD	019930520H
	DD	01H
	DD	FLAT:$T160242
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160242 DD	0ffffffffH
	DD	FLAT:$L160238
xdata$x	ENDS
;	COMDAT ?_Construct@std@@YAXPAVCSkinObj@@ABV2@@Z
_TEXT	SEGMENT
$T160234 = -16
$T160235 = -20
__$EHRec$ = -12
__P$ = 8
__V$ = 12
?_Construct@std@@YAXPAVCSkinObj@@ABV2@@Z PROC NEAR	; std::_Construct, COMDAT

; 34   : 	{new ((void _FARQ *)_P) _T1(_V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L160241
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0001e	50		 push	 eax
  0001f	6a 08		 push	 8
  00021	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00026	83 c4 08	 add	 esp, 8
  00029	89 45 ec	 mov	 DWORD PTR $T160235[ebp], eax
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	83 7d ec 00	 cmp	 DWORD PTR $T160235[ebp], 0
  00037	74 11		 je	 SHORT $L160236
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR __V$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 4d ec	 mov	 ecx, DWORD PTR $T160235[ebp]
  00040	e8 00 00 00 00	 call	 ??0CSkinObj@@QAE@ABV0@@Z ; CSkinObj::CSkinObj
  00045	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00048	eb 07		 jmp	 SHORT $L160237
$L160236:
  0004a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR -24+[ebp], 0
$L160237:
  00051	8b 55 e8	 mov	 edx, DWORD PTR -24+[ebp]
  00054	89 55 f0	 mov	 DWORD PTR $T160234[ebp], edx
  00057	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160238:
  00000	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ec	 mov	 ecx, DWORD PTR $T160235[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
$L160241:
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160240
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Construct@std@@YAXPAVCSkinObj@@ABV2@@Z ENDP		; std::_Construct
;	COMDAT ?_Construct@std@@YAXPAPAVCSkinBitmap@@ABQAV2@@Z
_TEXT	SEGMENT
$T160246 = -4
__P$ = 8
__V$ = 12
?_Construct@std@@YAXPAPAVCSkinBitmap@@ABQAV2@@Z PROC NEAR ; std::_Construct, COMDAT

; 34   : 	{new ((void _FARQ *)_P) _T1(_V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00009	50		 push	 eax
  0000a	6a 04		 push	 4
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR $T160246[ebp], eax
  00017	83 7d fc 00	 cmp	 DWORD PTR $T160246[ebp], 0
  0001b	74 12		 je	 SHORT $L160247
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR $T160246[ebp]
  00020	8b 55 0c	 mov	 edx, DWORD PTR __V$[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	89 01		 mov	 DWORD PTR [ecx], eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR $T160246[ebp]
  0002a	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
  0002d	eb 07		 jmp	 SHORT $L160248
$L160247:
  0002f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L160248:
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?_Construct@std@@YAXPAPAVCSkinBitmap@@ABQAV2@@Z ENDP	; std::_Construct
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAPAVCPoint@@ABQAV2@@Z
_TEXT	SEGMENT
$T160250 = -4
__P$ = 8
__V$ = 12
?_Construct@std@@YAXPAPAVCPoint@@ABQAV2@@Z PROC NEAR	; std::_Construct, COMDAT

; 34   : 	{new ((void _FARQ *)_P) _T1(_V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00009	50		 push	 eax
  0000a	6a 04		 push	 4
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR $T160250[ebp], eax
  00017	83 7d fc 00	 cmp	 DWORD PTR $T160250[ebp], 0
  0001b	74 12		 je	 SHORT $L160251
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR $T160250[ebp]
  00020	8b 55 0c	 mov	 edx, DWORD PTR __V$[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	89 01		 mov	 DWORD PTR [ecx], eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR $T160250[ebp]
  0002a	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
  0002d	eb 07		 jmp	 SHORT $L160252
$L160251:
  0002f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L160252:
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?_Construct@std@@YAXPAPAVCPoint@@ABQAV2@@Z ENDP		; std::_Construct
_TEXT	ENDS
;	COMDAT xdata$x
; File C:\Program Files\Microsoft Visual Studio\VC98\INCLUDE\xmemory
xdata$x	SEGMENT
$T160260 DD	019930520H
	DD	01H
	DD	FLAT:$T160262
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160262 DD	0ffffffffH
	DD	FLAT:$L160258
xdata$x	ENDS
;	COMDAT ?_Construct@std@@YAXPAVCSCI_WorldActor@@ABV2@@Z
_TEXT	SEGMENT
$T160254 = -16
$T160255 = -20
__$EHRec$ = -12
__P$ = 8
__V$ = 12
?_Construct@std@@YAXPAVCSCI_WorldActor@@ABV2@@Z PROC NEAR ; std::_Construct, COMDAT

; 34   : 	{new ((void _FARQ *)_P) _T1(_V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L160261
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0001e	50		 push	 eax
  0001f	6a 02		 push	 2
  00021	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00026	83 c4 08	 add	 esp, 8
  00029	89 45 ec	 mov	 DWORD PTR $T160255[ebp], eax
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	83 7d ec 00	 cmp	 DWORD PTR $T160255[ebp], 0
  00037	74 11		 je	 SHORT $L160256
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR __V$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 4d ec	 mov	 ecx, DWORD PTR $T160255[ebp]
  00040	e8 00 00 00 00	 call	 ??0CSCI_WorldActor@@QAE@ABV0@@Z ; CSCI_WorldActor::CSCI_WorldActor
  00045	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00048	eb 07		 jmp	 SHORT $L160257
$L160256:
  0004a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR -24+[ebp], 0
$L160257:
  00051	8b 55 e8	 mov	 edx, DWORD PTR -24+[ebp]
  00054	89 55 f0	 mov	 DWORD PTR $T160254[ebp], edx
  00057	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160258:
  00000	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00003	50		 push	 eax
  00004	8b 4d ec	 mov	 ecx, DWORD PTR $T160255[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
$L160261:
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160260
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Construct@std@@YAXPAVCSCI_WorldActor@@ABV2@@Z ENDP	; std::_Construct
;	COMDAT ??_ECCharSelectWnd@@WJE@AEPAXI@Z
_TEXT	SEGMENT
??_ECCharSelectWnd@@WJE@AEPAXI@Z PROC NEAR		; CCharSelectWnd::`vector deleting destructor', COMDAT
  00000	81 e9 94 00 00
	00		 sub	 ecx, 148		; 00000094H
  00006	e9 00 00 00 00	 jmp	 ??_ECCharSelectWnd@@UAEPAXI@Z ; CCharSelectWnd::`vector deleting destructor'
??_ECCharSelectWnd@@WJE@AEPAXI@Z ENDP			; CCharSelectWnd::`vector deleting destructor'
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
;	COMDAT ?RequestResize@CRichEditCtrl@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?RequestResize@CRichEditCtrl@@QAEXXZ PROC NEAR		; CRichEditCtrl::RequestResize, COMDAT

; 669  : 	{ ASSERT(::IsWindow(m_hWnd)); ::SendMessage(m_hWnd, EM_REQUESTRESIZE, 0, 0L); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 41 04 00 00	 push	 1089			; 00000441H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?RequestResize@CRichEditCtrl@@QAEXXZ ENDP		; CRichEditCtrl::RequestResize
_TEXT	ENDS
;	COMDAT ?SetEventMask@CRichEditCtrl@@QAEKK@Z
_TEXT	SEGMENT
_dwEventMask$ = 8
_this$ = -4
?SetEventMask@CRichEditCtrl@@QAEKK@Z PROC NEAR		; CRichEditCtrl::SetEventMask, COMDAT

; 678  : 	{ ASSERT(::IsWindow(m_hWnd)); return (DWORD)::SendMessage(m_hWnd, EM_SETEVENTMASK, 0, dwEventMask); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _dwEventMask$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 45 04 00 00	 push	 1093			; 00000445H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetEventMask@CRichEditCtrl@@QAEKK@Z ENDP		; CRichEditCtrl::SetEventMask
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__P$ = 12
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 42   : 	{return (_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 45   : 	{return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0MemID@@QAE@ABV0@@Z PROC NEAR				; MemID::MemID, COMDAT

; 19   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _id$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 20   : 	}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0MemID@@QAE@ABV0@@Z ENDP				; MemID::MemID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0MemID@@QAE@G@Z PROC NEAR				; MemID::MemID, COMDAT

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 4d 08	 mov	 cx, WORD PTR _h$[ebp]
  0000e	66 89 08	 mov	 WORD PTR [eax], cx

; 24   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0MemID@@QAE@G@Z ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4
??BMemID@@QBEGXZ PROC NEAR				; MemID::operator unsigned short, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 		return handle;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 95   : 	}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BMemID@@QBEGXZ ENDP					; MemID::operator unsigned short
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@HH@Z
_TEXT	SEGMENT
_num$ = 8
_denom$ = 12
_this$ = -4
??0Ratio@@QAE@HH@Z PROC NEAR				; Ratio::Ratio, COMDAT

; 9    : 	Ratio(int num, int denom)	:	numer(num), denom(denom) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _num$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _denom$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0Ratio@@QAE@HH@Z ENDP					; Ratio::Ratio
_TEXT	ENDS
PUBLIC	??1CelObj@@UAE@XZ				; CelObj::~CelObj
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObjMem@@UAE@XZ PROC NEAR				; CelObjMem::~CelObjMem, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CelObjMem@@UAE@XZ ENDP				; CelObjMem::~CelObjMem
_TEXT	ENDS
PUBLIC	??_7CelObj@@6B@					; CelObj::`vftable'
PUBLIC	??_GCelObj@@UAEPAXI@Z				; CelObj::`scalar deleting destructor'
PUBLIC	??_ECelObj@@UAEPAXI@Z				; CelObj::`vector deleting destructor'
EXTRN	__purecall:NEAR
EXTRN	?ReadPix@CelObj@@UAEEHHH@Z:NEAR			; CelObj::ReadPix
;	COMDAT ??_7CelObj@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\celobj.hpp
CONST	SEGMENT
??_7CelObj@@6B@ DD FLAT:??_ECelObj@@UAEPAXI@Z		; CelObj::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?ReadPix@CelObj@@UAEEHHH@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CelObj@@UAE@XZ PROC NEAR				; CelObj::~CelObj, COMDAT

; 173  : 	virtual	~CelObj()  {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CelObj@@6B@ ; CelObj::`vftable'
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1CelObj@@UAE@XZ ENDP					; CelObj::~CelObj
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCelObj@@UAEPAXI@Z PROC NEAR				; CelObj::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CelObj@@UAE@XZ	; CelObj::~CelObj
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L115115
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L115115:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCelObj@@UAEPAXI@Z ENDP				; CelObj::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??DTextID@@QAEPADXZ				; TextID::operator*
PUBLIC	?GetProperty@Object@@QAEFG@Z			; Object::GetProperty
PUBLIC	??CFakeObjectID@@QBEPAUObject@@XZ		; FakeObjectID::operator->
PUBLIC	??0ObjectID@@QAE@G@Z				; ObjectID::ObjectID
PUBLIC	?IsObject@ObjectID@@QBEHXZ			; ObjectID::IsObject
EXTRN	??0TextID@@QAE@G@Z:NEAR				; TextID::TextID
;	COMDAT ??DStringID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -16
_obj$ = -4
$T160279 = -8
$T160280 = -12
??DStringID@@QAEPADXZ PROC NEAR				; StringID::operator*, COMDAT

; 63   : 	char * operator *() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 		ObjectID obj ( handle );

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000f	51		 push	 ecx
  00010	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  00013	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@G@Z	; ObjectID::ObjectID

; 65   : 
; 66   : 		if ( obj.IsObject() ) {

  00018	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  0001b	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  00020	85 c0		 test	 eax, eax
  00022	74 23		 je	 SHORT $L119917

; 67   : 			return *(TextID)obj->GetProperty ( s_data );

  00024	6a 71		 push	 113			; 00000071H
  00026	8d 4d fc	 lea	 ecx, DWORD PTR _obj$[ebp]
  00029	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0002e	8b c8		 mov	 ecx, eax
  00030	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty
  00035	50		 push	 eax
  00036	8d 4d f8	 lea	 ecx, DWORD PTR $T160279[ebp]
  00039	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
  00045	eb 16		 jmp	 SHORT $L119915
$L119917:

; 69   : 
; 70   : 		return *(TextID)handle;

  00047	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	66 8b 02	 mov	 ax, WORD PTR [edx]
  0004d	50		 push	 eax
  0004e	8d 4d f4	 lea	 ecx, DWORD PTR $T160280[ebp]
  00051	e8 00 00 00 00	 call	 ??0TextID@@QAE@G@Z	; TextID::TextID
  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ??DTextID@@QAEPADXZ	; TextID::operator*
$L119915:

; 71   : 	}

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??DStringID@@QAEPADXZ ENDP				; StringID::operator*
_TEXT	ENDS
PUBLIC	?GetPropAddrCheck@Object@@QAEPAFG@Z		; Object::GetPropAddrCheck
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@Object@@QAEFG@Z PROC NEAR			; Object::GetProperty, COMDAT

; 170  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		//	get a property given a selector
; 172  : 		return *GetPropAddrCheck(selector);

  00007	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetPropAddrCheck@Object@@QAEPAFG@Z ; Object::GetPropAddrCheck
  00014	66 8b 00	 mov	 ax, WORD PTR [eax]

; 173  : 	}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetProperty@Object@@QAEFG@Z ENDP			; Object::GetProperty
_TEXT	ENDS
PUBLIC	?GetPropAddr@Object@@QAEPAFG@Z			; Object::GetPropAddr
EXTRN	?Fatal@MsgMgr@@QAAXHZZ:NEAR			; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -8
_property$ = -4
?GetPropAddrCheck@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddrCheck, COMDAT

; 153  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 		//	get a property's address, checking for valid property
; 155  : 		Property* property = GetPropAddr(selector);

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetPropAddr@Object@@QAEPAFG@Z ; Object::GetPropAddr
  00016	89 45 fc	 mov	 DWORD PTR _property$[ebp], eax

; 156  : 		if (!property)

  00019	83 7d fc 00	 cmp	 DWORD PTR _property$[ebp], 0
  0001d	75 1b		 jne	 SHORT $L119533

; 157  : 			msgMgr->Fatal(Msg_InvalidProperty, selector);

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _selector$[ebp]
  00022	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00028	51		 push	 ecx
  00029	6a 29		 push	 41			; 00000029H
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
$L119533:

; 158  : 		return property;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _property$[ebp]

; 159  : 	}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetPropAddrCheck@Object@@QAEPAFG@Z ENDP		; Object::GetPropAddrCheck
_TEXT	ENDS
PUBLIC	?selectorDict@Object@@QAEPAVSelectorDict@@XZ	; Object::selectorDict
PUBLIC	??AObject@@QAEAAFH@Z				; Object::operator[]
EXTRN	?get@SelectorDict@@QAEHG@Z:NEAR			; SelectorDict::get
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -8
_index$ = -4
?GetPropAddr@Object@@QAEPAFG@Z PROC NEAR		; Object::GetPropAddr, COMDAT

; 127  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 		int index = selectorDict()->get ( selector );

  00009	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?get@SelectorDict@@QAEHG@Z ; SelectorDict::get
  0001d	89 45 fc	 mov	 DWORD PTR _index$[ebp], eax

; 129  : 
; 130  : 		if ( index != -1 && !selectorDict()->script )

  00020	83 7d fc ff	 cmp	 DWORD PTR _index$[ebp], -1
  00024	74 2b		 je	 SHORT $L119524
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  0002e	33 c9		 xor	 ecx, ecx
  00030	66 8b 48 16	 mov	 cx, WORD PTR [eax+22]
  00034	85 c9		 test	 ecx, ecx
  00036	75 19		 jne	 SHORT $L119524

; 131  : 			return &(*this)[selectorDict()->offset]; 

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?selectorDict@Object@@QAEPAVSelectorDict@@XZ ; Object::selectorDict
  00040	33 d2		 xor	 edx, edx
  00042	66 8b 50 14	 mov	 dx, WORD PTR [eax+20]
  00046	52		 push	 edx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ??AObject@@QAEAAFH@Z	; Object::operator[]
  0004f	eb 02		 jmp	 SHORT $L119522
$L119524:

; 132  : 
; 133  : 		return 0;

  00051	33 c0		 xor	 eax, eax
$L119522:

; 134  : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?GetPropAddr@Object@@QAEPAFG@Z ENDP			; Object::GetPropAddr
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT
_this$ = -4
?selectorDict@Object@@QAEPAVSelectorDict@@XZ PROC NEAR	; Object::selectorDict, COMDAT

; 102  : 	SelectorDict *selectorDict ( void ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 		return _selectorDict;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 104  : 	};

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?selectorDict@Object@@QAEPAVSelectorDict@@XZ ENDP	; Object::selectorDict
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT
_index$ = 8
_this$ = -4
??AObject@@QAEAAFH@Z PROC NEAR				; Object::operator[], COMDAT

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		//	get a reference to a property given the number of the property
; 119  : 		return ((Property*) this)[index];

  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 120  : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??AObject@@QAEAAFH@Z ENDP				; Object::operator[]
_TEXT	ENDS
PUBLIC	??DMemID@@QBEPAXXZ				; MemID::operator*
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT
_this$ = -4
??CFakeObjectID@@QBEPAUObject@@XZ PROC NEAR		; FakeObjectID::operator->, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??CFakeObjectID@@QBEPAUObject@@XZ ENDP			; FakeObjectID::operator->
_TEXT	ENDS
PUBLIC	?GetAddr@MemoryMgr@@QAEPAXG@Z			; MemoryMgr::GetAddr
EXTRN	_memMgr:DWORD
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
??DMemID@@QBEPAXXZ PROC NEAR				; MemID::operator*, COMDAT

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return memMgr->GetAddr(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?GetAddr@MemoryMgr@@QAEPAXG@Z ; MemoryMgr::GetAddr

; 100  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??DMemID@@QBEPAXXZ ENDP					; MemID::operator*
_TEXT	ENDS
EXTRN	__descPtrTable:BYTE
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -4
?GetAddr@MemoryMgr@@QAEPAXG@Z PROC NEAR			; MemoryMgr::GetAddr, COMDAT

; 462  : 	inline void* MemoryMgr::GetAddr(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 463  : //		CheckValid(theID);
; 464  : 		return _descPtrTable[(unsigned int)((unsigned short)theID)];

  00007	8b 45 08	 mov	 eax, DWORD PTR _theID$[ebp]
  0000a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000f	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR __descPtrTable[eax*4]

; 465  : 	}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAddr@MemoryMgr@@QAEPAXG@Z ENDP			; MemoryMgr::GetAddr
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@G@Z			; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0ObjectID@@QAE@G@Z PROC NEAR				; ObjectID::ObjectID, COMDAT

; 230  : 	ObjectID(SOL_Handle h) : FakeObjectID(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@G@Z ; FakeObjectID::FakeObjectID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0ObjectID@@QAE@G@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT
_h$ = 8
_this$ = -4
??0FakeObjectID@@QAE@G@Z PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	66 8b 45 08	 mov	 ax, WORD PTR _h$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@G@Z ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
PUBLIC	?IsValid@MemID@@QBEHXZ				; MemID::IsValid
EXTRN	?GetMemType@MemID@@QBE?AW4MemType@@XZ:NEAR	; MemID::GetMemType
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsObject@ObjectID@@QBEHXZ PROC NEAR			; ObjectID::IsObject, COMDAT

; 247  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  : 		return IsValid() && GetMemType() == MemObject;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?IsValid@MemID@@QBEHXZ	; MemID::IsValid
  00011	85 c0		 test	 eax, eax
  00013	74 16		 je	 SHORT $L160292
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetMemType@MemID@@QBE?AW4MemType@@XZ ; MemID::GetMemType
  0001d	83 f8 34	 cmp	 eax, 52			; 00000034H
  00020	75 09		 jne	 SHORT $L160292
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  00029	eb 07		 jmp	 SHORT $L160293
$L160292:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L160293:
  00032	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 249  : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?IsObject@ObjectID@@QBEHXZ ENDP				; ObjectID::IsObject
_TEXT	ENDS
PUBLIC	?IsValid@MemoryMgr@@QAEHG@Z			; MemoryMgr::IsValid
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@MemID@@QBEHXZ PROC NEAR			; MemID::IsValid, COMDAT

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return memMgr->IsValid(handle);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000d	51		 push	 ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _memMgr
  00014	e8 00 00 00 00	 call	 ?IsValid@MemoryMgr@@QAEHG@Z ; MemoryMgr::IsValid

; 64   : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IsValid@MemID@@QBEHXZ ENDP				; MemID::IsValid
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT
_theID$ = 8
_this$ = -8
_tempID$ = -4
?IsValid@MemoryMgr@@QAEHG@Z PROC NEAR			; MemoryMgr::IsValid, COMDAT

; 475  : 	inline Bool MemoryMgr::IsValid(SOL_Handle theID) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		unsigned short tempID = (unsigned short)theID;

  00009	66 8b 45 08	 mov	 ax, WORD PTR _theID$[ebp]
  0000d	66 89 45 fc	 mov	 WORD PTR _tempID$[ebp], ax

; 477  : 
; 478  : 		return(
; 479  : 				(tempID)															&&
; 480  : 				(tempID < maxDescriptors)									&&
; 481  : 				(desc[tempID].memInfo.bits.freeDescriptor == False)	&&
; 482  : 				(desc[tempID].memInfo.bits.freeMemory == False)
; 483  : 				);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 58		 je	 SHORT $L160296
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00021	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0002d	73 47		 jae	 SHORT $L160296
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _tempID$[ebp]
  00032	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00038	c1 e1 04	 shl	 ecx, 4
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00044	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  00047	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 28		 jne	 SHORT $L160296
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _tempID$[ebp]
  00051	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00057	c1 e2 04	 shl	 edx, 4
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00060	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00063	c1 e2 14	 shl	 edx, 20			; 00000014H
  00066	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00069	85 d2		 test	 edx, edx
  0006b	75 09		 jne	 SHORT $L160296
  0006d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00074	eb 07		 jmp	 SHORT $L160297
$L160296:
  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L160297:
  0007d	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 484  : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?IsValid@MemoryMgr@@QAEHG@Z ENDP			; MemoryMgr::IsValid
_TEXT	ENDS
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\textid.hpp
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4
??DTextID@@QAEPADXZ PROC NEAR				; TextID::operator*, COMDAT

; 24   : 	char	*operator *() { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 		return handle ? (char *)MemID::operator*() : ""; 

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	33 c9		 xor	 ecx, ecx
  0000e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0d		 je	 SHORT $L160299
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??DMemID@@QBEPAXXZ	; MemID::operator*
  0001d	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00020	eb 07		 jmp	 SHORT $L160300
$L160299:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L160300:
  00029	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]

; 26   : 	}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??DTextID@@QAEPADXZ ENDP				; TextID::operator*
_TEXT	ENDS
PUBLIC	?GetProperty@ObjectID@@QBEFG@Z			; ObjectID::GetProperty
;	COMDAT ?get_bitmap@CSCI_BitMap@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_bitmap@CSCI_BitMap@@QAEFXZ PROC NEAR		; CSCI_BitMap::get_bitmap, COMDAT

; 1399 : 	Property get_bitmap() { return GetProperty ( s_bitmap ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 11		 push	 17			; 00000011H
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?get_bitmap@CSCI_BitMap@@QAEFXZ ENDP			; CSCI_BitMap::get_bitmap
_TEXT	ENDS
PUBLIC	?AssureValid@ObjectID@@QBEXXZ			; ObjectID::AssureValid
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT
_selector$ = 8
_this$ = -4
?GetProperty@ObjectID@@QBEFG@Z PROC NEAR		; ObjectID::GetProperty, COMDAT

; 290  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 		//	get a property given a selector
; 292  : 		AssureValid();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AssureValid@ObjectID@@QBEXXZ ; ObjectID::AssureValid

; 293  : 		return (*this)->GetProperty(selector);

  0000f	66 8b 45 08	 mov	 ax, WORD PTR _selector$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??CFakeObjectID@@QBEPAUObject@@XZ ; FakeObjectID::operator->
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?GetProperty@Object@@QAEFG@Z ; Object::GetProperty

; 294  : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?GetProperty@ObjectID@@QBEFG@Z ENDP			; ObjectID::GetProperty
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssureValid@ObjectID@@QBEXXZ PROC NEAR			; ObjectID::AssureValid, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 239  : 		if (!IsObject())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?IsObject@ObjectID@@QBEHXZ ; ObjectID::IsObject
  0000f	85 c0		 test	 eax, eax
  00011	75 1e		 jne	 SHORT $L119692

; 240  : 			msgMgr->Fatal(Msg_NotObject, (int) *this);

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??BMemID@@QBEGXZ	; MemID::operator unsigned short
  0001b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00020	50		 push	 eax
  00021	6a 2f		 push	 47			; 0000002fH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXHZZ	; MsgMgr::Fatal
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L119692:

; 241  : 	}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?AssureValid@ObjectID@@QBEXXZ ENDP			; ObjectID::AssureValid
_TEXT	ENDS
;	COMDAT ?get_xScaleAdj@CSCI_Feature@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_xScaleAdj@CSCI_Feature@@QAEFXZ PROC NEAR		; CSCI_Feature::get_xScaleAdj, COMDAT

; 1475 : 	Property get_xScaleAdj() { return GetProperty ( s_xScaleAdj ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 52 01 00 00	 push	 338			; 00000152H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_xScaleAdj@CSCI_Feature@@QAEFXZ ENDP		; CSCI_Feature::get_xScaleAdj
_TEXT	ENDS
;	COMDAT ?get_yScaleAdj@CSCI_Feature@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4
?get_yScaleAdj@CSCI_Feature@@QAEFXZ PROC NEAR		; CSCI_Feature::get_yScaleAdj, COMDAT

; 1478 : 	Property get_yScaleAdj() { return GetProperty ( s_yScaleAdj ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	68 53 01 00 00	 push	 339			; 00000153H
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?get_yScaleAdj@CSCI_Feature@@QAEFXZ ENDP		; CSCI_Feature::get_yScaleAdj
_TEXT	ENDS
PUBLIC	??0StringID@@QAE@ABVMemID@@@Z			; StringID::StringID
;	COMDAT ?get_pProperName@CSCI_BCharacter@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
$T160308 = -4
?get_pProperName@CSCI_BCharacter@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_BCharacter::get_pProperName, COMDAT

; 4063 : 	StringID get_pProperName() { return GetProperty ( s_pProperName ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 5d 03 00 00	 push	 861			; 0000035dH
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T160308[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T160308[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pProperName@CSCI_BCharacter@@QAE?AVStringID@@XZ ENDP ; CSCI_BCharacter::get_pProperName
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0StringID@@QAE@ABVMemID@@@Z PROC NEAR			; StringID::StringID, COMDAT

; 58   : 	StringID ( const MemID &id ) : MemID ( id ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0StringID@@QAE@ABVMemID@@@Z ENDP			; StringID::StringID
_TEXT	ENDS
PUBLIC	??0CSCI_Actor@@QAE@XZ				; CSCI_Actor::CSCI_Actor
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_WorldObject@@QAE@XZ PROC NEAR			; CSCI_WorldObject::CSCI_WorldObject, COMDAT

; 4472 : 	CSCI_WorldObject() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Actor@@QAE@XZ	; CSCI_Actor::CSCI_Actor
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_WorldObject@@QAE@XZ ENDP			; CSCI_WorldObject::CSCI_WorldObject
_TEXT	ENDS
PUBLIC	??0CSCI_Prop@@QAE@XZ				; CSCI_Prop::CSCI_Prop
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Actor@@QAE@XZ PROC NEAR				; CSCI_Actor::CSCI_Actor, COMDAT

; 1593 : 	CSCI_Actor() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Prop@@QAE@XZ	; CSCI_Prop::CSCI_Prop
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Actor@@QAE@XZ ENDP				; CSCI_Actor::CSCI_Actor
_TEXT	ENDS
PUBLIC	??0CSCI_View@@QAE@XZ				; CSCI_View::CSCI_View
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Prop@@QAE@XZ PROC NEAR				; CSCI_Prop::CSCI_Prop, COMDAT

; 1557 : 	CSCI_Prop() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_View@@QAE@XZ	; CSCI_View::CSCI_View
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Prop@@QAE@XZ ENDP				; CSCI_Prop::CSCI_Prop
_TEXT	ENDS
PUBLIC	??0CSCI_Feature@@QAE@XZ				; CSCI_Feature::CSCI_Feature
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_View@@QAE@XZ PROC NEAR				; CSCI_View::CSCI_View, COMDAT

; 1512 : 	CSCI_View() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Feature@@QAE@XZ	; CSCI_Feature::CSCI_Feature
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_View@@QAE@XZ ENDP				; CSCI_View::CSCI_View
_TEXT	ENDS
PUBLIC	??0CSCI_BitMap@@QAE@XZ				; CSCI_BitMap::CSCI_BitMap
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Feature@@QAE@XZ PROC NEAR			; CSCI_Feature::CSCI_Feature, COMDAT

; 1434 : 	CSCI_Feature() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_BitMap@@QAE@XZ	; CSCI_BitMap::CSCI_BitMap
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Feature@@QAE@XZ ENDP				; CSCI_Feature::CSCI_Feature
_TEXT	ENDS
PUBLIC	??0CSCI_Rectangle@@QAE@XZ			; CSCI_Rectangle::CSCI_Rectangle
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_BitMap@@QAE@XZ PROC NEAR			; CSCI_BitMap::CSCI_BitMap, COMDAT

; 1355 : 	CSCI_BitMap() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Rectangle@@QAE@XZ ; CSCI_Rectangle::CSCI_Rectangle
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_BitMap@@QAE@XZ ENDP				; CSCI_BitMap::CSCI_BitMap
_TEXT	ENDS
PUBLIC	??0CSCI_Object@@QAE@XZ				; CSCI_Object::CSCI_Object
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Rectangle@@QAE@XZ PROC NEAR			; CSCI_Rectangle::CSCI_Rectangle, COMDAT

; 514  : 	CSCI_Rectangle() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CSCI_Object@@QAE@XZ	; CSCI_Object::CSCI_Object
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Rectangle@@QAE@XZ ENDP				; CSCI_Rectangle::CSCI_Rectangle
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@XZ				; ObjectID::ObjectID
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSCI_Object@@QAE@XZ PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT

; 10   : 	CSCI_Object() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@XZ	; ObjectID::ObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSCI_Object@@QAE@XZ ENDP				; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@XZ				; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ObjectID@@QAE@XZ PROC NEAR				; ObjectID::ObjectID, COMDAT

; 227  : 	ObjectID() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@XZ	; FakeObjectID::FakeObjectID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0ObjectID@@QAE@XZ ENDP				; ObjectID::ObjectID
_TEXT	ENDS
PUBLIC	??0MemID@@QAE@XZ				; MemID::MemID
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0FakeObjectID@@QAE@XZ PROC NEAR			; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0MemID@@QAE@XZ	; MemID::MemID
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0FakeObjectID@@QAE@XZ ENDP				; FakeObjectID::FakeObjectID
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0MemID@@QAE@XZ PROC NEAR				; MemID::MemID, COMDAT

; 15   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 16   : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0MemID@@QAE@XZ ENDP					; MemID::MemID
_TEXT	ENDS
;	COMDAT ?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
$T160322 = -4
?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ PROC NEAR ; CSCI_WorldObject::get_pName, COMDAT

; 4477 : 	StringID get_pName() { return GetProperty ( s_pName ); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	68 15 03 00 00	 push	 789			; 00000315H
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetProperty@ObjectID@@QBEFG@Z ; ObjectID::GetProperty
  00016	50		 push	 eax
  00017	8d 4d fc	 lea	 ecx, DWORD PTR $T160322[ebp]
  0001a	e8 00 00 00 00	 call	 ??0MemID@@QAE@G@Z	; MemID::MemID
  0001f	8d 45 fc	 lea	 eax, DWORD PTR $T160322[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00026	e8 00 00 00 00	 call	 ??0StringID@@QAE@ABVMemID@@@Z ; StringID::StringID
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?get_pName@CSCI_WorldObject@@QAE?AVStringID@@XZ ENDP	; CSCI_WorldObject::get_pName
_TEXT	ENDS
PUBLIC	??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z	; std::bitset<6>::reference::operator=
PUBLIC	??A?$bitset@$05@std@@QAE?AVreference@01@I@Z	; std::bitset<6>::operator[]
;	COMDAT ?SetAllowMove@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT
_bValue$ = 8
_this$ = -12
$T160324 = -8
?SetAllowMove@CSkinWnd@@IAEX_N@Z PROC NEAR		; CSkinWnd::SetAllowMove, COMDAT

; 138  : 	void SetAllowMove ( bool bValue ) { m_state[sknWndAllowMove] = bValue; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000c	50		 push	 eax
  0000d	6a 03		 push	 3
  0000f	8d 4d f8	 lea	 ecx, DWORD PTR $T160324[ebp]
  00012	51		 push	 ecx
  00013	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0001c	e8 00 00 00 00	 call	 ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ; std::bitset<6>::operator[]
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ; std::bitset<6>::reference::operator=
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetAllowMove@CSkinWnd@@IAEX_N@Z ENDP			; CSkinWnd::SetAllowMove
_TEXT	ENDS
PUBLIC	??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z	; std::bitset<6>::reference::reference
;	COMDAT ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT
__P$ = 12
$T160326 = -8
___$ReturnUdt$ = 8
_this$ = -12
??A?$bitset@$05@std@@QAE?AVreference@01@I@Z PROC NEAR	; std::bitset<6>::operator[], COMDAT

; 54   : 		{return (reference(*this, _P)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	51		 push	 ecx
  00011	8d 4d f8	 lea	 ecx, DWORD PTR $T160326[ebp]
  00014	e8 00 00 00 00	 call	 ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z ; std::bitset<6>::reference::reference
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	89 11		 mov	 DWORD PTR [ecx], edx
  00023	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ENDP	; std::bitset<6>::operator[]
_TEXT	ENDS
PUBLIC	?set@?$bitset@$05@std@@QAEAAV12@I_N@Z		; std::bitset<6>::set
;	COMDAT ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT
__X$ = 8
_this$ = -4
??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z PROC NEAR	; std::bitset<6>::reference::operator=, COMDAT

; 24   : 			{_Pbs->set(_Off, _X);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 08	 mov	 al, BYTE PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	e8 00 00 00 00	 call	 ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z ; std::bitset<6>::set

; 25   : 			return (*this); }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ENDP	; std::bitset<6>::reference::operator=
_TEXT	ENDS
PUBLIC	?_Xran@?$bitset@$05@std@@ABEXXZ			; std::bitset<6>::_Xran
;	COMDAT ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
__X$ = 12
?set@?$bitset@$05@std@@QAEAAV12@I_N@Z PROC NEAR		; std::bitset<6>::set, COMDAT

; 119  : 		{if (_N <= _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 7d 08 06	 cmp	 DWORD PTR __P$[ebp], 6
  0000c	72 08		 jb	 SHORT $L155662

; 120  : 			_Xran();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Xran@?$bitset@$05@std@@ABEXXZ ; std::bitset<6>::_Xran
$L155662:

; 121  : 		if (_X)

  00016	8b 45 0c	 mov	 eax, DWORD PTR __X$[ebp]
  00019	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001e	85 c0		 test	 eax, eax
  00020	74 31		 je	 SHORT $L155663

; 122  : 			_A[_P / _Nb] |= (_Ty)1 << _P % _Nb;

  00022	8b 75 08	 mov	 esi, DWORD PTR __P$[ebp]
  00025	c1 ee 05	 shr	 esi, 5
  00028	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0002b	33 d2		 xor	 edx, edx
  0002d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00032	f7 f1		 div	 ecx
  00034	8b ca		 mov	 ecx, edx
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	d3 e2		 shl	 edx, cl
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00043	0b ca		 or	 ecx, edx
  00045	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  00048	c1 ea 05	 shr	 edx, 5
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 123  : 		else

  00051	eb 31		 jmp	 SHORT $L155665
$L155663:

; 124  : 			_A[_P / _Nb] &= ~((_Ty)1 << _P % _Nb);

  00053	8b 75 08	 mov	 esi, DWORD PTR __P$[ebp]
  00056	c1 ee 05	 shr	 esi, 5
  00059	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0005c	33 d2		 xor	 edx, edx
  0005e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00063	f7 f1		 div	 ecx
  00065	8b ca		 mov	 ecx, edx
  00067	ba 01 00 00 00	 mov	 edx, 1
  0006c	d3 e2		 shl	 edx, cl
  0006e	f7 d2		 not	 edx
  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00076	23 ca		 and	 ecx, edx
  00078	8b 55 08	 mov	 edx, DWORD PTR __P$[ebp]
  0007b	c1 ea 05	 shr	 edx, 5
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
$L155665:

; 125  : 		return (*this); }

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	5e		 pop	 esi
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
?set@?$bitset@$05@std@@QAEAAV12@I_N@Z ENDP		; std::bitset<6>::set
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
__P$ = 12
??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z PROC NEAR	; std::bitset<6>::reference::reference, COMDAT

; 37   : 		reference(bitset<_N>& _X, size_t _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __X$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z ENDP	; std::bitset<6>::reference::reference
_TEXT	ENDS
;	COMDAT xdata$x
; File C:\Program Files\Microsoft Visual Studio\VC98\INCLUDE\bitset
xdata$x	SEGMENT
$T160336 DD	019930520H
	DD	01H
	DD	FLAT:$T160338
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160338 DD	0ffffffffH
	DD	FLAT:$L160334
xdata$x	ENDS
;	COMDAT ?_Xran@?$bitset@$05@std@@ABEXXZ
_TEXT	SEGMENT
_this$ = -64
$T160331 = -40
$T160332 = -56
$T160333 = -60
__$EHRec$ = -12
?_Xran@?$bitset@$05@std@@ABEXXZ PROC NEAR		; std::bitset<6>::_Xran, COMDAT

; 250  : 		{_THROW(out_of_range, "invalid bitset<N> position"); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L160337
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 34	 sub	 esp, 52			; 00000034H
  0001b	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8d 45 c4	 lea	 eax, DWORD PTR $T160333[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@ ; `string'
  00027	8d 4d c8	 lea	 ecx, DWORD PTR $T160332[ebp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	8d 4d c8	 lea	 ecx, DWORD PTR $T160332[ebp]
  0003a	51		 push	 ecx
  0003b	8d 4d d8	 lea	 ecx, DWORD PTR $T160331[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00044	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00049	8d 55 d8	 lea	 edx, DWORD PTR $T160331[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$L155963:
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160334:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T160332[ebp]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00009	c3		 ret	 0
$L160337:
  0000a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160336
  0000f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xran@?$bitset@$05@std@@ABEXXZ ENDP			; std::bitset<6>::_Xran
;	COMDAT ?SetTransient@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT
_bValue$ = 8
_this$ = -12
$T160342 = -8
?SetTransient@CSkinWnd@@IAEX_N@Z PROC NEAR		; CSkinWnd::SetTransient, COMDAT

; 150  : 	void SetTransient ( bool bValue ) { m_state[sknWndTransient] = bValue; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000c	50		 push	 eax
  0000d	6a 04		 push	 4
  0000f	8d 4d f8	 lea	 ecx, DWORD PTR $T160342[ebp]
  00012	51		 push	 ecx
  00013	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0001c	e8 00 00 00 00	 call	 ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ; std::bitset<6>::operator[]
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ; std::bitset<6>::reference::operator=
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetTransient@CSkinWnd@@IAEX_N@Z ENDP			; CSkinWnd::SetTransient
_TEXT	ENDS
PUBLIC	?SetProcessEvents@CSkinWnd@@IAEX_N@Z		; CSkinWnd::SetProcessEvents
;	COMDAT ?SetEventProcessing@CSkinWnd@@QAEX_N@Z
_TEXT	SEGMENT
_bValue$ = 8
_this$ = -4
?SetEventProcessing@CSkinWnd@@QAEX_N@Z PROC NEAR	; CSkinWnd::SetEventProcessing, COMDAT

; 254  : 	void SetEventProcessing ( bool bValue ) { SetProcessEvents ( bValue ); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?SetProcessEvents@CSkinWnd@@IAEX_N@Z ; CSkinWnd::SetProcessEvents
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetEventProcessing@CSkinWnd@@QAEX_N@Z ENDP		; CSkinWnd::SetEventProcessing
_TEXT	ENDS
;	COMDAT ?SetProcessEvents@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT
_bValue$ = 8
_this$ = -12
$T160345 = -8
?SetProcessEvents@CSkinWnd@@IAEX_N@Z PROC NEAR		; CSkinWnd::SetProcessEvents, COMDAT

; 144  : 	void SetProcessEvents ( bool bValue ) { m_state[sknWndProcessEvents] = bValue; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8a 45 08	 mov	 al, BYTE PTR _bValue$[ebp]
  0000c	50		 push	 eax
  0000d	6a 01		 push	 1
  0000f	8d 4d f8	 lea	 ecx, DWORD PTR $T160345[ebp]
  00012	51		 push	 ecx
  00013	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0001c	e8 00 00 00 00	 call	 ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z ; std::bitset<6>::operator[]
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z ; std::bitset<6>::reference::operator=
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetProcessEvents@CSkinWnd@@IAEX_N@Z ENDP		; CSkinWnd::SetProcessEvents
_TEXT	ENDS
;	COMDAT ?Next@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Next@CSkinWnd@@UAEXXZ PROC NEAR			; CSkinWnd::Next, COMDAT

; 275  : 	virtual void Next ( void ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?Next@CSkinWnd@@UAEXXZ ENDP				; CSkinWnd::Next
_TEXT	ENDS
;	COMDAT ?Previous@CSkinWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Previous@CSkinWnd@@UAEXXZ PROC NEAR			; CSkinWnd::Previous, COMDAT

; 276  : 	virtual void Previous ( void ) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?Previous@CSkinWnd@@UAEXXZ ENDP				; CSkinWnd::Previous
_TEXT	ENDS
PUBLIC	??0strstreambuf@std@@QAE@H@Z			; std::strstreambuf::strstreambuf
PUBLIC	??_7strstream@std@@6B@				; std::strstream::`vftable'
PUBLIC	??_8strstream@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::strstream::`vbtable'
PUBLIC	??_8strstream@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::strstream::`vbtable'
PUBLIC	??_Gstrstream@std@@UAEPAXI@Z			; std::strstream::`scalar deleting destructor'
PUBLIC	??_Estrstream@std@@UAEPAXI@Z			; std::strstream::`vector deleting destructor'
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:NEAR
EXTRN	__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:NEAR
EXTRN	__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ:NEAR
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:NEAR
;	COMDAT ??_7strstream@std@@6B@
; File C:\Program Files\Microsoft Visual Studio\VC98\INCLUDE\strstream
CONST	SEGMENT
??_7strstream@std@@6B@ DD FLAT:??_Estrstream@std@@UAEPAXI@Z ; std::strstream::`vftable'
CONST	ENDS
;	COMDAT ??_8strstream@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8strstream@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::strstream::`vbtable'
	DD	05cH
CONST	ENDS
;	COMDAT ??_8strstream@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8strstream@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::strstream::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T160355 DD	019930520H
	DD	02H
	DD	FLAT:$T160357
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160357 DD	0ffffffffH
	DD	FLAT:$L160350
	DD	00H
	DD	FLAT:$L160352
xdata$x	ENDS
;	COMDAT ??0strstream@std@@QAE@XZ
_TEXT	SEGMENT
$T160349 = -16
__$EHRec$ = -12
_$initVBases$ = 8
_this$ = -20
??0strstream@std@@QAE@XZ PROC NEAR			; std::strstream::strstream, COMDAT

; 107  : 	strstream()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L160356
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 08	 sub	 esp, 8
  0001b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T160349[ebp], 0
  00025	83 7d 08 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00029	74 2f		 je	 SHORT $L150426
  0002b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_8strstream@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::strstream::`vbtable'
  00034	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET FLAT:??_8strstream@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::strstream::`vbtable'
  0003e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 5c	 add	 ecx, 92			; 0000005cH
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  0004a	8b 55 f0	 mov	 edx, DWORD PTR $T160349[ebp]
  0004d	83 ca 01	 or	 edx, 1
  00050	89 55 f0	 mov	 DWORD PTR $T160349[ebp], edx
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$L150426:
  0005a	6a 00		 push	 0
  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00062	50		 push	 eax
  00063	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  0006c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00073	6a 00		 push	 0
  00075	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0007b	e8 00 00 00 00	 call	 ??0strstreambuf@std@@QAE@H@Z ; std::strstreambuf::strstreambuf
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 11		 mov	 edx, DWORD PTR [ecx]
  00085	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00088	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], OFFSET FLAT:??_7strstream@std@@6B@ ; std::strstream::`vftable'
  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160350:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T160349[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	85 c0		 test	 eax, eax
  00008	0f 84 0c 00 00
	00		 je	 $L160351
  0000e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 5c	 add	 ecx, 92			; 0000005cH
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
$L160351:
  0001a	c3		 ret	 0
$L160352:
  0001b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00027	c3		 ret	 0
$L160356:
  00028	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160355
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0strstream@std@@QAE@XZ ENDP				; std::strstream::strstream
PUBLIC	??_7strstreambuf@std@@6B@			; std::strstreambuf::`vftable'
PUBLIC	??_Gstrstreambuf@std@@UAEPAXI@Z			; std::strstreambuf::`scalar deleting destructor'
PUBLIC	??_Estrstreambuf@std@@UAEPAXI@Z			; std::strstreambuf::`vector deleting destructor'
EXTRN	?overflow@strstreambuf@std@@MAEHH@Z:NEAR	; std::strstreambuf::overflow
EXTRN	?pbackfail@strstreambuf@std@@MAEHH@Z:NEAR	; std::strstreambuf::pbackfail
EXTRN	?underflow@strstreambuf@std@@MAEHXZ:NEAR	; std::strstreambuf::underflow
EXTRN	?seekoff@strstreambuf@std@@MAE?AV?$fpos@H@2@JW4seekdir@ios_base@2@H@Z:NEAR ; std::strstreambuf::seekoff
EXTRN	?seekpos@strstreambuf@std@@MAE?AV?$fpos@H@2@V32@H@Z:NEAR ; std::strstreambuf::seekpos
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:NEAR ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:NEAR ; std::basic_streambuf<char,std::char_traits<char> >::uflow
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z:NEAR ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z:NEAR ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
EXTRN	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z:NEAR ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
EXTRN	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:NEAR ; std::basic_streambuf<char,std::char_traits<char> >::sync
EXTRN	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:NEAR ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	__imp_?_Init@strstreambuf@std@@IAEXHPAD0H@Z:NEAR
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:NEAR
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:NEAR
;	COMDAT ??_7strstreambuf@std@@6B@
; File C:\Program Files\Microsoft Visual Studio\VC98\INCLUDE\strstream
CONST	SEGMENT
??_7strstreambuf@std@@6B@ DD FLAT:??_Estrstreambuf@std@@UAEPAXI@Z ; std::strstreambuf::`vftable'
	DD	FLAT:?overflow@strstreambuf@std@@MAEHH@Z
	DD	FLAT:?pbackfail@strstreambuf@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@strstreambuf@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@strstreambuf@std@@MAE?AV?$fpos@H@2@JW4seekdir@ios_base@2@H@Z
	DD	FLAT:?seekpos@strstreambuf@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T160363 DD	019930520H
	DD	01H
	DD	FLAT:$T160365
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T160365 DD	0ffffffffH
	DD	FLAT:$L160361
xdata$x	ENDS
;	COMDAT ??0strstreambuf@std@@QAE@H@Z
_TEXT	SEGMENT
__$EHRec$ = -12
__N$ = 8
_this$ = -16
??0strstreambuf@std@@QAE@H@Z PROC NEAR			; std::strstreambuf::strstreambuf, COMDAT

; 21   : 	explicit strstreambuf(streamsize _N = 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L160364
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7strstreambuf@std@@6B@ ; std::strstreambuf::`vftable'
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __N$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@strstreambuf@std@@IAEXHPAD0H@Z
  00048	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L160361:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00009	c3		 ret	 0
$L160364:
  0000a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T160363
  0000f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0strstreambuf@std@@QAE@H@Z ENDP			; std::strstreambuf::strstreambuf
EXTRN	__imp_??1strstreambuf@std@@UAE@XZ:NEAR
;	COMDAT ??_Gstrstreambuf@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_Gstrstreambuf@std@@UAEPAXI@Z PROC NEAR		; std::strstreambuf::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1strstreambuf@std@@UAE@XZ
  00010	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	85 c0		 test	 eax, eax
  00018	74 0c		 je	 SHORT $L150282
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 04	 add	 esp, 4
$L150282:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??_Gstrstreambuf@std@@UAEPAXI@Z ENDP			; std::strstreambuf::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?str@strstreambuf@std@@QAEPADXZ			; std::strstreambuf::str
;	COMDAT ?str@strstream@std@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4
?str@strstream@std@@QAEPADXZ PROC NEAR			; std::strstream::str, COMDAT

; 116  : 		{return (_Sb.str()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ?str@strstreambuf@std@@QAEPADXZ ; std::strstreambuf::str
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?str@strstream@std@@QAEPADXZ ENDP			; std::strstream::str
_TEXT	ENDS
EXTRN	__imp_?freeze@strstreambuf@std@@QAEX_N@Z:NEAR
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:NEAR
;	COMDAT ?str@strstreambuf@std@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4
?str@strstreambuf@std@@QAEPADXZ PROC NEAR		; std::strstreambuf::str, COMDAT

; 38   : 		{freeze();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?freeze@strstreambuf@std@@QAEX_N@Z

; 39   : 		return (gptr()); }

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?str@strstreambuf@std@@QAEPADXZ ENDP			; std::strstreambuf::str
_TEXT	ENDS
PUBLIC	?pcount@strstreambuf@std@@QBEHXZ		; std::strstreambuf::pcount
;	COMDAT ?pcount@strstream@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?pcount@strstream@std@@QBEHXZ PROC NEAR			; std::strstream::pcount, COMDAT

; 118  : 		{return (_Sb.pcount()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ?pcount@strstreambuf@std@@QBEHXZ ; std::strstreambuf::pcount
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?pcount@strstream@std@@QBEHXZ ENDP			; std::strstream::pcount
_TEXT	ENDS
EXTRN	__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:NEAR
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:NEAR
;	COMDAT ?pcount@strstreambuf@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?pcount@strstreambuf@std@@QBEHXZ PROC NEAR		; std::strstreambuf::pcount, COMDAT

; 41   : 		{return (pptr() == 0 ? 0 : pptr() - pbase()); } 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00013	85 c0		 test	 eax, eax
  00015	75 09		 jne	 SHORT $L160373
  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
  0001e	eb 19		 jmp	 SHORT $L160374
$L160373:
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00029	8b f0		 mov	 esi, eax
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00034	2b f0		 sub	 esi, eax
  00036	89 75 f8	 mov	 DWORD PTR -8+[ebp], esi
$L160374:
  00039	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  0003c	5e		 pop	 esi
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?pcount@strstreambuf@std@@QBEHXZ ENDP			; std::strstreambuf::pcount
_TEXT	ENDS
;	COMDAT ??_Gstrstream@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_Gstrstream@std@@UAEPAXI@Z PROC NEAR			; std::strstream::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 e9 5c	 sub	 ecx, 92			; 0000005cH
  0000d	e8 00 00 00 00	 call	 ??_Dstrstream@std@@QAEXXZ ; std::strstream::`vbase destructor'
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	85 c0		 test	 eax, eax
  0001a	74 0f		 je	 SHORT $L150439
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 e9 5c	 sub	 ecx, 92			; 0000005cH
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
$L150439:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 e8 5c	 sub	 eax, 92			; 0000005cH
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??_Gstrstream@std@@UAEPAXI@Z ENDP			; std::strstream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??1strstream@std@@UAE@XZ:NEAR
;	COMDAT ??_Dstrstream@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
??_Dstrstream@std@@QAEXXZ PROC NEAR			; std::strstream::`vbase destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 5c	 add	 ecx, 92			; 0000005cH
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1strstream@std@@UAE@XZ
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 5c	 add	 ecx, 92			; 0000005cH
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??_Dstrstream@std@@QAEXXZ ENDP				; std::strstream::`vbase destructor'
_TEXT	ENDS
PUBLIC	??0ObjectID@@QAE@ABV0@@Z			; ObjectID::ObjectID
;	COMDAT ??0CSCI_Object@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CSCI_Object@@QAE@ABV0@@Z PROC NEAR			; CSCI_Object::CSCI_Object, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0ObjectID@@QAE@ABV0@@Z ; ObjectID::ObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0CSCI_Object@@QAE@ABV0@@Z ENDP			; CSCI_Object::CSCI_Object
_TEXT	ENDS
PUBLIC	??0FakeObjectID@@QAE@ABVMemID@@@Z		; FakeObjectID::FakeObjectID
;	COMDAT ??0ObjectID@@QAE@ABV0@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0ObjectID@@QAE@ABV0@@Z PROC NEAR			; ObjectID::ObjectID, COMDAT

; 229  : 	ObjectID(const ObjectID& id) : FakeObjectID((MemID&) id) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0FakeObjectID@@QAE@ABVMemID@@@Z ; FakeObjectID::FakeObjectID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0ObjectID@@QAE@ABV0@@Z ENDP				; ObjectID::ObjectID
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT
_id$ = 8
_this$ = -4
??0FakeObjectID@@QAE@ABVMemID@@@Z PROC NEAR		; FakeObjectID::FakeObjectID, COMDAT

; 224  : FakeTemplateID(FakeObjectID, Object, MemObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MemID@@QAE@ABV0@@Z	; MemID::MemID
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0FakeObjectID@@QAE@ABVMemID@@@Z ENDP			; FakeObjectID::FakeObjectID
_TEXT	ENDS
END

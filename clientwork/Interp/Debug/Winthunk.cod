	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Winthunk.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?fp@@3P6GHXZA					; fp
_BSS	SEGMENT
?fp@@3P6GHXZA DD 01H DUP (?)				; fp
_BSS	ENDS
PUBLIC	?InitThunk@@YAXXZ				; InitThunk
_TEXT	SEGMENT
?InitThunk@@YAXXZ PROC NEAR				; InitThunk

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 78   : 	FARPROC addr;
; 79   : 
; 80   : #ifndef WIN32S
; 81   : #ifdef NETWORK
; 82   : 	// process the winsock.dll
; 83   : 	extern char szWinsock[80];
; 84   : 	winsockHandle = LoadLibrary ( szWinsock );
; 85   : 
; 86   : 	if ( winsockHandle < 10 ) { // 32 ) {
; 87   : 		winsockHandle = LoadLibrary ( "winsock.dll" );
; 88   : 
; 89   : 		if ( winsockHandle < 10 ) {
; 90   : 			char text[1024];
; 91   : 			sprintf ( text, "Can not find '%s' or a standard WINSOCK.DLL!  You must have a TCP/IP WinSock network protocol stack installed to use this application.", szWinsock );
; 92   : 			MBox ( text, "" );
; 93   : 			return;
; 94   : 		}
; 95   : 	}
; 96   : 
; 97   : 	// SOCKET accept ( SOCKET, struct sockaddr *, short * )
; 98   : 	addr = GetProcAddress ( winsockHandle, "accept" );
; 99   : 	hAccept = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_PTR, INDIR_ENDLIST );
; 100  : 
; 101  : 	// short bind ( SOCKET, const struct sockaddr *, short )
; 102  : 	addr = GetProcAddress ( winsockHandle, "bind" );
; 103  : 	hBind = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_WORD, INDIR_ENDLIST );
; 104  : 
; 105  : 	// short closesocket ( SOCKET )
; 106  : 	addr = GetProcAddress ( winsockHandle, "closesocket" );
; 107  : 	hCloseSocket = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_ENDLIST );
; 108  : 
; 109  : 	// short connect ( SOCKET, const struct sockaddr *, short )
; 110  : 	addr = GetProcAddress ( winsockHandle, "connect" );
; 111  : 	hConnect = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_WORD, INDIR_ENDLIST );
; 112  : 
; 113  : 	// short ioctlsocket ( SOCKET, long cmd, u_long * )
; 114  : 	addr = GetProcAddress ( winsockHandle, "ioctlsocket" );
; 115  : 	hIoctlSocket = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_DWORD, INDIR_PTR, INDIR_ENDLIST );
; 116  : 
; 117  : 	// short getpeername ( SOCKET, struct sockaddr *, short * )
; 118  : 	addr = GetProcAddress ( winsockHandle, "getpeername" );
; 119  : 	hGetPeerName = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_PTR, INDIR_ENDLIST );
; 120  : 
; 121  : 	// short getsockname ( SOCKET, struct sockaddr *, short * )
; 122  : 	addr = GetProcAddress ( winsockHandle, "getsockname" );
; 123  : 	hGetSockName = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_PTR, INDIR_ENDLIST );
; 124  : 
; 125  : 	// short getsockopt ( SOCKET, short, short, char *, short * )
; 126  : 	addr = GetProcAddress ( winsockHandle, "getsockopt" );
; 127  : 	hGetSockOpt = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_WORD, INDIR_WORD, INDIR_PTR, INDIR_PTR, INDIR_ENDLIST );
; 128  : 
; 129  : 	// u_long htonl ( u_long )
; 130  : 	addr = GetProcAddress ( winsockHandle, "htonl" );
; 131  : 	hHTONL = GetIndirectFunctionHandle ( addr, INDIR_DWORD, INDIR_ENDLIST );
; 132  : 
; 133  : 	// u_short htons ( u_short )
; 134  : 	addr = GetProcAddress ( winsockHandle, "htons" );
; 135  : 	hHTONS = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_ENDLIST );
; 136  : 
; 137  : 	// u_long inet_addr ( char * )
; 138  : 	addr = GetProcAddress ( winsockHandle, "inet_addr" );
; 139  : 	hInetAddr = GetIndirectFunctionHandle ( addr, INDIR_PTR, INDIR_ENDLIST );
; 140  : 
; 141  : 	// char *inet_ntoa ( in_addr )
; 142  : 	addr = GetProcAddress ( winsockHandle, "inet_ntoa" );
; 143  : 	hInetNtoa = GetIndirectFunctionHandle ( addr, INDIR_PTR, INDIR_ENDLIST );
; 144  : 
; 145  : 	// short listen ( SOCKET, short )
; 146  : 	addr = GetProcAddress ( winsockHandle, "listen" );
; 147  : 	hListen = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_WORD, INDIR_ENDLIST );
; 148  : 
; 149  : 	// u_long ntohl ( u_long )
; 150  : 	addr = GetProcAddress ( winsockHandle, "ntohl" );
; 151  : 	hNTOHL = GetIndirectFunctionHandle ( addr, INDIR_DWORD, INDIR_ENDLIST );
; 152  : 
; 153  : 	// u_short ntohs ( u_short )
; 154  : 	addr = GetProcAddress ( winsockHandle, "ntohs" );
; 155  : 	hNTOHS = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_ENDLIST );
; 156  : 
; 157  : 	// short recv ( SOCKET, char *, short, short )
; 158  : 	addr = GetProcAddress ( winsockHandle, "recv" );
; 159  : 	hRecv = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_WORD, INDIR_WORD, INDIR_ENDLIST );
; 160  : 
; 161  : 	// short recvfrom ( SOCKET, char *, short, short, struct sockaddr *, short * )
; 162  : 	addr = GetProcAddress ( winsockHandle, "recvfrom" );
; 163  : 	hRecvFrom = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_WORD, INDIR_WORD, INDIR_PTR, INDIR_PTR, INDIR_ENDLIST );
; 164  : 
; 165  : 	// short select ( short, fd_set *, fd_set *, fd_set *, struct timeval * )
; 166  : 	addr = GetProcAddress ( winsockHandle, "select" );
; 167  : 	hSelect = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_PTR, INDIR_PTR, INDIR_PTR, INDIR_ENDLIST );
; 168  : 
; 169  : 	// short send ( SOCKET, char *, short, short )
; 170  : 	addr = GetProcAddress ( winsockHandle, "send" );
; 171  : 	hSend = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_WORD, INDIR_WORD, INDIR_ENDLIST );
; 172  : 
; 173  : 	// short sendto ( SOCKET, char *, short, short, struct sockaddr *, short * )
; 174  : 	addr = GetProcAddress ( winsockHandle, "sendto" );
; 175  : 	hSendTo = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_WORD, INDIR_WORD, INDIR_PTR, INDIR_PTR, INDIR_ENDLIST );
; 176  : 
; 177  : 	// short setsockopt ( SOCKET, short, short, char *, short )
; 178  : 	addr = GetProcAddress ( winsockHandle, "setsockopt" );
; 179  : 	hSetSockOpt = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_WORD, INDIR_WORD, INDIR_PTR, INDIR_WORD, INDIR_ENDLIST );
; 180  : 
; 181  : 	// short shutdown ( SOCKET, short )
; 182  : 	addr = GetProcAddress ( winsockHandle, "shutdown" );
; 183  : 	hShutdown = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_WORD, INDIR_ENDLIST );
; 184  : 
; 185  : 	// SOCKET socket ( short, short, short )
; 186  : 	addr = GetProcAddress ( winsockHandle, "socket" );
; 187  : 	hSocket = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_WORD, INDIR_WORD, INDIR_ENDLIST );
; 188  : 
; 189  : 	// struct hostent *gethostbyaddr ( char *, short, short )
; 190  : 	addr = GetProcAddress ( winsockHandle, "gethostbyaddr" );
; 191  : 	hGetHostByAddr = GetIndirectFunctionHandle ( addr, INDIR_PTR, INDIR_WORD, INDIR_WORD, INDIR_ENDLIST );
; 192  : 
; 193  : 	// struct hostent *gethostbyname ( char * )
; 194  : 	addr = GetProcAddress ( winsockHandle, "gethostbyname" );
; 195  : 	hGetHostByName = GetIndirectFunctionHandle ( addr, INDIR_PTR, INDIR_ENDLIST );
; 196  : 
; 197  : 	// short gethostname ( char *, short )
; 198  : 	addr = GetProcAddress ( winsockHandle, "gethostname" );
; 199  : 	hGetHostName = GetIndirectFunctionHandle ( addr, INDIR_PTR, INDIR_WORD, INDIR_ENDLIST );
; 200  : 
; 201  : 	// struct servent *getservbyport ( short, char * )
; 202  : 	addr = GetProcAddress ( winsockHandle, "getservbyport" );
; 203  : 	hGetServByPort = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_ENDLIST );
; 204  : 
; 205  : 	// struct servent *getservbyname ( char *, char * )
; 206  : 	addr = GetProcAddress ( winsockHandle, "getservbyname" );
; 207  : 	hGetServByName = GetIndirectFunctionHandle ( addr, INDIR_PTR, INDIR_PTR, INDIR_ENDLIST );
; 208  : 
; 209  : 	// struct protoent *getprotobynumber ( short )
; 210  : 	addr = GetProcAddress ( winsockHandle, "getprotobynumber" );
; 211  : 	hGetProtoByNumber = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_ENDLIST );
; 212  : 
; 213  : 	// struct protoend *getprotobyname ( char * )
; 214  : 	addr = GetProcAddress ( winsockHandle, "getprotobyname" );
; 215  : 	hGetProtoByName = GetIndirectFunctionHandle ( addr, INDIR_PTR, INDIR_ENDLIST );
; 216  : 
; 217  : 	// short WSAStartup ( WORD, LPWSADATA )
; 218  : 	addr = GetProcAddress ( winsockHandle, "WSAStartup" );
; 219  : 	hWSAStartup = GetIndirectFunctionHandle ( addr, INDIR_WORD, INDIR_PTR, INDIR_ENDLIST );
; 220  : 
; 221  : 	// short WSACleanup ( void )
; 222  : 	addr = GetProcAddress ( winsockHandle, "WSACleanup" );
; 223  : 	hWSACleanup = GetIndirectFunctionHandle ( addr, INDIR_ENDLIST );
; 224  : 
; 225  : 	// short WSAGetLastError ( void )
; 226  : 	addr = GetProcAddress ( winsockHandle, "WSAGetLastError" );
; 227  : 	hWSAGetLastError = GetIndirectFunctionHandle ( addr, INDIR_ENDLIST );
; 228  : #endif
; 229  : 	// process the mss16.dll
; 230  : 	mssHandle = LoadLibrary ( "mss16.dll" );
; 231  : 
; 232  : 	if ( mssHandle < 10 ) {
; 233  : 		char text[1024];
; 234  : 		sprintf ( text, "Can not find MSS16.DLL!" );
; 235  : 		MBox ( text, "" );
; 236  : 		return;
; 237  : 	}
; 238  : 
; 239  : 	// int AIL_quick_startup ( int digital, int midi, int rate, int bits, int channels )
; 240  : 	addr = GetProcAddress ( mssHandle, "AIL_quick_startup" );
; 241  : 	hAIL_quick_startup = GetIndirectFunctionHandle ( addr, INDIR_DWORD, INDIR_DWORD, INDIR_DWORD, INDIR_DWORD, INDIR_DWORD, INDIR_ENDLIST );
; 242  : 
; 243  : 	// void AIL_quick_shutdown ( void )
; 244  : 	addr = GetProcAddress ( mssHandle, "AIL_quick_shutdown" );
; 245  : 	hAIL_quick_shutdown = GetIndirectFunctionHandle ( addr, INDIR_ENDLIST );
; 246  : 
; 247  : 	// int AIL_quick_load ( char *name )
; 248  : 	addr = GetProcAddress ( mssHandle, "AIL_quick_load" );
; 249  : 	hAIL_quick_load = GetIndirectFunctionHandle ( addr, INDIR_PTR, INDIR_ENDLIST );
; 250  : 
; 251  : 	// int AIL_quick_play ( void *audio, int loopCount )
; 252  : 	addr = GetProcAddress ( mssHandle, "AIL_quick_play" );
; 253  : 	hAIL_quick_play = GetIndirectFunctionHandle ( addr, INDIR_DWORD, INDIR_DWORD, INDIR_ENDLIST );
; 254  : 
; 255  : 	InvokeIndirectFunction ( hAIL_quick_startup, 1, 1, 0, 0, 0 );
; 256  : #endif
; 257  : }

  00004	8b e5		 mov	 esp, ebp
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?InitThunk@@YAXXZ ENDP					; InitThunk
_TEXT	ENDS
PUBLIC	?EndThunk@@YAXXZ				; EndThunk
_TEXT	SEGMENT
?EndThunk@@YAXXZ PROC NEAR				; EndThunk

; 260  : {

  00008	55		 push	 ebp
  00009	8b ec		 mov	 ebp, esp

; 261  : #ifndef WIN32S
; 262  : #ifdef NETWORK
; 263  : 	FreeLibrary ( winsockHandle );
; 264  : #endif
; 265  : 	InvokeIndirectFunction ( hAIL_quick_shutdown );
; 266  : 
; 267  : 	FreeLibrary ( mssHandle );
; 268  : #endif
; 269  : }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?EndThunk@@YAXXZ ENDP					; EndThunk
_TEXT	ENDS
END

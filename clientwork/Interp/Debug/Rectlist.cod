	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Rectlist.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??0RectList@@QAE@XZ				; RectList::RectList
_TEXT	SEGMENT
_this$ = -4
??0RectList@@QAE@XZ PROC NEAR				; RectList::RectList

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	length = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 80 a0 0f 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4000], 0

; 21   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0RectList@@QAE@XZ ENDP				; RectList::RectList
_TEXT	ENDS
PUBLIC	??1RectList@@QAE@XZ				; RectList::~RectList
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
_TEXT	SEGMENT
_this$ = -12
_i$ = -4
$T54750 = -8
??1RectList@@QAE@XZ PROC NEAR				; RectList::~RectList

; 31   : {

  0001b	55		 push	 ebp
  0001c	8b ec		 mov	 ebp, esp
  0001e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00021	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	for (int i = 0; i < length; i++)

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002b	eb 09		 jmp	 SHORT $L54657
$L54658:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00030	83 c0 01	 add	 eax, 1
  00033	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L54657:
  00036	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0003c	3b 91 a0 0f 00
	00		 cmp	 edx, DWORD PTR [ecx+4000]
  00042	7d 1a		 jge	 SHORT $L54659

; 33   : 		delete rectArray[i];

  00044	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00047	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0004d	89 55 f8	 mov	 DWORD PTR $T54750[ebp], edx
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T54750[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00059	83 c4 04	 add	 esp, 4
  0005c	eb cf		 jmp	 SHORT $L54658
$L54659:

; 34   : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??1RectList@@QAE@XZ ENDP				; RectList::~RectList
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@ABV0@@Z			; SOL_Rect::SOL_Rect
PUBLIC	??0RectList@@QAE@ABV0@@Z			; RectList::RectList
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
xdata$x	SEGMENT
$T54760	DD	019930520H
	DD	01H
	DD	FLAT:$T54763
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T54763	DD	0ffffffffH
	DD	FLAT:$L54756
xdata$x	ENDS
_TEXT	SEGMENT
_src$ = 8
_this$ = -28
_i$ = -16
$T54752 = -20
$T54753 = -24
__$EHRec$ = -12
??0RectList@@QAE@ABV0@@Z PROC NEAR			; RectList::RectList

; 44   : {

  00062	55		 push	 ebp
  00063	8b ec		 mov	 ebp, esp
  00065	6a ff		 push	 -1
  00067	68 00 00 00 00	 push	 $L54761
  0006c	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00072	50		 push	 eax
  00073	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0007a	83 ec 14	 sub	 esp, 20			; 00000014H
  0007d	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 	length = src.length;

  00080	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  00086	8b 91 a0 0f 00
	00		 mov	 edx, DWORD PTR [ecx+4000]
  0008c	89 90 a0 0f 00
	00		 mov	 DWORD PTR [eax+4000], edx

; 46   : 	for (int i = 0; i < length; i++)  {

  00092	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00099	eb 09		 jmp	 SHORT $L54666
$L54667:
  0009b	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L54666:
  000a4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  000aa	3b 91 a0 0f 00
	00		 cmp	 edx, DWORD PTR [ecx+4000]
  000b0	7d 71		 jge	 SHORT $L54668

; 47   : 		if (src.rectArray[i])

  000b2	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  000b8	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  000bc	74 53		 je	 SHORT $L54669

; 48   : 			rectArray[i] = New SOL_Rect(*src.rectArray[i]);

  000be	6a 10		 push	 16			; 00000010H
  000c0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c5	83 c4 04	 add	 esp, 4
  000c8	89 45 e8	 mov	 DWORD PTR $T54753[ebp], eax
  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d2	83 7d e8 00	 cmp	 DWORD PTR $T54753[ebp], 0
  000d6	74 17		 je	 SHORT $L54754
  000d8	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  000db	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  000de	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  000e1	51		 push	 ecx
  000e2	8b 4d e8	 mov	 ecx, DWORD PTR $T54753[ebp]
  000e5	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  000ea	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  000ed	eb 07		 jmp	 SHORT $L54755
$L54754:
  000ef	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L54755:
  000f6	8b 55 e0	 mov	 edx, DWORD PTR -32+[ebp]
  000f9	89 55 ec	 mov	 DWORD PTR $T54752[ebp], edx
  000fc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00103	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00106	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	8b 55 ec	 mov	 edx, DWORD PTR $T54752[ebp]
  0010c	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 49   : 		else

  0010f	eb 0d		 jmp	 SHORT $L54674
$L54669:

; 50   : 			rectArray[i] = NULL;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00114	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
$L54674:

; 51   : 	}

  0011e	e9 78 ff ff ff	 jmp	 $L54667
$L54668:

; 52   : }

  00123	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00126	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00129	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L54756:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T54753[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L54761:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T54760
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0RectList@@QAE@ABV0@@Z ENDP				; RectList::RectList
PUBLIC	??0SOL_Point@@QAE@ABV0@@Z			; SOL_Point::SOL_Point
;	COMDAT ??0SOL_Rect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0SOL_Rect@@QAE@ABV0@@Z PROC NEAR			; SOL_Rect::SOL_Rect, COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@ABV0@@Z ; SOL_Point::SOL_Point
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0SOL_Rect@@QAE@ABV0@@Z ENDP				; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??0SOL_Point@@QAE@ABV0@@Z PROC NEAR			; SOL_Point::SOL_Point, COMDAT

; 22   : 	SOL_Point(const SOL_Point& p) : x(p.x), y(p.y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0SOL_Point@@QAE@ABV0@@Z ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
PUBLIC	??4RectList@@QAEABV0@ABV0@@Z			; RectList::operator=
xdata$x	SEGMENT
$T54775	DD	019930520H
	DD	01H
	DD	FLAT:$T54777
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T54777	DD	0ffffffffH
	DD	FLAT:$L54773
xdata$x	ENDS
_TEXT	SEGMENT
_src$ = 8
_this$ = -32
_i$ = -16
$T54768 = -20
$T54769 = -24
$T54770 = -28
__$EHRec$ = -12
??4RectList@@QAEABV0@ABV0@@Z PROC NEAR			; RectList::operator=

; 64   : {

  00136	55		 push	 ebp
  00137	8b ec		 mov	 ebp, esp
  00139	6a ff		 push	 -1
  0013b	68 00 00 00 00	 push	 $L54776
  00140	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00146	50		 push	 eax
  00147	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0014e	83 ec 18	 sub	 esp, 24			; 00000018H
  00151	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	int i;
; 66   : 	for (i = 0; i < length; i++)

  00154	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0015b	eb 09		 jmp	 SHORT $L54683
$L54684:
  0015d	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00160	83 c0 01	 add	 eax, 1
  00163	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L54683:
  00166	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00169	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0016c	3b 91 a0 0f 00
	00		 cmp	 edx, DWORD PTR [ecx+4000]
  00172	7d 1a		 jge	 SHORT $L54685

; 67   : 		delete rectArray[i];

  00174	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00177	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0017d	89 55 ec	 mov	 DWORD PTR $T54768[ebp], edx
  00180	8b 45 ec	 mov	 eax, DWORD PTR $T54768[ebp]
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00189	83 c4 04	 add	 esp, 4
  0018c	eb cf		 jmp	 SHORT $L54684
$L54685:

; 68   : 
; 69   : 	length = src.length;

  0018e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00194	8b 82 a0 0f 00
	00		 mov	 eax, DWORD PTR [edx+4000]
  0019a	89 81 a0 0f 00
	00		 mov	 DWORD PTR [ecx+4000], eax

; 70   : 	for (i = 0; i < length; i++)  {

  001a0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001a7	eb 09		 jmp	 SHORT $L54687
$L54688:
  001a9	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  001ac	83 c1 01	 add	 ecx, 1
  001af	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$L54687:
  001b2	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  001b5	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001b8	3b 82 a0 0f 00
	00		 cmp	 eax, DWORD PTR [edx+4000]
  001be	7d 71		 jge	 SHORT $L54689

; 71   : 		if (src.rectArray[i])

  001c0	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  001c3	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  001c6	83 3c 8a 00	 cmp	 DWORD PTR [edx+ecx*4], 0
  001ca	74 53		 je	 SHORT $L54690

; 72   : 			rectArray[i] = New SOL_Rect(*src.rectArray[i]);

  001cc	6a 10		 push	 16			; 00000010H
  001ce	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001d3	83 c4 04	 add	 esp, 4
  001d6	89 45 e4	 mov	 DWORD PTR $T54770[ebp], eax
  001d9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001e0	83 7d e4 00	 cmp	 DWORD PTR $T54770[ebp], 0
  001e4	74 17		 je	 SHORT $L54771
  001e6	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001e9	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  001ec	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  001ef	52		 push	 edx
  001f0	8b 4d e4	 mov	 ecx, DWORD PTR $T54770[ebp]
  001f3	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  001f8	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  001fb	eb 07		 jmp	 SHORT $L54772
$L54771:
  001fd	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR -36+[ebp], 0
$L54772:
  00204	8b 45 dc	 mov	 eax, DWORD PTR -36+[ebp]
  00207	89 45 e8	 mov	 DWORD PTR $T54769[ebp], eax
  0020a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00211	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00214	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00217	8b 45 e8	 mov	 eax, DWORD PTR $T54769[ebp]
  0021a	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 73   : 		else

  0021d	eb 0d		 jmp	 SHORT $L54695
$L54690:

; 74   : 			rectArray[i] = NULL;

  0021f	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00222	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00225	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0
$L54695:

; 75   : 	}

  0022c	e9 78 ff ff ff	 jmp	 $L54688
$L54689:

; 76   : 	return *this;

  00231	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]

; 77   : }

  00234	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00237	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L54773:
  00015	8b 45 e4	 mov	 eax, DWORD PTR $T54770[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
  0001f	c3		 ret	 0
$L54776:
  00020	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T54775
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??4RectList@@QAEABV0@ABV0@@Z ENDP			; RectList::operator=
PUBLIC	?Add@RectList@@QAEXABVSOL_Rect@@@Z		; RectList::Add
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
$SG54701 DB	'C:\Documents and Settings\don\Desktop\sciw\Interp\Rectli'
	DB	'st.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T54785	DD	019930520H
	DD	01H
	DD	FLAT:$T54787
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T54787	DD	0ffffffffH
	DD	FLAT:$L54783
xdata$x	ENDS
_TEXT	SEGMENT
_src$ = 8
_this$ = -24
$T54779 = -16
$T54780 = -20
__$EHRec$ = -12
?Add@RectList@@QAEXABVSOL_Rect@@@Z PROC NEAR		; RectList::Add

; 89   : {

  00244	55		 push	 ebp
  00245	8b ec		 mov	 ebp, esp
  00247	6a ff		 push	 -1
  00249	68 00 00 00 00	 push	 $L54786
  0024e	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00254	50		 push	 eax
  00255	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0025c	83 ec 10	 sub	 esp, 16			; 00000010H
  0025f	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 	if (length == MAXIR)

  00262	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00265	81 b8 a0 0f 00
	00 e8 03 00 00	 cmp	 DWORD PTR [eax+4000], 1000 ; 000003e8H
  0026f	75 1a		 jne	 SHORT $L54700

; 91   : 		msgMgr->Fatal(SrcLoc, Msg_RectListNoRoom);

  00271	6a 45		 push	 69			; 00000045H
  00273	6a 5b		 push	 91			; 0000005bH
  00275	68 00 00 00 00	 push	 OFFSET FLAT:$SG54701
  0027a	6a 61		 push	 97			; 00000061H
  0027c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  00282	51		 push	 ecx
  00283	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  00288	83 c4 14	 add	 esp, 20			; 00000014H
$L54700:

; 92   : 	rectArray[length++] = New SOL_Rect(src);

  0028b	6a 10		 push	 16			; 00000010H
  0028d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00292	83 c4 04	 add	 esp, 4
  00295	89 45 ec	 mov	 DWORD PTR $T54780[ebp], eax
  00298	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0029f	83 7d ec 00	 cmp	 DWORD PTR $T54780[ebp], 0
  002a3	74 11		 je	 SHORT $L54781
  002a5	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  002a8	52		 push	 edx
  002a9	8b 4d ec	 mov	 ecx, DWORD PTR $T54780[ebp]
  002ac	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@ABV0@@Z ; SOL_Rect::SOL_Rect
  002b1	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  002b4	eb 07		 jmp	 SHORT $L54782
$L54781:
  002b6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L54782:
  002bd	8b 45 e4	 mov	 eax, DWORD PTR -28+[ebp]
  002c0	89 45 f0	 mov	 DWORD PTR $T54779[ebp], eax
  002c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002ca	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002cd	8b 91 a0 0f 00
	00		 mov	 edx, DWORD PTR [ecx+4000]
  002d3	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002d6	8b 4d f0	 mov	 ecx, DWORD PTR $T54779[ebp]
  002d9	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  002dc	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  002df	8b 82 a0 0f 00
	00		 mov	 eax, DWORD PTR [edx+4000]
  002e5	83 c0 01	 add	 eax, 1
  002e8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002eb	89 81 a0 0f 00
	00		 mov	 DWORD PTR [ecx+4000], eax

; 93   : }

  002f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002fb	8b e5		 mov	 esp, ebp
  002fd	5d		 pop	 ebp
  002fe	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L54783:
  0002a	8b 45 ec	 mov	 eax, DWORD PTR $T54780[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	59		 pop	 ecx
  00034	c3		 ret	 0
$L54786:
  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T54785
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Add@RectList@@QAEXABVSOL_Rect@@@Z ENDP			; RectList::Add
PUBLIC	?Delete@RectList@@QAEXH@Z			; RectList::Delete
_TEXT	SEGMENT
_index$ = 8
_this$ = -8
$T54789 = -4
?Delete@RectList@@QAEXH@Z PROC NEAR			; RectList::Delete

; 105  : {

  00301	55		 push	 ebp
  00302	8b ec		 mov	 ebp, esp
  00304	83 ec 08	 sub	 esp, 8
  00307	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	delete rectArray[index];

  0030a	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0030d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00310	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00313	89 55 fc	 mov	 DWORD PTR $T54789[ebp], edx
  00316	8b 45 fc	 mov	 eax, DWORD PTR $T54789[ebp]
  00319	50		 push	 eax
  0031a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0031f	83 c4 04	 add	 esp, 4

; 107  : 	rectArray[index] = NULL;

  00322	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  00325	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00328	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0

; 108  : }

  0032f	8b e5		 mov	 esp, ebp
  00331	5d		 pop	 ebp
  00332	c2 04 00	 ret	 4
?Delete@RectList@@QAEXH@Z ENDP				; RectList::Delete
_TEXT	ENDS
PUBLIC	?Pack@RectList@@QAEHXZ				; RectList::Pack
_TEXT	SEGMENT
_this$ = -20
_src$ = -16
_dest$ = -4
_newlen$ = -8
_i$ = -12
?Pack@RectList@@QAEHXZ PROC NEAR			; RectList::Pack

; 120  : {

  00335	55		 push	 ebp
  00336	8b ec		 mov	 ebp, esp
  00338	83 ec 14	 sub	 esp, 20			; 00000014H
  0033b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 	SOL_Rect** src = rectArray;

  0033e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00341	89 45 f0	 mov	 DWORD PTR _src$[ebp], eax

; 122  : 	SOL_Rect** dest = rectArray;

  00344	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00347	89 4d fc	 mov	 DWORD PTR _dest$[ebp], ecx

; 123  : 	int newlen = 0;

  0034a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _newlen$[ebp], 0

; 124  : 
; 125  : 	for (int i = 0; i < length; i++)  {

  00351	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00358	eb 09		 jmp	 SHORT $L54718
$L54719:
  0035a	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0035d	83 c2 01	 add	 edx, 1
  00360	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L54718:
  00363	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00366	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00369	3b 88 a0 0f 00
	00		 cmp	 ecx, DWORD PTR [eax+4000]
  0036f	7d 3a		 jge	 SHORT $L54720

; 126  : 		if (*src == NULL)  {

  00371	8b 55 f0	 mov	 edx, DWORD PTR _src$[ebp]
  00374	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00377	75 0b		 jne	 SHORT $L54721

; 127  : 			src++;

  00379	8b 45 f0	 mov	 eax, DWORD PTR _src$[ebp]
  0037c	83 c0 04	 add	 eax, 4
  0037f	89 45 f0	 mov	 DWORD PTR _src$[ebp], eax

; 128  : 			continue;

  00382	eb d6		 jmp	 SHORT $L54719
$L54721:

; 130  : 		newlen++;

  00384	8b 4d f8	 mov	 ecx, DWORD PTR _newlen$[ebp]
  00387	83 c1 01	 add	 ecx, 1
  0038a	89 4d f8	 mov	 DWORD PTR _newlen$[ebp], ecx

; 131  : 		*dest++ = *src++;

  0038d	8b 55 fc	 mov	 edx, DWORD PTR _dest$[ebp]
  00390	8b 45 f0	 mov	 eax, DWORD PTR _src$[ebp]
  00393	8b 08		 mov	 ecx, DWORD PTR [eax]
  00395	89 0a		 mov	 DWORD PTR [edx], ecx
  00397	8b 55 fc	 mov	 edx, DWORD PTR _dest$[ebp]
  0039a	83 c2 04	 add	 edx, 4
  0039d	89 55 fc	 mov	 DWORD PTR _dest$[ebp], edx
  003a0	8b 45 f0	 mov	 eax, DWORD PTR _src$[ebp]
  003a3	83 c0 04	 add	 eax, 4
  003a6	89 45 f0	 mov	 DWORD PTR _src$[ebp], eax

; 132  : 	}

  003a9	eb af		 jmp	 SHORT $L54719
$L54720:

; 133  : 	length = newlen;

  003ab	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003ae	8b 55 f8	 mov	 edx, DWORD PTR _newlen$[ebp]
  003b1	89 91 a0 0f 00
	00		 mov	 DWORD PTR [ecx+4000], edx

; 134  : 	return length;

  003b7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  003ba	8b 80 a0 0f 00
	00		 mov	 eax, DWORD PTR [eax+4000]

; 135  : }

  003c0	8b e5		 mov	 esp, ebp
  003c2	5d		 pop	 ebp
  003c3	c3		 ret	 0
?Pack@RectList@@QAEHXZ ENDP				; RectList::Pack
_TEXT	ENDS
PUBLIC	?Clear@RectList@@QAEXXZ				; RectList::Clear
_TEXT	SEGMENT
_this$ = -12
_i$ = -4
$T54792 = -8
?Clear@RectList@@QAEXXZ PROC NEAR			; RectList::Clear

; 147  : {

  003c4	55		 push	 ebp
  003c5	8b ec		 mov	 ebp, esp
  003c7	83 ec 0c	 sub	 esp, 12			; 0000000cH
  003ca	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 148  : 	for (int i = 0; i < length; i++)  {

  003cd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003d4	eb 09		 jmp	 SHORT $L54726
$L54727:
  003d6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003d9	83 c0 01	 add	 eax, 1
  003dc	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L54726:
  003df	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003e2	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  003e5	3b 91 a0 0f 00
	00		 cmp	 edx, DWORD PTR [ecx+4000]
  003eb	7d 27		 jge	 SHORT $L54728

; 149  : 		delete rectArray[i];

  003ed	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003f0	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003f3	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  003f6	89 55 f8	 mov	 DWORD PTR $T54792[ebp], edx
  003f9	8b 45 f8	 mov	 eax, DWORD PTR $T54792[ebp]
  003fc	50		 push	 eax
  003fd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00402	83 c4 04	 add	 esp, 4

; 150  : 		rectArray[i] = NULL;

  00405	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00408	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0040b	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0

; 151  : 	}

  00412	eb c2		 jmp	 SHORT $L54727
$L54728:

; 152  : 	length = 0;

  00414	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00417	c7 80 a0 0f 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4000], 0

; 153  : }

  00421	8b e5		 mov	 esp, ebp
  00423	5d		 pop	 ebp
  00424	c3		 ret	 0
?Clear@RectList@@QAEXXZ ENDP				; RectList::Clear
_TEXT	ENDS
END

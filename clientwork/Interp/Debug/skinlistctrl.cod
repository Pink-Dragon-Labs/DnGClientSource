	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\skinlistctrl.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@NAAD@Magellan?5MSWHEEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FPAF@MouseZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CLBL@MSWHEEL_ROLLMSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DLPD@MSH_WHEELSUPPORT_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODOJ@MSH_SCROLL_LINES_MSG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EDBF@Object?5created?5on?5thread?5?$DN?5?$CFd?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FGFK@CLSID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DMDD@?5?9?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOFL@Interface?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FNJL@?$CICLSID?$DP?$DP?$DP?$CJ?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DLIL@?5?9?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@NKPL@Unknown?5Error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@HOAP@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@BJHN@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MDHG@?4tlb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLHD@oleaut32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FJNM@UnRegisterTypeLib?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CDEE@DllGetVersion?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FDEG@comctl32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKNA@shell32?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@ILEN@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@JLLA@?3Jan?3January?3Feb?3February?3Mar?3Ma@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCCD@true?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELCB@no?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LGKI@yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKHJ@C?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPIO@IDispatch?5error?5?$CD?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NADL@Unknown?5error?50x?$CF0lX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MHAC@?$CFp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CFAI@0123456789abcdefABCDEF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KFAL@E?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KMAE@?0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HMNC@invalid?5bitset?$DMN?$DO?5position?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MMAA@missing?5locale?5facet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __tcscmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcscoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsicoll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextWindow@@YAPAUHWND__@@PAU1@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawState@@YGHPAUHDC__@@PAUHBRUSH__@@P6GH0JIHH@ZJIHHHHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextPtr@CSimpleList@@QBEPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CByteArray@@QBEEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CByteArray@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CWordArray@@QBEGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CWordArray@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CDWordArray@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CDWordArray@@QAEAAKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CUIntArray@@QBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CUIntArray@@QAEAAIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CPtrArray@@QAEAAPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ACPtrArray@@QBEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CObArray@@QBEPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CObArray@@QAEAAPAVCObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAt@CStringArray@@QBE?AVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElementAt@CStringArray@@QAEAAVCString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSimpleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSimpleException@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSimpleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMemoryException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemoryException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNotSupportedException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNotSupportedException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCArchiveException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArchiveException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFileException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFileException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFilePath@CFile@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CString@@IBEPAUCStringData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CString@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@CString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@CString@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSpan@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDays@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalHours@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalMinutes@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTotalSeconds@CTimeSpan@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CArchive@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CArchive@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwapLeftRight@CRect@@SAXPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GCRect@@QBE?AV0@UtagSIZE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCResourceException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CResourceException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCUserException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CUserException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPen@@SGPAV1@PAUHPEN__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBrush@@SGPAV1@PAUHBRUSH__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CFont@@SGPAV1@PAUHFONT__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CBitmap@@SGPAV1@PAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBitmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FromHandle@CPalette@@SGPAV1@PAUHPALETTE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHmenu@CMenu@@QBEPAUHMENU__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PostMessageA@CWnd@@QAEHIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFont@CWnd@@QAEXPAVCFont@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParent@CWnd@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnNcHitTest@CWnd@@IAEIVCPoint@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CListBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCheckListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCheckListBox@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComboBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemData@CComboBox@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemData@CComboBox@@QAEHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCEdit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCCommonDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCommonDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintSelection@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintRange@CPrintDialog@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorders@CStatusBar@@QAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRectTracker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBitmapButton@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBitmapButton@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualGUID@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCOleException@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1COleException@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleCurrency@@QAEXW4CurrencyStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4COleDateTime@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTime@@QAEXW4DateTimeStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0COleDateTimeSpan@@QAE@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatus@COleDateTimeSpan@@QAEXW4DateTimeSpanStatus@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@COleSafeArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDateTimeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonthCalCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCDragListBox@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStatusBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListCtrl@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBkColor@CListCtrl@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemCount@CListCtrl@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItem@CListCtrl@@QBEHPAUtagLVITEMA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertItem@CListCtrl@@QAEHHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertItem@CListCtrl@@QAEHHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteItem@CListCtrl@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteAllItems@CListCtrl@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListCtrl@@QBEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindItem@CListCtrl@@QBEHPAUtagLVFINDINFOA@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStringWidth@CListCtrl@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Scroll@CListCtrl@@QAEHVCSize@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetColumnWidth@CListCtrl@@QBEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTopIndex@CListCtrl@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCountPerPage@CListCtrl@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Update@CListCtrl@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTreeCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHotKeyCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSpinButtonCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSliderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCProgressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CImageList@@QBEPAU_IMAGELIST@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTabCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAnimateCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRichEditCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetExtendedStyle@CListCtrl@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHotItem@CListCtrl@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetHoverTime@CListCtrl@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCReBarCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CReBarCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCComboBoxEx@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCIPAddressCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2BSTR@@YAPAGPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlTrace2@ATL@@YAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualGUID@ATL@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YAHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReplaceSingleQuote@CComModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@CComBSTR@ATL@@QAE_NPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalClear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlAdvise@ATL@@YGJPAUIUnknown@@0ABU_GUID@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_NextObjectMapEntry@ATL@@YAPAU_ATL_OBJMAP_ENTRY@1@PAU_ATL_MODULE@1@PAU21@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleInit@ATL@@YGJPAU_ATL_MODULE@1@PAU_ATL_OBJMAP_ENTRY@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterClassObjects@ATL@@YGJPAU_ATL_MODULE@1@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRevokeClassObjects@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleGetClassObject@ATL@@YGJPAU_ATL_MODULE@1@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleTerm@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddTermFunc@ATL@@YGJPAU_ATL_MODULE@1@P6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterServer@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServerEx@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServer@ATL@@YGJPAU_ATL_MODULE@1@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUpdateRegistryFromResourceD@ATL@@YGJPAU_ATL_MODULE@1@PBGHPAU_ATL_REGMAP_ENTRY@1@PAUIRegistrar@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleLoadTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBGPAPAGPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddCreateWndData@ATL@@YGXPAU_ATL_MODULE@1@PAU_AtlCreateWndData@1@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleExtractCreateWndData@ATL@@YGPAXPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBDPAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@invalid_argument@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0invalid_argument@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YAGDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@failure@ios_base@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7_bstr_t@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Compare@_bstr_t@@ABEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@Data_t@_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Assign@Data_t@_bstr_t@@QAEXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@Data_t@_bstr_t@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8_variant_t@@QBE_NPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@_variant_t@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMonikerFile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDocument@COleServerItem@@QBEPAVCOleServerDoc@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BMemID@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7MemID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeArrayID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeArrayID@@QBEPAUArrayHeader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ArrayID@@QAE@HW4ArrayType@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@ArrayID@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAE?AVMemID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dataID@Array@@QAEXVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@SOL_List@@QAEAAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeSOL_ListID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeDispatchTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeDispatchTblID@@QBEPAUDispatchTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DispatchTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeScriptEntryID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeScriptEntryID@@QBEPAUScriptEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ScriptEntryID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeVariableID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeVariableID@@QBEPAUVariable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0VariableID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGraphicsUpdate@Object@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?selectorDict@Object@@QAEPAVSelectorDict@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AObject@@QAEAAFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddr@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedPropAddr@Object@@QAEPBFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIndexedProperty@Object@@QAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAddrCheck@Object@@QAEPAFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@Object@@QAEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPropOffset@Object@@QAEIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetIndexedProperty@Object@@QAEXHF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPropAtOffset@Object@@QAEAAFI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@Object@@QAEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CFakeObjectID@@QBEPAUObject@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ObjectID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AssureValid@ObjectID@@QBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsObject@ObjectID@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetProperty@ObjectID@@QBEFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProperty@ObjectID@@QBEXGF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FakeClassTblID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DFakeClassTblID@@QBEPAUClassTbl@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DTextID@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StringID@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Object@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Code@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Collection@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_List@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Set@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Dialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Script@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DemonsScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EventHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Array@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IntArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IDArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ByteArray@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Rectangle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_String@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Timer@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Clut@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_LongInt@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_lowWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_lowWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_hiWord@CSCI_LongInt@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_hiWord@CSCI_LongInt@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PackedData@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Sound@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Scaler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Motion@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_MoveTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Cycle@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Forward@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CycleTo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Chase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_PolyPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Jump@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BitMap@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Feature@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_View@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Prop@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Actor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Plane@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Window@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Item@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_TextItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_EditItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Button@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Selector@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_FancyDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WinDialogHandler@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_IconBar@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_User@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Game@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_File@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_DPath@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ManagedRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_Server@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_RealmRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_NetRoom@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObjectBase@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_BWearable@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldObject@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDLo@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDLo@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pServIDHi@CSCI_WorldObject@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_pServIDHi@CSCI_WorldObject@@QAEXF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldActor@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WorldEgo@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WAScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_WANetScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectSourceTarget@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SpecialEffectArea@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_SoundEffect@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_ShadowText@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GroupMember@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_StoreItem@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_GSActionScript@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharButton@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CharLookDialog@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@ABVMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSCI_CWindowPage@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProcessEvents@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTransient@CSkinWnd@@IAE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTransient@CSkinWnd@@IAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListData@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?getFriend@CListData@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setFriend@CListData@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?getUpdate@CListData@@QAE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setUpdate@CListData@@QAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?getTrueIndex@CListData@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setTrueIndex@CListData@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemTextColor@CSkinListCtrl@@MAEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemBGColor@CSkinListCtrl@@MAEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSkinListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPointContainer@@@ATL@@QAEPAPAUIConnectionPointContainer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPointContainer@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPointContainer@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPoint@@@ATL@@QAEPAPAUIConnectionPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPoint@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPoint@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIRegistrar@@@ATL@@QAEPAPAUIRegistrar@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIRegistrar@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIRegistrar@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIRegistrar@@@ATL@@QAEPAUIRegistrar@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInterfacePtr@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QBEPAUIMoniker@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QBEPAUIBinding@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$bitset@$05@std@@QAE?AVreference@01@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$bitset@$05@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$bitset@$05@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@ABV?$allocator@PAVCListData@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAPAVCListData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXABQAVCListData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCListData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEAAPAVCListData@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@QAEAAV0@PAUIBinding@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set@?$bitset@$05@std@@QAEAAV12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?test@?$bitset@$05@std@@QBE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$bitset@$05@std@@AAE@AAV12@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Freenode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEXPAU_Node@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Value@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAVCListData@@PAU_Node@23@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEPAU_Node@23@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Peek@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@AAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@GU?$char_traits@G@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIBinding@@$1?IID_IBinding@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$bitset@$05@std@@ABEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Charalloc@?$allocator@PAVCListData@@@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCListData@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@G@std@@QAEPAGIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@G@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0IPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YADDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$numpunct@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getloctxt@std@@YAHAAV?$istreambuf_iterator@GU?$char_traits@G@std@@@1@0IPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?isdigit@std@@YA_NDABVlocale@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9std@@YA_NABV?$istreambuf_iterator@GU?$char_traits@G@std@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAPAVCListData@@ABQAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCListData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@G@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIMoniker@@$1?IID_IMoniker@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@D@std@@@std@@SAPAV?$ctype@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@G@std@@@std@@SAPAV?$ctype@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAPAV?$numpunct@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAPAV?$numpunct@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$numpunct@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPADPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Maklocstr@std@@YAPAGPBDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSkinListCtrl@@WEA@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSkinListCtrl@@WHE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_eab22ac1_30c1_11cf_a7eb_0000c05bae0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d66d6f98_cdaa_11d0_b822_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9860_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000117_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000113_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d8_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1f8352c0_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonthCalCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f220_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f208_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSkinListCtrl@@6BCSkinCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc9_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa5_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000192_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000128_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000140_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CEdit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000122_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_920ff31f_ca25_451a_9738_3444fc206bcc
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b283_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CScrollBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CProgressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSkinListCtrl@@6BCMouseWheelable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b722bcc7_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CTabCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b3e7c340_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d49_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_85cb6900_4d95_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4f7ae600_0142_11d3_9dcf_89be4efb591e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBoxEx@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f203_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1ac3d9f0_175c_11d1_95be_00609797ea4f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_012dd920_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHotKeyCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214e2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00020403_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f311_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1008c4a0_7613_11cf_9af1_0020af6e72f4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020410_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020404_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVoverflow_error@std@@@8??0overflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f23b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b15b8dc1_c7e1_11d0_8680_00aa00bdcb71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f52e2b61_18a1_11d1_b105_00805f49916b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3d7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2aa_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1de_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9d5_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000025_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000019_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d8_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_948c5ad3_c58d_11d0_9c0b_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020406_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_bc40bec1_c493_11d0_831b_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd21_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ee11629b_36df_11d3_9dd0_89d6dbbba800
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9bfbbc02_eff1_101a_84ed_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f03340_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_63cdbcb0_c1b1_11d0_9336_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_bb1a2ae1_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0c733a30_2a1c_11ce_ade5_00aa0044773d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65ce_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cb5bdc81_93c1_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f218_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f230_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ef_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSimpleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f377_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_000214e1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0e6d4d92_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ca478da0_3920_11d3_9dd0_8067e4a06603
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eae1ba61_a4ed_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9eb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55882_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVrange_error@std@@@8??0range_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f35f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3fd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d24acd23_ba72_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a3ccedf3_2de2_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d10f6761_83e9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0002e011_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28d_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1ff_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f240_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1da_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCommonDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000129_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBitmap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f32d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88a05c00_f000_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ee_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e3_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CGdiObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d5f56b60_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CToolBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_08ec3e00_50b0_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af280b6_cb3f_11d0_891e_00c04fb6bfc4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSkinListCtrl@@6BCScrollable@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9e7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020d03_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_85bd8e82_0fba_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CNotSupportedException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3fc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d40_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_359f3441_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f28b_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_afa0dc11_c313_11d0_831a_00c04fd5ae38
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000023_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e0e270c1_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CComboBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVbad_typeid@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c9_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_1c2056cc_5ef4_101b_8bc8_00aa003e3b29
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c5_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d1_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f2c2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fbf23b80_e3f0_101b_8488_00aa003e56f8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1d9_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f1_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_b722bcc5_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CSliderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSkinListCtrl@@6BCListCtrl@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000013a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e5_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f1_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_618736e0_3c3d_11cf_810c_00aa00389b71
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000190_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CDragListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3af24292_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020d00_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000191_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000000e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_f77459a0_bf9a_11cf_ba4e_00c04fd70816
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f322_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f266_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a41_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4425_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9cb_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$ctype@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@D@std@@@std@@0PAV?$numpunct@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$numpunct@G@std@@@std@@0PAV?$numpunct@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@D@std@@@std@@0PAV?$ctype@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_S?$numpunct@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_S?$numpunct@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@G@std@@@std@@0PAV?$ctype@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e3_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f29c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_359f3443_bd4a_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc8_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e003_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f206_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f212_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020402_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ed_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f490eb00_1240_11d1_9888_006097deacf9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_typeid@std@@@8??0bad_typeid@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CBitmapButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f1dd_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f373_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214ea_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d7_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ed_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000112_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3f7f31ac_e15f_11d0_9c25_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000118_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f25f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fac32c80_cbe4_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_7bf80980_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23d_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_eb0fe172_1a3a_11d0_89b3_00a0c90a90ac
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_729fe2f8_1ea8_11d1_8f85_00c04fc2fbe1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f202_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_ac60f6a0_0fd9_11d0_99cb_00c04fd64497
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2bc_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9c0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bccb_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f216_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_04598fc6_866c_11cf_ab7c_00aa00c08fcf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7COleException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_332c4426_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28c_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ee_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002e013_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_594f31d0_7f19_11d0_b194_00a0c90dc8bf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_6d5140c1_7436_11ce_8034_00aa006009fa
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f313_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_88e39e80_3578_11cf_ae69_08002b2e1262
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_742b0e01_14e6_101b_914e_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAnimateCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f37e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVunderflow_error@std@@@8??0underflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_79eac9c7_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_e7a1af80_4d96_11cf_960c_0080c7f4ee85
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000013d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CSpinButtonCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_ca04b7e6_0d21_11d1_8cc5_00c04fc2b085
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b288_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000126_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_163bb1e0_6e00_11cf_837a_48dc04c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_2a342fc2_7b26_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d8f015c0_c278_11ce_a49e_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd3f23c0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_df0b3d60_548f_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a7aba9c1_8983_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_744129e0_cbe5_11ce_8350_444553540000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_68284faa_6a48_11d0_8c78_00c04fd918b4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000010_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CStatusBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f3d5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_626fc520_a41e_11cf_a731_00a0c9082637
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_91a565c1_e38f_11d0_94bf_00a0c9055cbf
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2ad_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_53fa8d31_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56a34_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000012a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3af24290_0c96_11ce_a0cf_00aa00600ab8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1e0_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f35c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a9d758a0_4617_11cf_95fc_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000011b_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b8da6310_e19b_11d0_933c_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_db01a1e3_a42b_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_65725580_9b5d_11d0_9bfe_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_539698a0_cdca_11cf_a5eb_00aa0047a063
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d30c1661_cdaf_11d0_8a3e_00c04fc9e26e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3dc39d1d_c030_11d0_b81b_00c04fc9b31f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d46_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_37deb787_2d9b_11d3_9dd0_c423e6542e10
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_922eada0_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_69d14c80_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFileException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CReBarCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000011c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_9c2cad80_3424_11cf_b670_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_70bdde00_c18e_11d0_a9ce_006097942311
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_3050f3cf_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CArchiveException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000121_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CResourceException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_d9f1e15a_ccdb_11d0_9c0c_00c04fc99c8e
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_feceaaa2_8405_11cf_8ba1_00aa00476da6
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002df05_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRectTracker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f209_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000020_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f319_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f375_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f369_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e0_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cf51ed10_62fe_11cf_bf86_00a0c9034836
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3e7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_894ad3b0_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_baa342a0_2ded_11d0_86f4_00a0c913f750
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f23a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f29f6bc0_5021_11ce_aa15_00006901293f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9e8_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f315_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f265_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMemoryException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9cd_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_d001f200_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bef6e002_a874_101a_8bba_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_085fb2c0_0df8_11d1_8f4b_00a0c905413f
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_79eac9e4_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55dd814e_a1b7_4808_9625_4f75a3fad8a7
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f569d0_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2e5_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9ec_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_000214ee_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214fa_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b285_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f361_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214eb_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CBrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0c6c4200_c589_11d0_999a_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000139_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_22f55881_280b_11d0_a8a9_00a0c90c2004
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_4ef6100a_af88_11d0_9846_00c04fc29993
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000002_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000138_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f7_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f372_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f5be2ee1_bfd7_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020411_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020405_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CRichEditCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CButton@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDateTimeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f376_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f401_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d9e89500_30fa_11d0_b724_00aa006c1a01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_376bd3aa_3845_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f357_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f360_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_fc4801a1_2ba9_11cf_a229_00aa003d7352
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c01387a_6ac2_4ef1_bda2_ec5d26e3b065
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_37d84f60_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_322982e0_0855_11d3_9dcf_ddfb3ab09e18
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_cabb0da0_da57_11cf_9974_0020afd79762
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_c04d65d2_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7d688a70_c613_11d0_999b_00c04fd655e1
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f378_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f7_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f383_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_1cff0050_6fdd_11d0_9328_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bb1a2ae2_a4f9_11cf_8f20_00805f2cd064
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_01e44665_24ac_101b_84ed_08002b2ec713
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2a6_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2b2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f2_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_6cfc9ba1_fe87_11d2_9dcf_ed29fafe371d
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_9ba05970_f6a8_11cf_a442_00a0c90a8f39
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcca_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f20a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_83c2d7a0_0de6_11d3_9dcf_9423f1b2561c
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CMonikerFile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f25e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$numpunct@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e3_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVdomain_error@std@@@8??0domain_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28f_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_00000104_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000110_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f207_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CListCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_53fa8d4c_2cdd_11d3_9dd0_d3cd4078982a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_25b15600_0115_11d0_bf0d_00aa00b8dfd2
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000127_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000022_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000016_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d2_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9c6_baf9_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f4_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0002040f_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f21e_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CCheckListBox@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000026_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7CMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_55272a00_42cb_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b28b_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_332c4427_26cb_11d0_b483_00c04fd90119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_aa5b6a80_b834_11d0_932f_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTreeCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_e0e270c0_c0be_11d0_8fe4_00a0c90a6341
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e6_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000101_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f2_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000029_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3127ca40_446e_11ce_8135_00aa004bb851
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_55980ba0_35aa_11cf_b671_00aa004cd6d8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a1faf330_ef97_11ce_9bc9_00aa00608e01
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a4c65425_0f82_11d1_90c3_00c04fc2f568
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CIPAddressCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CUserException@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_a6ef9861_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_a6ef9862_c720_11d0_9337_00a0c90dcaa9
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38c_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000018_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000193_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000024_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBD1IK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_3050f200_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_dce47f78_8a6c_4c6d_a6f7_8be4427127c4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f204_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f38a_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000002a_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ea_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bd1ae5e0_a6ae_11ce_bd37_504200c10000
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000102_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f0_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3c374a42_bae4_11cf_bf7d_00aa006946ee
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f24f_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f1f3_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f9_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0000001d_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000194_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CHeaderCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_99caf010_415e_11cf_8814_00aa00b569f5
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_47d2657a_7b27_11d0_8ca9_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f3ec_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f211_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f205_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214e8_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_000214f4_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_0e6d4d90_6738_11cf_9608_00aa00680db4
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00021500_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b722bcc6_4e68_101b_a2bc_00aa00404770
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_89bcb740_6119_101a_bcb7_00dd010655af
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_bcfce0a0_ec17_11d0_8d10_00a0c90f2719
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_79eac9d6_bafa_11ce_8c82_00aa004ba90b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000119_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000111_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000105_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000125_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_7bf80981_bf32_101a_8bbb_00aa00300cab
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b289_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_c04d65d0_b70d_11d0_b188_00aa0038c969
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_972de6c1_8b09_11d2_b652_a1fd6cc34260
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f244_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_d5f56afc_593b_101a_b569_08002b2dbf7a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000103_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000012_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000013e_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_275c23e1_3747_11d0_9fea_00aa003f8646
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000000c_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000003_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_f1db8392_7331_11d0_8c99_00a0c92dbfe8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __GUID_c4d244b0_d43e_11cf_893b_00aa00bdce1a
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_3050f2eb_98b5_11cf_bb82_00aa00bdce0b
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?GUID_ATLVer30@ATL@@3U_GUID@@A			; ATL::GUID_ATLVer30
PUBLIC	?m_libid@CComModule@ATL@@2U_GUID@@A		; ATL::CComModule::m_libid
PUBLIC	_LIBID_ATLLib
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	?OnNcCalcSize@CSkinListCtrl@@QAEXHPAUtagNCCALCSIZE_PARAMS@@@Z ; CSkinListCtrl::OnNcCalcSize
PUBLIC	?OnItemChanging@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ; CSkinListCtrl::OnItemChanging
PUBLIC	?OnItemClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ; CSkinListCtrl::OnItemClick
PUBLIC	?OnItemRightClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ; CSkinListCtrl::OnItemRightClick
PUBLIC	?OnItemHover@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ; CSkinListCtrl::OnItemHover
PUBLIC	?OnKillFocus@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ; CSkinListCtrl::OnKillFocus
PUBLIC	?OnSetCursor@CSkinListCtrl@@QAEHPAVCWnd@@II@Z	; CSkinListCtrl::OnSetCursor
PUBLIC	?OnNcHitTest@CSkinListCtrl@@QAEIVCPoint@@@Z	; CSkinListCtrl::OnNcHitTest
PUBLIC	?OnCustomDraw@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ; CSkinListCtrl::OnCustomDraw
PUBLIC	?_messageEntries@CSkinListCtrl@@0QBUAFX_MSGMAP_ENTRY@@B ; CSkinListCtrl::_messageEntries
PUBLIC	?messageMap@CSkinListCtrl@@1UAFX_MSGMAP@@B	; CSkinListCtrl::messageMap
PUBLIC	?_GetBaseMessageMap@CSkinListCtrl@@KGPBUAFX_MSGMAP@@XZ ; CSkinListCtrl::_GetBaseMessageMap
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_LIBID_ACTIVESKINLib
PUBLIC	_IID_ISkinForm
PUBLIC	_IID_ISkinObjectDisp
PUBLIC	_IID_ISkinSource
PUBLIC	_DIID__ISkinFormEvents
PUBLIC	_IID_ISkinFormEvents_Sink
PUBLIC	_CLSID_SkinForm
PUBLIC	_DIID__ISkinObjectDispEvents
PUBLIC	_IID_ICOMScript
PUBLIC	_IID_IComMorph
PUBLIC	_IID_IComMoveSize
PUBLIC	_IID_ISkinButton
PUBLIC	_CLSID_SkinObject
PUBLIC	_CLSID_COMScript
PUBLIC	_CLSID_ComMorph
PUBLIC	_CLSID_ComMoveSize
PUBLIC	_DIID__ISkinButtonEvents
PUBLIC	_CLSID_SkinButton
PUBLIC	_IID_ISkinPanel
PUBLIC	_DIID__ISkinPanelEvents
PUBLIC	_IID_ISkinLabel
PUBLIC	_CLSID_SkinPanel
PUBLIC	_DIID__ISkinLabelEvents
PUBLIC	_IID_ISkinScrollBar
PUBLIC	_CLSID_SkinLabel
PUBLIC	_DIID__ISkinScrollBarEvents
PUBLIC	_CLSID_SkinScrollBar
PUBLIC	_DIID__ISkinSourceEvents
PUBLIC	_IID_ISkinStorage
PUBLIC	_IID_ISkinPopup
PUBLIC	_IID_IComTransitions
PUBLIC	_IID_ISkinEvent
PUBLIC	_IID_IComProcTextures
PUBLIC	_IID_IComFilters
PUBLIC	_CLSID_SkinSource
PUBLIC	_CLSID_SkinStorage
PUBLIC	_CLSID_SkinPopup
PUBLIC	_CLSID_ComTransitions
PUBLIC	_CLSID_SkinEvent
PUBLIC	_CLSID_ComProcTextures
PUBLIC	_CLSID_ComFilters
PUBLIC	_IID_IInternalConnection
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CComModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CComModule::m_libid
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT
?GUID_ATLVer30@ATL@@3U_GUID@@A DD 0b62f5910H		; ATL::GUID_ATLVer30
	DW	06528H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT _LIBID_ACTIVESKINLib
CONST	SEGMENT
_LIBID_ACTIVESKINLib DD 0972de6b5H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinForm
CONST	SEGMENT
_IID_ISkinForm DD 0972de6c1H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinObjectDisp
CONST	SEGMENT
_IID_ISkinObjectDisp DD 06cfc9ba1H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ISkinSource
CONST	SEGMENT
_IID_ISkinSource DD 037deb787H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _DIID__ISkinFormEvents
CONST	SEGMENT
_DIID__ISkinFormEvents DD 0972de6c3H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ISkinFormEvents_Sink
CONST	SEGMENT
_IID_ISkinFormEvents_Sink DD 053fa8d31H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinForm
CONST	SEGMENT
_CLSID_SkinForm DD 0972de6c2H
	DW	08b09H
	DW	011d2H
	DB	0b6H
	DB	052H
	DB	0a1H
	DB	0fdH
	DB	06cH
	DB	0c3H
	DB	042H
	DB	060H
CONST	ENDS
;	COMDAT _DIID__ISkinObjectDispEvents
CONST	SEGMENT
_DIID__ISkinObjectDispEvents DD 06cfc9ba3H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_ICOMScript
CONST	SEGMENT
_IID_ICOMScript DD 04f7ae600H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IComMorph
CONST	SEGMENT
_IID_IComMorph DD 0322982e0H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_IComMoveSize
CONST	SEGMENT
_IID_IComMoveSize DD 083c2d7a0H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _IID_ISkinButton
CONST	SEGMENT
_IID_ISkinButton DD 053fa8d40H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinObject
CONST	SEGMENT
_CLSID_SkinObject DD 06cfc9ba2H
	DW	0fe87H
	DW	011d2H
	DB	09dH
	DB	0cfH
	DB	0edH
	DB	029H
	DB	0faH
	DB	0feH
	DB	037H
	DB	01dH
CONST	ENDS
;	COMDAT _CLSID_COMScript
CONST	SEGMENT
_CLSID_COMScript DD 04f7ae601H
	DW	0142H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	089H
	DB	0beH
	DB	04eH
	DB	0fbH
	DB	059H
	DB	01eH
CONST	ENDS
;	COMDAT _CLSID_ComMorph
CONST	SEGMENT
_CLSID_ComMorph DD 0322982e1H
	DW	0855H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	0ddH
	DB	0fbH
	DB	03aH
	DB	0b0H
	DB	09eH
	DB	018H
CONST	ENDS
;	COMDAT _CLSID_ComMoveSize
CONST	SEGMENT
_CLSID_ComMoveSize DD 083c2d7a1H
	DW	0de6H
	DW	011d3H
	DB	09dH
	DB	0cfH
	DB	094H
	DB	023H
	DB	0f1H
	DB	0b2H
	DB	056H
	DB	01cH
CONST	ENDS
;	COMDAT _DIID__ISkinButtonEvents
CONST	SEGMENT
_DIID__ISkinButtonEvents DD 053fa8d42H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinButton
CONST	SEGMENT
_CLSID_SkinButton DD 053fa8d41H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinPanel
CONST	SEGMENT
_IID_ISkinPanel DD 053fa8d46H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinPanelEvents
CONST	SEGMENT
_DIID__ISkinPanelEvents DD 053fa8d48H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinLabel
CONST	SEGMENT
_IID_ISkinLabel DD 053fa8d49H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinPanel
CONST	SEGMENT
_CLSID_SkinPanel DD 053fa8d47H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinLabelEvents
CONST	SEGMENT
_DIID__ISkinLabelEvents DD 053fa8d4bH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ISkinScrollBar
CONST	SEGMENT
_IID_ISkinScrollBar DD 053fa8d4cH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinLabel
CONST	SEGMENT
_CLSID_SkinLabel DD 053fa8d4aH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinScrollBarEvents
CONST	SEGMENT
_DIID__ISkinScrollBarEvents DD 053fa8d4eH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinScrollBar
CONST	SEGMENT
_CLSID_SkinScrollBar DD 053fa8d4dH
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _DIID__ISkinSourceEvents
CONST	SEGMENT
_DIID__ISkinSourceEvents DD 037deb788H
	DW	02d9bH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0c4H
	DB	023H
	DB	0e6H
	DB	054H
	DB	02eH
	DB	010H
CONST	ENDS
;	COMDAT _IID_ISkinStorage
CONST	SEGMENT
_IID_ISkinStorage DD 0ee11629bH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISkinPopup
CONST	SEGMENT
_IID_ISkinPopup DD 0ca478da0H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IComTransitions
CONST	SEGMENT
_IID_IComTransitions DD 03c01387aH
	DW	06ac2H
	DW	04ef1H
	DB	0bdH
	DB	0a2H
	DB	0ecH
	DB	05dH
	DB	026H
	DB	0e3H
	DB	0b0H
	DB	065H
CONST	ENDS
;	COMDAT _IID_ISkinEvent
CONST	SEGMENT
_IID_ISkinEvent DD 055dd814eH
	DW	0a1b7H
	DW	04808H
	DB	096H
	DB	025H
	DB	04fH
	DB	075H
	DB	0a3H
	DB	0faH
	DB	0d8H
	DB	0a7H
CONST	ENDS
;	COMDAT _IID_IComProcTextures
CONST	SEGMENT
_IID_IComProcTextures DD 0dce47f78H
	DW	08a6cH
	DW	04c6dH
	DB	0a6H
	DB	0f7H
	DB	08bH
	DB	0e4H
	DB	042H
	DB	071H
	DB	027H
	DB	0c4H
CONST	ENDS
;	COMDAT _IID_IComFilters
CONST	SEGMENT
_IID_IComFilters DD 0920ff31fH
	DW	0ca25H
	DW	0451aH
	DB	097H
	DB	038H
	DB	034H
	DB	044H
	DB	0fcH
	DB	020H
	DB	06bH
	DB	0ccH
CONST	ENDS
;	COMDAT _CLSID_SkinSource
CONST	SEGMENT
_CLSID_SkinSource DD 053fa8d44H
	DW	02cddH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	0d3H
	DB	0cdH
	DB	040H
	DB	078H
	DB	098H
	DB	02aH
CONST	ENDS
;	COMDAT _CLSID_SkinStorage
CONST	SEGMENT
_CLSID_SkinStorage DD 0ee11629cH
	DW	036dfH
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	089H
	DB	0d6H
	DB	0dbH
	DB	0bbH
	DB	0a8H
	DB	00H
CONST	ENDS
;	COMDAT _CLSID_SkinPopup
CONST	SEGMENT
_CLSID_SkinPopup DD 0ca478da1H
	DW	03920H
	DW	011d3H
	DB	09dH
	DB	0d0H
	DB	080H
	DB	067H
	DB	0e4H
	DB	0a0H
	DB	066H
	DB	03H
CONST	ENDS
;	COMDAT _CLSID_ComTransitions
CONST	SEGMENT
_CLSID_ComTransitions DD 03c6d21d6H
	DW	07470H
	DW	04555H
	DB	0a8H
	DB	0fbH
	DB	06cH
	DB	022H
	DB	092H
	DB	0b3H
	DB	09cH
	DB	046H
CONST	ENDS
;	COMDAT _CLSID_SkinEvent
CONST	SEGMENT
_CLSID_SkinEvent DD 08f59c2a4H
	DW	04c01H
	DW	04451H
	DB	0beH
	DB	05bH
	DB	09H
	DB	078H
	DB	07bH
	DB	012H
	DB	03aH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComProcTextures
CONST	SEGMENT
_CLSID_ComProcTextures DD 0bf1b5d50H
	DW	03c5cH
	DW	048ceH
	DB	0b9H
	DB	091H
	DB	0eH
	DB	086H
	DB	0d2H
	DB	06fH
	DB	06fH
	DB	05eH
CONST	ENDS
;	COMDAT _CLSID_ComFilters
CONST	SEGMENT
_CLSID_ComFilters DD 0c4d7e3c7H
	DW	03c26H
	DW	04052H
	DB	0a9H
	DB	093H
	DB	071H
	DB	0e5H
	DB	00H
	DB	0eaH
	DB	08cH
	DB	05H
CONST	ENDS
CONST	SEGMENT
?messageMap@CSkinListCtrl@@1UAFX_MSGMAP@@B DD FLAT:?_GetBaseMessageMap@CSkinListCtrl@@KGPBUAFX_MSGMAP@@XZ ; CSkinListCtrl::messageMap
	DD	FLAT:?_messageEntries@CSkinListCtrl@@0QBUAFX_MSGMAP_ENTRY@@B
?_messageEntries@CSkinListCtrl@@0QBUAFX_MSGMAP_ENTRY@@B DD 083H ; CSkinListCtrl::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	025H
	DD	FLAT:?OnNcCalcSize@CSkinListCtrl@@QAEXHPAUtagNCCALCSIZE_PARAMS@@@Z
	DD	020H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	FLAT:?OnSetCursor@CSkinListCtrl@@QAEHPAVCWnd@@II@Z
	DD	084H
	DD	00H
	DD	00H
	DD	00H
	DD	022H
	DD	FLAT:?OnNcHitTest@CSkinListCtrl@@QAEIVCPoint@@@Z
	DD	0bc4eH
	DD	0ff9cH
	DD	00H
	DD	00H
	DD	026H
	DD	FLAT:?OnItemChanging@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	0bc4eH
	DD	0fffeH
	DD	00H
	DD	00H
	DD	026H
	DD	FLAT:?OnItemClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	0bc4eH
	DD	0fffdH
	DD	00H
	DD	00H
	DD	026H
	DD	FLAT:?OnItemClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	0bc4eH
	DD	0fffbH
	DD	00H
	DD	00H
	DD	026H
	DD	FLAT:?OnItemRightClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	0bc4eH
	DD	0fffaH
	DD	00H
	DD	00H
	DD	026H
	DD	FLAT:?OnItemRightClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	0bc4eH
	DD	0fff4H
	DD	00H
	DD	00H
	DD	026H
	DD	FLAT:?OnCustomDraw@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	0bc4eH
	DD	0fff3H
	DD	00H
	DD	00H
	DD	026H
	DD	FLAT:?OnItemHover@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	0bc4eH
	DD	0fff8H
	DD	00H
	DD	00H
	DD	026H
	DD	FLAT:?OnKillFocus@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
EXTRN	__imp_?messageMap@CListCtrl@@1UAFX_MSGMAP@@B:QWORD
_TEXT	SEGMENT
?_GetBaseMessageMap@CSkinListCtrl@@KGPBUAFX_MSGMAP@@XZ PROC NEAR ; CSkinListCtrl::_GetBaseMessageMap

; 28   : BEGIN_MESSAGE_MAP ( CSkinListCtrl, CListCtrl )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?messageMap@CListCtrl@@1UAFX_MSGMAP@@B
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?_GetBaseMessageMap@CSkinListCtrl@@KGPBUAFX_MSGMAP@@XZ ENDP ; CSkinListCtrl::_GetBaseMessageMap
_TEXT	ENDS
PUBLIC	?GetMessageMap@CSkinListCtrl@@MBEPBUAFX_MSGMAP@@XZ ; CSkinListCtrl::GetMessageMap
_TEXT	SEGMENT
_this$ = -4
?GetMessageMap@CSkinListCtrl@@MBEPBUAFX_MSGMAP@@XZ PROC NEAR ; CSkinListCtrl::GetMessageMap

; 28   : BEGIN_MESSAGE_MAP ( CSkinListCtrl, CListCtrl )

  0000a	55		 push	 ebp
  0000b	8b ec		 mov	 ebp, esp
  0000d	51		 push	 ecx
  0000e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?messageMap@CSkinListCtrl@@1UAFX_MSGMAP@@B ; CSkinListCtrl::messageMap
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetMessageMap@CSkinListCtrl@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CSkinListCtrl::GetMessageMap
_TEXT	ENDS
PUBLIC	?clear@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ ; std::list<CListData *,std::allocator<CListData *> >::clear
PUBLIC	?GetItemTextColor@CSkinListCtrl@@MAEKH@Z	; CSkinListCtrl::GetItemTextColor
PUBLIC	?GetItemBGColor@CSkinListCtrl@@MAEKH@Z		; CSkinListCtrl::GetItemBGColor
PUBLIC	??0CSkinListCtrl@@QAE@H@Z			; CSkinListCtrl::CSkinListCtrl
PUBLIC	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z	; CWnd::DoDataExchange
PUBLIC	?BeginModalState@CWnd@@UAEXXZ			; CWnd::BeginModalState
PUBLIC	?UpdateMe@CSkinListCtrl@@UAEXXZ			; CSkinListCtrl::UpdateMe
PUBLIC	?EndModalState@CWnd@@UAEXXZ			; CWnd::EndModalState
PUBLIC	?UpdateScrollBar@CSkinListCtrl@@UAEXXZ		; CSkinListCtrl::UpdateScrollBar
PUBLIC	?OnItemActivate@CSkinListCtrl@@UAEXH_N@Z	; CSkinListCtrl::OnItemActivate
PUBLIC	?OnMouseWheel@CSkinListCtrl@@UAEXIF@Z		; CSkinListCtrl::OnMouseWheel
PUBLIC	?OnMouseOver@CSkinListCtrl@@UAEXVCPoint@@@Z	; CSkinListCtrl::OnMouseOver
PUBLIC	??_7CSkinListCtrl@@6BCListCtrl@@@		; CSkinListCtrl::`vftable'
PUBLIC	??_7CSkinListCtrl@@6BCSkinCtrl@@@		; CSkinListCtrl::`vftable'
PUBLIC	??_7CSkinListCtrl@@6BCScrollable@@@		; CSkinListCtrl::`vftable'
PUBLIC	??_7CSkinListCtrl@@6BCMouseWheelable@@@		; CSkinListCtrl::`vftable'
PUBLIC	??_GCSkinListCtrl@@UAEPAXI@Z			; CSkinListCtrl::`scalar deleting destructor'
PUBLIC	??_ECSkinListCtrl@@UAEPAXI@Z			; CSkinListCtrl::`vector deleting destructor'
PUBLIC	??0CFont@@QAE@XZ				; CFont::CFont
PUBLIC	??1CFont@@UAE@XZ				; CFont::~CFont
PUBLIC	??0CListCtrl@@QAE@XZ				; CListCtrl::CListCtrl
PUBLIC	?Serialize@CObject@@UAEXAAVCArchive@@@Z		; CObject::Serialize
PUBLIC	?AssertValid@CObject@@UBEXXZ			; CObject::AssertValid
PUBLIC	?Dump@CObject@@UBEXAAVCDumpContext@@@Z		; CObject::Dump
PUBLIC	??_ECSkinListCtrl@@WEA@AEPAXI@Z			; CSkinListCtrl::`vector deleting destructor'
PUBLIC	??_ECSkinListCtrl@@WHE@AEPAXI@Z			; CSkinListCtrl::`vector deleting destructor'
PUBLIC	??0?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@ABV?$allocator@PAVCListData@@@1@@Z ; std::list<CListData *,std::allocator<CListData *> >::list<CListData *,std::allocator<CListData *> >
PUBLIC	??1?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::~list<CListData *,std::allocator<CListData *> >
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:NEAR ; CCmdTarget::OnCmdMsg
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:NEAR	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:NEAR ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:NEAR	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:NEAR ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:NEAR ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:NEAR ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:NEAR ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:NEAR ; CCmdTarget::GetConnectionMap
EXTRN	??0CScrollable@@QAE@XZ:NEAR			; CScrollable::CScrollable
EXTRN	?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ:NEAR ; CCmdTarget::GetInterfaceMap
EXTRN	?SetLocation@CScrollable@@UAEXM@Z:NEAR		; CScrollable::SetLocation
EXTRN	?ChangeLocation@CScrollable@@UAEXH@Z:NEAR	; CScrollable::ChangeLocation
EXTRN	?ChangePage@CScrollable@@UAEXH@Z:NEAR		; CScrollable::ChangePage
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:NEAR ; CCmdTarget::GetEventSinkMap
EXTRN	?SetRange@CScrollable@@UAEXHH@Z:NEAR		; CScrollable::SetRange
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:NEAR	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:NEAR ; CCmdTarget::GetInterfaceHook
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:NEAR ; CWnd::GetSuperWndProcAddr
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:NEAR ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:NEAR ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:NEAR		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:NEAR		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:NEAR		; CWnd::PostNcDestroy
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:NEAR ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:NEAR		; CWnd::CheckAutoCenter
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:NEAR ; CCmdTarget::GetConnectionHook
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:NEAR			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:NEAR		; CWnd::OnFinalRelease
EXTRN	?CreatePointFont@CFont@@QAEHHPBDPAVCDC@@@Z:NEAR	; CFont::CreatePointFont
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:NEAR ; CWnd::SetOccDialogInfo
EXTRN	?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ:NEAR ; CListCtrl::GetRuntimeClass
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:NEAR		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:NEAR ; CWnd::Create
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:NEAR		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:NEAR ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:NEAR	; CWnd::CalcWindowRect
EXTRN	??0CSkinCtrl@@QAE@XZ:NEAR			; CSkinCtrl::CSkinCtrl
EXTRN	??1CSkinCtrl@@UAE@XZ:NEAR			; CSkinCtrl::~CSkinCtrl
EXTRN	?UpdateTracking@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::UpdateTracking
EXTRN	?Refresh@CSkinCtrl@@UAEXXZ:NEAR			; CSkinCtrl::Refresh
EXTRN	?Disable@CSkinCtrl@@UAEHXZ:NEAR			; CSkinCtrl::Disable
EXTRN	?IsDisabled@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::IsDisabled
EXTRN	?Enable@CSkinCtrl@@UAEHXZ:NEAR			; CSkinCtrl::Enable
EXTRN	?Activate@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Activate
EXTRN	?Deactivate@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Deactivate
EXTRN	?Highlight@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Highlight
EXTRN	?Unhighlight@CSkinCtrl@@UAEHXZ:NEAR		; CSkinCtrl::Unhighlight
EXTRN	?ShowNormal@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowNormal
EXTRN	?ShowDisabled@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowDisabled
EXTRN	?ShowPressed@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowPressed
EXTRN	?ShowHighlighted@CSkinCtrl@@UAEXXZ:NEAR		; CSkinCtrl::ShowHighlighted
EXTRN	?OnMouseMove@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseMove
EXTRN	?OnMouseIn@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseIn
EXTRN	?OnMouseOut@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseOut
EXTRN	?OnMouseDown@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseDown
EXTRN	?OnMouseUp@CSkinCtrl@@UAEXHFF@Z:NEAR		; CSkinCtrl::OnMouseUp
EXTRN	?OnActivate@CSkinCtrl@@UAEXFF@Z:NEAR		; CSkinCtrl::OnActivate
EXTRN	?DrawItem@CListCtrl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z:NEAR ; CListCtrl::DrawItem
EXTRN	??1CListCtrl@@UAE@XZ:NEAR			; CListCtrl::~CListCtrl
EXTRN	?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z:NEAR	; CListCtrl::OnChildNotify
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:NEAR ; CWnd::OnToolHitTest
EXTRN	??0CMouseWheelable@@QAE@XZ:NEAR			; CMouseWheelable::CMouseWheelable
EXTRN	??1CMouseWheelable@@UAE@XZ:NEAR			; CMouseWheelable::~CMouseWheelable
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:NEAR ; CWnd::GetScrollBarCtrl
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:NEAR			; CWnd::WinHelpA
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?ContinueModal@CWnd@@UAEHXZ:NEAR		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:NEAR		; CWnd::EndModalLoop
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:NEAR			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:NEAR		; CWnd::OnNotify
;	COMDAT ??_7CSkinListCtrl@@6BCListCtrl@@@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\skinlistctrl.cpp
CONST	SEGMENT
??_7CSkinListCtrl@@6BCListCtrl@@@ DD FLAT:?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ ; CSkinListCtrl::`vftable'
	DD	FLAT:??_ECSkinListCtrl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CSkinListCtrl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?DrawItem@CListCtrl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
	DD	FLAT:?GetItemTextColor@CSkinListCtrl@@MAEKH@Z
	DD	FLAT:?GetItemBGColor@CSkinListCtrl@@MAEKH@Z
	DD	FLAT:?OnItemActivate@CSkinListCtrl@@UAEXH_N@Z
	DD	FLAT:?OnMouseOver@CSkinListCtrl@@UAEXVCPoint@@@Z
CONST	ENDS
;	COMDAT ??_7CSkinListCtrl@@6BCSkinCtrl@@@
CONST	SEGMENT
??_7CSkinListCtrl@@6BCSkinCtrl@@@ DD FLAT:??_ECSkinListCtrl@@WEA@AEPAXI@Z ; CSkinListCtrl::`vftable'
	DD	FLAT:?UpdateTracking@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Refresh@CSkinCtrl@@UAEXXZ
	DD	FLAT:?Disable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?IsDisabled@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Enable@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Activate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Deactivate@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Highlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?Unhighlight@CSkinCtrl@@UAEHXZ
	DD	FLAT:?ShowNormal@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowDisabled@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowPressed@CSkinCtrl@@UAEXXZ
	DD	FLAT:?ShowHighlighted@CSkinCtrl@@UAEXXZ
	DD	FLAT:?OnMouseMove@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseIn@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseOut@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseDown@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnMouseUp@CSkinCtrl@@UAEXHFF@Z
	DD	FLAT:?OnActivate@CSkinCtrl@@UAEXFF@Z
CONST	ENDS
;	COMDAT ??_7CSkinListCtrl@@6BCScrollable@@@
CONST	SEGMENT
??_7CSkinListCtrl@@6BCScrollable@@@ DD FLAT:?UpdateMe@CSkinListCtrl@@UAEXXZ ; CSkinListCtrl::`vftable'
	DD	FLAT:?SetLocation@CScrollable@@UAEXM@Z
	DD	FLAT:?ChangeLocation@CScrollable@@UAEXH@Z
	DD	FLAT:?ChangePage@CScrollable@@UAEXH@Z
	DD	FLAT:?SetRange@CScrollable@@UAEXHH@Z
	DD	FLAT:?UpdateScrollBar@CSkinListCtrl@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CSkinListCtrl@@6BCMouseWheelable@@@
CONST	SEGMENT
??_7CSkinListCtrl@@6BCMouseWheelable@@@ DD FLAT:??_ECSkinListCtrl@@WHE@AEPAXI@Z ; CSkinListCtrl::`vftable'
	DD	FLAT:?OnMouseWheel@CSkinListCtrl@@UAEXIF@Z
CONST	ENDS
_DATA	SEGMENT
$SG145617 DB	'Arial', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T151479 DD	019930520H
	DD	05H
	DD	FLAT:$T151482
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151482 DD	0ffffffffH
	DD	FLAT:$L151471
	DD	00H
	DD	FLAT:$L151472
	DD	01H
	DD	FLAT:$L151473
	DD	02H
	DD	FLAT:$L151474
	DD	03H
	DD	FLAT:$L151475
xdata$x	ENDS
_TEXT	SEGMENT
_nPointSize$ = 8
_this$ = -20
$T151470 = -16
__$EHRec$ = -12
??0CSkinListCtrl@@QAE@H@Z PROC NEAR			; CSkinListCtrl::CSkinListCtrl

; 43   : {

  0001a	55		 push	 ebp
  0001b	8b ec		 mov	 ebp, esp
  0001d	6a ff		 push	 -1
  0001f	68 00 00 00 00	 push	 $L151480
  00024	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0002a	50		 push	 eax
  0002b	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00032	83 ec 08	 sub	 esp, 8
  00035	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00038	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0CListCtrl@@QAE@XZ	; CListCtrl::CListCtrl
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 40	 add	 ecx, 64			; 00000040H
  0004d	e8 00 00 00 00	 call	 ??0CSkinCtrl@@QAE@XZ	; CSkinCtrl::CSkinCtrl
  00052	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00056	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	83 c1 54	 add	 ecx, 84			; 00000054H
  0005c	e8 00 00 00 00	 call	 ??0CScrollable@@QAE@XZ	; CScrollable::CScrollable
  00061	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	83 c1 74	 add	 ecx, 116		; 00000074H
  00067	e8 00 00 00 00	 call	 ??0CMouseWheelable@@QAE@XZ ; CMouseWheelable::CMouseWheelable
  0006c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00070	8d 45 f0	 lea	 eax, DWORD PTR $T151470[ebp]
  00073	50		 push	 eax
  00074	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  0007d	e8 00 00 00 00	 call	 ??0?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@ABV?$allocator@PAVCListData@@@1@@Z ; std::list<CListData *,std::allocator<CListData *> >::list<CListData *,std::allocator<CListData *> >
  00082	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00086	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  0008f	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  00094	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00098	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CSkinListCtrl@@6BCListCtrl@@@ ; CSkinListCtrl::`vftable'
  000a1	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000a4	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], OFFSET FLAT:??_7CSkinListCtrl@@6BCSkinCtrl@@@ ; CSkinListCtrl::`vftable'
  000ab	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], OFFSET FLAT:??_7CSkinListCtrl@@6BCScrollable@@@ ; CSkinListCtrl::`vftable'
  000b5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], OFFSET FLAT:??_7CSkinListCtrl@@6BCMouseWheelable@@@ ; CSkinListCtrl::`vftable'

; 44   : 	m_bDisableInHandsOff = true;

  000bf	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	c7 82 98 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+152], 1

; 45   :     m_bDoubleLine  = false;

  000cc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0

; 46   :     m_nHover       = -1;

  000d9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	c7 81 90 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+144], -1

; 47   : 	m_nColumnCount = 0;

  000e6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	c7 42 7c 00 00
	00 00		 mov	 DWORD PTR [edx+124], 0

; 48   : 	m_Font.CreatePointFont ( nPointSize, "Arial" );

  000f0	6a 00		 push	 0
  000f2	68 00 00 00 00	 push	 OFFSET FLAT:$SG145617
  000f7	8b 45 08	 mov	 eax, DWORD PTR _nPointSize$[ebp]
  000fa	50		 push	 eax
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00104	e8 00 00 00 00	 call	 ?CreatePointFont@CFont@@QAEHHPBDPAVCDC@@@Z ; CFont::CreatePointFont

; 49   : 
; 50   : 	colItemBG      = RGB (0,0,0);

  00109	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	c7 81 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+164], 0

; 51   : 	colItemText    = RGB (255,255,255);

  00116	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00119	c7 82 a8 00 00
	00 ff ff ff 00	 mov	 DWORD PTR [edx+168], 16777215 ; 00ffffffH

; 52   : 	colItemHovBG   = RGB (0,0,0);

  00123	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00126	c7 80 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+172], 0

; 53   : 	colItemHovText = RGB (240,200,80);

  00130	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00133	c7 81 b0 00 00
	00 f0 c8 50 00	 mov	 DWORD PTR [ecx+176], 5294320 ; 0050c8f0H

; 54   : 
; 55   :     m_nListItems = 0;

  0013d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00140	c7 82 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+140], 0

; 56   :     m_ListData.clear();

  0014a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00153	e8 00 00 00 00	 call	 ?clear@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ ; std::list<CListData *,std::allocator<CListData *> >::clear

; 57   : }

  00158	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00162	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00165	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L151471:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CListCtrl@@UAE@XZ	; CListCtrl::~CListCtrl
  00008	c3		 ret	 0
$L151472:
  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 40	 add	 ecx, 64			; 00000040H
  0000f	e8 00 00 00 00	 call	 ??1CSkinCtrl@@UAE@XZ	; CSkinCtrl::~CSkinCtrl
  00014	c3		 ret	 0
$L151473:
  00015	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 74	 add	 ecx, 116		; 00000074H
  0001b	e8 00 00 00 00	 call	 ??1CMouseWheelable@@UAE@XZ ; CMouseWheelable::~CMouseWheelable
  00020	c3		 ret	 0
$L151474:
  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  0002a	e8 00 00 00 00	 call	 ??1?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::~list<CListData *,std::allocator<CListData *> >
  0002f	c3		 ret	 0
$L151475:
  00030	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00039	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  0003e	c3		 ret	 0
$L151480:
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151479
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CSkinListCtrl@@QAE@H@Z ENDP				; CSkinListCtrl::CSkinListCtrl
PUBLIC	??1CSkinListCtrl@@UAE@XZ			; CSkinListCtrl::~CSkinListCtrl
PUBLIC	??3CObject@@SGXPAX@Z				; CObject::operator delete
;	COMDAT ??_GCSkinListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCSkinListCtrl@@UAEPAXI@Z PROC NEAR			; CSkinListCtrl::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSkinListCtrl@@UAE@XZ ; CSkinListCtrl::~CSkinListCtrl
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L145645
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L145645:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCSkinListCtrl@@UAEPAXI@Z ENDP			; CSkinListCtrl::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?empty@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NXZ ; std::list<CListData *,std::allocator<CListData *> >::empty
PUBLIC	?front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAPAVCListData@@XZ ; std::list<CListData *,std::allocator<CListData *> >::front
PUBLIC	?pop_front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ ; std::list<CListData *,std::allocator<CListData *> >::pop_front
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
xdata$x	SEGMENT
$T151501 DD	019930520H
	DD	05H
	DD	FLAT:$T151503
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151503 DD	0ffffffffH
	DD	FLAT:$L151491
	DD	00H
	DD	FLAT:$L151494
	DD	01H
	DD	FLAT:$L151497
	DD	02H
	DD	FLAT:$L151498
	DD	03H
	DD	FLAT:$L151499
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -24
_pData$ = -16
$T151490 = -20
__$EHRec$ = -12
??1CSkinListCtrl@@UAE@XZ PROC NEAR			; CSkinListCtrl::~CSkinListCtrl

; 60   : {

  00172	55		 push	 ebp
  00173	8b ec		 mov	 ebp, esp
  00175	6a ff		 push	 -1
  00177	68 00 00 00 00	 push	 $L151502
  0017c	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00182	50		 push	 eax
  00183	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0018a	83 ec 14	 sub	 esp, 20			; 00000014H
  0018d	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00190	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00193	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSkinListCtrl@@6BCListCtrl@@@ ; CSkinListCtrl::`vftable'
  00199	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], OFFSET FLAT:??_7CSkinListCtrl@@6BCSkinCtrl@@@ ; CSkinListCtrl::`vftable'
  001a3	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001a6	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], OFFSET FLAT:??_7CSkinListCtrl@@6BCScrollable@@@ ; CSkinListCtrl::`vftable'
  001ad	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001b0	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], OFFSET FLAT:??_7CSkinListCtrl@@6BCMouseWheelable@@@ ; CSkinListCtrl::`vftable'
  001b7	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
$L145651:

; 61   :     // Clear down our own data list
; 62   :     CListData *pData;
; 63   : 
; 64   :     while( !m_ListData.empty() )

  001be	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c1	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  001c7	e8 00 00 00 00	 call	 ?empty@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NXZ ; std::list<CListData *,std::allocator<CListData *> >::empty
  001cc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001d1	85 c0		 test	 eax, eax
  001d3	75 35		 jne	 SHORT $L145652

; 66   : 	    pData = m_ListData.front();

  001d5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d8	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  001de	e8 00 00 00 00	 call	 ?front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAPAVCListData@@XZ ; std::list<CListData *,std::allocator<CListData *> >::front
  001e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e5	89 4d f0	 mov	 DWORD PTR _pData$[ebp], ecx

; 67   :         m_ListData.pop_front();

  001e8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001eb	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  001f1	e8 00 00 00 00	 call	 ?pop_front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ ; std::list<CListData *,std::allocator<CListData *> >::pop_front

; 68   :         delete pData;

  001f6	8b 55 f0	 mov	 edx, DWORD PTR _pData$[ebp]
  001f9	89 55 ec	 mov	 DWORD PTR $T151490[ebp], edx
  001fc	8b 45 ec	 mov	 eax, DWORD PTR $T151490[ebp]
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00205	83 c4 04	 add	 esp, 4

; 69   :     }

  00208	eb b4		 jmp	 SHORT $L145651
$L145652:

; 70   : 
; 71   :     m_nListItems = 0;

  0020a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0020d	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0

; 72   : 	m_ListData.clear();

  00217	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0021a	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00220	e8 00 00 00 00	 call	 ?clear@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ ; std::list<CListData *,std::allocator<CListData *> >::clear

; 73   : }

  00225	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00229	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0022c	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00232	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  00237	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0023b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0023e	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00244	e8 00 00 00 00	 call	 ??1?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::~list<CListData *,std::allocator<CListData *> >
  00249	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0024d	83 7d e8 00	 cmp	 DWORD PTR _this$[ebp], 0
  00251	74 0b		 je	 SHORT $L151488
  00253	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00256	83 c2 74	 add	 edx, 116		; 00000074H
  00259	89 55 e4	 mov	 DWORD PTR -28+[ebp], edx
  0025c	eb 07		 jmp	 SHORT $L151489
$L151488:
  0025e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L151489:
  00265	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  00268	e8 00 00 00 00	 call	 ??1CMouseWheelable@@UAE@XZ ; CMouseWheelable::~CMouseWheelable
  0026d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00271	83 7d e8 00	 cmp	 DWORD PTR _this$[ebp], 0
  00275	74 0b		 je	 SHORT $L151486
  00277	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0027a	83 c0 40	 add	 eax, 64			; 00000040H
  0027d	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  00280	eb 07		 jmp	 SHORT $L151487
$L151486:
  00282	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L151487:
  00289	8b 4d e0	 mov	 ecx, DWORD PTR -32+[ebp]
  0028c	e8 00 00 00 00	 call	 ??1CSkinCtrl@@UAE@XZ	; CSkinCtrl::~CSkinCtrl
  00291	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00298	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0029b	e8 00 00 00 00	 call	 ??1CListCtrl@@UAE@XZ	; CListCtrl::~CListCtrl
  002a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002aa	8b e5		 mov	 esp, ebp
  002ac	5d		 pop	 ebp
  002ad	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L151491:
  00049	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ??1CListCtrl@@UAE@XZ	; CListCtrl::~CListCtrl
  00051	c3		 ret	 0
$L151494:
  00052	83 7d e8 00	 cmp	 DWORD PTR _this$[ebp], 0
  00056	0f 84 0e 00 00
	00		 je	 $L151492
  0005c	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	83 c0 40	 add	 eax, 64			; 00000040H
  00062	89 45 e0	 mov	 DWORD PTR -32+[ebp], eax
  00065	e9 07 00 00 00	 jmp	 $L151493
$L151492:
  0006a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR -32+[ebp], 0
$L151493:
  00071	8b 4d e0	 mov	 ecx, DWORD PTR -32+[ebp]
  00074	e8 00 00 00 00	 call	 ??1CSkinCtrl@@UAE@XZ	; CSkinCtrl::~CSkinCtrl
  00079	c3		 ret	 0
$L151497:
  0007a	83 7d e8 00	 cmp	 DWORD PTR _this$[ebp], 0
  0007e	0f 84 0e 00 00
	00		 je	 $L151495
  00084	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00087	83 c0 74	 add	 eax, 116		; 00000074H
  0008a	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  0008d	e9 07 00 00 00	 jmp	 $L151496
$L151495:
  00092	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L151496:
  00099	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  0009c	e8 00 00 00 00	 call	 ??1CMouseWheelable@@UAE@XZ ; CMouseWheelable::~CMouseWheelable
  000a1	c3		 ret	 0
$L151498:
  000a2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  000ab	e8 00 00 00 00	 call	 ??1?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::~list<CListData *,std::allocator<CListData *> >
  000b0	c3		 ret	 0
$L151499:
  000b1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  000ba	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  000bf	c3		 ret	 0
$L151502:
  000c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151501
  000c5	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CSkinListCtrl@@UAE@XZ ENDP				; CSkinListCtrl::~CSkinListCtrl
PUBLIC	?SetItemColours@CSkinListCtrl@@QAEHKK@Z		; CSkinListCtrl::SetItemColours
_TEXT	SEGMENT
_cBG$ = 8
_cTx$ = 12
_this$ = -4
?SetItemColours@CSkinListCtrl@@QAEHKK@Z PROC NEAR	; CSkinListCtrl::SetItemColours

; 77   : {

  002ae	55		 push	 ebp
  002af	8b ec		 mov	 ebp, esp
  002b1	51		 push	 ecx
  002b2	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 	colItemBG      = cBG;

  002b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b8	8b 4d 08	 mov	 ecx, DWORD PTR _cBG$[ebp]
  002bb	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 79   : 	colItemText    = cTx;

  002c1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002c4	8b 45 0c	 mov	 eax, DWORD PTR _cTx$[ebp]
  002c7	89 82 a8 00 00
	00		 mov	 DWORD PTR [edx+168], eax

; 80   : 
; 81   : 	return TRUE;

  002cd	b8 01 00 00 00	 mov	 eax, 1

; 82   : }

  002d2	8b e5		 mov	 esp, ebp
  002d4	5d		 pop	 ebp
  002d5	c2 08 00	 ret	 8
?SetItemColours@CSkinListCtrl@@QAEHKK@Z ENDP		; CSkinListCtrl::SetItemColours
_TEXT	ENDS
PUBLIC	?SetItemHLColours@CSkinListCtrl@@QAEHKK@Z	; CSkinListCtrl::SetItemHLColours
_TEXT	SEGMENT
_cHBG$ = 8
_cHTx$ = 12
_this$ = -4
?SetItemHLColours@CSkinListCtrl@@QAEHKK@Z PROC NEAR	; CSkinListCtrl::SetItemHLColours

; 86   : {

  002d8	55		 push	 ebp
  002d9	8b ec		 mov	 ebp, esp
  002db	51		 push	 ecx
  002dc	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   : 	colItemHovBG   = cHBG;

  002df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002e2	8b 4d 08	 mov	 ecx, DWORD PTR _cHBG$[ebp]
  002e5	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 88   : 	colItemHovText = cHTx;

  002eb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002ee	8b 45 0c	 mov	 eax, DWORD PTR _cHTx$[ebp]
  002f1	89 82 b0 00 00
	00		 mov	 DWORD PTR [edx+176], eax

; 89   : 
; 90   : 	return TRUE;

  002f7	b8 01 00 00 00	 mov	 eax, 1

; 91   : }

  002fc	8b e5		 mov	 esp, ebp
  002fe	5d		 pop	 ebp
  002ff	c2 08 00	 ret	 8
?SetItemHLColours@CSkinListCtrl@@QAEHKK@Z ENDP		; CSkinListCtrl::SetItemHLColours
_TEXT	ENDS
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	??BCRect@@QAEPAUtagRECT@@XZ			; CRect::operator tagRECT *
PUBLIC	?Create@CSkinListCtrl@@QAEHVCSkinObj@@PAVCSkinWnd@@I_N22@Z ; CSkinListCtrl::Create
PUBLIC	?SetBkColor@CListCtrl@@QAEHK@Z			; CListCtrl::SetBkColor
PUBLIC	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ		; CWnd::GetSafeHwnd
PUBLIC	?GetCountPerPage@CListCtrl@@QBEHXZ		; CListCtrl::GetCountPerPage
PUBLIC	?SetExtendedStyle@CListCtrl@@QAEKK@Z		; CListCtrl::SetExtendedStyle
PUBLIC	?SetHoverTime@CListCtrl@@QAEKK@Z		; CListCtrl::SetHoverTime
PUBLIC	?SetFont@CWnd@@QAEXPAVCFont@@H@Z		; CWnd::SetFont
EXTRN	?SetPage@CScrollable@@QAEXH@Z:NEAR		; CScrollable::SetPage
EXTRN	?LinkToWindow@CMouseWheelable@@IAEXPAUHWND__@@@Z:NEAR ; CMouseWheelable::LinkToWindow
EXTRN	??1CSkinObj@@UAE@XZ:NEAR			; CSkinObj::~CSkinObj
EXTRN	?GetRect@CSkinObj@@QAEHPAUtagRECT@@@Z:NEAR	; CSkinObj::GetRect
EXTRN	?GetBGColor@CSkinObj@@QAEKXZ:NEAR		; CSkinObj::GetBGColor
EXTRN	?GetColor@CSkinObj@@QAEKXZ:NEAR			; CSkinObj::GetColor
EXTRN	??BCSkinObj@@QAEPAUISkinObjectDisp@@XZ:NEAR	; CSkinObj::operator ISkinObjectDisp *
EXTRN	?Create@CListCtrl@@QAEHKABUtagRECT@@PAVCWnd@@I@Z:NEAR ; CListCtrl::Create
EXTRN	?ShowWindow@CWnd@@QAEHH@Z:NEAR			; CWnd::ShowWindow
xdata$x	SEGMENT
$T151510 DD	019930520H
	DD	01H
	DD	FLAT:$T151512
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151512 DD	0ffffffffH
	DD	FLAT:$L151508
xdata$x	ENDS
_TEXT	SEGMENT
_container$ = 8
_pParent$ = 16
_nID$ = 20
_bShowWindow$ = 24
_bFullRowSelect$ = 28
_bDoubleLine$ = 32
_this$ = -36
_theRect$ = -28
$T151507 = -32
__$EHRec$ = -12
?Create@CSkinListCtrl@@QAEHVCSkinObj@@PAVCSkinWnd@@I_N22@Z PROC NEAR ; CSkinListCtrl::Create

; 95   : {

  00302	55		 push	 ebp
  00303	8b ec		 mov	 ebp, esp
  00305	6a ff		 push	 -1
  00307	68 00 00 00 00	 push	 $L151511
  0030c	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00312	50		 push	 eax
  00313	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0031a	83 ec 18	 sub	 esp, 24			; 00000018H
  0031d	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
  00320	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 96   : 	// get the containter rectangle...
; 97   : 	CRect theRect;

  00327	8d 4d e4	 lea	 ecx, DWORD PTR _theRect$[ebp]
  0032a	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 98   : 	container.GetRect ( theRect );

  0032f	8d 4d e4	 lea	 ecx, DWORD PTR _theRect$[ebp]
  00332	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  00337	50		 push	 eax
  00338	8d 4d 08	 lea	 ecx, DWORD PTR _container$[ebp]
  0033b	e8 00 00 00 00	 call	 ?GetRect@CSkinObj@@QAEHPAUtagRECT@@@Z ; CSkinObj::GetRect

; 99   : 
; 100  :     // Double line list??
; 101  :     m_bDoubleLine = bDoubleLine;

  00340	8b 45 20	 mov	 eax, DWORD PTR _bDoubleLine$[ebp]
  00343	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00348	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0034b	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax

; 102  : 
; 103  : 	// link the container to our skin object information...
; 104  : 	p_obj = container;

  00351	8d 4d 08	 lea	 ecx, DWORD PTR _container$[ebp]
  00354	e8 00 00 00 00	 call	 ??BCSkinObj@@QAEPAUISkinObjectDisp@@XZ ; CSkinObj::operator ISkinObjectDisp *
  00359	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  0035c	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 105  : 
; 106  : 	// create the CListCtrl object...
; 107  : 	CListCtrl::Create ( LVS_REPORT | LVS_NOCOLUMNHEADER | LVS_SINGLESEL, theRect, (CWnd *)pParent, nID );

  0035f	8b 45 14	 mov	 eax, DWORD PTR _nID$[ebp]
  00362	50		 push	 eax
  00363	8b 4d 10	 mov	 ecx, DWORD PTR _pParent$[ebp]
  00366	51		 push	 ecx
  00367	8d 55 e4	 lea	 edx, DWORD PTR _theRect$[ebp]
  0036a	52		 push	 edx
  0036b	68 05 40 00 00	 push	 16389			; 00004005H
  00370	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00373	e8 00 00 00 00	 call	 ?Create@CListCtrl@@QAEHKABUtagRECT@@PAVCWnd@@I@Z ; CListCtrl::Create

; 108  : 
; 109  : 	// make sure the mouse wheel manager sees us!
; 110  : 	CMouseWheelable::LinkToWindow ( GetSafeHwnd() );

  00378	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0037b	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  00380	50		 push	 eax
  00381	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00384	83 c1 74	 add	 ecx, 116		; 00000074H
  00387	e8 00 00 00 00	 call	 ?LinkToWindow@CMouseWheelable@@IAEXPAUHWND__@@@Z ; CMouseWheelable::LinkToWindow

; 111  : 
; 112  : 	// set the parent window
; 113  : 	m_pParentWnd = pParent;

  0038c	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0038f	8b 4d 10	 mov	 ecx, DWORD PTR _pParent$[ebp]
  00392	89 48 50	 mov	 DWORD PTR [eax+80], ecx

; 114  : 
; 115  : 	// set the color scheme...
; 116  : 	colItemBG      = container.GetBGColor();

  00395	8d 4d 08	 lea	 ecx, DWORD PTR _container$[ebp]
  00398	e8 00 00 00 00	 call	 ?GetBGColor@CSkinObj@@QAEKXZ ; CSkinObj::GetBGColor
  0039d	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  003a0	89 82 a4 00 00
	00		 mov	 DWORD PTR [edx+164], eax

; 117  : 	colItemHovBG   = container.GetBGColor();

  003a6	8d 4d 08	 lea	 ecx, DWORD PTR _container$[ebp]
  003a9	e8 00 00 00 00	 call	 ?GetBGColor@CSkinObj@@QAEKXZ ; CSkinObj::GetBGColor
  003ae	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b1	89 81 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], eax

; 118  : 
; 119  : 	// Som,e older controls have black text, we dont want this
; 120  : 	if (container.GetColor() == RGB(0,0,0))

  003b7	8d 4d 08	 lea	 ecx, DWORD PTR _container$[ebp]
  003ba	e8 00 00 00 00	 call	 ?GetColor@CSkinObj@@QAEKXZ ; CSkinObj::GetColor
  003bf	85 c0		 test	 eax, eax
  003c1	75 0f		 jne	 SHORT $L145681

; 122  : 		colItemText    = RGB(255,255,255);

  003c3	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  003c6	c7 82 a8 00 00
	00 ff ff ff 00	 mov	 DWORD PTR [edx+168], 16777215 ; 00ffffffH

; 124  : 	else

  003d0	eb 11		 jmp	 SHORT $L145688
$L145681:

; 126  : 		colItemText    = container.GetColor();

  003d2	8d 4d 08	 lea	 ecx, DWORD PTR _container$[ebp]
  003d5	e8 00 00 00 00	 call	 ?GetColor@CSkinObj@@QAEKXZ ; CSkinObj::GetColor
  003da	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  003dd	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
$L145688:

; 128  : 
; 129  : 	SetBkColor(container.GetBGColor());

  003e3	8d 4d 08	 lea	 ecx, DWORD PTR _container$[ebp]
  003e6	e8 00 00 00 00	 call	 ?GetBGColor@CSkinObj@@QAEKXZ ; CSkinObj::GetBGColor
  003eb	50		 push	 eax
  003ec	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  003ef	e8 00 00 00 00	 call	 ?SetBkColor@CListCtrl@@QAEHK@Z ; CListCtrl::SetBkColor

; 130  : 
; 131  : 	// set the extended styles...
; 132  : 	SetExtendedStyle ( (bFullRowSelect? LVS_EX_FULLROWSELECT : 0) | LVS_EX_TRACKSELECT );

  003f4	8b 55 1c	 mov	 edx, DWORD PTR _bFullRowSelect$[ebp]
  003f7	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  003fd	f7 da		 neg	 edx
  003ff	1b d2		 sbb	 edx, edx
  00401	83 e2 20	 and	 edx, 32			; 00000020H
  00404	83 ca 08	 or	 edx, 8
  00407	52		 push	 edx
  00408	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0040b	e8 00 00 00 00	 call	 ?SetExtendedStyle@CListCtrl@@QAEKK@Z ; CListCtrl::SetExtendedStyle

; 133  :     
; 134  :     // Set Hover time to 1
; 135  :     SetHoverTime(1);

  00410	6a 01		 push	 1
  00412	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00415	e8 00 00 00 00	 call	 ?SetHoverTime@CListCtrl@@QAEKK@Z ; CListCtrl::SetHoverTime

; 136  : 
; 137  : 	// set the font
; 138  : 	SetFont ( &m_Font );

  0041a	6a 01		 push	 1
  0041c	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0041f	05 9c 00 00 00	 add	 eax, 156		; 0000009cH
  00424	50		 push	 eax
  00425	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00428	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 139  : 
; 140  : 	if (bShowWindow)

  0042d	8b 4d 18	 mov	 ecx, DWORD PTR _bShowWindow$[ebp]
  00430	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00436	85 c9		 test	 ecx, ecx
  00438	74 0a		 je	 SHORT $L145689

; 142  : 		ShowWindow ( SW_SHOW );

  0043a	6a 05		 push	 5
  0043c	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0043f	e8 00 00 00 00	 call	 ?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow
$L145689:

; 144  : 
; 145  : 	SetPage( GetCountPerPage() );

  00444	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00447	e8 00 00 00 00	 call	 ?GetCountPerPage@CListCtrl@@QBEHXZ ; CListCtrl::GetCountPerPage
  0044c	50		 push	 eax
  0044d	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00450	83 c1 54	 add	 ecx, 84			; 00000054H
  00453	e8 00 00 00 00	 call	 ?SetPage@CScrollable@@QAEXH@Z ; CScrollable::SetPage

; 146  : 
; 147  : 	return TRUE;

  00458	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR $T151507[ebp], 1
  0045f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00466	8d 4d 08	 lea	 ecx, DWORD PTR _container$[ebp]
  00469	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0046e	8b 45 e0	 mov	 eax, DWORD PTR $T151507[ebp]

; 148  : }

  00471	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00474	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0047b	8b e5		 mov	 esp, ebp
  0047d	5d		 pop	 ebp
  0047e	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
text$x	SEGMENT
$L151508:
  000ca	8d 4d 08	 lea	 ecx, DWORD PTR _container$[ebp]
  000cd	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  000d2	c3		 ret	 0
$L151511:
  000d3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151510
  000d8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Create@CSkinListCtrl@@QAEHVCSkinObj@@PAVCSkinWnd@@I_N22@Z ENDP ; CSkinListCtrl::Create
PUBLIC	?Width@CRect@@QBEHXZ				; CRect::Width
PUBLIC	??BCString@@QBEPBDXZ				; CString::operator char const *
PUBLIC	?AddColumn@CSkinListCtrl@@QAEHVCSkinObj@@H@Z	; CSkinListCtrl::AddColumn
EXTRN	?GetText@CSkinObj@@QAE?AVCString@@XZ:NEAR	; CSkinObj::GetText
EXTRN	??1CString@@QAE@XZ:NEAR				; CString::~CString
EXTRN	?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z:NEAR	; CListCtrl::InsertColumn
xdata$x	SEGMENT
$T151518 DD	019930520H
	DD	02H
	DD	FLAT:$T151520
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151520 DD	0ffffffffH
	DD	FLAT:$L151515
	DD	00H
	DD	FLAT:$L151516
xdata$x	ENDS
_TEXT	SEGMENT
_obj$ = 8
_nFormat$ = 16
_this$ = -44
_name$ = -36
_objRect$ = -28
_nWidth$ = -32
$T151514 = -40
__$EHRec$ = -12
?AddColumn@CSkinListCtrl@@QAEHVCSkinObj@@H@Z PROC NEAR	; CSkinListCtrl::AddColumn

; 152  : {

  00481	55		 push	 ebp
  00482	8b ec		 mov	 ebp, esp
  00484	6a ff		 push	 -1
  00486	68 00 00 00 00	 push	 $L151519
  0048b	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00491	50		 push	 eax
  00492	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00499	83 ec 20	 sub	 esp, 32			; 00000020H
  0049c	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx
  0049f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 153  : 	assert ( obj.IsValid() );
; 154  : 
; 155  : 	// get the name of the column...
; 156  : 	CString name = obj.GetText();

  004a6	8d 45 dc	 lea	 eax, DWORD PTR _name$[ebp]
  004a9	50		 push	 eax
  004aa	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  004ad	e8 00 00 00 00	 call	 ?GetText@CSkinObj@@QAE?AVCString@@XZ ; CSkinObj::GetText
  004b2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 157  : 
; 158  : 	// get the pixel width of the column..
; 159  : 	CRect objRect;

  004b6	8d 4d e4	 lea	 ecx, DWORD PTR _objRect$[ebp]
  004b9	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 160  : 	obj.GetRect ( objRect );

  004be	8d 4d e4	 lea	 ecx, DWORD PTR _objRect$[ebp]
  004c1	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  004c6	50		 push	 eax
  004c7	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  004ca	e8 00 00 00 00	 call	 ?GetRect@CSkinObj@@QAEHPAUtagRECT@@@Z ; CSkinObj::GetRect

; 161  : 	int nWidth = objRect.Width();

  004cf	8d 4d e4	 lea	 ecx, DWORD PTR _objRect$[ebp]
  004d2	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  004d7	89 45 e0	 mov	 DWORD PTR _nWidth$[ebp], eax

; 162  : 
; 163  : 	// add the column to the list control...
; 164  : 	InsertColumn ( m_nColumnCount, name, nFormat, nWidth );

  004da	6a ff		 push	 -1
  004dc	8b 4d e0	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  004df	51		 push	 ecx
  004e0	8b 55 10	 mov	 edx, DWORD PTR _nFormat$[ebp]
  004e3	52		 push	 edx
  004e4	8d 4d dc	 lea	 ecx, DWORD PTR _name$[ebp]
  004e7	e8 00 00 00 00	 call	 ??BCString@@QBEPBDXZ	; CString::operator char const *
  004ec	50		 push	 eax
  004ed	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  004f0	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  004f3	51		 push	 ecx
  004f4	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  004f7	e8 00 00 00 00	 call	 ?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z ; CListCtrl::InsertColumn

; 165  : 	m_nColumnCount++;

  004fc	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  004ff	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00502	83 c0 01	 add	 eax, 1
  00505	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00508	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 166  : 
; 167  : 	return TRUE;

  0050b	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR $T151514[ebp], 1
  00512	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00516	8d 4d dc	 lea	 ecx, DWORD PTR _name$[ebp]
  00519	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  0051e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00525	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  00528	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  0052d	8b 45 d8	 mov	 eax, DWORD PTR $T151514[ebp]

; 168  : }

  00530	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00533	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0053a	8b e5		 mov	 esp, ebp
  0053c	5d		 pop	 ebp
  0053d	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L151515:
  000dd	8d 4d 08	 lea	 ecx, DWORD PTR _obj$[ebp]
  000e0	e8 00 00 00 00	 call	 ??1CSkinObj@@UAE@XZ	; CSkinObj::~CSkinObj
  000e5	c3		 ret	 0
$L151516:
  000e6	8d 4d dc	 lea	 ecx, DWORD PTR _name$[ebp]
  000e9	e8 00 00 00 00	 call	 ??1CString@@QAE@XZ	; CString::~CString
  000ee	c3		 ret	 0
$L151519:
  000ef	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151518
  000f4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddColumn@CSkinListCtrl@@QAEHVCSkinObj@@H@Z ENDP	; CSkinListCtrl::AddColumn
PUBLIC	?AddColumn@CSkinListCtrl@@QAEHPADHH@Z		; CSkinListCtrl::AddColumn
_TEXT	SEGMENT
_pTitle$ = 8
_nWidth$ = 12
_nFormat$ = 16
_this$ = -4
?AddColumn@CSkinListCtrl@@QAEHPADHH@Z PROC NEAR		; CSkinListCtrl::AddColumn

; 172  : {

  00540	55		 push	 ebp
  00541	8b ec		 mov	 ebp, esp
  00543	51		 push	 ecx
  00544	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 173  : 	// add the column to the list control...
; 174  : 	InsertColumn ( m_nColumnCount, pTitle, nFormat, nWidth );

  00547	6a ff		 push	 -1
  00549	8b 45 0c	 mov	 eax, DWORD PTR _nWidth$[ebp]
  0054c	50		 push	 eax
  0054d	8b 4d 10	 mov	 ecx, DWORD PTR _nFormat$[ebp]
  00550	51		 push	 ecx
  00551	8b 55 08	 mov	 edx, DWORD PTR _pTitle$[ebp]
  00554	52		 push	 edx
  00555	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00558	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0055b	51		 push	 ecx
  0055c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0055f	e8 00 00 00 00	 call	 ?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z ; CListCtrl::InsertColumn

; 175  : 	m_nColumnCount++;

  00564	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00567	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  0056a	83 c0 01	 add	 eax, 1
  0056d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00570	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 176  : 
; 177  : 	return TRUE;

  00573	b8 01 00 00 00	 mov	 eax, 1

; 178  : }

  00578	8b e5		 mov	 esp, ebp
  0057a	5d		 pop	 ebp
  0057b	c2 0c 00	 ret	 12			; 0000000cH
?AddColumn@CSkinListCtrl@@QAEHPADHH@Z ENDP		; CSkinListCtrl::AddColumn
_TEXT	ENDS
PUBLIC	?AddLine@CSkinListCtrl@@QAAHHHZZ		; CSkinListCtrl::AddLine
PUBLIC	?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
PUBLIC	?InsertItem@CSkinListCtrl@@QAEHIHPBDIIHJ@Z	; CSkinListCtrl::InsertItem
PUBLIC	?GetItemCount@CListCtrl@@QBEHXZ			; CListCtrl::GetItemCount
PUBLIC	?GetStringWidth@CListCtrl@@QBEHPBD@Z		; CListCtrl::GetStringWidth
PUBLIC	?GetColumnWidth@CListCtrl@@QBEHH@Z		; CListCtrl::GetColumnWidth
PUBLIC	?setFriend@CListData@@QAEXH@Z			; CListData::setFriend
PUBLIC	?getTrueIndex@CListData@@QAEHXZ			; CListData::getTrueIndex
PUBLIC	?setTrueIndex@CListData@@QAEXH@Z		; CListData::setTrueIndex
EXTRN	?SetItem@CListCtrl@@QAEHHHIPBDHIIJ@Z:NEAR	; CListCtrl::SetItem
EXTRN	_strlen:NEAR
EXTRN	__imp__strncpy:NEAR
_TEXT	SEGMENT
_nItemData$ = 12
_nEntries$ = 16
_this$ = 8
_szTemp$ = -264
_nCount$ = -280
_args$ = -8
_pStr$ = -276
_pStr2$ = -272
_nLen$ = -296
_nCW$ = -284
_nSW$ = -292
_pPos$145733 = -308
_nInsertItem$ = -288
_nNewTrueIndex$ = -304
_pDataPrev$ = -4
_pData1$ = -268
_nInsertItem2$145746 = -312
_pData2$145747 = -316
_nSubItem$ = -300
?AddLine@CSkinListCtrl@@QAAHHHZZ PROC NEAR		; CSkinListCtrl::AddLine

; 183  : {

  0057e	55		 push	 ebp
  0057f	8b ec		 mov	 ebp, esp
  00581	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00587	56		 push	 esi

; 184  :     char szTemp[256];
; 185  :     int nCount = GetItemCount();

  00588	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0058b	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00590	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _nCount$[ebp], eax

; 186  : 	va_list args;
; 187  : 	va_start ( args, nEntries );

  00596	8d 45 14	 lea	 eax, DWORD PTR _nEntries$[ebp+4]
  00599	89 45 f8	 mov	 DWORD PTR _args$[ebp], eax

; 188  : 
; 189  :     // Copy Title to temp buffer
; 190  :     strncpy( szTemp, va_arg ( args, char * ), 255 );

  0059c	68 ff 00 00 00	 push	 255			; 000000ffH
  005a1	8b 4d f8	 mov	 ecx, DWORD PTR _args$[ebp]
  005a4	83 c1 04	 add	 ecx, 4
  005a7	89 4d f8	 mov	 DWORD PTR _args$[ebp], ecx
  005aa	8b 55 f8	 mov	 edx, DWORD PTR _args$[ebp]
  005ad	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  005b0	50		 push	 eax
  005b1	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  005b7	51		 push	 ecx
  005b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  005be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 191  :     szTemp[255] = 0;

  005c1	c6 45 f7 00	 mov	 BYTE PTR _szTemp$[ebp+255], 0

; 192  : 
; 193  : 	char *pStr  = szTemp;

  005c5	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$[ebp]
  005cb	89 95 ec fe ff
	ff		 mov	 DWORD PTR _pStr$[ebp], edx

; 194  :     char *pStr2 = NULL;

  005d1	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pStr2$[ebp], 0

; 195  :     int nLen = strlen(pStr);

  005db	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _pStr$[ebp]
  005e1	50		 push	 eax
  005e2	e8 00 00 00 00	 call	 _strlen
  005e7	83 c4 04	 add	 esp, 4
  005ea	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _nLen$[ebp], eax

; 196  :     int nCW = GetColumnWidth(0);

  005f0	6a 00		 push	 0
  005f2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  005f5	e8 00 00 00 00	 call	 ?GetColumnWidth@CListCtrl@@QBEHH@Z ; CListCtrl::GetColumnWidth
  005fa	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _nCW$[ebp], eax

; 197  :     int nSW = GetStringWidth(pStr);

  00600	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _pStr$[ebp]
  00606	51		 push	 ecx
  00607	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0060a	e8 00 00 00 00	 call	 ?GetStringWidth@CListCtrl@@QBEHPBD@Z ; CListCtrl::GetStringWidth
  0060f	89 85 dc fe ff
	ff		 mov	 DWORD PTR _nSW$[ebp], eax

; 198  : 
; 199  :     // work out cut for 1st and 2nd line ???
; 200  :     if ( m_bDoubleLine && nCW-10 < nSW && nLen > 2 )

  00615	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00618	83 ba 94 00 00
	00 00		 cmp	 DWORD PTR [edx+148], 0
  0061f	0f 84 aa 00 00
	00		 je	 $L145736
  00625	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _nCW$[ebp]
  0062b	83 e8 0a	 sub	 eax, 10			; 0000000aH
  0062e	3b 85 dc fe ff
	ff		 cmp	 eax, DWORD PTR _nSW$[ebp]
  00634	0f 8d 95 00 00
	00		 jge	 $L145736
  0063a	83 bd d8 fe ff
	ff 02		 cmp	 DWORD PTR _nLen$[ebp], 2
  00641	0f 8e 88 00 00
	00		 jle	 $L145736

; 202  :         char *pPos = &pStr[nLen-2];

  00647	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _nLen$[ebp]
  0064d	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _pStr$[ebp]
  00653	8d 44 0a fe	 lea	 eax, DWORD PTR [edx+ecx-2]
  00657	89 85 cc fe ff
	ff		 mov	 DWORD PTR _pPos$145733[ebp], eax
$L145735:

; 203  : 
; 204  :         // skip to sentence that fits
; 205  :         while (pPos > pStr)

  0065d	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _pPos$145733[ebp]
  00663	3b 8d ec fe ff
	ff		 cmp	 ecx, DWORD PTR _pStr$[ebp]
  00669	76 64		 jbe	 SHORT $L145736

; 207  :             if (*pPos == ' ')

  0066b	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _pPos$145733[ebp]
  00671	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00674	83 f8 20	 cmp	 eax, 32			; 00000020H
  00677	75 45		 jne	 SHORT $L145739

; 209  :                 *pPos = 0;

  00679	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _pPos$145733[ebp]
  0067f	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 210  : 
; 211  :                 if ( GetStringWidth(pStr) < GetColumnWidth(0)-10 )

  00682	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _pStr$[ebp]
  00688	52		 push	 edx
  00689	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0068c	e8 00 00 00 00	 call	 ?GetStringWidth@CListCtrl@@QBEHPBD@Z ; CListCtrl::GetStringWidth
  00691	8b f0		 mov	 esi, eax
  00693	6a 00		 push	 0
  00695	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00698	e8 00 00 00 00	 call	 ?GetColumnWidth@CListCtrl@@QBEHH@Z ; CListCtrl::GetColumnWidth
  0069d	83 e8 0a	 sub	 eax, 10			; 0000000aH
  006a0	3b f0		 cmp	 esi, eax
  006a2	7d 11		 jge	 SHORT $L145738

; 213  :                     pStr2 = pPos+1;

  006a4	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _pPos$145733[ebp]
  006aa	83 c0 01	 add	 eax, 1
  006ad	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _pStr2$[ebp], eax

; 214  :                     break;

  006b3	eb 1a		 jmp	 SHORT $L145736
$L145738:

; 218  :                     *pPos = ' ';

  006b5	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _pPos$145733[ebp]
  006bb	c6 01 20	 mov	 BYTE PTR [ecx], 32	; 00000020H
$L145739:

; 221  : 
; 222  :             pPos--;

  006be	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _pPos$145733[ebp]
  006c4	83 ea 01	 sub	 edx, 1
  006c7	89 95 cc fe ff
	ff		 mov	 DWORD PTR _pPos$145733[ebp], edx

; 223  :         }

  006cd	eb 8e		 jmp	 SHORT $L145735
$L145736:

; 225  : 
; 226  : 	int nInsertItem = InsertItem ( LVIF_TEXT | LVIF_PARAM, nCount, pStr, 0, 0, 0, nItemData );

  006cf	8b 45 0c	 mov	 eax, DWORD PTR _nItemData$[ebp]
  006d2	50		 push	 eax
  006d3	6a 00		 push	 0
  006d5	6a 00		 push	 0
  006d7	6a 00		 push	 0
  006d9	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _pStr$[ebp]
  006df	51		 push	 ecx
  006e0	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _nCount$[ebp]
  006e6	52		 push	 edx
  006e7	6a 05		 push	 5
  006e9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  006ec	e8 00 00 00 00	 call	 ?InsertItem@CSkinListCtrl@@QAEHIHPBDIIHJ@Z ; CSkinListCtrl::InsertItem
  006f1	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _nInsertItem$[ebp], eax

; 227  :     int nNewTrueIndex = nInsertItem;

  006f7	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _nInsertItem$[ebp]
  006fd	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _nNewTrueIndex$[ebp], eax

; 228  :     CListData *pDataPrev = GetListData( nInsertItem-1  );

  00703	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _nInsertItem$[ebp]
  00709	83 e9 01	 sub	 ecx, 1
  0070c	51		 push	 ecx
  0070d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00710	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  00715	89 45 fc	 mov	 DWORD PTR _pDataPrev$[ebp], eax

; 229  :     CListData *pData1    = GetListData( nInsertItem  );

  00718	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _nInsertItem$[ebp]
  0071e	52		 push	 edx
  0071f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00722	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  00727	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _pData1$[ebp], eax

; 230  : 	nEntries--;

  0072d	8b 45 10	 mov	 eax, DWORD PTR _nEntries$[ebp]
  00730	83 e8 01	 sub	 eax, 1
  00733	89 45 10	 mov	 DWORD PTR _nEntries$[ebp], eax

; 231  : 
; 232  :     if ( pDataPrev && nInsertItem > 0 )

  00736	83 7d fc 00	 cmp	 DWORD PTR _pDataPrev$[ebp], 0
  0073a	74 1a		 je	 SHORT $L145744
  0073c	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _nInsertItem$[ebp], 0
  00743	7e 11		 jle	 SHORT $L145744

; 233  :         nNewTrueIndex = pDataPrev->getTrueIndex() + 1;

  00745	8b 4d fc	 mov	 ecx, DWORD PTR _pDataPrev$[ebp]
  00748	e8 00 00 00 00	 call	 ?getTrueIndex@CListData@@QAEHXZ ; CListData::getTrueIndex
  0074d	83 c0 01	 add	 eax, 1
  00750	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _nNewTrueIndex$[ebp], eax
$L145744:

; 234  : 
; 235  :     pData1->setTrueIndex( nNewTrueIndex );

  00756	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _nNewTrueIndex$[ebp]
  0075c	51		 push	 ecx
  0075d	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _pData1$[ebp]
  00763	e8 00 00 00 00	 call	 ?setTrueIndex@CListData@@QAEXH@Z ; CListData::setTrueIndex

; 236  : 
; 237  :     // Double line list type - careful!!! not all list ordering functions work and may screw up indexing
; 238  :     if ( m_bDoubleLine && pStr2 )

  00768	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0076b	83 ba 94 00 00
	00 00		 cmp	 DWORD PTR [edx+148], 0
  00772	74 7f		 je	 SHORT $L145745
  00774	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _pStr2$[ebp], 0
  0077b	74 76		 je	 SHORT $L145745

; 240  :         // Add 2nd line
; 241  :         int nInsertItem2 = InsertItem ( LVIF_TEXT | LVIF_PARAM, nCount+1, pStr2, 0, 0, 0, nItemData );

  0077d	8b 45 0c	 mov	 eax, DWORD PTR _nItemData$[ebp]
  00780	50		 push	 eax
  00781	6a 00		 push	 0
  00783	6a 00		 push	 0
  00785	6a 00		 push	 0
  00787	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _pStr2$[ebp]
  0078d	51		 push	 ecx
  0078e	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _nCount$[ebp]
  00794	83 c2 01	 add	 edx, 1
  00797	52		 push	 edx
  00798	6a 05		 push	 5
  0079a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0079d	e8 00 00 00 00	 call	 ?InsertItem@CSkinListCtrl@@QAEHIHPBDIIHJ@Z ; CSkinListCtrl::InsertItem
  007a2	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _nInsertItem2$145746[ebp], eax

; 242  :         CListData *pData2    = GetListData( nInsertItem2 );

  007a8	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _nInsertItem2$145746[ebp]
  007ae	50		 push	 eax
  007af	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  007b2	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  007b7	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _pData2$145747[ebp], eax

; 243  :     
; 244  :         // Tell each entry what the other one is
; 245  :         pData1->setFriend( nInsertItem2 );

  007bd	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _nInsertItem2$145746[ebp]
  007c3	51		 push	 ecx
  007c4	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _pData1$[ebp]
  007ca	e8 00 00 00 00	 call	 ?setFriend@CListData@@QAEXH@Z ; CListData::setFriend

; 246  :         pData2->setFriend( nInsertItem  );

  007cf	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _nInsertItem$[ebp]
  007d5	52		 push	 edx
  007d6	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _pData2$145747[ebp]
  007dc	e8 00 00 00 00	 call	 ?setFriend@CListData@@QAEXH@Z ; CListData::setFriend

; 247  : 
; 248  :         pData2->setTrueIndex( nNewTrueIndex );

  007e1	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _nNewTrueIndex$[ebp]
  007e7	50		 push	 eax
  007e8	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _pData2$145747[ebp]
  007ee	e8 00 00 00 00	 call	 ?setTrueIndex@CListData@@QAEXH@Z ; CListData::setTrueIndex
$L145745:

; 250  : 
; 251  : 	int nSubItem = 1;

  007f3	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _nSubItem$[ebp], 1
$L145750:

; 252  : 
; 253  : 	while ( nEntries ) {

  007fd	83 7d 10 00	 cmp	 DWORD PTR _nEntries$[ebp], 0
  00801	74 56		 je	 SHORT $L145751

; 254  : 		pStr = va_arg ( args, char * );

  00803	8b 4d f8	 mov	 ecx, DWORD PTR _args$[ebp]
  00806	83 c1 04	 add	 ecx, 4
  00809	89 4d f8	 mov	 DWORD PTR _args$[ebp], ecx
  0080c	8b 55 f8	 mov	 edx, DWORD PTR _args$[ebp]
  0080f	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00812	89 85 ec fe ff
	ff		 mov	 DWORD PTR _pStr$[ebp], eax

; 255  : 		SetItem ( nInsertItem, nSubItem, LVIF_TEXT, pStr, 0, 0, 0, 0 );

  00818	6a 00		 push	 0
  0081a	6a 00		 push	 0
  0081c	6a 00		 push	 0
  0081e	6a 00		 push	 0
  00820	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _pStr$[ebp]
  00826	51		 push	 ecx
  00827	6a 01		 push	 1
  00829	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _nSubItem$[ebp]
  0082f	52		 push	 edx
  00830	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _nInsertItem$[ebp]
  00836	50		 push	 eax
  00837	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0083a	e8 00 00 00 00	 call	 ?SetItem@CListCtrl@@QAEHHHIPBDHIIJ@Z ; CListCtrl::SetItem

; 256  : 		nEntries--;

  0083f	8b 4d 10	 mov	 ecx, DWORD PTR _nEntries$[ebp]
  00842	83 e9 01	 sub	 ecx, 1
  00845	89 4d 10	 mov	 DWORD PTR _nEntries$[ebp], ecx

; 257  : 		nSubItem++;

  00848	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _nSubItem$[ebp]
  0084e	83 c2 01	 add	 edx, 1
  00851	89 95 d4 fe ff
	ff		 mov	 DWORD PTR _nSubItem$[ebp], edx

; 258  : 	}

  00857	eb a4		 jmp	 SHORT $L145750
$L145751:

; 259  : 
; 260  : 	if ( m_pBar ) {

  00859	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0085c	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00860	74 1a		 je	 SHORT $L145759

; 261  : 		SetRange( 0, GetItemCount() );

  00862	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00865	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  0086a	50		 push	 eax
  0086b	6a 00		 push	 0
  0086d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00870	83 c1 54	 add	 ecx, 84			; 00000054H
  00873	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00876	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00879	ff 50 10	 call	 DWORD PTR [eax+16]
$L145759:

; 263  : 
; 264  : 	return TRUE;

  0087c	b8 01 00 00 00	 mov	 eax, 1

; 265  : }

  00881	5e		 pop	 esi
  00882	8b e5		 mov	 esp, ebp
  00884	5d		 pop	 ebp
  00885	c3		 ret	 0
?AddLine@CSkinListCtrl@@QAAHHHZZ ENDP			; CSkinListCtrl::AddLine
_TEXT	ENDS
PUBLIC	?AddImageLine@CSkinListCtrl@@QAAHHHHZZ		; CSkinListCtrl::AddImageLine
_TEXT	SEGMENT
_nItemData$ = 12
_nImage$ = 16
_nEntries$ = 20
_this$ = 8
_nCount$ = -12
_args$ = -4
_pStr$ = -8
_nInsertItem$ = -16
_nSubItem$ = -20
?AddImageLine@CSkinListCtrl@@QAAHHHHZZ PROC NEAR	; CSkinListCtrl::AddImageLine

; 269  : {

  00886	55		 push	 ebp
  00887	8b ec		 mov	 ebp, esp
  00889	83 ec 14	 sub	 esp, 20			; 00000014H

; 270  :     int nCount = GetItemCount();

  0088c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0088f	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00894	89 45 f4	 mov	 DWORD PTR _nCount$[ebp], eax

; 271  : 	va_list args;
; 272  : 	va_start ( args, nEntries );

  00897	8d 45 18	 lea	 eax, DWORD PTR _nEntries$[ebp+4]
  0089a	89 45 fc	 mov	 DWORD PTR _args$[ebp], eax

; 273  : 
; 274  : 	char *pStr = va_arg ( args, char * );

  0089d	8b 4d fc	 mov	 ecx, DWORD PTR _args$[ebp]
  008a0	83 c1 04	 add	 ecx, 4
  008a3	89 4d fc	 mov	 DWORD PTR _args$[ebp], ecx
  008a6	8b 55 fc	 mov	 edx, DWORD PTR _args$[ebp]
  008a9	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  008ac	89 45 f8	 mov	 DWORD PTR _pStr$[ebp], eax

; 275  : 	int nInsertItem = InsertItem ( LVIF_TEXT | LVIF_PARAM | LVIF_IMAGE, nCount, pStr, 0, 0, nImage, nItemData );

  008af	8b 4d 0c	 mov	 ecx, DWORD PTR _nItemData$[ebp]
  008b2	51		 push	 ecx
  008b3	8b 55 10	 mov	 edx, DWORD PTR _nImage$[ebp]
  008b6	52		 push	 edx
  008b7	6a 00		 push	 0
  008b9	6a 00		 push	 0
  008bb	8b 45 f8	 mov	 eax, DWORD PTR _pStr$[ebp]
  008be	50		 push	 eax
  008bf	8b 4d f4	 mov	 ecx, DWORD PTR _nCount$[ebp]
  008c2	51		 push	 ecx
  008c3	6a 07		 push	 7
  008c5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  008c8	e8 00 00 00 00	 call	 ?InsertItem@CSkinListCtrl@@QAEHIHPBDIIHJ@Z ; CSkinListCtrl::InsertItem
  008cd	89 45 f0	 mov	 DWORD PTR _nInsertItem$[ebp], eax

; 276  : 	nEntries--;

  008d0	8b 55 14	 mov	 edx, DWORD PTR _nEntries$[ebp]
  008d3	83 ea 01	 sub	 edx, 1
  008d6	89 55 14	 mov	 DWORD PTR _nEntries$[ebp], edx

; 277  : 
; 278  :     GetListData(nCount)->setFriend( LIST_NOFRIEND );

  008d9	6a ff		 push	 -1
  008db	8b 45 f4	 mov	 eax, DWORD PTR _nCount$[ebp]
  008de	50		 push	 eax
  008df	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  008e2	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  008e7	8b c8		 mov	 ecx, eax
  008e9	e8 00 00 00 00	 call	 ?setFriend@CListData@@QAEXH@Z ; CListData::setFriend

; 279  : 
; 280  : 	int nSubItem = 1;

  008ee	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _nSubItem$[ebp], 1
$L145783:

; 281  : 
; 282  : 	while ( nEntries ) {

  008f5	83 7d 14 00	 cmp	 DWORD PTR _nEntries$[ebp], 0
  008f9	74 44		 je	 SHORT $L145784

; 283  : 		pStr = va_arg ( args, char * );

  008fb	8b 4d fc	 mov	 ecx, DWORD PTR _args$[ebp]
  008fe	83 c1 04	 add	 ecx, 4
  00901	89 4d fc	 mov	 DWORD PTR _args$[ebp], ecx
  00904	8b 55 fc	 mov	 edx, DWORD PTR _args$[ebp]
  00907	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  0090a	89 45 f8	 mov	 DWORD PTR _pStr$[ebp], eax

; 284  : 		SetItem ( nInsertItem, nSubItem, LVIF_TEXT, pStr, 0, 0, 0, 0 );

  0090d	6a 00		 push	 0
  0090f	6a 00		 push	 0
  00911	6a 00		 push	 0
  00913	6a 00		 push	 0
  00915	8b 4d f8	 mov	 ecx, DWORD PTR _pStr$[ebp]
  00918	51		 push	 ecx
  00919	6a 01		 push	 1
  0091b	8b 55 ec	 mov	 edx, DWORD PTR _nSubItem$[ebp]
  0091e	52		 push	 edx
  0091f	8b 45 f0	 mov	 eax, DWORD PTR _nInsertItem$[ebp]
  00922	50		 push	 eax
  00923	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00926	e8 00 00 00 00	 call	 ?SetItem@CListCtrl@@QAEHHHIPBDHIIJ@Z ; CListCtrl::SetItem

; 285  : 		nEntries--;

  0092b	8b 4d 14	 mov	 ecx, DWORD PTR _nEntries$[ebp]
  0092e	83 e9 01	 sub	 ecx, 1
  00931	89 4d 14	 mov	 DWORD PTR _nEntries$[ebp], ecx

; 286  : 		nSubItem++;

  00934	8b 55 ec	 mov	 edx, DWORD PTR _nSubItem$[ebp]
  00937	83 c2 01	 add	 edx, 1
  0093a	89 55 ec	 mov	 DWORD PTR _nSubItem$[ebp], edx

; 287  : 	}

  0093d	eb b6		 jmp	 SHORT $L145783
$L145784:

; 288  : 
; 289  : 	if ( m_pBar ) {

  0093f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00942	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00946	74 1a		 je	 SHORT $L145792

; 290  : 		SetRange( 0, GetItemCount() );

  00948	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0094b	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00950	50		 push	 eax
  00951	6a 00		 push	 0
  00953	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00956	83 c1 54	 add	 ecx, 84			; 00000054H
  00959	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0095c	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0095f	ff 50 10	 call	 DWORD PTR [eax+16]
$L145792:

; 292  : 
; 293  : 	return TRUE;

  00962	b8 01 00 00 00	 mov	 eax, 1

; 294  : }

  00967	8b e5		 mov	 esp, ebp
  00969	5d		 pop	 ebp
  0096a	c3		 ret	 0
?AddImageLine@CSkinListCtrl@@QAAHHHHZZ ENDP		; CSkinListCtrl::AddImageLine
_TEXT	ENDS
PUBLIC	?AddIndentedLine@CSkinListCtrl@@QAAHHHHZZ	; CSkinListCtrl::AddIndentedLine
PUBLIC	?InsertItem@CSkinListCtrl@@QAEHPBUtagLVITEMA@@@Z ; CSkinListCtrl::InsertItem
_TEXT	SEGMENT
_nIndent$ = 12
_nItemData$ = 16
_nEntries$ = 20
_this$ = 8
_nCount$ = -52
_args$ = -4
_pStr$ = -48
_item$ = -44
_nInsertItem$ = -56
_nSubItem$ = -60
?AddIndentedLine@CSkinListCtrl@@QAAHHHHZZ PROC NEAR	; CSkinListCtrl::AddIndentedLine

; 298  : {

  0096b	55		 push	 ebp
  0096c	8b ec		 mov	 ebp, esp
  0096e	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 299  :     int nCount = GetItemCount();

  00971	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00974	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00979	89 45 cc	 mov	 DWORD PTR _nCount$[ebp], eax

; 300  : 	va_list args;
; 301  : 	va_start ( args, nEntries );

  0097c	8d 45 18	 lea	 eax, DWORD PTR _nEntries$[ebp+4]
  0097f	89 45 fc	 mov	 DWORD PTR _args$[ebp], eax

; 302  : 
; 303  : 	char *pStr = va_arg ( args, char * );

  00982	8b 4d fc	 mov	 ecx, DWORD PTR _args$[ebp]
  00985	83 c1 04	 add	 ecx, 4
  00988	89 4d fc	 mov	 DWORD PTR _args$[ebp], ecx
  0098b	8b 55 fc	 mov	 edx, DWORD PTR _args$[ebp]
  0098e	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00991	89 45 d0	 mov	 DWORD PTR _pStr$[ebp], eax

; 304  : 
; 305  : 	LVITEM item;
; 306  : 
; 307  : 	item.mask = LVIF_TEXT | LVIF_PARAM | LVIF_INDENT;

  00994	c7 45 d4 15 00
	00 00		 mov	 DWORD PTR _item$[ebp], 21 ; 00000015H

; 308  : 	item.iItem = nCount;

  0099b	8b 4d cc	 mov	 ecx, DWORD PTR _nCount$[ebp]
  0099e	89 4d d8	 mov	 DWORD PTR _item$[ebp+4], ecx

; 309  : 	item.iSubItem = 0;

  009a1	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _item$[ebp+8], 0

; 310  : 	item.state = 0;

  009a8	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _item$[ebp+12], 0

; 311  : 	item.stateMask = 0;

  009af	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _item$[ebp+16], 0

; 312  : 	item.pszText = pStr;

  009b6	8b 55 d0	 mov	 edx, DWORD PTR _pStr$[ebp]
  009b9	89 55 e8	 mov	 DWORD PTR _item$[ebp+20], edx

; 313  : 	item.iImage = 0;

  009bc	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _item$[ebp+28], 0

; 314  : 	item.lParam = nItemData;

  009c3	8b 45 10	 mov	 eax, DWORD PTR _nItemData$[ebp]
  009c6	89 45 f4	 mov	 DWORD PTR _item$[ebp+32], eax

; 315  : 	item.iIndent = nIndent;

  009c9	8b 4d 0c	 mov	 ecx, DWORD PTR _nIndent$[ebp]
  009cc	89 4d f8	 mov	 DWORD PTR _item$[ebp+36], ecx

; 316  : 
; 317  : 	int nInsertItem = InsertItem ( &item );

  009cf	8d 55 d4	 lea	 edx, DWORD PTR _item$[ebp]
  009d2	52		 push	 edx
  009d3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  009d6	e8 00 00 00 00	 call	 ?InsertItem@CSkinListCtrl@@QAEHPBUtagLVITEMA@@@Z ; CSkinListCtrl::InsertItem
  009db	89 45 c8	 mov	 DWORD PTR _nInsertItem$[ebp], eax

; 318  : 	nEntries--;

  009de	8b 45 14	 mov	 eax, DWORD PTR _nEntries$[ebp]
  009e1	83 e8 01	 sub	 eax, 1
  009e4	89 45 14	 mov	 DWORD PTR _nEntries$[ebp], eax

; 319  : 
; 320  :     GetListData(nCount)->setFriend( LIST_NOFRIEND );

  009e7	6a ff		 push	 -1
  009e9	8b 4d cc	 mov	 ecx, DWORD PTR _nCount$[ebp]
  009ec	51		 push	 ecx
  009ed	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  009f0	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  009f5	8b c8		 mov	 ecx, eax
  009f7	e8 00 00 00 00	 call	 ?setFriend@CListData@@QAEXH@Z ; CListData::setFriend

; 321  : 
; 322  : 	int nSubItem = 1;

  009fc	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _nSubItem$[ebp], 1
$L145817:

; 323  : 
; 324  : 	while ( nEntries ) {

  00a03	83 7d 14 00	 cmp	 DWORD PTR _nEntries$[ebp], 0
  00a07	74 44		 je	 SHORT $L145818

; 325  : 		pStr = va_arg ( args, char * );

  00a09	8b 55 fc	 mov	 edx, DWORD PTR _args$[ebp]
  00a0c	83 c2 04	 add	 edx, 4
  00a0f	89 55 fc	 mov	 DWORD PTR _args$[ebp], edx
  00a12	8b 45 fc	 mov	 eax, DWORD PTR _args$[ebp]
  00a15	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00a18	89 4d d0	 mov	 DWORD PTR _pStr$[ebp], ecx

; 326  : 		SetItem ( nInsertItem, nSubItem, LVIF_TEXT, pStr, 0, 0, 0, 0 );

  00a1b	6a 00		 push	 0
  00a1d	6a 00		 push	 0
  00a1f	6a 00		 push	 0
  00a21	6a 00		 push	 0
  00a23	8b 55 d0	 mov	 edx, DWORD PTR _pStr$[ebp]
  00a26	52		 push	 edx
  00a27	6a 01		 push	 1
  00a29	8b 45 c4	 mov	 eax, DWORD PTR _nSubItem$[ebp]
  00a2c	50		 push	 eax
  00a2d	8b 4d c8	 mov	 ecx, DWORD PTR _nInsertItem$[ebp]
  00a30	51		 push	 ecx
  00a31	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00a34	e8 00 00 00 00	 call	 ?SetItem@CListCtrl@@QAEHHHIPBDHIIJ@Z ; CListCtrl::SetItem

; 327  : 		nEntries--;

  00a39	8b 55 14	 mov	 edx, DWORD PTR _nEntries$[ebp]
  00a3c	83 ea 01	 sub	 edx, 1
  00a3f	89 55 14	 mov	 DWORD PTR _nEntries$[ebp], edx

; 328  : 		nSubItem++;

  00a42	8b 45 c4	 mov	 eax, DWORD PTR _nSubItem$[ebp]
  00a45	83 c0 01	 add	 eax, 1
  00a48	89 45 c4	 mov	 DWORD PTR _nSubItem$[ebp], eax

; 329  : 	}

  00a4b	eb b6		 jmp	 SHORT $L145817
$L145818:

; 330  : 
; 331  : 	if ( m_pBar ) {

  00a4d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00a50	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00a54	74 1a		 je	 SHORT $L145826

; 332  : 		SetRange( 0, GetItemCount() );

  00a56	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00a59	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00a5e	50		 push	 eax
  00a5f	6a 00		 push	 0
  00a61	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00a64	83 c1 54	 add	 ecx, 84			; 00000054H
  00a67	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00a6a	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00a6d	ff 50 10	 call	 DWORD PTR [eax+16]
$L145826:

; 334  : 
; 335  : 	return TRUE;

  00a70	b8 01 00 00 00	 mov	 eax, 1

; 336  : }

  00a75	8b e5		 mov	 esp, ebp
  00a77	5d		 pop	 ebp
  00a78	c3		 ret	 0
?AddIndentedLine@CSkinListCtrl@@QAAHHHHZZ ENDP		; CSkinListCtrl::AddIndentedLine
_TEXT	ENDS
PUBLIC	?push_back@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXABQAVCListData@@@Z ; std::list<CListData *,std::allocator<CListData *> >::push_back
PUBLIC	?insert@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCListData@@@Z ; std::list<CListData *,std::allocator<CListData *> >::insert
PUBLIC	?InsertListData@CSkinListCtrl@@IAEHHPAVCListData@@@Z ; CSkinListCtrl::InsertListData
PUBLIC	?getFriend@CListData@@QAEHXZ			; CListData::getFriend
PUBLIC	??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator
PUBLIC	??Diterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEAAPAVCListData@@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator*
PUBLIC	??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++
PUBLIC	??9iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator!=
PUBLIC	?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::begin
PUBLIC	?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::end
_TEXT	SEGMENT
_nItem$ = 8
_pInsert$ = 12
_this$ = -32
_it$ = -8
_nCount$ = -4
_pData$145842 = -12
$T151526 = -16
$T151527 = -20
$T151528 = -24
$T151529 = -28
?InsertListData@CSkinListCtrl@@IAEHHPAVCListData@@@Z PROC NEAR ; CSkinListCtrl::InsertListData

; 340  : {

  00a79	55		 push	 ebp
  00a7a	8b ec		 mov	 ebp, esp
  00a7c	83 ec 20	 sub	 esp, 32			; 00000020H
  00a7f	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 341  : 	// step through all data entries
; 342  : 	ListDataIT::iterator it;

  00a82	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00a85	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator

; 343  :     int nCount = 0;

  00a8a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nCount$[ebp], 0

; 344  : 
; 345  :     if (nItem < 0 || nItem >= GetItemCount())

  00a91	83 7d 08 00	 cmp	 DWORD PTR _nItem$[ebp], 0
  00a95	7c 0d		 jl	 SHORT $L145835
  00a97	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00a9a	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00a9f	39 45 08	 cmp	 DWORD PTR _nItem$[ebp], eax
  00aa2	7c 1c		 jl	 SHORT $L145834
$L145835:

; 347  :         m_ListData.push_back( pInsert );

  00aa4	8d 45 0c	 lea	 eax, DWORD PTR _pInsert$[ebp]
  00aa7	50		 push	 eax
  00aa8	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00aab	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00ab1	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXABQAVCListData@@@Z ; std::list<CListData *,std::allocator<CListData *> >::push_back

; 348  :         return TRUE;

  00ab6	b8 01 00 00 00	 mov	 eax, 1
  00abb	e9 c7 00 00 00	 jmp	 $L145831
$L145834:

; 350  : 
; 351  : 	for ( it=m_ListData.begin(); it!=m_ListData.end(); it++ ) 

  00ac0	8d 4d f0	 lea	 ecx, DWORD PTR $T151526[ebp]
  00ac3	51		 push	 ecx
  00ac4	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ac7	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00acd	e8 00 00 00 00	 call	 ?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::begin
  00ad2	8b 10		 mov	 edx, DWORD PTR [eax]
  00ad4	89 55 f8	 mov	 DWORD PTR _it$[ebp], edx
  00ad7	eb 0e		 jmp	 SHORT $L145839
$L145840:
  00ad9	6a 00		 push	 0
  00adb	8d 45 ec	 lea	 eax, DWORD PTR $T151527[ebp]
  00ade	50		 push	 eax
  00adf	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00ae2	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++
$L145839:
  00ae7	8d 4d e8	 lea	 ecx, DWORD PTR $T151528[ebp]
  00aea	51		 push	 ecx
  00aeb	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00aee	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00af4	e8 00 00 00 00	 call	 ?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::end
  00af9	50		 push	 eax
  00afa	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00afd	e8 00 00 00 00	 call	 ??9iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator!=
  00b02	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b07	85 c0		 test	 eax, eax
  00b09	74 7a		 je	 SHORT $L145841

; 353  :         CListData *pData = *it;

  00b0b	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00b0e	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEAAPAVCListData@@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator*
  00b13	8b 10		 mov	 edx, DWORD PTR [eax]
  00b15	89 55 f4	 mov	 DWORD PTR _pData$145842[ebp], edx

; 354  : 
; 355  :         if (nCount == nItem)

  00b18	8b 45 fc	 mov	 eax, DWORD PTR _nCount$[ebp]
  00b1b	3b 45 08	 cmp	 eax, DWORD PTR _nItem$[ebp]
  00b1e	75 1a		 jne	 SHORT $L145843

; 357  :             m_ListData.insert( it, pInsert );

  00b20	8d 4d 0c	 lea	 ecx, DWORD PTR _pInsert$[ebp]
  00b23	51		 push	 ecx
  00b24	8b 55 f8	 mov	 edx, DWORD PTR _it$[ebp]
  00b27	52		 push	 edx
  00b28	8d 45 e4	 lea	 eax, DWORD PTR $T151529[ebp]
  00b2b	50		 push	 eax
  00b2c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00b2f	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00b35	e8 00 00 00 00	 call	 ?insert@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCListData@@@Z ; std::list<CListData *,std::allocator<CListData *> >::insert
$L145843:

; 359  : 
; 360  :         if (nCount >= nItem)

  00b3a	8b 4d fc	 mov	 ecx, DWORD PTR _nCount$[ebp]
  00b3d	3b 4d 08	 cmp	 ecx, DWORD PTR _nItem$[ebp]
  00b40	7c 35		 jl	 SHORT $L145845

; 362  :             if ( pData->getFriend() != LIST_NOFRIEND )

  00b42	8b 4d f4	 mov	 ecx, DWORD PTR _pData$145842[ebp]
  00b45	e8 00 00 00 00	 call	 ?getFriend@CListData@@QAEHXZ ; CListData::getFriend
  00b4a	83 f8 ff	 cmp	 eax, -1
  00b4d	74 14		 je	 SHORT $L145846

; 363  :                 pData->setFriend( pData->getFriend()+1 );

  00b4f	8b 4d f4	 mov	 ecx, DWORD PTR _pData$145842[ebp]
  00b52	e8 00 00 00 00	 call	 ?getFriend@CListData@@QAEHXZ ; CListData::getFriend
  00b57	83 c0 01	 add	 eax, 1
  00b5a	50		 push	 eax
  00b5b	8b 4d f4	 mov	 ecx, DWORD PTR _pData$145842[ebp]
  00b5e	e8 00 00 00 00	 call	 ?setFriend@CListData@@QAEXH@Z ; CListData::setFriend
$L145846:

; 364  : 
; 365  :             pData->setTrueIndex( pData->getTrueIndex()+1 );

  00b63	8b 4d f4	 mov	 ecx, DWORD PTR _pData$145842[ebp]
  00b66	e8 00 00 00 00	 call	 ?getTrueIndex@CListData@@QAEHXZ ; CListData::getTrueIndex
  00b6b	83 c0 01	 add	 eax, 1
  00b6e	50		 push	 eax
  00b6f	8b 4d f4	 mov	 ecx, DWORD PTR _pData$145842[ebp]
  00b72	e8 00 00 00 00	 call	 ?setTrueIndex@CListData@@QAEXH@Z ; CListData::setTrueIndex
$L145845:

; 367  : 
; 368  :         nCount++;

  00b77	8b 55 fc	 mov	 edx, DWORD PTR _nCount$[ebp]
  00b7a	83 c2 01	 add	 edx, 1
  00b7d	89 55 fc	 mov	 DWORD PTR _nCount$[ebp], edx

; 369  : 	}

  00b80	e9 54 ff ff ff	 jmp	 $L145840
$L145841:

; 370  : 
; 371  :     return FALSE;

  00b85	33 c0		 xor	 eax, eax
$L145831:

; 372  : }

  00b87	8b e5		 mov	 esp, ebp
  00b89	5d		 pop	 ebp
  00b8a	c2 08 00	 ret	 8
?InsertListData@CSkinListCtrl@@IAEHHPAVCListData@@@Z ENDP ; CSkinListCtrl::InsertListData
_nItem$ = 8
_this$ = -28
_it$ = -8
_nCount$ = -4
_pData$145859 = -12
$T151531 = -16
$T151532 = -20
$T151533 = -24
?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z PROC NEAR ; CSkinListCtrl::GetListData

; 376  : {

  00b8d	55		 push	 ebp
  00b8e	8b ec		 mov	 ebp, esp
  00b90	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00b93	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 377  : 	// step through all data entries
; 378  : 	ListDataIT::iterator it;

  00b96	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00b99	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator

; 379  :     int nCount = 0;

  00b9e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nCount$[ebp], 0

; 380  : 
; 381  : 	for ( it=m_ListData.begin(); it!=m_ListData.end(); it++ ) 

  00ba5	8d 45 f0	 lea	 eax, DWORD PTR $T151531[ebp]
  00ba8	50		 push	 eax
  00ba9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00bac	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00bb2	e8 00 00 00 00	 call	 ?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::begin
  00bb7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bb9	89 4d f8	 mov	 DWORD PTR _it$[ebp], ecx
  00bbc	eb 0e		 jmp	 SHORT $L145856
$L145857:
  00bbe	6a 00		 push	 0
  00bc0	8d 55 ec	 lea	 edx, DWORD PTR $T151532[ebp]
  00bc3	52		 push	 edx
  00bc4	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00bc7	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++
$L145856:
  00bcc	8d 45 e8	 lea	 eax, DWORD PTR $T151533[ebp]
  00bcf	50		 push	 eax
  00bd0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00bd3	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00bd9	e8 00 00 00 00	 call	 ?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::end
  00bde	50		 push	 eax
  00bdf	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00be2	e8 00 00 00 00	 call	 ??9iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator!=
  00be7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00bec	85 c0		 test	 eax, eax
  00bee	74 25		 je	 SHORT $L145858

; 383  : 		CListData *pData = *it;

  00bf0	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00bf3	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEAAPAVCListData@@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator*
  00bf8	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bfa	89 4d f4	 mov	 DWORD PTR _pData$145859[ebp], ecx

; 384  : 
; 385  :         if (nCount == nItem)

  00bfd	8b 55 fc	 mov	 edx, DWORD PTR _nCount$[ebp]
  00c00	3b 55 08	 cmp	 edx, DWORD PTR _nItem$[ebp]
  00c03	75 05		 jne	 SHORT $L145860

; 386  :             return pData;

  00c05	8b 45 f4	 mov	 eax, DWORD PTR _pData$145859[ebp]
  00c08	eb 0d		 jmp	 SHORT $L145850
$L145860:

; 387  : 
; 388  :         nCount++;

  00c0a	8b 45 fc	 mov	 eax, DWORD PTR _nCount$[ebp]
  00c0d	83 c0 01	 add	 eax, 1
  00c10	89 45 fc	 mov	 DWORD PTR _nCount$[ebp], eax

; 389  : 	}

  00c13	eb a9		 jmp	 SHORT $L145857
$L145858:

; 390  : 
; 391  :     return NULL;

  00c15	33 c0		 xor	 eax, eax
$L145850:

; 392  : }

  00c17	8b e5		 mov	 esp, ebp
  00c19	5d		 pop	 ebp
  00c1a	c2 04 00	 ret	 4
?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ENDP	; CSkinListCtrl::GetListData
_TEXT	ENDS
PUBLIC	?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::list<CListData *,std::allocator<CListData *> >::erase
PUBLIC	?DeleteItem@CSkinListCtrl@@QAEHH@Z		; CSkinListCtrl::DeleteItem
PUBLIC	?DeleteItem@CListCtrl@@QAEHH@Z			; CListCtrl::DeleteItem
_TEXT	SEGMENT
_nItem$ = 8
_this$ = -36
_it$ = -8
_nCount$ = -4
_pData$145876 = -12
$T151535 = -16
$T151536 = -20
$T151537 = -24
$T151538 = -28
$T151539 = -32
?DeleteItem@CSkinListCtrl@@QAEHH@Z PROC NEAR		; CSkinListCtrl::DeleteItem

; 396  : {

  00c1d	55		 push	 ebp
  00c1e	8b ec		 mov	 ebp, esp
  00c20	83 ec 24	 sub	 esp, 36			; 00000024H
  00c23	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  :     assert(m_nListItems == GetItemCount());
; 398  :     
; 399  :     if (nItem < 0 || nItem >= GetItemCount())

  00c26	83 7d 08 00	 cmp	 DWORD PTR _nItem$[ebp], 0
  00c2a	7c 0d		 jl	 SHORT $L145867
  00c2c	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c2f	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00c34	39 45 08	 cmp	 DWORD PTR _nItem$[ebp], eax
  00c37	7c 07		 jl	 SHORT $L145866
$L145867:

; 400  :         return false;

  00c39	33 c0		 xor	 eax, eax
  00c3b	e9 ca 00 00 00	 jmp	 $L145864
$L145866:

; 401  : 
; 402  : 	// step through all data entries
; 403  : 	ListDataIT::iterator it;

  00c40	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00c43	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator

; 404  :     int nCount = 0;

  00c48	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nCount$[ebp], 0

; 405  : 
; 406  : 	for ( it=m_ListData.begin(); it!=m_ListData.end(); it++ ) 

  00c4f	8d 45 f0	 lea	 eax, DWORD PTR $T151535[ebp]
  00c52	50		 push	 eax
  00c53	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c56	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00c5c	e8 00 00 00 00	 call	 ?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::begin
  00c61	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c63	89 4d f8	 mov	 DWORD PTR _it$[ebp], ecx
  00c66	eb 0e		 jmp	 SHORT $L145873
$L145874:
  00c68	6a 00		 push	 0
  00c6a	8d 55 ec	 lea	 edx, DWORD PTR $T151536[ebp]
  00c6d	52		 push	 edx
  00c6e	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00c71	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++
$L145873:
  00c76	8d 45 e8	 lea	 eax, DWORD PTR $T151537[ebp]
  00c79	50		 push	 eax
  00c7a	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c7d	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00c83	e8 00 00 00 00	 call	 ?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::end
  00c88	50		 push	 eax
  00c89	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00c8c	e8 00 00 00 00	 call	 ??9iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator!=
  00c91	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c96	85 c0		 test	 eax, eax
  00c98	74 4a		 je	 SHORT $L145875

; 408  : 		CListData *pData = *it;

  00c9a	8d 4d f8	 lea	 ecx, DWORD PTR _it$[ebp]
  00c9d	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEAAPAVCListData@@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator*
  00ca2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ca4	89 4d f4	 mov	 DWORD PTR _pData$145876[ebp], ecx

; 409  : 
; 410  :         if (nCount == nItem)

  00ca7	8b 55 fc	 mov	 edx, DWORD PTR _nCount$[ebp]
  00caa	3b 55 08	 cmp	 edx, DWORD PTR _nItem$[ebp]
  00cad	75 2a		 jne	 SHORT $L145877

; 412  :             m_ListData.erase( it );

  00caf	8b 45 f8	 mov	 eax, DWORD PTR _it$[ebp]
  00cb2	50		 push	 eax
  00cb3	8d 4d e4	 lea	 ecx, DWORD PTR $T151538[ebp]
  00cb6	51		 push	 ecx
  00cb7	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cba	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00cc0	e8 00 00 00 00	 call	 ?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::list<CListData *,std::allocator<CListData *> >::erase

; 413  :             delete pData;

  00cc5	8b 55 f4	 mov	 edx, DWORD PTR _pData$145876[ebp]
  00cc8	89 55 e0	 mov	 DWORD PTR $T151539[ebp], edx
  00ccb	8b 45 e0	 mov	 eax, DWORD PTR $T151539[ebp]
  00cce	50		 push	 eax
  00ccf	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00cd4	83 c4 04	 add	 esp, 4

; 414  :             break;

  00cd7	eb 0b		 jmp	 SHORT $L145875
$L145877:

; 416  : 
; 417  :         nCount++;

  00cd9	8b 4d fc	 mov	 ecx, DWORD PTR _nCount$[ebp]
  00cdc	83 c1 01	 add	 ecx, 1
  00cdf	89 4d fc	 mov	 DWORD PTR _nCount$[ebp], ecx

; 418  : 	}

  00ce2	eb 84		 jmp	 SHORT $L145874
$L145875:

; 419  : 
; 420  :     m_nListItems--;

  00ce4	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00ce7	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00ced	83 e8 01	 sub	 eax, 1
  00cf0	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cf3	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 421  : 
; 422  :     CListCtrl::DeleteItem( nItem );

  00cf9	8b 55 08	 mov	 edx, DWORD PTR _nItem$[ebp]
  00cfc	52		 push	 edx
  00cfd	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d00	e8 00 00 00 00	 call	 ?DeleteItem@CListCtrl@@QAEHH@Z ; CListCtrl::DeleteItem

; 423  : 
; 424  : 	return true;

  00d05	b8 01 00 00 00	 mov	 eax, 1
$L145864:

; 425  : }

  00d0a	8b e5		 mov	 esp, ebp
  00d0c	5d		 pop	 ebp
  00d0d	c2 04 00	 ret	 4
?DeleteItem@CSkinListCtrl@@QAEHH@Z ENDP			; CSkinListCtrl::DeleteItem
_TEXT	ENDS
PUBLIC	?DeleteAllItems@CSkinListCtrl@@QAEHXZ		; CSkinListCtrl::DeleteAllItems
PUBLIC	?DeleteAllItems@CListCtrl@@QAEHXZ		; CListCtrl::DeleteAllItems
_TEXT	SEGMENT
_this$ = -12
_pData$ = -4
$T151541 = -8
?DeleteAllItems@CSkinListCtrl@@QAEHXZ PROC NEAR		; CSkinListCtrl::DeleteAllItems

; 429  : {

  00d10	55		 push	 ebp
  00d11	8b ec		 mov	 ebp, esp
  00d13	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00d16	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
$L145886:

; 430  :     assert(m_nListItems == GetItemCount());
; 431  : 
; 432  :     // Clear down our own data list
; 433  :     CListData *pData;
; 434  : 
; 435  :     while( !m_ListData.empty() )

  00d19	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00d1c	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00d22	e8 00 00 00 00	 call	 ?empty@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NXZ ; std::list<CListData *,std::allocator<CListData *> >::empty
  00d27	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d2c	85 c0		 test	 eax, eax
  00d2e	75 35		 jne	 SHORT $L145887

; 437  : 	    pData = m_ListData.front();

  00d30	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00d33	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00d39	e8 00 00 00 00	 call	 ?front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAPAVCListData@@XZ ; std::list<CListData *,std::allocator<CListData *> >::front
  00d3e	8b 00		 mov	 eax, DWORD PTR [eax]
  00d40	89 45 fc	 mov	 DWORD PTR _pData$[ebp], eax

; 438  :         m_ListData.pop_front();

  00d43	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00d46	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00d4c	e8 00 00 00 00	 call	 ?pop_front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ ; std::list<CListData *,std::allocator<CListData *> >::pop_front

; 439  :         delete pData;

  00d51	8b 4d fc	 mov	 ecx, DWORD PTR _pData$[ebp]
  00d54	89 4d f8	 mov	 DWORD PTR $T151541[ebp], ecx
  00d57	8b 55 f8	 mov	 edx, DWORD PTR $T151541[ebp]
  00d5a	52		 push	 edx
  00d5b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00d60	83 c4 04	 add	 esp, 4

; 440  :     }

  00d63	eb b4		 jmp	 SHORT $L145886
$L145887:

; 441  : 
; 442  :     m_nListItems = 0;

  00d65	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00d68	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 443  : 	m_ListData.clear();

  00d72	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00d75	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00d7b	e8 00 00 00 00	 call	 ?clear@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ ; std::list<CListData *,std::allocator<CListData *> >::clear

; 444  : 
; 445  :     return CListCtrl::DeleteAllItems();

  00d80	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00d83	e8 00 00 00 00	 call	 ?DeleteAllItems@CListCtrl@@QAEHXZ ; CListCtrl::DeleteAllItems

; 446  : }

  00d88	8b e5		 mov	 esp, ebp
  00d8a	5d		 pop	 ebp
  00d8b	c3		 ret	 0
?DeleteAllItems@CSkinListCtrl@@QAEHXZ ENDP		; CSkinListCtrl::DeleteAllItems
_TEXT	ENDS
PUBLIC	?InsertItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z	; CListCtrl::InsertItem
PUBLIC	??0CListData@@QAE@HH@Z				; CListData::CListData
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	_memcpy:NEAR
xdata$x	SEGMENT
$T151549 DD	019930520H
	DD	01H
	DD	FLAT:$T151551
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151551 DD	0ffffffffH
	DD	FLAT:$L151547
xdata$x	ENDS
_TEXT	SEGMENT
_pItem$ = 8
_this$ = -72
_pData$ = -16
_lvItem$ = -56
_nCount$ = -60
$T151543 = -64
$T151544 = -68
__$EHRec$ = -12
?InsertItem@CSkinListCtrl@@QAEHPBUtagLVITEMA@@@Z PROC NEAR ; CSkinListCtrl::InsertItem

; 450  : {

  00d8c	55		 push	 ebp
  00d8d	8b ec		 mov	 ebp, esp
  00d8f	6a ff		 push	 -1
  00d91	68 00 00 00 00	 push	 $L151550
  00d96	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00d9c	50		 push	 eax
  00d9d	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00da4	83 ec 40	 sub	 esp, 64			; 00000040H
  00da7	89 4d b8	 mov	 DWORD PTR _this$[ebp], ecx

; 451  :     CListData *pData;
; 452  :     LVITEM lvItem;
; 453  :     int nCount = GetItemCount();

  00daa	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00dad	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00db2	89 45 c4	 mov	 DWORD PTR _nCount$[ebp], eax

; 454  :     assert( m_nListItems == nCount );
; 455  : 
; 456  :     // Make a copy of the item struct
; 457  :     memcpy(&lvItem, pItem, sizeof(LVITEM));

  00db5	6a 28		 push	 40			; 00000028H
  00db7	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00dba	50		 push	 eax
  00dbb	8d 4d c8	 lea	 ecx, DWORD PTR _lvItem$[ebp]
  00dbe	51		 push	 ecx
  00dbf	e8 00 00 00 00	 call	 _memcpy
  00dc4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 458  : 
; 459  :     // Make sure wayward values are set to end of list
; 460  :     if (lvItem.iItem < 0 || lvItem.iItem > nCount )

  00dc7	83 7d cc 00	 cmp	 DWORD PTR _lvItem$[ebp+4], 0
  00dcb	7c 08		 jl	 SHORT $L145899
  00dcd	8b 55 cc	 mov	 edx, DWORD PTR _lvItem$[ebp+4]
  00dd0	3b 55 c4	 cmp	 edx, DWORD PTR _nCount$[ebp]
  00dd3	7e 06		 jle	 SHORT $L145898
$L145899:

; 461  :         lvItem.iItem = nCount;

  00dd5	8b 45 c4	 mov	 eax, DWORD PTR _nCount$[ebp]
  00dd8	89 45 cc	 mov	 DWORD PTR _lvItem$[ebp+4], eax
$L145898:

; 462  : 
; 463  :     // Create the associated data member
; 464  :     pData = new CListData( LIST_NOFRIEND, lvItem.iItem );

  00ddb	6a 0c		 push	 12			; 0000000cH
  00ddd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00de2	83 c4 04	 add	 esp, 4
  00de5	89 45 bc	 mov	 DWORD PTR $T151544[ebp], eax
  00de8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00def	83 7d bc 00	 cmp	 DWORD PTR $T151544[ebp], 0
  00df3	74 13		 je	 SHORT $L151545
  00df5	8b 4d cc	 mov	 ecx, DWORD PTR _lvItem$[ebp+4]
  00df8	51		 push	 ecx
  00df9	6a ff		 push	 -1
  00dfb	8b 4d bc	 mov	 ecx, DWORD PTR $T151544[ebp]
  00dfe	e8 00 00 00 00	 call	 ??0CListData@@QAE@HH@Z	; CListData::CListData
  00e03	89 45 b4	 mov	 DWORD PTR -76+[ebp], eax
  00e06	eb 07		 jmp	 SHORT $L151546
$L151545:
  00e08	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR -76+[ebp], 0
$L151546:
  00e0f	8b 55 b4	 mov	 edx, DWORD PTR -76+[ebp]
  00e12	89 55 c0	 mov	 DWORD PTR $T151543[ebp], edx
  00e15	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00e1c	8b 45 c0	 mov	 eax, DWORD PTR $T151543[ebp]
  00e1f	89 45 f0	 mov	 DWORD PTR _pData$[ebp], eax

; 465  :     m_nListItems++;

  00e22	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e25	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00e2b	83 c2 01	 add	 edx, 1
  00e2e	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  00e31	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 466  :     InsertListData( lvItem.iItem, pData );

  00e37	8b 4d f0	 mov	 ecx, DWORD PTR _pData$[ebp]
  00e3a	51		 push	 ecx
  00e3b	8b 55 cc	 mov	 edx, DWORD PTR _lvItem$[ebp+4]
  00e3e	52		 push	 edx
  00e3f	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e42	e8 00 00 00 00	 call	 ?InsertListData@CSkinListCtrl@@IAEHHPAVCListData@@@Z ; CSkinListCtrl::InsertListData

; 467  : 
; 468  :     return CListCtrl::InsertItem( &lvItem );

  00e47	8d 45 c8	 lea	 eax, DWORD PTR _lvItem$[ebp]
  00e4a	50		 push	 eax
  00e4b	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e4e	e8 00 00 00 00	 call	 ?InsertItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z ; CListCtrl::InsertItem

; 469  : }

  00e53	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00e56	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00e5d	8b e5		 mov	 esp, ebp
  00e5f	5d		 pop	 ebp
  00e60	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
$L151547:
  000f9	8b 45 bc	 mov	 eax, DWORD PTR $T151544[ebp]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00102	59		 pop	 ecx
  00103	c3		 ret	 0
$L151550:
  00104	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151549
  00109	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertItem@CSkinListCtrl@@QAEHPBUtagLVITEMA@@@Z ENDP	; CSkinListCtrl::InsertItem
PUBLIC	?InsertItem@CSkinListCtrl@@QAEHHPBD@Z		; CSkinListCtrl::InsertItem
PUBLIC	?InsertItem@CListCtrl@@QAEHHPBD@Z		; CListCtrl::InsertItem
xdata$x	SEGMENT
$T151559 DD	019930520H
	DD	01H
	DD	FLAT:$T151561
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151561 DD	0ffffffffH
	DD	FLAT:$L151557
xdata$x	ENDS
_TEXT	SEGMENT
$T151553 = -24
$T151554 = -28
__$EHRec$ = -12
_nItem$ = 8
_lpszItem$ = 12
_this$ = -32
_pData$ = -16
_nCount$ = -20
?InsertItem@CSkinListCtrl@@QAEHHPBD@Z PROC NEAR		; CSkinListCtrl::InsertItem

; 473  : {

  00e63	55		 push	 ebp
  00e64	8b ec		 mov	 ebp, esp
  00e66	6a ff		 push	 -1
  00e68	68 00 00 00 00	 push	 $L151560
  00e6d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00e73	50		 push	 eax
  00e74	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00e7b	83 ec 18	 sub	 esp, 24			; 00000018H
  00e7e	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 474  :     CListData *pData;
; 475  :     int nCount = GetItemCount();

  00e81	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00e84	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00e89	89 45 ec	 mov	 DWORD PTR _nCount$[ebp], eax

; 476  :     assert( m_nListItems == nCount );
; 477  : 
; 478  :     // Make sure wayward values are set to end of list
; 479  :     if (nItem < 0 || nItem > nCount )

  00e8c	83 7d 08 00	 cmp	 DWORD PTR _nItem$[ebp], 0
  00e90	7c 08		 jl	 SHORT $L145913
  00e92	8b 45 08	 mov	 eax, DWORD PTR _nItem$[ebp]
  00e95	3b 45 ec	 cmp	 eax, DWORD PTR _nCount$[ebp]
  00e98	7e 06		 jle	 SHORT $L145912
$L145913:

; 480  :         nItem = nCount;

  00e9a	8b 4d ec	 mov	 ecx, DWORD PTR _nCount$[ebp]
  00e9d	89 4d 08	 mov	 DWORD PTR _nItem$[ebp], ecx
$L145912:

; 481  : 
; 482  :     // Create the associated data member
; 483  :     pData = new CListData( LIST_NOFRIEND, nItem );

  00ea0	6a 0c		 push	 12			; 0000000cH
  00ea2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00ea7	83 c4 04	 add	 esp, 4
  00eaa	89 45 e4	 mov	 DWORD PTR $T151554[ebp], eax
  00ead	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00eb4	83 7d e4 00	 cmp	 DWORD PTR $T151554[ebp], 0
  00eb8	74 13		 je	 SHORT $L151555
  00eba	8b 55 08	 mov	 edx, DWORD PTR _nItem$[ebp]
  00ebd	52		 push	 edx
  00ebe	6a ff		 push	 -1
  00ec0	8b 4d e4	 mov	 ecx, DWORD PTR $T151554[ebp]
  00ec3	e8 00 00 00 00	 call	 ??0CListData@@QAE@HH@Z	; CListData::CListData
  00ec8	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  00ecb	eb 07		 jmp	 SHORT $L151556
$L151555:
  00ecd	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR -36+[ebp], 0
$L151556:
  00ed4	8b 45 dc	 mov	 eax, DWORD PTR -36+[ebp]
  00ed7	89 45 e8	 mov	 DWORD PTR $T151553[ebp], eax
  00eda	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00ee1	8b 4d e8	 mov	 ecx, DWORD PTR $T151553[ebp]
  00ee4	89 4d f0	 mov	 DWORD PTR _pData$[ebp], ecx

; 484  :     m_nListItems++;

  00ee7	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00eea	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00ef0	83 c0 01	 add	 eax, 1
  00ef3	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00ef6	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 485  :     InsertListData( nItem, pData );

  00efc	8b 55 f0	 mov	 edx, DWORD PTR _pData$[ebp]
  00eff	52		 push	 edx
  00f00	8b 45 08	 mov	 eax, DWORD PTR _nItem$[ebp]
  00f03	50		 push	 eax
  00f04	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f07	e8 00 00 00 00	 call	 ?InsertListData@CSkinListCtrl@@IAEHHPAVCListData@@@Z ; CSkinListCtrl::InsertListData

; 486  : 
; 487  :     return CListCtrl::InsertItem( nItem, lpszItem );

  00f0c	8b 4d 0c	 mov	 ecx, DWORD PTR _lpszItem$[ebp]
  00f0f	51		 push	 ecx
  00f10	8b 55 08	 mov	 edx, DWORD PTR _nItem$[ebp]
  00f13	52		 push	 edx
  00f14	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f17	e8 00 00 00 00	 call	 ?InsertItem@CListCtrl@@QAEHHPBD@Z ; CListCtrl::InsertItem

; 488  : }

  00f1c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00f1f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00f26	8b e5		 mov	 esp, ebp
  00f28	5d		 pop	 ebp
  00f29	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L151557:
  0010e	8b 45 e4	 mov	 eax, DWORD PTR $T151554[ebp]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00117	59		 pop	 ecx
  00118	c3		 ret	 0
$L151560:
  00119	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151559
  0011e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertItem@CSkinListCtrl@@QAEHHPBD@Z ENDP		; CSkinListCtrl::InsertItem
PUBLIC	?InsertItem@CSkinListCtrl@@QAEHHPBDH@Z		; CSkinListCtrl::InsertItem
PUBLIC	?InsertItem@CListCtrl@@QAEHHPBDH@Z		; CListCtrl::InsertItem
xdata$x	SEGMENT
$T151569 DD	019930520H
	DD	01H
	DD	FLAT:$T151571
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151571 DD	0ffffffffH
	DD	FLAT:$L151567
xdata$x	ENDS
_TEXT	SEGMENT
$T151563 = -24
$T151564 = -28
__$EHRec$ = -12
_nItem$ = 8
_lpszItem$ = 12
_nImage$ = 16
_this$ = -32
_pData$ = -16
_nCount$ = -20
?InsertItem@CSkinListCtrl@@QAEHHPBDH@Z PROC NEAR	; CSkinListCtrl::InsertItem

; 492  : {

  00f2c	55		 push	 ebp
  00f2d	8b ec		 mov	 ebp, esp
  00f2f	6a ff		 push	 -1
  00f31	68 00 00 00 00	 push	 $L151570
  00f36	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00f3c	50		 push	 eax
  00f3d	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00f44	83 ec 18	 sub	 esp, 24			; 00000018H
  00f47	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 493  :     CListData *pData;
; 494  :     int nCount = GetItemCount();

  00f4a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00f4d	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00f52	89 45 ec	 mov	 DWORD PTR _nCount$[ebp], eax

; 495  :     assert( m_nListItems == nCount );
; 496  : 
; 497  :     // Make sure wayward values are set to end of list
; 498  :     if (nItem < 0 || nItem > nCount )

  00f55	83 7d 08 00	 cmp	 DWORD PTR _nItem$[ebp], 0
  00f59	7c 08		 jl	 SHORT $L145928
  00f5b	8b 45 08	 mov	 eax, DWORD PTR _nItem$[ebp]
  00f5e	3b 45 ec	 cmp	 eax, DWORD PTR _nCount$[ebp]
  00f61	7e 06		 jle	 SHORT $L145927
$L145928:

; 499  :         nItem = nCount;

  00f63	8b 4d ec	 mov	 ecx, DWORD PTR _nCount$[ebp]
  00f66	89 4d 08	 mov	 DWORD PTR _nItem$[ebp], ecx
$L145927:

; 500  : 
; 501  :     // Create the associated data member
; 502  :     pData = new CListData( LIST_NOFRIEND , nItem );

  00f69	6a 0c		 push	 12			; 0000000cH
  00f6b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00f70	83 c4 04	 add	 esp, 4
  00f73	89 45 e4	 mov	 DWORD PTR $T151564[ebp], eax
  00f76	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00f7d	83 7d e4 00	 cmp	 DWORD PTR $T151564[ebp], 0
  00f81	74 13		 je	 SHORT $L151565
  00f83	8b 55 08	 mov	 edx, DWORD PTR _nItem$[ebp]
  00f86	52		 push	 edx
  00f87	6a ff		 push	 -1
  00f89	8b 4d e4	 mov	 ecx, DWORD PTR $T151564[ebp]
  00f8c	e8 00 00 00 00	 call	 ??0CListData@@QAE@HH@Z	; CListData::CListData
  00f91	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  00f94	eb 07		 jmp	 SHORT $L151566
$L151565:
  00f96	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR -36+[ebp], 0
$L151566:
  00f9d	8b 45 dc	 mov	 eax, DWORD PTR -36+[ebp]
  00fa0	89 45 e8	 mov	 DWORD PTR $T151563[ebp], eax
  00fa3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00faa	8b 4d e8	 mov	 ecx, DWORD PTR $T151563[ebp]
  00fad	89 4d f0	 mov	 DWORD PTR _pData$[ebp], ecx

; 503  :     m_nListItems++;

  00fb0	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00fb3	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00fb9	83 c0 01	 add	 eax, 1
  00fbc	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00fbf	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 504  :     InsertListData( nItem, pData );

  00fc5	8b 55 f0	 mov	 edx, DWORD PTR _pData$[ebp]
  00fc8	52		 push	 edx
  00fc9	8b 45 08	 mov	 eax, DWORD PTR _nItem$[ebp]
  00fcc	50		 push	 eax
  00fcd	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00fd0	e8 00 00 00 00	 call	 ?InsertListData@CSkinListCtrl@@IAEHHPAVCListData@@@Z ; CSkinListCtrl::InsertListData

; 505  : 
; 506  :     return CListCtrl::InsertItem( nItem, lpszItem, nImage );

  00fd5	8b 4d 10	 mov	 ecx, DWORD PTR _nImage$[ebp]
  00fd8	51		 push	 ecx
  00fd9	8b 55 0c	 mov	 edx, DWORD PTR _lpszItem$[ebp]
  00fdc	52		 push	 edx
  00fdd	8b 45 08	 mov	 eax, DWORD PTR _nItem$[ebp]
  00fe0	50		 push	 eax
  00fe1	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00fe4	e8 00 00 00 00	 call	 ?InsertItem@CListCtrl@@QAEHHPBDH@Z ; CListCtrl::InsertItem

; 507  : }

  00fe9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00fec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00ff3	8b e5		 mov	 esp, ebp
  00ff5	5d		 pop	 ebp
  00ff6	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
$L151567:
  00123	8b 45 e4	 mov	 eax, DWORD PTR $T151564[ebp]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012c	59		 pop	 ecx
  0012d	c3		 ret	 0
$L151570:
  0012e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151569
  00133	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertItem@CSkinListCtrl@@QAEHHPBDH@Z ENDP		; CSkinListCtrl::InsertItem
EXTRN	?InsertItem@CListCtrl@@QAEHIHPBDIIHJ@Z:NEAR	; CListCtrl::InsertItem
xdata$x	SEGMENT
$T151579 DD	019930520H
	DD	01H
	DD	FLAT:$T151581
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151581 DD	0ffffffffH
	DD	FLAT:$L151577
xdata$x	ENDS
_TEXT	SEGMENT
$T151573 = -24
$T151574 = -28
__$EHRec$ = -12
_nMask$ = 8
_nItem$ = 12
_lpszItem$ = 16
_nState$ = 20
_nStateMask$ = 24
_nImage$ = 28
_lParam$ = 32
_this$ = -32
_pData$ = -16
_nCount$ = -20
?InsertItem@CSkinListCtrl@@QAEHIHPBDIIHJ@Z PROC NEAR	; CSkinListCtrl::InsertItem

; 511  : {

  00ff9	55		 push	 ebp
  00ffa	8b ec		 mov	 ebp, esp
  00ffc	6a ff		 push	 -1
  00ffe	68 00 00 00 00	 push	 $L151580
  01003	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  01009	50		 push	 eax
  0100a	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  01011	83 ec 18	 sub	 esp, 24			; 00000018H
  01014	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 512  :     CListData *pData;
; 513  :     int nCount = GetItemCount();

  01017	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0101a	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  0101f	89 45 ec	 mov	 DWORD PTR _nCount$[ebp], eax

; 514  :     assert( m_nListItems == nCount );
; 515  : 
; 516  :     // Make sure wayward values are set to end of list
; 517  :     if (nItem < 0 || nItem > nCount )

  01022	83 7d 0c 00	 cmp	 DWORD PTR _nItem$[ebp], 0
  01026	7c 08		 jl	 SHORT $L145947
  01028	8b 45 0c	 mov	 eax, DWORD PTR _nItem$[ebp]
  0102b	3b 45 ec	 cmp	 eax, DWORD PTR _nCount$[ebp]
  0102e	7e 06		 jle	 SHORT $L145946
$L145947:

; 518  :         nItem = nCount;

  01030	8b 4d ec	 mov	 ecx, DWORD PTR _nCount$[ebp]
  01033	89 4d 0c	 mov	 DWORD PTR _nItem$[ebp], ecx
$L145946:

; 519  : 
; 520  :     // Create the associated data member
; 521  :     pData = new CListData( LIST_NOFRIEND, nItem );

  01036	6a 0c		 push	 12			; 0000000cH
  01038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0103d	83 c4 04	 add	 esp, 4
  01040	89 45 e4	 mov	 DWORD PTR $T151574[ebp], eax
  01043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0104a	83 7d e4 00	 cmp	 DWORD PTR $T151574[ebp], 0
  0104e	74 13		 je	 SHORT $L151575
  01050	8b 55 0c	 mov	 edx, DWORD PTR _nItem$[ebp]
  01053	52		 push	 edx
  01054	6a ff		 push	 -1
  01056	8b 4d e4	 mov	 ecx, DWORD PTR $T151574[ebp]
  01059	e8 00 00 00 00	 call	 ??0CListData@@QAE@HH@Z	; CListData::CListData
  0105e	89 45 dc	 mov	 DWORD PTR -36+[ebp], eax
  01061	eb 07		 jmp	 SHORT $L151576
$L151575:
  01063	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR -36+[ebp], 0
$L151576:
  0106a	8b 45 dc	 mov	 eax, DWORD PTR -36+[ebp]
  0106d	89 45 e8	 mov	 DWORD PTR $T151573[ebp], eax
  01070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01077	8b 4d e8	 mov	 ecx, DWORD PTR $T151573[ebp]
  0107a	89 4d f0	 mov	 DWORD PTR _pData$[ebp], ecx

; 522  :     m_nListItems++;

  0107d	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  01080	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  01086	83 c0 01	 add	 eax, 1
  01089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0108c	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 523  :     InsertListData( nItem, pData );

  01092	8b 55 f0	 mov	 edx, DWORD PTR _pData$[ebp]
  01095	52		 push	 edx
  01096	8b 45 0c	 mov	 eax, DWORD PTR _nItem$[ebp]
  01099	50		 push	 eax
  0109a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0109d	e8 00 00 00 00	 call	 ?InsertListData@CSkinListCtrl@@IAEHHPAVCListData@@@Z ; CSkinListCtrl::InsertListData

; 524  : 
; 525  :     return CListCtrl::InsertItem( nMask, nItem, lpszItem, nState, nStateMask, nImage, lParam );

  010a2	8b 4d 20	 mov	 ecx, DWORD PTR _lParam$[ebp]
  010a5	51		 push	 ecx
  010a6	8b 55 1c	 mov	 edx, DWORD PTR _nImage$[ebp]
  010a9	52		 push	 edx
  010aa	8b 45 18	 mov	 eax, DWORD PTR _nStateMask$[ebp]
  010ad	50		 push	 eax
  010ae	8b 4d 14	 mov	 ecx, DWORD PTR _nState$[ebp]
  010b1	51		 push	 ecx
  010b2	8b 55 10	 mov	 edx, DWORD PTR _lpszItem$[ebp]
  010b5	52		 push	 edx
  010b6	8b 45 0c	 mov	 eax, DWORD PTR _nItem$[ebp]
  010b9	50		 push	 eax
  010ba	8b 4d 08	 mov	 ecx, DWORD PTR _nMask$[ebp]
  010bd	51		 push	 ecx
  010be	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  010c1	e8 00 00 00 00	 call	 ?InsertItem@CListCtrl@@QAEHIHPBDIIHJ@Z ; CListCtrl::InsertItem

; 526  : }

  010c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  010c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  010d0	8b e5		 mov	 esp, ebp
  010d2	5d		 pop	 ebp
  010d3	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
text$x	SEGMENT
$L151577:
  00138	8b 45 e4	 mov	 eax, DWORD PTR $T151574[ebp]
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00141	59		 pop	 ecx
  00142	c3		 ret	 0
$L151580:
  00143	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151579
  00148	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InsertItem@CSkinListCtrl@@QAEHIHPBDIIHJ@Z ENDP		; CSkinListCtrl::InsertItem
PUBLIC	?FindItem@CSkinListCtrl@@QAEHH@Z		; CSkinListCtrl::FindItem
PUBLIC	?FindItem@CListCtrl@@QBEHPAUtagLVFINDINFOA@@H@Z	; CListCtrl::FindItem
_TEXT	SEGMENT
_nItemData$ = 8
_this$ = -28
_info$ = -24
?FindItem@CSkinListCtrl@@QAEHH@Z PROC NEAR		; CSkinListCtrl::FindItem

; 530  : {

  010d6	55		 push	 ebp
  010d7	8b ec		 mov	 ebp, esp
  010d9	83 ec 1c	 sub	 esp, 28			; 0000001cH
  010dc	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 531  : 	LVFINDINFO info;
; 532  : 	info.flags = LVFI_PARAM;

  010df	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _info$[ebp], 1

; 533  : 	info.lParam = nItemData;

  010e6	8b 45 08	 mov	 eax, DWORD PTR _nItemData$[ebp]
  010e9	89 45 f0	 mov	 DWORD PTR _info$[ebp+8], eax

; 534  : 
; 535  : 	return CListCtrl::FindItem ( &info );

  010ec	6a ff		 push	 -1
  010ee	8d 4d e8	 lea	 ecx, DWORD PTR _info$[ebp]
  010f1	51		 push	 ecx
  010f2	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  010f5	e8 00 00 00 00	 call	 ?FindItem@CListCtrl@@QBEHPAUtagLVFINDINFOA@@H@Z ; CListCtrl::FindItem

; 536  : }

  010fa	8b e5		 mov	 esp, ebp
  010fc	5d		 pop	 ebp
  010fd	c2 04 00	 ret	 4
?FindItem@CSkinListCtrl@@QAEHH@Z ENDP			; CSkinListCtrl::FindItem
_TEXT	ENDS
PUBLIC	?FindItem@CSkinListCtrl@@QAEHPAD@Z		; CSkinListCtrl::FindItem
_TEXT	SEGMENT
_pText$ = 8
_this$ = -28
_info$ = -24
?FindItem@CSkinListCtrl@@QAEHPAD@Z PROC NEAR		; CSkinListCtrl::FindItem

; 540  : {

  01100	55		 push	 ebp
  01101	8b ec		 mov	 ebp, esp
  01103	83 ec 1c	 sub	 esp, 28			; 0000001cH
  01106	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 541  : 	LVFINDINFO info;
; 542  : 	info.flags = LVFI_STRING;

  01109	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _info$[ebp], 2

; 543  : 	info.psz = pText;

  01110	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
  01113	89 45 ec	 mov	 DWORD PTR _info$[ebp+4], eax

; 544  : 
; 545  : 	return CListCtrl::FindItem ( &info );

  01116	6a ff		 push	 -1
  01118	8d 4d e8	 lea	 ecx, DWORD PTR _info$[ebp]
  0111b	51		 push	 ecx
  0111c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0111f	e8 00 00 00 00	 call	 ?FindItem@CListCtrl@@QBEHPAUtagLVFINDINFOA@@H@Z ; CListCtrl::FindItem

; 546  : }

  01124	8b e5		 mov	 esp, ebp
  01126	5d		 pop	 ebp
  01127	c2 04 00	 ret	 4
?FindItem@CSkinListCtrl@@QAEHPAD@Z ENDP			; CSkinListCtrl::FindItem
_TEXT	ENDS
PUBLIC	?SetItemIcon@CSkinListCtrl@@QAEXHH@Z		; CSkinListCtrl::SetItemIcon
_TEXT	SEGMENT
_nItemIndex$ = 8
_nIcon$ = 12
_this$ = -4
?SetItemIcon@CSkinListCtrl@@QAEXHH@Z PROC NEAR		; CSkinListCtrl::SetItemIcon

; 550  : {

  0112a	55		 push	 ebp
  0112b	8b ec		 mov	 ebp, esp
  0112d	51		 push	 ecx
  0112e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 551  : 	SetItem ( nItemIndex, 0, LVIF_IMAGE, NULL, nIcon, 0, 0, 0 );

  01131	6a 00		 push	 0
  01133	6a 00		 push	 0
  01135	6a 00		 push	 0
  01137	8b 45 0c	 mov	 eax, DWORD PTR _nIcon$[ebp]
  0113a	50		 push	 eax
  0113b	6a 00		 push	 0
  0113d	6a 02		 push	 2
  0113f	6a 00		 push	 0
  01141	8b 4d 08	 mov	 ecx, DWORD PTR _nItemIndex$[ebp]
  01144	51		 push	 ecx
  01145	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01148	e8 00 00 00 00	 call	 ?SetItem@CListCtrl@@QAEHHHIPBDHIIJ@Z ; CListCtrl::SetItem

; 552  : }

  0114d	8b e5		 mov	 esp, ebp
  0114f	5d		 pop	 ebp
  01150	c2 08 00	 ret	 8
?SetItemIcon@CSkinListCtrl@@QAEXHH@Z ENDP		; CSkinListCtrl::SetItemIcon
_this$ = -4
?OnNcCalcSize@CSkinListCtrl@@QAEXHPAUtagNCCALCSIZE_PARAMS@@@Z PROC NEAR ; CSkinListCtrl::OnNcCalcSize

; 556  : {

  01153	55		 push	 ebp
  01154	8b ec		 mov	 ebp, esp
  01156	51		 push	 ecx
  01157	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 557  : //	Calling this allows Windows to put in the lousy scrollbars.  No call parent, no scrollbars.
; 558  : //	CListCtrl::OnNcCalcSize ( bCalcValidRects, lpncsp );
; 559  : }

  0115a	8b e5		 mov	 esp, ebp
  0115c	5d		 pop	 ebp
  0115d	c2 08 00	 ret	 8
?OnNcCalcSize@CSkinListCtrl@@QAEXHPAUtagNCCALCSIZE_PARAMS@@@Z ENDP ; CSkinListCtrl::OnNcCalcSize
_TEXT	ENDS
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	?GetTopIndex@CListCtrl@@QBEHXZ			; CListCtrl::GetTopIndex
PUBLIC	?Scroll@CListCtrl@@QAEHVCSize@@@Z		; CListCtrl::Scroll
PUBLIC	?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
PUBLIC	??0CSize@@QAE@XZ				; CSize::CSize
EXTRN	?GetItemRect@CListCtrl@@QBEHHPAUtagRECT@@I@Z:NEAR ; CListCtrl::GetItemRect
_TEXT	SEGMENT
_this$ = -32
_nSize$ = -8
_rect$ = -28
_nVisible$ = -12
?UpdateMe@CSkinListCtrl@@UAEXXZ PROC NEAR		; CSkinListCtrl::UpdateMe

; 562  : {

  01160	55		 push	 ebp
  01161	8b ec		 mov	 ebp, esp
  01163	83 ec 20	 sub	 esp, 32			; 00000020H
  01166	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 563  : 	CSize nSize;

  01169	8d 4d f8	 lea	 ecx, DWORD PTR _nSize$[ebp]
  0116c	e8 00 00 00 00	 call	 ??0CSize@@QAE@XZ	; CSize::CSize

; 564  : 	CRect rect;

  01171	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  01174	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 565  : 
; 566  : 	GetItemRect( 0, &rect, LVIR_BOUNDS );

  01179	6a 00		 push	 0
  0117b	8d 45 e4	 lea	 eax, DWORD PTR _rect$[ebp]
  0117e	50		 push	 eax
  0117f	6a 00		 push	 0
  01181	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  01184	83 e9 54	 sub	 ecx, 84			; 00000054H
  01187	e8 00 00 00 00	 call	 ?GetItemRect@CListCtrl@@QBEHHPAUtagRECT@@I@Z ; CListCtrl::GetItemRect

; 567  : 
; 568  : 	nSize.cx = 0;

  0118c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nSize$[ebp], 0

; 569  : 	nSize.cy = rect.Height();

  01193	8d 4d e4	 lea	 ecx, DWORD PTR _rect$[ebp]
  01196	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  0119b	89 45 fc	 mov	 DWORD PTR _nSize$[ebp+4], eax

; 570  : 
; 571  : 	int nVisible = GetTopIndex();

  0119e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  011a1	83 e9 54	 sub	 ecx, 84			; 00000054H
  011a4	e8 00 00 00 00	 call	 ?GetTopIndex@CListCtrl@@QBEHXZ ; CListCtrl::GetTopIndex
  011a9	89 45 f4	 mov	 DWORD PTR _nVisible$[ebp], eax

; 572  : 
; 573  : 	if ( m_pBar && m_nFirstVisibleLine != nVisible ) {

  011ac	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  011af	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  011b3	74 44		 je	 SHORT $L145978
  011b5	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  011b8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  011bb	3b 45 f4	 cmp	 eax, DWORD PTR _nVisible$[ebp]
  011be	74 39		 je	 SHORT $L145978

; 574  : 		nSize.cy *= ( m_nFirstVisibleLine - nVisible );

  011c0	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  011c3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  011c6	2b 55 f4	 sub	 edx, DWORD PTR _nVisible$[ebp]
  011c9	8b 45 fc	 mov	 eax, DWORD PTR _nSize$[ebp+4]
  011cc	0f af c2	 imul	 eax, edx
  011cf	89 45 fc	 mov	 DWORD PTR _nSize$[ebp+4], eax

; 575  : 		Scroll ( nSize );

  011d2	8b 4d fc	 mov	 ecx, DWORD PTR _nSize$[ebp+4]
  011d5	51		 push	 ecx
  011d6	8b 55 f8	 mov	 edx, DWORD PTR _nSize$[ebp]
  011d9	52		 push	 edx
  011da	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  011dd	83 e9 54	 sub	 ecx, 84			; 00000054H
  011e0	e8 00 00 00 00	 call	 ?Scroll@CListCtrl@@QAEHVCSize@@@Z ; CListCtrl::Scroll

; 576  : 		RedrawWindow();

  011e5	68 05 01 00 00	 push	 261			; 00000105H
  011ea	6a 00		 push	 0
  011ec	6a 00		 push	 0
  011ee	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  011f1	83 e9 54	 sub	 ecx, 84			; 00000054H
  011f4	e8 00 00 00 00	 call	 ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
$L145978:

; 578  : }

  011f9	8b e5		 mov	 esp, ebp
  011fb	5d		 pop	 ebp
  011fc	c3		 ret	 0
?UpdateMe@CSkinListCtrl@@UAEXXZ ENDP			; CSkinListCtrl::UpdateMe
_TEXT	ENDS
EXTRN	?PositionThumb@CSkinScrollBar@@QAEXHH@Z:NEAR	; CSkinScrollBar::PositionThumb
_TEXT	SEGMENT
_this$ = -8
_nSize$ = -4
?UpdateScrollBar@CSkinListCtrl@@UAEXXZ PROC NEAR	; CSkinListCtrl::UpdateScrollBar

; 581  : {

  011fd	55		 push	 ebp
  011fe	8b ec		 mov	 ebp, esp
  01200	83 ec 0c	 sub	 esp, 12			; 0000000cH
  01203	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 582  : 	int nSize = max ( m_nMin, ( m_nMax - m_nMin - m_nPageSize ) );

  01206	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01209	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0120c	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0120f	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  01212	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01215	2b 50 18	 sub	 edx, DWORD PTR [eax+24]
  01218	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0121b	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  0121e	7e 0b		 jle	 SHORT $L151588
  01220	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01223	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01226	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  01229	eb 15		 jmp	 SHORT $L151589
$L151588:
  0122b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0122e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01231	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  01234	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  01237	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0123a	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  0123d	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
$L151589:
  01240	8b 55 f4	 mov	 edx, DWORD PTR -12+[ebp]
  01243	89 55 fc	 mov	 DWORD PTR _nSize$[ebp], edx

; 583  : 
; 584  : 	m_nFirstVisibleLine = GetTopIndex();

  01246	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01249	83 e9 54	 sub	 ecx, 84			; 00000054H
  0124c	e8 00 00 00 00	 call	 ?GetTopIndex@CListCtrl@@QBEHXZ ; CListCtrl::GetTopIndex
  01251	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01254	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 585  : 
; 586  : 	if ( m_pBar )

  01257	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0125a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0125e	74 16		 je	 SHORT $L145983

; 587  : 		m_pBar->PositionThumb ( m_nFirstVisibleLine, nSize );

  01260	8b 45 fc	 mov	 eax, DWORD PTR _nSize$[ebp]
  01263	50		 push	 eax
  01264	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01267	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0126a	52		 push	 edx
  0126b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0126e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01271	e8 00 00 00 00	 call	 ?PositionThumb@CSkinScrollBar@@QAEXHH@Z ; CSkinScrollBar::PositionThumb
$L145983:

; 588  : }

  01276	8b e5		 mov	 esp, ebp
  01278	5d		 pop	 ebp
  01279	c3		 ret	 0
?UpdateScrollBar@CSkinListCtrl@@UAEXXZ ENDP		; CSkinListCtrl::UpdateScrollBar
_TEXT	ENDS
EXTRN	?OnMouseWheel@CSkinScrollBar@@QAEXIF@Z:NEAR	; CSkinScrollBar::OnMouseWheel
_TEXT	SEGMENT
_nFlags$ = 8
_zDelta$ = 12
_this$ = -4
?OnMouseWheel@CSkinListCtrl@@UAEXIF@Z PROC NEAR		; CSkinListCtrl::OnMouseWheel

; 592  : {

  0127a	55		 push	 ebp
  0127b	8b ec		 mov	 ebp, esp
  0127d	51		 push	 ecx
  0127e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 593  : 	if ( m_pBar )

  01281	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01284	83 78 e4 00	 cmp	 DWORD PTR [eax-28], 0
  01288	74 14		 je	 SHORT $L145989

; 594  : 		m_pBar->OnMouseWheel ( nFlags, zDelta );

  0128a	66 8b 4d 0c	 mov	 cx, WORD PTR _zDelta$[ebp]
  0128e	51		 push	 ecx
  0128f	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  01292	52		 push	 edx
  01293	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01296	8b 48 e4	 mov	 ecx, DWORD PTR [eax-28]
  01299	e8 00 00 00 00	 call	 ?OnMouseWheel@CSkinScrollBar@@QAEXIF@Z ; CSkinScrollBar::OnMouseWheel
$L145989:

; 595  : }

  0129e	8b e5		 mov	 esp, ebp
  012a0	5d		 pop	 ebp
  012a1	c2 08 00	 ret	 8
?OnMouseWheel@CSkinListCtrl@@UAEXIF@Z ENDP		; CSkinListCtrl::OnMouseWheel
_TEXT	ENDS
PUBLIC	?CopyLine@CSkinListCtrl@@QAEHPAV1@HH@Z		; CSkinListCtrl::CopyLine
PUBLIC	?GetItem@CListCtrl@@QBEHPAUtagLVITEMA@@@Z	; CListCtrl::GetItem
PUBLIC	?SetItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z	; CListCtrl::SetItem
EXTRN	_memset:NEAR
_TEXT	SEGMENT
$T151592 = -56
$T151593 = -60
_pList$ = 8
_nItemIndex$ = 12
_nStoreIndex$ = 16
_this$ = -64
_pItem$ = -48
_nCount$ = -52
_newItem$ = -4
_i$ = -8
?CopyLine@CSkinListCtrl@@QAEHPAV1@HH@Z PROC NEAR	; CSkinListCtrl::CopyLine

; 599  : {

  012a4	55		 push	 ebp
  012a5	8b ec		 mov	 ebp, esp
  012a7	83 ec 40	 sub	 esp, 64			; 00000040H
  012aa	56		 push	 esi
  012ab	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 600  : 	LVITEM pItem;
; 601  :     int nCount = GetItemCount();

  012ae	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  012b1	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  012b6	89 45 cc	 mov	 DWORD PTR _nCount$[ebp], eax

; 602  : 
; 603  :     // This function invalidates Double line lists so its disabled in this case
; 604  :     if ( m_bDoubleLine )

  012b9	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  012bc	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  012c3	74 07		 je	 SHORT $L145998

; 605  :         return false;

  012c5	33 c0		 xor	 eax, eax
  012c7	e9 4b 01 00 00	 jmp	 $L145995
$L145998:

; 606  : 
; 607  :     // Check bounds
; 608  :     if (nStoreIndex < -1 || nStoreIndex > nCount )

  012cc	83 7d 10 ff	 cmp	 DWORD PTR _nStoreIndex$[ebp], -1
  012d0	7c 08		 jl	 SHORT $L146000
  012d2	8b 4d 10	 mov	 ecx, DWORD PTR _nStoreIndex$[ebp]
  012d5	3b 4d cc	 cmp	 ecx, DWORD PTR _nCount$[ebp]
  012d8	7e 07		 jle	 SHORT $L145999
$L146000:

; 609  :         return FALSE;

  012da	33 c0		 xor	 eax, eax
  012dc	e9 36 01 00 00	 jmp	 $L145995
$L145999:

; 610  : 
; 611  : 	if ( m_nColumnCount != pList->m_nColumnCount )

  012e1	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  012e4	8b 45 08	 mov	 eax, DWORD PTR _pList$[ebp]
  012e7	8b 4a 7c	 mov	 ecx, DWORD PTR [edx+124]
  012ea	3b 48 7c	 cmp	 ecx, DWORD PTR [eax+124]
  012ed	74 07		 je	 SHORT $L146001

; 612  : 		return FALSE;

  012ef	33 c0		 xor	 eax, eax
  012f1	e9 21 01 00 00	 jmp	 $L145995
$L146001:

; 613  : 
; 614  : 	memset ( &pItem, 0, sizeof( pItem ) );

  012f6	6a 28		 push	 40			; 00000028H
  012f8	6a 00		 push	 0
  012fa	8d 55 d0	 lea	 edx, DWORD PTR _pItem$[ebp]
  012fd	52		 push	 edx
  012fe	e8 00 00 00 00	 call	 _memset
  01303	83 c4 0c	 add	 esp, 12			; 0000000cH

; 615  : 	pItem.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_INDENT | LVIF_PARAM | LVIF_STATE;

  01306	c7 45 d0 1f 00
	00 00		 mov	 DWORD PTR _pItem$[ebp], 31 ; 0000001fH

; 616  : 	pItem.iItem = nItemIndex;

  0130d	8b 45 0c	 mov	 eax, DWORD PTR _nItemIndex$[ebp]
  01310	89 45 d4	 mov	 DWORD PTR _pItem$[ebp+4], eax

; 617  : 	pItem.stateMask = -1;

  01313	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _pItem$[ebp+16], -1

; 618  : 	pItem.pszText = new char[100];

  0131a	6a 64		 push	 100			; 00000064H
  0131c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  01321	83 c4 04	 add	 esp, 4
  01324	89 45 c8	 mov	 DWORD PTR $T151592[ebp], eax
  01327	8b 4d c8	 mov	 ecx, DWORD PTR $T151592[ebp]
  0132a	89 4d e4	 mov	 DWORD PTR _pItem$[ebp+20], ecx

; 619  : 	pItem.cchTextMax = 100;

  0132d	c7 45 e8 64 00
	00 00		 mov	 DWORD PTR _pItem$[ebp+24], 100 ; 00000064H

; 620  : 
; 621  : 	pList->GetItem( &pItem );

  01334	8d 55 d0	 lea	 edx, DWORD PTR _pItem$[ebp]
  01337	52		 push	 edx
  01338	8b 4d 08	 mov	 ecx, DWORD PTR _pList$[ebp]
  0133b	e8 00 00 00 00	 call	 ?GetItem@CListCtrl@@QBEHPAUtagLVITEMA@@@Z ; CListCtrl::GetItem

; 622  : 
; 623  : 	if ( nStoreIndex == -1 ) {

  01340	83 7d 10 ff	 cmp	 DWORD PTR _nStoreIndex$[ebp], -1
  01344	75 08		 jne	 SHORT $L146004

; 624  : 		pItem.iItem = nCount;

  01346	8b 45 cc	 mov	 eax, DWORD PTR _nCount$[ebp]
  01349	89 45 d4	 mov	 DWORD PTR _pItem$[ebp+4], eax

; 625  : 	} else {

  0134c	eb 06		 jmp	 SHORT $L146005
$L146004:

; 626  : 		pItem.iItem = nStoreIndex;

  0134e	8b 4d 10	 mov	 ecx, DWORD PTR _nStoreIndex$[ebp]
  01351	89 4d d4	 mov	 DWORD PTR _pItem$[ebp+4], ecx
$L146005:

; 628  : 
; 629  : 	int newItem = InsertItem( &pItem );

  01354	8d 55 d0	 lea	 edx, DWORD PTR _pItem$[ebp]
  01357	52		 push	 edx
  01358	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0135b	e8 00 00 00 00	 call	 ?InsertItem@CSkinListCtrl@@QAEHPBUtagLVITEMA@@@Z ; CSkinListCtrl::InsertItem
  01360	89 45 fc	 mov	 DWORD PTR _newItem$[ebp], eax

; 630  : 
; 631  :     // Copy the list data
; 632  :     *GetListData(pItem.iItem) = *pList->GetListData(nItemIndex);

  01363	8b 45 0c	 mov	 eax, DWORD PTR _nItemIndex$[ebp]
  01366	50		 push	 eax
  01367	8b 4d 08	 mov	 ecx, DWORD PTR _pList$[ebp]
  0136a	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  0136f	8b f0		 mov	 esi, eax
  01371	8b 4d d4	 mov	 ecx, DWORD PTR _pItem$[ebp+4]
  01374	51		 push	 ecx
  01375	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  01378	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  0137d	8b 16		 mov	 edx, DWORD PTR [esi]
  0137f	89 10		 mov	 DWORD PTR [eax], edx
  01381	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  01384	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  01387	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0138a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 633  : 
; 634  : 	for (int i = 1;i < m_nColumnCount;i++) {

  0138d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  01394	eb 09		 jmp	 SHORT $L146008
$L146009:
  01396	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  01399	83 c0 01	 add	 eax, 1
  0139c	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L146008:
  0139f	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  013a2	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  013a5	3b 51 7c	 cmp	 edx, DWORD PTR [ecx+124]
  013a8	7d 33		 jge	 SHORT $L146010

; 635  : 		pItem.iItem = nItemIndex;

  013aa	8b 45 0c	 mov	 eax, DWORD PTR _nItemIndex$[ebp]
  013ad	89 45 d4	 mov	 DWORD PTR _pItem$[ebp+4], eax

; 636  : 		pItem.iSubItem = i;

  013b0	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  013b3	89 4d d8	 mov	 DWORD PTR _pItem$[ebp+8], ecx

; 637  : 		pItem.mask = LVIF_TEXT;

  013b6	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _pItem$[ebp], 1

; 638  : 
; 639  : 		pList->GetItem( &pItem );

  013bd	8d 55 d0	 lea	 edx, DWORD PTR _pItem$[ebp]
  013c0	52		 push	 edx
  013c1	8b 4d 08	 mov	 ecx, DWORD PTR _pList$[ebp]
  013c4	e8 00 00 00 00	 call	 ?GetItem@CListCtrl@@QBEHPAUtagLVITEMA@@@Z ; CListCtrl::GetItem

; 640  : 		pItem.iItem = newItem;

  013c9	8b 45 fc	 mov	 eax, DWORD PTR _newItem$[ebp]
  013cc	89 45 d4	 mov	 DWORD PTR _pItem$[ebp+4], eax

; 641  : 
; 642  : 		SetItem( &pItem );

  013cf	8d 4d d0	 lea	 ecx, DWORD PTR _pItem$[ebp]
  013d2	51		 push	 ecx
  013d3	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  013d6	e8 00 00 00 00	 call	 ?SetItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z ; CListCtrl::SetItem

; 643  : 	}

  013db	eb b9		 jmp	 SHORT $L146009
$L146010:

; 644  : 
; 645  : 	delete pItem.pszText;

  013dd	8b 55 e4	 mov	 edx, DWORD PTR _pItem$[ebp+20]
  013e0	89 55 c4	 mov	 DWORD PTR $T151593[ebp], edx
  013e3	8b 45 c4	 mov	 eax, DWORD PTR $T151593[ebp]
  013e6	50		 push	 eax
  013e7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  013ec	83 c4 04	 add	 esp, 4

; 646  : 
; 647  : 	if ( m_pBar ) {

  013ef	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  013f2	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  013f6	74 1a		 je	 SHORT $L146012

; 648  : 		SetRange( 0, GetItemCount() );

  013f8	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  013fb	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  01400	50		 push	 eax
  01401	6a 00		 push	 0
  01403	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  01406	83 c1 54	 add	 ecx, 84			; 00000054H
  01409	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0140c	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0140f	ff 50 10	 call	 DWORD PTR [eax+16]
$L146012:

; 650  : 
; 651  : 	return TRUE;

  01412	b8 01 00 00 00	 mov	 eax, 1
$L145995:

; 652  : }

  01417	5e		 pop	 esi
  01418	8b e5		 mov	 esp, ebp
  0141a	5d		 pop	 ebp
  0141b	c2 0c 00	 ret	 12			; 0000000cH
?CopyLine@CSkinListCtrl@@QAEHPAV1@HH@Z ENDP		; CSkinListCtrl::CopyLine
_TEXT	ENDS
PUBLIC	?MoveLine@CSkinListCtrl@@QAEHHH@Z		; CSkinListCtrl::MoveLine
_TEXT	SEGMENT
$T151595 = -56
$T151596 = -60
_nItemIndex$ = 8
_nNewIndex$ = 12
_this$ = -64
_pItem$ = -48
_nCount$ = -52
_newItem$ = -4
_i$ = -8
?MoveLine@CSkinListCtrl@@QAEHHH@Z PROC NEAR		; CSkinListCtrl::MoveLine

; 656  : {

  0141e	55		 push	 ebp
  0141f	8b ec		 mov	 ebp, esp
  01421	83 ec 40	 sub	 esp, 64			; 00000040H
  01424	56		 push	 esi
  01425	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 657  : 	LVITEM pItem;
; 658  :     int nCount = GetItemCount();

  01428	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0142b	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  01430	89 45 cc	 mov	 DWORD PTR _nCount$[ebp], eax

; 659  : 
; 660  :     // This function invalidates Double line lists so its disabled in this case
; 661  :     if ( m_bDoubleLine )

  01433	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  01436	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  0143d	74 07		 je	 SHORT $L146020

; 662  :         return false;

  0143f	33 c0		 xor	 eax, eax
  01441	e9 3c 01 00 00	 jmp	 $L146017
$L146020:

; 663  : 
; 664  :     // Check bounds
; 665  :     if (nItemIndex < 0 || nItemIndex >= nCount || nNewIndex < -1 || nNewIndex > nCount )

  01446	83 7d 08 00	 cmp	 DWORD PTR _nItemIndex$[ebp], 0
  0144a	7c 16		 jl	 SHORT $L146022
  0144c	8b 4d 08	 mov	 ecx, DWORD PTR _nItemIndex$[ebp]
  0144f	3b 4d cc	 cmp	 ecx, DWORD PTR _nCount$[ebp]
  01452	7d 0e		 jge	 SHORT $L146022
  01454	83 7d 0c ff	 cmp	 DWORD PTR _nNewIndex$[ebp], -1
  01458	7c 08		 jl	 SHORT $L146022
  0145a	8b 55 0c	 mov	 edx, DWORD PTR _nNewIndex$[ebp]
  0145d	3b 55 cc	 cmp	 edx, DWORD PTR _nCount$[ebp]
  01460	7e 07		 jle	 SHORT $L146021
$L146022:

; 666  :         return FALSE;

  01462	33 c0		 xor	 eax, eax
  01464	e9 19 01 00 00	 jmp	 $L146017
$L146021:

; 667  : 
; 668  : 	if ( nNewIndex == -1 )

  01469	83 7d 0c ff	 cmp	 DWORD PTR _nNewIndex$[ebp], -1
  0146d	75 06		 jne	 SHORT $L146023

; 669  : 		nNewIndex = nCount;

  0146f	8b 45 cc	 mov	 eax, DWORD PTR _nCount$[ebp]
  01472	89 45 0c	 mov	 DWORD PTR _nNewIndex$[ebp], eax
$L146023:

; 670  : 
; 671  : 	memset ( &pItem, 0, sizeof( pItem ) );

  01475	6a 28		 push	 40			; 00000028H
  01477	6a 00		 push	 0
  01479	8d 4d d0	 lea	 ecx, DWORD PTR _pItem$[ebp]
  0147c	51		 push	 ecx
  0147d	e8 00 00 00 00	 call	 _memset
  01482	83 c4 0c	 add	 esp, 12			; 0000000cH

; 672  : 	pItem.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_INDENT | LVIF_PARAM | LVIF_STATE;

  01485	c7 45 d0 1f 00
	00 00		 mov	 DWORD PTR _pItem$[ebp], 31 ; 0000001fH

; 673  : 	pItem.iItem = nItemIndex;

  0148c	8b 55 08	 mov	 edx, DWORD PTR _nItemIndex$[ebp]
  0148f	89 55 d4	 mov	 DWORD PTR _pItem$[ebp+4], edx

; 674  : 	pItem.stateMask = -1;

  01492	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _pItem$[ebp+16], -1

; 675  : 	pItem.pszText = new char[100];

  01499	6a 64		 push	 100			; 00000064H
  0149b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  014a0	83 c4 04	 add	 esp, 4
  014a3	89 45 c8	 mov	 DWORD PTR $T151595[ebp], eax
  014a6	8b 45 c8	 mov	 eax, DWORD PTR $T151595[ebp]
  014a9	89 45 e4	 mov	 DWORD PTR _pItem$[ebp+20], eax

; 676  : 	pItem.cchTextMax = 100;

  014ac	c7 45 e8 64 00
	00 00		 mov	 DWORD PTR _pItem$[ebp+24], 100 ; 00000064H

; 677  : 
; 678  : 	GetItem( &pItem );

  014b3	8d 4d d0	 lea	 ecx, DWORD PTR _pItem$[ebp]
  014b6	51		 push	 ecx
  014b7	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  014ba	e8 00 00 00 00	 call	 ?GetItem@CListCtrl@@QBEHPAUtagLVITEMA@@@Z ; CListCtrl::GetItem

; 679  : 
; 680  : 	pItem.iItem = nNewIndex;

  014bf	8b 55 0c	 mov	 edx, DWORD PTR _nNewIndex$[ebp]
  014c2	89 55 d4	 mov	 DWORD PTR _pItem$[ebp+4], edx

; 681  : 
; 682  : 	int newItem = InsertItem( &pItem );

  014c5	8d 45 d0	 lea	 eax, DWORD PTR _pItem$[ebp]
  014c8	50		 push	 eax
  014c9	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  014cc	e8 00 00 00 00	 call	 ?InsertItem@CSkinListCtrl@@QAEHPBUtagLVITEMA@@@Z ; CSkinListCtrl::InsertItem
  014d1	89 45 fc	 mov	 DWORD PTR _newItem$[ebp], eax

; 683  : 
; 684  :     // Copy the list data
; 685  :     *GetListData(nNewIndex) = *GetListData(nItemIndex);

  014d4	8b 4d 08	 mov	 ecx, DWORD PTR _nItemIndex$[ebp]
  014d7	51		 push	 ecx
  014d8	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  014db	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  014e0	8b f0		 mov	 esi, eax
  014e2	8b 55 0c	 mov	 edx, DWORD PTR _nNewIndex$[ebp]
  014e5	52		 push	 edx
  014e6	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  014e9	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  014ee	8b 0e		 mov	 ecx, DWORD PTR [esi]
  014f0	89 08		 mov	 DWORD PTR [eax], ecx
  014f2	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  014f5	89 50 04	 mov	 DWORD PTR [eax+4], edx
  014f8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  014fb	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 686  : 
; 687  : 	if ( nNewIndex < nItemIndex )

  014fe	8b 55 0c	 mov	 edx, DWORD PTR _nNewIndex$[ebp]
  01501	3b 55 08	 cmp	 edx, DWORD PTR _nItemIndex$[ebp]
  01504	7d 09		 jge	 SHORT $L146027

; 688  : 		nItemIndex++;

  01506	8b 45 08	 mov	 eax, DWORD PTR _nItemIndex$[ebp]
  01509	83 c0 01	 add	 eax, 1
  0150c	89 45 08	 mov	 DWORD PTR _nItemIndex$[ebp], eax
$L146027:

; 689  : 
; 690  : 	for (int i = 1;i < m_nColumnCount;i++) {

  0150f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  01516	eb 09		 jmp	 SHORT $L146029
$L146030:
  01518	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0151b	83 c1 01	 add	 ecx, 1
  0151e	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L146029:
  01521	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  01524	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  01527	3b 42 7c	 cmp	 eax, DWORD PTR [edx+124]
  0152a	7d 33		 jge	 SHORT $L146031

; 691  : 		pItem.iItem = nItemIndex;

  0152c	8b 4d 08	 mov	 ecx, DWORD PTR _nItemIndex$[ebp]
  0152f	89 4d d4	 mov	 DWORD PTR _pItem$[ebp+4], ecx

; 692  : 		pItem.iSubItem = i;

  01532	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  01535	89 55 d8	 mov	 DWORD PTR _pItem$[ebp+8], edx

; 693  : 		pItem.mask = LVIF_TEXT;

  01538	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _pItem$[ebp], 1

; 694  : 
; 695  : 		GetItem( &pItem );

  0153f	8d 45 d0	 lea	 eax, DWORD PTR _pItem$[ebp]
  01542	50		 push	 eax
  01543	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  01546	e8 00 00 00 00	 call	 ?GetItem@CListCtrl@@QBEHPAUtagLVITEMA@@@Z ; CListCtrl::GetItem

; 696  : 
; 697  : 		pItem.iItem = newItem;

  0154b	8b 4d fc	 mov	 ecx, DWORD PTR _newItem$[ebp]
  0154e	89 4d d4	 mov	 DWORD PTR _pItem$[ebp+4], ecx

; 698  : 
; 699  : 		SetItem( &pItem );

  01551	8d 55 d0	 lea	 edx, DWORD PTR _pItem$[ebp]
  01554	52		 push	 edx
  01555	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  01558	e8 00 00 00 00	 call	 ?SetItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z ; CListCtrl::SetItem

; 700  : 	}

  0155d	eb b9		 jmp	 SHORT $L146030
$L146031:

; 701  : 
; 702  : 	delete pItem.pszText;

  0155f	8b 45 e4	 mov	 eax, DWORD PTR _pItem$[ebp+20]
  01562	89 45 c4	 mov	 DWORD PTR $T151596[ebp], eax
  01565	8b 4d c4	 mov	 ecx, DWORD PTR $T151596[ebp]
  01568	51		 push	 ecx
  01569	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0156e	83 c4 04	 add	 esp, 4

; 703  : 
; 704  : 	// remove the old line.
; 705  : 	DeleteItem( nItemIndex );

  01571	8b 55 08	 mov	 edx, DWORD PTR _nItemIndex$[ebp]
  01574	52		 push	 edx
  01575	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  01578	e8 00 00 00 00	 call	 ?DeleteItem@CSkinListCtrl@@QAEHH@Z ; CSkinListCtrl::DeleteItem

; 706  : 
; 707  : 	return TRUE;

  0157d	b8 01 00 00 00	 mov	 eax, 1
$L146017:

; 708  : }

  01582	5e		 pop	 esi
  01583	8b e5		 mov	 esp, ebp
  01585	5d		 pop	 ebp
  01586	c2 08 00	 ret	 8
?MoveLine@CSkinListCtrl@@QAEHHH@Z ENDP			; CSkinListCtrl::MoveLine
_pNotifyStruct$ = 8
_pResult$ = 12
_this$ = -12
_pListView$ = -4
_nMask$ = -8
?OnItemChanging@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z PROC NEAR ; CSkinListCtrl::OnItemChanging

; 712  : {

  01589	55		 push	 ebp
  0158a	8b ec		 mov	 ebp, esp
  0158c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0158f	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 713  : 	NMLISTVIEW *pListView = (NMLISTVIEW *)pNotifyStruct;

  01592	8b 45 08	 mov	 eax, DWORD PTR _pNotifyStruct$[ebp]
  01595	89 45 fc	 mov	 DWORD PTR _pListView$[ebp], eax

; 714  : 
; 715  : 	// only allow icon and text changes to occur
; 716  : 	int nMask = LVIF_IMAGE | LVIF_TEXT;

  01598	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _nMask$[ebp], 3

; 717  : 
; 718  : 	if ( pListView->uChanged & nMask )

  0159f	8b 4d fc	 mov	 ecx, DWORD PTR _pListView$[ebp]
  015a2	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  015a5	23 55 f8	 and	 edx, DWORD PTR _nMask$[ebp]
  015a8	85 d2		 test	 edx, edx
  015aa	74 0b		 je	 SHORT $L146041

; 719  : 		*pResult = 0;

  015ac	8b 45 0c	 mov	 eax, DWORD PTR _pResult$[ebp]
  015af	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 720  : 	else

  015b5	eb 09		 jmp	 SHORT $L146042
$L146041:

; 721  : 		*pResult = 1;

  015b7	8b 4d 0c	 mov	 ecx, DWORD PTR _pResult$[ebp]
  015ba	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
$L146042:

; 722  : }

  015c0	8b e5		 mov	 esp, ebp
  015c2	5d		 pop	 ebp
  015c3	c2 08 00	 ret	 8
?OnItemChanging@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ENDP ; CSkinListCtrl::OnItemChanging
_TEXT	ENDS
EXTRN	?HandsAreOff@@YA_NXZ:NEAR			; HandsAreOff
_TEXT	SEGMENT
_pNotifyStruct$ = 8
_this$ = -8
_pListView$ = -4
?OnItemClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z PROC NEAR ; CSkinListCtrl::OnItemClick

; 726  : {

  015c6	55		 push	 ebp
  015c7	8b ec		 mov	 ebp, esp
  015c9	83 ec 08	 sub	 esp, 8
  015cc	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 727  : 	// do nothing if the game is hands off
; 728  : 	if ( m_bDisableInHandsOff && HandsAreOff() )

  015cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  015d2	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  015d9	74 10		 je	 SHORT $L146048
  015db	e8 00 00 00 00	 call	 ?HandsAreOff@@YA_NXZ	; HandsAreOff
  015e0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  015e5	85 c0		 test	 eax, eax
  015e7	74 02		 je	 SHORT $L146048

; 729  : 		return;

  015e9	eb 5b		 jmp	 SHORT $L146047
$L146048:

; 730  : 
; 731  : 	NMLISTVIEW *pListView = (NMLISTVIEW *)pNotifyStruct;

  015eb	8b 4d 08	 mov	 ecx, DWORD PTR _pNotifyStruct$[ebp]
  015ee	89 4d fc	 mov	 DWORD PTR _pListView$[ebp], ecx

; 732  : 
; 733  : 	if ( pListView->iItem != -1 )

  015f1	8b 55 fc	 mov	 edx, DWORD PTR _pListView$[ebp]
  015f4	83 7a 0c ff	 cmp	 DWORD PTR [edx+12], -1
  015f8	74 4c		 je	 SHORT $L146053

; 735  :         if ( m_bDoubleLine )

  015fa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  015fd	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  01604	74 29		 je	 SHORT $L146052

; 737  :             OnItemActivate ( GetListData(pListView->iItem)->getTrueIndex(), false );

  01606	6a 00		 push	 0
  01608	8b 4d fc	 mov	 ecx, DWORD PTR _pListView$[ebp]
  0160b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0160e	52		 push	 edx
  0160f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01612	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  01617	8b c8		 mov	 ecx, eax
  01619	e8 00 00 00 00	 call	 ?getTrueIndex@CListData@@QAEHXZ ; CListData::getTrueIndex
  0161e	50		 push	 eax
  0161f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01622	8b 10		 mov	 edx, DWORD PTR [eax]
  01624	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01627	ff 92 cc 00 00
	00		 call	 DWORD PTR [edx+204]

; 739  :         else

  0162d	eb 17		 jmp	 SHORT $L146053
$L146052:

; 741  : 		    OnItemActivate ( pListView->iItem, false );

  0162f	6a 00		 push	 0
  01631	8b 45 fc	 mov	 eax, DWORD PTR _pListView$[ebp]
  01634	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01637	51		 push	 ecx
  01638	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0163b	8b 02		 mov	 eax, DWORD PTR [edx]
  0163d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01640	ff 90 cc 00 00
	00		 call	 DWORD PTR [eax+204]
$L146053:
$L146047:

; 744  : }

  01646	8b e5		 mov	 esp, ebp
  01648	5d		 pop	 ebp
  01649	c2 08 00	 ret	 8
?OnItemClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ENDP	; CSkinListCtrl::OnItemClick
_pNotifyStruct$ = 8
_this$ = -8
_pListView$ = -4
?OnItemRightClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z PROC NEAR ; CSkinListCtrl::OnItemRightClick

; 748  : {

  0164c	55		 push	 ebp
  0164d	8b ec		 mov	 ebp, esp
  0164f	83 ec 08	 sub	 esp, 8
  01652	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 749  : 	// do nothing if the game is hands off
; 750  : 	if ( m_bDisableInHandsOff && HandsAreOff() )

  01655	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01658	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0165f	74 10		 je	 SHORT $L146059
  01661	e8 00 00 00 00	 call	 ?HandsAreOff@@YA_NXZ	; HandsAreOff
  01666	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0166b	85 c0		 test	 eax, eax
  0166d	74 02		 je	 SHORT $L146059

; 751  : 		return;

  0166f	eb 5b		 jmp	 SHORT $L146058
$L146059:

; 752  : 
; 753  : 	NMLISTVIEW *pListView = (NMLISTVIEW *)pNotifyStruct;

  01671	8b 4d 08	 mov	 ecx, DWORD PTR _pNotifyStruct$[ebp]
  01674	89 4d fc	 mov	 DWORD PTR _pListView$[ebp], ecx

; 754  : 
; 755  : 	if ( pListView->iItem != -1 )

  01677	8b 55 fc	 mov	 edx, DWORD PTR _pListView$[ebp]
  0167a	83 7a 0c ff	 cmp	 DWORD PTR [edx+12], -1
  0167e	74 4c		 je	 SHORT $L146064

; 757  :         if ( m_bDoubleLine )

  01680	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01683	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  0168a	74 29		 je	 SHORT $L146063

; 759  :             OnItemActivate ( GetListData(pListView->iItem)->getTrueIndex(), true );

  0168c	6a 01		 push	 1
  0168e	8b 4d fc	 mov	 ecx, DWORD PTR _pListView$[ebp]
  01691	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01694	52		 push	 edx
  01695	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01698	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  0169d	8b c8		 mov	 ecx, eax
  0169f	e8 00 00 00 00	 call	 ?getTrueIndex@CListData@@QAEHXZ ; CListData::getTrueIndex
  016a4	50		 push	 eax
  016a5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  016a8	8b 10		 mov	 edx, DWORD PTR [eax]
  016aa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  016ad	ff 92 cc 00 00
	00		 call	 DWORD PTR [edx+204]

; 761  :         else

  016b3	eb 17		 jmp	 SHORT $L146064
$L146063:

; 763  : 		    OnItemActivate ( pListView->iItem, true );

  016b5	6a 01		 push	 1
  016b7	8b 45 fc	 mov	 eax, DWORD PTR _pListView$[ebp]
  016ba	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  016bd	51		 push	 ecx
  016be	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  016c1	8b 02		 mov	 eax, DWORD PTR [edx]
  016c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  016c6	ff 90 cc 00 00
	00		 call	 DWORD PTR [eax+204]
$L146064:
$L146058:

; 766  : }

  016cc	8b e5		 mov	 esp, ebp
  016ce	5d		 pop	 ebp
  016cf	c2 08 00	 ret	 8
?OnItemRightClick@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ENDP ; CSkinListCtrl::OnItemRightClick
_TEXT	ENDS
PUBLIC	?Update@CListCtrl@@QAEHH@Z			; CListCtrl::Update
_TEXT	SEGMENT
_this$ = -8
_nL0$146071 = -4
?OnKillFocus@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z PROC NEAR ; CSkinListCtrl::OnKillFocus

; 769  : {

  016d2	55		 push	 ebp
  016d3	8b ec		 mov	 ebp, esp
  016d5	83 ec 08	 sub	 esp, 8
  016d8	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 770  :     if (m_bDoubleLine)

  016db	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  016de	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  016e5	74 2d		 je	 SHORT $L146074

; 772  :         for (int nL0=0; nL0<GetItemCount(); nL0++)

  016e7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nL0$146071[ebp], 0
  016ee	eb 09		 jmp	 SHORT $L146072
$L146073:
  016f0	8b 4d fc	 mov	 ecx, DWORD PTR _nL0$146071[ebp]
  016f3	83 c1 01	 add	 ecx, 1
  016f6	89 4d fc	 mov	 DWORD PTR _nL0$146071[ebp], ecx
$L146072:
  016f9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  016fc	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  01701	39 45 fc	 cmp	 DWORD PTR _nL0$146071[ebp], eax
  01704	7d 0e		 jge	 SHORT $L146074

; 773  :             Update(nL0);

  01706	8b 55 fc	 mov	 edx, DWORD PTR _nL0$146071[ebp]
  01709	52		 push	 edx
  0170a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0170d	e8 00 00 00 00	 call	 ?Update@CListCtrl@@QAEHH@Z ; CListCtrl::Update
  01712	eb dc		 jmp	 SHORT $L146073
$L146074:

; 775  : } 

  01714	8b e5		 mov	 esp, ebp
  01716	5d		 pop	 ebp
  01717	c2 08 00	 ret	 8
?OnKillFocus@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ENDP	; CSkinListCtrl::OnKillFocus
_TEXT	ENDS
PUBLIC	?GetHotItem@CListCtrl@@QAEHXZ			; CListCtrl::GetHotItem
_TEXT	SEGMENT
_this$ = -12
_nHot$ = -8
_pData$ = -4
?OnItemHover@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z PROC NEAR ; CSkinListCtrl::OnItemHover

; 779  : {

  0171a	55		 push	 ebp
  0171b	8b ec		 mov	 ebp, esp
  0171d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  01720	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 780  :     int nHot = GetHotItem();

  01723	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01726	e8 00 00 00 00	 call	 ?GetHotItem@CListCtrl@@QAEHXZ ; CListCtrl::GetHotItem
  0172b	89 45 f8	 mov	 DWORD PTR _nHot$[ebp], eax

; 781  :     CListData *pData = GetListData(nHot);

  0172e	8b 45 f8	 mov	 eax, DWORD PTR _nHot$[ebp]
  01731	50		 push	 eax
  01732	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01735	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  0173a	89 45 fc	 mov	 DWORD PTR _pData$[ebp], eax

; 782  : 
; 783  :     if (nHot == m_nHover)

  0173d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01740	8b 55 f8	 mov	 edx, DWORD PTR _nHot$[ebp]
  01743	3b 91 90 00 00
	00		 cmp	 edx, DWORD PTR [ecx+144]
  01749	75 02		 jne	 SHORT $L146082

; 784  :         return;

  0174b	eb 11		 jmp	 SHORT $L146079
$L146082:

; 785  : 
; 786  :     // Update our hover value
; 787  :     m_nHover = GetHotItem(); 

  0174d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01750	e8 00 00 00 00	 call	 ?GetHotItem@CListCtrl@@QAEHXZ ; CListCtrl::GetHotItem
  01755	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  01758	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax
$L146079:

; 788  : }

  0175e	8b e5		 mov	 esp, ebp
  01760	5d		 pop	 ebp
  01761	c2 08 00	 ret	 8
?OnItemHover@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ENDP	; CSkinListCtrl::OnItemHover
_this$ = -4
?OnItemActivate@CSkinListCtrl@@UAEXH_N@Z PROC NEAR	; CSkinListCtrl::OnItemActivate

; 792  : {

  01764	55		 push	 ebp
  01765	8b ec		 mov	 ebp, esp
  01767	51		 push	 ecx
  01768	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 793  : }

  0176b	8b e5		 mov	 esp, ebp
  0176d	5d		 pop	 ebp
  0176e	c2 08 00	 ret	 8
?OnItemActivate@CSkinListCtrl@@UAEXH_N@Z ENDP		; CSkinListCtrl::OnItemActivate
_TEXT	ENDS
EXTRN	?g_hArrowCursor@@3PAUHICON__@@A:DWORD		; g_hArrowCursor
EXTRN	?g_hWaitCursor@@3PAUHICON__@@A:DWORD		; g_hWaitCursor
EXTRN	__imp__SetCursor@4:NEAR
_TEXT	SEGMENT
_this$ = -4
?OnSetCursor@CSkinListCtrl@@QAEHPAVCWnd@@II@Z PROC NEAR	; CSkinListCtrl::OnSetCursor

; 797  : {

  01771	55		 push	 ebp
  01772	8b ec		 mov	 ebp, esp
  01774	51		 push	 ecx
  01775	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 798  : 	if ( m_bDisableInHandsOff && HandsAreOff() ) {

  01778	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0177b	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  01782	74 1d		 je	 SHORT $L146094
  01784	e8 00 00 00 00	 call	 ?HandsAreOff@@YA_NXZ	; HandsAreOff
  01789	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0178e	85 c0		 test	 eax, eax
  01790	74 0f		 je	 SHORT $L146094

; 799  : 		SetCursor ( g_hWaitCursor );

  01792	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hWaitCursor@@3PAUHICON__@@A ; g_hWaitCursor
  01798	51		 push	 ecx
  01799	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 800  : 	} else {

  0179f	eb 0d		 jmp	 SHORT $L146095
$L146094:

; 801  : 		SetCursor ( g_hArrowCursor );

  017a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_hArrowCursor@@3PAUHICON__@@A ; g_hArrowCursor
  017a7	52		 push	 edx
  017a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4
$L146095:

; 803  : 
; 804  : 	return TRUE;

  017ae	b8 01 00 00 00	 mov	 eax, 1

; 805  : }

  017b3	8b e5		 mov	 esp, ebp
  017b5	5d		 pop	 ebp
  017b6	c2 0c 00	 ret	 12			; 0000000cH
?OnSetCursor@CSkinListCtrl@@QAEHPAVCWnd@@II@Z ENDP	; CSkinListCtrl::OnSetCursor
_TEXT	ENDS
PUBLIC	?OnNcHitTest@CWnd@@IAEIVCPoint@@@Z		; CWnd::OnNcHitTest
_TEXT	SEGMENT
_point$ = 8
_this$ = -4
?OnNcHitTest@CSkinListCtrl@@QAEIVCPoint@@@Z PROC NEAR	; CSkinListCtrl::OnNcHitTest

; 810  : {

  017b9	55		 push	 ebp
  017ba	8b ec		 mov	 ebp, esp
  017bc	51		 push	 ecx
  017bd	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 811  : 	OnMouseOver( point );

  017c0	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp+4]
  017c3	50		 push	 eax
  017c4	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  017c7	51		 push	 ecx
  017c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  017cb	8b 02		 mov	 eax, DWORD PTR [edx]
  017cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017d0	ff 90 d0 00 00
	00		 call	 DWORD PTR [eax+208]

; 812  : 	return CWnd::OnNcHitTest( point );

  017d6	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp+4]
  017d9	51		 push	 ecx
  017da	8b 55 08	 mov	 edx, DWORD PTR _point$[ebp]
  017dd	52		 push	 edx
  017de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017e1	e8 00 00 00 00	 call	 ?OnNcHitTest@CWnd@@IAEIVCPoint@@@Z ; CWnd::OnNcHitTest

; 813  : }

  017e6	8b e5		 mov	 esp, ebp
  017e8	5d		 pop	 ebp
  017e9	c2 08 00	 ret	 8
?OnNcHitTest@CSkinListCtrl@@QAEIVCPoint@@@Z ENDP	; CSkinListCtrl::OnNcHitTest
_this$ = -4
?OnMouseOver@CSkinListCtrl@@UAEXVCPoint@@@Z PROC NEAR	; CSkinListCtrl::OnMouseOver

; 817  : {

  017ec	55		 push	 ebp
  017ed	8b ec		 mov	 ebp, esp
  017ef	51		 push	 ecx
  017f0	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 818  : }

  017f3	8b e5		 mov	 esp, ebp
  017f5	5d		 pop	 ebp
  017f6	c2 08 00	 ret	 8
?OnMouseOver@CSkinListCtrl@@UAEXVCPoint@@@Z ENDP	; CSkinListCtrl::OnMouseOver
_TEXT	ENDS
PUBLIC	?PostMessageA@CWnd@@QAEHIIJ@Z			; CWnd::PostMessageA
PUBLIC	?getUpdate@CListData@@QAE_NXZ			; CListData::getUpdate
PUBLIC	?setUpdate@CListData@@QAEX_N@Z			; CListData::setUpdate
_TEXT	SEGMENT
_pNotifyStruct$ = 8
_pResult$ = 12
_this$ = -16
_lplvcd$ = -4
_pData$146113 = -8
_pData1$146118 = -12
?OnCustomDraw@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z PROC NEAR ; CSkinListCtrl::OnCustomDraw

; 822  : {

  017f9	55		 push	 ebp
  017fa	8b ec		 mov	 ebp, esp
  017fc	83 ec 10	 sub	 esp, 16			; 00000010H
  017ff	56		 push	 esi
  01800	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 823  :     LPNMLVCUSTOMDRAW lplvcd = (LPNMLVCUSTOMDRAW) pNotifyStruct;

  01803	8b 45 08	 mov	 eax, DWORD PTR _pNotifyStruct$[ebp]
  01806	89 45 fc	 mov	 DWORD PTR _lplvcd$[ebp], eax

; 824  : 
; 825  : 	if(lplvcd->nmcd.dwDrawStage == CDDS_PREPAINT)

  01809	8b 4d fc	 mov	 ecx, DWORD PTR _lplvcd$[ebp]
  0180c	83 79 0c 01	 cmp	 DWORD PTR [ecx+12], 1
  01810	75 0e		 jne	 SHORT $L146111

; 827  : 		// Request prepaint notifications for each item.
; 828  : 		*pResult = CDRF_NOTIFYITEMDRAW;

  01812	8b 55 0c	 mov	 edx, DWORD PTR _pResult$[ebp]
  01815	c7 02 20 00 00
	00		 mov	 DWORD PTR [edx], 32	; 00000020H

; 829  : 		return;

  0181b	e9 69 01 00 00	 jmp	 $L146108
$L146111:

; 833  :        lplvcd->nmcd.dwItemSpec >= 0 && lplvcd->nmcd.dwItemSpec < GetItemCount())

  01820	8b 45 fc	 mov	 eax, DWORD PTR _lplvcd$[ebp]
  01823	81 78 0c 01 00
	01 00		 cmp	 DWORD PTR [eax+12], 65537 ; 00010001H
  0182a	0f 85 50 01 00
	00		 jne	 $L146112
  01830	8b 4d fc	 mov	 ecx, DWORD PTR _lplvcd$[ebp]
  01833	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  01837	0f 82 43 01 00
	00		 jb	 $L146112
  0183d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01840	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  01845	8b 55 fc	 mov	 edx, DWORD PTR _lplvcd$[ebp]
  01848	39 42 24	 cmp	 DWORD PTR [edx+36], eax
  0184b	0f 83 2f 01 00
	00		 jae	 $L146112

; 835  :        CListData *pData = NULL;

  01851	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pData$146113[ebp], 0

; 836  : 
; 837  :         if ( m_bDoubleLine )

  01858	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0185b	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  01862	74 12		 je	 SHORT $L146114

; 838  :             pData = GetListData(lplvcd->nmcd.dwItemSpec);

  01864	8b 4d fc	 mov	 ecx, DWORD PTR _lplvcd$[ebp]
  01867	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0186a	52		 push	 edx
  0186b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0186e	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  01873	89 45 f8	 mov	 DWORD PTR _pData$146113[ebp], eax
$L146114:

; 839  : 
; 840  :         // Use our own colour for the list items
; 841  : 		// Find which item we are hovering over
; 842  :         if ( pData && pData->getFriend() != LIST_NOFRIEND)

  01876	83 7d f8 00	 cmp	 DWORD PTR _pData$146113[ebp], 0
  0187a	74 6a		 je	 SHORT $L146117
  0187c	8b 4d f8	 mov	 ecx, DWORD PTR _pData$146113[ebp]
  0187f	e8 00 00 00 00	 call	 ?getFriend@CListData@@QAEHXZ ; CListData::getFriend
  01884	83 f8 ff	 cmp	 eax, -1
  01887	74 5d		 je	 SHORT $L146117

; 844  :             if ( pData->getUpdate() )

  01889	8b 4d f8	 mov	 ecx, DWORD PTR _pData$146113[ebp]
  0188c	e8 00 00 00 00	 call	 ?getUpdate@CListData@@QAE_NXZ ; CListData::getUpdate
  01891	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01896	85 c0		 test	 eax, eax
  01898	74 0c		 je	 SHORT $L146116

; 846  :                 pData->setUpdate( false );

  0189a	6a 00		 push	 0
  0189c	8b 4d f8	 mov	 ecx, DWORD PTR _pData$146113[ebp]
  0189f	e8 00 00 00 00	 call	 ?setUpdate@CListData@@QAEX_N@Z ; CListData::setUpdate

; 848  :             else

  018a4	eb 40		 jmp	 SHORT $L146117
$L146116:

; 850  :                 CListData *pData1 = GetListData(pData->getFriend());

  018a6	8b 4d f8	 mov	 ecx, DWORD PTR _pData$146113[ebp]
  018a9	e8 00 00 00 00	 call	 ?getFriend@CListData@@QAEHXZ ; CListData::getFriend
  018ae	50		 push	 eax
  018af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  018b2	e8 00 00 00 00	 call	 ?GetListData@CSkinListCtrl@@QAEPAVCListData@@H@Z ; CSkinListCtrl::GetListData
  018b7	89 45 f4	 mov	 DWORD PTR _pData1$146118[ebp], eax

; 851  :                 pData->setUpdate( true );

  018ba	6a 01		 push	 1
  018bc	8b 4d f8	 mov	 ecx, DWORD PTR _pData$146113[ebp]
  018bf	e8 00 00 00 00	 call	 ?setUpdate@CListData@@QAEX_N@Z ; CListData::setUpdate

; 852  :                 pData1->setUpdate( true );

  018c4	6a 01		 push	 1
  018c6	8b 4d f4	 mov	 ecx, DWORD PTR _pData1$146118[ebp]
  018c9	e8 00 00 00 00	 call	 ?setUpdate@CListData@@QAEX_N@Z ; CListData::setUpdate

; 853  :                 PostMessage( LVM_UPDATE, pData->getFriend(), 0 );

  018ce	6a 00		 push	 0
  018d0	8b 4d f8	 mov	 ecx, DWORD PTR _pData$146113[ebp]
  018d3	e8 00 00 00 00	 call	 ?getFriend@CListData@@QAEHXZ ; CListData::getFriend
  018d8	50		 push	 eax
  018d9	68 2a 10 00 00	 push	 4138			; 0000102aH
  018de	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  018e1	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$L146117:

; 858  :              (pData && GetHotItem() == pData->getFriend() && pData->getFriend() != LIST_NOFRIEND) )

  018e6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  018e9	e8 00 00 00 00	 call	 ?GetHotItem@CListCtrl@@QAEHXZ ; CListCtrl::GetHotItem
  018ee	8b 4d fc	 mov	 ecx, DWORD PTR _lplvcd$[ebp]
  018f1	3b 41 24	 cmp	 eax, DWORD PTR [ecx+36]
  018f4	74 29		 je	 SHORT $L146120
  018f6	83 7d f8 00	 cmp	 DWORD PTR _pData$146113[ebp], 0
  018fa	74 43		 je	 SHORT $L146119
  018fc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  018ff	e8 00 00 00 00	 call	 ?GetHotItem@CListCtrl@@QAEHXZ ; CListCtrl::GetHotItem
  01904	8b f0		 mov	 esi, eax
  01906	8b 4d f8	 mov	 ecx, DWORD PTR _pData$146113[ebp]
  01909	e8 00 00 00 00	 call	 ?getFriend@CListData@@QAEHXZ ; CListData::getFriend
  0190e	3b f0		 cmp	 esi, eax
  01910	75 2d		 jne	 SHORT $L146119
  01912	8b 4d f8	 mov	 ecx, DWORD PTR _pData$146113[ebp]
  01915	e8 00 00 00 00	 call	 ?getFriend@CListData@@QAEHXZ ; CListData::getFriend
  0191a	83 f8 ff	 cmp	 eax, -1
  0191d	74 20		 je	 SHORT $L146119
$L146120:

; 860  : 			lplvcd->clrText   = colItemHovText;

  0191f	8b 55 fc	 mov	 edx, DWORD PTR _lplvcd$[ebp]
  01922	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01925	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0192b	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 861  : 			lplvcd->clrTextBk = colItemHovBG;

  0192e	8b 55 fc	 mov	 edx, DWORD PTR _lplvcd$[ebp]
  01931	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  01934	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0193a	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 863  : 		else

  0193d	eb 36		 jmp	 SHORT $L146121
$L146119:

; 865  : 			lplvcd->clrText   = GetItemTextColor( lplvcd->nmcd.dwItemSpec );

  0193f	8b 55 fc	 mov	 edx, DWORD PTR _lplvcd$[ebp]
  01942	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01945	50		 push	 eax
  01946	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01949	8b 11		 mov	 edx, DWORD PTR [ecx]
  0194b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0194e	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]
  01954	8b 4d fc	 mov	 ecx, DWORD PTR _lplvcd$[ebp]
  01957	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 866  : 			lplvcd->clrTextBk = GetItemBGColor( lplvcd->nmcd.dwItemSpec );

  0195a	8b 55 fc	 mov	 edx, DWORD PTR _lplvcd$[ebp]
  0195d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  01960	50		 push	 eax
  01961	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01964	8b 11		 mov	 edx, DWORD PTR [ecx]
  01966	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  01969	ff 92 c8 00 00
	00		 call	 DWORD PTR [edx+200]
  0196f	8b 4d fc	 mov	 ecx, DWORD PTR _lplvcd$[ebp]
  01972	89 41 34	 mov	 DWORD PTR [ecx+52], eax
$L146121:

; 868  : 
; 869  : 		*pResult = CDRF_NEWFONT;

  01975	8b 55 0c	 mov	 edx, DWORD PTR _pResult$[ebp]
  01978	c7 02 02 00 00
	00		 mov	 DWORD PTR [edx], 2

; 870  : 		return;

  0197e	eb 09		 jmp	 SHORT $L146108
$L146112:

; 872  : 
; 873  : 	*pResult = 0;

  01980	8b 45 0c	 mov	 eax, DWORD PTR _pResult$[ebp]
  01983	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L146108:

; 874  : }

  01989	5e		 pop	 esi
  0198a	8b e5		 mov	 esp, ebp
  0198c	5d		 pop	 ebp
  0198d	c2 08 00	 ret	 8
?OnCustomDraw@CSkinListCtrl@@QAEXPAUtagNMHDR@@PAJ@Z ENDP ; CSkinListCtrl::OnCustomDraw
_TEXT	ENDS
;	COMDAT ?Serialize@CObject@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
_this$ = -4
?Serialize@CObject@@UAEXAAVCArchive@@@Z PROC NEAR	; CObject::Serialize, COMDAT

; 21   : 	{ /* CObject does not serialize anything by default */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Serialize@CObject@@UAEXAAVCArchive@@@Z ENDP		; CObject::Serialize
_TEXT	ENDS
;	COMDAT ??3CObject@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8
??3CObject@@SGXPAX@Z PROC NEAR				; CObject::operator delete, COMDAT

; 27   : 	{ ::operator delete(p); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??3CObject@@SGXPAX@Z ENDP				; CObject::operator delete
_TEXT	ENDS
;	COMDAT ?AssertValid@CObject@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4
?AssertValid@CObject@@UBEXXZ PROC NEAR			; CObject::AssertValid, COMDAT

; 37   : 	{ /* no asserts in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?AssertValid@CObject@@UBEXXZ ENDP			; CObject::AssertValid
_TEXT	ENDS
;	COMDAT ?Dump@CObject@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z PROC NEAR	; CObject::Dump, COMDAT

; 39   : 	{ /* no dumping in release builds */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Dump@CObject@@UBEXAAVCDumpContext@@@Z ENDP		; CObject::Dump
_TEXT	ENDS
;	COMDAT ??BCString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4
??BCString@@QBEPBDXZ PROC NEAR				; CString::operator char const *, COMDAT

; 151  : 	{ return m_pchData; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??BCString@@QBEPBDXZ ENDP				; CString::operator char const *
_TEXT	ENDS
;	COMDAT ??0CSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSize@@QAE@XZ PROC NEAR				; CSize::CSize, COMDAT

; 46   : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CSize@@QAE@XZ ENDP					; CSize::CSize
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CRect@@QAE@XZ PROC NEAR				; CRect::CRect, COMDAT

; 132  : 	{ /* random filled */ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
_TEXT	ENDS
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Width@CRect@@QBEHXZ PROC NEAR				; CRect::Width, COMDAT

; 145  : 	{ return right - left; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Width@CRect@@QBEHXZ ENDP				; CRect::Width
_TEXT	ENDS
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Height@CRect@@QBEHXZ PROC NEAR				; CRect::Height, COMDAT

; 147  : 	{ return bottom - top; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
_TEXT	ENDS
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4
??BCRect@@QAEPAUtagRECT@@XZ PROC NEAR			; CRect::operator tagRECT *, COMDAT

; 165  : 	{ return this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??BCRect@@QAEPAUtagRECT@@XZ ENDP			; CRect::operator tagRECT *
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z ; std::list<CListData *,std::allocator<CListData *> >::_Buynode
;	COMDAT ??0?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@ABV?$allocator@PAVCListData@@@1@@Z
_TEXT	SEGMENT
_this$ = -4
__Al$ = 8
??0?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@ABV?$allocator@PAVCListData@@@1@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::list<CListData *,std::allocator<CListData *> >, COMDAT

; 131  : 		_Head(_Buynode()), _Size(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000a	8a 08		 mov	 cl, BYTE PTR [eax]
  0000c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0000f	88 0a		 mov	 BYTE PTR [edx], cl
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z ; std::list<CListData *,std::allocator<CListData *> >::_Buynode
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@ABV?$allocator@PAVCListData@@@1@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::list<CListData *,std::allocator<CListData *> >
_TEXT	ENDS
PUBLIC	?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::list<CListData *,std::allocator<CListData *> >::erase
PUBLIC	?_Freenode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEXPAU_Node@12@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Freenode
;	COMDAT ??1?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T151619 = -4
$T151620 = -8
$T151621 = -12
_this$ = -16
??1?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::~list<CListData *,std::allocator<CListData *> >, COMDAT

; 151  : 		{erase(begin(), end());

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T151619[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::end
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	51		 push	 ecx
  00018	8d 55 f8	 lea	 edx, DWORD PTR $T151620[ebp]
  0001b	52		 push	 edx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::begin
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	50		 push	 eax
  00027	8d 4d f4	 lea	 ecx, DWORD PTR $T151621[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::list<CListData *,std::allocator<CListData *> >::erase

; 152  : 		_Freenode(_Head);

  00033	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00039	50		 push	 eax
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Freenode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEXPAU_Node@12@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Freenode

; 153  : 		_Head = 0, _Size = 0; }

  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0004c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??1?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::~list<CListData *,std::allocator<CListData *> >
_TEXT	ENDS
PUBLIC	?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next
PUBLIC	??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator
;	COMDAT ?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
$T151623 = -4
___$ReturnUdt$ = 8
_this$ = -8
?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::begin, COMDAT

; 166  : 		{return (iterator(_Acc::_Next(_Head))); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next
  00015	83 c4 04	 add	 esp, 4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	52		 push	 edx
  0001b	8d 4d fc	 lea	 ecx, DWORD PTR $T151623[ebp]
  0001e	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
  00025	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00028	89 01		 mov	 DWORD PTR [ecx], eax
  0002a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::begin
_TEXT	ENDS
;	COMDAT ?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
$T151625 = -4
___$ReturnUdt$ = 8
_this$ = -8
?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::end, COMDAT

; 170  : 		{return (iterator(_Head)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	51		 push	 ecx
  00010	8d 4d fc	 lea	 ecx, DWORD PTR $T151625[ebp]
  00013	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	89 10		 mov	 DWORD PTR [eax], edx
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::end
_TEXT	ENDS
PUBLIC	?size@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEIXZ ; std::list<CListData *,std::allocator<CListData *> >::size
;	COMDAT ?empty@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4
?empty@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NXZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::empty, COMDAT

; 192  : 		{return (size() == 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?size@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEIXZ ; std::list<CListData *,std::allocator<CListData *> >::size
  0000f	f7 d8		 neg	 eax
  00011	1b c0		 sbb	 eax, eax
  00013	40		 inc	 eax
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?empty@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NXZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::empty
_TEXT	ENDS
;	COMDAT ?front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAPAVCListData@@XZ
_TEXT	SEGMENT
$T151628 = -4
_this$ = -8
?front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAPAVCListData@@XZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::front, COMDAT

; 196  : 		{return (*begin()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T151628[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::begin
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ??Diterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEAAPAVCListData@@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator*
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAPAVCListData@@XZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::front
_TEXT	ENDS
;	COMDAT ?pop_front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T151630 = -4
$T151631 = -8
_this$ = -12
?pop_front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::pop_front, COMDAT

; 206  : 		{erase(begin()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T151630[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::begin
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	51		 push	 ecx
  00018	8d 55 f8	 lea	 edx, DWORD PTR $T151631[ebp]
  0001b	52		 push	 edx
  0001c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::list<CListData *,std::allocator<CListData *> >::erase
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?pop_front@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::pop_front
_TEXT	ENDS
;	COMDAT ?push_back@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXABQAVCListData@@@Z
_TEXT	SEGMENT
__X$ = 8
$T151633 = -4
$T151634 = -8
_this$ = -12
?push_back@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXABQAVCListData@@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::push_back, COMDAT

; 208  : 		{insert(end(), _X); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d fc	 lea	 ecx, DWORD PTR $T151633[ebp]
  00010	51		 push	 ecx
  00011	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::end
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	52		 push	 edx
  0001c	8d 45 f8	 lea	 eax, DWORD PTR $T151634[ebp]
  0001f	50		 push	 eax
  00020	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?insert@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCListData@@@Z ; std::list<CListData *,std::allocator<CListData *> >::insert
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?push_back@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXABQAVCListData@@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::push_back
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@ABQAV3@@Z ; std::allocator<CListData *>::construct
PUBLIC	?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
PUBLIC	?_Value@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAVCListData@@PAU_Node@23@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Value
PUBLIC	?_Mynode@const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEPAU_Node@23@XZ ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::_Mynode
;	COMDAT ?insert@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCListData@@@Z
_TEXT	SEGMENT
__P$ = 12
__X$ = 16
$T151636 = -8
___$ReturnUdt$ = 8
_this$ = -12
__S$ = -4
?insert@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCListData@@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::insert, COMDAT

; 218  : 		{_Nodeptr _S = _P._Mynode();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	8d 4d 0c	 lea	 ecx, DWORD PTR __P$[ebp]
  0000d	e8 00 00 00 00	 call	 ?_Mynode@const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEPAU_Node@23@XZ ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::_Mynode
  00012	89 45 fc	 mov	 DWORD PTR __S$[ebp], eax

; 219  : 		_Acc::_Prev(_S) = _Buynode(_S, _Acc::_Prev(_S));

  00015	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
  0001e	83 c4 04	 add	 esp, 4
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	51		 push	 ecx
  00024	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  00027	52		 push	 edx
  00028	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Buynode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z ; std::list<CListData *,std::allocator<CListData *> >::_Buynode
  00030	8b f0		 mov	 esi, eax
  00032	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 30		 mov	 DWORD PTR [eax], esi

; 220  : 		_S = _Acc::_Prev(_S);

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 10		 mov	 edx, DWORD PTR [eax]
  0004e	89 55 fc	 mov	 DWORD PTR __S$[ebp], edx

; 221  : 		_Acc::_Next(_Acc::_Prev(_S)) = _S;

  00051	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
  0005a	83 c4 04	 add	 esp, 4
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next
  00065	83 c4 04	 add	 esp, 4
  00068	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  0006b	89 10		 mov	 DWORD PTR [eax], edx

; 222  : 		allocator.construct(&_Acc::_Value(_S), _X);

  0006d	8b 45 10	 mov	 eax, DWORD PTR __X$[ebp]
  00070	50		 push	 eax
  00071	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ?_Value@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAVCListData@@PAU_Node@23@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Value
  0007a	83 c4 04	 add	 esp, 4
  0007d	50		 push	 eax
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	e8 00 00 00 00	 call	 ?construct@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@ABQAV3@@Z ; std::allocator<CListData *>::construct

; 223  : 		++_Size;

  00086	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00089	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008c	83 c0 01	 add	 eax, 1
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 224  : 		return (iterator(_S)); }

  00095	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  00098	52		 push	 edx
  00099	8d 4d f8	 lea	 ecx, DWORD PTR $T151636[ebp]
  0009c	e8 00 00 00 00	 call	 ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator
  000a1	8b 00		 mov	 eax, DWORD PTR [eax]
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a6	89 01		 mov	 DWORD PTR [ecx], eax
  000a8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCListData@@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::insert
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@@Z ; std::allocator<CListData *>::destroy
;	COMDAT ?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
__P$ = 12
$T151638 = -8
___$ReturnUdt$ = 8
_this$ = -12
__S$ = -4
?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::erase, COMDAT

; 235  : 		{_Nodeptr _S = (_P++)._Mynode();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	6a 00		 push	 0
  0000c	8d 45 f8	 lea	 eax, DWORD PTR $T151638[ebp]
  0000f	50		 push	 eax
  00010	8d 4d 0c	 lea	 ecx, DWORD PTR __P$[ebp]
  00013	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 ?_Mynode@const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEPAU_Node@23@XZ ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::_Mynode
  0001f	89 45 fc	 mov	 DWORD PTR __S$[ebp], eax

; 236  : 		_Acc::_Next(_Acc::_Prev(_S)) = _Acc::_Next(_S);

  00022	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next
  0002b	83 c4 04	 add	 esp, 4
  0002e	8b f0		 mov	 esi, eax
  00030	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
  00039	83 c4 04	 add	 esp, 4
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next
  00044	83 c4 04	 add	 esp, 4
  00047	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00049	89 08		 mov	 DWORD PTR [eax], ecx

; 237  : 		_Acc::_Prev(_Acc::_Next(_S)) = _Acc::_Prev(_S);

  0004b	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
  00054	83 c4 04	 add	 esp, 4
  00057	8b f0		 mov	 esi, eax
  00059	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next
  00062	83 c4 04	 add	 esp, 4
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
  0006d	83 c4 04	 add	 esp, 4
  00070	8b 16		 mov	 edx, DWORD PTR [esi]
  00072	89 10		 mov	 DWORD PTR [eax], edx

; 238  : 		allocator.destroy(&_Acc::_Value(_S));

  00074	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?_Value@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAVCListData@@PAU_Node@23@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Value
  0007d	83 c4 04	 add	 esp, 4
  00080	50		 push	 eax
  00081	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?destroy@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@@Z ; std::allocator<CListData *>::destroy

; 239  : 		_Freenode(_S);

  00089	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ?_Freenode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEXPAU_Node@12@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Freenode

; 240  : 		--_Size;

  00095	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00098	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0009b	83 e8 01	 sub	 eax, 1
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 241  : 		return (_P); }

  000a4	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  000a7	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  000aa	89 02		 mov	 DWORD PTR [edx], eax
  000ac	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000af	5e		 pop	 esi
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::erase
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T151640 = -4
$T151641 = -8
$T151642 = -12
_this$ = -16
?clear@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::clear, COMDAT

; 247  : 		{erase(begin(), end()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T151640[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?end@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::end
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	51		 push	 ecx
  00018	8d 55 f8	 lea	 edx, DWORD PTR $T151641[ebp]
  0001b	52		 push	 edx
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?begin@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@XZ ; std::list<CListData *,std::allocator<CListData *> >::begin
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	50		 push	 eax
  00027	8d 4d f4	 lea	 ecx, DWORD PTR $T151642[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::list<CListData *,std::allocator<CListData *> >::erase
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?clear@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEXXZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::clear
_TEXT	ENDS
PUBLIC	??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::const_iterator
;	COMDAT ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator, COMDAT

; 96   : 		iterator()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::const_iterator
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator
_TEXT	ENDS
;	COMDAT ??Diterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEAAPAVCListData@@XZ
_TEXT	SEGMENT
_this$ = -4
??Diterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEAAPAVCListData@@XZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator*, COMDAT

; 101  : 			{return (_Acc::_Value(_Ptr)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?_Value@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAVCListData@@PAU_Node@23@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Value
  00012	83 c4 04	 add	 esp, 4
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??Diterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEAAPAVCListData@@XZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAV012@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++
;	COMDAT ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -8
__Tmp$ = -4
??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++, COMDAT

; 108  : 			{iterator _Tmp = *this;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 109  : 			++*this;

  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAV012@XZ ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++

; 110  : 			return (_Tmp); }

  00019	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR __Tmp$[ebp]
  0001f	89 02		 mov	 DWORD PTR [edx], eax
  00021	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??8iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator==
;	COMDAT ??9iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
??9iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator!=, COMDAT

; 121  : 			{return (!(*this == _X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __X$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??8iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator==
  00013	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00018	f7 d8		 neg	 eax
  0001a	1b c0		 sbb	 eax, eax
  0001c	40		 inc	 eax
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??9iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator!=
_TEXT	ENDS
PUBLIC	??0CGdiObject@@QAE@XZ				; CGdiObject::CGdiObject
PUBLIC	??_7CFont@@6B@					; CFont::`vftable'
PUBLIC	??_GCFont@@UAEPAXI@Z				; CFont::`scalar deleting destructor'
PUBLIC	??_ECFont@@UAEPAXI@Z				; CFont::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ:NEAR ; CFont::GetRuntimeClass
;	COMDAT ??_7CFont@@6B@
; File C:\Program Files\Microsoft Visual Studio\VC98\MFC\INCLUDE\afxwin1.inl
CONST	SEGMENT
??_7CFont@@6B@ DD FLAT:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ ; CFont::`vftable'
	DD	FLAT:??_ECFont@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CFont@@QAE@XZ PROC NEAR				; CFont::CFont, COMDAT

; 350  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CFont@@6B@ ; CFont::`vftable'
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CFont@@QAE@XZ ENDP					; CFont::CFont
_TEXT	ENDS
PUBLIC	??_7CGdiObject@@6B@				; CGdiObject::`vftable'
PUBLIC	??_GCGdiObject@@UAEPAXI@Z			; CGdiObject::`scalar deleting destructor'
PUBLIC	??_ECGdiObject@@UAEPAXI@Z			; CGdiObject::`vector deleting destructor'
PUBLIC	??0CObject@@IAE@XZ				; CObject::CObject
EXTRN	?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ:NEAR ; CGdiObject::GetRuntimeClass
;	COMDAT ??_7CGdiObject@@6B@
; File C:\Program Files\Microsoft Visual Studio\VC98\MFC\INCLUDE\afxwin1.inl
CONST	SEGMENT
??_7CGdiObject@@6B@ DD FLAT:?GetRuntimeClass@CGdiObject@@UBEPAUCRuntimeClass@@XZ ; CGdiObject::`vftable'
	DD	FLAT:??_ECGdiObject@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CGdiObject@@QAE@XZ PROC NEAR				; CGdiObject::CGdiObject, COMDAT

; 279  : 	{ m_hObject = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@ ; CGdiObject::`vftable'
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CGdiObject@@QAE@XZ ENDP				; CGdiObject::CGdiObject
_TEXT	ENDS
PUBLIC	??_7CObject@@6B@				; CObject::`vftable'
PUBLIC	??_GCObject@@UAEPAXI@Z				; CObject::`scalar deleting destructor'
PUBLIC	??_ECObject@@UAEPAXI@Z				; CObject::`vector deleting destructor'
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:NEAR ; CObject::GetRuntimeClass
;	COMDAT ??_7CObject@@6B@
; File C:\Program Files\Microsoft Visual Studio\VC98\MFC\INCLUDE\afx.inl
CONST	SEGMENT
??_7CObject@@6B@ DD FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ ; CObject::`vftable'
	DD	FLAT:??_ECObject@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CObject@@IAE@XZ PROC NEAR				; CObject::CObject, COMDAT

; 17   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CObject@@6B@ ; CObject::`vftable'
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0CObject@@IAE@XZ ENDP					; CObject::CObject
_TEXT	ENDS
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCObject@@UAEPAXI@Z PROC NEAR			; CObject::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L34926
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L34926:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCObject@@UAEPAXI@Z ENDP				; CObject::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CObject@@UAE@XZ PROC NEAR				; CObject::~CObject, COMDAT

; 19   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CObject@@6B@ ; CObject::`vftable'
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
PUBLIC	??1CGdiObject@@UAE@XZ				; CGdiObject::~CGdiObject
;	COMDAT ??_GCGdiObject@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCGdiObject@@UAEPAXI@Z PROC NEAR			; CGdiObject::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L43280
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L43280:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCGdiObject@@UAEPAXI@Z ENDP				; CGdiObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?DeleteObject@CGdiObject@@QAEHXZ:NEAR		; CGdiObject::DeleteObject
;	COMDAT xdata$x
; File C:\Program Files\Microsoft Visual Studio\VC98\MFC\INCLUDE\afxwin1.inl
xdata$x	SEGMENT
$T151658 DD	019930520H
	DD	01H
	DD	FLAT:$T151660
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T151660 DD	0ffffffffH
	DD	FLAT:$L151656
xdata$x	ENDS
;	COMDAT ??1CGdiObject@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1CGdiObject@@UAE@XZ PROC NEAR				; CGdiObject::~CGdiObject, COMDAT

; 281  : 	{ DeleteObject(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 $L151659
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	51		 push	 ecx
  00019	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGdiObject@@6B@ ; CGdiObject::`vftable'
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?DeleteObject@CGdiObject@@QAEHXZ ; CGdiObject::DeleteObject
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L151656:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00008	c3		 ret	 0
$L151659:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T151658
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CGdiObject@@UAE@XZ ENDP				; CGdiObject::~CGdiObject
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCFont@@UAEPAXI@Z PROC NEAR				; CFont::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L43425
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L43425:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCFont@@UAEPAXI@Z ENDP				; CFont::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CFont@@UAE@XZ PROC NEAR				; CFont::~CFont, COMDAT

; 352  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CFont@@6B@ ; CFont::`vftable'
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CFont@@UAE@XZ ENDP					; CFont::~CFont
_TEXT	ENDS
;	COMDAT ?size@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4
?size@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEIXZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::size, COMDAT

; 188  : 		{return (_Size); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?size@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEIXZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::size
_TEXT	ENDS
;	COMDAT ?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
__F$ = 12
__L$ = 16
$T151668 = -4
$T151669 = -8
___$ReturnUdt$ = 8
_this$ = -12
?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::erase, COMDAT

; 243  : 		{while (_F != _L)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
$L148387:
  00009	8d 45 10	 lea	 eax, DWORD PTR __L$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d 0c	 lea	 ecx, DWORD PTR __F$[ebp]
  00010	e8 00 00 00 00	 call	 ??9iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator!=
  00015	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001a	85 c0		 test	 eax, eax
  0001c	74 1f		 je	 SHORT $L148388

; 244  : 			erase(_F++);

  0001e	6a 00		 push	 0
  00020	8d 4d fc	 lea	 ecx, DWORD PTR $T151668[ebp]
  00023	51		 push	 ecx
  00024	8d 4d 0c	 lea	 ecx, DWORD PTR __F$[ebp]
  00027	e8 00 00 00 00	 call	 ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AV012@H@Z ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++
  0002c	8b 10		 mov	 edx, DWORD PTR [eax]
  0002e	52		 push	 edx
  0002f	8d 45 f8	 lea	 eax, DWORD PTR $T151669[ebp]
  00032	50		 push	 eax
  00033	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::list<CListData *,std::allocator<CListData *> >::erase
  0003b	eb cc		 jmp	 SHORT $L148387
$L148388:

; 245  : 		return (_F); }

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00040	8b 55 0c	 mov	 edx, DWORD PTR __F$[ebp]
  00043	89 11		 mov	 DWORD PTR [ecx], edx
  00045	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::erase
_TEXT	ENDS
PUBLIC	?_Charalloc@?$allocator@PAVCListData@@@std@@QAEPADI@Z ; std::allocator<CListData *>::_Charalloc
;	COMDAT ?_Buynode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z
_TEXT	SEGMENT
__Narg$ = 8
__Parg$ = 12
_this$ = -8
__S$ = -4
?_Buynode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::_Buynode, COMDAT

; 386  : 		{_Nodeptr _S = (_Nodeptr)allocator._Charalloc(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 387  : 			1 * sizeof (_Node));

  00009	6a 0c		 push	 12			; 0000000cH
  0000b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?_Charalloc@?$allocator@PAVCListData@@@std@@QAEPADI@Z ; std::allocator<CListData *>::_Charalloc
  00013	89 45 fc	 mov	 DWORD PTR __S$[ebp], eax

; 388  : 		_Acc::_Next(_S) = _Narg != 0 ? _Narg : _S;

  00016	83 7d 08 00	 cmp	 DWORD PTR __Narg$[ebp], 0
  0001a	74 08		 je	 SHORT $L151671
  0001c	8b 45 08	 mov	 eax, DWORD PTR __Narg$[ebp]
  0001f	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  00022	eb 06		 jmp	 SHORT $L151672
$L151671:
  00024	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00027	89 4d f4	 mov	 DWORD PTR -12+[ebp], ecx
$L151672:
  0002a	8b 55 fc	 mov	 edx, DWORD PTR __S$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next
  00033	83 c4 04	 add	 esp, 4
  00036	8b 4d f4	 mov	 ecx, DWORD PTR -12+[ebp]
  00039	89 08		 mov	 DWORD PTR [eax], ecx

; 389  : 		_Acc::_Prev(_S) = _Parg != 0 ? _Parg : _S;

  0003b	83 7d 0c 00	 cmp	 DWORD PTR __Parg$[ebp], 0
  0003f	74 08		 je	 SHORT $L151673
  00041	8b 55 0c	 mov	 edx, DWORD PTR __Parg$[ebp]
  00044	89 55 f0	 mov	 DWORD PTR -16+[ebp], edx
  00047	eb 06		 jmp	 SHORT $L151674
$L151673:
  00049	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  0004c	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
$L151674:
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR __S$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
  00058	83 c4 04	 add	 esp, 4
  0005b	8b 55 f0	 mov	 edx, DWORD PTR -16+[ebp]
  0005e	89 10		 mov	 DWORD PTR [eax], edx

; 390  : 		return (_S); }

  00060	8b 45 fc	 mov	 eax, DWORD PTR __S$[ebp]
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
?_Buynode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEPAU_Node@12@PAU312@0@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::_Buynode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCListData@@@std@@QAEXPAXI@Z ; std::allocator<CListData *>::deallocate
;	COMDAT ?_Freenode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEXPAU_Node@12@@Z
_TEXT	SEGMENT
__S$ = 8
_this$ = -4
?_Freenode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEXPAU_Node@12@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::_Freenode, COMDAT

; 392  : 		{allocator.deallocate(_S, 1); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 08	 mov	 eax, DWORD PTR __S$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCListData@@@std@@QAEXPAXI@Z ; std::allocator<CListData *>::deallocate
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Freenode@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@IAEXPAU_Node@12@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::_Freenode
_TEXT	ENDS
;	COMDAT ?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z
_TEXT	SEGMENT
__P$ = 8
?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next, COMDAT

; 37   : 			{return ((_Nodepref)(*_P)._Next); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next
_TEXT	ENDS
;	COMDAT ?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z
_TEXT	SEGMENT
__P$ = 8
?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev, COMDAT

; 39   : 			{return ((_Nodepref)(*_P)._Prev); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00006	83 c0 04	 add	 eax, 4
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prev@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Prev
_TEXT	ENDS
;	COMDAT ?_Value@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAVCListData@@PAU_Node@23@@Z
_TEXT	SEGMENT
__P$ = 8
?_Value@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAVCListData@@PAU_Node@23@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Value, COMDAT

; 41   : 			{return ((_Vref)(*_P)._Value); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00006	83 c0 08	 add	 eax, 8
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Value@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAVCListData@@PAU_Node@23@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Value
_TEXT	ENDS
PUBLIC	?_Construct@std@@YAXPAPAVCListData@@ABQAV2@@Z	; std::_Construct
;	COMDAT ?construct@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@ABQAV3@@Z
_TEXT	SEGMENT
__P$ = 8
__V$ = 12
_this$ = -4
?construct@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@ABQAV3@@Z PROC NEAR ; std::allocator<CListData *>::construct, COMDAT

; 66   : 		{_Construct(_P, _V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __V$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?_Construct@std@@YAXPAPAVCListData@@ABQAV2@@Z ; std::_Construct
  00014	83 c4 08	 add	 esp, 8
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?construct@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@ABQAV3@@Z ENDP ; std::allocator<CListData *>::construct
_TEXT	ENDS
PUBLIC	?_Destroy@std@@YAXPAPAVCListData@@@Z		; std::_Destroy
;	COMDAT ?destroy@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@@Z
_TEXT	SEGMENT
__P$ = 8
_this$ = -4
?destroy@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@@Z PROC NEAR ; std::allocator<CListData *>::destroy, COMDAT

; 68   : 		{_Destroy(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?_Destroy@std@@YAXPAPAVCListData@@@Z ; std::_Destroy
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?destroy@?$allocator@PAVCListData@@@std@@QAEXPAPAVCListData@@@Z ENDP ; std::allocator<CListData *>::destroy
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::const_iterator, COMDAT

; 59   : 		const_iterator()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@XZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::const_iterator
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEPAU_Node@23@XZ
_TEXT	SEGMENT
_this$ = -4
?_Mynode@const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEPAU_Node@23@XZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::_Mynode, COMDAT

; 88   : 			{return (_Ptr); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?_Mynode@const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBEPAU_Node@23@XZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::const_iterator
;	COMDAT ??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator, COMDAT

; 98   : 		iterator(_Nodeptr _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::const_iterator
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::iterator::iterator
_TEXT	ENDS
;	COMDAT ??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
_this$ = -4
??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++, COMDAT

; 105  : 			{_Ptr = _Acc::_Next(_Ptr);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?_Next@_Acc@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z ; std::list<CListData *,std::allocator<CListData *> >::_Acc::_Next
  00012	83 c4 04	 add	 esp, 4
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 00		 mov	 eax, DWORD PTR [eax]
  0001a	89 02		 mov	 DWORD PTR [edx], eax

; 106  : 			return (*this); }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??Eiterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator++
_TEXT	ENDS
;	COMDAT ??8iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
_this$ = -4
__X$ = 8
??8iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator==, COMDAT

; 119  : 			{return (_Ptr == _X._Ptr); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __X$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	33 c0		 xor	 eax, eax
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	0f 94 c0	 sete	 al
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??8iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::iterator::operator==
_TEXT	ENDS
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ PROC NEAR		; CWnd::GetSafeHwnd, COMDAT

; 23   : 	{ return this == NULL ? NULL : m_hWnd; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L151687
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
  00016	eb 09		 jmp	 SHORT $L151688
$L151687:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001e	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
$L151688:
  00021	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ENDP		; CWnd::GetSafeHwnd
_TEXT	ENDS
EXTRN	__imp__PostMessageA@16:NEAR
;	COMDAT ?PostMessageA@CWnd@@QAEHIIJ@Z
_TEXT	SEGMENT
_message$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?PostMessageA@CWnd@@QAEHIIJ@Z PROC NEAR			; CWnd::PostMessageA, COMDAT

; 41   : 	{ ASSERT(::IsWindow(m_hWnd)); return ::PostMessage(m_hWnd, message, wParam, lParam); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _message$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?PostMessageA@CWnd@@QAEHIIJ@Z ENDP			; CWnd::PostMessageA
_TEXT	ENDS
PUBLIC	?GetSafeHandle@CGdiObject@@QBEPAXXZ		; CGdiObject::GetSafeHandle
EXTRN	__imp__SendMessageA@16:NEAR
;	COMDAT ?SetFont@CWnd@@QAEXPAVCFont@@H@Z
_TEXT	SEGMENT
_pFont$ = 8
_bRedraw$ = 12
_this$ = -4
?SetFont@CWnd@@QAEXPAVCFont@@H@Z PROC NEAR		; CWnd::SetFont, COMDAT

; 51   : 	{ ASSERT(::IsWindow(m_hWnd)); ::SendMessage(m_hWnd, WM_SETFONT, (WPARAM)pFont->GetSafeHandle(), bRedraw); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _bRedraw$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pFont$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	6a 30		 push	 48			; 00000030H
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0001c	52		 push	 edx
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?SetFont@CWnd@@QAEXPAVCFont@@H@Z ENDP			; CWnd::SetFont
_TEXT	ENDS
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4
?GetSafeHandle@CGdiObject@@QBEPAXXZ PROC NEAR		; CGdiObject::GetSafeHandle, COMDAT

; 277  : 	{ return this == NULL ? NULL : m_hObject; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $L151692
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
  00016	eb 09		 jmp	 SHORT $L151693
$L151692:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
$L151693:
  00021	8b 45 f8	 mov	 eax, DWORD PTR -8+[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHandle@CGdiObject@@QBEPAXXZ ENDP		; CGdiObject::GetSafeHandle
_TEXT	ENDS
PUBLIC	?_Allocate@std@@YAPADHPAD@Z			; std::_Allocate
;	COMDAT ?_Charalloc@?$allocator@PAVCListData@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4
__N$ = 8
?_Charalloc@?$allocator@PAVCListData@@@std@@QAEPADI@Z PROC NEAR ; std::allocator<CListData *>::_Charalloc, COMDAT

; 61   : 		{return (_Allocate((difference_type)_N,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 			(char _FARQ *)0)); }

  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPADHPAD@Z ; std::_Allocate
  00012	83 c4 08	 add	 esp, 8
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Charalloc@?$allocator@PAVCListData@@@std@@QAEPADI@Z ENDP ; std::allocator<CListData *>::_Charalloc
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCListData@@@std@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
?deallocate@?$allocator@PAVCListData@@@std@@QAEXPAXI@Z PROC NEAR ; std::allocator<CListData *>::deallocate, COMDAT

; 64   : 		{operator delete(_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCListData@@@std@@QAEXPAXI@Z ENDP ; std::allocator<CListData *>::deallocate
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z
_TEXT	SEGMENT
_this$ = -4
__P$ = 8
??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z PROC NEAR ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::const_iterator, COMDAT

; 61   : 		const_iterator(_Nodeptr _P)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __P$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0const_iterator@?$list@PAVCListData@@V?$allocator@PAVCListData@@@std@@@std@@QAE@PAU_Node@12@@Z ENDP ; std::list<CListData *,std::allocator<CListData *> >::const_iterator::const_iterator
_TEXT	ENDS
EXTRN	__imp__RedrawWindow@16:NEAR
;	COMDAT ?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z
_TEXT	SEGMENT
_lpRectUpdate$ = 8
_prgnUpdate$ = 12
_flags$ = 16
_this$ = -4
?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z PROC NEAR ; CWnd::RedrawWindow, COMDAT

; 162  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::RedrawWindow(m_hWnd, lpRectUpdate, (HRGN)prgnUpdate->GetSafeHandle(), flags); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _prgnUpdate$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _lpRectUpdate$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RedrawWindow@16
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ENDP	; CWnd::RedrawWindow
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT ?_Construct@std@@YAXPAPAVCListData@@ABQAV2@@Z
_TEXT	SEGMENT
$T151699 = -4
__P$ = 8
__V$ = 12
?_Construct@std@@YAXPAPAVCListData@@ABQAV2@@Z PROC NEAR	; std::_Construct, COMDAT

; 34   : 	{new ((void _FARQ *)_P) _T1(_V); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 08	 mov	 eax, DWORD PTR __P$[ebp]
  00009	50		 push	 eax
  0000a	6a 04		 push	 4
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR $T151699[ebp], eax
  00017	83 7d fc 00	 cmp	 DWORD PTR $T151699[ebp], 0
  0001b	74 12		 je	 SHORT $L151700
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR $T151699[ebp]
  00020	8b 55 0c	 mov	 edx, DWORD PTR __V$[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	89 01		 mov	 DWORD PTR [ecx], eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR $T151699[ebp]
  0002a	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
  0002d	eb 07		 jmp	 SHORT $L151701
$L151700:
  0002f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L151701:
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?_Construct@std@@YAXPAPAVCListData@@ABQAV2@@Z ENDP	; std::_Construct
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAPAVCListData@@@Z
_TEXT	SEGMENT
?_Destroy@std@@YAXPAPAVCListData@@@Z PROC NEAR		; std::_Destroy, COMDAT

; 38   : 	{_DESTRUCTOR(_Ty, _P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?_Destroy@std@@YAXPAPAVCListData@@@Z ENDP		; std::_Destroy
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT
__N$ = 8
?_Allocate@std@@YAPADHPAD@Z PROC NEAR			; std::_Allocate, COMDAT

; 27   : 	{if (_N < 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR __N$[ebp], 0
  00007	7d 07		 jge	 SHORT $L149021

; 28   : 		_N = 0;

  00009	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __N$[ebp], 0
$L149021:

; 30   : 		(_SIZT)_N * sizeof (_Ty))); }

  00010	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Allocate@std@@YAPADHPAD@Z ENDP			; std::_Allocate
_TEXT	ENDS
EXTRN	?Default@CWnd@@IAEJXZ:NEAR			; CWnd::Default
;	COMDAT ?OnNcHitTest@CWnd@@IAEIVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4
?OnNcHitTest@CWnd@@IAEIVCPoint@@@Z PROC NEAR		; CWnd::OnNcHitTest, COMDAT

; 392  : 	{ return (UINT)Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Default@CWnd@@IAEJXZ	; CWnd::Default
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?OnNcHitTest@CWnd@@IAEIVCPoint@@@Z ENDP			; CWnd::OnNcHitTest
_TEXT	ENDS
;	COMDAT ??_ECSkinListCtrl@@WEA@AEPAXI@Z
_TEXT	SEGMENT
??_ECSkinListCtrl@@WEA@AEPAXI@Z PROC NEAR		; CSkinListCtrl::`vector deleting destructor', COMDAT
  00000	83 e9 40	 sub	 ecx, 64			; 00000040H
  00003	e9 00 00 00 00	 jmp	 ??_ECSkinListCtrl@@UAEPAXI@Z ; CSkinListCtrl::`vector deleting destructor'
??_ECSkinListCtrl@@WEA@AEPAXI@Z ENDP			; CSkinListCtrl::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT ??_ECSkinListCtrl@@WHE@AEPAXI@Z
_TEXT	SEGMENT
??_ECSkinListCtrl@@WHE@AEPAXI@Z PROC NEAR		; CSkinListCtrl::`vector deleting destructor', COMDAT
  00000	83 e9 74	 sub	 ecx, 116		; 00000074H
  00003	e9 00 00 00 00	 jmp	 ??_ECSkinListCtrl@@UAEPAXI@Z ; CSkinListCtrl::`vector deleting destructor'
??_ECSkinListCtrl@@WHE@AEPAXI@Z ENDP			; CSkinListCtrl::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
_this$ = -4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z PROC NEAR ; CWnd::DoDataExchange, COMDAT

; 519  : 	{ } // default does nothing

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ENDP	; CWnd::DoDataExchange
_TEXT	ENDS
EXTRN	__imp__EnableWindow@8:NEAR
;	COMDAT ?BeginModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?BeginModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::BeginModalState, COMDAT

; 523  : 	{ ::EnableWindow(m_hWnd, FALSE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?BeginModalState@CWnd@@UAEXXZ ENDP			; CWnd::BeginModalState
_TEXT	ENDS
;	COMDAT ?EndModalState@CWnd@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?EndModalState@CWnd@@UAEXXZ PROC NEAR			; CWnd::EndModalState, COMDAT

; 525  : 	{ ::EnableWindow(m_hWnd, TRUE); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?EndModalState@CWnd@@UAEXXZ ENDP			; CWnd::EndModalState
_TEXT	ENDS
PUBLIC	??_7CListCtrl@@6B@				; CListCtrl::`vftable'
PUBLIC	??_GCListCtrl@@UAEPAXI@Z			; CListCtrl::`scalar deleting destructor'
PUBLIC	??_ECListCtrl@@UAEPAXI@Z			; CListCtrl::`vector deleting destructor'
EXTRN	??0CWnd@@QAE@XZ:NEAR				; CWnd::CWnd
EXTRN	?GetMessageMap@CListCtrl@@MBEPBUAFX_MSGMAP@@XZ:NEAR ; CListCtrl::GetMessageMap
;	COMDAT ??_7CListCtrl@@6B@
; File C:\Program Files\Microsoft Visual Studio\VC98\MFC\INCLUDE\afxcmn.inl
CONST	SEGMENT
??_7CListCtrl@@6B@ DD FLAT:?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ ; CListCtrl::`vftable'
	DD	FLAT:??_ECListCtrl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CListCtrl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?DrawItem@CListCtrl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
CONST	ENDS
;	COMDAT ??0CListCtrl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CListCtrl@@QAE@XZ PROC NEAR				; CListCtrl::CListCtrl, COMDAT

; 122  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CWnd@@QAE@XZ		; CWnd::CWnd
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CListCtrl@@6B@ ; CListCtrl::`vftable'
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CListCtrl@@QAE@XZ ENDP				; CListCtrl::CListCtrl
_TEXT	ENDS
;	COMDAT ??_GCListCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCListCtrl@@UAEPAXI@Z PROC NEAR			; CListCtrl::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CListCtrl@@UAE@XZ	; CListCtrl::~CListCtrl
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $L83268
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$L83268:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_GCListCtrl@@UAEPAXI@Z ENDP				; CListCtrl::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ?SetBkColor@CListCtrl@@QAEHK@Z
_TEXT	SEGMENT
_cr$ = 8
_this$ = -4
?SetBkColor@CListCtrl@@QAEHK@Z PROC NEAR		; CListCtrl::SetBkColor, COMDAT

; 126  : 	{ ASSERT(::IsWindow(m_hWnd)); return (BOOL) ::SendMessage(m_hWnd, LVM_SETBKCOLOR, 0, cr); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _cr$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 01 10 00 00	 push	 4097			; 00001001H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetBkColor@CListCtrl@@QAEHK@Z ENDP			; CListCtrl::SetBkColor
_TEXT	ENDS
;	COMDAT ?GetItemCount@CListCtrl@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetItemCount@CListCtrl@@QBEHXZ PROC NEAR		; CListCtrl::GetItemCount, COMDAT

; 132  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, LVM_GETITEMCOUNT, 0, 0L); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 04 10 00 00	 push	 4100			; 00001004H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetItemCount@CListCtrl@@QBEHXZ ENDP			; CListCtrl::GetItemCount
_TEXT	ENDS
;	COMDAT ?GetItem@CListCtrl@@QBEHPAUtagLVITEMA@@@Z
_TEXT	SEGMENT
_pItem$ = 8
_this$ = -4
?GetItem@CListCtrl@@QBEHPAUtagLVITEMA@@@Z PROC NEAR	; CListCtrl::GetItem, COMDAT

; 134  : 	{ ASSERT(::IsWindow(m_hWnd)); return (BOOL) ::SendMessage(m_hWnd, LVM_GETITEM, 0, (LPARAM)pItem); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 05 10 00 00	 push	 4101			; 00001005H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetItem@CListCtrl@@QBEHPAUtagLVITEMA@@@Z ENDP		; CListCtrl::GetItem
_TEXT	ENDS
;	COMDAT ?SetItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z
_TEXT	SEGMENT
_pItem$ = 8
_this$ = -4
?SetItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z PROC NEAR	; CListCtrl::SetItem, COMDAT

; 136  : 	{ ASSERT(::IsWindow(m_hWnd)); return (BOOL) ::SendMessage(m_hWnd, LVM_SETITEM, 0, (LPARAM)pItem); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 06 10 00 00	 push	 4102			; 00001006H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z ENDP		; CListCtrl::SetItem
_TEXT	ENDS
;	COMDAT ?InsertItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z
_TEXT	SEGMENT
_pItem$ = 8
_this$ = -4
?InsertItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z PROC NEAR	; CListCtrl::InsertItem, COMDAT

; 140  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, LVM_INSERTITEM, 0, (LPARAM)pItem); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 07 10 00 00	 push	 4103			; 00001007H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?InsertItem@CListCtrl@@QAEHPBUtagLVITEMA@@@Z ENDP	; CListCtrl::InsertItem
_TEXT	ENDS
;	COMDAT ?InsertItem@CListCtrl@@QAEHHPBD@Z
_TEXT	SEGMENT
_nItem$ = 8
_lpszItem$ = 12
_this$ = -4
?InsertItem@CListCtrl@@QAEHHPBD@Z PROC NEAR		; CListCtrl::InsertItem, COMDAT

; 142  : 	{ ASSERT(::IsWindow(m_hWnd)); return InsertItem(LVIF_TEXT, nItem, lpszItem, 0, 0, 0, 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _lpszItem$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _nItem$[ebp]
  00016	51		 push	 ecx
  00017	6a 01		 push	 1
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?InsertItem@CListCtrl@@QAEHIHPBDIIHJ@Z ; CListCtrl::InsertItem
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?InsertItem@CListCtrl@@QAEHHPBD@Z ENDP			; CListCtrl::InsertItem
_TEXT	ENDS
;	COMDAT ?InsertItem@CListCtrl@@QAEHHPBDH@Z
_TEXT	SEGMENT
_nItem$ = 8
_lpszItem$ = 12
_nImage$ = 16
_this$ = -4
?InsertItem@CListCtrl@@QAEHHPBDH@Z PROC NEAR		; CListCtrl::InsertItem, COMDAT

; 144  : 	{ ASSERT(::IsWindow(m_hWnd)); return InsertItem(LVIF_TEXT|LVIF_IMAGE, nItem, lpszItem, 0, 0, nImage, 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 10	 mov	 eax, DWORD PTR _nImage$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _lpszItem$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _nItem$[ebp]
  00018	52		 push	 edx
  00019	6a 03		 push	 3
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?InsertItem@CListCtrl@@QAEHIHPBDIIHJ@Z ; CListCtrl::InsertItem
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
?InsertItem@CListCtrl@@QAEHHPBDH@Z ENDP			; CListCtrl::InsertItem
_TEXT	ENDS
;	COMDAT ?DeleteItem@CListCtrl@@QAEHH@Z
_TEXT	SEGMENT
_nItem$ = 8
_this$ = -4
?DeleteItem@CListCtrl@@QAEHH@Z PROC NEAR		; CListCtrl::DeleteItem, COMDAT

; 146  : 	{ ASSERT(::IsWindow(m_hWnd)); return (BOOL) ::SendMessage(m_hWnd, LVM_DELETEITEM, nItem, 0L); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR _nItem$[ebp]
  0000c	50		 push	 eax
  0000d	68 08 10 00 00	 push	 4104			; 00001008H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?DeleteItem@CListCtrl@@QAEHH@Z ENDP			; CListCtrl::DeleteItem
_TEXT	ENDS
;	COMDAT ?DeleteAllItems@CListCtrl@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?DeleteAllItems@CListCtrl@@QAEHXZ PROC NEAR		; CListCtrl::DeleteAllItems, COMDAT

; 148  : 	{ ASSERT(::IsWindow(m_hWnd)); return (BOOL) ::SendMessage(m_hWnd, LVM_DELETEALLITEMS, 0, 0L); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 09 10 00 00	 push	 4105			; 00001009H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?DeleteAllItems@CListCtrl@@QAEHXZ ENDP			; CListCtrl::DeleteAllItems
_TEXT	ENDS
;	COMDAT ?FindItem@CListCtrl@@QBEHPAUtagLVFINDINFOA@@H@Z
_TEXT	SEGMENT
_pFindInfo$ = 8
_nStart$ = 12
_this$ = -4
?FindItem@CListCtrl@@QBEHPAUtagLVFINDINFOA@@H@Z PROC NEAR ; CListCtrl::FindItem, COMDAT

; 160  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, LVM_FINDITEM, nStart, (LPARAM)pFindInfo); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pFindInfo$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nStart$[ebp]
  0000e	51		 push	 ecx
  0000f	68 0d 10 00 00	 push	 4109			; 0000100dH
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?FindItem@CListCtrl@@QBEHPAUtagLVFINDINFOA@@H@Z ENDP	; CListCtrl::FindItem
_TEXT	ENDS
;	COMDAT ?GetStringWidth@CListCtrl@@QBEHPBD@Z
_TEXT	SEGMENT
_lpsz$ = 8
_this$ = -4
?GetStringWidth@CListCtrl@@QBEHPBD@Z PROC NEAR		; CListCtrl::GetStringWidth, COMDAT

; 168  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, LVM_GETSTRINGWIDTH, 0, (LPARAM)lpsz); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpsz$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 11 10 00 00	 push	 4113			; 00001011H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetStringWidth@CListCtrl@@QBEHPBD@Z ENDP		; CListCtrl::GetStringWidth
_TEXT	ENDS
;	COMDAT ?Scroll@CListCtrl@@QAEHVCSize@@@Z
_TEXT	SEGMENT
_size$ = 8
_this$ = -4
?Scroll@CListCtrl@@QAEHVCSize@@@Z PROC NEAR		; CListCtrl::Scroll, COMDAT

; 172  : 	{ ASSERT(::IsWindow(m_hWnd)); return (BOOL) ::SendMessage(m_hWnd, LVM_SCROLL, size.cx, size.cy); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp+4]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0000e	51		 push	 ecx
  0000f	68 14 10 00 00	 push	 4116			; 00001014H
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?Scroll@CListCtrl@@QAEHVCSize@@@Z ENDP			; CListCtrl::Scroll
_TEXT	ENDS
;	COMDAT ?GetColumnWidth@CListCtrl@@QBEHH@Z
_TEXT	SEGMENT
_nCol$ = 8
_this$ = -4
?GetColumnWidth@CListCtrl@@QBEHH@Z PROC NEAR		; CListCtrl::GetColumnWidth, COMDAT

; 190  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, LVM_GETCOLUMNWIDTH, nCol, 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR _nCol$[ebp]
  0000c	50		 push	 eax
  0000d	68 1d 10 00 00	 push	 4125			; 0000101dH
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetColumnWidth@CListCtrl@@QBEHH@Z ENDP			; CListCtrl::GetColumnWidth
_TEXT	ENDS
;	COMDAT ?GetTopIndex@CListCtrl@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetTopIndex@CListCtrl@@QBEHXZ PROC NEAR		; CListCtrl::GetTopIndex, COMDAT

; 204  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, LVM_GETTOPINDEX, 0, 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 27 10 00 00	 push	 4135			; 00001027H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetTopIndex@CListCtrl@@QBEHXZ ENDP			; CListCtrl::GetTopIndex
_TEXT	ENDS
;	COMDAT ?GetCountPerPage@CListCtrl@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetCountPerPage@CListCtrl@@QBEHXZ PROC NEAR		; CListCtrl::GetCountPerPage, COMDAT

; 206  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, LVM_GETCOUNTPERPAGE, 0, 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 28 10 00 00	 push	 4136			; 00001028H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetCountPerPage@CListCtrl@@QBEHXZ ENDP			; CListCtrl::GetCountPerPage
_TEXT	ENDS
;	COMDAT ?Update@CListCtrl@@QAEHH@Z
_TEXT	SEGMENT
_nItem$ = 8
_this$ = -4
?Update@CListCtrl@@QAEHH@Z PROC NEAR			; CListCtrl::Update, COMDAT

; 210  : 	{ ASSERT(::IsWindow(m_hWnd)); return (BOOL) ::SendMessage(m_hWnd, LVM_UPDATE, nItem, 0L); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR _nItem$[ebp]
  0000c	50		 push	 eax
  0000d	68 2a 10 00 00	 push	 4138			; 0000102aH
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?Update@CListCtrl@@QAEHH@Z ENDP				; CListCtrl::Update
_TEXT	ENDS
;	COMDAT ?SetExtendedStyle@CListCtrl@@QAEKK@Z
_TEXT	SEGMENT
_dwNewStyle$ = 8
_this$ = -4
?SetExtendedStyle@CListCtrl@@QAEKK@Z PROC NEAR		; CListCtrl::SetExtendedStyle, COMDAT

; 99   : 	{ ASSERT(::IsWindow(m_hWnd)); return (DWORD) ::SendMessage(m_hWnd, LVM_SETEXTENDEDLISTVIEWSTYLE, 0, (LPARAM) dwNewStyle); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _dwNewStyle$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 36 10 00 00	 push	 4150			; 00001036H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetExtendedStyle@CListCtrl@@QAEKK@Z ENDP		; CListCtrl::SetExtendedStyle
_TEXT	ENDS
;	COMDAT ?GetHotItem@CListCtrl@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetHotItem@CListCtrl@@QAEHXZ PROC NEAR			; CListCtrl::GetHotItem, COMDAT

; 111  : 	{ ASSERT(::IsWindow(m_hWnd)); return (int) ::SendMessage(m_hWnd, LVM_GETHOTITEM, 0, 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 3d 10 00 00	 push	 4157			; 0000103dH
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetHotItem@CListCtrl@@QAEHXZ ENDP			; CListCtrl::GetHotItem
_TEXT	ENDS
;	COMDAT ?SetHoverTime@CListCtrl@@QAEKK@Z
_TEXT	SEGMENT
_dwHoverTime$ = 8
_this$ = -4
?SetHoverTime@CListCtrl@@QAEKK@Z PROC NEAR		; CListCtrl::SetHoverTime, COMDAT

; 125  : 	{ ASSERT(::IsWindow(m_hWnd)); return (DWORD)::SendMessage(m_hWnd, LVM_SETHOVERTIME, 0, dwHoverTime); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _dwHoverTime$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	68 47 10 00 00	 push	 4167			; 00001047H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetHoverTime@CListCtrl@@QAEKK@Z ENDP			; CListCtrl::SetHoverTime
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__P$ = 12
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 42   : 	{return (_P); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __P$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
;	COMDAT ??0CListData@@QAE@HH@Z
_TEXT	SEGMENT
_nFriend$ = 8
_nIndex$ = 12
_this$ = -4
??0CListData@@QAE@HH@Z PROC NEAR			; CListData::CListData, COMDAT

; 37   :     CListData( int nFriend, int nIndex ) 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   :     { 
; 39   :         m_nFriend    = nFriend;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _nFriend$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 40   :         m_bUpdate    = false;

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	c6 42 08 00	 mov	 BYTE PTR [edx+8], 0

; 41   :         m_nTrueIndex = nIndex;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 42   :     };

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0CListData@@QAE@HH@Z ENDP				; CListData::CListData
_TEXT	ENDS
;	COMDAT ?getFriend@CListData@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?getFriend@CListData@@QAEHXZ PROC NEAR			; CListData::getFriend, COMDAT

; 45   : 	int	 getFriend() { return m_nFriend; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?getFriend@CListData@@QAEHXZ ENDP			; CListData::getFriend
_TEXT	ENDS
;	COMDAT ?setFriend@CListData@@QAEXH@Z
_TEXT	SEGMENT
_nFriend$ = 8
_this$ = -4
?setFriend@CListData@@QAEXH@Z PROC NEAR			; CListData::setFriend, COMDAT

; 46   : 	void setFriend( int nFriend )  { m_nFriend = nFriend; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _nFriend$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?setFriend@CListData@@QAEXH@Z ENDP			; CListData::setFriend
_TEXT	ENDS
;	COMDAT ?getUpdate@CListData@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4
?getUpdate@CListData@@QAE_NXZ PROC NEAR			; CListData::getUpdate, COMDAT

; 47   : 	bool getUpdate() { return m_bUpdate; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 40 08	 mov	 al, BYTE PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?getUpdate@CListData@@QAE_NXZ ENDP			; CListData::getUpdate
_TEXT	ENDS
;	COMDAT ?setUpdate@CListData@@QAEX_N@Z
_TEXT	SEGMENT
_bUpdate$ = 8
_this$ = -4
?setUpdate@CListData@@QAEX_N@Z PROC NEAR		; CListData::setUpdate, COMDAT

; 48   : 	void setUpdate( bool bUpdate ) { m_bUpdate = bUpdate; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 4d 08	 mov	 cl, BYTE PTR _bUpdate$[ebp]
  0000d	88 48 08	 mov	 BYTE PTR [eax+8], cl
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?setUpdate@CListData@@QAEX_N@Z ENDP			; CListData::setUpdate
_TEXT	ENDS
;	COMDAT ?getTrueIndex@CListData@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?getTrueIndex@CListData@@QAEHXZ PROC NEAR		; CListData::getTrueIndex, COMDAT

; 49   : 	int  getTrueIndex() { return m_nTrueIndex; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?getTrueIndex@CListData@@QAEHXZ ENDP			; CListData::getTrueIndex
_TEXT	ENDS
;	COMDAT ?setTrueIndex@CListData@@QAEXH@Z
_TEXT	SEGMENT
_nIndex$ = 8
_this$ = -4
?setTrueIndex@CListData@@QAEXH@Z PROC NEAR		; CListData::setTrueIndex, COMDAT

; 50   : 	void setTrueIndex( int nIndex ) { m_nTrueIndex = nIndex; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?setTrueIndex@CListData@@QAEXH@Z ENDP			; CListData::setTrueIndex
_TEXT	ENDS
;	COMDAT ?GetItemTextColor@CSkinListCtrl@@MAEKH@Z
_TEXT	SEGMENT
_this$ = -4
?GetItemTextColor@CSkinListCtrl@@MAEKH@Z PROC NEAR	; CSkinListCtrl::GetItemTextColor, COMDAT

; 90   : 	virtual COLORREF GetItemTextColor( int nItem ) { return colItemText; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [eax+168]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?GetItemTextColor@CSkinListCtrl@@MAEKH@Z ENDP		; CSkinListCtrl::GetItemTextColor
_TEXT	ENDS
;	COMDAT ?GetItemBGColor@CSkinListCtrl@@MAEKH@Z
_TEXT	SEGMENT
_this$ = -4
?GetItemBGColor@CSkinListCtrl@@MAEKH@Z PROC NEAR	; CSkinListCtrl::GetItemBGColor, COMDAT

; 91   : 	virtual COLORREF GetItemBGColor( int nItem ) { return colItemBG; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?GetItemBGColor@CSkinListCtrl@@MAEKH@Z ENDP		; CSkinListCtrl::GetItemBGColor
_TEXT	ENDS
END

	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Drawlist.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BM@LHED@Instructed?5to?5scale?5to?5zero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SCI_Point@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@NN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeEmpty@SOL_Rect@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Xlen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Ylen@SOL_Rect@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHVSOL_Point@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Intersect@SOL_Rect@@QBEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8SOL_Rect@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Ratio@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@V1@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Rgb24@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Rgb24F@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@VMemID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Bitmap@@QAE@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Type@Bitmap@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObj@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@CelObj@@QBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemapState@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mirrored@CelObj@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObj@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjView@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjView@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjMem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjMem@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjMem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjMem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Duplicate@CelObjColor@@UBEPAVCelObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CelObjColor@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCelObjColor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CelObjColor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Id@ScreenItem@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Priority@ScreenItem@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@ScreenItem@@QAEXABVBuffer@@ABVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4SOL_Rect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DrawItem@@QAE@PAVScreenItem@@AAVSOL_Rect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CelObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjColor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CelObjMem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??0DrawList@@QAE@XZ				; DrawList::DrawList
_TEXT	SEGMENT
_this$ = -4
??0DrawList@@QAE@XZ PROC NEAR				; DrawList::DrawList

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 13   : 	length = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 14   : }

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0DrawList@@QAE@XZ ENDP				; DrawList::DrawList
_TEXT	ENDS
PUBLIC	??1DrawList@@QAE@XZ				; DrawList::~DrawList
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
_TEXT	SEGMENT
_this$ = -12
_i$ = -4
$T56666 = -8
??1DrawList@@QAE@XZ PROC NEAR				; DrawList::~DrawList

; 19   : {

  00017	55		 push	 ebp
  00018	8b ec		 mov	 ebp, esp
  0001a	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001d	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	for (int i = 0; i < length; i++)

  00020	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00027	eb 09		 jmp	 SHORT $L56542
$L56543:
  00029	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002c	83 c0 01	 add	 eax, 1
  0002f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L56542:
  00032	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	7d 1b		 jge	 SHORT $L56544

; 21   : 		delete drawArray[i];

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  00046	89 55 f8	 mov	 DWORD PTR $T56666[ebp], edx
  00049	8b 45 f8	 mov	 eax, DWORD PTR $T56666[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00052	83 c4 04	 add	 esp, 4
  00055	eb d2		 jmp	 SHORT $L56543
$L56544:

; 22   : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??1DrawList@@QAE@XZ ENDP				; DrawList::~DrawList
_TEXT	ENDS
PUBLIC	??0DrawItem@@QAE@PAVScreenItem@@AAVSOL_Rect@@@Z	; DrawItem::DrawItem
PUBLIC	?Add@DrawList@@QAEHPAVScreenItem@@AAVSOL_Rect@@@Z ; DrawList::Add
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?Fatal@MsgMgr@@QAAXDPADH0ZZ:NEAR		; MsgMgr::Fatal
EXTRN	?msgMgr@@3PAVMsgMgr@@A:DWORD			; msgMgr
_DATA	SEGMENT
$SG56552 DB	'Draw items list exceeds %d', 00H
	ORG $+1
$SG56553 DB	'C:\Documents and Settings\don\Desktop\sciw\Interp\Drawli'
	DB	'st.cpp', 00H
_DATA	ENDS
xdata$x	SEGMENT
$T56676	DD	019930520H
	DD	01H
	DD	FLAT:$T56679
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T56679	DD	0ffffffffH
	DD	FLAT:$L56672
xdata$x	ENDS
_TEXT	SEGMENT
_screenItem$ = 8
_drawRect$ = 12
_this$ = -24
$T56668 = -16
$T56669 = -20
__$EHRec$ = -12
?Add@DrawList@@QAEHPAVScreenItem@@AAVSOL_Rect@@@Z PROC NEAR ; DrawList::Add

; 29   : {

  0005b	55		 push	 ebp
  0005c	8b ec		 mov	 ebp, esp
  0005e	6a ff		 push	 -1
  00060	68 00 00 00 00	 push	 $L56677
  00065	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0006b	50		 push	 eax
  0006c	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00073	83 ec 10	 sub	 esp, 16			; 00000010H
  00076	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	if (length == MAXDRAW)

  00079	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	81 38 d0 07 00
	00		 cmp	 DWORD PTR [eax], 2000	; 000007d0H
  00082	75 22		 jne	 SHORT $L56551

; 31   : 		msgMgr->Fatal(SrcLoc,"Draw items list exceeds %d",MAXDRAW);

  00084	68 d0 07 00 00	 push	 2000			; 000007d0H
  00089	68 00 00 00 00	 push	 OFFSET FLAT:$SG56552
  0008e	6a 1f		 push	 31			; 0000001fH
  00090	68 00 00 00 00	 push	 OFFSET FLAT:$SG56553
  00095	6a 61		 push	 97			; 00000061H
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADH0ZZ ; MsgMgr::Fatal
  000a3	83 c4 18	 add	 esp, 24			; 00000018H
$L56551:

; 32   : 
; 33   : 	// if this item is already in here, don't add it again
; 34   : //	for ( int i=0; i<length; i++ ) {
; 35   : //		if ( drawArray[i] && (drawArray[i]->si == screenItem) )
; 36   : //			return i;
; 37   : //	}
; 38   : 
; 39   : 	drawArray[length] = New DrawItem(screenItem,drawRect);

  000a6	6a 14		 push	 20			; 00000014H
  000a8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ad	83 c4 04	 add	 esp, 4
  000b0	89 45 ec	 mov	 DWORD PTR $T56669[ebp], eax
  000b3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ba	83 7d ec 00	 cmp	 DWORD PTR $T56669[ebp], 0
  000be	74 15		 je	 SHORT $L56670
  000c0	8b 55 0c	 mov	 edx, DWORD PTR _drawRect$[ebp]
  000c3	52		 push	 edx
  000c4	8b 45 08	 mov	 eax, DWORD PTR _screenItem$[ebp]
  000c7	50		 push	 eax
  000c8	8b 4d ec	 mov	 ecx, DWORD PTR $T56669[ebp]
  000cb	e8 00 00 00 00	 call	 ??0DrawItem@@QAE@PAVScreenItem@@AAVSOL_Rect@@@Z ; DrawItem::DrawItem
  000d0	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  000d3	eb 07		 jmp	 SHORT $L56671
$L56670:
  000d5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L56671:
  000dc	8b 4d e4	 mov	 ecx, DWORD PTR -28+[ebp]
  000df	89 4d f0	 mov	 DWORD PTR $T56668[ebp], ecx
  000e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e9	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	8b 02		 mov	 eax, DWORD PTR [edx]
  000ee	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	8b 55 f0	 mov	 edx, DWORD PTR $T56668[ebp]
  000f4	89 54 81 04	 mov	 DWORD PTR [ecx+eax*4+4], edx

; 40   : 	return (length++);

  000f8	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000fb	8b 00		 mov	 eax, DWORD PTR [eax]
  000fd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	8b 11		 mov	 edx, DWORD PTR [ecx]
  00102	83 c2 01	 add	 edx, 1
  00105	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	89 11		 mov	 DWORD PTR [ecx], edx

; 41   : }

  0010a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
$L56672:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T56669[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L56677:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T56676
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Add@DrawList@@QAEHPAVScreenItem@@AAVSOL_Rect@@@Z ENDP	; DrawList::Add
PUBLIC	?Pack@DrawList@@QAEXXZ				; DrawList::Pack
_TEXT	SEGMENT
_this$ = -20
_src$ = -16
_dest$ = -4
_newlen$ = -8
_i$ = -12
?Pack@DrawList@@QAEXXZ PROC NEAR			; DrawList::Pack

; 49   : {

  0011a	55		 push	 ebp
  0011b	8b ec		 mov	 ebp, esp
  0011d	83 ec 14	 sub	 esp, 20			; 00000014H
  00120	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 	DrawItem** src = drawArray;

  00123	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00126	83 c0 04	 add	 eax, 4
  00129	89 45 f0	 mov	 DWORD PTR _src$[ebp], eax

; 51   : 	DrawItem** dest = drawArray;

  0012c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	83 c1 04	 add	 ecx, 4
  00132	89 4d fc	 mov	 DWORD PTR _dest$[ebp], ecx

; 52   : 	int newlen = 0;

  00135	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _newlen$[ebp], 0

; 53   : 
; 54   : 	for (int i = 0; i < length; i++, src++)  {

  0013c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00143	eb 12		 jmp	 SHORT $L56565
$L56566:
  00145	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00148	83 c2 01	 add	 edx, 1
  0014b	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
  0014e	8b 45 f0	 mov	 eax, DWORD PTR _src$[ebp]
  00151	83 c0 04	 add	 eax, 4
  00154	89 45 f0	 mov	 DWORD PTR _src$[ebp], eax
$L56565:
  00157	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0015d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0015f	7d 26		 jge	 SHORT $L56567

; 55   : 		if (*src)  {

  00161	8b 45 f0	 mov	 eax, DWORD PTR _src$[ebp]
  00164	83 38 00	 cmp	 DWORD PTR [eax], 0
  00167	74 1c		 je	 SHORT $L56568

; 56   : 			*dest++ = *src;

  00169	8b 4d fc	 mov	 ecx, DWORD PTR _dest$[ebp]
  0016c	8b 55 f0	 mov	 edx, DWORD PTR _src$[ebp]
  0016f	8b 02		 mov	 eax, DWORD PTR [edx]
  00171	89 01		 mov	 DWORD PTR [ecx], eax
  00173	8b 4d fc	 mov	 ecx, DWORD PTR _dest$[ebp]
  00176	83 c1 04	 add	 ecx, 4
  00179	89 4d fc	 mov	 DWORD PTR _dest$[ebp], ecx

; 57   : 			newlen++;

  0017c	8b 55 f8	 mov	 edx, DWORD PTR _newlen$[ebp]
  0017f	83 c2 01	 add	 edx, 1
  00182	89 55 f8	 mov	 DWORD PTR _newlen$[ebp], edx
$L56568:

; 59   : 	}

  00185	eb be		 jmp	 SHORT $L56566
$L56567:

; 60   : 	length = newlen;

  00187	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0018a	8b 4d f8	 mov	 ecx, DWORD PTR _newlen$[ebp]
  0018d	89 08		 mov	 DWORD PTR [eax], ecx

; 61   : }

  0018f	8b e5		 mov	 esp, ebp
  00191	5d		 pop	 ebp
  00192	c3		 ret	 0
?Pack@DrawList@@QAEXXZ ENDP				; DrawList::Pack
_TEXT	ENDS
PUBLIC	?Delete@DrawList@@QAEXH@Z			; DrawList::Delete
EXTRN	?Fatal@MsgMgr@@QAAXDPADHHZZ:NEAR		; MsgMgr::Fatal
_DATA	SEGMENT
	ORG $+1
$SG56575 DB	'C:\Documents and Settings\don\Desktop\sciw\Interp\Drawli'
	DB	'st.cpp', 00H
_DATA	ENDS
_TEXT	SEGMENT
_index$ = 8
_this$ = -8
$T56683 = -4
?Delete@DrawList@@QAEXH@Z PROC NEAR			; DrawList::Delete

; 67   : {

  00193	55		 push	 ebp
  00194	8b ec		 mov	 ebp, esp
  00196	83 ec 08	 sub	 esp, 8
  00199	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 
; 69   : 	if ((index < 0) || (index > length) || (drawArray[index] == NULL) )

  0019c	83 7d 08 00	 cmp	 DWORD PTR _index$[ebp], 0
  001a0	7c 17		 jl	 SHORT $L56574
  001a2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  001a8	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001aa	7f 0d		 jg	 SHORT $L56574
  001ac	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  001af	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	83 7c 90 04 00	 cmp	 DWORD PTR [eax+edx*4+4], 0
  001b7	75 1a		 jne	 SHORT $L56573
$L56574:

; 70   : 		msgMgr->Fatal(SrcLoc, Msg_InvalidScreenItemIndex);

  001b9	6a 5f		 push	 95			; 0000005fH
  001bb	6a 46		 push	 70			; 00000046H
  001bd	68 00 00 00 00	 push	 OFFSET FLAT:$SG56575
  001c2	6a 61		 push	 97			; 00000061H
  001c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?msgMgr@@3PAVMsgMgr@@A ; msgMgr
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 ?Fatal@MsgMgr@@QAAXDPADHHZZ ; MsgMgr::Fatal
  001d0	83 c4 14	 add	 esp, 20			; 00000014H
$L56573:

; 71   : 
; 72   : 	delete drawArray[index];

  001d3	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  001d6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001d9	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  001dd	89 4d fc	 mov	 DWORD PTR $T56683[ebp], ecx
  001e0	8b 55 fc	 mov	 edx, DWORD PTR $T56683[ebp]
  001e3	52		 push	 edx
  001e4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001e9	83 c4 04	 add	 esp, 4

; 73   : 	drawArray[index] = NULL;

  001ec	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001f2	c7 44 81 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+4], 0

; 74   : }

  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c2 04 00	 ret	 4
?Delete@DrawList@@QAEXH@Z ENDP				; DrawList::Delete
_TEXT	ENDS
PUBLIC	?Sort@DrawList@@QAEXXZ				; DrawList::Sort
PUBLIC	?Id@ScreenItem@@QBEJXZ				; ScreenItem::Id
PUBLIC	?Priority@ScreenItem@@QBEHXZ			; ScreenItem::Priority
_TEXT	SEGMENT
_this$ = -20
_i$ = -4
_swap$56584 = -12
_j$56585 = -8
_temp$56592 = -16
?Sort@DrawList@@QAEXXZ PROC NEAR			; DrawList::Sort

; 80   : {

  00200	55		 push	 ebp
  00201	8b ec		 mov	 ebp, esp
  00203	83 ec 14	 sub	 esp, 20			; 00000014H
  00206	56		 push	 esi
  00207	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 	//  Sorts Draw List from lo to high priority
; 82   : 	//  The list is packed before sorting.
; 83   : 	//
; 84   : 	//  Algorithm is modified bubble sort.   Feel free to replace
; 85   : 	//  with a better performance one, but remember that the list is
; 86   : 	//  usually very small (est. 100 elements or less).
; 87   : 	Pack();

  0020a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0020d	e8 00 00 00 00	 call	 ?Pack@DrawList@@QAEXXZ	; DrawList::Pack

; 88   : 	for (int i = length - 1; i > 0; i--)  {

  00212	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00215	8b 08		 mov	 ecx, DWORD PTR [eax]
  00217	83 e9 01	 sub	 ecx, 1
  0021a	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  0021d	eb 09		 jmp	 SHORT $L56581
$L56582:
  0021f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00222	83 ea 01	 sub	 edx, 1
  00225	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L56581:
  00228	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  0022c	0f 8e 6c 01 00
	00		 jle	 $L56583

; 89   : 		int swap = False;

  00232	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _swap$56584[ebp], 0

; 90   : 
; 91   : 		for (int j = 0; j < i; j++)  {

  00239	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$56585[ebp], 0
  00240	eb 09		 jmp	 SHORT $L56586
$L56587:
  00242	8b 45 f8	 mov	 eax, DWORD PTR _j$56585[ebp]
  00245	83 c0 01	 add	 eax, 1
  00248	89 45 f8	 mov	 DWORD PTR _j$56585[ebp], eax
$L56586:
  0024b	8b 4d f8	 mov	 ecx, DWORD PTR _j$56585[ebp]
  0024e	3b 4d fc	 cmp	 ecx, DWORD PTR _i$[ebp]
  00251	0f 8d 3a 01 00
	00		 jge	 $L56588

; 93   : 				   (drawArray[j]->si->Priority() > drawArray[j+1]->si->Priority()) 
; 94   : 				   ||
; 95   : 				   (
; 96   : 				      (drawArray[j]->si->Priority() == drawArray[j+1]->si->Priority()) 
; 97   : 				      &&
; 98   :                   (
; 99   : 				         (drawArray[j]->si->pos.y + drawArray[j]->si->z > drawArray[j+1]->si->pos.y+ drawArray[j+1]->si->z)
; 100  : 				         ||
; 101  :                      (
; 102  : 				            (drawArray[j]->si->pos.y + drawArray[j]->si->z == drawArray[j+1]->si->pos.y + drawArray[j+1]->si->z)
; 103  :                         &&
; 104  :                         (drawArray[j]->si->Id() > drawArray[j+1]->si->Id())
; 105  : 				         )
; 106  :                   )
; 107  :                )
; 108  : 				)  {

  00257	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  0025a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0025d	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  00261	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00263	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  00268	8b f0		 mov	 esi, eax
  0026a	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  0026d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00270	8b 4c 90 08	 mov	 ecx, DWORD PTR [eax+edx*4+8]
  00274	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00276	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  0027b	3b f0		 cmp	 esi, eax
  0027d	0f 8f d4 00 00
	00		 jg	 $L56591
  00283	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  00286	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00289	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  0028d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0028f	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  00294	8b f0		 mov	 esi, eax
  00296	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  00299	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0029c	8b 4c 90 08	 mov	 ecx, DWORD PTR [eax+edx*4+8]
  002a0	8b 09		 mov	 ecx, DWORD PTR [ecx]
  002a2	e8 00 00 00 00	 call	 ?Priority@ScreenItem@@QBEHXZ ; ScreenItem::Priority
  002a7	3b f0		 cmp	 esi, eax
  002a9	0f 85 dd 00 00
	00		 jne	 $L56589
  002af	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  002b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  002b5	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  002b9	8b 11		 mov	 edx, DWORD PTR [ecx]
  002bb	8b 45 f8	 mov	 eax, DWORD PTR _j$56585[ebp]
  002be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002c1	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]
  002c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c7	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  002ca	03 51 08	 add	 edx, DWORD PTR [ecx+8]
  002cd	8b 45 f8	 mov	 eax, DWORD PTR _j$56585[ebp]
  002d0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002d3	8b 44 81 08	 mov	 eax, DWORD PTR [ecx+eax*4+8]
  002d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d9	8b 45 f8	 mov	 eax, DWORD PTR _j$56585[ebp]
  002dc	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  002df	8b 44 86 08	 mov	 eax, DWORD PTR [esi+eax*4+8]
  002e3	8b 00		 mov	 eax, DWORD PTR [eax]
  002e5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  002e8	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  002eb	3b d1		 cmp	 edx, ecx
  002ed	7f 68		 jg	 SHORT $L56591
  002ef	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  002f2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  002f5	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  002f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  002fb	8b 45 f8	 mov	 eax, DWORD PTR _j$56585[ebp]
  002fe	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00301	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]
  00305	8b 08		 mov	 ecx, DWORD PTR [eax]
  00307	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0030a	03 51 08	 add	 edx, DWORD PTR [ecx+8]
  0030d	8b 45 f8	 mov	 eax, DWORD PTR _j$56585[ebp]
  00310	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00313	8b 44 81 08	 mov	 eax, DWORD PTR [ecx+eax*4+8]
  00317	8b 08		 mov	 ecx, DWORD PTR [eax]
  00319	8b 45 f8	 mov	 eax, DWORD PTR _j$56585[ebp]
  0031c	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0031f	8b 44 86 08	 mov	 eax, DWORD PTR [esi+eax*4+8]
  00323	8b 00		 mov	 eax, DWORD PTR [eax]
  00325	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00328	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  0032b	3b d1		 cmp	 edx, ecx
  0032d	75 5d		 jne	 SHORT $L56589
  0032f	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  00332	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00335	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  00339	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0033b	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  00340	8b f0		 mov	 esi, eax
  00342	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  00345	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00348	8b 4c 90 08	 mov	 ecx, DWORD PTR [eax+edx*4+8]
  0034c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0034e	e8 00 00 00 00	 call	 ?Id@ScreenItem@@QBEJXZ	; ScreenItem::Id
  00353	3b f0		 cmp	 esi, eax
  00355	7e 35		 jle	 SHORT $L56589
$L56591:

; 109  : 				DrawItem* temp = drawArray[j+1];

  00357	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  0035a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0035d	8b 4c 90 08	 mov	 ecx, DWORD PTR [eax+edx*4+8]
  00361	89 4d f0	 mov	 DWORD PTR _temp$56592[ebp], ecx

; 110  : 				drawArray[j+1] = drawArray[j];

  00364	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  00367	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0036a	8b 4d f8	 mov	 ecx, DWORD PTR _j$56585[ebp]
  0036d	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00370	8b 4c 8e 04	 mov	 ecx, DWORD PTR [esi+ecx*4+4]
  00374	89 4c 90 08	 mov	 DWORD PTR [eax+edx*4+8], ecx

; 111  : 				drawArray[j] = temp;

  00378	8b 55 f8	 mov	 edx, DWORD PTR _j$56585[ebp]
  0037b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0037e	8b 4d f0	 mov	 ecx, DWORD PTR _temp$56592[ebp]
  00381	89 4c 90 04	 mov	 DWORD PTR [eax+edx*4+4], ecx

; 112  : 				swap = True;

  00385	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _swap$56584[ebp], 1
$L56589:

; 114  : 		}

  0038c	e9 b1 fe ff ff	 jmp	 $L56587
$L56588:

; 115  : 		if (!swap)

  00391	83 7d f4 00	 cmp	 DWORD PTR _swap$56584[ebp], 0
  00395	75 02		 jne	 SHORT $L56593

; 116  : 			break;

  00397	eb 05		 jmp	 SHORT $L56583
$L56593:

; 117  : 	}

  00399	e9 81 fe ff ff	 jmp	 $L56582
$L56583:

; 118  : }

  0039e	5e		 pop	 esi
  0039f	8b e5		 mov	 esp, ebp
  003a1	5d		 pop	 ebp
  003a2	c3		 ret	 0
?Sort@DrawList@@QAEXXZ ENDP				; DrawList::Sort
_TEXT	ENDS
;	COMDAT ?Id@ScreenItem@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?Id@ScreenItem@@QBEJXZ PROC NEAR			; ScreenItem::Id, COMDAT

; 61   : 	long			Id() const					{return id;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Id@ScreenItem@@QBEJXZ ENDP				; ScreenItem::Id
_TEXT	ENDS
;	COMDAT ?Priority@ScreenItem@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?Priority@ScreenItem@@QBEHXZ PROC NEAR			; ScreenItem::Priority, COMDAT

; 64   : 	int			Priority() const			{return priority;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Priority@ScreenItem@@QBEHXZ ENDP			; ScreenItem::Priority
_TEXT	ENDS
PUBLIC	??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z		; SOL_Rect::SOL_Rect
;	COMDAT ??0DrawItem@@QAE@PAVScreenItem@@AAVSOL_Rect@@@Z
_TEXT	SEGMENT
_theSi$ = 8
_rect$ = 12
_this$ = -4
??0DrawItem@@QAE@PAVScreenItem@@AAVSOL_Rect@@@Z PROC NEAR ; DrawItem::DrawItem, COMDAT

; 14   : 		{si = theSi;} 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _rect$[ebp]
  0000a	83 c0 08	 add	 eax, 8
  0000d	50		 push	 eax
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _rect$[ebp]
  00011	51		 push	 ecx
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	e8 00 00 00 00	 call	 ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z ; SOL_Rect::SOL_Rect
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 45 08	 mov	 eax, DWORD PTR _theSi$[ebp]
  00023	89 02		 mov	 DWORD PTR [edx], eax
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
??0DrawItem@@QAE@PAVScreenItem@@AAVSOL_Rect@@@Z ENDP	; DrawItem::DrawItem
_TEXT	ENDS
PUBLIC	??0SOL_Point@@QAE@XZ				; SOL_Point::SOL_Point
PUBLIC	??4SOL_Point@@QAEAAV0@ABV0@@Z			; SOL_Point::operator=
;	COMDAT ??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z
_TEXT	SEGMENT
_left$ = 8
_right$ = 12
_this$ = -4
??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z PROC NEAR		; SOL_Rect::SOL_Rect, COMDAT

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0SOL_Point@@QAE@XZ	; SOL_Point::SOL_Point

; 65   : 	A = left;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _left$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 66   : 	B = right;

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _right$[ebp]
  00029	51		 push	 ecx
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	83 c1 08	 add	 ecx, 8
  00030	e8 00 00 00 00	 call	 ??4SOL_Point@@QAEAAV0@ABV0@@Z ; SOL_Point::operator=

; 67   : }

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
??0SOL_Rect@@QAE@AAVSOL_Point@@0@Z ENDP			; SOL_Rect::SOL_Rect
_TEXT	ENDS
;	COMDAT ??0SOL_Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SOL_Point@@QAE@XZ PROC NEAR				; SOL_Point::SOL_Point, COMDAT

; 20   : 	SOL_Point() : x(DefaultCoord), y(DefaultCoord) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 ef cd ab
	89		 mov	 DWORD PTR [eax], -1985229329 ; 89abcdefH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 ef cd
	ab 89		 mov	 DWORD PTR [ecx+4], -1985229329 ; 89abcdefH
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0SOL_Point@@QAE@XZ ENDP				; SOL_Point::SOL_Point
_TEXT	ENDS
;	COMDAT ??4SOL_Point@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8
_this$ = -4
??4SOL_Point@@QAEAAV0@ABV0@@Z PROC NEAR			; SOL_Point::operator=, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	x = p.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 119  : 	y = p.y;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 120  : 	return *this;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 121  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4SOL_Point@@QAEAAV0@ABV0@@Z ENDP			; SOL_Point::operator=
_TEXT	ENDS
END

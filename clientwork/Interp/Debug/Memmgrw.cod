	TITLE	C:\Documents and Settings\don\Desktop\sciw\Interp\Memmgrw.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_07CCG@ResView?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCEF@?4v56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IAEF@ResPic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EODC@?4p56?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCKJ@ResChunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIPI@?4chk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ICMB@ResHunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GG@?4scr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BLBP@ResSound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KPDA@?4snd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NNMB@ResVocab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PGDD@?4voc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FLKK@ResPatch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CEHK@?4pat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MKGC@ResFont?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IDCK@?4fon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEEM@ResPal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NJLC@?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFNL@ResHeap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GFFD@?4hep?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HDCC@ResMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JONM@?4msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NFDN@ResAudio?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MOHF@?4aud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BKMJ@ResWave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPDF@?4wav?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IMEI@ResAudio36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BONB@ResSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFFK@?4syn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBJE@ResSync36?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIEL@ResMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFLF@?4map?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LIAH@ResMsgTranslation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JFJA@?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JLOL@ResRobot?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLKI@?4rbt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEMP@ResVMD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04IOID@?4vmd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAddr@MemoryMgr@@QAEPAXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckValid@MemoryMgr@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValid@MemoryMgr@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemID@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@MemID@@QAEXW4MemType@@IIIPAUMemClient@@DW4ReservedHandle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DMemID@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??AMemID@@QBEAADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8MemID@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExtension@SOL_ResType@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSupported@SOL_ResType@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttrs@SOL_ResType@@UBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@SOL_ResType@@MBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResView@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPic@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResChunk@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResScript@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSound@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVocab@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPatch@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResFont@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResPal@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResHeap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsg@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResWave@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResAudio36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResSync36@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMap@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@ResMsgTranslation@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResRobot@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetType@ResVMD@@UBE?AW4MemType@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7ResPic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResWave@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResRobot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResPatch@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsgTranslation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResScript@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMsg@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio36@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResAudio@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgr@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVMD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResChunk@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSync@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResVocab@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ResSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7MemoryMgrWin@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?GetSysMemAvail@MemoryMgrWin@@UAEIXZ		; MemoryMgrWin::GetSysMemAvail
_BSS	SEGMENT
_sysMemAvail DD	01H DUP (?)
_BSS	ENDS
_TEXT	SEGMENT
_this$ = -4
?GetSysMemAvail@MemoryMgrWin@@UAEIXZ PROC NEAR		; MemoryMgrWin::GetSysMemAvail

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 	return sysMemAvail;

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR _sysMemAvail

; 38   : }

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetSysMemAvail@MemoryMgrWin@@UAEIXZ ENDP		; MemoryMgrWin::GetSysMemAvail
_TEXT	ENDS
PUBLIC	?GetSysMem@MemoryMgrWin@@UAEPADI@Z		; MemoryMgrWin::GetSysMem
EXTRN	__imp__sprintf:NEAR
EXTRN	__imp__exit:NEAR
EXTRN	?mbuff@@3PADA:BYTE				; mbuff
EXTRN	?MBox@@YAXPAD0@Z:NEAR				; MBox
_BSS	SEGMENT
_sysMemAddr DD	01H DUP (?)
$SG56273 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG56272 DB	'asking:%d, have:%d', 00H
_DATA	ENDS
_TEXT	SEGMENT
_theSize$ = 8
_this$ = -4
?GetSysMem@MemoryMgrWin@@UAEPADI@Z PROC NEAR		; MemoryMgrWin::GetSysMem

; 42   : {

  00010	55		 push	 ebp
  00011	8b ec		 mov	 ebp, esp
  00013	51		 push	 ecx
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 	if (theSize > sysMemAvail) {

  00017	8b 45 08	 mov	 eax, DWORD PTR _theSize$[ebp]
  0001a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _sysMemAvail
  00020	76 3b		 jbe	 SHORT $L56271

; 44   : 		sprintf(mbuff,"asking:%d, have:%d",theSize,sysMemAvail);

  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sysMemAvail
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR _theSize$[ebp]
  0002c	52		 push	 edx
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:$SG56272
  00032	68 00 00 00 00	 push	 OFFSET FLAT:?mbuff@@3PADA ; mbuff
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 45   : 		MBox(mbuff,"");

  00040	68 00 00 00 00	 push	 OFFSET FLAT:$SG56273
  00045	68 00 00 00 00	 push	 OFFSET FLAT:?mbuff@@3PADA ; mbuff
  0004a	e8 00 00 00 00	 call	 ?MBox@@YAXPAD0@Z	; MBox
  0004f	83 c4 08	 add	 esp, 8

; 46   : 		exit(255);

  00052	68 ff 00 00 00	 push	 255			; 000000ffH
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
$L56271:

; 48   : 	return sysMemAddr;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR _sysMemAddr
$L56270:

; 49   : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?GetSysMem@MemoryMgrWin@@UAEPADI@Z ENDP			; MemoryMgrWin::GetSysMem
_TEXT	ENDS
PUBLIC	??1MemoryMgr@@UAE@XZ				; MemoryMgr::~MemoryMgr
PUBLIC	??1MemoryMgrWin@@UAE@XZ				; MemoryMgrWin::~MemoryMgrWin
PUBLIC	?GetConvMemAvail@MemoryMgrWin@@UAEIXZ		; MemoryMgrWin::GetConvMemAvail
PUBLIC	?GetConvMem@MemoryMgrWin@@UAEPADI@Z		; MemoryMgrWin::GetConvMem
PUBLIC	?FreeConvMem@MemoryMgrWin@@UAEXPAD@Z		; MemoryMgrWin::FreeConvMem
PUBLIC	??_7MemoryMgrWin@@6B@				; MemoryMgrWin::`vftable'
PUBLIC	??_GMemoryMgrWin@@UAEPAXI@Z			; MemoryMgrWin::`scalar deleting destructor'
PUBLIC	??_EMemoryMgrWin@@UAEPAXI@Z			; MemoryMgrWin::`vector deleting destructor'
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?soundMgr@@3PAVSoundMgr@@A:DWORD		; soundMgr
;	COMDAT ??_7MemoryMgrWin@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\Memmgrw.cpp
CONST	SEGMENT
??_7MemoryMgrWin@@6B@ DD FLAT:??_EMemoryMgrWin@@UAEPAXI@Z ; MemoryMgrWin::`vftable'
	DD	FLAT:?GetConvMemAvail@MemoryMgrWin@@UAEIXZ
	DD	FLAT:?GetConvMem@MemoryMgrWin@@UAEPADI@Z
	DD	FLAT:?FreeConvMem@MemoryMgrWin@@UAEXPAD@Z
	DD	FLAT:?GetSysMemAvail@MemoryMgrWin@@UAEIXZ
	DD	FLAT:?GetSysMem@MemoryMgrWin@@UAEPADI@Z
CONST	ENDS
xdata$x	SEGMENT
$T56431	DD	019930520H
	DD	01H
	DD	FLAT:$T56434
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T56434	DD	0ffffffffH
	DD	FLAT:$L56427
xdata$x	ENDS
_TEXT	SEGMENT
$T56423 = -16
$T56424 = -20
__$EHRec$ = -12
_this$ = -24
??1MemoryMgrWin@@UAE@XZ PROC NEAR			; MemoryMgrWin::~MemoryMgrWin

; 53   : {

  00068	55		 push	 ebp
  00069	8b ec		 mov	 ebp, esp
  0006b	6a ff		 push	 -1
  0006d	68 00 00 00 00	 push	 $L56432
  00072	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00078	50		 push	 eax
  00079	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00080	83 ec 10	 sub	 esp, 16			; 00000010H
  00083	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00086	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00089	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7MemoryMgrWin@@6B@ ; MemoryMgrWin::`vftable'
  0008f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 54   : #ifdef DEBUG
; 55   : 	if (configMgr->Get(configMgr->RoomMinK)) {
; 56   : 		sprintf(mbuff,"Min bytes required:%d in Room# %d\n",gameMaxAloc,gameMaxRoom);
; 57   : 		MBox(mbuff,"");
; 58   : 	}
; 59   : #endif
; 60   : 
; 61   : // VC FIX	EndThunk();
; 62   : 	delete soundMgr;

  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?soundMgr@@3PAVSoundMgr@@A ; soundMgr
  0009c	89 4d ec	 mov	 DWORD PTR $T56424[ebp], ecx
  0009f	8b 55 ec	 mov	 edx, DWORD PTR $T56424[ebp]
  000a2	89 55 f0	 mov	 DWORD PTR $T56423[ebp], edx
  000a5	83 7d f0 00	 cmp	 DWORD PTR $T56423[ebp], 0
  000a9	74 11		 je	 SHORT $L56425
  000ab	6a 01		 push	 1
  000ad	8b 45 f0	 mov	 eax, DWORD PTR $T56423[ebp]
  000b0	8b 10		 mov	 edx, DWORD PTR [eax]
  000b2	8b 4d f0	 mov	 ecx, DWORD PTR $T56423[ebp]
  000b5	ff 12		 call	 DWORD PTR [edx]
  000b7	89 45 e4	 mov	 DWORD PTR -28+[ebp], eax
  000ba	eb 07		 jmp	 SHORT $L56426
$L56425:
  000bc	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR -28+[ebp], 0
$L56426:

; 63   : //	FreeWinDlls();
; 64   : }

  000c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ca	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	e8 00 00 00 00	 call	 ??1MemoryMgr@@UAE@XZ	; MemoryMgr::~MemoryMgr
  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
$L56427:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e8 00 00 00 00	 call	 ??1MemoryMgr@@UAE@XZ	; MemoryMgr::~MemoryMgr
  00008	c3		 ret	 0
$L56432:
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T56431
  0000e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1MemoryMgrWin@@UAE@XZ ENDP				; MemoryMgrWin::~MemoryMgrWin
_TEXT	SEGMENT
_this$ = -4
?GetConvMemAvail@MemoryMgrWin@@UAEIXZ PROC NEAR		; MemoryMgrWin::GetConvMemAvail

; 69   : {

  000e0	55		 push	 ebp
  000e1	8b ec		 mov	 ebp, esp
  000e3	51		 push	 ecx
  000e4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 70   : 	return 0;

  000e7	33 c0		 xor	 eax, eax

; 71   : }

  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
?GetConvMemAvail@MemoryMgrWin@@UAEIXZ ENDP		; MemoryMgrWin::GetConvMemAvail
_bytes$ = 8
_this$ = -8
_x$ = -4
?GetConvMem@MemoryMgrWin@@UAEPADI@Z PROC NEAR		; MemoryMgrWin::GetConvMem

; 75   : {

  000ed	55		 push	 ebp
  000ee	8b ec		 mov	 ebp, esp
  000f0	83 ec 08	 sub	 esp, 8
  000f3	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 76   : 	size_t x = bytes;

  000f6	8b 45 08	 mov	 eax, DWORD PTR _bytes$[ebp]
  000f9	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 77   : 	return NULL;

  000fc	33 c0		 xor	 eax, eax

; 78   : }

  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 04 00	 ret	 4
?GetConvMem@MemoryMgrWin@@UAEPADI@Z ENDP		; MemoryMgrWin::GetConvMem
_base$ = 8
_this$ = -8
_x$ = -4
?FreeConvMem@MemoryMgrWin@@UAEXPAD@Z PROC NEAR		; MemoryMgrWin::FreeConvMem

; 82   : {

  00104	55		 push	 ebp
  00105	8b ec		 mov	 ebp, esp
  00107	83 ec 08	 sub	 esp, 8
  0010a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	char *x = base;

  0010d	8b 45 08	 mov	 eax, DWORD PTR _base$[ebp]
  00110	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 84   : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 04 00	 ret	 4
?FreeConvMem@MemoryMgrWin@@UAEXPAD@Z ENDP		; MemoryMgrWin::FreeConvMem
_TEXT	ENDS
PUBLIC	?GetWindowsMemory@@YAXXZ			; GetWindowsMemory
EXTRN	?cursorBuffAddr@@3PAEA:DWORD			; cursorBuffAddr
_TEXT	SEGMENT
?GetWindowsMemory@@YAXXZ PROC NEAR			; GetWindowsMemory

; 87   : {

  00119	55		 push	 ebp
  0011a	8b ec		 mov	 ebp, esp

; 88   : 	sysMemAddr		= NULL;

  0011c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sysMemAddr, 0

; 89   : 	cursorBuffAddr	= NULL;

  00126	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?cursorBuffAddr@@3PAEA, 0 ; cursorBuffAddr

; 90   : }

  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
?GetWindowsMemory@@YAXXZ ENDP				; GetWindowsMemory
_TEXT	ENDS
PUBLIC	?AllocWinMem@@YAPAXHH@Z				; AllocWinMem
_TEXT	SEGMENT
?AllocWinMem@@YAPAXHH@Z PROC NEAR			; AllocWinMem

; 103  : {

  00132	55		 push	 ebp
  00133	8b ec		 mov	 ebp, esp

; 104  : 	return (void far *)NULL;

  00135	33 c0		 xor	 eax, eax

; 105  : }

  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
?AllocWinMem@@YAPAXHH@Z ENDP				; AllocWinMem
_TEXT	ENDS
PUBLIC	?FreeWinMem@@YAXPAXH@Z				; FreeWinMem
_TEXT	SEGMENT
?FreeWinMem@@YAXPAXH@Z PROC NEAR			; FreeWinMem

; 108  : {

  00139	55		 push	 ebp
  0013a	8b ec		 mov	 ebp, esp

; 109  : }

  0013c	5d		 pop	 ebp
  0013d	c3		 ret	 0
?FreeWinMem@@YAXPAXH@Z ENDP				; FreeWinMem
_TEXT	ENDS
PUBLIC	?BaseMem@@YAHXZ					; BaseMem
_TEXT	SEGMENT
?BaseMem@@YAHXZ PROC NEAR				; BaseMem

; 112  : {

  0013e	55		 push	 ebp
  0013f	8b ec		 mov	 ebp, esp

; 113  : 	return 0;

  00141	33 c0		 xor	 eax, eax

; 114  : }

  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
?BaseMem@@YAHXZ ENDP					; BaseMem
_TEXT	ENDS
PUBLIC	?ExtendedMem@@YAHXZ				; ExtendedMem
_TEXT	SEGMENT
?ExtendedMem@@YAHXZ PROC NEAR				; ExtendedMem

; 117  : {

  00145	55		 push	 ebp
  00146	8b ec		 mov	 ebp, esp

; 118  : 	return 0;

  00148	33 c0		 xor	 eax, eax

; 119  : }

  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
?ExtendedMem@@YAHXZ ENDP				; ExtendedMem
_TEXT	ENDS
PUBLIC	??_7MemoryMgr@@6B@				; MemoryMgr::`vftable'
PUBLIC	??_GMemoryMgr@@UAEPAXI@Z			; MemoryMgr::`scalar deleting destructor'
PUBLIC	??_EMemoryMgr@@UAEPAXI@Z			; MemoryMgr::`vector deleting destructor'
EXTRN	__purecall:NEAR
;	COMDAT ??_7MemoryMgr@@6B@
; File C:\Documents and Settings\don\Desktop\sciw\Interp\memmgr.hpp
CONST	SEGMENT
??_7MemoryMgr@@6B@ DD FLAT:??_EMemoryMgr@@UAEPAXI@Z	; MemoryMgr::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??1MemoryMgr@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1MemoryMgr@@UAE@XZ PROC NEAR				; MemoryMgr::~MemoryMgr, COMDAT

; 291  : 	virtual ~MemoryMgr() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7MemoryMgr@@6B@ ; MemoryMgr::`vftable'
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1MemoryMgr@@UAE@XZ ENDP				; MemoryMgr::~MemoryMgr
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ??_GMemoryMgr@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GMemoryMgr@@UAEPAXI@Z PROC NEAR			; MemoryMgr::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1MemoryMgr@@UAE@XZ	; MemoryMgr::~MemoryMgr
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L52448
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L52448:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GMemoryMgr@@UAEPAXI@Z ENDP				; MemoryMgr::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??_GMemoryMgrWin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GMemoryMgrWin@@UAEPAXI@Z PROC NEAR			; MemoryMgrWin::`scalar deleting destructor', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1MemoryMgrWin@@UAE@XZ	; MemoryMgrWin::~MemoryMgrWin
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L53134
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L53134:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GMemoryMgrWin@@UAEPAXI@Z ENDP			; MemoryMgrWin::`scalar deleting destructor'
_TEXT	ENDS
END
